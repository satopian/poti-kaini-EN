{"mappings":"C,A,W,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,A,C,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,C,E,iB,C,E,E,Q,C,E,Q,S,C,C,C,E,a,I,E,A,E,S,M,C,E,E,O,E,E,O,C,e,E,C,O,M,C,S,C,C,C,C,C,C,C,E,A,K,I,G,C,E,C,E,I,E,O,wB,C,E,E,C,C,C,G,C,Q,E,C,E,U,C,E,Q,E,E,Y,A,C,G,C,E,C,W,C,E,I,W,O,C,C,E,A,C,C,E,O,c,C,E,E,E,E,S,C,C,C,C,C,C,C,E,A,K,I,G,C,E,C,E,C,C,E,C,C,C,E,A,C,E,E,E,O,E,E,O,C,Y,E,S,C,C,C,E,I,I,K,E,A,Y,G,O,S,C,c,C,I,C,E,I,E,E,E,E,E,O,c,C,E,O,C,a,C,M,C,C,G,E,O,C,c,C,E,O,C,kB,C,E,O,C,Q,C,E,O,C,O,C,E,O,C,iB,C,E,O,C,gB,C,K,E,I,E,E,S,E,E,S,E,E,SEKA,EAAA,EAAA,SAAA,EAAA,OAAA,EACA,EAAA,EAAA,SAAA,EAAA,OAAA,E,I,E,E,SA0BA,SAAgB,EAAmB,CAAQ,CAAE,CAAsB,EAClE,IAAM,EAAS,AAAA,CAAA,EAAA,EAAA,YAAA,AAAA,IAEf,MADA,AAAA,CAAA,EAAA,EAAA,QAAA,AAAA,EAAiB,EAAQ,EAAK,GACvB,AAAA,CAAA,EAAA,EAAA,qBAAA,AAAA,EAAsB,EAC9B,CA7BS,OAAA,cAAA,CAAA,EAAA,OAAA,CAAA,mBAAA,CAAA,WAAA,CAAA,EAAA,IAAA,WAAA,OAAA,EAAA,gBAAA,AAAgB,CAAA,GACzB,EAAA,EAAA,SAAA,EAAA,OAAA,EASa,EAAA,OAAA,CAAA,iBAAiB,CAAG,EAApB,aAAA,CAEb,EAAA,OAAA,CAAA,OAAA,CAAA,SAAwB,CAAgC,CAAE,CAAqB,EAC9E,IAAM,EAAS,WAAY,EAC1B,AAAA,CAAA,EAAA,EAAA,YAAA,AAAA,EAAa,EAAO,MAAM,CAAE,EAAO,UAAU,CAAE,EAAO,UAAU,EAChE,AAAA,CAAA,EAAA,EAAA,YAAA,AAAA,EAAa,GACd,MAAO,AAAA,CAAA,EAAA,EA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AAG,CAAC,GAAS,KAAK,GAAG,EACrC,EAAS,CAAA,EAAI,KAAK,GAAG,CAAC,EAAG,CAAC,EAAA,EAAM,IAClC,IACA,GAAK,GAEH,EAAI,GAAS,EACf,GAAS,EAAK,EAEd,GAAS,EAAK,KAAK,GAAG,CAAC,EAAG,EAAI,GAE5B,EAAQ,GAAK,IACf,IACA,GAAK,GAGH,EAAI,GAAS,GACf,EAAI,EACJ,EAAI,GACK,EAAI,GAAS,GACtB,EAAI,AAAC,CAAA,EAAS,EAAK,CAAA,EAAK,KAAK,GAAG,CAAC,EAAG,GACpC,GAAQ,IAER,EAAI,EAAQ,KAAK,GAAG,CAAC,EAAG,EAAQ,GAAK,KAAK,GAAG,CAAC,EAAG,GACjD,EAAI,IAID,GAAQ,EAAG,CAAM,CAAC,EAAS,EAAE,CAAG,AAAI,IAAJ,EAAU,GAAK,EAAG,GAAK,IAAK,GAAQ,GAI3E,IAFA,EAAK,GAAK,EAAQ,EAClB,GAAQ,EACD,EAAO,EAAG,CAAM,CAAC,EAAS,EAAE,CAAG,AAAI,IAAJ,EAAU,GAAK,EAAG,GAAK,IAAK,GAAQ,GAE1E,CAAM,CAAC,EAAS,EAAI,EAAE,EAAI,AAAI,IAAJ,CAC5B,C,G,E,Q,S,C,C,C,E,a,I,E,E,O,E,E,O,C,Q,E,W,M,A,C,E,O,M,E,S,C,E,I,I,E,E,E,E,U,M,C,E,E,I,I,I,K,E,S,C,E,C,O,S,C,c,C,I,C,E,I,C,C,C,E,C,C,C,E,A,E,O,C,C,E,K,C,I,C,U,E,O,c,C,E,O,C,a,C,M,C,C,G,E,O,C,U,C,E,O,C,Q,C,E,O,C,Y,C,E,O,C,6B,C,E,O,C,kB,C,E,O,C,iC,C,E,O,C,+B,C,E,O,C,iB,C,E,O,C,c,C,E,O,C,U,C,E,O,C,U,C,E,O,C,qB,C,E,O,C,iB,C,E,O,C,Y,C,E,O,C,Y,C,E,O,C,W,C,E,O,C,Y,C,E,O,C,U,C,E,O,C,a,C,E,O,C,W,C,E,O,C,U,C,E,O,C,U,C,E,O,C,qB,C,E,O,C,e,C,E,O,C,Y,C,K,E,I,E,E,S,E,E,S,E,E,SEzDA,SAAgB,EAAW,CAAiB,CAAE,CAAa,EAC1D,IAAM,EAAS,EAAQ,EAAQ,GAC/B,EAAO,IAAI,CAAC,QAAQ,CAAC,EA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ACpC,EAAiB,EAAQ,EAAM,gBAAgB,EAAI,GACnD,EAAiB,EAAQ,EAAM,aAAa,EAAI,GAChD,AAAA,CAAA,EAAA,EAAA,UAAA,AAAA,EAAW,EAAQ,GAAA,EAAM,OAAO,EAChC,AAAA,CAAA,EAAA,EAAA,UAAA,AAAA,EAAW,EAAQ,GAAA,EAAM,cAAc,EACvC,AAAA,CAAA,EAAA,EAAA,UAAA,AAAA,EAAW,EAAQ,CAAA,CAAA,AAAoB,SAApB,EAAM,SAAS,AAAK,GACvC,AAAA,CAAA,EAAA,EAAA,UAAA,AAAA,EAAW,EAAQ,EAAM,cAAc,EACvC,AAAA,CAAA,EAAA,EAAA,UAAA,AAAA,EAAW,EAAQ,EAAM,WAAW,CACpC,CAEG,IACH,AAAA,CAAA,EAAA,EAAA,cAAA,AAAA,EAAe,EAAQ,QACvB,AAAA,CAAA,EAAA,EAAA,cAAA,AAAA,EAAe,EAAQ,QACvB,AAAA,CAAA,EAAA,EAAA,WAAA,AAAA,EAAY,EAAQ,IACpB,AAAA,CAAA,EAAA,EAAA,WAAA,AAAA,EAAY,EAAQ,GACpB,EAAe,EAAQ,EAAU,SAAS,EAC1C,AAAA,CAAA,EAAA,EAAA,UAAA,AAAA,EAAW,EAAQ,EAAU,KAAK,EAClC,EAAiB,EAAQ,EAAU,OAAO,EAAI,GAC9C,AAAA,CAAA,EAAA,EAAA,UAAA,AAAA,EAAW,EAAQ,GAAA,EAAU,OAAO,EACpC,AAAA,CAAA,EAAA,EAAA,UAAA,AAAA,EAAW,EAAQ,EAAU,KAAK,EAEpC,C,G,E,Q,S,C,C,C,E,a,I,E,E,O,E,E,O,C,M,E,S,C,C,C,E,I,E,C,E,I,I,K,E,O,S,C,c,C,I,C,E,I,A,E,E,O,C,I,C,C,C,E,C,C,C,E,A,E,G,A,M,G,A,Y,O,O,qB,C,I,I,E,E,E,O,qB,C,G,E,E,M,C,I,A,E,E,O,C,C,C,E,G,O,S,C,oB,C,I,C,E,C,C,E,G,C,C,C,C,C,E,C,C,C,C,C,C,E,C,A,E,O,C,E,O,c,C,E,O,C,a,C,M,C,C,G,E,O,C,W,C,E,O,C,S,C,E,O,C,W,C,E,O,C,W,C,E,O,C,W,C,E,O,C,uB,C,E,O,C,uB,C,E,O,C,uB,C,E,O,C,Q,C,E,O,C,a,C,E,O,C,O,C,E,O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,E,E,E,U,M,C,E,E,I,I,I,K,E,S,C,E,C,O,S,C,c,C,I,C,E,I,C,C,C,E,C,C,C,E,A,E,O,C,C,E,K,C,I,C,U,E,E,E,O,E,E,O,C,M,E,S,C,C,C,E,I,E,C,E,I,I,K,E,O,S,C,c,C,I,C,E,I,A,E,E,O,C,I,C,C,C,E,C,C,C,E,A,E,G,A,M,G,A,Y,O,O,qB,C,I,I,E,E,E,O,qB,C,G,E,E,M,C,I,A,E,E,O,C,C,C,E,G,O,S,C,oB,C,I,C,E,C,C,E,G,C,C,C,C,C,E,C,C,C,C,C,C,E,C,A,E,O,C,E,O,c,C,E,O,C,a,C,M,C,C,G,E,O,C,Y,C,E,O,C,e,C,E,O,C,e,C,E,O,C,U,C,E,O,C,I,C,E,O,C,I,C,E,O,C,I,C,E,O,C,+B,C,E,O,C,U,C,E,O,C,mB,C,E,O,C,I,C,E,O,C,I,C,E,O,C,I,C,E,O,C,I,C,E,O,C,I,C,E,O,C,I,C,E,O,C,I,C,E,O,C,S,C,E,O,C,I,C,E,O,C,I,C,E,O,C,Y,C,E,O,C,I,C,E,O,C,U,C,E,O,C,a,C,E,O,C,Y,C,E,O,C,U,C,E,O,C,kB,C,E,O,C,kB,C,E,O,C,U,C,E,O,C,mB,C,E,O,C,Y,C,E,O,C,U,C,E,O,C,c,C,E,O,C,U,C,E,O,C,sB,C,E,O,C,kB,C,E,O,C,kB,C,E,O,C,c,C,E,O,C,Y,C,E,O,C,gB,C,E,O,C,kB,C,E,O,C,kB,C,E,O,C,Y,C,E,O,C,Y,C,E,O,C,yB,C,E,O,C,wB,C,E,O,C,wB,C,E,O,C,uB,C,E,O,C,wB,C,E,O,C,Y,C,K,E,E,O,C,c,C,E,O,C,I,C,E,O,C,I,C,E,O,C,I,C,E,O,C,I,C,E,O,C,I,C,E,O,C,I,C,E,O,C,I,C,E,O,C,I,C,E,O,C,I,C,E,O,C,I,C,E,O,C,I,C,E,O,C,Q,C,E,O,C,G,C,E,O,C,I,C,E,O,C,I,C,E,O,C,I,C,E,O,C,I,C,E,O,C,I,C,E,O,C,I,C,E,O,C,I,C,E,O,C,I,C,E,O,C,I,C,E,O,C,I,C,E,O,C,I,C,E,O,C,I,C,E,O,C,I,C,E,O,C,I,C,E,O,C,wB,C,E,O,C,uB,C,E,O,C,sB,C,E,O,C,iB,C,K,E,I,E,E,S,E,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","sources":["<anon>","node_modules/ag-psd/dist/index.js","node_modules/ag-psd/src/index.ts","node_modules/buffer/index.js","node_modules/@swc/helpers/esm/_call_super.js","node_modules/@swc/helpers/esm/_get_prototype_of.js","node_modules/@swc/helpers/esm/_is_native_reflect_construct.js","node_modules/@swc/helpers/esm/_possible_constructor_return.js","node_modules/@swc/helpers/esm/_assert_this_initialized.js","node_modules/@swc/helpers/esm/_type_of.js","node_modules/@swc/helpers/esm/_inherits.js","node_modules/@swc/helpers/esm/_set_prototype_of.js","node_modules/base64-js/index.js","node_modules/ieee754/index.js","node_modules/ag-psd/dist/psdWriter.js","node_modules/ag-psd/src/psdWriter.ts","node_modules/ag-psd/dist/helpers.js","node_modules/ag-psd/src/helpers.ts","node_modules/pako/dist/pako.esm.mjs","node_modules/ag-psd/dist/additionalInfo.js","node_modules/ag-psd/src/additionalInfo.ts","node_modules/ag-psd/dist/effectsHelpers.js","node_modules/ag-psd/src/effectsHelpers.ts","node_modules/ag-psd/dist/psdReader.js","node_modules/ag-psd/src/psdReader.ts","node_modules/ag-psd/dist/imageResources.js","node_modules/ag-psd/src/imageResources.ts","node_modules/ag-psd/dist/utf8.js","node_modules/ag-psd/src/utf8.ts","node_modules/ag-psd/dist/descriptor.js","node_modules/ag-psd/src/descriptor.ts","node_modules/ag-psd/dist/engineData.js","node_modules/ag-psd/src/engineData.ts","node_modules/ag-psd/dist/text.js","node_modules/ag-psd/src/text.ts","node_modules/ag-psd/dist/engineData2.js","node_modules/ag-psd/src/engineData2.ts","node_modules/ag-psd/dist/abr.js","node_modules/ag-psd/src/abr.ts","node_modules/ag-psd/dist/csh.js","node_modules/ag-psd/src/csh.ts","node_modules/ag-psd/dist/psd.js","node_modules/ag-psd/src/psd.ts"],"sourcesContent":["(function () {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"2m2jt\", function(module, exports) {\n\nvar $eC9e0 = parcelRequire(\"eC9e0\");\nvar $1b6f6e28f7eac574$require$Buffer = $eC9e0.Buffer;\n\"use strict\";\nvar $1b6f6e28f7eac574$var$__createBinding = module.exports && module.exports.__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {\n        enumerable: true,\n        get: function get() {\n            return m[k];\n        }\n    };\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar $1b6f6e28f7eac574$var$__exportStar = module.exports && module.exports.__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) $1b6f6e28f7eac574$var$__createBinding(exports1, m, p);\n};\nObject.defineProperty(module.exports, \"__esModule\", {\n    value: true\n});\nmodule.exports.writePsdBuffer = module.exports.writePsdUint8Array = module.exports.writePsd = module.exports.readPsd = module.exports.byteArrayToBase64 = module.exports.initializeCanvas = void 0;\n\nvar $kCSTH = parcelRequire(\"kCSTH\");\n\nvar $5OPaf = parcelRequire(\"5OPaf\");\n\nvar $jWkTT = parcelRequire(\"jWkTT\");\n\n$1b6f6e28f7eac574$var$__exportStar((parcelRequire(\"TW1B9\")), module.exports);\n\n$1b6f6e28f7eac574$var$__exportStar((parcelRequire(\"3vNLh\")), module.exports);\n\nvar $jE67M = parcelRequire(\"jE67M\");\nObject.defineProperty(module.exports, \"initializeCanvas\", {\n    enumerable: true,\n    get: function get() {\n        return $jE67M.initializeCanvas;\n    }\n});\n\n$1b6f6e28f7eac574$var$__exportStar((parcelRequire(\"cKsyM\")), module.exports);\nmodule.exports.byteArrayToBase64 = $jWkTT.fromByteArray;\nfunction $1b6f6e28f7eac574$var$readPsd(buffer, options) {\n    var reader = 'buffer' in buffer ? (0, $5OPaf.createReader)(buffer.buffer, buffer.byteOffset, buffer.byteLength) : (0, $5OPaf.createReader)(buffer);\n    return (0, $5OPaf.readPsd)(reader, options);\n}\nmodule.exports.readPsd = $1b6f6e28f7eac574$var$readPsd;\nfunction $1b6f6e28f7eac574$var$writePsd(psd, options) {\n    var writer = (0, $kCSTH.createWriter)();\n    (0, $kCSTH.writePsd)(writer, psd, options);\n    return (0, $kCSTH.getWriterBuffer)(writer);\n}\nmodule.exports.writePsd = $1b6f6e28f7eac574$var$writePsd;\nfunction $1b6f6e28f7eac574$var$writePsdUint8Array(psd, options) {\n    var writer = (0, $kCSTH.createWriter)();\n    (0, $kCSTH.writePsd)(writer, psd, options);\n    return (0, $kCSTH.getWriterBufferNoCopy)(writer);\n}\nmodule.exports.writePsdUint8Array = $1b6f6e28f7eac574$var$writePsdUint8Array;\nfunction $1b6f6e28f7eac574$var$writePsdBuffer(psd, options) {\n    if (typeof $1b6f6e28f7eac574$require$Buffer === 'undefined') throw new Error('Buffer not supported on this platform');\n    return $1b6f6e28f7eac574$require$Buffer.from($1b6f6e28f7eac574$var$writePsdUint8Array(psd, options));\n}\nmodule.exports.writePsdBuffer = $1b6f6e28f7eac574$var$writePsdBuffer;\n\n});\nparcelRegister(\"eC9e0\", function(module, exports) {\n\n$parcel$export(module.exports, \"Buffer\", function () { return $aa3bc52a91644a03$export$a143d493d941bafc; }, function (v) { return $aa3bc52a91644a03$export$a143d493d941bafc = v; });\n$parcel$export(module.exports, \"INSPECT_MAX_BYTES\", function () { return $aa3bc52a91644a03$export$f99ded8fe4b79145; }, function (v) { return $aa3bc52a91644a03$export$f99ded8fe4b79145 = v; });\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */ /* eslint-disable no-proto */ \nvar $fFwUa = parcelRequire(\"fFwUa\");\n\nvar $cx0mh = parcelRequire(\"cx0mh\");\n\nvar $7h4XF = parcelRequire(\"7h4XF\");\n\nvar $9xmuV = parcelRequire(\"9xmuV\");\nvar $aa3bc52a91644a03$export$a143d493d941bafc;\nvar $aa3bc52a91644a03$export$e4cf37d7f6fb9e0a;\nvar $aa3bc52a91644a03$export$f99ded8fe4b79145;\nvar $aa3bc52a91644a03$export$599f31c3813fae4d;\n'use strict';\n\nvar $jWkTT = parcelRequire(\"jWkTT\");\n\nvar $4Ooth = parcelRequire(\"4Ooth\");\nvar $aa3bc52a91644a03$var$customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' // eslint-disable-line dot-notation\n ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n : null;\n$aa3bc52a91644a03$export$a143d493d941bafc = $aa3bc52a91644a03$var$Buffer;\n$aa3bc52a91644a03$export$e4cf37d7f6fb9e0a = $aa3bc52a91644a03$var$SlowBuffer;\n$aa3bc52a91644a03$export$f99ded8fe4b79145 = 50;\nvar $aa3bc52a91644a03$var$K_MAX_LENGTH = 0x7fffffff;\n$aa3bc52a91644a03$export$599f31c3813fae4d = $aa3bc52a91644a03$var$K_MAX_LENGTH;\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */ $aa3bc52a91644a03$var$Buffer.TYPED_ARRAY_SUPPORT = $aa3bc52a91644a03$var$typedArraySupport();\nif (!$aa3bc52a91644a03$var$Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') console.error(\"This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.\");\nfunction $aa3bc52a91644a03$var$typedArraySupport() {\n    // Can typed array instances can be augmented?\n    try {\n        var arr = new Uint8Array(1);\n        var proto = {\n            foo: function foo() {\n                return 42;\n            }\n        };\n        Object.setPrototypeOf(proto, Uint8Array.prototype);\n        Object.setPrototypeOf(arr, proto);\n        return arr.foo() === 42;\n    } catch (e) {\n        return false;\n    }\n}\nObject.defineProperty($aa3bc52a91644a03$var$Buffer.prototype, 'parent', {\n    enumerable: true,\n    get: function get() {\n        if (!$aa3bc52a91644a03$var$Buffer.isBuffer(this)) return undefined;\n        return this.buffer;\n    }\n});\nObject.defineProperty($aa3bc52a91644a03$var$Buffer.prototype, 'offset', {\n    enumerable: true,\n    get: function get() {\n        if (!$aa3bc52a91644a03$var$Buffer.isBuffer(this)) return undefined;\n        return this.byteOffset;\n    }\n});\nfunction $aa3bc52a91644a03$var$createBuffer(length) {\n    if (length > $aa3bc52a91644a03$var$K_MAX_LENGTH) throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"');\n    // Return an augmented `Uint8Array` instance\n    var buf = new Uint8Array(length);\n    Object.setPrototypeOf(buf, $aa3bc52a91644a03$var$Buffer.prototype);\n    return buf;\n}\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */ function $aa3bc52a91644a03$var$Buffer(arg, encodingOrOffset, length) {\n    // Common case.\n    if (typeof arg === 'number') {\n        if (typeof encodingOrOffset === 'string') throw new TypeError('The \"string\" argument must be of type string. Received type number');\n        return $aa3bc52a91644a03$var$allocUnsafe(arg);\n    }\n    return $aa3bc52a91644a03$var$from(arg, encodingOrOffset, length);\n}\n$aa3bc52a91644a03$var$Buffer.poolSize = 8192 // not used by this implementation\n;\nfunction $aa3bc52a91644a03$var$from(value, encodingOrOffset, length) {\n    if (typeof value === 'string') return $aa3bc52a91644a03$var$fromString(value, encodingOrOffset);\n    if (ArrayBuffer.isView(value)) return $aa3bc52a91644a03$var$fromArrayView(value);\n    if (value == null) throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value);\n    if ($aa3bc52a91644a03$var$isInstance(value, ArrayBuffer) || value && $aa3bc52a91644a03$var$isInstance(value.buffer, ArrayBuffer)) return $aa3bc52a91644a03$var$fromArrayBuffer(value, encodingOrOffset, length);\n    if (typeof SharedArrayBuffer !== 'undefined' && ($aa3bc52a91644a03$var$isInstance(value, SharedArrayBuffer) || value && $aa3bc52a91644a03$var$isInstance(value.buffer, SharedArrayBuffer))) return $aa3bc52a91644a03$var$fromArrayBuffer(value, encodingOrOffset, length);\n    if (typeof value === 'number') throw new TypeError('The \"value\" argument must not be of type number. Received type number');\n    var valueOf = value.valueOf && value.valueOf();\n    if (valueOf != null && valueOf !== value) return $aa3bc52a91644a03$var$Buffer.from(valueOf, encodingOrOffset, length);\n    var b = $aa3bc52a91644a03$var$fromObject(value);\n    if (b) return b;\n    if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') return $aa3bc52a91644a03$var$Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);\n    throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value);\n}\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/ $aa3bc52a91644a03$var$Buffer.from = function(value, encodingOrOffset, length) {\n    return $aa3bc52a91644a03$var$from(value, encodingOrOffset, length);\n};\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf($aa3bc52a91644a03$var$Buffer.prototype, Uint8Array.prototype);\nObject.setPrototypeOf($aa3bc52a91644a03$var$Buffer, Uint8Array);\nfunction $aa3bc52a91644a03$var$assertSize(size) {\n    if (typeof size !== 'number') throw new TypeError('\"size\" argument must be of type number');\n    else if (size < 0) throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"');\n}\nfunction $aa3bc52a91644a03$var$alloc(size, fill, encoding) {\n    $aa3bc52a91644a03$var$assertSize(size);\n    if (size <= 0) return $aa3bc52a91644a03$var$createBuffer(size);\n    if (fill !== undefined) // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string' ? $aa3bc52a91644a03$var$createBuffer(size).fill(fill, encoding) : $aa3bc52a91644a03$var$createBuffer(size).fill(fill);\n    return $aa3bc52a91644a03$var$createBuffer(size);\n}\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/ $aa3bc52a91644a03$var$Buffer.alloc = function(size, fill, encoding) {\n    return $aa3bc52a91644a03$var$alloc(size, fill, encoding);\n};\nfunction $aa3bc52a91644a03$var$allocUnsafe(size) {\n    $aa3bc52a91644a03$var$assertSize(size);\n    return $aa3bc52a91644a03$var$createBuffer(size < 0 ? 0 : $aa3bc52a91644a03$var$checked(size) | 0);\n}\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */ $aa3bc52a91644a03$var$Buffer.allocUnsafe = function(size) {\n    return $aa3bc52a91644a03$var$allocUnsafe(size);\n};\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */ $aa3bc52a91644a03$var$Buffer.allocUnsafeSlow = function(size) {\n    return $aa3bc52a91644a03$var$allocUnsafe(size);\n};\nfunction $aa3bc52a91644a03$var$fromString(string, encoding) {\n    if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8';\n    if (!$aa3bc52a91644a03$var$Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);\n    var length = $aa3bc52a91644a03$var$byteLength(string, encoding) | 0;\n    var buf = $aa3bc52a91644a03$var$createBuffer(length);\n    var actual = buf.write(string, encoding);\n    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual);\n    return buf;\n}\nfunction $aa3bc52a91644a03$var$fromArrayLike(array) {\n    var length = array.length < 0 ? 0 : $aa3bc52a91644a03$var$checked(array.length) | 0;\n    var buf = $aa3bc52a91644a03$var$createBuffer(length);\n    for(var i = 0; i < length; i += 1)buf[i] = array[i] & 255;\n    return buf;\n}\nfunction $aa3bc52a91644a03$var$fromArrayView(arrayView) {\n    if ($aa3bc52a91644a03$var$isInstance(arrayView, Uint8Array)) {\n        var copy = new Uint8Array(arrayView);\n        return $aa3bc52a91644a03$var$fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);\n    }\n    return $aa3bc52a91644a03$var$fromArrayLike(arrayView);\n}\nfunction $aa3bc52a91644a03$var$fromArrayBuffer(array, byteOffset, length) {\n    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('\"offset\" is outside of buffer bounds');\n    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('\"length\" is outside of buffer bounds');\n    var buf;\n    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);\n    else if (length === undefined) buf = new Uint8Array(array, byteOffset);\n    else buf = new Uint8Array(array, byteOffset, length);\n    // Return an augmented `Uint8Array` instance\n    Object.setPrototypeOf(buf, $aa3bc52a91644a03$var$Buffer.prototype);\n    return buf;\n}\nfunction $aa3bc52a91644a03$var$fromObject(obj) {\n    if ($aa3bc52a91644a03$var$Buffer.isBuffer(obj)) {\n        var len = $aa3bc52a91644a03$var$checked(obj.length) | 0;\n        var buf = $aa3bc52a91644a03$var$createBuffer(len);\n        if (buf.length === 0) return buf;\n        obj.copy(buf, 0, 0, len);\n        return buf;\n    }\n    if (obj.length !== undefined) {\n        if (typeof obj.length !== 'number' || $aa3bc52a91644a03$var$numberIsNaN(obj.length)) return $aa3bc52a91644a03$var$createBuffer(0);\n        return $aa3bc52a91644a03$var$fromArrayLike(obj);\n    }\n    if (obj.type === 'Buffer' && Array.isArray(obj.data)) return $aa3bc52a91644a03$var$fromArrayLike(obj.data);\n}\nfunction $aa3bc52a91644a03$var$checked(length) {\n    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n    // length is NaN (which is otherwise coerced to zero.)\n    if (length >= $aa3bc52a91644a03$var$K_MAX_LENGTH) throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\" + $aa3bc52a91644a03$var$K_MAX_LENGTH.toString(16) + ' bytes');\n    return length | 0;\n}\nfunction $aa3bc52a91644a03$var$SlowBuffer(length) {\n    if (+length != length) length = 0;\n    return $aa3bc52a91644a03$var$Buffer.alloc(+length);\n}\n$aa3bc52a91644a03$var$Buffer.isBuffer = function isBuffer(b) {\n    return b != null && b._isBuffer === true && b !== $aa3bc52a91644a03$var$Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n    ;\n};\n$aa3bc52a91644a03$var$Buffer.compare = function compare(a, b) {\n    if ($aa3bc52a91644a03$var$isInstance(a, Uint8Array)) a = $aa3bc52a91644a03$var$Buffer.from(a, a.offset, a.byteLength);\n    if ($aa3bc52a91644a03$var$isInstance(b, Uint8Array)) b = $aa3bc52a91644a03$var$Buffer.from(b, b.offset, b.byteLength);\n    if (!$aa3bc52a91644a03$var$Buffer.isBuffer(a) || !$aa3bc52a91644a03$var$Buffer.isBuffer(b)) throw new TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array');\n    if (a === b) return 0;\n    var x = a.length;\n    var y = b.length;\n    for(var i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {\n        x = a[i];\n        y = b[i];\n        break;\n    }\n    if (x < y) return -1;\n    if (y < x) return 1;\n    return 0;\n};\n$aa3bc52a91644a03$var$Buffer.isEncoding = function isEncoding(encoding) {\n    switch(String(encoding).toLowerCase()){\n        case 'hex':\n        case 'utf8':\n        case 'utf-8':\n        case 'ascii':\n        case 'latin1':\n        case 'binary':\n        case 'base64':\n        case 'ucs2':\n        case 'ucs-2':\n        case 'utf16le':\n        case 'utf-16le':\n            return true;\n        default:\n            return false;\n    }\n};\n$aa3bc52a91644a03$var$Buffer.concat = function concat(list, length) {\n    if (!Array.isArray(list)) throw new TypeError('\"list\" argument must be an Array of Buffers');\n    if (list.length === 0) return $aa3bc52a91644a03$var$Buffer.alloc(0);\n    var i;\n    if (length === undefined) {\n        length = 0;\n        for(i = 0; i < list.length; ++i)length += list[i].length;\n    }\n    var buffer = $aa3bc52a91644a03$var$Buffer.allocUnsafe(length);\n    var pos = 0;\n    for(i = 0; i < list.length; ++i){\n        var buf = list[i];\n        if ($aa3bc52a91644a03$var$isInstance(buf, Uint8Array)) {\n            if (pos + buf.length > buffer.length) {\n                if (!$aa3bc52a91644a03$var$Buffer.isBuffer(buf)) buf = $aa3bc52a91644a03$var$Buffer.from(buf);\n                buf.copy(buffer, pos);\n            } else Uint8Array.prototype.set.call(buffer, buf, pos);\n        } else if (!$aa3bc52a91644a03$var$Buffer.isBuffer(buf)) throw new TypeError('\"list\" argument must be an Array of Buffers');\n        else buf.copy(buffer, pos);\n        pos += buf.length;\n    }\n    return buffer;\n};\nfunction $aa3bc52a91644a03$var$byteLength(string, encoding) {\n    if ($aa3bc52a91644a03$var$Buffer.isBuffer(string)) return string.length;\n    if (ArrayBuffer.isView(string) || $aa3bc52a91644a03$var$isInstance(string, ArrayBuffer)) return string.byteLength;\n    if (typeof string !== 'string') throw new TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);\n    var len = string.length;\n    var mustMatch = arguments.length > 2 && arguments[2] === true;\n    if (!mustMatch && len === 0) return 0;\n    // Use a for loop to avoid recursion\n    var loweredCase = false;\n    for(;;)switch(encoding){\n        case 'ascii':\n        case 'latin1':\n        case 'binary':\n            return len;\n        case 'utf8':\n        case 'utf-8':\n            return $aa3bc52a91644a03$var$utf8ToBytes(string).length;\n        case 'ucs2':\n        case 'ucs-2':\n        case 'utf16le':\n        case 'utf-16le':\n            return len * 2;\n        case 'hex':\n            return len >>> 1;\n        case 'base64':\n            return $aa3bc52a91644a03$var$base64ToBytes(string).length;\n        default:\n            if (loweredCase) return mustMatch ? -1 : $aa3bc52a91644a03$var$utf8ToBytes(string).length // assume utf8\n            ;\n            encoding = ('' + encoding).toLowerCase();\n            loweredCase = true;\n    }\n}\n$aa3bc52a91644a03$var$Buffer.byteLength = $aa3bc52a91644a03$var$byteLength;\nfunction $aa3bc52a91644a03$var$slowToString(encoding, start, end) {\n    var loweredCase = false;\n    // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n    // property of a typed array.\n    // This behaves neither like String nor Uint8Array in that we set start/end\n    // to their upper/lower bounds if the value passed is out of range.\n    // undefined is handled specially as per ECMA-262 6th Edition,\n    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n    if (start === undefined || start < 0) start = 0;\n    // Return early if start > this.length. Done here to prevent potential uint32\n    // coercion fail below.\n    if (start > this.length) return '';\n    if (end === undefined || end > this.length) end = this.length;\n    if (end <= 0) return '';\n    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n    end >>>= 0;\n    start >>>= 0;\n    if (end <= start) return '';\n    if (!encoding) encoding = 'utf8';\n    while(true)switch(encoding){\n        case 'hex':\n            return $aa3bc52a91644a03$var$hexSlice(this, start, end);\n        case 'utf8':\n        case 'utf-8':\n            return $aa3bc52a91644a03$var$utf8Slice(this, start, end);\n        case 'ascii':\n            return $aa3bc52a91644a03$var$asciiSlice(this, start, end);\n        case 'latin1':\n        case 'binary':\n            return $aa3bc52a91644a03$var$latin1Slice(this, start, end);\n        case 'base64':\n            return $aa3bc52a91644a03$var$base64Slice(this, start, end);\n        case 'ucs2':\n        case 'ucs-2':\n        case 'utf16le':\n        case 'utf-16le':\n            return $aa3bc52a91644a03$var$utf16leSlice(this, start, end);\n        default:\n            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n            encoding = (encoding + '').toLowerCase();\n            loweredCase = true;\n    }\n}\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\n$aa3bc52a91644a03$var$Buffer.prototype._isBuffer = true;\nfunction $aa3bc52a91644a03$var$swap(b, n, m) {\n    var i = b[n];\n    b[n] = b[m];\n    b[m] = i;\n}\n$aa3bc52a91644a03$var$Buffer.prototype.swap16 = function swap16() {\n    var len = this.length;\n    if (len % 2 !== 0) throw new RangeError('Buffer size must be a multiple of 16-bits');\n    for(var i = 0; i < len; i += 2)$aa3bc52a91644a03$var$swap(this, i, i + 1);\n    return this;\n};\n$aa3bc52a91644a03$var$Buffer.prototype.swap32 = function swap32() {\n    var len = this.length;\n    if (len % 4 !== 0) throw new RangeError('Buffer size must be a multiple of 32-bits');\n    for(var i = 0; i < len; i += 4){\n        $aa3bc52a91644a03$var$swap(this, i, i + 3);\n        $aa3bc52a91644a03$var$swap(this, i + 1, i + 2);\n    }\n    return this;\n};\n$aa3bc52a91644a03$var$Buffer.prototype.swap64 = function swap64() {\n    var len = this.length;\n    if (len % 8 !== 0) throw new RangeError('Buffer size must be a multiple of 64-bits');\n    for(var i = 0; i < len; i += 8){\n        $aa3bc52a91644a03$var$swap(this, i, i + 7);\n        $aa3bc52a91644a03$var$swap(this, i + 1, i + 6);\n        $aa3bc52a91644a03$var$swap(this, i + 2, i + 5);\n        $aa3bc52a91644a03$var$swap(this, i + 3, i + 4);\n    }\n    return this;\n};\n$aa3bc52a91644a03$var$Buffer.prototype.toString = function toString() {\n    var length = this.length;\n    if (length === 0) return '';\n    if (arguments.length === 0) return $aa3bc52a91644a03$var$utf8Slice(this, 0, length);\n    return $aa3bc52a91644a03$var$slowToString.apply(this, arguments);\n};\n$aa3bc52a91644a03$var$Buffer.prototype.toLocaleString = $aa3bc52a91644a03$var$Buffer.prototype.toString;\n$aa3bc52a91644a03$var$Buffer.prototype.equals = function equals(b) {\n    if (!$aa3bc52a91644a03$var$Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');\n    if (this === b) return true;\n    return $aa3bc52a91644a03$var$Buffer.compare(this, b) === 0;\n};\n$aa3bc52a91644a03$var$Buffer.prototype.inspect = function inspect() {\n    var str = '';\n    var max = $aa3bc52a91644a03$export$f99ded8fe4b79145;\n    str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();\n    if (this.length > max) str += ' ... ';\n    return '<Buffer ' + str + '>';\n};\nif ($aa3bc52a91644a03$var$customInspectSymbol) $aa3bc52a91644a03$var$Buffer.prototype[$aa3bc52a91644a03$var$customInspectSymbol] = $aa3bc52a91644a03$var$Buffer.prototype.inspect;\n$aa3bc52a91644a03$var$Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n    if ($aa3bc52a91644a03$var$isInstance(target, Uint8Array)) target = $aa3bc52a91644a03$var$Buffer.from(target, target.offset, target.byteLength);\n    if (!$aa3bc52a91644a03$var$Buffer.isBuffer(target)) throw new TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);\n    if (start === undefined) start = 0;\n    if (end === undefined) end = target ? target.length : 0;\n    if (thisStart === undefined) thisStart = 0;\n    if (thisEnd === undefined) thisEnd = this.length;\n    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError('out of range index');\n    if (thisStart >= thisEnd && start >= end) return 0;\n    if (thisStart >= thisEnd) return -1;\n    if (start >= end) return 1;\n    start >>>= 0;\n    end >>>= 0;\n    thisStart >>>= 0;\n    thisEnd >>>= 0;\n    if (this === target) return 0;\n    var x = thisEnd - thisStart;\n    var y = end - start;\n    var len = Math.min(x, y);\n    var thisCopy = this.slice(thisStart, thisEnd);\n    var targetCopy = target.slice(start, end);\n    for(var i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {\n        x = thisCopy[i];\n        y = targetCopy[i];\n        break;\n    }\n    if (x < y) return -1;\n    if (y < x) return 1;\n    return 0;\n};\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction $aa3bc52a91644a03$var$bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n    // Empty buffer means no match\n    if (buffer.length === 0) return -1;\n    // Normalize byteOffset\n    if (typeof byteOffset === 'string') {\n        encoding = byteOffset;\n        byteOffset = 0;\n    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;\n    else if (byteOffset < -2147483648) byteOffset = -2147483648;\n    byteOffset = +byteOffset // Coerce to Number.\n    ;\n    if ($aa3bc52a91644a03$var$numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : buffer.length - 1;\n    // Normalize byteOffset: negative offsets start from the end of the buffer\n    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n    if (byteOffset >= buffer.length) {\n        if (dir) return -1;\n        else byteOffset = buffer.length - 1;\n    } else if (byteOffset < 0) {\n        if (dir) byteOffset = 0;\n        else return -1;\n    }\n    // Normalize val\n    if (typeof val === 'string') val = $aa3bc52a91644a03$var$Buffer.from(val, encoding);\n    // Finally, search either indexOf (if dir is true) or lastIndexOf\n    if ($aa3bc52a91644a03$var$Buffer.isBuffer(val)) {\n        // Special case: looking for empty string/buffer always fails\n        if (val.length === 0) return -1;\n        return $aa3bc52a91644a03$var$arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n    } else if (typeof val === 'number') {\n        val = val & 0xFF // Search for a byte value [0-255]\n        ;\n        if (typeof Uint8Array.prototype.indexOf === 'function') {\n            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n        }\n        return $aa3bc52a91644a03$var$arrayIndexOf(buffer, [\n            val\n        ], byteOffset, encoding, dir);\n    }\n    throw new TypeError('val must be string, number or Buffer');\n}\nfunction $aa3bc52a91644a03$var$arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n    var indexSize = 1;\n    var arrLength = arr.length;\n    var valLength = val.length;\n    if (encoding !== undefined) {\n        encoding = String(encoding).toLowerCase();\n        if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {\n            if (arr.length < 2 || val.length < 2) return -1;\n            indexSize = 2;\n            arrLength /= 2;\n            valLength /= 2;\n            byteOffset /= 2;\n        }\n    }\n    function read(buf, i) {\n        if (indexSize === 1) return buf[i];\n        else return buf.readUInt16BE(i * indexSize);\n    }\n    var i;\n    if (dir) {\n        var foundIndex = -1;\n        for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n            if (foundIndex === -1) foundIndex = i;\n            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;\n        } else {\n            if (foundIndex !== -1) i -= i - foundIndex;\n            foundIndex = -1;\n        }\n    } else {\n        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n        for(i = byteOffset; i >= 0; i--){\n            var found = true;\n            for(var j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {\n                found = false;\n                break;\n            }\n            if (found) return i;\n        }\n    }\n    return -1;\n}\n$aa3bc52a91644a03$var$Buffer.prototype.includes = function includes(val, byteOffset, encoding) {\n    return this.indexOf(val, byteOffset, encoding) !== -1;\n};\n$aa3bc52a91644a03$var$Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n    return $aa3bc52a91644a03$var$bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n};\n$aa3bc52a91644a03$var$Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n    return $aa3bc52a91644a03$var$bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n};\nfunction $aa3bc52a91644a03$var$hexWrite(buf, string, offset, length) {\n    offset = Number(offset) || 0;\n    var remaining = buf.length - offset;\n    if (!length) length = remaining;\n    else {\n        length = Number(length);\n        if (length > remaining) length = remaining;\n    }\n    var strLen = string.length;\n    if (length > strLen / 2) length = strLen / 2;\n    var i;\n    for(i = 0; i < length; ++i){\n        var parsed = parseInt(string.substr(i * 2, 2), 16);\n        if ($aa3bc52a91644a03$var$numberIsNaN(parsed)) return i;\n        buf[offset + i] = parsed;\n    }\n    return i;\n}\nfunction $aa3bc52a91644a03$var$utf8Write(buf, string, offset, length) {\n    return $aa3bc52a91644a03$var$blitBuffer($aa3bc52a91644a03$var$utf8ToBytes(string, buf.length - offset), buf, offset, length);\n}\nfunction $aa3bc52a91644a03$var$asciiWrite(buf, string, offset, length) {\n    return $aa3bc52a91644a03$var$blitBuffer($aa3bc52a91644a03$var$asciiToBytes(string), buf, offset, length);\n}\nfunction $aa3bc52a91644a03$var$base64Write(buf, string, offset, length) {\n    return $aa3bc52a91644a03$var$blitBuffer($aa3bc52a91644a03$var$base64ToBytes(string), buf, offset, length);\n}\nfunction $aa3bc52a91644a03$var$ucs2Write(buf, string, offset, length) {\n    return $aa3bc52a91644a03$var$blitBuffer($aa3bc52a91644a03$var$utf16leToBytes(string, buf.length - offset), buf, offset, length);\n}\n$aa3bc52a91644a03$var$Buffer.prototype.write = function write(string, offset, length, encoding) {\n    // Buffer#write(string)\n    if (offset === undefined) {\n        encoding = 'utf8';\n        length = this.length;\n        offset = 0;\n    // Buffer#write(string, encoding)\n    } else if (length === undefined && typeof offset === 'string') {\n        encoding = offset;\n        length = this.length;\n        offset = 0;\n    // Buffer#write(string, offset[, length][, encoding])\n    } else if (isFinite(offset)) {\n        offset = offset >>> 0;\n        if (isFinite(length)) {\n            length = length >>> 0;\n            if (encoding === undefined) encoding = 'utf8';\n        } else {\n            encoding = length;\n            length = undefined;\n        }\n    } else throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');\n    var remaining = this.length - offset;\n    if (length === undefined || length > remaining) length = remaining;\n    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError('Attempt to write outside buffer bounds');\n    if (!encoding) encoding = 'utf8';\n    var loweredCase = false;\n    for(;;)switch(encoding){\n        case 'hex':\n            return $aa3bc52a91644a03$var$hexWrite(this, string, offset, length);\n        case 'utf8':\n        case 'utf-8':\n            return $aa3bc52a91644a03$var$utf8Write(this, string, offset, length);\n        case 'ascii':\n        case 'latin1':\n        case 'binary':\n            return $aa3bc52a91644a03$var$asciiWrite(this, string, offset, length);\n        case 'base64':\n            // Warning: maxLength not taken into account in base64Write\n            return $aa3bc52a91644a03$var$base64Write(this, string, offset, length);\n        case 'ucs2':\n        case 'ucs-2':\n        case 'utf16le':\n        case 'utf-16le':\n            return $aa3bc52a91644a03$var$ucs2Write(this, string, offset, length);\n        default:\n            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n            encoding = ('' + encoding).toLowerCase();\n            loweredCase = true;\n    }\n};\n$aa3bc52a91644a03$var$Buffer.prototype.toJSON = function toJSON() {\n    return {\n        type: 'Buffer',\n        data: Array.prototype.slice.call(this._arr || this, 0)\n    };\n};\nfunction $aa3bc52a91644a03$var$base64Slice(buf, start, end) {\n    if (start === 0 && end === buf.length) return $jWkTT.fromByteArray(buf);\n    else return $jWkTT.fromByteArray(buf.slice(start, end));\n}\nfunction $aa3bc52a91644a03$var$utf8Slice(buf, start, end) {\n    end = Math.min(buf.length, end);\n    var res = [];\n    var i = start;\n    while(i < end){\n        var firstByte = buf[i];\n        var codePoint = null;\n        var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;\n        if (i + bytesPerSequence <= end) {\n            var secondByte = void 0, thirdByte = void 0, fourthByte = void 0, tempCodePoint = void 0;\n            switch(bytesPerSequence){\n                case 1:\n                    if (firstByte < 0x80) codePoint = firstByte;\n                    break;\n                case 2:\n                    secondByte = buf[i + 1];\n                    if ((secondByte & 0xC0) === 0x80) {\n                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;\n                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;\n                    }\n                    break;\n                case 3:\n                    secondByte = buf[i + 1];\n                    thirdByte = buf[i + 2];\n                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;\n                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;\n                    }\n                    break;\n                case 4:\n                    secondByte = buf[i + 1];\n                    thirdByte = buf[i + 2];\n                    fourthByte = buf[i + 3];\n                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;\n                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;\n                    }\n            }\n        }\n        if (codePoint === null) {\n            // we did not generate a valid codePoint so insert a\n            // replacement char (U+FFFD) and advance only 1 byte\n            codePoint = 0xFFFD;\n            bytesPerSequence = 1;\n        } else if (codePoint > 0xFFFF) {\n            // encode to utf16 (surrogate pair dance)\n            codePoint -= 0x10000;\n            res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n            codePoint = 0xDC00 | codePoint & 0x3FF;\n        }\n        res.push(codePoint);\n        i += bytesPerSequence;\n    }\n    return $aa3bc52a91644a03$var$decodeCodePointsArray(res);\n}\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar $aa3bc52a91644a03$var$MAX_ARGUMENTS_LENGTH = 0x1000;\nfunction $aa3bc52a91644a03$var$decodeCodePointsArray(codePoints) {\n    var len = codePoints.length;\n    if (len <= $aa3bc52a91644a03$var$MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n    ;\n    // Decode in chunks to avoid \"call stack size exceeded\".\n    var res = '';\n    var i = 0;\n    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += $aa3bc52a91644a03$var$MAX_ARGUMENTS_LENGTH));\n    return res;\n}\nfunction $aa3bc52a91644a03$var$asciiSlice(buf, start, end) {\n    var ret = '';\n    end = Math.min(buf.length, end);\n    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);\n    return ret;\n}\nfunction $aa3bc52a91644a03$var$latin1Slice(buf, start, end) {\n    var ret = '';\n    end = Math.min(buf.length, end);\n    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);\n    return ret;\n}\nfunction $aa3bc52a91644a03$var$hexSlice(buf, start, end) {\n    var len = buf.length;\n    if (!start || start < 0) start = 0;\n    if (!end || end < 0 || end > len) end = len;\n    var out = '';\n    for(var i = start; i < end; ++i)out += $aa3bc52a91644a03$var$hexSliceLookupTable[buf[i]];\n    return out;\n}\nfunction $aa3bc52a91644a03$var$utf16leSlice(buf, start, end) {\n    var bytes = buf.slice(start, end);\n    var res = '';\n    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n    for(var i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n    return res;\n}\n$aa3bc52a91644a03$var$Buffer.prototype.slice = function slice(start, end) {\n    var len = this.length;\n    start = ~~start;\n    end = end === undefined ? len : ~~end;\n    if (start < 0) {\n        start += len;\n        if (start < 0) start = 0;\n    } else if (start > len) start = len;\n    if (end < 0) {\n        end += len;\n        if (end < 0) end = 0;\n    } else if (end > len) end = len;\n    if (end < start) end = start;\n    var newBuf = this.subarray(start, end);\n    // Return an augmented `Uint8Array` instance\n    Object.setPrototypeOf(newBuf, $aa3bc52a91644a03$var$Buffer.prototype);\n    return newBuf;\n};\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */ function $aa3bc52a91644a03$var$checkOffset(offset, ext, length) {\n    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');\n    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');\n}\n$aa3bc52a91644a03$var$Buffer.prototype.readUintLE = $aa3bc52a91644a03$var$Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) $aa3bc52a91644a03$var$checkOffset(offset, byteLength, this.length);\n    var val = this[offset];\n    var mul = 1;\n    var i = 0;\n    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;\n    return val;\n};\n$aa3bc52a91644a03$var$Buffer.prototype.readUintBE = $aa3bc52a91644a03$var$Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) $aa3bc52a91644a03$var$checkOffset(offset, byteLength, this.length);\n    var val = this[offset + --byteLength];\n    var mul = 1;\n    while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;\n    return val;\n};\n$aa3bc52a91644a03$var$Buffer.prototype.readUint8 = $aa3bc52a91644a03$var$Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) $aa3bc52a91644a03$var$checkOffset(offset, 1, this.length);\n    return this[offset];\n};\n$aa3bc52a91644a03$var$Buffer.prototype.readUint16LE = $aa3bc52a91644a03$var$Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) $aa3bc52a91644a03$var$checkOffset(offset, 2, this.length);\n    return this[offset] | this[offset + 1] << 8;\n};\n$aa3bc52a91644a03$var$Buffer.prototype.readUint16BE = $aa3bc52a91644a03$var$Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) $aa3bc52a91644a03$var$checkOffset(offset, 2, this.length);\n    return this[offset] << 8 | this[offset + 1];\n};\n$aa3bc52a91644a03$var$Buffer.prototype.readUint32LE = $aa3bc52a91644a03$var$Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) $aa3bc52a91644a03$var$checkOffset(offset, 4, this.length);\n    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;\n};\n$aa3bc52a91644a03$var$Buffer.prototype.readUint32BE = $aa3bc52a91644a03$var$Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) $aa3bc52a91644a03$var$checkOffset(offset, 4, this.length);\n    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n};\n$aa3bc52a91644a03$var$Buffer.prototype.readBigUInt64LE = $aa3bc52a91644a03$var$defineBigIntMethod(function readBigUInt64LE(offset) {\n    offset = offset >>> 0;\n    $aa3bc52a91644a03$var$validateNumber(offset, 'offset');\n    var first = this[offset];\n    var last = this[offset + 7];\n    if (first === undefined || last === undefined) $aa3bc52a91644a03$var$boundsError(offset, this.length - 8);\n    var lo = first + this[++offset] * 256 + this[++offset] * Math.pow(2, 16) + this[++offset] * Math.pow(2, 24);\n    var hi = this[++offset] + this[++offset] * 256 + this[++offset] * Math.pow(2, 16) + last * Math.pow(2, 24);\n    return BigInt(lo) + (BigInt(hi) << BigInt(32));\n});\n$aa3bc52a91644a03$var$Buffer.prototype.readBigUInt64BE = $aa3bc52a91644a03$var$defineBigIntMethod(function readBigUInt64BE(offset) {\n    offset = offset >>> 0;\n    $aa3bc52a91644a03$var$validateNumber(offset, 'offset');\n    var first = this[offset];\n    var last = this[offset + 7];\n    if (first === undefined || last === undefined) $aa3bc52a91644a03$var$boundsError(offset, this.length - 8);\n    var hi = first * Math.pow(2, 24) + this[++offset] * Math.pow(2, 16) + this[++offset] * 256 + this[++offset];\n    var lo = this[++offset] * Math.pow(2, 24) + this[++offset] * Math.pow(2, 16) + this[++offset] * 256 + last;\n    return (BigInt(hi) << BigInt(32)) + BigInt(lo);\n});\n$aa3bc52a91644a03$var$Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) $aa3bc52a91644a03$var$checkOffset(offset, byteLength, this.length);\n    var val = this[offset];\n    var mul = 1;\n    var i = 0;\n    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;\n    mul *= 0x80;\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n    return val;\n};\n$aa3bc52a91644a03$var$Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) $aa3bc52a91644a03$var$checkOffset(offset, byteLength, this.length);\n    var i = byteLength;\n    var mul = 1;\n    var val = this[offset + --i];\n    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;\n    mul *= 0x80;\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n    return val;\n};\n$aa3bc52a91644a03$var$Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) $aa3bc52a91644a03$var$checkOffset(offset, 1, this.length);\n    if (!(this[offset] & 0x80)) return this[offset];\n    return (0xff - this[offset] + 1) * -1;\n};\n$aa3bc52a91644a03$var$Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) $aa3bc52a91644a03$var$checkOffset(offset, 2, this.length);\n    var val = this[offset] | this[offset + 1] << 8;\n    return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\n$aa3bc52a91644a03$var$Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) $aa3bc52a91644a03$var$checkOffset(offset, 2, this.length);\n    var val = this[offset + 1] | this[offset] << 8;\n    return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\n$aa3bc52a91644a03$var$Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) $aa3bc52a91644a03$var$checkOffset(offset, 4, this.length);\n    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n};\n$aa3bc52a91644a03$var$Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) $aa3bc52a91644a03$var$checkOffset(offset, 4, this.length);\n    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n};\n$aa3bc52a91644a03$var$Buffer.prototype.readBigInt64LE = $aa3bc52a91644a03$var$defineBigIntMethod(function readBigInt64LE(offset) {\n    offset = offset >>> 0;\n    $aa3bc52a91644a03$var$validateNumber(offset, 'offset');\n    var first = this[offset];\n    var last = this[offset + 7];\n    if (first === undefined || last === undefined) $aa3bc52a91644a03$var$boundsError(offset, this.length - 8);\n    var val = this[offset + 4] + this[offset + 5] * 256 + this[offset + 6] * Math.pow(2, 16) + (last << 24 // Overflow\n    );\n    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 256 + this[++offset] * Math.pow(2, 16) + this[++offset] * Math.pow(2, 24));\n});\n$aa3bc52a91644a03$var$Buffer.prototype.readBigInt64BE = $aa3bc52a91644a03$var$defineBigIntMethod(function readBigInt64BE(offset) {\n    offset = offset >>> 0;\n    $aa3bc52a91644a03$var$validateNumber(offset, 'offset');\n    var first = this[offset];\n    var last = this[offset + 7];\n    if (first === undefined || last === undefined) $aa3bc52a91644a03$var$boundsError(offset, this.length - 8);\n    var val = (first << 24) + // Overflow\n    this[++offset] * Math.pow(2, 16) + this[++offset] * 256 + this[++offset];\n    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * Math.pow(2, 24) + this[++offset] * Math.pow(2, 16) + this[++offset] * 256 + last);\n});\n$aa3bc52a91644a03$var$Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) $aa3bc52a91644a03$var$checkOffset(offset, 4, this.length);\n    return $4Ooth.read(this, offset, true, 23, 4);\n};\n$aa3bc52a91644a03$var$Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) $aa3bc52a91644a03$var$checkOffset(offset, 4, this.length);\n    return $4Ooth.read(this, offset, false, 23, 4);\n};\n$aa3bc52a91644a03$var$Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) $aa3bc52a91644a03$var$checkOffset(offset, 8, this.length);\n    return $4Ooth.read(this, offset, true, 52, 8);\n};\n$aa3bc52a91644a03$var$Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) $aa3bc52a91644a03$var$checkOffset(offset, 8, this.length);\n    return $4Ooth.read(this, offset, false, 52, 8);\n};\nfunction $aa3bc52a91644a03$var$checkInt(buf, value, offset, ext, max, min) {\n    if (!$aa3bc52a91644a03$var$Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n    if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds');\n    if (offset + ext > buf.length) throw new RangeError('Index out of range');\n}\n$aa3bc52a91644a03$var$Buffer.prototype.writeUintLE = $aa3bc52a91644a03$var$Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) {\n        var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n        $aa3bc52a91644a03$var$checkInt(this, value, offset, byteLength, maxBytes, 0);\n    }\n    var mul = 1;\n    var i = 0;\n    this[offset] = value & 0xFF;\n    while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;\n    return offset + byteLength;\n};\n$aa3bc52a91644a03$var$Buffer.prototype.writeUintBE = $aa3bc52a91644a03$var$Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) {\n        var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n        $aa3bc52a91644a03$var$checkInt(this, value, offset, byteLength, maxBytes, 0);\n    }\n    var i = byteLength - 1;\n    var mul = 1;\n    this[offset + i] = value & 0xFF;\n    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;\n    return offset + byteLength;\n};\n$aa3bc52a91644a03$var$Buffer.prototype.writeUint8 = $aa3bc52a91644a03$var$Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) $aa3bc52a91644a03$var$checkInt(this, value, offset, 1, 0xff, 0);\n    this[offset] = value & 0xff;\n    return offset + 1;\n};\n$aa3bc52a91644a03$var$Buffer.prototype.writeUint16LE = $aa3bc52a91644a03$var$Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) $aa3bc52a91644a03$var$checkInt(this, value, offset, 2, 0xffff, 0);\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n    return offset + 2;\n};\n$aa3bc52a91644a03$var$Buffer.prototype.writeUint16BE = $aa3bc52a91644a03$var$Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) $aa3bc52a91644a03$var$checkInt(this, value, offset, 2, 0xffff, 0);\n    this[offset] = value >>> 8;\n    this[offset + 1] = value & 0xff;\n    return offset + 2;\n};\n$aa3bc52a91644a03$var$Buffer.prototype.writeUint32LE = $aa3bc52a91644a03$var$Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) $aa3bc52a91644a03$var$checkInt(this, value, offset, 4, 0xffffffff, 0);\n    this[offset + 3] = value >>> 24;\n    this[offset + 2] = value >>> 16;\n    this[offset + 1] = value >>> 8;\n    this[offset] = value & 0xff;\n    return offset + 4;\n};\n$aa3bc52a91644a03$var$Buffer.prototype.writeUint32BE = $aa3bc52a91644a03$var$Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) $aa3bc52a91644a03$var$checkInt(this, value, offset, 4, 0xffffffff, 0);\n    this[offset] = value >>> 24;\n    this[offset + 1] = value >>> 16;\n    this[offset + 2] = value >>> 8;\n    this[offset + 3] = value & 0xff;\n    return offset + 4;\n};\nfunction $aa3bc52a91644a03$var$wrtBigUInt64LE(buf, value, offset, min, max) {\n    $aa3bc52a91644a03$var$checkIntBI(value, min, max, buf, offset, 7);\n    var lo = Number(value & BigInt(0xffffffff));\n    buf[offset++] = lo;\n    lo = lo >> 8;\n    buf[offset++] = lo;\n    lo = lo >> 8;\n    buf[offset++] = lo;\n    lo = lo >> 8;\n    buf[offset++] = lo;\n    var hi = Number(value >> BigInt(32) & BigInt(0xffffffff));\n    buf[offset++] = hi;\n    hi = hi >> 8;\n    buf[offset++] = hi;\n    hi = hi >> 8;\n    buf[offset++] = hi;\n    hi = hi >> 8;\n    buf[offset++] = hi;\n    return offset;\n}\nfunction $aa3bc52a91644a03$var$wrtBigUInt64BE(buf, value, offset, min, max) {\n    $aa3bc52a91644a03$var$checkIntBI(value, min, max, buf, offset, 7);\n    var lo = Number(value & BigInt(0xffffffff));\n    buf[offset + 7] = lo;\n    lo = lo >> 8;\n    buf[offset + 6] = lo;\n    lo = lo >> 8;\n    buf[offset + 5] = lo;\n    lo = lo >> 8;\n    buf[offset + 4] = lo;\n    var hi = Number(value >> BigInt(32) & BigInt(0xffffffff));\n    buf[offset + 3] = hi;\n    hi = hi >> 8;\n    buf[offset + 2] = hi;\n    hi = hi >> 8;\n    buf[offset + 1] = hi;\n    hi = hi >> 8;\n    buf[offset] = hi;\n    return offset + 8;\n}\n$aa3bc52a91644a03$var$Buffer.prototype.writeBigUInt64LE = $aa3bc52a91644a03$var$defineBigIntMethod(function writeBigUInt64LE(value) {\n    var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    return $aa3bc52a91644a03$var$wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'));\n});\n$aa3bc52a91644a03$var$Buffer.prototype.writeBigUInt64BE = $aa3bc52a91644a03$var$defineBigIntMethod(function writeBigUInt64BE(value) {\n    var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    return $aa3bc52a91644a03$var$wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'));\n});\n$aa3bc52a91644a03$var$Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) {\n        var limit = Math.pow(2, 8 * byteLength - 1);\n        $aa3bc52a91644a03$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);\n    }\n    var i = 0;\n    var mul = 1;\n    var sub = 0;\n    this[offset] = value & 0xFF;\n    while(++i < byteLength && (mul *= 0x100)){\n        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;\n        this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n    }\n    return offset + byteLength;\n};\n$aa3bc52a91644a03$var$Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) {\n        var limit = Math.pow(2, 8 * byteLength - 1);\n        $aa3bc52a91644a03$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);\n    }\n    var i = byteLength - 1;\n    var mul = 1;\n    var sub = 0;\n    this[offset + i] = value & 0xFF;\n    while(--i >= 0 && (mul *= 0x100)){\n        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;\n        this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n    }\n    return offset + byteLength;\n};\n$aa3bc52a91644a03$var$Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) $aa3bc52a91644a03$var$checkInt(this, value, offset, 1, 0x7f, -128);\n    if (value < 0) value = 0xff + value + 1;\n    this[offset] = value & 0xff;\n    return offset + 1;\n};\n$aa3bc52a91644a03$var$Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) $aa3bc52a91644a03$var$checkInt(this, value, offset, 2, 0x7fff, -32768);\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n    return offset + 2;\n};\n$aa3bc52a91644a03$var$Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) $aa3bc52a91644a03$var$checkInt(this, value, offset, 2, 0x7fff, -32768);\n    this[offset] = value >>> 8;\n    this[offset + 1] = value & 0xff;\n    return offset + 2;\n};\n$aa3bc52a91644a03$var$Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) $aa3bc52a91644a03$var$checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n    this[offset + 2] = value >>> 16;\n    this[offset + 3] = value >>> 24;\n    return offset + 4;\n};\n$aa3bc52a91644a03$var$Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) $aa3bc52a91644a03$var$checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);\n    if (value < 0) value = 0xffffffff + value + 1;\n    this[offset] = value >>> 24;\n    this[offset + 1] = value >>> 16;\n    this[offset + 2] = value >>> 8;\n    this[offset + 3] = value & 0xff;\n    return offset + 4;\n};\n$aa3bc52a91644a03$var$Buffer.prototype.writeBigInt64LE = $aa3bc52a91644a03$var$defineBigIntMethod(function writeBigInt64LE(value) {\n    var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    return $aa3bc52a91644a03$var$wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));\n});\n$aa3bc52a91644a03$var$Buffer.prototype.writeBigInt64BE = $aa3bc52a91644a03$var$defineBigIntMethod(function writeBigInt64BE(value) {\n    var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    return $aa3bc52a91644a03$var$wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));\n});\nfunction $aa3bc52a91644a03$var$checkIEEE754(buf, value, offset, ext, max, min) {\n    if (offset + ext > buf.length) throw new RangeError('Index out of range');\n    if (offset < 0) throw new RangeError('Index out of range');\n}\nfunction $aa3bc52a91644a03$var$writeFloat(buf, value, offset, littleEndian, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) $aa3bc52a91644a03$var$checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);\n    $4Ooth.write(buf, value, offset, littleEndian, 23, 4);\n    return offset + 4;\n}\n$aa3bc52a91644a03$var$Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n    return $aa3bc52a91644a03$var$writeFloat(this, value, offset, true, noAssert);\n};\n$aa3bc52a91644a03$var$Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n    return $aa3bc52a91644a03$var$writeFloat(this, value, offset, false, noAssert);\n};\nfunction $aa3bc52a91644a03$var$writeDouble(buf, value, offset, littleEndian, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) $aa3bc52a91644a03$var$checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n    $4Ooth.write(buf, value, offset, littleEndian, 52, 8);\n    return offset + 8;\n}\n$aa3bc52a91644a03$var$Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n    return $aa3bc52a91644a03$var$writeDouble(this, value, offset, true, noAssert);\n};\n$aa3bc52a91644a03$var$Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n    return $aa3bc52a91644a03$var$writeDouble(this, value, offset, false, noAssert);\n};\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n$aa3bc52a91644a03$var$Buffer.prototype.copy = function copy(target, targetStart, start, end) {\n    if (!$aa3bc52a91644a03$var$Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');\n    if (!start) start = 0;\n    if (!end && end !== 0) end = this.length;\n    if (targetStart >= target.length) targetStart = target.length;\n    if (!targetStart) targetStart = 0;\n    if (end > 0 && end < start) end = start;\n    // Copy 0 bytes; we're done\n    if (end === start) return 0;\n    if (target.length === 0 || this.length === 0) return 0;\n    // Fatal error conditions\n    if (targetStart < 0) throw new RangeError('targetStart out of bounds');\n    if (start < 0 || start >= this.length) throw new RangeError('Index out of range');\n    if (end < 0) throw new RangeError('sourceEnd out of bounds');\n    // Are we oob?\n    if (end > this.length) end = this.length;\n    if (target.length - targetStart < end - start) end = target.length - targetStart + start;\n    var len = end - start;\n    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end);\n    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);\n    return len;\n};\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\n$aa3bc52a91644a03$var$Buffer.prototype.fill = function fill(val, start, end, encoding) {\n    // Handle string cases:\n    if (typeof val === 'string') {\n        if (typeof start === 'string') {\n            encoding = start;\n            start = 0;\n            end = this.length;\n        } else if (typeof end === 'string') {\n            encoding = end;\n            end = this.length;\n        }\n        if (encoding !== undefined && typeof encoding !== 'string') throw new TypeError('encoding must be a string');\n        if (typeof encoding === 'string' && !$aa3bc52a91644a03$var$Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);\n        if (val.length === 1) {\n            var code = val.charCodeAt(0);\n            if (encoding === 'utf8' && code < 128 || encoding === 'latin1') // Fast path: If `val` fits into a single byte, use that numeric value.\n            val = code;\n        }\n    } else if (typeof val === 'number') val = val & 255;\n    else if (typeof val === 'boolean') val = Number(val);\n    // Invalid ranges are not set to a default, so can range check early.\n    if (start < 0 || this.length < start || this.length < end) throw new RangeError('Out of range index');\n    if (end <= start) return this;\n    start = start >>> 0;\n    end = end === undefined ? this.length : end >>> 0;\n    if (!val) val = 0;\n    var i;\n    if (typeof val === 'number') for(i = start; i < end; ++i)this[i] = val;\n    else {\n        var bytes = $aa3bc52a91644a03$var$Buffer.isBuffer(val) ? val : $aa3bc52a91644a03$var$Buffer.from(val, encoding);\n        var len = bytes.length;\n        if (len === 0) throw new TypeError('The value \"' + val + '\" is invalid for argument \"value\"');\n        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];\n    }\n    return this;\n};\n// CUSTOM ERRORS\n// =============\n// Simplified versions from Node, changed for Buffer-only usage\nvar $aa3bc52a91644a03$var$errors = {};\nfunction $aa3bc52a91644a03$var$E(sym, getMessage, Base) {\n    $aa3bc52a91644a03$var$errors[sym] = /*#__PURE__*/ function(Base) {\n        (0, $9xmuV._)(NodeError, Base);\n        function NodeError() {\n            (0, $cx0mh._)(this, NodeError);\n            var _this;\n            _this = (0, $fFwUa._)(this, NodeError);\n            Object.defineProperty(_this, 'message', {\n                value: getMessage.apply(_this, arguments),\n                writable: true,\n                configurable: true\n            });\n            // Add the error code to the name to include it in the stack trace.\n            _this.name = `${_this.name} [${sym}]`;\n            // Access the stack to generate the error message including the error code\n            // from the name.\n            _this.stack // eslint-disable-line no-unused-expressions\n            ;\n            // Reset the name to the actual name.\n            delete _this.name;\n            return _this;\n        }\n        (0, $7h4XF._)(NodeError, [\n            {\n                key: \"code\",\n                get: function get() {\n                    return sym;\n                },\n                set: function set(value) {\n                    Object.defineProperty(this, 'code', {\n                        configurable: true,\n                        enumerable: true,\n                        value: value,\n                        writable: true\n                    });\n                }\n            },\n            {\n                key: \"toString\",\n                value: function toString() {\n                    return `${this.name} [${sym}]: ${this.message}`;\n                }\n            }\n        ]);\n        return NodeError;\n    }(Base);\n}\n$aa3bc52a91644a03$var$E('ERR_BUFFER_OUT_OF_BOUNDS', function(name) {\n    if (name) return `${name} is outside of buffer bounds`;\n    return 'Attempt to access memory outside buffer bounds';\n}, RangeError);\n$aa3bc52a91644a03$var$E('ERR_INVALID_ARG_TYPE', function(name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`;\n}, TypeError);\n$aa3bc52a91644a03$var$E('ERR_OUT_OF_RANGE', function(str, range, input) {\n    var msg = `The value of \"${str}\" is out of range.`;\n    var received = input;\n    if (Number.isInteger(input) && Math.abs(input) > Math.pow(2, 32)) received = $aa3bc52a91644a03$var$addNumericalSeparator(String(input));\n    else if (typeof input === 'bigint') {\n        received = String(input);\n        if (input > Math.pow(BigInt(2), BigInt(32)) || input < -Math.pow(BigInt(2), BigInt(32))) received = $aa3bc52a91644a03$var$addNumericalSeparator(received);\n        received += 'n';\n    }\n    msg += ` It must be ${range}. Received ${received}`;\n    return msg;\n}, RangeError);\nfunction $aa3bc52a91644a03$var$addNumericalSeparator(val) {\n    var res = '';\n    var i = val.length;\n    var start = val[0] === '-' ? 1 : 0;\n    for(; i >= start + 4; i -= 3)res = `_${val.slice(i - 3, i)}${res}`;\n    return `${val.slice(0, i)}${res}`;\n}\n// CHECK FUNCTIONS\n// ===============\nfunction $aa3bc52a91644a03$var$checkBounds(buf, offset, byteLength) {\n    $aa3bc52a91644a03$var$validateNumber(offset, 'offset');\n    if (buf[offset] === undefined || buf[offset + byteLength] === undefined) $aa3bc52a91644a03$var$boundsError(offset, buf.length - (byteLength + 1));\n}\nfunction $aa3bc52a91644a03$var$checkIntBI(value, min, max, buf, offset, byteLength) {\n    if (value > max || value < min) {\n        var n = typeof min === 'bigint' ? 'n' : '';\n        var range;\n        if (byteLength > 3) {\n            if (min === 0 || min === BigInt(0)) range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;\n            else range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` + `${(byteLength + 1) * 8 - 1}${n}`;\n        } else range = `>= ${min}${n} and <= ${max}${n}`;\n        throw new $aa3bc52a91644a03$var$errors.ERR_OUT_OF_RANGE('value', range, value);\n    }\n    $aa3bc52a91644a03$var$checkBounds(buf, offset, byteLength);\n}\nfunction $aa3bc52a91644a03$var$validateNumber(value, name) {\n    if (typeof value !== 'number') throw new $aa3bc52a91644a03$var$errors.ERR_INVALID_ARG_TYPE(name, 'number', value);\n}\nfunction $aa3bc52a91644a03$var$boundsError(value, length, type) {\n    if (Math.floor(value) !== value) {\n        $aa3bc52a91644a03$var$validateNumber(value, type);\n        throw new $aa3bc52a91644a03$var$errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value);\n    }\n    if (length < 0) throw new $aa3bc52a91644a03$var$errors.ERR_BUFFER_OUT_OF_BOUNDS();\n    throw new $aa3bc52a91644a03$var$errors.ERR_OUT_OF_RANGE(type || 'offset', `>= ${type ? 1 : 0} and <= ${length}`, value);\n}\n// HELPER FUNCTIONS\n// ================\nvar $aa3bc52a91644a03$var$INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\nfunction $aa3bc52a91644a03$var$base64clean(str) {\n    // Node takes equal signs as end of the Base64 encoding\n    str = str.split('=')[0];\n    // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n    str = str.trim().replace($aa3bc52a91644a03$var$INVALID_BASE64_RE, '');\n    // Node converts strings with length < 2 to ''\n    if (str.length < 2) return '';\n    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n    while(str.length % 4 !== 0)str = str + '=';\n    return str;\n}\nfunction $aa3bc52a91644a03$var$utf8ToBytes(string, units) {\n    units = units || Infinity;\n    var codePoint;\n    var length = string.length;\n    var leadSurrogate = null;\n    var bytes = [];\n    for(var i = 0; i < length; ++i){\n        codePoint = string.charCodeAt(i);\n        // is surrogate component\n        if (codePoint > 0xD7FF && codePoint < 0xE000) {\n            // last char was a lead\n            if (!leadSurrogate) {\n                // no lead yet\n                if (codePoint > 0xDBFF) {\n                    // unexpected trail\n                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                    continue;\n                } else if (i + 1 === length) {\n                    // unpaired lead\n                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                    continue;\n                }\n                // valid lead\n                leadSurrogate = codePoint;\n                continue;\n            }\n            // 2 leads in a row\n            if (codePoint < 0xDC00) {\n                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                leadSurrogate = codePoint;\n                continue;\n            }\n            // valid surrogate pair\n            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n        } else if (leadSurrogate) // valid bmp char, but last char was a lead\n        {\n            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n        }\n        leadSurrogate = null;\n        // encode utf8\n        if (codePoint < 0x80) {\n            if ((units -= 1) < 0) break;\n            bytes.push(codePoint);\n        } else if (codePoint < 0x800) {\n            if ((units -= 2) < 0) break;\n            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);\n        } else if (codePoint < 0x10000) {\n            if ((units -= 3) < 0) break;\n            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n        } else if (codePoint < 0x110000) {\n            if ((units -= 4) < 0) break;\n            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n        } else throw new Error('Invalid code point');\n    }\n    return bytes;\n}\nfunction $aa3bc52a91644a03$var$asciiToBytes(str) {\n    var byteArray = [];\n    for(var i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF);\n    return byteArray;\n}\nfunction $aa3bc52a91644a03$var$utf16leToBytes(str, units) {\n    var c, hi, lo;\n    var byteArray = [];\n    for(var i = 0; i < str.length; ++i){\n        if ((units -= 2) < 0) break;\n        c = str.charCodeAt(i);\n        hi = c >> 8;\n        lo = c % 256;\n        byteArray.push(lo);\n        byteArray.push(hi);\n    }\n    return byteArray;\n}\nfunction $aa3bc52a91644a03$var$base64ToBytes(str) {\n    return $jWkTT.toByteArray($aa3bc52a91644a03$var$base64clean(str));\n}\nfunction $aa3bc52a91644a03$var$blitBuffer(src, dst, offset, length) {\n    var i;\n    for(i = 0; i < length; ++i){\n        if (i + offset >= dst.length || i >= src.length) break;\n        dst[i + offset] = src[i];\n    }\n    return i;\n}\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction $aa3bc52a91644a03$var$isInstance(obj, type) {\n    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;\n}\nfunction $aa3bc52a91644a03$var$numberIsNaN(obj) {\n    // For IE11 support\n    return obj !== obj // eslint-disable-line no-self-compare\n    ;\n}\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nvar $aa3bc52a91644a03$var$hexSliceLookupTable = function() {\n    var alphabet = '0123456789abcdef';\n    var table = new Array(256);\n    for(var i = 0; i < 16; ++i){\n        var i16 = i * 16;\n        for(var j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];\n    }\n    return table;\n}();\n// Return not function with Error if BigInt not supported\nfunction $aa3bc52a91644a03$var$defineBigIntMethod(fn) {\n    return typeof BigInt === 'undefined' ? $aa3bc52a91644a03$var$BufferBigIntNotDefined : fn;\n}\nfunction $aa3bc52a91644a03$var$BufferBigIntNotDefined() {\n    throw new Error('BigInt not supported');\n}\n\n});\nparcelRegister(\"fFwUa\", function(module, exports) {\n\n$parcel$export(module.exports, \"_\", function () { return $b684359a5868888a$export$71511d61b312f219; });\n\nvar $2JCCy = parcelRequire(\"2JCCy\");\n\nvar $ff8rK = parcelRequire(\"ff8rK\");\n\nvar $5IlRA = parcelRequire(\"5IlRA\");\nfunction $b684359a5868888a$export$71511d61b312f219(_this, derived, args) {\n    // Super\n    derived = (0, $2JCCy._)(derived);\n    return (0, $5IlRA._)(_this, (0, $ff8rK._)() ? Reflect.construct(derived, args || [], (0, $2JCCy._)(_this).constructor) : derived.apply(_this, args));\n}\n\n});\nparcelRegister(\"2JCCy\", function(module, exports) {\n\n$parcel$export(module.exports, \"_\", function () { return $1fddbe0c3c1a3fa3$export$71511d61b312f219; });\nfunction $1fddbe0c3c1a3fa3$export$71511d61b312f219(o) {\n    $1fddbe0c3c1a3fa3$export$71511d61b312f219 = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return $1fddbe0c3c1a3fa3$export$71511d61b312f219(o);\n}\n\n});\n\nparcelRegister(\"ff8rK\", function(module, exports) {\n\n$parcel$export(module.exports, \"_\", function () { return $b18ecf0a91605feb$export$71511d61b312f219; });\nfunction $b18ecf0a91605feb$export$71511d61b312f219() {\n    // Since Reflect.construct can't be properly polyfilled, some\n    // implementations (e.g. core-js@2) don't set the correct internal slots.\n    // Those polyfills don't allow us to subclass built-ins, so we need to\n    // use our fallback implementation.\n    try {\n        // If the internal slots aren't set, this throws an error similar to\n        //   TypeError: this is not a Boolean object.\n        var result = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n    } catch (_) {}\n    return ($b18ecf0a91605feb$export$71511d61b312f219 = function() {\n        return !!result;\n    })();\n}\n\n});\n\nparcelRegister(\"5IlRA\", function(module, exports) {\n\n$parcel$export(module.exports, \"_\", function () { return $42920568c35875bb$export$71511d61b312f219; });\n\nvar $d6zUP = parcelRequire(\"d6zUP\");\n\nvar $8KHnw = parcelRequire(\"8KHnw\");\nfunction $42920568c35875bb$export$71511d61b312f219(self, call) {\n    if (call && ((0, $8KHnw._)(call) === \"object\" || typeof call === \"function\")) return call;\n    return (0, $d6zUP._)(self);\n}\n\n});\nparcelRegister(\"d6zUP\", function(module, exports) {\n\n$parcel$export(module.exports, \"_\", function () { return $98a7b1f92515508c$export$71511d61b312f219; });\nfunction $98a7b1f92515508c$export$71511d61b312f219(self) {\n    if (self === void 0) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    return self;\n}\n\n});\n\nparcelRegister(\"8KHnw\", function(module, exports) {\n\n$parcel$export(module.exports, \"_\", function () { return $65f444a42ac09208$export$71511d61b312f219; });\nfunction $65f444a42ac09208$export$71511d61b312f219(obj) {\n    \"@swc/helpers - typeof\";\n    return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n}\n\n});\n\n\n\nparcelRegister(\"9xmuV\", function(module, exports) {\n\n$parcel$export(module.exports, \"_\", function () { return $6f18a5bb13975690$export$71511d61b312f219; });\n\nvar $5oklS = parcelRequire(\"5oklS\");\nfunction $6f18a5bb13975690$export$71511d61b312f219(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) throw new TypeError(\"Super expression must either be null or a function\");\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) (0, $5oklS._)(subClass, superClass);\n}\n\n});\nparcelRegister(\"5oklS\", function(module, exports) {\n\n$parcel$export(module.exports, \"_\", function () { return $010356a15c2fd2ed$export$71511d61b312f219; });\nfunction $010356a15c2fd2ed$export$71511d61b312f219(o, p) {\n    $010356a15c2fd2ed$export$71511d61b312f219 = Object.setPrototypeOf || function setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return $010356a15c2fd2ed$export$71511d61b312f219(o, p);\n}\n\n});\n\n\nparcelRegister(\"jWkTT\", function(module, exports) {\n\n$parcel$export(module.exports, \"toByteArray\", function () { return $e843a57e209ac34b$export$d622b2ad8d90c771; }, function (v) { return $e843a57e209ac34b$export$d622b2ad8d90c771 = v; });\n$parcel$export(module.exports, \"fromByteArray\", function () { return $e843a57e209ac34b$export$6100ba28696e12de; }, function (v) { return $e843a57e209ac34b$export$6100ba28696e12de = v; });\nvar $e843a57e209ac34b$export$a48f0734ac7c2329;\nvar $e843a57e209ac34b$export$d622b2ad8d90c771;\nvar $e843a57e209ac34b$export$6100ba28696e12de;\n'use strict';\n$e843a57e209ac34b$export$a48f0734ac7c2329 = $e843a57e209ac34b$var$byteLength;\n$e843a57e209ac34b$export$d622b2ad8d90c771 = $e843a57e209ac34b$var$toByteArray;\n$e843a57e209ac34b$export$6100ba28696e12de = $e843a57e209ac34b$var$fromByteArray;\nvar $e843a57e209ac34b$var$lookup = [];\nvar $e843a57e209ac34b$var$revLookup = [];\nvar $e843a57e209ac34b$var$Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\nvar $e843a57e209ac34b$var$code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nfor(var $e843a57e209ac34b$var$i = 0, $e843a57e209ac34b$var$len = $e843a57e209ac34b$var$code.length; $e843a57e209ac34b$var$i < $e843a57e209ac34b$var$len; ++$e843a57e209ac34b$var$i){\n    $e843a57e209ac34b$var$lookup[$e843a57e209ac34b$var$i] = $e843a57e209ac34b$var$code[$e843a57e209ac34b$var$i];\n    $e843a57e209ac34b$var$revLookup[$e843a57e209ac34b$var$code.charCodeAt($e843a57e209ac34b$var$i)] = $e843a57e209ac34b$var$i;\n}\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\n$e843a57e209ac34b$var$revLookup['-'.charCodeAt(0)] = 62;\n$e843a57e209ac34b$var$revLookup['_'.charCodeAt(0)] = 63;\nfunction $e843a57e209ac34b$var$getLens(b64) {\n    var len = b64.length;\n    if (len % 4 > 0) throw new Error('Invalid string. Length must be a multiple of 4');\n    // Trim off extra bytes after placeholder bytes are found\n    // See: https://github.com/beatgammit/base64-js/issues/42\n    var validLen = b64.indexOf('=');\n    if (validLen === -1) validLen = len;\n    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;\n    return [\n        validLen,\n        placeHoldersLen\n    ];\n}\n// base64 is 4/3 + up to two characters of the original data\nfunction $e843a57e209ac34b$var$byteLength(b64) {\n    var lens = $e843a57e209ac34b$var$getLens(b64);\n    var validLen = lens[0];\n    var placeHoldersLen = lens[1];\n    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\nfunction $e843a57e209ac34b$var$_byteLength(b64, validLen, placeHoldersLen) {\n    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\nfunction $e843a57e209ac34b$var$toByteArray(b64) {\n    var tmp;\n    var lens = $e843a57e209ac34b$var$getLens(b64);\n    var validLen = lens[0];\n    var placeHoldersLen = lens[1];\n    var arr = new $e843a57e209ac34b$var$Arr($e843a57e209ac34b$var$_byteLength(b64, validLen, placeHoldersLen));\n    var curByte = 0;\n    // if there are placeholders, only get up to the last complete 4 chars\n    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;\n    var i;\n    for(i = 0; i < len; i += 4){\n        tmp = $e843a57e209ac34b$var$revLookup[b64.charCodeAt(i)] << 18 | $e843a57e209ac34b$var$revLookup[b64.charCodeAt(i + 1)] << 12 | $e843a57e209ac34b$var$revLookup[b64.charCodeAt(i + 2)] << 6 | $e843a57e209ac34b$var$revLookup[b64.charCodeAt(i + 3)];\n        arr[curByte++] = tmp >> 16 & 0xFF;\n        arr[curByte++] = tmp >> 8 & 0xFF;\n        arr[curByte++] = tmp & 0xFF;\n    }\n    if (placeHoldersLen === 2) {\n        tmp = $e843a57e209ac34b$var$revLookup[b64.charCodeAt(i)] << 2 | $e843a57e209ac34b$var$revLookup[b64.charCodeAt(i + 1)] >> 4;\n        arr[curByte++] = tmp & 0xFF;\n    }\n    if (placeHoldersLen === 1) {\n        tmp = $e843a57e209ac34b$var$revLookup[b64.charCodeAt(i)] << 10 | $e843a57e209ac34b$var$revLookup[b64.charCodeAt(i + 1)] << 4 | $e843a57e209ac34b$var$revLookup[b64.charCodeAt(i + 2)] >> 2;\n        arr[curByte++] = tmp >> 8 & 0xFF;\n        arr[curByte++] = tmp & 0xFF;\n    }\n    return arr;\n}\nfunction $e843a57e209ac34b$var$tripletToBase64(num) {\n    return $e843a57e209ac34b$var$lookup[num >> 18 & 0x3F] + $e843a57e209ac34b$var$lookup[num >> 12 & 0x3F] + $e843a57e209ac34b$var$lookup[num >> 6 & 0x3F] + $e843a57e209ac34b$var$lookup[num & 0x3F];\n}\nfunction $e843a57e209ac34b$var$encodeChunk(uint8, start, end) {\n    var tmp;\n    var output = [];\n    for(var i = start; i < end; i += 3){\n        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);\n        output.push($e843a57e209ac34b$var$tripletToBase64(tmp));\n    }\n    return output.join('');\n}\nfunction $e843a57e209ac34b$var$fromByteArray(uint8) {\n    var tmp;\n    var len = uint8.length;\n    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n    ;\n    var parts = [];\n    var maxChunkLength = 16383 // must be multiple of 3\n    ;\n    // go through the array every three bytes, we'll deal with trailing stuff later\n    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push($e843a57e209ac34b$var$encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n    // pad the end with zeros, but make sure to not forget the extra bytes\n    if (extraBytes === 1) {\n        tmp = uint8[len - 1];\n        parts.push($e843a57e209ac34b$var$lookup[tmp >> 2] + $e843a57e209ac34b$var$lookup[tmp << 4 & 0x3F] + '==');\n    } else if (extraBytes === 2) {\n        tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n        parts.push($e843a57e209ac34b$var$lookup[tmp >> 10] + $e843a57e209ac34b$var$lookup[tmp >> 4 & 0x3F] + $e843a57e209ac34b$var$lookup[tmp << 2 & 0x3F] + '=');\n    }\n    return parts.join('');\n}\n\n});\n\nparcelRegister(\"4Ooth\", function(module, exports) {\n\n$parcel$export(module.exports, \"read\", function () { return $380ed06a8f757827$export$aafa59e2e03f2942; }, function (v) { return $380ed06a8f757827$export$aafa59e2e03f2942 = v; });\n$parcel$export(module.exports, \"write\", function () { return $380ed06a8f757827$export$68d8715fc104d294; }, function (v) { return $380ed06a8f757827$export$68d8715fc104d294 = v; });\n/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ var $380ed06a8f757827$export$aafa59e2e03f2942;\nvar $380ed06a8f757827$export$68d8715fc104d294;\n$380ed06a8f757827$export$aafa59e2e03f2942 = function(buffer, offset, isLE, mLen, nBytes) {\n    var e, m;\n    var eLen = nBytes * 8 - mLen - 1;\n    var eMax = (1 << eLen) - 1;\n    var eBias = eMax >> 1;\n    var nBits = -7;\n    var i = isLE ? nBytes - 1 : 0;\n    var d = isLE ? -1 : 1;\n    var s = buffer[offset + i];\n    i += d;\n    e = s & (1 << -nBits) - 1;\n    s >>= -nBits;\n    nBits += eLen;\n    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);\n    m = e & (1 << -nBits) - 1;\n    e >>= -nBits;\n    nBits += mLen;\n    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);\n    if (e === 0) e = 1 - eBias;\n    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;\n    else {\n        m = m + Math.pow(2, mLen);\n        e = e - eBias;\n    }\n    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n};\n$380ed06a8f757827$export$68d8715fc104d294 = function(buffer, value, offset, isLE, mLen, nBytes) {\n    var e, m, c;\n    var eLen = nBytes * 8 - mLen - 1;\n    var eMax = (1 << eLen) - 1;\n    var eBias = eMax >> 1;\n    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n    var i = isLE ? 0 : nBytes - 1;\n    var d = isLE ? 1 : -1;\n    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n    value = Math.abs(value);\n    if (isNaN(value) || value === Infinity) {\n        m = isNaN(value) ? 1 : 0;\n        e = eMax;\n    } else {\n        e = Math.floor(Math.log(value) / Math.LN2);\n        if (value * (c = Math.pow(2, -e)) < 1) {\n            e--;\n            c *= 2;\n        }\n        if (e + eBias >= 1) value += rt / c;\n        else value += rt * Math.pow(2, 1 - eBias);\n        if (value * c >= 2) {\n            e++;\n            c /= 2;\n        }\n        if (e + eBias >= eMax) {\n            m = 0;\n            e = eMax;\n        } else if (e + eBias >= 1) {\n            m = (value * c - 1) * Math.pow(2, mLen);\n            e = e + eBias;\n        } else {\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n            e = 0;\n        }\n    }\n    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);\n    e = e << mLen | m;\n    eLen += mLen;\n    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);\n    buffer[offset + i - d] |= s * 128;\n};\n\n});\n\n\nparcelRegister(\"kCSTH\", function(module, exports) {\n\"use strict\";\nvar $f041f0b6e7a0d2ff$var$__assign = module.exports && module.exports.__assign || function() {\n    $f041f0b6e7a0d2ff$var$__assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return $f041f0b6e7a0d2ff$var$__assign.apply(this, arguments);\n};\nObject.defineProperty(module.exports, \"__esModule\", {\n    value: true\n});\nmodule.exports.writeColor = module.exports.writePsd = module.exports.writeSection = module.exports.writeUnicodeStringWithPadding = module.exports.writeUnicodeString = module.exports.writeUnicodeStringWithoutLengthLE = module.exports.writeUnicodeStringWithoutLength = module.exports.writePascalString = module.exports.writeSignature = module.exports.writeZeros = module.exports.writeBytes = module.exports.writeFixedPointPath32 = module.exports.writeFixedPoint32 = module.exports.writeFloat64 = module.exports.writeFloat32 = module.exports.writeUint32 = module.exports.writeInt32LE = module.exports.writeInt32 = module.exports.writeUint16LE = module.exports.writeUint16 = module.exports.writeInt16 = module.exports.writeUint8 = module.exports.getWriterBufferNoCopy = module.exports.getWriterBuffer = module.exports.createWriter = void 0;\n\nvar $jE67M = parcelRequire(\"jE67M\");\n\nvar $cAUqy = parcelRequire(\"cAUqy\");\n\nvar $aqyg9 = parcelRequire(\"aqyg9\");\nfunction $f041f0b6e7a0d2ff$var$createWriter(size) {\n    if (size === void 0) size = 4096;\n    var buffer = new ArrayBuffer(size);\n    var view = new DataView(buffer);\n    var offset = 0;\n    return {\n        buffer: buffer,\n        view: view,\n        offset: offset,\n        tempBuffer: undefined\n    };\n}\nmodule.exports.createWriter = $f041f0b6e7a0d2ff$var$createWriter;\nfunction $f041f0b6e7a0d2ff$var$getWriterBuffer(writer) {\n    return writer.buffer.slice(0, writer.offset);\n}\nmodule.exports.getWriterBuffer = $f041f0b6e7a0d2ff$var$getWriterBuffer;\nfunction $f041f0b6e7a0d2ff$var$getWriterBufferNoCopy(writer) {\n    return new Uint8Array(writer.buffer, 0, writer.offset);\n}\nmodule.exports.getWriterBufferNoCopy = $f041f0b6e7a0d2ff$var$getWriterBufferNoCopy;\nfunction $f041f0b6e7a0d2ff$var$writeUint8(writer, value) {\n    var offset = $f041f0b6e7a0d2ff$var$addSize(writer, 1);\n    writer.view.setUint8(offset, value);\n}\nmodule.exports.writeUint8 = $f041f0b6e7a0d2ff$var$writeUint8;\nfunction $f041f0b6e7a0d2ff$var$writeInt16(writer, value) {\n    var offset = $f041f0b6e7a0d2ff$var$addSize(writer, 2);\n    writer.view.setInt16(offset, value, false);\n}\nmodule.exports.writeInt16 = $f041f0b6e7a0d2ff$var$writeInt16;\nfunction $f041f0b6e7a0d2ff$var$writeUint16(writer, value) {\n    var offset = $f041f0b6e7a0d2ff$var$addSize(writer, 2);\n    writer.view.setUint16(offset, value, false);\n}\nmodule.exports.writeUint16 = $f041f0b6e7a0d2ff$var$writeUint16;\nfunction $f041f0b6e7a0d2ff$var$writeUint16LE(writer, value) {\n    var offset = $f041f0b6e7a0d2ff$var$addSize(writer, 2);\n    writer.view.setUint16(offset, value, true);\n}\nmodule.exports.writeUint16LE = $f041f0b6e7a0d2ff$var$writeUint16LE;\nfunction $f041f0b6e7a0d2ff$var$writeInt32(writer, value) {\n    var offset = $f041f0b6e7a0d2ff$var$addSize(writer, 4);\n    writer.view.setInt32(offset, value, false);\n}\nmodule.exports.writeInt32 = $f041f0b6e7a0d2ff$var$writeInt32;\nfunction $f041f0b6e7a0d2ff$var$writeInt32LE(writer, value) {\n    var offset = $f041f0b6e7a0d2ff$var$addSize(writer, 4);\n    writer.view.setInt32(offset, value, true);\n}\nmodule.exports.writeInt32LE = $f041f0b6e7a0d2ff$var$writeInt32LE;\nfunction $f041f0b6e7a0d2ff$var$writeUint32(writer, value) {\n    var offset = $f041f0b6e7a0d2ff$var$addSize(writer, 4);\n    writer.view.setUint32(offset, value, false);\n}\nmodule.exports.writeUint32 = $f041f0b6e7a0d2ff$var$writeUint32;\nfunction $f041f0b6e7a0d2ff$var$writeFloat32(writer, value) {\n    var offset = $f041f0b6e7a0d2ff$var$addSize(writer, 4);\n    writer.view.setFloat32(offset, value, false);\n}\nmodule.exports.writeFloat32 = $f041f0b6e7a0d2ff$var$writeFloat32;\nfunction $f041f0b6e7a0d2ff$var$writeFloat64(writer, value) {\n    var offset = $f041f0b6e7a0d2ff$var$addSize(writer, 8);\n    writer.view.setFloat64(offset, value, false);\n}\nmodule.exports.writeFloat64 = $f041f0b6e7a0d2ff$var$writeFloat64;\n// 32-bit fixed-point number 16.16\nfunction $f041f0b6e7a0d2ff$var$writeFixedPoint32(writer, value) {\n    $f041f0b6e7a0d2ff$var$writeInt32(writer, value * 65536);\n}\nmodule.exports.writeFixedPoint32 = $f041f0b6e7a0d2ff$var$writeFixedPoint32;\n// 32-bit fixed-point number 8.24\nfunction $f041f0b6e7a0d2ff$var$writeFixedPointPath32(writer, value) {\n    $f041f0b6e7a0d2ff$var$writeInt32(writer, value * 16777216);\n}\nmodule.exports.writeFixedPointPath32 = $f041f0b6e7a0d2ff$var$writeFixedPointPath32;\nfunction $f041f0b6e7a0d2ff$var$writeBytes(writer, buffer) {\n    if (buffer) {\n        $f041f0b6e7a0d2ff$var$ensureSize(writer, writer.offset + buffer.length);\n        var bytes = new Uint8Array(writer.buffer);\n        bytes.set(buffer, writer.offset);\n        writer.offset += buffer.length;\n    }\n}\nmodule.exports.writeBytes = $f041f0b6e7a0d2ff$var$writeBytes;\nfunction $f041f0b6e7a0d2ff$var$writeZeros(writer, count) {\n    for(var i = 0; i < count; i++)$f041f0b6e7a0d2ff$var$writeUint8(writer, 0);\n}\nmodule.exports.writeZeros = $f041f0b6e7a0d2ff$var$writeZeros;\nfunction $f041f0b6e7a0d2ff$var$writeSignature(writer, signature) {\n    if (signature.length !== 4) throw new Error(\"Invalid signature: '\".concat(signature, \"'\"));\n    for(var i = 0; i < 4; i++)$f041f0b6e7a0d2ff$var$writeUint8(writer, signature.charCodeAt(i));\n}\nmodule.exports.writeSignature = $f041f0b6e7a0d2ff$var$writeSignature;\nfunction $f041f0b6e7a0d2ff$var$writePascalString(writer, text, padTo) {\n    var length = text.length;\n    if (length > 255) throw new Error(\"String too long\");\n    $f041f0b6e7a0d2ff$var$writeUint8(writer, length);\n    for(var i = 0; i < length; i++){\n        var code = text.charCodeAt(i);\n        // writeUint8(writer, code); // for testing\n        $f041f0b6e7a0d2ff$var$writeUint8(writer, code < 128 ? code : '?'.charCodeAt(0));\n    }\n    while(++length % padTo)$f041f0b6e7a0d2ff$var$writeUint8(writer, 0);\n}\nmodule.exports.writePascalString = $f041f0b6e7a0d2ff$var$writePascalString;\nfunction $f041f0b6e7a0d2ff$var$writeUnicodeStringWithoutLength(writer, text) {\n    for(var i = 0; i < text.length; i++)$f041f0b6e7a0d2ff$var$writeUint16(writer, text.charCodeAt(i));\n}\nmodule.exports.writeUnicodeStringWithoutLength = $f041f0b6e7a0d2ff$var$writeUnicodeStringWithoutLength;\nfunction $f041f0b6e7a0d2ff$var$writeUnicodeStringWithoutLengthLE(writer, text) {\n    for(var i = 0; i < text.length; i++)$f041f0b6e7a0d2ff$var$writeUint16LE(writer, text.charCodeAt(i));\n}\nmodule.exports.writeUnicodeStringWithoutLengthLE = $f041f0b6e7a0d2ff$var$writeUnicodeStringWithoutLengthLE;\nfunction $f041f0b6e7a0d2ff$var$writeUnicodeString(writer, text) {\n    $f041f0b6e7a0d2ff$var$writeUint32(writer, text.length);\n    $f041f0b6e7a0d2ff$var$writeUnicodeStringWithoutLength(writer, text);\n}\nmodule.exports.writeUnicodeString = $f041f0b6e7a0d2ff$var$writeUnicodeString;\nfunction $f041f0b6e7a0d2ff$var$writeUnicodeStringWithPadding(writer, text) {\n    $f041f0b6e7a0d2ff$var$writeUint32(writer, text.length + 1);\n    for(var i = 0; i < text.length; i++)$f041f0b6e7a0d2ff$var$writeUint16(writer, text.charCodeAt(i));\n    $f041f0b6e7a0d2ff$var$writeUint16(writer, 0);\n}\nmodule.exports.writeUnicodeStringWithPadding = $f041f0b6e7a0d2ff$var$writeUnicodeStringWithPadding;\nfunction $f041f0b6e7a0d2ff$var$getLargestLayerSize(layers) {\n    if (layers === void 0) layers = [];\n    var max = 0;\n    for(var _i = 0, layers_1 = layers; _i < layers_1.length; _i++){\n        var layer = layers_1[_i];\n        if (layer.canvas || layer.imageData) {\n            var _a = $f041f0b6e7a0d2ff$var$getLayerDimentions(layer), width = _a.width, height = _a.height;\n            max = Math.max(max, 2 * height + 2 * width * height);\n        }\n        if (layer.children) max = Math.max(max, $f041f0b6e7a0d2ff$var$getLargestLayerSize(layer.children));\n    }\n    return max;\n}\nfunction $f041f0b6e7a0d2ff$var$writeSection(writer, round, func, writeTotalLength, large) {\n    if (writeTotalLength === void 0) writeTotalLength = false;\n    if (large === void 0) large = false;\n    if (large) $f041f0b6e7a0d2ff$var$writeUint32(writer, 0);\n    var offset = writer.offset;\n    $f041f0b6e7a0d2ff$var$writeUint32(writer, 0);\n    func();\n    var length = writer.offset - offset - 4;\n    var len = length;\n    while(len % round !== 0){\n        $f041f0b6e7a0d2ff$var$writeUint8(writer, 0);\n        len++;\n    }\n    // while ((writer.offset % round) !== 0) {\n    // \twriteUint8(writer, 0);\n    // \tlen++;\n    // }\n    if (writeTotalLength) length = len;\n    writer.view.setUint32(offset, length, false);\n}\nmodule.exports.writeSection = $f041f0b6e7a0d2ff$var$writeSection;\nfunction $f041f0b6e7a0d2ff$var$verifyBitCount(target) {\n    var _a;\n    (_a = target.children) === null || _a === void 0 || _a.forEach($f041f0b6e7a0d2ff$var$verifyBitCount);\n    var data = target.imageData;\n    if (data && (data.data instanceof Uint32Array || data.data instanceof Uint16Array)) throw new Error('imageData has incorrect bitDepth');\n    if ('mask' in target && target.mask) {\n        var data_1 = target.mask.imageData;\n        if (data_1 && (data_1.data instanceof Uint32Array || data_1.data instanceof Uint16Array)) throw new Error('mask imageData has incorrect bitDepth');\n    }\n}\nfunction $f041f0b6e7a0d2ff$var$writePsd(writer, psd, options) {\n    var _a;\n    if (options === void 0) options = {};\n    if (!(+psd.width > 0 && +psd.height > 0)) throw new Error('Invalid document size');\n    if ((psd.width > 30000 || psd.height > 30000) && !options.psb) throw new Error('Document size is too large (max is 30000x30000, use PSB format instead)');\n    var bitsPerChannel = (_a = psd.bitsPerChannel) !== null && _a !== void 0 ? _a : 8;\n    if (bitsPerChannel !== 8) throw new Error('bitsPerChannel other than 8 are not supported for writing');\n    $f041f0b6e7a0d2ff$var$verifyBitCount(psd);\n    var imageResources = $f041f0b6e7a0d2ff$var$__assign({}, psd.imageResources);\n    var opt = $f041f0b6e7a0d2ff$var$__assign($f041f0b6e7a0d2ff$var$__assign({}, options), {\n        layerIds: new Set(),\n        layerToId: new Map()\n    });\n    if (opt.generateThumbnail) imageResources.thumbnail = $f041f0b6e7a0d2ff$var$createThumbnail(psd);\n    var imageData = psd.imageData;\n    if (!imageData && psd.canvas) imageData = psd.canvas.getContext('2d').getImageData(0, 0, psd.canvas.width, psd.canvas.height);\n    if (imageData && (psd.width !== imageData.width || psd.height !== imageData.height)) throw new Error('Document canvas must have the same size as document');\n    var globalAlpha = !!imageData && (0, $jE67M.hasAlpha)(imageData);\n    var maxBufferSize = Math.max($f041f0b6e7a0d2ff$var$getLargestLayerSize(psd.children), 8 * psd.width * psd.height + 2 * psd.height);\n    writer.tempBuffer = new Uint8Array(maxBufferSize);\n    // header\n    $f041f0b6e7a0d2ff$var$writeSignature(writer, '8BPS');\n    $f041f0b6e7a0d2ff$var$writeUint16(writer, options.psb ? 2 : 1); // version\n    $f041f0b6e7a0d2ff$var$writeZeros(writer, 6);\n    $f041f0b6e7a0d2ff$var$writeUint16(writer, globalAlpha ? 4 : 3); // channels\n    $f041f0b6e7a0d2ff$var$writeUint32(writer, psd.height);\n    $f041f0b6e7a0d2ff$var$writeUint32(writer, psd.width);\n    $f041f0b6e7a0d2ff$var$writeUint16(writer, bitsPerChannel); // bits per channel\n    $f041f0b6e7a0d2ff$var$writeUint16(writer, 3 /* ColorMode.RGB */ ); // we only support saving RGB right now\n    // color mode data\n    $f041f0b6e7a0d2ff$var$writeSection(writer, 1, function() {\n        var _a, _b, _c;\n        if (psd.palette) {\n            for(var i = 0; i < 256; i++)$f041f0b6e7a0d2ff$var$writeUint8(writer, ((_a = psd.palette[i]) === null || _a === void 0 ? void 0 : _a.r) || 0);\n            for(var i = 0; i < 256; i++)$f041f0b6e7a0d2ff$var$writeUint8(writer, ((_b = psd.palette[i]) === null || _b === void 0 ? void 0 : _b.g) || 0);\n            for(var i = 0; i < 256; i++)$f041f0b6e7a0d2ff$var$writeUint8(writer, ((_c = psd.palette[i]) === null || _c === void 0 ? void 0 : _c.b) || 0);\n        }\n    // TODO: other data?\n    });\n    var layers = [];\n    $f041f0b6e7a0d2ff$var$addChildren(layers, psd.children);\n    if (!layers.length) layers.push({});\n    // image resources\n    imageResources.layersGroup = layers.map(function(l) {\n        return l.linkGroup || 0;\n    });\n    imageResources.layerGroupsEnabledId = layers.map(function(l) {\n        return l.linkGroupEnabled == false ? 0 : 1;\n    });\n    $f041f0b6e7a0d2ff$var$writeSection(writer, 1, function() {\n        var _loop_1 = function _loop_1(handler) {\n            var has = handler.has(imageResources);\n            var count = has === false ? 0 : has === true ? 1 : has;\n            var _loop_2 = function _loop_2(i) {\n                $f041f0b6e7a0d2ff$var$writeSignature(writer, '8BIM');\n                $f041f0b6e7a0d2ff$var$writeUint16(writer, handler.key);\n                $f041f0b6e7a0d2ff$var$writePascalString(writer, '', 2);\n                $f041f0b6e7a0d2ff$var$writeSection(writer, 2, function() {\n                    return handler.write(writer, imageResources, i);\n                });\n            };\n            for(var i = 0; i < count; i++)_loop_2(i);\n        };\n        for(var _i = 0, resourceHandlers_1 = $aqyg9.resourceHandlers; _i < resourceHandlers_1.length; _i++){\n            var handler = resourceHandlers_1[_i];\n            _loop_1(handler);\n        }\n    });\n    // layer and mask info\n    $f041f0b6e7a0d2ff$var$writeSection(writer, 2, function() {\n        $f041f0b6e7a0d2ff$var$writeLayerInfo(writer, layers, psd, globalAlpha, opt);\n        $f041f0b6e7a0d2ff$var$writeGlobalLayerMaskInfo(writer, psd.globalLayerMaskInfo);\n        $f041f0b6e7a0d2ff$var$writeAdditionalLayerInfo(writer, psd, psd, opt);\n    }, undefined, !!opt.psb);\n    // image data\n    var channels = globalAlpha ? [\n        0,\n        1,\n        2,\n        3\n    ] : [\n        0,\n        1,\n        2\n    ];\n    var width = imageData ? imageData.width : psd.width;\n    var height = imageData ? imageData.height : psd.height;\n    var data = {\n        data: new Uint8Array(width * height * 4),\n        width: width,\n        height: height\n    };\n    $f041f0b6e7a0d2ff$var$writeUint16(writer, 1 /* Compression.RleCompressed */ ); // Photoshop doesn't support zip compression of composite image data\n    if ($jE67M.RAW_IMAGE_DATA && psd.imageDataRaw) {\n        console.log('writing raw image data');\n        $f041f0b6e7a0d2ff$var$writeBytes(writer, psd.imageDataRaw);\n    } else {\n        if (imageData) data.data.set(new Uint8Array(imageData.data.buffer, imageData.data.byteOffset, imageData.data.byteLength));\n        // add weird white matte\n        if (globalAlpha) {\n            var size = data.width * data.height * 4;\n            var p = data.data;\n            for(var i = 0; i < size; i += 4){\n                var pa = p[i + 3];\n                if (pa != 0 && pa != 255) {\n                    var a = pa / 255;\n                    var ra = 255 * (1 - a);\n                    p[i + 0] = p[i + 0] * a + ra;\n                    p[i + 1] = p[i + 1] * a + ra;\n                    p[i + 2] = p[i + 2] * a + ra;\n                }\n            }\n        }\n        $f041f0b6e7a0d2ff$var$writeBytes(writer, (0, $jE67M.writeDataRLE)(writer.tempBuffer, data, channels, !!options.psb));\n    }\n}\nmodule.exports.writePsd = $f041f0b6e7a0d2ff$var$writePsd;\nfunction $f041f0b6e7a0d2ff$var$writeLayerInfo(writer, layers, psd, globalAlpha, options) {\n    $f041f0b6e7a0d2ff$var$writeSection(writer, 4, function() {\n        var _a;\n        $f041f0b6e7a0d2ff$var$writeInt16(writer, globalAlpha ? -layers.length : layers.length);\n        var layersData = layers.map(function(l, i) {\n            return $f041f0b6e7a0d2ff$var$getChannels(writer.tempBuffer, l, i === 0, options);\n        });\n        var _loop_3 = function _loop_3(layerData) {\n            var layer = layerData.layer, top_1 = layerData.top, left = layerData.left, bottom = layerData.bottom, right = layerData.right, channels = layerData.channels;\n            $f041f0b6e7a0d2ff$var$writeInt32(writer, top_1);\n            $f041f0b6e7a0d2ff$var$writeInt32(writer, left);\n            $f041f0b6e7a0d2ff$var$writeInt32(writer, bottom);\n            $f041f0b6e7a0d2ff$var$writeInt32(writer, right);\n            $f041f0b6e7a0d2ff$var$writeUint16(writer, channels.length);\n            for(var _e = 0, channels_1 = channels; _e < channels_1.length; _e++){\n                var c = channels_1[_e];\n                $f041f0b6e7a0d2ff$var$writeInt16(writer, c.channelId);\n                if (options.psb) $f041f0b6e7a0d2ff$var$writeUint32(writer, 0);\n                $f041f0b6e7a0d2ff$var$writeUint32(writer, c.length);\n            }\n            $f041f0b6e7a0d2ff$var$writeSignature(writer, '8BIM');\n            $f041f0b6e7a0d2ff$var$writeSignature(writer, $jE67M.fromBlendMode[layer.blendMode] || 'norm');\n            $f041f0b6e7a0d2ff$var$writeUint8(writer, Math.round((0, $jE67M.clamp)((_a = layer.opacity) !== null && _a !== void 0 ? _a : 1, 0, 1) * 255));\n            $f041f0b6e7a0d2ff$var$writeUint8(writer, layer.clipping ? 1 : 0);\n            var flags = 0x08; // 1 for Photoshop 5.0 and later, tells if bit 4 has useful information\n            if (layer.transparencyProtected) flags |= 0x01;\n            if (layer.hidden) flags |= 0x02;\n            if (layer.vectorMask || layer.sectionDivider && layer.sectionDivider.type !== 0 /* SectionDividerType.Other */  || layer.adjustment) flags |= 0x10; // pixel data irrelevant to appearance of document\n            if (layer.effectsOpen) flags |= 0x20;\n            $f041f0b6e7a0d2ff$var$writeUint8(writer, flags);\n            $f041f0b6e7a0d2ff$var$writeUint8(writer, 0); // filler\n            $f041f0b6e7a0d2ff$var$writeSection(writer, 1, function() {\n                $f041f0b6e7a0d2ff$var$writeLayerMaskData(writer, layer, layerData);\n                $f041f0b6e7a0d2ff$var$writeLayerBlendingRanges(writer, layer);\n                $f041f0b6e7a0d2ff$var$writePascalString(writer, (layer.name || '').substring(0, 255), 4);\n                $f041f0b6e7a0d2ff$var$writeAdditionalLayerInfo(writer, layer, psd, options);\n            });\n        };\n        // layer records\n        for(var _i = 0, layersData_1 = layersData; _i < layersData_1.length; _i++){\n            var layerData = layersData_1[_i];\n            _loop_3(layerData);\n        }\n        // layer channel image data\n        for(var _b = 0, layersData_2 = layersData; _b < layersData_2.length; _b++){\n            var layerData = layersData_2[_b];\n            for(var _c = 0, _d = layerData.channels; _c < _d.length; _c++){\n                var channel = _d[_c];\n                $f041f0b6e7a0d2ff$var$writeUint16(writer, channel.compression);\n                if (channel.buffer) $f041f0b6e7a0d2ff$var$writeBytes(writer, channel.buffer);\n            }\n        }\n    }, true, options.psb);\n}\nfunction $f041f0b6e7a0d2ff$var$writeLayerMaskData(writer, _a, layerData) {\n    var mask = _a.mask, realMask = _a.realMask;\n    $f041f0b6e7a0d2ff$var$writeSection(writer, 1, function() {\n        if (!mask && !realMask) return;\n        var params = 0, flags = 0, realFlags = 0;\n        if (mask) {\n            if (mask.userMaskDensity !== undefined) params |= 1 /* MaskParams.UserMaskDensity */ ;\n            if (mask.userMaskFeather !== undefined) params |= 2 /* MaskParams.UserMaskFeather */ ;\n            if (mask.vectorMaskDensity !== undefined) params |= 4 /* MaskParams.VectorMaskDensity */ ;\n            if (mask.vectorMaskFeather !== undefined) params |= 8 /* MaskParams.VectorMaskFeather */ ;\n            if (mask.disabled) flags |= 2 /* LayerMaskFlags.LayerMaskDisabled */ ;\n            if (mask.positionRelativeToLayer) flags |= 1 /* LayerMaskFlags.PositionRelativeToLayer */ ;\n            if (mask.fromVectorData) flags |= 8 /* LayerMaskFlags.LayerMaskFromRenderingOtherData */ ;\n            if (params) flags |= 16 /* LayerMaskFlags.MaskHasParametersAppliedToIt */ ;\n        }\n        var m = layerData.mask || {};\n        $f041f0b6e7a0d2ff$var$writeInt32(writer, m.top || 0);\n        $f041f0b6e7a0d2ff$var$writeInt32(writer, m.left || 0);\n        $f041f0b6e7a0d2ff$var$writeInt32(writer, m.bottom || 0);\n        $f041f0b6e7a0d2ff$var$writeInt32(writer, m.right || 0);\n        $f041f0b6e7a0d2ff$var$writeUint8(writer, mask && mask.defaultColor || 0);\n        $f041f0b6e7a0d2ff$var$writeUint8(writer, flags);\n        if (realMask) {\n            if (realMask.disabled) realFlags |= 2 /* LayerMaskFlags.LayerMaskDisabled */ ;\n            if (realMask.positionRelativeToLayer) realFlags |= 1 /* LayerMaskFlags.PositionRelativeToLayer */ ;\n            if (realMask.fromVectorData) realFlags |= 8 /* LayerMaskFlags.LayerMaskFromRenderingOtherData */ ;\n            var r = layerData.realMask || {};\n            $f041f0b6e7a0d2ff$var$writeUint8(writer, realFlags);\n            $f041f0b6e7a0d2ff$var$writeUint8(writer, realMask.defaultColor || 0);\n            $f041f0b6e7a0d2ff$var$writeInt32(writer, r.top || 0);\n            $f041f0b6e7a0d2ff$var$writeInt32(writer, r.left || 0);\n            $f041f0b6e7a0d2ff$var$writeInt32(writer, r.bottom || 0);\n            $f041f0b6e7a0d2ff$var$writeInt32(writer, r.right || 0);\n        }\n        if (params && mask) {\n            $f041f0b6e7a0d2ff$var$writeUint8(writer, params);\n            if (mask.userMaskDensity !== undefined) $f041f0b6e7a0d2ff$var$writeUint8(writer, Math.round(mask.userMaskDensity * 0xff));\n            if (mask.userMaskFeather !== undefined) $f041f0b6e7a0d2ff$var$writeFloat64(writer, mask.userMaskFeather);\n            if (mask.vectorMaskDensity !== undefined) $f041f0b6e7a0d2ff$var$writeUint8(writer, Math.round(mask.vectorMaskDensity * 0xff));\n            if (mask.vectorMaskFeather !== undefined) $f041f0b6e7a0d2ff$var$writeFloat64(writer, mask.vectorMaskFeather);\n        }\n        $f041f0b6e7a0d2ff$var$writeZeros(writer, 2);\n    });\n}\nfunction $f041f0b6e7a0d2ff$var$writerBlendingRange(writer, range) {\n    $f041f0b6e7a0d2ff$var$writeUint8(writer, range[0]);\n    $f041f0b6e7a0d2ff$var$writeUint8(writer, range[1]);\n    $f041f0b6e7a0d2ff$var$writeUint8(writer, range[2]);\n    $f041f0b6e7a0d2ff$var$writeUint8(writer, range[3]);\n}\nfunction $f041f0b6e7a0d2ff$var$writeLayerBlendingRanges(writer, layer) {\n    $f041f0b6e7a0d2ff$var$writeSection(writer, 1, function() {\n        var ranges = layer.blendingRanges;\n        if (ranges) {\n            $f041f0b6e7a0d2ff$var$writerBlendingRange(writer, ranges.compositeGrayBlendSource);\n            $f041f0b6e7a0d2ff$var$writerBlendingRange(writer, ranges.compositeGraphBlendDestinationRange);\n            for(var _i = 0, _a = ranges.ranges; _i < _a.length; _i++){\n                var r = _a[_i];\n                $f041f0b6e7a0d2ff$var$writerBlendingRange(writer, r.sourceRange);\n                $f041f0b6e7a0d2ff$var$writerBlendingRange(writer, r.destRange);\n            }\n        }\n    });\n}\nfunction $f041f0b6e7a0d2ff$var$writeGlobalLayerMaskInfo(writer, info) {\n    $f041f0b6e7a0d2ff$var$writeSection(writer, 1, function() {\n        if (info) {\n            $f041f0b6e7a0d2ff$var$writeUint16(writer, info.overlayColorSpace);\n            $f041f0b6e7a0d2ff$var$writeUint16(writer, info.colorSpace1);\n            $f041f0b6e7a0d2ff$var$writeUint16(writer, info.colorSpace2);\n            $f041f0b6e7a0d2ff$var$writeUint16(writer, info.colorSpace3);\n            $f041f0b6e7a0d2ff$var$writeUint16(writer, info.colorSpace4);\n            $f041f0b6e7a0d2ff$var$writeUint16(writer, info.opacity * 0xff);\n            $f041f0b6e7a0d2ff$var$writeUint8(writer, info.kind);\n            $f041f0b6e7a0d2ff$var$writeZeros(writer, 3);\n        }\n    });\n}\nfunction $f041f0b6e7a0d2ff$var$writeAdditionalLayerInfo(writer, target, psd, options) {\n    var _loop_4 = function _loop_4(handler) {\n        var key = handler.key;\n        if (key === 'Txt2' && options.invalidateTextLayers) return \"continue\";\n        if (key === 'vmsk' && options.psb) key = 'vsms';\n        if (handler.has(target)) {\n            var large = options.psb && $jE67M.largeAdditionalInfoKeys.indexOf(key) !== -1;\n            var writeTotalLength = key !== 'Txt2' && key !== 'cinf' && key !== 'extn' && key !== 'CAI ' && key !== 'OCIO';\n            var fourBytes = key === 'Txt2' || key === 'luni' || key === 'vmsk' || key === 'artb' || key === 'artd' || key === 'vogk' || key === 'SoLd' || key === 'lnk2' || key === 'vscg' || key === 'vsms' || key === 'GdFl' || key === 'lmfx' || key === 'lrFX' || key === 'cinf' || key === 'PlLd' || key === 'Anno' || key === 'CAI ' || key === 'OCIO' || key === 'GenI' || key === 'FEid';\n            $f041f0b6e7a0d2ff$var$writeSignature(writer, large ? '8B64' : '8BIM');\n            $f041f0b6e7a0d2ff$var$writeSignature(writer, key);\n            $f041f0b6e7a0d2ff$var$writeSection(writer, fourBytes ? 4 : 2, function() {\n                handler.write(writer, target, psd, options);\n            }, writeTotalLength, large);\n        }\n    };\n    for(var _i = 0, infoHandlers_1 = $cAUqy.infoHandlers; _i < infoHandlers_1.length; _i++){\n        var handler = infoHandlers_1[_i];\n        _loop_4(handler);\n    }\n}\nfunction $f041f0b6e7a0d2ff$var$addChildren(layers, children) {\n    if (!children) return;\n    // const layerIds: number[] = [2];\n    // const timestamps: number[] = [1740120767.0230637];\n    for(var _i = 0, children_1 = children; _i < children_1.length; _i++){\n        var c = children_1[_i];\n        if (c.children && c.canvas) throw new Error(\"Invalid layer, cannot have both 'canvas' and 'children' properties\");\n        if (c.children && c.imageData) throw new Error(\"Invalid layer, cannot have both 'imageData' and 'children' properties\");\n        if (c.children) {\n            layers.push({\n                name: '</Layer group>',\n                sectionDivider: {\n                    type: 3 /* SectionDividerType.BoundingSectionDivider */ \n                }\n            });\n            $f041f0b6e7a0d2ff$var$addChildren(layers, c.children);\n            layers.push($f041f0b6e7a0d2ff$var$__assign($f041f0b6e7a0d2ff$var$__assign({}, c), {\n                blendMode: c.blendMode === 'pass through' ? 'normal' : c.blendMode,\n                sectionDivider: {\n                    type: c.opened === false ? 2 /* SectionDividerType.ClosedFolder */  : 1 /* SectionDividerType.OpenFolder */ ,\n                    key: $jE67M.fromBlendMode[c.blendMode] || 'pass',\n                    subType: 0\n                }\n            }));\n        } else layers.push($f041f0b6e7a0d2ff$var$__assign({}, c));\n    }\n}\nfunction $f041f0b6e7a0d2ff$var$resizeBuffer(writer, size) {\n    var newLength = writer.buffer.byteLength;\n    do newLength *= 2;\n    while (size > newLength);\n    var newBuffer = new ArrayBuffer(newLength);\n    var newBytes = new Uint8Array(newBuffer);\n    var oldBytes = new Uint8Array(writer.buffer);\n    newBytes.set(oldBytes);\n    writer.buffer = newBuffer;\n    writer.view = new DataView(writer.buffer);\n}\nfunction $f041f0b6e7a0d2ff$var$ensureSize(writer, size) {\n    if (size > writer.buffer.byteLength) $f041f0b6e7a0d2ff$var$resizeBuffer(writer, size);\n}\nfunction $f041f0b6e7a0d2ff$var$addSize(writer, size) {\n    var offset = writer.offset;\n    $f041f0b6e7a0d2ff$var$ensureSize(writer, writer.offset += size);\n    return offset;\n}\nfunction $f041f0b6e7a0d2ff$var$createThumbnail(psd) {\n    var canvas = (0, $jE67M.createCanvas)(10, 10);\n    var scale = 1;\n    if (psd.width > psd.height) {\n        canvas.width = 160;\n        canvas.height = Math.floor(psd.height * (canvas.width / psd.width));\n        scale = canvas.width / psd.width;\n    } else {\n        canvas.height = 160;\n        canvas.width = Math.floor(psd.width * (canvas.height / psd.height));\n        scale = canvas.height / psd.height;\n    }\n    var context = canvas.getContext('2d');\n    context.scale(scale, scale);\n    if (psd.imageData) context.drawImage((0, $jE67M.imageDataToCanvas)(psd.imageData), 0, 0);\n    else if (psd.canvas) context.drawImage(psd.canvas, 0, 0);\n    return canvas;\n}\nfunction $f041f0b6e7a0d2ff$var$getMaskChannels(tempBuffer, layerData, layer, mask, options, realMask) {\n    var top = mask.top | 0;\n    var left = mask.left | 0;\n    var right = mask.right | 0;\n    var bottom = mask.bottom | 0;\n    var _a = $f041f0b6e7a0d2ff$var$getLayerDimentions(mask), width = _a.width, height = _a.height;\n    var imageData = mask.imageData;\n    if (!imageData && mask.canvas && width && height) imageData = mask.canvas.getContext('2d').getImageData(0, 0, width, height);\n    if (width && height && imageData) {\n        right = left + width;\n        bottom = top + height;\n        if (imageData.width !== width || imageData.height !== height) throw new Error('Invalid imageData dimentions');\n        var buffer = void 0;\n        var compression = void 0;\n        if ($jE67M.RAW_IMAGE_DATA && layer[realMask ? 'realMaskDataRaw' : 'maskDataRaw']) {\n            buffer = layer[realMask ? 'realMaskDataRaw' : 'maskDataRaw'];\n            compression = layer[realMask ? 'realMaskDataRawCompression' : 'maskDataRawCompression'];\n        } else if (options.compress) {\n            buffer = (0, $jE67M.writeDataZipWithoutPrediction)(imageData, [\n                0\n            ]);\n            compression = 2 /* Compression.ZipWithoutPrediction */ ;\n        } else {\n            buffer = (0, $jE67M.writeDataRLE)(tempBuffer, imageData, [\n                0\n            ], !!options.psb);\n            compression = 1 /* Compression.RleCompressed */ ;\n        }\n        layerData.channels.push({\n            channelId: realMask ? -3 /* ChannelID.RealUserMask */  : -2 /* ChannelID.UserMask */ ,\n            compression: compression,\n            buffer: buffer,\n            length: 2 + buffer.length\n        });\n    }\n    layerData[realMask ? 'realMask' : 'mask'] = {\n        top: top,\n        left: left,\n        right: right,\n        bottom: bottom\n    };\n}\nfunction $f041f0b6e7a0d2ff$var$getChannels(tempBuffer, layer, background, options) {\n    var layerData = $f041f0b6e7a0d2ff$var$getLayerChannels(tempBuffer, layer, background, options);\n    if (layer.mask) $f041f0b6e7a0d2ff$var$getMaskChannels(tempBuffer, layerData, layer, layer.mask, options, false);\n    if (layer.realMask) $f041f0b6e7a0d2ff$var$getMaskChannels(tempBuffer, layerData, layer, layer.realMask, options, true);\n    return layerData;\n}\nfunction $f041f0b6e7a0d2ff$var$getLayerDimentions(_a) {\n    var canvas = _a.canvas, imageData = _a.imageData;\n    return imageData || canvas || {\n        width: 0,\n        height: 0\n    };\n}\nfunction $f041f0b6e7a0d2ff$var$cropImageData(data, left, top, width, height) {\n    if (data.data instanceof Uint32Array || data.data instanceof Uint16Array) throw new Error('imageData has incorrect bit depth');\n    var croppedData = (0, $jE67M.createImageData)(width, height);\n    var srcData = data.data;\n    var dstData = croppedData.data;\n    for(var y = 0; y < height; y++)for(var x = 0; x < width; x++){\n        var src = (x + left + (y + top) * data.width) * 4;\n        var dst = (x + y * width) * 4;\n        dstData[dst] = srcData[src];\n        dstData[dst + 1] = srcData[src + 1];\n        dstData[dst + 2] = srcData[src + 2];\n        dstData[dst + 3] = srcData[src + 3];\n    }\n    return croppedData;\n}\nfunction $f041f0b6e7a0d2ff$var$getLayerChannels(tempBuffer, layer, background, options) {\n    var _a;\n    var top = layer.top | 0;\n    var left = layer.left | 0;\n    var right = layer.right | 0;\n    var bottom = layer.bottom | 0;\n    var channels = [\n        {\n            channelId: -1 /* ChannelID.Transparency */ ,\n            compression: 0 /* Compression.RawData */ ,\n            buffer: undefined,\n            length: 2\n        },\n        {\n            channelId: 0 /* ChannelID.Color0 */ ,\n            compression: 0 /* Compression.RawData */ ,\n            buffer: undefined,\n            length: 2\n        },\n        {\n            channelId: 1 /* ChannelID.Color1 */ ,\n            compression: 0 /* Compression.RawData */ ,\n            buffer: undefined,\n            length: 2\n        },\n        {\n            channelId: 2 /* ChannelID.Color2 */ ,\n            compression: 0 /* Compression.RawData */ ,\n            buffer: undefined,\n            length: 2\n        }\n    ];\n    var _b = $f041f0b6e7a0d2ff$var$getLayerDimentions(layer), width = _b.width, height = _b.height;\n    if (!(layer.canvas || layer.imageData) || !width || !height) {\n        right = left;\n        bottom = top;\n        return {\n            layer: layer,\n            top: top,\n            left: left,\n            right: right,\n            bottom: bottom,\n            channels: channels\n        };\n    }\n    right = left + width;\n    bottom = top + height;\n    var data = layer.imageData || layer.canvas.getContext('2d').getImageData(0, 0, width, height);\n    if (options.trimImageData) {\n        var trimmed = $f041f0b6e7a0d2ff$var$trimData(data);\n        if (trimmed.left !== 0 || trimmed.top !== 0 || trimmed.right !== data.width || trimmed.bottom !== data.height) {\n            left += trimmed.left;\n            top += trimmed.top;\n            right -= data.width - trimmed.right;\n            bottom -= data.height - trimmed.bottom;\n            width = right - left;\n            height = bottom - top;\n            if (!width || !height) return {\n                layer: layer,\n                top: top,\n                left: left,\n                right: right,\n                bottom: bottom,\n                channels: channels\n            };\n            data = $f041f0b6e7a0d2ff$var$cropImageData(data, trimmed.left, trimmed.top, width, height);\n        }\n    }\n    var channelIds = [\n        0 /* ChannelID.Color0 */ ,\n        1 /* ChannelID.Color1 */ ,\n        2 /* ChannelID.Color2 */ \n    ];\n    if (!background || options.noBackground || layer.mask || (0, $jE67M.hasAlpha)(data) || $jE67M.RAW_IMAGE_DATA && ((_a = layer.imageDataRaw) === null || _a === void 0 ? void 0 : _a['-1'])) channelIds.unshift(-1 /* ChannelID.Transparency */ );\n    channels = channelIds.map(function(channelId) {\n        var offset = (0, $jE67M.offsetForChannel)(channelId, false); // TODO: psd.colorMode === ColorMode.CMYK);\n        var buffer;\n        var compression;\n        if ($jE67M.RAW_IMAGE_DATA && layer.imageDataRaw) {\n            // console.log('written raw layer image data');\n            buffer = layer.imageDataRaw[channelId];\n            compression = layer.imageDataRawCompression[channelId];\n        } else if (options.compress) {\n            buffer = (0, $jE67M.writeDataZipWithoutPrediction)(data, [\n                offset\n            ]);\n            compression = 2 /* Compression.ZipWithoutPrediction */ ;\n        } else {\n            buffer = (0, $jE67M.writeDataRLE)(tempBuffer, data, [\n                offset\n            ], !!options.psb);\n            compression = 1 /* Compression.RleCompressed */ ;\n        }\n        return {\n            channelId: channelId,\n            compression: compression,\n            buffer: buffer,\n            length: 2 + buffer.length\n        };\n    });\n    return {\n        layer: layer,\n        top: top,\n        left: left,\n        right: right,\n        bottom: bottom,\n        channels: channels\n    };\n}\nfunction $f041f0b6e7a0d2ff$var$isRowEmpty(_a, y, left, right) {\n    var data = _a.data, width = _a.width;\n    var start = (y * width + left) * 4 + 3 | 0;\n    var end = start + (right - left) * 4 | 0;\n    for(var i = start; i < end; i = i + 4 | 0){\n        if (data[i] !== 0) return false;\n    }\n    return true;\n}\nfunction $f041f0b6e7a0d2ff$var$isColEmpty(_a, x, top, bottom) {\n    var data = _a.data, width = _a.width;\n    var stride = width * 4 | 0;\n    var start = top * stride + x * 4 + 3 | 0;\n    for(var y = top, i = start; y < bottom; y++, i = i + stride | 0){\n        if (data[i] !== 0) return false;\n    }\n    return true;\n}\nfunction $f041f0b6e7a0d2ff$var$trimData(data) {\n    var top = 0;\n    var left = 0;\n    var right = data.width;\n    var bottom = data.height;\n    while(top < bottom && $f041f0b6e7a0d2ff$var$isRowEmpty(data, top, left, right))top++;\n    while(bottom > top && $f041f0b6e7a0d2ff$var$isRowEmpty(data, bottom - 1, left, right))bottom--;\n    while(left < right && $f041f0b6e7a0d2ff$var$isColEmpty(data, left, top, bottom))left++;\n    while(right > left && $f041f0b6e7a0d2ff$var$isColEmpty(data, right - 1, top, bottom))right--;\n    return {\n        top: top,\n        left: left,\n        right: right,\n        bottom: bottom\n    };\n}\nfunction $f041f0b6e7a0d2ff$var$writeColor(writer, color) {\n    if (!color) {\n        $f041f0b6e7a0d2ff$var$writeUint16(writer, 0 /* ColorSpace.RGB */ );\n        $f041f0b6e7a0d2ff$var$writeZeros(writer, 8);\n    } else if ('r' in color) {\n        $f041f0b6e7a0d2ff$var$writeUint16(writer, 0 /* ColorSpace.RGB */ );\n        $f041f0b6e7a0d2ff$var$writeUint16(writer, Math.round(color.r * 257));\n        $f041f0b6e7a0d2ff$var$writeUint16(writer, Math.round(color.g * 257));\n        $f041f0b6e7a0d2ff$var$writeUint16(writer, Math.round(color.b * 257));\n        $f041f0b6e7a0d2ff$var$writeUint16(writer, 0);\n    } else if ('fr' in color) {\n        $f041f0b6e7a0d2ff$var$writeUint16(writer, 0 /* ColorSpace.RGB */ );\n        $f041f0b6e7a0d2ff$var$writeUint16(writer, Math.round(color.fr * 65535));\n        $f041f0b6e7a0d2ff$var$writeUint16(writer, Math.round(color.fg * 65535));\n        $f041f0b6e7a0d2ff$var$writeUint16(writer, Math.round(color.fb * 65535));\n        $f041f0b6e7a0d2ff$var$writeUint16(writer, 0);\n    } else if ('l' in color) {\n        $f041f0b6e7a0d2ff$var$writeUint16(writer, 7 /* ColorSpace.Lab */ );\n        $f041f0b6e7a0d2ff$var$writeInt16(writer, Math.round(color.l * 10000));\n        $f041f0b6e7a0d2ff$var$writeInt16(writer, Math.round(color.a < 0 ? color.a * 12800 : color.a * 12700));\n        $f041f0b6e7a0d2ff$var$writeInt16(writer, Math.round(color.b < 0 ? color.b * 12800 : color.b * 12700));\n        $f041f0b6e7a0d2ff$var$writeUint16(writer, 0);\n    } else if ('h' in color) {\n        $f041f0b6e7a0d2ff$var$writeUint16(writer, 1 /* ColorSpace.HSB */ );\n        $f041f0b6e7a0d2ff$var$writeUint16(writer, Math.round(color.h * 0xffff));\n        $f041f0b6e7a0d2ff$var$writeUint16(writer, Math.round(color.s * 0xffff));\n        $f041f0b6e7a0d2ff$var$writeUint16(writer, Math.round(color.b * 0xffff));\n        $f041f0b6e7a0d2ff$var$writeUint16(writer, 0);\n    } else if ('c' in color) {\n        $f041f0b6e7a0d2ff$var$writeUint16(writer, 2 /* ColorSpace.CMYK */ );\n        $f041f0b6e7a0d2ff$var$writeUint16(writer, Math.round(color.c * 257));\n        $f041f0b6e7a0d2ff$var$writeUint16(writer, Math.round(color.m * 257));\n        $f041f0b6e7a0d2ff$var$writeUint16(writer, Math.round(color.y * 257));\n        $f041f0b6e7a0d2ff$var$writeUint16(writer, Math.round(color.k * 257));\n    } else {\n        $f041f0b6e7a0d2ff$var$writeUint16(writer, 8 /* ColorSpace.Grayscale */ );\n        $f041f0b6e7a0d2ff$var$writeUint16(writer, Math.round(color.k * 10000 / 255));\n        $f041f0b6e7a0d2ff$var$writeZeros(writer, 6);\n    }\n}\nmodule.exports.writeColor = $f041f0b6e7a0d2ff$var$writeColor;\n\n});\nparcelRegister(\"jE67M\", function(module, exports) {\n\"use strict\";\nObject.defineProperty(module.exports, \"__esModule\", {\n    value: true\n});\nmodule.exports.initializeCanvas = module.exports.createImageData = module.exports.createCanvasFromData = module.exports.createCanvas = module.exports.writeDataZipWithoutPrediction = module.exports.writeDataRLE = module.exports.writeDataRaw = module.exports.decodeBitmap = module.exports.imageDataToCanvas = module.exports.resetImageData = module.exports.hasAlpha = module.exports.clamp = module.exports.offsetForChannel = module.exports.Compression = module.exports.ChannelID = module.exports.MaskParams = module.exports.LayerMaskFlags = module.exports.ColorSpace = module.exports.createEnum = module.exports.revMap = module.exports.largeAdditionalInfoKeys = module.exports.layerColors = module.exports.toBlendMode = module.exports.fromBlendMode = module.exports.RAW_IMAGE_DATA = module.exports.MOCK_HANDLERS = void 0;\n\nvar $jWkTT = parcelRequire(\"jWkTT\");\n\nvar $1eu3Z = parcelRequire(\"1eu3Z\");\nmodule.exports.MOCK_HANDLERS = false;\nmodule.exports.RAW_IMAGE_DATA = false;\nmodule.exports.fromBlendMode = {};\nmodule.exports.toBlendMode = {\n    'pass': 'pass through',\n    'norm': 'normal',\n    'diss': 'dissolve',\n    'dark': 'darken',\n    'mul ': 'multiply',\n    'idiv': 'color burn',\n    'lbrn': 'linear burn',\n    'dkCl': 'darker color',\n    'lite': 'lighten',\n    'scrn': 'screen',\n    'div ': 'color dodge',\n    'lddg': 'linear dodge',\n    'lgCl': 'lighter color',\n    'over': 'overlay',\n    'sLit': 'soft light',\n    'hLit': 'hard light',\n    'vLit': 'vivid light',\n    'lLit': 'linear light',\n    'pLit': 'pin light',\n    'hMix': 'hard mix',\n    'diff': 'difference',\n    'smud': 'exclusion',\n    'fsub': 'subtract',\n    'fdiv': 'divide',\n    'hue ': 'hue',\n    'sat ': 'saturation',\n    'colr': 'color',\n    'lum ': 'luminosity'\n};\nObject.keys(module.exports.toBlendMode).forEach(function(key) {\n    return module.exports.fromBlendMode[module.exports.toBlendMode[key]] = key;\n});\nmodule.exports.layerColors = [\n    'none',\n    'red',\n    'orange',\n    'yellow',\n    'green',\n    'blue',\n    'violet',\n    'gray'\n];\nmodule.exports.largeAdditionalInfoKeys = [\n    // from documentation\n    'LMsk',\n    'Lr16',\n    'Lr32',\n    'Layr',\n    'Mt16',\n    'Mt32',\n    'Mtrn',\n    'Alph',\n    'FMsk',\n    'lnk2',\n    'FEid',\n    'FXid',\n    'PxSD',\n    // from guessing\n    'cinf'\n];\nfunction $e4d680eb7b71aa6d$var$revMap(map) {\n    var result = {};\n    Object.keys(map).forEach(function(key) {\n        return result[map[key]] = key;\n    });\n    return result;\n}\nmodule.exports.revMap = $e4d680eb7b71aa6d$var$revMap;\nfunction $e4d680eb7b71aa6d$var$createEnum(prefix, def, map) {\n    var rev = $e4d680eb7b71aa6d$var$revMap(map);\n    var decode = function decode(val) {\n        var value = val.split('.')[1];\n        if (value && !rev[value]) throw new Error(\"Unrecognized value for enum: '\".concat(val, \"'\"));\n        return rev[value] || def;\n    };\n    var encode = function encode(val) {\n        if (val && !map[val]) throw new Error(\"Invalid value for enum: '\".concat(val, \"'\"));\n        return \"\".concat(prefix, \".\").concat(map[val] || map[def]);\n    };\n    return {\n        decode: decode,\n        encode: encode\n    };\n}\nmodule.exports.createEnum = $e4d680eb7b71aa6d$var$createEnum;\nvar $e4d680eb7b71aa6d$var$ColorSpace;\n(function(ColorSpace) {\n    ColorSpace[ColorSpace[\"RGB\"] = 0] = \"RGB\";\n    ColorSpace[ColorSpace[\"HSB\"] = 1] = \"HSB\";\n    ColorSpace[ColorSpace[\"CMYK\"] = 2] = \"CMYK\";\n    ColorSpace[ColorSpace[\"Lab\"] = 7] = \"Lab\";\n    ColorSpace[ColorSpace[\"Grayscale\"] = 8] = \"Grayscale\";\n})($e4d680eb7b71aa6d$var$ColorSpace = module.exports.ColorSpace || (module.exports.ColorSpace = {}));\nvar $e4d680eb7b71aa6d$var$LayerMaskFlags;\n(function(LayerMaskFlags) {\n    LayerMaskFlags[LayerMaskFlags[\"PositionRelativeToLayer\"] = 1] = \"PositionRelativeToLayer\";\n    LayerMaskFlags[LayerMaskFlags[\"LayerMaskDisabled\"] = 2] = \"LayerMaskDisabled\";\n    LayerMaskFlags[LayerMaskFlags[\"InvertLayerMaskWhenBlending\"] = 4] = \"InvertLayerMaskWhenBlending\";\n    LayerMaskFlags[LayerMaskFlags[\"LayerMaskFromRenderingOtherData\"] = 8] = \"LayerMaskFromRenderingOtherData\";\n    LayerMaskFlags[LayerMaskFlags[\"MaskHasParametersAppliedToIt\"] = 16] = \"MaskHasParametersAppliedToIt\";\n})($e4d680eb7b71aa6d$var$LayerMaskFlags = module.exports.LayerMaskFlags || (module.exports.LayerMaskFlags = {}));\nvar $e4d680eb7b71aa6d$var$MaskParams;\n(function(MaskParams) {\n    MaskParams[MaskParams[\"UserMaskDensity\"] = 1] = \"UserMaskDensity\";\n    MaskParams[MaskParams[\"UserMaskFeather\"] = 2] = \"UserMaskFeather\";\n    MaskParams[MaskParams[\"VectorMaskDensity\"] = 4] = \"VectorMaskDensity\";\n    MaskParams[MaskParams[\"VectorMaskFeather\"] = 8] = \"VectorMaskFeather\";\n})($e4d680eb7b71aa6d$var$MaskParams = module.exports.MaskParams || (module.exports.MaskParams = {}));\nvar $e4d680eb7b71aa6d$var$ChannelID;\n(function(ChannelID) {\n    ChannelID[ChannelID[\"Color0\"] = 0] = \"Color0\";\n    ChannelID[ChannelID[\"Color1\"] = 1] = \"Color1\";\n    ChannelID[ChannelID[\"Color2\"] = 2] = \"Color2\";\n    ChannelID[ChannelID[\"Color3\"] = 3] = \"Color3\";\n    ChannelID[ChannelID[\"Transparency\"] = -1] = \"Transparency\";\n    ChannelID[ChannelID[\"UserMask\"] = -2] = \"UserMask\";\n    ChannelID[ChannelID[\"RealUserMask\"] = -3] = \"RealUserMask\";\n})($e4d680eb7b71aa6d$var$ChannelID = module.exports.ChannelID || (module.exports.ChannelID = {}));\nvar $e4d680eb7b71aa6d$var$Compression;\n(function(Compression) {\n    Compression[Compression[\"RawData\"] = 0] = \"RawData\";\n    Compression[Compression[\"RleCompressed\"] = 1] = \"RleCompressed\";\n    Compression[Compression[\"ZipWithoutPrediction\"] = 2] = \"ZipWithoutPrediction\";\n    Compression[Compression[\"ZipWithPrediction\"] = 3] = \"ZipWithPrediction\";\n})($e4d680eb7b71aa6d$var$Compression = module.exports.Compression || (module.exports.Compression = {}));\nfunction $e4d680eb7b71aa6d$var$offsetForChannel(channelId, cmyk) {\n    switch(channelId){\n        case 0 /* ChannelID.Color0 */ :\n            return 0;\n        case 1 /* ChannelID.Color1 */ :\n            return 1;\n        case 2 /* ChannelID.Color2 */ :\n            return 2;\n        case 3 /* ChannelID.Color3 */ :\n            return cmyk ? 3 : channelId + 1;\n        case -1 /* ChannelID.Transparency */ :\n            return cmyk ? 4 : 3;\n        default:\n            return channelId + 1;\n    }\n}\nmodule.exports.offsetForChannel = $e4d680eb7b71aa6d$var$offsetForChannel;\nfunction $e4d680eb7b71aa6d$var$clamp(value, min, max) {\n    return value < min ? min : value > max ? max : value;\n}\nmodule.exports.clamp = $e4d680eb7b71aa6d$var$clamp;\nfunction $e4d680eb7b71aa6d$var$hasAlpha(data) {\n    var size = data.width * data.height * 4;\n    for(var i = 3; i < size; i += 4){\n        if (data.data[i] !== 255) return true;\n    }\n    return false;\n}\nmodule.exports.hasAlpha = $e4d680eb7b71aa6d$var$hasAlpha;\nfunction $e4d680eb7b71aa6d$var$resetImageData(_a) {\n    var data = _a.data;\n    var alpha = data instanceof Float32Array ? 1.0 : data instanceof Uint16Array ? 0xffff : 0xff;\n    for(var p = 0, size = data.length | 0; p < size; p = p + 4 | 0){\n        data[p + 0] = 0;\n        data[p + 1] = 0;\n        data[p + 2] = 0;\n        data[p + 3] = alpha;\n    }\n}\nmodule.exports.resetImageData = $e4d680eb7b71aa6d$var$resetImageData;\nfunction $e4d680eb7b71aa6d$var$imageDataToCanvas(pixelData) {\n    var canvas = (0, module.exports.createCanvas)(pixelData.width, pixelData.height);\n    var imageData;\n    if (pixelData.data instanceof Uint8ClampedArray) imageData = pixelData;\n    else {\n        imageData = (0, module.exports.createImageData)(pixelData.width, pixelData.height);\n        var src = pixelData.data;\n        var dst = imageData.data;\n        if (src instanceof Float32Array) for(var i = 0, size = src.length; i < size; i += 4){\n            dst[i + 0] = Math.round(Math.pow(src[i + 0], 1.0 / 2.2) * 255);\n            dst[i + 1] = Math.round(Math.pow(src[i + 1], 1.0 / 2.2) * 255);\n            dst[i + 2] = Math.round(Math.pow(src[i + 2], 1.0 / 2.2) * 255);\n            dst[i + 3] = Math.round(src[i + 3] * 255);\n        }\n        else {\n            var shift = src instanceof Uint16Array ? 8 : 0;\n            for(var i = 0, size = src.length; i < size; i++)dst[i] = src[i] >>> shift;\n        }\n    }\n    canvas.getContext('2d').putImageData(imageData, 0, 0);\n    return canvas;\n}\nmodule.exports.imageDataToCanvas = $e4d680eb7b71aa6d$var$imageDataToCanvas;\nfunction $e4d680eb7b71aa6d$var$decodeBitmap(input, output, width, height) {\n    if (!(input instanceof Uint8Array || input instanceof Uint8ClampedArray)) throw new Error('Invalid bit depth');\n    for(var y = 0, p = 0, o = 0; y < height; y++)for(var x = 0; x < width;){\n        var b = input[o++];\n        for(var i = 0; i < 8 && x < width; i++, x++, p += 4){\n            var v = b & 0x80 ? 0 : 255;\n            b = b << 1;\n            output[p + 0] = v;\n            output[p + 1] = v;\n            output[p + 2] = v;\n            output[p + 3] = 255;\n        }\n    }\n}\nmodule.exports.decodeBitmap = $e4d680eb7b71aa6d$var$decodeBitmap;\nfunction $e4d680eb7b71aa6d$var$writeDataRaw(data, offset, width, height) {\n    if (!width || !height) return undefined;\n    var array = new Uint8Array(width * height);\n    for(var i = 0; i < array.length; i++)array[i] = data.data[i * 4 + offset];\n    return array;\n}\nmodule.exports.writeDataRaw = $e4d680eb7b71aa6d$var$writeDataRaw;\nfunction $e4d680eb7b71aa6d$var$writeDataRLE(buffer, _a, offsets, large) {\n    var data = _a.data, width = _a.width, height = _a.height;\n    if (!width || !height) return undefined;\n    var stride = 4 * width | 0;\n    var ol = 0;\n    var o = offsets.length * (large ? 4 : 2) * height | 0;\n    for(var _i = 0, offsets_1 = offsets; _i < offsets_1.length; _i++){\n        var offset = offsets_1[_i];\n        for(var y = 0, p = offset | 0; y < height; y++){\n            var strideStart = y * stride | 0;\n            var strideEnd = strideStart + stride | 0;\n            var lastIndex = strideEnd + offset - 4 | 0;\n            var lastIndex2 = lastIndex - 4 | 0;\n            var startOffset = o;\n            for(p = strideStart + offset | 0; p < strideEnd; p = p + 4 | 0){\n                if (p < lastIndex2) {\n                    var value1 = data[p];\n                    p = p + 4 | 0;\n                    var value2 = data[p];\n                    p = p + 4 | 0;\n                    var value3 = data[p];\n                    if (value1 === value2 && value1 === value3) {\n                        var count = 3;\n                        while(count < 128 && p < lastIndex && data[p + 4 | 0] === value1){\n                            count = count + 1 | 0;\n                            p = p + 4 | 0;\n                        }\n                        buffer[o++] = 1 - count;\n                        buffer[o++] = value1;\n                    } else {\n                        var countIndex = o;\n                        var writeLast = true;\n                        var count = 1;\n                        buffer[o++] = 0;\n                        buffer[o++] = value1;\n                        while(p < lastIndex && count < 128){\n                            p = p + 4 | 0;\n                            value1 = value2;\n                            value2 = value3;\n                            value3 = data[p];\n                            if (value1 === value2 && value1 === value3) {\n                                p = p - 12 | 0;\n                                writeLast = false;\n                                break;\n                            } else {\n                                count++;\n                                buffer[o++] = value1;\n                            }\n                        }\n                        if (writeLast) {\n                            if (count < 127) {\n                                buffer[o++] = value2;\n                                buffer[o++] = value3;\n                                count += 2;\n                            } else if (count < 128) {\n                                buffer[o++] = value2;\n                                count++;\n                                p = p - 4 | 0;\n                            } else p = p - 8 | 0;\n                        }\n                        buffer[countIndex] = count - 1;\n                    }\n                } else if (p === lastIndex) {\n                    buffer[o++] = 0;\n                    buffer[o++] = data[p];\n                } else {\n                    buffer[o++] = 1;\n                    buffer[o++] = data[p];\n                    p = p + 4 | 0;\n                    buffer[o++] = data[p];\n                }\n            }\n            var length_1 = o - startOffset;\n            if (large) {\n                buffer[ol++] = length_1 >> 24 & 0xff;\n                buffer[ol++] = length_1 >> 16 & 0xff;\n            }\n            buffer[ol++] = length_1 >> 8 & 0xff;\n            buffer[ol++] = length_1 & 0xff;\n        }\n    }\n    return buffer.slice(0, o);\n}\nmodule.exports.writeDataRLE = $e4d680eb7b71aa6d$var$writeDataRLE;\nfunction $e4d680eb7b71aa6d$var$writeDataZipWithoutPrediction(_a, offsets) {\n    var data = _a.data, width = _a.width, height = _a.height;\n    var size = width * height;\n    var channel = new Uint8Array(size);\n    var buffers = [];\n    var totalLength = 0;\n    for(var _i = 0, offsets_2 = offsets; _i < offsets_2.length; _i++){\n        var offset = offsets_2[_i];\n        for(var i = 0, o = offset; i < size; i++, o += 4)channel[i] = data[o];\n        var buffer = (0, $1eu3Z.deflate)(channel);\n        buffers.push(buffer);\n        totalLength += buffer.byteLength;\n    }\n    if (buffers.length > 0) {\n        var buffer = new Uint8Array(totalLength);\n        var offset = 0;\n        for(var _b = 0, buffers_1 = buffers; _b < buffers_1.length; _b++){\n            var b = buffers_1[_b];\n            buffer.set(b, offset);\n            offset += b.byteLength;\n        }\n        return buffer;\n    } else return buffers[0];\n}\nmodule.exports.writeDataZipWithoutPrediction = $e4d680eb7b71aa6d$var$writeDataZipWithoutPrediction;\nvar $e4d680eb7b71aa6d$var$createCanvas = function createCanvas() {\n    throw new Error('Canvas not initialized, use initializeCanvas method to set up createCanvas method');\n};\nmodule.exports.createCanvas = $e4d680eb7b71aa6d$var$createCanvas;\nvar $e4d680eb7b71aa6d$var$createCanvasFromData = function createCanvasFromData() {\n    throw new Error('Canvas not initialized, use initializeCanvas method to set up createCanvasFromData method');\n};\nmodule.exports.createCanvasFromData = $e4d680eb7b71aa6d$var$createCanvasFromData;\nvar $e4d680eb7b71aa6d$var$tempCanvas = undefined;\nvar $e4d680eb7b71aa6d$var$createImageData = function createImageData(width, height) {\n    if (!$e4d680eb7b71aa6d$var$tempCanvas) $e4d680eb7b71aa6d$var$tempCanvas = (0, module.exports.createCanvas)(1, 1);\n    return $e4d680eb7b71aa6d$var$tempCanvas.getContext('2d').createImageData(width, height);\n};\nmodule.exports.createImageData = $e4d680eb7b71aa6d$var$createImageData;\nif (typeof document !== 'undefined') {\n    module.exports.createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        return canvas;\n    };\n    module.exports.createCanvasFromData = function(data) {\n        var image = new Image();\n        image.src = 'data:image/jpeg;base64,' + (0, $jWkTT.fromByteArray)(data);\n        var canvas = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        canvas.getContext('2d').drawImage(image, 0, 0);\n        return canvas;\n    };\n}\nfunction $e4d680eb7b71aa6d$var$initializeCanvas(createCanvasMethod, createCanvasFromDataMethod, createImageDataMethod) {\n    module.exports.createCanvas = createCanvasMethod;\n    module.exports.createCanvasFromData = createCanvasFromDataMethod || module.exports.createCanvasFromData;\n    module.exports.createImageData = createImageDataMethod || module.exports.createImageData;\n}\nmodule.exports.initializeCanvas = $e4d680eb7b71aa6d$var$initializeCanvas;\n\n});\nparcelRegister(\"1eu3Z\", function(module, exports) {\n\n$parcel$export(module.exports, \"deflate\", function () { return $2755faf0e26f783c$export$2316623ecd1285ab; });\n$parcel$export(module.exports, \"inflate\", function () { return $2755faf0e26f783c$export$cae1ce83fe4a1782; });\n/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */ // (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n/* eslint-disable space-unary-ops */ /* Public constants ==========================================================*/ /* ===========================================================================*/ //const Z_FILTERED          = 1;\n//const Z_HUFFMAN_ONLY      = 2;\n//const Z_RLE               = 3;\nvar $2755faf0e26f783c$var$Z_FIXED$1 = 4;\n//const Z_DEFAULT_STRATEGY  = 0;\n/* Possible values of the data_type field (though see inflate()) */ var $2755faf0e26f783c$var$Z_BINARY = 0;\nvar $2755faf0e26f783c$var$Z_TEXT = 1;\n//const Z_ASCII             = 1; // = Z_TEXT\nvar $2755faf0e26f783c$var$Z_UNKNOWN$1 = 2;\n/*============================================================================*/ function $2755faf0e26f783c$var$zero$1(buf) {\n    var len = buf.length;\n    while(--len >= 0)buf[len] = 0;\n}\n// From zutil.h\nvar $2755faf0e26f783c$var$STORED_BLOCK = 0;\nvar $2755faf0e26f783c$var$STATIC_TREES = 1;\nvar $2755faf0e26f783c$var$DYN_TREES = 2;\n/* The three kinds of block type */ var $2755faf0e26f783c$var$MIN_MATCH$1 = 3;\nvar $2755faf0e26f783c$var$MAX_MATCH$1 = 258;\n/* The minimum and maximum match lengths */ // From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */ var $2755faf0e26f783c$var$LENGTH_CODES$1 = 29;\n/* number of length codes, not counting the special END_BLOCK code */ var $2755faf0e26f783c$var$LITERALS$1 = 256;\n/* number of literal bytes 0..255 */ var $2755faf0e26f783c$var$L_CODES$1 = $2755faf0e26f783c$var$LITERALS$1 + 1 + $2755faf0e26f783c$var$LENGTH_CODES$1;\n/* number of Literal or Length codes, including the END_BLOCK code */ var $2755faf0e26f783c$var$D_CODES$1 = 30;\n/* number of distance codes */ var $2755faf0e26f783c$var$BL_CODES$1 = 19;\n/* number of codes used to transfer the bit lengths */ var $2755faf0e26f783c$var$HEAP_SIZE$1 = 2 * $2755faf0e26f783c$var$L_CODES$1 + 1;\n/* maximum heap size */ var $2755faf0e26f783c$var$MAX_BITS$1 = 15;\n/* All codes must not exceed MAX_BITS bits */ var $2755faf0e26f783c$var$Buf_size = 16;\n/* size of bit buffer in bi_buf */ /* ===========================================================================\n * Constants\n */ var $2755faf0e26f783c$var$MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */ var $2755faf0e26f783c$var$END_BLOCK = 256;\n/* end of block literal code */ var $2755faf0e26f783c$var$REP_3_6 = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */ var $2755faf0e26f783c$var$REPZ_3_10 = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */ var $2755faf0e26f783c$var$REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */ /* eslint-disable comma-spacing,array-bracket-spacing */ var $2755faf0e26f783c$var$extra_lbits = /* extra bits for each length code */ new Uint8Array([\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n    1,\n    1,\n    1,\n    2,\n    2,\n    2,\n    2,\n    3,\n    3,\n    3,\n    3,\n    4,\n    4,\n    4,\n    4,\n    5,\n    5,\n    5,\n    5,\n    0\n]);\nvar $2755faf0e26f783c$var$extra_dbits = /* extra bits for each distance code */ new Uint8Array([\n    0,\n    0,\n    0,\n    0,\n    1,\n    1,\n    2,\n    2,\n    3,\n    3,\n    4,\n    4,\n    5,\n    5,\n    6,\n    6,\n    7,\n    7,\n    8,\n    8,\n    9,\n    9,\n    10,\n    10,\n    11,\n    11,\n    12,\n    12,\n    13,\n    13\n]);\nvar $2755faf0e26f783c$var$extra_blbits = /* extra bits for each bit length code */ new Uint8Array([\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    2,\n    3,\n    7\n]);\nvar $2755faf0e26f783c$var$bl_order = new Uint8Array([\n    16,\n    17,\n    18,\n    0,\n    8,\n    7,\n    9,\n    6,\n    10,\n    5,\n    11,\n    4,\n    12,\n    3,\n    13,\n    2,\n    14,\n    1,\n    15\n]);\n/* eslint-enable comma-spacing,array-bracket-spacing */ /* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */ /* ===========================================================================\n * Local data. These are initialized only once.\n */ // We pre-fill arrays with 0 to avoid uninitialized gaps\nvar $2755faf0e26f783c$var$DIST_CODE_LEN = 512; /* see definition of array dist_code below */ \n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nvar $2755faf0e26f783c$var$static_ltree = new Array(($2755faf0e26f783c$var$L_CODES$1 + 2) * 2);\n$2755faf0e26f783c$var$zero$1($2755faf0e26f783c$var$static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */ var $2755faf0e26f783c$var$static_dtree = new Array($2755faf0e26f783c$var$D_CODES$1 * 2);\n$2755faf0e26f783c$var$zero$1($2755faf0e26f783c$var$static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */ var $2755faf0e26f783c$var$_dist_code = new Array($2755faf0e26f783c$var$DIST_CODE_LEN);\n$2755faf0e26f783c$var$zero$1($2755faf0e26f783c$var$_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */ var $2755faf0e26f783c$var$_length_code = new Array($2755faf0e26f783c$var$MAX_MATCH$1 - $2755faf0e26f783c$var$MIN_MATCH$1 + 1);\n$2755faf0e26f783c$var$zero$1($2755faf0e26f783c$var$_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */ var $2755faf0e26f783c$var$base_length = new Array($2755faf0e26f783c$var$LENGTH_CODES$1);\n$2755faf0e26f783c$var$zero$1($2755faf0e26f783c$var$base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */ var $2755faf0e26f783c$var$base_dist = new Array($2755faf0e26f783c$var$D_CODES$1);\n$2755faf0e26f783c$var$zero$1($2755faf0e26f783c$var$base_dist);\n/* First normalized distance for each code (0 = distance of 1) */ function $2755faf0e26f783c$var$StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n    this.static_tree = static_tree; /* static tree or NULL */ \n    this.extra_bits = extra_bits; /* extra bits for each code or NULL */ \n    this.extra_base = extra_base; /* base index for extra_bits */ \n    this.elems = elems; /* max number of elements in the tree */ \n    this.max_length = max_length; /* max bit length for the codes */ \n    // show if `static_tree` has data or dummy - needed for monomorphic objects\n    this.has_stree = static_tree && static_tree.length;\n}\nvar $2755faf0e26f783c$var$static_l_desc;\nvar $2755faf0e26f783c$var$static_d_desc;\nvar $2755faf0e26f783c$var$static_bl_desc;\nfunction $2755faf0e26f783c$var$TreeDesc(dyn_tree, stat_desc) {\n    this.dyn_tree = dyn_tree; /* the dynamic tree */ \n    this.max_code = 0; /* largest code with non zero frequency */ \n    this.stat_desc = stat_desc; /* the corresponding static tree */ \n}\nvar $2755faf0e26f783c$var$d_code = function(dist) {\n    return dist < 256 ? $2755faf0e26f783c$var$_dist_code[dist] : $2755faf0e26f783c$var$_dist_code[256 + (dist >>> 7)];\n};\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */ var $2755faf0e26f783c$var$put_short = function(s, w) {\n    //    put_byte(s, (uch)((w) & 0xff));\n    //    put_byte(s, (uch)((ush)(w) >> 8));\n    s.pending_buf[s.pending++] = w & 0xff;\n    s.pending_buf[s.pending++] = w >>> 8 & 0xff;\n};\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */ var $2755faf0e26f783c$var$send_bits = function(s, value, length) {\n    if (s.bi_valid > $2755faf0e26f783c$var$Buf_size - length) {\n        s.bi_buf |= value << s.bi_valid & 0xffff;\n        $2755faf0e26f783c$var$put_short(s, s.bi_buf);\n        s.bi_buf = value >> $2755faf0e26f783c$var$Buf_size - s.bi_valid;\n        s.bi_valid += length - $2755faf0e26f783c$var$Buf_size;\n    } else {\n        s.bi_buf |= value << s.bi_valid & 0xffff;\n        s.bi_valid += length;\n    }\n};\nvar $2755faf0e26f783c$var$send_code = function(s, c, tree) {\n    $2755faf0e26f783c$var$send_bits(s, tree[c * 2], tree[c * 2 + 1]);\n};\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */ var $2755faf0e26f783c$var$bi_reverse = function(code, len) {\n    var res = 0;\n    do {\n        res |= code & 1;\n        code >>>= 1;\n        res <<= 1;\n    }while (--len > 0);\n    return res >>> 1;\n};\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */ var $2755faf0e26f783c$var$bi_flush = function(s) {\n    if (s.bi_valid === 16) {\n        $2755faf0e26f783c$var$put_short(s, s.bi_buf);\n        s.bi_buf = 0;\n        s.bi_valid = 0;\n    } else if (s.bi_valid >= 8) {\n        s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n        s.bi_buf >>= 8;\n        s.bi_valid -= 8;\n    }\n};\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */ var $2755faf0e26f783c$var$gen_bitlen = function(s, desc) {\n    //    deflate_state *s;\n    //    tree_desc *desc;    /* the tree descriptor */\n    var tree = desc.dyn_tree;\n    var max_code = desc.max_code;\n    var stree = desc.stat_desc.static_tree;\n    var has_stree = desc.stat_desc.has_stree;\n    var extra = desc.stat_desc.extra_bits;\n    var base = desc.stat_desc.extra_base;\n    var max_length = desc.stat_desc.max_length;\n    var h; /* heap index */ \n    var n, m; /* iterate over the tree elements */ \n    var bits; /* bit length */ \n    var xbits; /* extra bits */ \n    var f; /* frequency */ \n    var overflow = 0; /* number of elements with bit length too large */ \n    for(bits = 0; bits <= $2755faf0e26f783c$var$MAX_BITS$1; bits++)s.bl_count[bits] = 0;\n    /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */ tree[s.heap[s.heap_max] * 2 + 1] = 0; /* root of the heap */ \n    for(h = s.heap_max + 1; h < $2755faf0e26f783c$var$HEAP_SIZE$1; h++){\n        n = s.heap[h];\n        bits = tree[tree[n * 2 + 1] * 2 + 1] + 1;\n        if (bits > max_length) {\n            bits = max_length;\n            overflow++;\n        }\n        tree[n * 2 + 1] = bits;\n        /* We overwrite tree[n].Dad which is no longer needed */ if (n > max_code) continue;\n         /* not a leaf node */ \n        s.bl_count[bits]++;\n        xbits = 0;\n        if (n >= base) xbits = extra[n - base];\n        f = tree[n * 2] /*.Freq*/ ;\n        s.opt_len += f * (bits + xbits);\n        if (has_stree) s.static_len += f * (stree[n * 2 + 1] + xbits);\n    }\n    if (overflow === 0) return;\n    // Tracev((stderr,\"\\nbit length overflow\\n\"));\n    /* This happens for example on obj2 and pic of the Calgary corpus */ /* Find the first bit length which could increase: */ do {\n        bits = max_length - 1;\n        while(s.bl_count[bits] === 0)bits--;\n        s.bl_count[bits]--; /* move one leaf down the tree */ \n        s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */ \n        s.bl_count[max_length]--;\n        /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */ overflow -= 2;\n    }while (overflow > 0);\n    /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */ for(bits = max_length; bits !== 0; bits--){\n        n = s.bl_count[bits];\n        while(n !== 0){\n            m = s.heap[--h];\n            if (m > max_code) continue;\n            if (tree[m * 2 + 1] !== bits) {\n                // Tracev((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n                s.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2] /*.Freq*/ ;\n                tree[m * 2 + 1] = bits;\n            }\n            n--;\n        }\n    }\n};\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */ var $2755faf0e26f783c$var$gen_codes = function(tree, max_code, bl_count) {\n    //    ct_data *tree;             /* the tree to decorate */\n    //    int max_code;              /* largest code with non zero frequency */\n    //    ushf *bl_count;            /* number of codes at each bit length */\n    var next_code = new Array($2755faf0e26f783c$var$MAX_BITS$1 + 1); /* next code value for each bit length */ \n    var code = 0; /* running code value */ \n    var bits; /* bit index */ \n    var n; /* code index */ \n    /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */ for(bits = 1; bits <= $2755faf0e26f783c$var$MAX_BITS$1; bits++){\n        code = code + bl_count[bits - 1] << 1;\n        next_code[bits] = code;\n    }\n    /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */ //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n    //        \"inconsistent bit counts\");\n    //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n    for(n = 0; n <= max_code; n++){\n        var len = tree[n * 2 + 1] /*.Len*/ ;\n        if (len === 0) continue;\n        /* Now reverse the bits */ tree[n * 2] = $2755faf0e26f783c$var$bi_reverse(next_code[len]++, len);\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n    }\n};\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */ var $2755faf0e26f783c$var$tr_static_init = function() {\n    var n; /* iterates over tree elements */ \n    var bits; /* bit counter */ \n    var length; /* length value */ \n    var code; /* code value */ \n    var dist; /* distance index */ \n    var bl_count = new Array($2755faf0e26f783c$var$MAX_BITS$1 + 1);\n    /* number of codes at each bit length for an optimal tree */ // do check in _tr_init()\n    //if (static_init_done) return;\n    /* For some embedded targets, global variables are not initialized: */ /*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/ /* Initialize the mapping length (0..255) -> length code (0..28) */ length = 0;\n    for(code = 0; code < $2755faf0e26f783c$var$LENGTH_CODES$1 - 1; code++){\n        $2755faf0e26f783c$var$base_length[code] = length;\n        for(n = 0; n < 1 << $2755faf0e26f783c$var$extra_lbits[code]; n++)$2755faf0e26f783c$var$_length_code[length++] = code;\n    }\n    //Assert (length == 256, \"tr_static_init: length != 256\");\n    /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */ $2755faf0e26f783c$var$_length_code[length - 1] = code;\n    /* Initialize the mapping dist (0..32K) -> dist code (0..29) */ dist = 0;\n    for(code = 0; code < 16; code++){\n        $2755faf0e26f783c$var$base_dist[code] = dist;\n        for(n = 0; n < 1 << $2755faf0e26f783c$var$extra_dbits[code]; n++)$2755faf0e26f783c$var$_dist_code[dist++] = code;\n    }\n    //Assert (dist == 256, \"tr_static_init: dist != 256\");\n    dist >>= 7; /* from now on, all distances are divided by 128 */ \n    for(; code < $2755faf0e26f783c$var$D_CODES$1; code++){\n        $2755faf0e26f783c$var$base_dist[code] = dist << 7;\n        for(n = 0; n < 1 << $2755faf0e26f783c$var$extra_dbits[code] - 7; n++)$2755faf0e26f783c$var$_dist_code[256 + dist++] = code;\n    }\n    //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n    /* Construct the codes of the static literal tree */ for(bits = 0; bits <= $2755faf0e26f783c$var$MAX_BITS$1; bits++)bl_count[bits] = 0;\n    n = 0;\n    while(n <= 143){\n        $2755faf0e26f783c$var$static_ltree[n * 2 + 1] = 8;\n        n++;\n        bl_count[8]++;\n    }\n    while(n <= 255){\n        $2755faf0e26f783c$var$static_ltree[n * 2 + 1] = 9;\n        n++;\n        bl_count[9]++;\n    }\n    while(n <= 279){\n        $2755faf0e26f783c$var$static_ltree[n * 2 + 1] = 7;\n        n++;\n        bl_count[7]++;\n    }\n    while(n <= 287){\n        $2755faf0e26f783c$var$static_ltree[n * 2 + 1] = 8;\n        n++;\n        bl_count[8]++;\n    }\n    /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */ $2755faf0e26f783c$var$gen_codes($2755faf0e26f783c$var$static_ltree, $2755faf0e26f783c$var$L_CODES$1 + 1, bl_count);\n    /* The static distance tree is trivial: */ for(n = 0; n < $2755faf0e26f783c$var$D_CODES$1; n++){\n        $2755faf0e26f783c$var$static_dtree[n * 2 + 1] = 5;\n        $2755faf0e26f783c$var$static_dtree[n * 2] = $2755faf0e26f783c$var$bi_reverse(n, 5);\n    }\n    // Now data ready and we can init static trees\n    $2755faf0e26f783c$var$static_l_desc = new $2755faf0e26f783c$var$StaticTreeDesc($2755faf0e26f783c$var$static_ltree, $2755faf0e26f783c$var$extra_lbits, $2755faf0e26f783c$var$LITERALS$1 + 1, $2755faf0e26f783c$var$L_CODES$1, $2755faf0e26f783c$var$MAX_BITS$1);\n    $2755faf0e26f783c$var$static_d_desc = new $2755faf0e26f783c$var$StaticTreeDesc($2755faf0e26f783c$var$static_dtree, $2755faf0e26f783c$var$extra_dbits, 0, $2755faf0e26f783c$var$D_CODES$1, $2755faf0e26f783c$var$MAX_BITS$1);\n    $2755faf0e26f783c$var$static_bl_desc = new $2755faf0e26f783c$var$StaticTreeDesc(new Array(0), $2755faf0e26f783c$var$extra_blbits, 0, $2755faf0e26f783c$var$BL_CODES$1, $2755faf0e26f783c$var$MAX_BL_BITS);\n//static_init_done = true;\n};\n/* ===========================================================================\n * Initialize a new block.\n */ var $2755faf0e26f783c$var$init_block = function(s) {\n    var n; /* iterates over tree elements */ \n    /* Initialize the trees. */ for(n = 0; n < $2755faf0e26f783c$var$L_CODES$1; n++)s.dyn_ltree[n * 2] = 0;\n    for(n = 0; n < $2755faf0e26f783c$var$D_CODES$1; n++)s.dyn_dtree[n * 2] = 0;\n    for(n = 0; n < $2755faf0e26f783c$var$BL_CODES$1; n++)s.bl_tree[n * 2] = 0;\n    s.dyn_ltree[$2755faf0e26f783c$var$END_BLOCK * 2] = 1;\n    s.opt_len = s.static_len = 0;\n    s.sym_next = s.matches = 0;\n};\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */ var $2755faf0e26f783c$var$bi_windup = function(s) {\n    if (s.bi_valid > 8) $2755faf0e26f783c$var$put_short(s, s.bi_buf);\n    else if (s.bi_valid > 0) //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n};\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */ var $2755faf0e26f783c$var$smaller = function(tree, n, m, depth) {\n    var _n2 = n * 2;\n    var _m2 = m * 2;\n    return tree[_n2] < tree[_m2] || tree[_n2] === tree[_m2] && depth[n] <= depth[m];\n};\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */ var $2755faf0e26f783c$var$pqdownheap = function(s, tree, k) {\n    //    deflate_state *s;\n    //    ct_data *tree;  /* the tree to restore */\n    //    int k;               /* node to move down */\n    var v = s.heap[k];\n    var j = k << 1; /* left son of k */ \n    while(j <= s.heap_len){\n        /* Set j to the smallest of the two sons: */ if (j < s.heap_len && $2755faf0e26f783c$var$smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) j++;\n        /* Exit if v is smaller than both sons */ if ($2755faf0e26f783c$var$smaller(tree, v, s.heap[j], s.depth)) break;\n        /* Exchange v with the smallest son */ s.heap[k] = s.heap[j];\n        k = j;\n        /* And continue down the tree, setting j to the left son of k */ j <<= 1;\n    }\n    s.heap[k] = v;\n};\n// inlined manually\n// const SMALLEST = 1;\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */ var $2755faf0e26f783c$var$compress_block = function(s, ltree, dtree) {\n    //    deflate_state *s;\n    //    const ct_data *ltree; /* literal tree */\n    //    const ct_data *dtree; /* distance tree */\n    var dist; /* distance of matched string */ \n    var lc; /* match length or unmatched char (if dist == 0) */ \n    var sx = 0; /* running index in sym_buf */ \n    var code; /* the code to send */ \n    var extra; /* number of extra bits to send */ \n    if (s.sym_next !== 0) do {\n        dist = s.pending_buf[s.sym_buf + sx++] & 0xff;\n        dist += (s.pending_buf[s.sym_buf + sx++] & 0xff) << 8;\n        lc = s.pending_buf[s.sym_buf + sx++];\n        if (dist === 0) $2755faf0e26f783c$var$send_code(s, lc, ltree); /* send a literal byte */ \n        else {\n            /* Here, lc is the match length - MIN_MATCH */ code = $2755faf0e26f783c$var$_length_code[lc];\n            $2755faf0e26f783c$var$send_code(s, code + $2755faf0e26f783c$var$LITERALS$1 + 1, ltree); /* send the length code */ \n            extra = $2755faf0e26f783c$var$extra_lbits[code];\n            if (extra !== 0) {\n                lc -= $2755faf0e26f783c$var$base_length[code];\n                $2755faf0e26f783c$var$send_bits(s, lc, extra); /* send the extra length bits */ \n            }\n            dist--; /* dist is now the match distance - 1 */ \n            code = $2755faf0e26f783c$var$d_code(dist);\n            //Assert (code < D_CODES, \"bad d_code\");\n            $2755faf0e26f783c$var$send_code(s, code, dtree); /* send the distance code */ \n            extra = $2755faf0e26f783c$var$extra_dbits[code];\n            if (extra !== 0) {\n                dist -= $2755faf0e26f783c$var$base_dist[code];\n                $2755faf0e26f783c$var$send_bits(s, dist, extra); /* send the extra distance bits */ \n            }\n        } /* literal or match pair ? */ \n    /* Check that the overlay between pending_buf and sym_buf is ok: */ //Assert(s->pending < s->lit_bufsize + sx, \"pendingBuf overflow\");\n    }while (sx < s.sym_next);\n    $2755faf0e26f783c$var$send_code(s, $2755faf0e26f783c$var$END_BLOCK, ltree);\n};\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */ var $2755faf0e26f783c$var$build_tree = function(s, desc) {\n    //    deflate_state *s;\n    //    tree_desc *desc; /* the tree descriptor */\n    var tree = desc.dyn_tree;\n    var stree = desc.stat_desc.static_tree;\n    var has_stree = desc.stat_desc.has_stree;\n    var elems = desc.stat_desc.elems;\n    var n, m; /* iterate over heap elements */ \n    var max_code = -1; /* largest code with non zero frequency */ \n    var node; /* new node being created */ \n    /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */ s.heap_len = 0;\n    s.heap_max = $2755faf0e26f783c$var$HEAP_SIZE$1;\n    for(n = 0; n < elems; n++)if (tree[n * 2] !== 0) {\n        s.heap[++s.heap_len] = max_code = n;\n        s.depth[n] = 0;\n    } else tree[n * 2 + 1] = 0;\n    /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */ while(s.heap_len < 2){\n        node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;\n        tree[node * 2] = 1;\n        s.depth[node] = 0;\n        s.opt_len--;\n        if (has_stree) s.static_len -= stree[node * 2 + 1] /*.Len*/ ;\n    /* node is 0 or 1 so it does not have extra bits */ }\n    desc.max_code = max_code;\n    /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */ for(n = s.heap_len >> 1 /*int /2*/ ; n >= 1; n--)$2755faf0e26f783c$var$pqdownheap(s, tree, n);\n    /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */ node = elems; /* next internal node of the tree */ \n    do {\n        //pqremove(s, tree, n);  /* n = node of least frequency */\n        /*** pqremove ***/ n = s.heap[1 /*SMALLEST*/ ];\n        s.heap[1 /*SMALLEST*/ ] = s.heap[s.heap_len--];\n        $2755faf0e26f783c$var$pqdownheap(s, tree, 1 /*SMALLEST*/ );\n        /***/ m = s.heap[1 /*SMALLEST*/ ]; /* m = node of next least frequency */ \n        s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */ \n        s.heap[--s.heap_max] = m;\n        /* Create a new node father of n and m */ tree[node * 2] = tree[n * 2] + tree[m * 2] /*.Freq*/ ;\n        s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n        tree[n * 2 + 1] = tree[m * 2 + 1] = node;\n        /* and insert the new node in the heap */ s.heap[1 /*SMALLEST*/ ] = node++;\n        $2755faf0e26f783c$var$pqdownheap(s, tree, 1 /*SMALLEST*/ );\n    }while (s.heap_len >= 2);\n    s.heap[--s.heap_max] = s.heap[1 /*SMALLEST*/ ];\n    /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */ $2755faf0e26f783c$var$gen_bitlen(s, desc);\n    /* The field len is now set, we can generate the bit codes */ $2755faf0e26f783c$var$gen_codes(tree, max_code, s.bl_count);\n};\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */ var $2755faf0e26f783c$var$scan_tree = function(s, tree, max_code) {\n    //    deflate_state *s;\n    //    ct_data *tree;   /* the tree to be scanned */\n    //    int max_code;    /* and its largest code of non zero frequency */\n    var n; /* iterates over all tree elements */ \n    var prevlen = -1; /* last emitted length */ \n    var curlen; /* length of current code */ \n    var nextlen = tree[1] /*.Len*/ ; /* length of next code */ \n    var count = 0; /* repeat count of the current code */ \n    var max_count = 7; /* max repeat count */ \n    var min_count = 4; /* min repeat count */ \n    if (nextlen === 0) {\n        max_count = 138;\n        min_count = 3;\n    }\n    tree[(max_code + 1) * 2 + 1] = 0xffff; /* guard */ \n    for(n = 0; n <= max_code; n++){\n        curlen = nextlen;\n        nextlen = tree[(n + 1) * 2 + 1] /*.Len*/ ;\n        if (++count < max_count && curlen === nextlen) continue;\n        else if (count < min_count) s.bl_tree[curlen * 2] += count;\n        else if (curlen !== 0) {\n            if (curlen !== prevlen) s.bl_tree[curlen * 2]++;\n            s.bl_tree[$2755faf0e26f783c$var$REP_3_6 * 2]++;\n        } else if (count <= 10) s.bl_tree[$2755faf0e26f783c$var$REPZ_3_10 * 2]++;\n        else s.bl_tree[$2755faf0e26f783c$var$REPZ_11_138 * 2]++;\n        count = 0;\n        prevlen = curlen;\n        if (nextlen === 0) {\n            max_count = 138;\n            min_count = 3;\n        } else if (curlen === nextlen) {\n            max_count = 6;\n            min_count = 3;\n        } else {\n            max_count = 7;\n            min_count = 4;\n        }\n    }\n};\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */ var $2755faf0e26f783c$var$send_tree = function(s, tree, max_code) {\n    //    deflate_state *s;\n    //    ct_data *tree; /* the tree to be scanned */\n    //    int max_code;       /* and its largest code of non zero frequency */\n    var n; /* iterates over all tree elements */ \n    var prevlen = -1; /* last emitted length */ \n    var curlen; /* length of current code */ \n    var nextlen = tree[1] /*.Len*/ ; /* length of next code */ \n    var count = 0; /* repeat count of the current code */ \n    var max_count = 7; /* max repeat count */ \n    var min_count = 4; /* min repeat count */ \n    /* tree[max_code+1].Len = -1; */ /* guard already set */ if (nextlen === 0) {\n        max_count = 138;\n        min_count = 3;\n    }\n    for(n = 0; n <= max_code; n++){\n        curlen = nextlen;\n        nextlen = tree[(n + 1) * 2 + 1] /*.Len*/ ;\n        if (++count < max_count && curlen === nextlen) continue;\n        else if (count < min_count) do $2755faf0e26f783c$var$send_code(s, curlen, s.bl_tree);\n        while (--count !== 0);\n        else if (curlen !== 0) {\n            if (curlen !== prevlen) {\n                $2755faf0e26f783c$var$send_code(s, curlen, s.bl_tree);\n                count--;\n            }\n            //Assert(count >= 3 && count <= 6, \" 3_6?\");\n            $2755faf0e26f783c$var$send_code(s, $2755faf0e26f783c$var$REP_3_6, s.bl_tree);\n            $2755faf0e26f783c$var$send_bits(s, count - 3, 2);\n        } else if (count <= 10) {\n            $2755faf0e26f783c$var$send_code(s, $2755faf0e26f783c$var$REPZ_3_10, s.bl_tree);\n            $2755faf0e26f783c$var$send_bits(s, count - 3, 3);\n        } else {\n            $2755faf0e26f783c$var$send_code(s, $2755faf0e26f783c$var$REPZ_11_138, s.bl_tree);\n            $2755faf0e26f783c$var$send_bits(s, count - 11, 7);\n        }\n        count = 0;\n        prevlen = curlen;\n        if (nextlen === 0) {\n            max_count = 138;\n            min_count = 3;\n        } else if (curlen === nextlen) {\n            max_count = 6;\n            min_count = 3;\n        } else {\n            max_count = 7;\n            min_count = 4;\n        }\n    }\n};\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */ var $2755faf0e26f783c$var$build_bl_tree = function(s) {\n    var max_blindex; /* index of last bit length code of non zero freq */ \n    /* Determine the bit length frequencies for literal and distance trees */ $2755faf0e26f783c$var$scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n    $2755faf0e26f783c$var$scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n    /* Build the bit length tree: */ $2755faf0e26f783c$var$build_tree(s, s.bl_desc);\n    /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */ /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */ for(max_blindex = $2755faf0e26f783c$var$BL_CODES$1 - 1; max_blindex >= 3; max_blindex--){\n        if (s.bl_tree[$2755faf0e26f783c$var$bl_order[max_blindex] * 2 + 1] !== 0) break;\n    }\n    /* Update opt_len to include the bit length tree and counts */ s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n    //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n    //        s->opt_len, s->static_len));\n    return max_blindex;\n};\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */ var $2755faf0e26f783c$var$send_all_trees = function(s, lcodes, dcodes, blcodes) {\n    //    deflate_state *s;\n    //    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n    var rank; /* index in bl_order */ \n    //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n    //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n    //        \"too many codes\");\n    //Tracev((stderr, \"\\nbl counts: \"));\n    $2755faf0e26f783c$var$send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */ \n    $2755faf0e26f783c$var$send_bits(s, dcodes - 1, 5);\n    $2755faf0e26f783c$var$send_bits(s, blcodes - 4, 4); /* not -3 as stated in appnote.txt */ \n    for(rank = 0; rank < blcodes; rank++)//Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    $2755faf0e26f783c$var$send_bits(s, s.bl_tree[$2755faf0e26f783c$var$bl_order[rank] * 2 + 1], 3);\n    //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n    $2755faf0e26f783c$var$send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */ \n    //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n    $2755faf0e26f783c$var$send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */ \n//Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n};\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"block list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"allow list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */ var $2755faf0e26f783c$var$detect_data_type = function(s) {\n    /* block_mask is the bit mask of block-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */ var block_mask = 0xf3ffc07f;\n    var n;\n    /* Check for non-textual (\"block-listed\") bytes. */ for(n = 0; n <= 31; n++, block_mask >>>= 1){\n        if (block_mask & 1 && s.dyn_ltree[n * 2] !== 0) return $2755faf0e26f783c$var$Z_BINARY;\n    }\n    /* Check for textual (\"allow-listed\") bytes. */ if (s.dyn_ltree[18] !== 0 || s.dyn_ltree[20] !== 0 || s.dyn_ltree[26] !== 0) return $2755faf0e26f783c$var$Z_TEXT;\n    for(n = 32; n < $2755faf0e26f783c$var$LITERALS$1; n++){\n        if (s.dyn_ltree[n * 2] !== 0) return $2755faf0e26f783c$var$Z_TEXT;\n    }\n    /* There are no \"block-listed\" or \"allow-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */ return $2755faf0e26f783c$var$Z_BINARY;\n};\nvar $2755faf0e26f783c$var$static_init_done = false;\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */ var $2755faf0e26f783c$var$_tr_init$1 = function(s) {\n    if (!$2755faf0e26f783c$var$static_init_done) {\n        $2755faf0e26f783c$var$tr_static_init();\n        $2755faf0e26f783c$var$static_init_done = true;\n    }\n    s.l_desc = new $2755faf0e26f783c$var$TreeDesc(s.dyn_ltree, $2755faf0e26f783c$var$static_l_desc);\n    s.d_desc = new $2755faf0e26f783c$var$TreeDesc(s.dyn_dtree, $2755faf0e26f783c$var$static_d_desc);\n    s.bl_desc = new $2755faf0e26f783c$var$TreeDesc(s.bl_tree, $2755faf0e26f783c$var$static_bl_desc);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n    /* Initialize the first block of the first file: */ $2755faf0e26f783c$var$init_block(s);\n};\n/* ===========================================================================\n * Send a stored block\n */ var $2755faf0e26f783c$var$_tr_stored_block$1 = function(s, buf, stored_len, last) {\n    //DeflateState *s;\n    //charf *buf;       /* input block */\n    //ulg stored_len;   /* length of input block */\n    //int last;         /* one if this is the last block for a file */\n    $2755faf0e26f783c$var$send_bits(s, ($2755faf0e26f783c$var$STORED_BLOCK << 1) + (last ? 1 : 0), 3); /* send block type */ \n    $2755faf0e26f783c$var$bi_windup(s); /* align on byte boundary */ \n    $2755faf0e26f783c$var$put_short(s, stored_len);\n    $2755faf0e26f783c$var$put_short(s, ~stored_len);\n    if (stored_len) s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);\n    s.pending += stored_len;\n};\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */ var $2755faf0e26f783c$var$_tr_align$1 = function(s) {\n    $2755faf0e26f783c$var$send_bits(s, $2755faf0e26f783c$var$STATIC_TREES << 1, 3);\n    $2755faf0e26f783c$var$send_code(s, $2755faf0e26f783c$var$END_BLOCK, $2755faf0e26f783c$var$static_ltree);\n    $2755faf0e26f783c$var$bi_flush(s);\n};\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and write out the encoded block.\n */ var $2755faf0e26f783c$var$_tr_flush_block$1 = function(s, buf, stored_len, last) {\n    //DeflateState *s;\n    //charf *buf;       /* input block, or NULL if too old */\n    //ulg stored_len;   /* length of input block */\n    //int last;         /* one if this is the last block for a file */\n    var opt_lenb, static_lenb; /* opt_len and static_len in bytes */ \n    var max_blindex = 0; /* index of last bit length code of non zero freq */ \n    /* Build the Huffman trees unless a stored block is forced */ if (s.level > 0) {\n        /* Check if the file is binary or text */ if (s.strm.data_type === $2755faf0e26f783c$var$Z_UNKNOWN$1) s.strm.data_type = $2755faf0e26f783c$var$detect_data_type(s);\n        /* Construct the literal and distance trees */ $2755faf0e26f783c$var$build_tree(s, s.l_desc);\n        // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n        //        s->static_len));\n        $2755faf0e26f783c$var$build_tree(s, s.d_desc);\n        // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n        //        s->static_len));\n        /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */ /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */ max_blindex = $2755faf0e26f783c$var$build_bl_tree(s);\n        /* Determine the best encoding. Compute the block lengths in bytes. */ opt_lenb = s.opt_len + 3 + 7 >>> 3;\n        static_lenb = s.static_len + 3 + 7 >>> 3;\n        // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n        //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n        //        s->sym_next / 3));\n        if (static_lenb <= opt_lenb) opt_lenb = static_lenb;\n    } else // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */ \n    if (stored_len + 4 <= opt_lenb && buf !== -1) /* 4: two words for the lengths */ /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */ $2755faf0e26f783c$var$_tr_stored_block$1(s, buf, stored_len, last);\n    else if (s.strategy === $2755faf0e26f783c$var$Z_FIXED$1 || static_lenb === opt_lenb) {\n        $2755faf0e26f783c$var$send_bits(s, ($2755faf0e26f783c$var$STATIC_TREES << 1) + (last ? 1 : 0), 3);\n        $2755faf0e26f783c$var$compress_block(s, $2755faf0e26f783c$var$static_ltree, $2755faf0e26f783c$var$static_dtree);\n    } else {\n        $2755faf0e26f783c$var$send_bits(s, ($2755faf0e26f783c$var$DYN_TREES << 1) + (last ? 1 : 0), 3);\n        $2755faf0e26f783c$var$send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n        $2755faf0e26f783c$var$compress_block(s, s.dyn_ltree, s.dyn_dtree);\n    }\n    // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n    /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */ $2755faf0e26f783c$var$init_block(s);\n    if (last) $2755faf0e26f783c$var$bi_windup(s);\n// Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n//       s->compressed_len-7*last));\n};\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */ var $2755faf0e26f783c$var$_tr_tally$1 = function(s, dist, lc) {\n    //    deflate_state *s;\n    //    unsigned dist;  /* distance of matched string */\n    //    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n    s.pending_buf[s.sym_buf + s.sym_next++] = dist;\n    s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;\n    s.pending_buf[s.sym_buf + s.sym_next++] = lc;\n    if (dist === 0) /* lc is the unmatched char */ s.dyn_ltree[lc * 2]++;\n    else {\n        s.matches++;\n        /* Here, lc is the match length - MIN_MATCH */ dist--; /* dist = match distance - 1 */ \n        //Assert((ush)dist < (ush)MAX_DIST(s) &&\n        //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n        //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n        s.dyn_ltree[($2755faf0e26f783c$var$_length_code[lc] + $2755faf0e26f783c$var$LITERALS$1 + 1) * 2]++;\n        s.dyn_dtree[$2755faf0e26f783c$var$d_code(dist) * 2]++;\n    }\n    return s.sym_next === s.sym_end;\n};\nvar $2755faf0e26f783c$var$_tr_init_1 = $2755faf0e26f783c$var$_tr_init$1;\nvar $2755faf0e26f783c$var$_tr_stored_block_1 = $2755faf0e26f783c$var$_tr_stored_block$1;\nvar $2755faf0e26f783c$var$_tr_flush_block_1 = $2755faf0e26f783c$var$_tr_flush_block$1;\nvar $2755faf0e26f783c$var$_tr_tally_1 = $2755faf0e26f783c$var$_tr_tally$1;\nvar $2755faf0e26f783c$var$_tr_align_1 = $2755faf0e26f783c$var$_tr_align$1;\nvar $2755faf0e26f783c$var$trees = {\n    _tr_init: $2755faf0e26f783c$var$_tr_init_1,\n    _tr_stored_block: $2755faf0e26f783c$var$_tr_stored_block_1,\n    _tr_flush_block: $2755faf0e26f783c$var$_tr_flush_block_1,\n    _tr_tally: $2755faf0e26f783c$var$_tr_tally_1,\n    _tr_align: $2755faf0e26f783c$var$_tr_align_1\n};\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nvar $2755faf0e26f783c$var$adler32 = function(adler, buf, len, pos) {\n    var s1 = adler & 0xffff | 0, s2 = adler >>> 16 & 0xffff | 0, n = 0;\n    while(len !== 0){\n        // Set limit ~ twice less than 5552, to keep\n        // s2 in 31-bits, because we force signed ints.\n        // in other case %= will fail.\n        n = len > 2000 ? 2000 : len;\n        len -= n;\n        do {\n            s1 = s1 + buf[pos++] | 0;\n            s2 = s2 + s1 | 0;\n        }while (--n);\n        s1 %= 65521;\n        s2 %= 65521;\n    }\n    return s1 | s2 << 16 | 0;\n};\nvar $2755faf0e26f783c$var$adler32_1 = $2755faf0e26f783c$var$adler32;\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n// Use ordinary array, since untyped makes no boost here\nvar $2755faf0e26f783c$var$makeTable = function() {\n    var c, table = [];\n    for(var n = 0; n < 256; n++){\n        c = n;\n        for(var k = 0; k < 8; k++)c = c & 1 ? 0xEDB88320 ^ c >>> 1 : c >>> 1;\n        table[n] = c;\n    }\n    return table;\n};\n// Create table on load. Just 255 signed longs. Not a problem.\nvar $2755faf0e26f783c$var$crcTable = new Uint32Array($2755faf0e26f783c$var$makeTable());\nvar $2755faf0e26f783c$var$crc32 = function(crc, buf, len, pos) {\n    var t = $2755faf0e26f783c$var$crcTable;\n    var end = pos + len;\n    crc ^= -1;\n    for(var i = pos; i < end; i++)crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 0xFF];\n    return crc ^ -1; // >>> 0;\n};\nvar $2755faf0e26f783c$var$crc32_1 = $2755faf0e26f783c$var$crc32;\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nvar $2755faf0e26f783c$var$messages = {\n    2: 'need dictionary',\n    /* Z_NEED_DICT       2  */ 1: 'stream end',\n    /* Z_STREAM_END      1  */ 0: '',\n    /* Z_OK              0  */ '-1': 'file error',\n    /* Z_ERRNO         (-1) */ '-2': 'stream error',\n    /* Z_STREAM_ERROR  (-2) */ '-3': 'data error',\n    /* Z_DATA_ERROR    (-3) */ '-4': 'insufficient memory',\n    /* Z_MEM_ERROR     (-4) */ '-5': 'buffer error',\n    /* Z_BUF_ERROR     (-5) */ '-6': 'incompatible version' /* Z_VERSION_ERROR (-6) */ \n};\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nvar $2755faf0e26f783c$var$constants$2 = {\n    /* Allowed flush values; see deflate() and inflate() below for details */ Z_NO_FLUSH: 0,\n    Z_PARTIAL_FLUSH: 1,\n    Z_SYNC_FLUSH: 2,\n    Z_FULL_FLUSH: 3,\n    Z_FINISH: 4,\n    Z_BLOCK: 5,\n    Z_TREES: 6,\n    /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */ Z_OK: 0,\n    Z_STREAM_END: 1,\n    Z_NEED_DICT: 2,\n    Z_ERRNO: -1,\n    Z_STREAM_ERROR: -2,\n    Z_DATA_ERROR: -3,\n    Z_MEM_ERROR: -4,\n    Z_BUF_ERROR: -5,\n    //Z_VERSION_ERROR: -6,\n    /* compression levels */ Z_NO_COMPRESSION: 0,\n    Z_BEST_SPEED: 1,\n    Z_BEST_COMPRESSION: 9,\n    Z_DEFAULT_COMPRESSION: -1,\n    Z_FILTERED: 1,\n    Z_HUFFMAN_ONLY: 2,\n    Z_RLE: 3,\n    Z_FIXED: 4,\n    Z_DEFAULT_STRATEGY: 0,\n    /* Possible values of the data_type field (though see inflate()) */ Z_BINARY: 0,\n    Z_TEXT: 1,\n    //Z_ASCII:                1, // = Z_TEXT (deprecated)\n    Z_UNKNOWN: 2,\n    /* The deflate compression method */ Z_DEFLATED: 8\n};\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nvar $2755faf0e26f783c$var$_tr_init = $2755faf0e26f783c$var$trees._tr_init, $2755faf0e26f783c$var$_tr_stored_block = $2755faf0e26f783c$var$trees._tr_stored_block, $2755faf0e26f783c$var$_tr_flush_block = $2755faf0e26f783c$var$trees._tr_flush_block, $2755faf0e26f783c$var$_tr_tally = $2755faf0e26f783c$var$trees._tr_tally, $2755faf0e26f783c$var$_tr_align = $2755faf0e26f783c$var$trees._tr_align;\n/* Public constants ==========================================================*/ /* ===========================================================================*/ var $2755faf0e26f783c$var$Z_NO_FLUSH$2 = $2755faf0e26f783c$var$constants$2.Z_NO_FLUSH, $2755faf0e26f783c$var$Z_PARTIAL_FLUSH = $2755faf0e26f783c$var$constants$2.Z_PARTIAL_FLUSH, $2755faf0e26f783c$var$Z_FULL_FLUSH$1 = $2755faf0e26f783c$var$constants$2.Z_FULL_FLUSH, $2755faf0e26f783c$var$Z_FINISH$3 = $2755faf0e26f783c$var$constants$2.Z_FINISH, $2755faf0e26f783c$var$Z_BLOCK$1 = $2755faf0e26f783c$var$constants$2.Z_BLOCK, $2755faf0e26f783c$var$Z_OK$3 = $2755faf0e26f783c$var$constants$2.Z_OK, $2755faf0e26f783c$var$Z_STREAM_END$3 = $2755faf0e26f783c$var$constants$2.Z_STREAM_END, $2755faf0e26f783c$var$Z_STREAM_ERROR$2 = $2755faf0e26f783c$var$constants$2.Z_STREAM_ERROR, $2755faf0e26f783c$var$Z_DATA_ERROR$2 = $2755faf0e26f783c$var$constants$2.Z_DATA_ERROR, $2755faf0e26f783c$var$Z_BUF_ERROR$1 = $2755faf0e26f783c$var$constants$2.Z_BUF_ERROR, $2755faf0e26f783c$var$Z_DEFAULT_COMPRESSION$1 = $2755faf0e26f783c$var$constants$2.Z_DEFAULT_COMPRESSION, $2755faf0e26f783c$var$Z_FILTERED = $2755faf0e26f783c$var$constants$2.Z_FILTERED, $2755faf0e26f783c$var$Z_HUFFMAN_ONLY = $2755faf0e26f783c$var$constants$2.Z_HUFFMAN_ONLY, $2755faf0e26f783c$var$Z_RLE = $2755faf0e26f783c$var$constants$2.Z_RLE, $2755faf0e26f783c$var$Z_FIXED = $2755faf0e26f783c$var$constants$2.Z_FIXED, $2755faf0e26f783c$var$Z_DEFAULT_STRATEGY$1 = $2755faf0e26f783c$var$constants$2.Z_DEFAULT_STRATEGY, $2755faf0e26f783c$var$Z_UNKNOWN = $2755faf0e26f783c$var$constants$2.Z_UNKNOWN, $2755faf0e26f783c$var$Z_DEFLATED$2 = $2755faf0e26f783c$var$constants$2.Z_DEFLATED;\n/*============================================================================*/ var $2755faf0e26f783c$var$MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */ var $2755faf0e26f783c$var$MAX_WBITS$1 = 15;\n/* 32K LZ77 window */ var $2755faf0e26f783c$var$DEF_MEM_LEVEL = 8;\nvar $2755faf0e26f783c$var$LENGTH_CODES = 29;\n/* number of length codes, not counting the special END_BLOCK code */ var $2755faf0e26f783c$var$LITERALS = 256;\n/* number of literal bytes 0..255 */ var $2755faf0e26f783c$var$L_CODES = $2755faf0e26f783c$var$LITERALS + 1 + $2755faf0e26f783c$var$LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */ var $2755faf0e26f783c$var$D_CODES = 30;\n/* number of distance codes */ var $2755faf0e26f783c$var$BL_CODES = 19;\n/* number of codes used to transfer the bit lengths */ var $2755faf0e26f783c$var$HEAP_SIZE = 2 * $2755faf0e26f783c$var$L_CODES + 1;\n/* maximum heap size */ var $2755faf0e26f783c$var$MAX_BITS = 15;\n/* All codes must not exceed MAX_BITS bits */ var $2755faf0e26f783c$var$MIN_MATCH = 3;\nvar $2755faf0e26f783c$var$MAX_MATCH = 258;\nvar $2755faf0e26f783c$var$MIN_LOOKAHEAD = $2755faf0e26f783c$var$MAX_MATCH + $2755faf0e26f783c$var$MIN_MATCH + 1;\nvar $2755faf0e26f783c$var$PRESET_DICT = 0x20;\nvar $2755faf0e26f783c$var$INIT_STATE = 42; /* zlib header -> BUSY_STATE */ \n//#ifdef GZIP\nvar $2755faf0e26f783c$var$GZIP_STATE = 57; /* gzip header -> BUSY_STATE | EXTRA_STATE */ \n//#endif\nvar $2755faf0e26f783c$var$EXTRA_STATE = 69; /* gzip extra block -> NAME_STATE */ \nvar $2755faf0e26f783c$var$NAME_STATE = 73; /* gzip file name -> COMMENT_STATE */ \nvar $2755faf0e26f783c$var$COMMENT_STATE = 91; /* gzip comment -> HCRC_STATE */ \nvar $2755faf0e26f783c$var$HCRC_STATE = 103; /* gzip header CRC -> BUSY_STATE */ \nvar $2755faf0e26f783c$var$BUSY_STATE = 113; /* deflate -> FINISH_STATE */ \nvar $2755faf0e26f783c$var$FINISH_STATE = 666; /* stream complete */ \nvar $2755faf0e26f783c$var$BS_NEED_MORE = 1; /* block not completed, need more input or more output */ \nvar $2755faf0e26f783c$var$BS_BLOCK_DONE = 2; /* block flush performed */ \nvar $2755faf0e26f783c$var$BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */ \nvar $2755faf0e26f783c$var$BS_FINISH_DONE = 4; /* finish done, accept no more input or output */ \nvar $2755faf0e26f783c$var$OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\nvar $2755faf0e26f783c$var$err = function(strm, errorCode) {\n    strm.msg = $2755faf0e26f783c$var$messages[errorCode];\n    return errorCode;\n};\nvar $2755faf0e26f783c$var$rank = function(f) {\n    return f * 2 - (f > 4 ? 9 : 0);\n};\nvar $2755faf0e26f783c$var$zero = function(buf) {\n    var len = buf.length;\n    while(--len >= 0)buf[len] = 0;\n};\n/* ===========================================================================\n * Slide the hash table when sliding the window down (could be avoided with 32\n * bit values at the expense of memory usage). We slide even when level == 0 to\n * keep the hash table consistent if we switch back to level > 0 later.\n */ var $2755faf0e26f783c$var$slide_hash = function(s) {\n    var n, m;\n    var p;\n    var wsize = s.w_size;\n    n = s.hash_size;\n    p = n;\n    do {\n        m = s.head[--p];\n        s.head[p] = m >= wsize ? m - wsize : 0;\n    }while (--n);\n    n = wsize;\n    //#ifndef FASTEST\n    p = n;\n    do {\n        m = s.prev[--p];\n        s.prev[p] = m >= wsize ? m - wsize : 0;\n    /* If n is not on any hash chain, prev[n] is garbage but\n     * its value will never be used.\n     */ }while (--n);\n//#endif\n};\n/* eslint-disable new-cap */ var $2755faf0e26f783c$var$HASH_ZLIB = function(s, prev, data) {\n    return (prev << s.hash_shift ^ data) & s.hash_mask;\n};\n// This hash causes less collisions, https://github.com/nodeca/pako/issues/135\n// But breaks binary compatibility\n//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;\nvar $2755faf0e26f783c$var$HASH = $2755faf0e26f783c$var$HASH_ZLIB;\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output, except for\n * some deflate_stored() output, goes through this function so some\n * applications may wish to modify it to avoid allocating a large\n * strm->next_out buffer and copying into it. (See also read_buf()).\n */ var $2755faf0e26f783c$var$flush_pending = function(strm) {\n    var s = strm.state;\n    //_tr_flush_bits(s);\n    var len = s.pending;\n    if (len > strm.avail_out) len = strm.avail_out;\n    if (len === 0) return;\n    strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);\n    strm.next_out += len;\n    s.pending_out += len;\n    strm.total_out += len;\n    strm.avail_out -= len;\n    s.pending -= len;\n    if (s.pending === 0) s.pending_out = 0;\n};\nvar $2755faf0e26f783c$var$flush_block_only = function(s, last) {\n    $2755faf0e26f783c$var$_tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);\n    s.block_start = s.strstart;\n    $2755faf0e26f783c$var$flush_pending(s.strm);\n};\nvar $2755faf0e26f783c$var$put_byte = function(s, b) {\n    s.pending_buf[s.pending++] = b;\n};\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */ var $2755faf0e26f783c$var$putShortMSB = function(s, b) {\n    //  put_byte(s, (Byte)(b >> 8));\n    //  put_byte(s, (Byte)(b & 0xff));\n    s.pending_buf[s.pending++] = b >>> 8 & 0xff;\n    s.pending_buf[s.pending++] = b & 0xff;\n};\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */ var $2755faf0e26f783c$var$read_buf = function(strm, buf, start, size) {\n    var len = strm.avail_in;\n    if (len > size) len = size;\n    if (len === 0) return 0;\n    strm.avail_in -= len;\n    // zmemcpy(buf, strm->next_in, len);\n    buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);\n    if (strm.state.wrap === 1) strm.adler = $2755faf0e26f783c$var$adler32_1(strm.adler, buf, len, start);\n    else if (strm.state.wrap === 2) strm.adler = $2755faf0e26f783c$var$crc32_1(strm.adler, buf, len, start);\n    strm.next_in += len;\n    strm.total_in += len;\n    return len;\n};\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */ var $2755faf0e26f783c$var$longest_match = function(s, cur_match) {\n    var chain_length = s.max_chain_length; /* max hash chain length */ \n    var scan = s.strstart; /* current string */ \n    var match; /* matched string */ \n    var len; /* length of current match */ \n    var best_len = s.prev_length; /* best match length so far */ \n    var nice_match = s.nice_match; /* stop if match long enough */ \n    var limit = s.strstart > s.w_size - $2755faf0e26f783c$var$MIN_LOOKAHEAD ? s.strstart - (s.w_size - $2755faf0e26f783c$var$MIN_LOOKAHEAD) : 0 /*NIL*/ ;\n    var _win = s.window; // shortcut\n    var wmask = s.w_mask;\n    var prev = s.prev;\n    /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */ var strend = s.strstart + $2755faf0e26f783c$var$MAX_MATCH;\n    var scan_end1 = _win[scan + best_len - 1];\n    var scan_end = _win[scan + best_len];\n    /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */ // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n    /* Do not waste too much time if we already have a good match: */ if (s.prev_length >= s.good_match) chain_length >>= 2;\n    /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */ if (nice_match > s.lookahead) nice_match = s.lookahead;\n    // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n    do {\n        // Assert(cur_match < s->strstart, \"no future\");\n        match = cur_match;\n        /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */ if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) continue;\n        /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */ scan += 2;\n        match++;\n        // Assert(*scan == *match, \"match[2]?\");\n        /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */ do ;\n        while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend);\n        // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n        len = $2755faf0e26f783c$var$MAX_MATCH - (strend - scan);\n        scan = strend - $2755faf0e26f783c$var$MAX_MATCH;\n        if (len > best_len) {\n            s.match_start = cur_match;\n            best_len = len;\n            if (len >= nice_match) break;\n            scan_end1 = _win[scan + best_len - 1];\n            scan_end = _win[scan + best_len];\n        }\n    }while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n    if (best_len <= s.lookahead) return best_len;\n    return s.lookahead;\n};\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */ var $2755faf0e26f783c$var$fill_window = function(s) {\n    var _w_size = s.w_size;\n    var n, more, str;\n    //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n    do {\n        more = s.window_size - s.lookahead - s.strstart;\n        // JS ints have 32 bit, block below not needed\n        /* Deal with !@#$% 64K limit: */ //if (sizeof(int) <= 2) {\n        //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n        //        more = wsize;\n        //\n        //  } else if (more == (unsigned)(-1)) {\n        //        /* Very unlikely, but possible on 16 bit machine if\n        //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n        //         */\n        //        more--;\n        //    }\n        //}\n        /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */ if (s.strstart >= _w_size + (_w_size - $2755faf0e26f783c$var$MIN_LOOKAHEAD)) {\n            s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);\n            s.match_start -= _w_size;\n            s.strstart -= _w_size;\n            /* we now have strstart >= MAX_DIST */ s.block_start -= _w_size;\n            if (s.insert > s.strstart) s.insert = s.strstart;\n            $2755faf0e26f783c$var$slide_hash(s);\n            more += _w_size;\n        }\n        if (s.strm.avail_in === 0) break;\n        /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */ //Assert(more >= 2, \"more < 2\");\n        n = $2755faf0e26f783c$var$read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n        s.lookahead += n;\n        /* Initialize the hash value now that we have some input: */ if (s.lookahead + s.insert >= $2755faf0e26f783c$var$MIN_MATCH) {\n            str = s.strstart - s.insert;\n            s.ins_h = s.window[str];\n            /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */ s.ins_h = $2755faf0e26f783c$var$HASH(s, s.ins_h, s.window[str + 1]);\n            //#if MIN_MATCH != 3\n            //        Call update_hash() MIN_MATCH-3 more times\n            //#endif\n            while(s.insert){\n                /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */ s.ins_h = $2755faf0e26f783c$var$HASH(s, s.ins_h, s.window[str + $2755faf0e26f783c$var$MIN_MATCH - 1]);\n                s.prev[str & s.w_mask] = s.head[s.ins_h];\n                s.head[s.ins_h] = str;\n                str++;\n                s.insert--;\n                if (s.lookahead + s.insert < $2755faf0e26f783c$var$MIN_MATCH) break;\n            }\n        }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */ }while (s.lookahead < $2755faf0e26f783c$var$MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n/* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */ //  if (s.high_water < s.window_size) {\n//    const curr = s.strstart + s.lookahead;\n//    let init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n};\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n *\n * In case deflateParams() is used to later switch to a non-zero compression\n * level, s->matches (otherwise unused when storing) keeps track of the number\n * of hash table slides to perform. If s->matches is 1, then one hash table\n * slide will be done when switching. If s->matches is 2, the maximum value\n * allowed here, then the hash table will be cleared, since two or more slides\n * is the same as a clear.\n *\n * deflate_stored() is written to minimize the number of times an input byte is\n * copied. It is most efficient with large input and output buffers, which\n * maximizes the opportunites to have a single copy from next_in to next_out.\n */ var $2755faf0e26f783c$var$deflate_stored = function(s, flush) {\n    /* Smallest worthy block size when not flushing or finishing. By default\n   * this is 32K. This can be as small as 507 bytes for memLevel == 1. For\n   * large input and output buffers, the stored block size will be larger.\n   */ var min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;\n    /* Copy as many min_block or larger stored blocks directly to next_out as\n   * possible. If flushing, copy the remaining available input to next_out as\n   * stored blocks, if there is enough space.\n   */ var len, left, have, last = 0;\n    var used = s.strm.avail_in;\n    do {\n        /* Set len to the maximum size block that we can copy directly with the\n     * available input data and output space. Set left to how much of that\n     * would be copied from what's left in the window.\n     */ len = 65535 /* MAX_STORED */ ; /* maximum deflate stored block length */ \n        have = s.bi_valid + 42 >> 3; /* number of header bytes */ \n        if (s.strm.avail_out < have) break;\n        /* maximum stored block length that will fit in avail_out: */ have = s.strm.avail_out - have;\n        left = s.strstart - s.block_start; /* bytes left in window */ \n        if (len > left + s.strm.avail_in) len = left + s.strm.avail_in; /* limit len to the input */ \n        if (len > have) len = have; /* limit len to the output */ \n        /* If the stored block would be less than min_block in length, or if\n     * unable to copy all of the available input when flushing, then try\n     * copying to the window and the pending buffer instead. Also don't\n     * write an empty block when flushing -- deflate() does that.\n     */ if (len < min_block && (len === 0 && flush !== $2755faf0e26f783c$var$Z_FINISH$3 || flush === $2755faf0e26f783c$var$Z_NO_FLUSH$2 || len !== left + s.strm.avail_in)) break;\n        /* Make a dummy stored block in pending to get the header bytes,\n     * including any pending bits. This also updates the debugging counts.\n     */ last = flush === $2755faf0e26f783c$var$Z_FINISH$3 && len === left + s.strm.avail_in ? 1 : 0;\n        $2755faf0e26f783c$var$_tr_stored_block(s, 0, 0, last);\n        /* Replace the lengths in the dummy stored block with len. */ s.pending_buf[s.pending - 4] = len;\n        s.pending_buf[s.pending - 3] = len >> 8;\n        s.pending_buf[s.pending - 2] = ~len;\n        s.pending_buf[s.pending - 1] = ~len >> 8;\n        /* Write the stored block header bytes. */ $2755faf0e26f783c$var$flush_pending(s.strm);\n        //#ifdef ZLIB_DEBUG\n        //    /* Update debugging counts for the data about to be copied. */\n        //    s->compressed_len += len << 3;\n        //    s->bits_sent += len << 3;\n        //#endif\n        /* Copy uncompressed bytes from the window to next_out. */ if (left) {\n            if (left > len) left = len;\n            //zmemcpy(s->strm->next_out, s->window + s->block_start, left);\n            s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);\n            s.strm.next_out += left;\n            s.strm.avail_out -= left;\n            s.strm.total_out += left;\n            s.block_start += left;\n            len -= left;\n        }\n        /* Copy uncompressed bytes directly from next_in to next_out, updating\n     * the check value.\n     */ if (len) {\n            $2755faf0e26f783c$var$read_buf(s.strm, s.strm.output, s.strm.next_out, len);\n            s.strm.next_out += len;\n            s.strm.avail_out -= len;\n            s.strm.total_out += len;\n        }\n    }while (last === 0);\n    /* Update the sliding window with the last s->w_size bytes of the copied\n   * data, or append all of the copied data to the existing window if less\n   * than s->w_size bytes were copied. Also update the number of bytes to\n   * insert in the hash tables, in the event that deflateParams() switches to\n   * a non-zero compression level.\n   */ used -= s.strm.avail_in; /* number of input bytes directly copied */ \n    if (used) {\n        /* If any input was used, then no unused input remains in the window,\n     * therefore s->block_start == s->strstart.\n     */ if (used >= s.w_size) {\n            s.matches = 2; /* clear hash */ \n            //zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);\n            s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);\n            s.strstart = s.w_size;\n            s.insert = s.strstart;\n        } else {\n            if (s.window_size - s.strstart <= used) {\n                /* Slide the window down. */ s.strstart -= s.w_size;\n                //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n                s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n                if (s.matches < 2) s.matches++; /* add a pending slide_hash() */ \n                if (s.insert > s.strstart) s.insert = s.strstart;\n            }\n            //zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);\n            s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);\n            s.strstart += used;\n            s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;\n        }\n        s.block_start = s.strstart;\n    }\n    if (s.high_water < s.strstart) s.high_water = s.strstart;\n    /* If the last block was written to next_out, then done. */ if (last) return $2755faf0e26f783c$var$BS_FINISH_DONE;\n    /* If flushing and all input has been consumed, then done. */ if (flush !== $2755faf0e26f783c$var$Z_NO_FLUSH$2 && flush !== $2755faf0e26f783c$var$Z_FINISH$3 && s.strm.avail_in === 0 && s.strstart === s.block_start) return $2755faf0e26f783c$var$BS_BLOCK_DONE;\n    /* Fill the window with any remaining input. */ have = s.window_size - s.strstart;\n    if (s.strm.avail_in > have && s.block_start >= s.w_size) {\n        /* Slide the window down. */ s.block_start -= s.w_size;\n        s.strstart -= s.w_size;\n        //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n        if (s.matches < 2) s.matches++; /* add a pending slide_hash() */ \n        have += s.w_size; /* more space now */ \n        if (s.insert > s.strstart) s.insert = s.strstart;\n    }\n    if (have > s.strm.avail_in) have = s.strm.avail_in;\n    if (have) {\n        $2755faf0e26f783c$var$read_buf(s.strm, s.window, s.strstart, have);\n        s.strstart += have;\n        s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;\n    }\n    if (s.high_water < s.strstart) s.high_water = s.strstart;\n    /* There was not enough avail_out to write a complete worthy or flushed\n   * stored block to next_out. Write a stored block to pending instead, if we\n   * have enough input for a worthy block, or if flushing and there is enough\n   * room for the remaining input as a stored block in the pending buffer.\n   */ have = s.bi_valid + 42 >> 3; /* number of header bytes */ \n    /* maximum stored block length that will fit in pending: */ have = s.pending_buf_size - have > 65535 /* MAX_STORED */  ? 65535 /* MAX_STORED */  : s.pending_buf_size - have;\n    min_block = have > s.w_size ? s.w_size : have;\n    left = s.strstart - s.block_start;\n    if (left >= min_block || (left || flush === $2755faf0e26f783c$var$Z_FINISH$3) && flush !== $2755faf0e26f783c$var$Z_NO_FLUSH$2 && s.strm.avail_in === 0 && left <= have) {\n        len = left > have ? have : left;\n        last = flush === $2755faf0e26f783c$var$Z_FINISH$3 && s.strm.avail_in === 0 && len === left ? 1 : 0;\n        $2755faf0e26f783c$var$_tr_stored_block(s, s.block_start, len, last);\n        s.block_start += len;\n        $2755faf0e26f783c$var$flush_pending(s.strm);\n    }\n    /* We've done all we can with the available input and output. */ return last ? $2755faf0e26f783c$var$BS_FINISH_STARTED : $2755faf0e26f783c$var$BS_NEED_MORE;\n};\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */ var $2755faf0e26f783c$var$deflate_fast = function(s, flush) {\n    var hash_head; /* head of the hash chain */ \n    var bflush; /* set if current block must be flushed */ \n    for(;;){\n        /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */ if (s.lookahead < $2755faf0e26f783c$var$MIN_LOOKAHEAD) {\n            $2755faf0e26f783c$var$fill_window(s);\n            if (s.lookahead < $2755faf0e26f783c$var$MIN_LOOKAHEAD && flush === $2755faf0e26f783c$var$Z_NO_FLUSH$2) return $2755faf0e26f783c$var$BS_NEED_MORE;\n            if (s.lookahead === 0) break; /* flush the current block */ \n        }\n        /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */ hash_head = 0 /*NIL*/ ;\n        if (s.lookahead >= $2755faf0e26f783c$var$MIN_MATCH) {\n            /*** INSERT_STRING(s, s.strstart, hash_head); ***/ s.ins_h = $2755faf0e26f783c$var$HASH(s, s.ins_h, s.window[s.strstart + $2755faf0e26f783c$var$MIN_MATCH - 1]);\n            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n            s.head[s.ins_h] = s.strstart;\n        /***/ }\n        /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */ if (hash_head !== 0 /*NIL*/  && s.strstart - hash_head <= s.w_size - $2755faf0e26f783c$var$MIN_LOOKAHEAD) /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */ s.match_length = $2755faf0e26f783c$var$longest_match(s, hash_head);\n        if (s.match_length >= $2755faf0e26f783c$var$MIN_MATCH) {\n            // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n            /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/ bflush = $2755faf0e26f783c$var$_tr_tally(s, s.strstart - s.match_start, s.match_length - $2755faf0e26f783c$var$MIN_MATCH);\n            s.lookahead -= s.match_length;\n            /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */ if (s.match_length <= s.max_lazy_match /*max_insert_length*/  && s.lookahead >= $2755faf0e26f783c$var$MIN_MATCH) {\n                s.match_length--; /* string at strstart already in table */ \n                do {\n                    s.strstart++;\n                    /*** INSERT_STRING(s, s.strstart, hash_head); ***/ s.ins_h = $2755faf0e26f783c$var$HASH(s, s.ins_h, s.window[s.strstart + $2755faf0e26f783c$var$MIN_MATCH - 1]);\n                    hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n                    s.head[s.ins_h] = s.strstart;\n                /***/ /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */ }while (--s.match_length !== 0);\n                s.strstart++;\n            } else {\n                s.strstart += s.match_length;\n                s.match_length = 0;\n                s.ins_h = s.window[s.strstart];\n                /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */ s.ins_h = $2755faf0e26f783c$var$HASH(s, s.ins_h, s.window[s.strstart + 1]);\n            //#if MIN_MATCH != 3\n            //                Call UPDATE_HASH() MIN_MATCH-3 more times\n            //#endif\n            /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */ }\n        } else {\n            /* No match, output a literal byte */ //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n            /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/ bflush = $2755faf0e26f783c$var$_tr_tally(s, 0, s.window[s.strstart]);\n            s.lookahead--;\n            s.strstart++;\n        }\n        if (bflush) {\n            /*** FLUSH_BLOCK(s, 0); ***/ $2755faf0e26f783c$var$flush_block_only(s, false);\n            if (s.strm.avail_out === 0) return $2755faf0e26f783c$var$BS_NEED_MORE;\n        /***/ }\n    }\n    s.insert = s.strstart < $2755faf0e26f783c$var$MIN_MATCH - 1 ? s.strstart : $2755faf0e26f783c$var$MIN_MATCH - 1;\n    if (flush === $2755faf0e26f783c$var$Z_FINISH$3) {\n        /*** FLUSH_BLOCK(s, 1); ***/ $2755faf0e26f783c$var$flush_block_only(s, true);\n        if (s.strm.avail_out === 0) return $2755faf0e26f783c$var$BS_FINISH_STARTED;\n        /***/ return $2755faf0e26f783c$var$BS_FINISH_DONE;\n    }\n    if (s.sym_next) {\n        /*** FLUSH_BLOCK(s, 0); ***/ $2755faf0e26f783c$var$flush_block_only(s, false);\n        if (s.strm.avail_out === 0) return $2755faf0e26f783c$var$BS_NEED_MORE;\n    /***/ }\n    return $2755faf0e26f783c$var$BS_BLOCK_DONE;\n};\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */ var $2755faf0e26f783c$var$deflate_slow = function(s, flush) {\n    var hash_head; /* head of hash chain */ \n    var bflush; /* set if current block must be flushed */ \n    var max_insert;\n    /* Process the input block. */ for(;;){\n        /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */ if (s.lookahead < $2755faf0e26f783c$var$MIN_LOOKAHEAD) {\n            $2755faf0e26f783c$var$fill_window(s);\n            if (s.lookahead < $2755faf0e26f783c$var$MIN_LOOKAHEAD && flush === $2755faf0e26f783c$var$Z_NO_FLUSH$2) return $2755faf0e26f783c$var$BS_NEED_MORE;\n            if (s.lookahead === 0) break;\n             /* flush the current block */ \n        }\n        /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */ hash_head = 0 /*NIL*/ ;\n        if (s.lookahead >= $2755faf0e26f783c$var$MIN_MATCH) {\n            /*** INSERT_STRING(s, s.strstart, hash_head); ***/ s.ins_h = $2755faf0e26f783c$var$HASH(s, s.ins_h, s.window[s.strstart + $2755faf0e26f783c$var$MIN_MATCH - 1]);\n            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n            s.head[s.ins_h] = s.strstart;\n        /***/ }\n        /* Find the longest match, discarding those <= prev_length.\n     */ s.prev_length = s.match_length;\n        s.prev_match = s.match_start;\n        s.match_length = $2755faf0e26f783c$var$MIN_MATCH - 1;\n        if (hash_head !== 0 /*NIL*/  && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - $2755faf0e26f783c$var$MIN_LOOKAHEAD) {\n            /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */ s.match_length = $2755faf0e26f783c$var$longest_match(s, hash_head);\n            /* longest_match() sets match_start */ if (s.match_length <= 5 && (s.strategy === $2755faf0e26f783c$var$Z_FILTERED || s.match_length === $2755faf0e26f783c$var$MIN_MATCH && s.strstart - s.match_start > 4096 /*TOO_FAR*/ )) /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */ s.match_length = $2755faf0e26f783c$var$MIN_MATCH - 1;\n        }\n        /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */ if (s.prev_length >= $2755faf0e26f783c$var$MIN_MATCH && s.match_length <= s.prev_length) {\n            max_insert = s.strstart + s.lookahead - $2755faf0e26f783c$var$MIN_MATCH;\n            /* Do not insert strings in hash table beyond this. */ //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n            /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/ bflush = $2755faf0e26f783c$var$_tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - $2755faf0e26f783c$var$MIN_MATCH);\n            /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */ s.lookahead -= s.prev_length - 1;\n            s.prev_length -= 2;\n            do if (++s.strstart <= max_insert) {\n                /*** INSERT_STRING(s, s.strstart, hash_head); ***/ s.ins_h = $2755faf0e26f783c$var$HASH(s, s.ins_h, s.window[s.strstart + $2755faf0e26f783c$var$MIN_MATCH - 1]);\n                hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n                s.head[s.ins_h] = s.strstart;\n            /***/ }\n            while (--s.prev_length !== 0);\n            s.match_available = 0;\n            s.match_length = $2755faf0e26f783c$var$MIN_MATCH - 1;\n            s.strstart++;\n            if (bflush) {\n                /*** FLUSH_BLOCK(s, 0); ***/ $2755faf0e26f783c$var$flush_block_only(s, false);\n                if (s.strm.avail_out === 0) return $2755faf0e26f783c$var$BS_NEED_MORE;\n            /***/ }\n        } else if (s.match_available) {\n            /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */ //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n            /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/ bflush = $2755faf0e26f783c$var$_tr_tally(s, 0, s.window[s.strstart - 1]);\n            if (bflush) /*** FLUSH_BLOCK_ONLY(s, 0) ***/ $2755faf0e26f783c$var$flush_block_only(s, false);\n            s.strstart++;\n            s.lookahead--;\n            if (s.strm.avail_out === 0) return $2755faf0e26f783c$var$BS_NEED_MORE;\n        } else {\n            /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */ s.match_available = 1;\n            s.strstart++;\n            s.lookahead--;\n        }\n    }\n    //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n    if (s.match_available) {\n        //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n        /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/ bflush = $2755faf0e26f783c$var$_tr_tally(s, 0, s.window[s.strstart - 1]);\n        s.match_available = 0;\n    }\n    s.insert = s.strstart < $2755faf0e26f783c$var$MIN_MATCH - 1 ? s.strstart : $2755faf0e26f783c$var$MIN_MATCH - 1;\n    if (flush === $2755faf0e26f783c$var$Z_FINISH$3) {\n        /*** FLUSH_BLOCK(s, 1); ***/ $2755faf0e26f783c$var$flush_block_only(s, true);\n        if (s.strm.avail_out === 0) return $2755faf0e26f783c$var$BS_FINISH_STARTED;\n        /***/ return $2755faf0e26f783c$var$BS_FINISH_DONE;\n    }\n    if (s.sym_next) {\n        /*** FLUSH_BLOCK(s, 0); ***/ $2755faf0e26f783c$var$flush_block_only(s, false);\n        if (s.strm.avail_out === 0) return $2755faf0e26f783c$var$BS_NEED_MORE;\n    /***/ }\n    return $2755faf0e26f783c$var$BS_BLOCK_DONE;\n};\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */ var $2755faf0e26f783c$var$deflate_rle = function(s, flush) {\n    var bflush; /* set if current block must be flushed */ \n    var prev; /* byte at distance one to match */ \n    var scan, strend; /* scan goes up to strend for length of run */ \n    var _win = s.window;\n    for(;;){\n        /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */ if (s.lookahead <= $2755faf0e26f783c$var$MAX_MATCH) {\n            $2755faf0e26f783c$var$fill_window(s);\n            if (s.lookahead <= $2755faf0e26f783c$var$MAX_MATCH && flush === $2755faf0e26f783c$var$Z_NO_FLUSH$2) return $2755faf0e26f783c$var$BS_NEED_MORE;\n            if (s.lookahead === 0) break;\n             /* flush the current block */ \n        }\n        /* See how many times the previous byte repeats */ s.match_length = 0;\n        if (s.lookahead >= $2755faf0e26f783c$var$MIN_MATCH && s.strstart > 0) {\n            scan = s.strstart - 1;\n            prev = _win[scan];\n            if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n                strend = s.strstart + $2755faf0e26f783c$var$MAX_MATCH;\n                do ;\n                while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);\n                s.match_length = $2755faf0e26f783c$var$MAX_MATCH - (strend - scan);\n                if (s.match_length > s.lookahead) s.match_length = s.lookahead;\n            }\n        //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n        }\n        /* Emit match if have run of MIN_MATCH or longer, else emit literal */ if (s.match_length >= $2755faf0e26f783c$var$MIN_MATCH) {\n            //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n            /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/ bflush = $2755faf0e26f783c$var$_tr_tally(s, 1, s.match_length - $2755faf0e26f783c$var$MIN_MATCH);\n            s.lookahead -= s.match_length;\n            s.strstart += s.match_length;\n            s.match_length = 0;\n        } else {\n            /* No match, output a literal byte */ //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n            /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/ bflush = $2755faf0e26f783c$var$_tr_tally(s, 0, s.window[s.strstart]);\n            s.lookahead--;\n            s.strstart++;\n        }\n        if (bflush) {\n            /*** FLUSH_BLOCK(s, 0); ***/ $2755faf0e26f783c$var$flush_block_only(s, false);\n            if (s.strm.avail_out === 0) return $2755faf0e26f783c$var$BS_NEED_MORE;\n        /***/ }\n    }\n    s.insert = 0;\n    if (flush === $2755faf0e26f783c$var$Z_FINISH$3) {\n        /*** FLUSH_BLOCK(s, 1); ***/ $2755faf0e26f783c$var$flush_block_only(s, true);\n        if (s.strm.avail_out === 0) return $2755faf0e26f783c$var$BS_FINISH_STARTED;\n        /***/ return $2755faf0e26f783c$var$BS_FINISH_DONE;\n    }\n    if (s.sym_next) {\n        /*** FLUSH_BLOCK(s, 0); ***/ $2755faf0e26f783c$var$flush_block_only(s, false);\n        if (s.strm.avail_out === 0) return $2755faf0e26f783c$var$BS_NEED_MORE;\n    /***/ }\n    return $2755faf0e26f783c$var$BS_BLOCK_DONE;\n};\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */ var $2755faf0e26f783c$var$deflate_huff = function(s, flush) {\n    var bflush; /* set if current block must be flushed */ \n    for(;;){\n        /* Make sure that we have a literal to write. */ if (s.lookahead === 0) {\n            $2755faf0e26f783c$var$fill_window(s);\n            if (s.lookahead === 0) {\n                if (flush === $2755faf0e26f783c$var$Z_NO_FLUSH$2) return $2755faf0e26f783c$var$BS_NEED_MORE;\n                break; /* flush the current block */ \n            }\n        }\n        /* Output a literal byte */ s.match_length = 0;\n        //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n        /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/ bflush = $2755faf0e26f783c$var$_tr_tally(s, 0, s.window[s.strstart]);\n        s.lookahead--;\n        s.strstart++;\n        if (bflush) {\n            /*** FLUSH_BLOCK(s, 0); ***/ $2755faf0e26f783c$var$flush_block_only(s, false);\n            if (s.strm.avail_out === 0) return $2755faf0e26f783c$var$BS_NEED_MORE;\n        /***/ }\n    }\n    s.insert = 0;\n    if (flush === $2755faf0e26f783c$var$Z_FINISH$3) {\n        /*** FLUSH_BLOCK(s, 1); ***/ $2755faf0e26f783c$var$flush_block_only(s, true);\n        if (s.strm.avail_out === 0) return $2755faf0e26f783c$var$BS_FINISH_STARTED;\n        /***/ return $2755faf0e26f783c$var$BS_FINISH_DONE;\n    }\n    if (s.sym_next) {\n        /*** FLUSH_BLOCK(s, 0); ***/ $2755faf0e26f783c$var$flush_block_only(s, false);\n        if (s.strm.avail_out === 0) return $2755faf0e26f783c$var$BS_NEED_MORE;\n    /***/ }\n    return $2755faf0e26f783c$var$BS_BLOCK_DONE;\n};\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */ function $2755faf0e26f783c$var$Config(good_length, max_lazy, nice_length, max_chain, func) {\n    this.good_length = good_length;\n    this.max_lazy = max_lazy;\n    this.nice_length = nice_length;\n    this.max_chain = max_chain;\n    this.func = func;\n}\nvar $2755faf0e26f783c$var$configuration_table = [\n    /*      good lazy nice chain */ new $2755faf0e26f783c$var$Config(0, 0, 0, 0, $2755faf0e26f783c$var$deflate_stored),\n    /* 0 store only */ new $2755faf0e26f783c$var$Config(4, 4, 8, 4, $2755faf0e26f783c$var$deflate_fast),\n    /* 1 max speed, no lazy matches */ new $2755faf0e26f783c$var$Config(4, 5, 16, 8, $2755faf0e26f783c$var$deflate_fast),\n    /* 2 */ new $2755faf0e26f783c$var$Config(4, 6, 32, 32, $2755faf0e26f783c$var$deflate_fast),\n    /* 3 */ new $2755faf0e26f783c$var$Config(4, 4, 16, 16, $2755faf0e26f783c$var$deflate_slow),\n    /* 4 lazy matches */ new $2755faf0e26f783c$var$Config(8, 16, 32, 32, $2755faf0e26f783c$var$deflate_slow),\n    /* 5 */ new $2755faf0e26f783c$var$Config(8, 16, 128, 128, $2755faf0e26f783c$var$deflate_slow),\n    /* 6 */ new $2755faf0e26f783c$var$Config(8, 32, 128, 256, $2755faf0e26f783c$var$deflate_slow),\n    /* 7 */ new $2755faf0e26f783c$var$Config(32, 128, 258, 1024, $2755faf0e26f783c$var$deflate_slow),\n    /* 8 */ new $2755faf0e26f783c$var$Config(32, 258, 258, 4096, $2755faf0e26f783c$var$deflate_slow)\n];\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */ var $2755faf0e26f783c$var$lm_init = function(s) {\n    s.window_size = 2 * s.w_size;\n    /*** CLEAR_HASH(s); ***/ $2755faf0e26f783c$var$zero(s.head); // Fill with NIL (= 0);\n    /* Set the default configuration parameters:\n   */ s.max_lazy_match = $2755faf0e26f783c$var$configuration_table[s.level].max_lazy;\n    s.good_match = $2755faf0e26f783c$var$configuration_table[s.level].good_length;\n    s.nice_match = $2755faf0e26f783c$var$configuration_table[s.level].nice_length;\n    s.max_chain_length = $2755faf0e26f783c$var$configuration_table[s.level].max_chain;\n    s.strstart = 0;\n    s.block_start = 0;\n    s.lookahead = 0;\n    s.insert = 0;\n    s.match_length = s.prev_length = $2755faf0e26f783c$var$MIN_MATCH - 1;\n    s.match_available = 0;\n    s.ins_h = 0;\n};\nfunction $2755faf0e26f783c$var$DeflateState() {\n    this.strm = null; /* pointer back to this zlib stream */ \n    this.status = 0; /* as the name implies */ \n    this.pending_buf = null; /* output still pending */ \n    this.pending_buf_size = 0; /* size of pending_buf */ \n    this.pending_out = 0; /* next pending byte to output to the stream */ \n    this.pending = 0; /* nb of bytes in the pending buffer */ \n    this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */ \n    this.gzhead = null; /* gzip header information to write */ \n    this.gzindex = 0; /* where in extra, name, or comment */ \n    this.method = $2755faf0e26f783c$var$Z_DEFLATED$2; /* can only be DEFLATED */ \n    this.last_flush = -1; /* value of flush param for previous deflate call */ \n    this.w_size = 0; /* LZ77 window size (32K by default) */ \n    this.w_bits = 0; /* log2(w_size)  (8..16) */ \n    this.w_mask = 0; /* w_size - 1 */ \n    this.window = null;\n    /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */ this.window_size = 0;\n    /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */ this.prev = null;\n    /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */ this.head = null; /* Heads of the hash chains or NIL. */ \n    this.ins_h = 0; /* hash index of string to be inserted */ \n    this.hash_size = 0; /* number of elements in hash table */ \n    this.hash_bits = 0; /* log2(hash_size) */ \n    this.hash_mask = 0; /* hash_size-1 */ \n    this.hash_shift = 0;\n    /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */ this.block_start = 0;\n    /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */ this.match_length = 0; /* length of best match */ \n    this.prev_match = 0; /* previous match */ \n    this.match_available = 0; /* set if previous match exists */ \n    this.strstart = 0; /* start of string to insert */ \n    this.match_start = 0; /* start of matching string */ \n    this.lookahead = 0; /* number of valid bytes ahead in window */ \n    this.prev_length = 0;\n    /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */ this.max_chain_length = 0;\n    /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */ this.max_lazy_match = 0;\n    /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */ // That's alias to max_lazy_match, don't use directly\n    //this.max_insert_length = 0;\n    /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */ this.level = 0; /* compression level (1..9) */ \n    this.strategy = 0; /* favor or force Huffman coding*/ \n    this.good_match = 0;\n    /* Use a faster search when the previous match is longer than this */ this.nice_match = 0; /* Stop searching when current match exceeds this */ \n    /* used by trees.c: */ /* Didn't use ct_data typedef below to suppress compiler warning */ // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n    // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n    // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n    // Use flat array of DOUBLE size, with interleaved fata,\n    // because JS does not support effective\n    this.dyn_ltree = new Uint16Array($2755faf0e26f783c$var$HEAP_SIZE * 2);\n    this.dyn_dtree = new Uint16Array((2 * $2755faf0e26f783c$var$D_CODES + 1) * 2);\n    this.bl_tree = new Uint16Array((2 * $2755faf0e26f783c$var$BL_CODES + 1) * 2);\n    $2755faf0e26f783c$var$zero(this.dyn_ltree);\n    $2755faf0e26f783c$var$zero(this.dyn_dtree);\n    $2755faf0e26f783c$var$zero(this.bl_tree);\n    this.l_desc = null; /* desc. for literal tree */ \n    this.d_desc = null; /* desc. for distance tree */ \n    this.bl_desc = null; /* desc. for bit length tree */ \n    //ush bl_count[MAX_BITS+1];\n    this.bl_count = new Uint16Array($2755faf0e26f783c$var$MAX_BITS + 1);\n    /* number of codes at each bit length for an optimal tree */ //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n    this.heap = new Uint16Array(2 * $2755faf0e26f783c$var$L_CODES + 1); /* heap used to build the Huffman trees */ \n    $2755faf0e26f783c$var$zero(this.heap);\n    this.heap_len = 0; /* number of elements in the heap */ \n    this.heap_max = 0; /* element of largest frequency */ \n    /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */ this.depth = new Uint16Array(2 * $2755faf0e26f783c$var$L_CODES + 1); //uch depth[2*L_CODES+1];\n    $2755faf0e26f783c$var$zero(this.depth);\n    /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */ this.sym_buf = 0; /* buffer for distances and literals/lengths */ \n    this.lit_bufsize = 0;\n    /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */ this.sym_next = 0; /* running index in sym_buf */ \n    this.sym_end = 0; /* symbol table full when sym_next reaches this */ \n    this.opt_len = 0; /* bit length of current block with optimal trees */ \n    this.static_len = 0; /* bit length of current block with static trees */ \n    this.matches = 0; /* number of string matches in current block */ \n    this.insert = 0; /* bytes at end of window left to insert */ \n    this.bi_buf = 0;\n    /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */ this.bi_valid = 0;\n/* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */ // Used for window memory init. We safely ignore it for JS. That makes\n// sense only for pointers and memory check tools.\n//this.high_water = 0;\n/* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */ }\n/* =========================================================================\n * Check for a valid deflate stream state. Return 0 if ok, 1 if not.\n */ var $2755faf0e26f783c$var$deflateStateCheck = function(strm) {\n    if (!strm) return 1;\n    var s = strm.state;\n    if (!s || s.strm !== strm || s.status !== $2755faf0e26f783c$var$INIT_STATE && //#ifdef GZIP\n    s.status !== $2755faf0e26f783c$var$GZIP_STATE && //#endif\n    s.status !== $2755faf0e26f783c$var$EXTRA_STATE && s.status !== $2755faf0e26f783c$var$NAME_STATE && s.status !== $2755faf0e26f783c$var$COMMENT_STATE && s.status !== $2755faf0e26f783c$var$HCRC_STATE && s.status !== $2755faf0e26f783c$var$BUSY_STATE && s.status !== $2755faf0e26f783c$var$FINISH_STATE) return 1;\n    return 0;\n};\nvar $2755faf0e26f783c$var$deflateResetKeep = function(strm) {\n    if ($2755faf0e26f783c$var$deflateStateCheck(strm)) return $2755faf0e26f783c$var$err(strm, $2755faf0e26f783c$var$Z_STREAM_ERROR$2);\n    strm.total_in = strm.total_out = 0;\n    strm.data_type = $2755faf0e26f783c$var$Z_UNKNOWN;\n    var s = strm.state;\n    s.pending = 0;\n    s.pending_out = 0;\n    if (s.wrap < 0) s.wrap = -s.wrap;\n    s.status = //#ifdef GZIP\n    s.wrap === 2 ? $2755faf0e26f783c$var$GZIP_STATE : //#endif\n    s.wrap ? $2755faf0e26f783c$var$INIT_STATE : $2755faf0e26f783c$var$BUSY_STATE;\n    strm.adler = s.wrap === 2 ? 0 // crc32(0, Z_NULL, 0)\n     : 1; // adler32(0, Z_NULL, 0)\n    s.last_flush = -2;\n    $2755faf0e26f783c$var$_tr_init(s);\n    return $2755faf0e26f783c$var$Z_OK$3;\n};\nvar $2755faf0e26f783c$var$deflateReset = function(strm) {\n    var ret = $2755faf0e26f783c$var$deflateResetKeep(strm);\n    if (ret === $2755faf0e26f783c$var$Z_OK$3) $2755faf0e26f783c$var$lm_init(strm.state);\n    return ret;\n};\nvar $2755faf0e26f783c$var$deflateSetHeader = function(strm, head) {\n    if ($2755faf0e26f783c$var$deflateStateCheck(strm) || strm.state.wrap !== 2) return $2755faf0e26f783c$var$Z_STREAM_ERROR$2;\n    strm.state.gzhead = head;\n    return $2755faf0e26f783c$var$Z_OK$3;\n};\nvar $2755faf0e26f783c$var$deflateInit2 = function(strm, level, method, windowBits, memLevel, strategy) {\n    if (!strm) return $2755faf0e26f783c$var$Z_STREAM_ERROR$2;\n    var wrap = 1;\n    if (level === $2755faf0e26f783c$var$Z_DEFAULT_COMPRESSION$1) level = 6;\n    if (windowBits < 0) {\n        wrap = 0;\n        windowBits = -windowBits;\n    } else if (windowBits > 15) {\n        wrap = 2; /* write gzip wrapper instead */ \n        windowBits -= 16;\n    }\n    if (memLevel < 1 || memLevel > $2755faf0e26f783c$var$MAX_MEM_LEVEL || method !== $2755faf0e26f783c$var$Z_DEFLATED$2 || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > $2755faf0e26f783c$var$Z_FIXED || windowBits === 8 && wrap !== 1) return $2755faf0e26f783c$var$err(strm, $2755faf0e26f783c$var$Z_STREAM_ERROR$2);\n    if (windowBits === 8) windowBits = 9;\n    /* until 256-byte window bug fixed */ var s = new $2755faf0e26f783c$var$DeflateState();\n    strm.state = s;\n    s.strm = strm;\n    s.status = $2755faf0e26f783c$var$INIT_STATE; /* to pass state test in deflateReset() */ \n    s.wrap = wrap;\n    s.gzhead = null;\n    s.w_bits = windowBits;\n    s.w_size = 1 << s.w_bits;\n    s.w_mask = s.w_size - 1;\n    s.hash_bits = memLevel + 7;\n    s.hash_size = 1 << s.hash_bits;\n    s.hash_mask = s.hash_size - 1;\n    s.hash_shift = ~~((s.hash_bits + $2755faf0e26f783c$var$MIN_MATCH - 1) / $2755faf0e26f783c$var$MIN_MATCH);\n    s.window = new Uint8Array(s.w_size * 2);\n    s.head = new Uint16Array(s.hash_size);\n    s.prev = new Uint16Array(s.w_size);\n    // Don't need mem init magic for JS.\n    //s.high_water = 0;  /* nothing written to s->window yet */\n    s.lit_bufsize = 1 << memLevel + 6; /* 16K elements by default */ \n    /* We overlay pending_buf and sym_buf. This works since the average size\n   * for length/distance pairs over any compressed block is assured to be 31\n   * bits or less.\n   *\n   * Analysis: The longest fixed codes are a length code of 8 bits plus 5\n   * extra bits, for lengths 131 to 257. The longest fixed distance codes are\n   * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest\n   * possible fixed-codes length/distance pair is then 31 bits total.\n   *\n   * sym_buf starts one-fourth of the way into pending_buf. So there are\n   * three bytes in sym_buf for every four bytes in pending_buf. Each symbol\n   * in sym_buf is three bytes -- two for the distance and one for the\n   * literal/length. As each symbol is consumed, the pointer to the next\n   * sym_buf value to read moves forward three bytes. From that symbol, up to\n   * 31 bits are written to pending_buf. The closest the written pending_buf\n   * bits gets to the next sym_buf symbol to read is just before the last\n   * code is written. At that time, 31*(n-2) bits have been written, just\n   * after 24*(n-2) bits have been consumed from sym_buf. sym_buf starts at\n   * 8*n bits into pending_buf. (Note that the symbol buffer fills when n-1\n   * symbols are written.) The closest the writing gets to what is unread is\n   * then n+14 bits. Here n is lit_bufsize, which is 16384 by default, and\n   * can range from 128 to 32768.\n   *\n   * Therefore, at a minimum, there are 142 bits of space between what is\n   * written and what is read in the overlain buffers, so the symbols cannot\n   * be overwritten by the compressed data. That space is actually 139 bits,\n   * due to the three-bit fixed-code block header.\n   *\n   * That covers the case where either Z_FIXED is specified, forcing fixed\n   * codes, or when the use of fixed codes is chosen, because that choice\n   * results in a smaller compressed block than dynamic codes. That latter\n   * condition then assures that the above analysis also covers all dynamic\n   * blocks. A dynamic-code block will only be chosen to be emitted if it has\n   * fewer bits than a fixed-code block would for the same set of symbols.\n   * Therefore its average symbol length is assured to be less than 31. So\n   * the compressed data for a dynamic block also cannot overwrite the\n   * symbols from which it is being constructed.\n   */ s.pending_buf_size = s.lit_bufsize * 4;\n    s.pending_buf = new Uint8Array(s.pending_buf_size);\n    // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n    //s->sym_buf = s->pending_buf + s->lit_bufsize;\n    s.sym_buf = s.lit_bufsize;\n    //s->sym_end = (s->lit_bufsize - 1) * 3;\n    s.sym_end = (s.lit_bufsize - 1) * 3;\n    /* We avoid equality with lit_bufsize*3 because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */ s.level = level;\n    s.strategy = strategy;\n    s.method = method;\n    return $2755faf0e26f783c$var$deflateReset(strm);\n};\nvar $2755faf0e26f783c$var$deflateInit = function(strm, level) {\n    return $2755faf0e26f783c$var$deflateInit2(strm, level, $2755faf0e26f783c$var$Z_DEFLATED$2, $2755faf0e26f783c$var$MAX_WBITS$1, $2755faf0e26f783c$var$DEF_MEM_LEVEL, $2755faf0e26f783c$var$Z_DEFAULT_STRATEGY$1);\n};\n/* ========================================================================= */ var $2755faf0e26f783c$var$deflate$2 = function(strm, flush) {\n    if ($2755faf0e26f783c$var$deflateStateCheck(strm) || flush > $2755faf0e26f783c$var$Z_BLOCK$1 || flush < 0) return strm ? $2755faf0e26f783c$var$err(strm, $2755faf0e26f783c$var$Z_STREAM_ERROR$2) : $2755faf0e26f783c$var$Z_STREAM_ERROR$2;\n    var s = strm.state;\n    if (!strm.output || strm.avail_in !== 0 && !strm.input || s.status === $2755faf0e26f783c$var$FINISH_STATE && flush !== $2755faf0e26f783c$var$Z_FINISH$3) return $2755faf0e26f783c$var$err(strm, strm.avail_out === 0 ? $2755faf0e26f783c$var$Z_BUF_ERROR$1 : $2755faf0e26f783c$var$Z_STREAM_ERROR$2);\n    var old_flush = s.last_flush;\n    s.last_flush = flush;\n    /* Flush as much pending output as possible */ if (s.pending !== 0) {\n        $2755faf0e26f783c$var$flush_pending(strm);\n        if (strm.avail_out === 0) {\n            /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */ s.last_flush = -1;\n            return $2755faf0e26f783c$var$Z_OK$3;\n        }\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */ } else if (strm.avail_in === 0 && $2755faf0e26f783c$var$rank(flush) <= $2755faf0e26f783c$var$rank(old_flush) && flush !== $2755faf0e26f783c$var$Z_FINISH$3) return $2755faf0e26f783c$var$err(strm, $2755faf0e26f783c$var$Z_BUF_ERROR$1);\n    /* User must not provide more input after the first FINISH: */ if (s.status === $2755faf0e26f783c$var$FINISH_STATE && strm.avail_in !== 0) return $2755faf0e26f783c$var$err(strm, $2755faf0e26f783c$var$Z_BUF_ERROR$1);\n    /* Write the header */ if (s.status === $2755faf0e26f783c$var$INIT_STATE && s.wrap === 0) s.status = $2755faf0e26f783c$var$BUSY_STATE;\n    if (s.status === $2755faf0e26f783c$var$INIT_STATE) {\n        /* zlib header */ var header = $2755faf0e26f783c$var$Z_DEFLATED$2 + (s.w_bits - 8 << 4) << 8;\n        var level_flags = -1;\n        if (s.strategy >= $2755faf0e26f783c$var$Z_HUFFMAN_ONLY || s.level < 2) level_flags = 0;\n        else if (s.level < 6) level_flags = 1;\n        else if (s.level === 6) level_flags = 2;\n        else level_flags = 3;\n        header |= level_flags << 6;\n        if (s.strstart !== 0) header |= $2755faf0e26f783c$var$PRESET_DICT;\n        header += 31 - header % 31;\n        $2755faf0e26f783c$var$putShortMSB(s, header);\n        /* Save the adler32 of the preset dictionary: */ if (s.strstart !== 0) {\n            $2755faf0e26f783c$var$putShortMSB(s, strm.adler >>> 16);\n            $2755faf0e26f783c$var$putShortMSB(s, strm.adler & 0xffff);\n        }\n        strm.adler = 1; // adler32(0L, Z_NULL, 0);\n        s.status = $2755faf0e26f783c$var$BUSY_STATE;\n        /* Compression must start with an empty pending buffer */ $2755faf0e26f783c$var$flush_pending(strm);\n        if (s.pending !== 0) {\n            s.last_flush = -1;\n            return $2755faf0e26f783c$var$Z_OK$3;\n        }\n    }\n    //#ifdef GZIP\n    if (s.status === $2755faf0e26f783c$var$GZIP_STATE) {\n        /* gzip header */ strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        $2755faf0e26f783c$var$put_byte(s, 31);\n        $2755faf0e26f783c$var$put_byte(s, 139);\n        $2755faf0e26f783c$var$put_byte(s, 8);\n        if (!s.gzhead) {\n            $2755faf0e26f783c$var$put_byte(s, 0);\n            $2755faf0e26f783c$var$put_byte(s, 0);\n            $2755faf0e26f783c$var$put_byte(s, 0);\n            $2755faf0e26f783c$var$put_byte(s, 0);\n            $2755faf0e26f783c$var$put_byte(s, 0);\n            $2755faf0e26f783c$var$put_byte(s, s.level === 9 ? 2 : s.strategy >= $2755faf0e26f783c$var$Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);\n            $2755faf0e26f783c$var$put_byte(s, $2755faf0e26f783c$var$OS_CODE);\n            s.status = $2755faf0e26f783c$var$BUSY_STATE;\n            /* Compression must start with an empty pending buffer */ $2755faf0e26f783c$var$flush_pending(strm);\n            if (s.pending !== 0) {\n                s.last_flush = -1;\n                return $2755faf0e26f783c$var$Z_OK$3;\n            }\n        } else {\n            $2755faf0e26f783c$var$put_byte(s, (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16));\n            $2755faf0e26f783c$var$put_byte(s, s.gzhead.time & 0xff);\n            $2755faf0e26f783c$var$put_byte(s, s.gzhead.time >> 8 & 0xff);\n            $2755faf0e26f783c$var$put_byte(s, s.gzhead.time >> 16 & 0xff);\n            $2755faf0e26f783c$var$put_byte(s, s.gzhead.time >> 24 & 0xff);\n            $2755faf0e26f783c$var$put_byte(s, s.level === 9 ? 2 : s.strategy >= $2755faf0e26f783c$var$Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);\n            $2755faf0e26f783c$var$put_byte(s, s.gzhead.os & 0xff);\n            if (s.gzhead.extra && s.gzhead.extra.length) {\n                $2755faf0e26f783c$var$put_byte(s, s.gzhead.extra.length & 0xff);\n                $2755faf0e26f783c$var$put_byte(s, s.gzhead.extra.length >> 8 & 0xff);\n            }\n            if (s.gzhead.hcrc) strm.adler = $2755faf0e26f783c$var$crc32_1(strm.adler, s.pending_buf, s.pending, 0);\n            s.gzindex = 0;\n            s.status = $2755faf0e26f783c$var$EXTRA_STATE;\n        }\n    }\n    if (s.status === $2755faf0e26f783c$var$EXTRA_STATE) {\n        if (s.gzhead.extra /* != Z_NULL*/ ) {\n            var beg = s.pending; /* start of bytes to update crc */ \n            var left = (s.gzhead.extra.length & 0xffff) - s.gzindex;\n            while(s.pending + left > s.pending_buf_size){\n                var copy = s.pending_buf_size - s.pending;\n                // zmemcpy(s.pending_buf + s.pending,\n                //    s.gzhead.extra + s.gzindex, copy);\n                s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);\n                s.pending = s.pending_buf_size;\n                //--- HCRC_UPDATE(beg) ---//\n                if (s.gzhead.hcrc && s.pending > beg) strm.adler = $2755faf0e26f783c$var$crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n                //---//\n                s.gzindex += copy;\n                $2755faf0e26f783c$var$flush_pending(strm);\n                if (s.pending !== 0) {\n                    s.last_flush = -1;\n                    return $2755faf0e26f783c$var$Z_OK$3;\n                }\n                beg = 0;\n                left -= copy;\n            }\n            // JS specific: s.gzhead.extra may be TypedArray or Array for backward compatibility\n            //              TypedArray.slice and TypedArray.from don't exist in IE10-IE11\n            var gzhead_extra = new Uint8Array(s.gzhead.extra);\n            // zmemcpy(s->pending_buf + s->pending,\n            //     s->gzhead->extra + s->gzindex, left);\n            s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);\n            s.pending += left;\n            //--- HCRC_UPDATE(beg) ---//\n            if (s.gzhead.hcrc && s.pending > beg) strm.adler = $2755faf0e26f783c$var$crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n            //---//\n            s.gzindex = 0;\n        }\n        s.status = $2755faf0e26f783c$var$NAME_STATE;\n    }\n    if (s.status === $2755faf0e26f783c$var$NAME_STATE) {\n        if (s.gzhead.name /* != Z_NULL*/ ) {\n            var beg1 = s.pending; /* start of bytes to update crc */ \n            var val;\n            do {\n                if (s.pending === s.pending_buf_size) {\n                    //--- HCRC_UPDATE(beg) ---//\n                    if (s.gzhead.hcrc && s.pending > beg1) strm.adler = $2755faf0e26f783c$var$crc32_1(strm.adler, s.pending_buf, s.pending - beg1, beg1);\n                    //---//\n                    $2755faf0e26f783c$var$flush_pending(strm);\n                    if (s.pending !== 0) {\n                        s.last_flush = -1;\n                        return $2755faf0e26f783c$var$Z_OK$3;\n                    }\n                    beg1 = 0;\n                }\n                // JS specific: little magic to add zero terminator to end of string\n                if (s.gzindex < s.gzhead.name.length) val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n                else val = 0;\n                $2755faf0e26f783c$var$put_byte(s, val);\n            }while (val !== 0);\n            //--- HCRC_UPDATE(beg) ---//\n            if (s.gzhead.hcrc && s.pending > beg1) strm.adler = $2755faf0e26f783c$var$crc32_1(strm.adler, s.pending_buf, s.pending - beg1, beg1);\n            //---//\n            s.gzindex = 0;\n        }\n        s.status = $2755faf0e26f783c$var$COMMENT_STATE;\n    }\n    if (s.status === $2755faf0e26f783c$var$COMMENT_STATE) {\n        if (s.gzhead.comment /* != Z_NULL*/ ) {\n            var beg2 = s.pending; /* start of bytes to update crc */ \n            var val1;\n            do {\n                if (s.pending === s.pending_buf_size) {\n                    //--- HCRC_UPDATE(beg) ---//\n                    if (s.gzhead.hcrc && s.pending > beg2) strm.adler = $2755faf0e26f783c$var$crc32_1(strm.adler, s.pending_buf, s.pending - beg2, beg2);\n                    //---//\n                    $2755faf0e26f783c$var$flush_pending(strm);\n                    if (s.pending !== 0) {\n                        s.last_flush = -1;\n                        return $2755faf0e26f783c$var$Z_OK$3;\n                    }\n                    beg2 = 0;\n                }\n                // JS specific: little magic to add zero terminator to end of string\n                if (s.gzindex < s.gzhead.comment.length) val1 = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n                else val1 = 0;\n                $2755faf0e26f783c$var$put_byte(s, val1);\n            }while (val1 !== 0);\n            //--- HCRC_UPDATE(beg) ---//\n            if (s.gzhead.hcrc && s.pending > beg2) strm.adler = $2755faf0e26f783c$var$crc32_1(strm.adler, s.pending_buf, s.pending - beg2, beg2);\n        //---//\n        }\n        s.status = $2755faf0e26f783c$var$HCRC_STATE;\n    }\n    if (s.status === $2755faf0e26f783c$var$HCRC_STATE) {\n        if (s.gzhead.hcrc) {\n            if (s.pending + 2 > s.pending_buf_size) {\n                $2755faf0e26f783c$var$flush_pending(strm);\n                if (s.pending !== 0) {\n                    s.last_flush = -1;\n                    return $2755faf0e26f783c$var$Z_OK$3;\n                }\n            }\n            $2755faf0e26f783c$var$put_byte(s, strm.adler & 0xff);\n            $2755faf0e26f783c$var$put_byte(s, strm.adler >> 8 & 0xff);\n            strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        }\n        s.status = $2755faf0e26f783c$var$BUSY_STATE;\n        /* Compression must start with an empty pending buffer */ $2755faf0e26f783c$var$flush_pending(strm);\n        if (s.pending !== 0) {\n            s.last_flush = -1;\n            return $2755faf0e26f783c$var$Z_OK$3;\n        }\n    }\n    //#endif\n    /* Start a new block or continue the current one.\n   */ if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== $2755faf0e26f783c$var$Z_NO_FLUSH$2 && s.status !== $2755faf0e26f783c$var$FINISH_STATE) {\n        var bstate = s.level === 0 ? $2755faf0e26f783c$var$deflate_stored(s, flush) : s.strategy === $2755faf0e26f783c$var$Z_HUFFMAN_ONLY ? $2755faf0e26f783c$var$deflate_huff(s, flush) : s.strategy === $2755faf0e26f783c$var$Z_RLE ? $2755faf0e26f783c$var$deflate_rle(s, flush) : $2755faf0e26f783c$var$configuration_table[s.level].func(s, flush);\n        if (bstate === $2755faf0e26f783c$var$BS_FINISH_STARTED || bstate === $2755faf0e26f783c$var$BS_FINISH_DONE) s.status = $2755faf0e26f783c$var$FINISH_STATE;\n        if (bstate === $2755faf0e26f783c$var$BS_NEED_MORE || bstate === $2755faf0e26f783c$var$BS_FINISH_STARTED) {\n            if (strm.avail_out === 0) s.last_flush = -1;\n            return $2755faf0e26f783c$var$Z_OK$3;\n        /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */ }\n        if (bstate === $2755faf0e26f783c$var$BS_BLOCK_DONE) {\n            if (flush === $2755faf0e26f783c$var$Z_PARTIAL_FLUSH) $2755faf0e26f783c$var$_tr_align(s);\n            else if (flush !== $2755faf0e26f783c$var$Z_BLOCK$1) {\n                $2755faf0e26f783c$var$_tr_stored_block(s, 0, 0, false);\n                /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */ if (flush === $2755faf0e26f783c$var$Z_FULL_FLUSH$1) {\n                    /*** CLEAR_HASH(s); ***/ /* forget history */ $2755faf0e26f783c$var$zero(s.head); // Fill with NIL (= 0);\n                    if (s.lookahead === 0) {\n                        s.strstart = 0;\n                        s.block_start = 0;\n                        s.insert = 0;\n                    }\n                }\n            }\n            $2755faf0e26f783c$var$flush_pending(strm);\n            if (strm.avail_out === 0) {\n                s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */ \n                return $2755faf0e26f783c$var$Z_OK$3;\n            }\n        }\n    }\n    if (flush !== $2755faf0e26f783c$var$Z_FINISH$3) return $2755faf0e26f783c$var$Z_OK$3;\n    if (s.wrap <= 0) return $2755faf0e26f783c$var$Z_STREAM_END$3;\n    /* Write the trailer */ if (s.wrap === 2) {\n        $2755faf0e26f783c$var$put_byte(s, strm.adler & 0xff);\n        $2755faf0e26f783c$var$put_byte(s, strm.adler >> 8 & 0xff);\n        $2755faf0e26f783c$var$put_byte(s, strm.adler >> 16 & 0xff);\n        $2755faf0e26f783c$var$put_byte(s, strm.adler >> 24 & 0xff);\n        $2755faf0e26f783c$var$put_byte(s, strm.total_in & 0xff);\n        $2755faf0e26f783c$var$put_byte(s, strm.total_in >> 8 & 0xff);\n        $2755faf0e26f783c$var$put_byte(s, strm.total_in >> 16 & 0xff);\n        $2755faf0e26f783c$var$put_byte(s, strm.total_in >> 24 & 0xff);\n    } else {\n        $2755faf0e26f783c$var$putShortMSB(s, strm.adler >>> 16);\n        $2755faf0e26f783c$var$putShortMSB(s, strm.adler & 0xffff);\n    }\n    $2755faf0e26f783c$var$flush_pending(strm);\n    /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */ if (s.wrap > 0) s.wrap = -s.wrap;\n    /* write the trailer only once! */ return s.pending !== 0 ? $2755faf0e26f783c$var$Z_OK$3 : $2755faf0e26f783c$var$Z_STREAM_END$3;\n};\nvar $2755faf0e26f783c$var$deflateEnd = function(strm) {\n    if ($2755faf0e26f783c$var$deflateStateCheck(strm)) return $2755faf0e26f783c$var$Z_STREAM_ERROR$2;\n    var status = strm.state.status;\n    strm.state = null;\n    return status === $2755faf0e26f783c$var$BUSY_STATE ? $2755faf0e26f783c$var$err(strm, $2755faf0e26f783c$var$Z_DATA_ERROR$2) : $2755faf0e26f783c$var$Z_OK$3;\n};\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */ var $2755faf0e26f783c$var$deflateSetDictionary = function(strm, dictionary) {\n    var dictLength = dictionary.length;\n    if ($2755faf0e26f783c$var$deflateStateCheck(strm)) return $2755faf0e26f783c$var$Z_STREAM_ERROR$2;\n    var s = strm.state;\n    var wrap = s.wrap;\n    if (wrap === 2 || wrap === 1 && s.status !== $2755faf0e26f783c$var$INIT_STATE || s.lookahead) return $2755faf0e26f783c$var$Z_STREAM_ERROR$2;\n    /* when using zlib wrappers, compute Adler-32 for provided dictionary */ if (wrap === 1) /* adler32(strm->adler, dictionary, dictLength); */ strm.adler = $2755faf0e26f783c$var$adler32_1(strm.adler, dictionary, dictLength, 0);\n    s.wrap = 0; /* avoid computing Adler-32 in read_buf */ \n    /* if dictionary would fill window, just replace the history */ if (dictLength >= s.w_size) {\n        if (wrap === 0) {\n            /*** CLEAR_HASH(s); ***/ $2755faf0e26f783c$var$zero(s.head); // Fill with NIL (= 0);\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n        }\n        /* use the tail */ // dictionary = dictionary.slice(dictLength - s.w_size);\n        var tmpDict = new Uint8Array(s.w_size);\n        tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);\n        dictionary = tmpDict;\n        dictLength = s.w_size;\n    }\n    /* insert dictionary into window and hash */ var avail = strm.avail_in;\n    var next = strm.next_in;\n    var input = strm.input;\n    strm.avail_in = dictLength;\n    strm.next_in = 0;\n    strm.input = dictionary;\n    $2755faf0e26f783c$var$fill_window(s);\n    while(s.lookahead >= $2755faf0e26f783c$var$MIN_MATCH){\n        var str = s.strstart;\n        var n = s.lookahead - ($2755faf0e26f783c$var$MIN_MATCH - 1);\n        do {\n            /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */ s.ins_h = $2755faf0e26f783c$var$HASH(s, s.ins_h, s.window[str + $2755faf0e26f783c$var$MIN_MATCH - 1]);\n            s.prev[str & s.w_mask] = s.head[s.ins_h];\n            s.head[s.ins_h] = str;\n            str++;\n        }while (--n);\n        s.strstart = str;\n        s.lookahead = $2755faf0e26f783c$var$MIN_MATCH - 1;\n        $2755faf0e26f783c$var$fill_window(s);\n    }\n    s.strstart += s.lookahead;\n    s.block_start = s.strstart;\n    s.insert = s.lookahead;\n    s.lookahead = 0;\n    s.match_length = s.prev_length = $2755faf0e26f783c$var$MIN_MATCH - 1;\n    s.match_available = 0;\n    strm.next_in = next;\n    strm.input = input;\n    strm.avail_in = avail;\n    s.wrap = wrap;\n    return $2755faf0e26f783c$var$Z_OK$3;\n};\nvar $2755faf0e26f783c$var$deflateInit_1 = $2755faf0e26f783c$var$deflateInit;\nvar $2755faf0e26f783c$var$deflateInit2_1 = $2755faf0e26f783c$var$deflateInit2;\nvar $2755faf0e26f783c$var$deflateReset_1 = $2755faf0e26f783c$var$deflateReset;\nvar $2755faf0e26f783c$var$deflateResetKeep_1 = $2755faf0e26f783c$var$deflateResetKeep;\nvar $2755faf0e26f783c$var$deflateSetHeader_1 = $2755faf0e26f783c$var$deflateSetHeader;\nvar $2755faf0e26f783c$var$deflate_2$1 = $2755faf0e26f783c$var$deflate$2;\nvar $2755faf0e26f783c$var$deflateEnd_1 = $2755faf0e26f783c$var$deflateEnd;\nvar $2755faf0e26f783c$var$deflateSetDictionary_1 = $2755faf0e26f783c$var$deflateSetDictionary;\nvar $2755faf0e26f783c$var$deflateInfo = 'pako deflate (from Nodeca project)';\n/* Not implemented\nmodule.exports.deflateBound = deflateBound;\nmodule.exports.deflateCopy = deflateCopy;\nmodule.exports.deflateGetDictionary = deflateGetDictionary;\nmodule.exports.deflateParams = deflateParams;\nmodule.exports.deflatePending = deflatePending;\nmodule.exports.deflatePrime = deflatePrime;\nmodule.exports.deflateTune = deflateTune;\n*/ var $2755faf0e26f783c$var$deflate_1$2 = {\n    deflateInit: $2755faf0e26f783c$var$deflateInit_1,\n    deflateInit2: $2755faf0e26f783c$var$deflateInit2_1,\n    deflateReset: $2755faf0e26f783c$var$deflateReset_1,\n    deflateResetKeep: $2755faf0e26f783c$var$deflateResetKeep_1,\n    deflateSetHeader: $2755faf0e26f783c$var$deflateSetHeader_1,\n    deflate: $2755faf0e26f783c$var$deflate_2$1,\n    deflateEnd: $2755faf0e26f783c$var$deflateEnd_1,\n    deflateSetDictionary: $2755faf0e26f783c$var$deflateSetDictionary_1,\n    deflateInfo: $2755faf0e26f783c$var$deflateInfo\n};\nvar $2755faf0e26f783c$var$_has = function(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n};\nvar $2755faf0e26f783c$var$assign = function assign(obj /*from1, from2, from3, ...*/ ) {\n    var sources = Array.prototype.slice.call(arguments, 1);\n    while(sources.length){\n        var source = sources.shift();\n        if (!source) continue;\n        if (typeof source !== 'object') throw new TypeError(source + 'must be non-object');\n        for(var p in source)if ($2755faf0e26f783c$var$_has(source, p)) obj[p] = source[p];\n    }\n    return obj;\n};\n// Join array of chunks to single array.\nvar $2755faf0e26f783c$var$flattenChunks = function(chunks) {\n    // calculate data length\n    var len = 0;\n    for(var i = 0, l = chunks.length; i < l; i++)len += chunks[i].length;\n    // join chunks\n    var result = new Uint8Array(len);\n    for(var i1 = 0, pos = 0, l1 = chunks.length; i1 < l1; i1++){\n        var chunk = chunks[i1];\n        result.set(chunk, pos);\n        pos += chunk.length;\n    }\n    return result;\n};\nvar $2755faf0e26f783c$var$common = {\n    assign: $2755faf0e26f783c$var$assign,\n    flattenChunks: $2755faf0e26f783c$var$flattenChunks\n};\n// String encode/decode helpers\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nvar $2755faf0e26f783c$var$STR_APPLY_UIA_OK = true;\ntry {\n    String.fromCharCode.apply(null, new Uint8Array(1));\n} catch (__) {\n    $2755faf0e26f783c$var$STR_APPLY_UIA_OK = false;\n}\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar $2755faf0e26f783c$var$_utf8len = new Uint8Array(256);\nfor(var $2755faf0e26f783c$var$q = 0; $2755faf0e26f783c$var$q < 256; $2755faf0e26f783c$var$q++)$2755faf0e26f783c$var$_utf8len[$2755faf0e26f783c$var$q] = $2755faf0e26f783c$var$q >= 252 ? 6 : $2755faf0e26f783c$var$q >= 248 ? 5 : $2755faf0e26f783c$var$q >= 240 ? 4 : $2755faf0e26f783c$var$q >= 224 ? 3 : $2755faf0e26f783c$var$q >= 192 ? 2 : 1;\n$2755faf0e26f783c$var$_utf8len[254] = $2755faf0e26f783c$var$_utf8len[254] = 1; // Invalid sequence start\n// convert string to array (typed, when possible)\nvar $2755faf0e26f783c$var$string2buf = function(str) {\n    if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) return new TextEncoder().encode(str);\n    var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n    // count binary size\n    for(m_pos = 0; m_pos < str_len; m_pos++){\n        c = str.charCodeAt(m_pos);\n        if ((c & 0xfc00) === 0xd800 && m_pos + 1 < str_len) {\n            c2 = str.charCodeAt(m_pos + 1);\n            if ((c2 & 0xfc00) === 0xdc00) {\n                c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);\n                m_pos++;\n            }\n        }\n        buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n    }\n    // allocate buffer\n    buf = new Uint8Array(buf_len);\n    // convert\n    for(i = 0, m_pos = 0; i < buf_len; m_pos++){\n        c = str.charCodeAt(m_pos);\n        if ((c & 0xfc00) === 0xd800 && m_pos + 1 < str_len) {\n            c2 = str.charCodeAt(m_pos + 1);\n            if ((c2 & 0xfc00) === 0xdc00) {\n                c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);\n                m_pos++;\n            }\n        }\n        if (c < 0x80) /* one byte */ buf[i++] = c;\n        else if (c < 0x800) {\n            /* two bytes */ buf[i++] = 0xC0 | c >>> 6;\n            buf[i++] = 0x80 | c & 0x3f;\n        } else if (c < 0x10000) {\n            /* three bytes */ buf[i++] = 0xE0 | c >>> 12;\n            buf[i++] = 0x80 | c >>> 6 & 0x3f;\n            buf[i++] = 0x80 | c & 0x3f;\n        } else {\n            /* four bytes */ buf[i++] = 0xf0 | c >>> 18;\n            buf[i++] = 0x80 | c >>> 12 & 0x3f;\n            buf[i++] = 0x80 | c >>> 6 & 0x3f;\n            buf[i++] = 0x80 | c & 0x3f;\n        }\n    }\n    return buf;\n};\n// Helper\nvar $2755faf0e26f783c$var$buf2binstring = function(buf, len) {\n    // On Chrome, the arguments in a function call that are allowed is `65534`.\n    // If the length of the buffer is smaller than that, we can use this optimization,\n    // otherwise we will take a slower path.\n    if (len < 65534) {\n        if (buf.subarray && $2755faf0e26f783c$var$STR_APPLY_UIA_OK) return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));\n    }\n    var result = '';\n    for(var i = 0; i < len; i++)result += String.fromCharCode(buf[i]);\n    return result;\n};\n// convert array to string\nvar $2755faf0e26f783c$var$buf2string = function(buf, max) {\n    var len = max || buf.length;\n    if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) return new TextDecoder().decode(buf.subarray(0, max));\n    var i, out;\n    // Reserve max possible length (2 words per char)\n    // NB: by unknown reasons, Array is significantly faster for\n    //     String.fromCharCode.apply than Uint16Array.\n    var utf16buf = new Array(len * 2);\n    for(out = 0, i = 0; i < len;){\n        var c = buf[i++];\n        // quick process ascii\n        if (c < 0x80) {\n            utf16buf[out++] = c;\n            continue;\n        }\n        var c_len = $2755faf0e26f783c$var$_utf8len[c];\n        // skip 5 & 6 byte codes\n        if (c_len > 4) {\n            utf16buf[out++] = 0xfffd;\n            i += c_len - 1;\n            continue;\n        }\n        // apply mask on first byte\n        c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n        // join the rest\n        while(c_len > 1 && i < len){\n            c = c << 6 | buf[i++] & 0x3f;\n            c_len--;\n        }\n        // terminated by end of string?\n        if (c_len > 1) {\n            utf16buf[out++] = 0xfffd;\n            continue;\n        }\n        if (c < 0x10000) utf16buf[out++] = c;\n        else {\n            c -= 0x10000;\n            utf16buf[out++] = 0xd800 | c >> 10 & 0x3ff;\n            utf16buf[out++] = 0xdc00 | c & 0x3ff;\n        }\n    }\n    return $2755faf0e26f783c$var$buf2binstring(utf16buf, out);\n};\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nvar $2755faf0e26f783c$var$utf8border = function(buf, max) {\n    max = max || buf.length;\n    if (max > buf.length) max = buf.length;\n    // go back from last position, until start of sequence found\n    var pos = max - 1;\n    while(pos >= 0 && (buf[pos] & 0xC0) === 0x80)pos--;\n    // Very small and broken sequence,\n    // return max, because we should return something anyway.\n    if (pos < 0) return max;\n    // If we came to start of buffer - that means buffer is too small,\n    // return max too.\n    if (pos === 0) return max;\n    return pos + $2755faf0e26f783c$var$_utf8len[buf[pos]] > max ? pos : max;\n};\nvar $2755faf0e26f783c$var$strings = {\n    string2buf: $2755faf0e26f783c$var$string2buf,\n    buf2string: $2755faf0e26f783c$var$buf2string,\n    utf8border: $2755faf0e26f783c$var$utf8border\n};\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nfunction $2755faf0e26f783c$var$ZStream() {\n    /* next input byte */ this.input = null; // JS specific, because we have no pointers\n    this.next_in = 0;\n    /* number of bytes available at input */ this.avail_in = 0;\n    /* total number of input bytes read so far */ this.total_in = 0;\n    /* next output byte should be put there */ this.output = null; // JS specific, because we have no pointers\n    this.next_out = 0;\n    /* remaining free space at output */ this.avail_out = 0;\n    /* total number of bytes output so far */ this.total_out = 0;\n    /* last error message, NULL if no error */ this.msg = '' /*Z_NULL*/ ;\n    /* not visible by applications */ this.state = null;\n    /* best guess about the data type: binary or text */ this.data_type = 2 /*Z_UNKNOWN*/ ;\n    /* adler32 value of the uncompressed data */ this.adler = 0;\n}\nvar $2755faf0e26f783c$var$zstream = $2755faf0e26f783c$var$ZStream;\nvar $2755faf0e26f783c$var$toString$1 = Object.prototype.toString;\n/* Public constants ==========================================================*/ /* ===========================================================================*/ var $2755faf0e26f783c$var$Z_NO_FLUSH$1 = $2755faf0e26f783c$var$constants$2.Z_NO_FLUSH, $2755faf0e26f783c$var$Z_SYNC_FLUSH = $2755faf0e26f783c$var$constants$2.Z_SYNC_FLUSH, $2755faf0e26f783c$var$Z_FULL_FLUSH = $2755faf0e26f783c$var$constants$2.Z_FULL_FLUSH, $2755faf0e26f783c$var$Z_FINISH$2 = $2755faf0e26f783c$var$constants$2.Z_FINISH, $2755faf0e26f783c$var$Z_OK$2 = $2755faf0e26f783c$var$constants$2.Z_OK, $2755faf0e26f783c$var$Z_STREAM_END$2 = $2755faf0e26f783c$var$constants$2.Z_STREAM_END, $2755faf0e26f783c$var$Z_DEFAULT_COMPRESSION = $2755faf0e26f783c$var$constants$2.Z_DEFAULT_COMPRESSION, $2755faf0e26f783c$var$Z_DEFAULT_STRATEGY = $2755faf0e26f783c$var$constants$2.Z_DEFAULT_STRATEGY, $2755faf0e26f783c$var$Z_DEFLATED$1 = $2755faf0e26f783c$var$constants$2.Z_DEFLATED;\n/* ===========================================================================*/ /**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/ /* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/ /**\n * Deflate.result -> Uint8Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param).\n **/ /**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/ /**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/ /**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/ function $2755faf0e26f783c$var$Deflate$1(options) {\n    this.options = $2755faf0e26f783c$var$common.assign({\n        level: $2755faf0e26f783c$var$Z_DEFAULT_COMPRESSION,\n        method: $2755faf0e26f783c$var$Z_DEFLATED$1,\n        chunkSize: 16384,\n        windowBits: 15,\n        memLevel: 8,\n        strategy: $2755faf0e26f783c$var$Z_DEFAULT_STRATEGY\n    }, options || {});\n    var opt = this.options;\n    if (opt.raw && opt.windowBits > 0) opt.windowBits = -opt.windowBits;\n    else if (opt.gzip && opt.windowBits > 0 && opt.windowBits < 16) opt.windowBits += 16;\n    this.err = 0; // error code, if happens (0 = Z_OK)\n    this.msg = ''; // error message\n    this.ended = false; // used to avoid multiple onEnd() calls\n    this.chunks = []; // chunks of compressed data\n    this.strm = new $2755faf0e26f783c$var$zstream();\n    this.strm.avail_out = 0;\n    var status = $2755faf0e26f783c$var$deflate_1$2.deflateInit2(this.strm, opt.level, opt.method, opt.windowBits, opt.memLevel, opt.strategy);\n    if (status !== $2755faf0e26f783c$var$Z_OK$2) throw new Error($2755faf0e26f783c$var$messages[status]);\n    if (opt.header) $2755faf0e26f783c$var$deflate_1$2.deflateSetHeader(this.strm, opt.header);\n    if (opt.dictionary) {\n        var dict;\n        // Convert data if needed\n        if (typeof opt.dictionary === 'string') // If we need to compress text, change encoding to utf8.\n        dict = $2755faf0e26f783c$var$strings.string2buf(opt.dictionary);\n        else if ($2755faf0e26f783c$var$toString$1.call(opt.dictionary) === '[object ArrayBuffer]') dict = new Uint8Array(opt.dictionary);\n        else dict = opt.dictionary;\n        status = $2755faf0e26f783c$var$deflate_1$2.deflateSetDictionary(this.strm, dict);\n        if (status !== $2755faf0e26f783c$var$Z_OK$2) throw new Error($2755faf0e26f783c$var$messages[status]);\n        this._dict_set = true;\n    }\n}\n/**\n * Deflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must\n * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending\n * buffers and call [[Deflate#onEnd]].\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/ $2755faf0e26f783c$var$Deflate$1.prototype.push = function(data, flush_mode) {\n    var strm = this.strm;\n    var chunkSize = this.options.chunkSize;\n    var status, _flush_mode;\n    if (this.ended) return false;\n    if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n    else _flush_mode = flush_mode === true ? $2755faf0e26f783c$var$Z_FINISH$2 : $2755faf0e26f783c$var$Z_NO_FLUSH$1;\n    // Convert data if needed\n    if (typeof data === 'string') // If we need to compress text, change encoding to utf8.\n    strm.input = $2755faf0e26f783c$var$strings.string2buf(data);\n    else if ($2755faf0e26f783c$var$toString$1.call(data) === '[object ArrayBuffer]') strm.input = new Uint8Array(data);\n    else strm.input = data;\n    strm.next_in = 0;\n    strm.avail_in = strm.input.length;\n    for(;;){\n        if (strm.avail_out === 0) {\n            strm.output = new Uint8Array(chunkSize);\n            strm.next_out = 0;\n            strm.avail_out = chunkSize;\n        }\n        // Make sure avail_out > 6 to avoid repeating markers\n        if ((_flush_mode === $2755faf0e26f783c$var$Z_SYNC_FLUSH || _flush_mode === $2755faf0e26f783c$var$Z_FULL_FLUSH) && strm.avail_out <= 6) {\n            this.onData(strm.output.subarray(0, strm.next_out));\n            strm.avail_out = 0;\n            continue;\n        }\n        status = $2755faf0e26f783c$var$deflate_1$2.deflate(strm, _flush_mode);\n        // Ended => flush and finish\n        if (status === $2755faf0e26f783c$var$Z_STREAM_END$2) {\n            if (strm.next_out > 0) this.onData(strm.output.subarray(0, strm.next_out));\n            status = $2755faf0e26f783c$var$deflate_1$2.deflateEnd(this.strm);\n            this.onEnd(status);\n            this.ended = true;\n            return status === $2755faf0e26f783c$var$Z_OK$2;\n        }\n        // Flush if out buffer full\n        if (strm.avail_out === 0) {\n            this.onData(strm.output);\n            continue;\n        }\n        // Flush if requested and has data\n        if (_flush_mode > 0 && strm.next_out > 0) {\n            this.onData(strm.output.subarray(0, strm.next_out));\n            strm.avail_out = 0;\n            continue;\n        }\n        if (strm.avail_in === 0) break;\n    }\n    return true;\n};\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array): output data.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/ $2755faf0e26f783c$var$Deflate$1.prototype.onData = function(chunk) {\n    this.chunks.push(chunk);\n};\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/ $2755faf0e26f783c$var$Deflate$1.prototype.onEnd = function(status) {\n    // On success - join\n    if (status === $2755faf0e26f783c$var$Z_OK$2) this.result = $2755faf0e26f783c$var$common.flattenChunks(this.chunks);\n    this.chunks = [];\n    this.err = status;\n    this.msg = this.strm.msg;\n};\n/**\n * deflate(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/ function $2755faf0e26f783c$var$deflate$1(input, options) {\n    var deflator = new $2755faf0e26f783c$var$Deflate$1(options);\n    deflator.push(input, true);\n    // That will never happens, if you don't cheat with options :)\n    if (deflator.err) throw deflator.msg || $2755faf0e26f783c$var$messages[deflator.err];\n    return deflator.result;\n}\n/**\n * deflateRaw(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/ function $2755faf0e26f783c$var$deflateRaw$1(input, options) {\n    options = options || {};\n    options.raw = true;\n    return $2755faf0e26f783c$var$deflate$1(input, options);\n}\n/**\n * gzip(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/ function $2755faf0e26f783c$var$gzip$1(input, options) {\n    options = options || {};\n    options.gzip = true;\n    return $2755faf0e26f783c$var$deflate$1(input, options);\n}\nvar $2755faf0e26f783c$var$Deflate_1$1 = $2755faf0e26f783c$var$Deflate$1;\nvar $2755faf0e26f783c$var$deflate_2 = $2755faf0e26f783c$var$deflate$1;\nvar $2755faf0e26f783c$var$deflateRaw_1$1 = $2755faf0e26f783c$var$deflateRaw$1;\nvar $2755faf0e26f783c$var$gzip_1$1 = $2755faf0e26f783c$var$gzip$1;\nvar $2755faf0e26f783c$var$constants$1 = $2755faf0e26f783c$var$constants$2;\nvar $2755faf0e26f783c$var$deflate_1$1 = {\n    Deflate: $2755faf0e26f783c$var$Deflate_1$1,\n    deflate: $2755faf0e26f783c$var$deflate_2,\n    deflateRaw: $2755faf0e26f783c$var$deflateRaw_1$1,\n    gzip: $2755faf0e26f783c$var$gzip_1$1,\n    constants: $2755faf0e26f783c$var$constants$1\n};\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n// See state defs from inflate.js\nvar $2755faf0e26f783c$var$BAD$1 = 16209; /* got a data error -- remain here until reset */ \nvar $2755faf0e26f783c$var$TYPE$1 = 16191; /* i: waiting for type bits, including last-flag bit */ \n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */ var $2755faf0e26f783c$var$inffast = function inflate_fast(strm, start) {\n    var _in; /* local strm.input */ \n    var last; /* have enough input while in < last */ \n    var _out; /* local strm.output */ \n    var beg; /* inflate()'s initial strm.output */ \n    var end; /* while out < end, enough space available */ \n    //#ifdef INFLATE_STRICT\n    var dmax; /* maximum distance from zlib header */ \n    //#endif\n    var wsize; /* window size or zero if not using window */ \n    var whave; /* valid bytes in the window */ \n    var wnext; /* window write index */ \n    // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n    var s_window; /* allocated sliding window, if wsize != 0 */ \n    var hold; /* local strm.hold */ \n    var bits; /* local strm.bits */ \n    var lcode; /* local strm.lencode */ \n    var dcode; /* local strm.distcode */ \n    var lmask; /* mask for first level of length codes */ \n    var dmask; /* mask for first level of distance codes */ \n    var here; /* retrieved table entry */ \n    var op; /* code bits, operation, extra bits, or */ \n    /*  window position, window bytes to copy */ var len; /* match length, unused bytes */ \n    var dist; /* match distance */ \n    var from; /* where to copy match from */ \n    var from_source;\n    var input, output; // JS specific, because we have no pointers\n    /* copy state to local variables */ var state = strm.state;\n    //here = state.here;\n    _in = strm.next_in;\n    input = strm.input;\n    last = _in + (strm.avail_in - 5);\n    _out = strm.next_out;\n    output = strm.output;\n    beg = _out - (start - strm.avail_out);\n    end = _out + (strm.avail_out - 257);\n    //#ifdef INFLATE_STRICT\n    dmax = state.dmax;\n    //#endif\n    wsize = state.wsize;\n    whave = state.whave;\n    wnext = state.wnext;\n    s_window = state.window;\n    hold = state.hold;\n    bits = state.bits;\n    lcode = state.lencode;\n    dcode = state.distcode;\n    lmask = (1 << state.lenbits) - 1;\n    dmask = (1 << state.distbits) - 1;\n    /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */ top: do {\n        if (bits < 15) {\n            hold += input[_in++] << bits;\n            bits += 8;\n            hold += input[_in++] << bits;\n            bits += 8;\n        }\n        here = lcode[hold & lmask];\n        dolen: for(;;){\n            op = here >>> 24 /*here.bits*/ ;\n            hold >>>= op;\n            bits -= op;\n            op = here >>> 16 & 0xff /*here.op*/ ;\n            if (op === 0) //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n            //        \"inflate:         literal '%c'\\n\" :\n            //        \"inflate:         literal 0x%02x\\n\", here.val));\n            output[_out++] = here & 0xffff /*here.val*/ ;\n            else if (op & 16) {\n                len = here & 0xffff /*here.val*/ ;\n                op &= 15; /* number of extra bits */ \n                if (op) {\n                    if (bits < op) {\n                        hold += input[_in++] << bits;\n                        bits += 8;\n                    }\n                    len += hold & (1 << op) - 1;\n                    hold >>>= op;\n                    bits -= op;\n                }\n                //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n                if (bits < 15) {\n                    hold += input[_in++] << bits;\n                    bits += 8;\n                    hold += input[_in++] << bits;\n                    bits += 8;\n                }\n                here = dcode[hold & dmask];\n                dodist: for(;;){\n                    op = here >>> 24 /*here.bits*/ ;\n                    hold >>>= op;\n                    bits -= op;\n                    op = here >>> 16 & 0xff /*here.op*/ ;\n                    if (op & 16) {\n                        dist = here & 0xffff /*here.val*/ ;\n                        op &= 15; /* number of extra bits */ \n                        if (bits < op) {\n                            hold += input[_in++] << bits;\n                            bits += 8;\n                            if (bits < op) {\n                                hold += input[_in++] << bits;\n                                bits += 8;\n                            }\n                        }\n                        dist += hold & (1 << op) - 1;\n                        //#ifdef INFLATE_STRICT\n                        if (dist > dmax) {\n                            strm.msg = 'invalid distance too far back';\n                            state.mode = $2755faf0e26f783c$var$BAD$1;\n                            break top;\n                        }\n                        //#endif\n                        hold >>>= op;\n                        bits -= op;\n                        //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n                        op = _out - beg; /* max distance in output */ \n                        if (dist > op) {\n                            op = dist - op; /* distance back in window */ \n                            if (op > whave) {\n                                if (state.sane) {\n                                    strm.msg = 'invalid distance too far back';\n                                    state.mode = $2755faf0e26f783c$var$BAD$1;\n                                    break top;\n                                }\n                            }\n                            from = 0; // window index\n                            from_source = s_window;\n                            if (wnext === 0) {\n                                from += wsize - op;\n                                if (op < len) {\n                                    len -= op;\n                                    do output[_out++] = s_window[from++];\n                                    while (--op);\n                                    from = _out - dist; /* rest from output */ \n                                    from_source = output;\n                                }\n                            } else if (wnext < op) {\n                                from += wsize + wnext - op;\n                                op -= wnext;\n                                if (op < len) {\n                                    len -= op;\n                                    do output[_out++] = s_window[from++];\n                                    while (--op);\n                                    from = 0;\n                                    if (wnext < len) {\n                                        op = wnext;\n                                        len -= op;\n                                        do output[_out++] = s_window[from++];\n                                        while (--op);\n                                        from = _out - dist; /* rest from output */ \n                                        from_source = output;\n                                    }\n                                }\n                            } else {\n                                from += wnext - op;\n                                if (op < len) {\n                                    len -= op;\n                                    do output[_out++] = s_window[from++];\n                                    while (--op);\n                                    from = _out - dist; /* rest from output */ \n                                    from_source = output;\n                                }\n                            }\n                            while(len > 2){\n                                output[_out++] = from_source[from++];\n                                output[_out++] = from_source[from++];\n                                output[_out++] = from_source[from++];\n                                len -= 3;\n                            }\n                            if (len) {\n                                output[_out++] = from_source[from++];\n                                if (len > 1) output[_out++] = from_source[from++];\n                            }\n                        } else {\n                            from = _out - dist; /* copy direct from output */ \n                            do {\n                                output[_out++] = output[from++];\n                                output[_out++] = output[from++];\n                                output[_out++] = output[from++];\n                                len -= 3;\n                            }while (len > 2);\n                            if (len) {\n                                output[_out++] = output[from++];\n                                if (len > 1) output[_out++] = output[from++];\n                            }\n                        }\n                    } else if ((op & 64) === 0) {\n                        here = dcode[(here & 0xffff) + (hold & (1 << op) - 1)];\n                        continue dodist;\n                    } else {\n                        strm.msg = 'invalid distance code';\n                        state.mode = $2755faf0e26f783c$var$BAD$1;\n                        break top;\n                    }\n                    break; // need to emulate goto via \"continue\"\n                }\n            } else if ((op & 64) === 0) {\n                here = lcode[(here & 0xffff) + (hold & (1 << op) - 1)];\n                continue dolen;\n            } else if (op & 32) {\n                //Tracevv((stderr, \"inflate:         end of block\\n\"));\n                state.mode = $2755faf0e26f783c$var$TYPE$1;\n                break top;\n            } else {\n                strm.msg = 'invalid literal/length code';\n                state.mode = $2755faf0e26f783c$var$BAD$1;\n                break top;\n            }\n            break; // need to emulate goto via \"continue\"\n        }\n    }while (_in < last && _out < end);\n    /* return unused bytes (on entry, bits < 8, so in won't go too far back) */ len = bits >> 3;\n    _in -= len;\n    bits -= len << 3;\n    hold &= (1 << bits) - 1;\n    /* update state and return */ strm.next_in = _in;\n    strm.next_out = _out;\n    strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);\n    strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);\n    state.hold = hold;\n    state.bits = bits;\n    return;\n};\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nvar $2755faf0e26f783c$var$MAXBITS = 15;\nvar $2755faf0e26f783c$var$ENOUGH_LENS$1 = 852;\nvar $2755faf0e26f783c$var$ENOUGH_DISTS$1 = 592;\n//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\nvar $2755faf0e26f783c$var$CODES$1 = 0;\nvar $2755faf0e26f783c$var$LENS$1 = 1;\nvar $2755faf0e26f783c$var$DISTS$1 = 2;\nvar $2755faf0e26f783c$var$lbase = new Uint16Array([\n    /* Length codes 257..285 base */ 3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    13,\n    15,\n    17,\n    19,\n    23,\n    27,\n    31,\n    35,\n    43,\n    51,\n    59,\n    67,\n    83,\n    99,\n    115,\n    131,\n    163,\n    195,\n    227,\n    258,\n    0,\n    0\n]);\nvar $2755faf0e26f783c$var$lext = new Uint8Array([\n    /* Length codes 257..285 extra */ 16,\n    16,\n    16,\n    16,\n    16,\n    16,\n    16,\n    16,\n    17,\n    17,\n    17,\n    17,\n    18,\n    18,\n    18,\n    18,\n    19,\n    19,\n    19,\n    19,\n    20,\n    20,\n    20,\n    20,\n    21,\n    21,\n    21,\n    21,\n    16,\n    72,\n    78\n]);\nvar $2755faf0e26f783c$var$dbase = new Uint16Array([\n    /* Distance codes 0..29 base */ 1,\n    2,\n    3,\n    4,\n    5,\n    7,\n    9,\n    13,\n    17,\n    25,\n    33,\n    49,\n    65,\n    97,\n    129,\n    193,\n    257,\n    385,\n    513,\n    769,\n    1025,\n    1537,\n    2049,\n    3073,\n    4097,\n    6145,\n    8193,\n    12289,\n    16385,\n    24577,\n    0,\n    0\n]);\nvar $2755faf0e26f783c$var$dext = new Uint8Array([\n    /* Distance codes 0..29 extra */ 16,\n    16,\n    16,\n    16,\n    17,\n    17,\n    18,\n    18,\n    19,\n    19,\n    20,\n    20,\n    21,\n    21,\n    22,\n    22,\n    23,\n    23,\n    24,\n    24,\n    25,\n    25,\n    26,\n    26,\n    27,\n    27,\n    28,\n    28,\n    29,\n    29,\n    64,\n    64\n]);\nvar $2755faf0e26f783c$var$inflate_table = function(type, lens, lens_index, codes, table, table_index, work, opts) {\n    var bits = opts.bits;\n    //here = opts.here; /* table entry for duplication */\n    var len = 0; /* a code's length in bits */ \n    var sym = 0; /* index of code symbols */ \n    var min = 0, max = 0; /* minimum and maximum code lengths */ \n    var root = 0; /* number of index bits for root table */ \n    var curr = 0; /* number of index bits for current table */ \n    var drop = 0; /* code bits to drop for sub-table */ \n    var left = 0; /* number of prefix codes available */ \n    var used = 0; /* code entries in table used */ \n    var huff = 0; /* Huffman code */ \n    var incr; /* for incrementing code, index */ \n    var fill; /* index for replicating entries */ \n    var low; /* low bits for current root entry */ \n    var mask; /* mask for low root bits */ \n    var next; /* next available space in table */ \n    var base = null; /* base value table to use */ \n    //  let shoextra;    /* extra bits table to use */\n    var match; /* use base and extra for symbol >= match */ \n    var count = new Uint16Array($2755faf0e26f783c$var$MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n    var offs = new Uint16Array($2755faf0e26f783c$var$MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n    var extra = null;\n    var here_bits, here_op, here_val;\n    /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */ /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */ for(len = 0; len <= $2755faf0e26f783c$var$MAXBITS; len++)count[len] = 0;\n    for(sym = 0; sym < codes; sym++)count[lens[lens_index + sym]]++;\n    /* bound code lengths, force root to be within code lengths */ root = bits;\n    for(max = $2755faf0e26f783c$var$MAXBITS; max >= 1; max--){\n        if (count[max] !== 0) break;\n    }\n    if (root > max) root = max;\n    if (max === 0) {\n        //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n        //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n        //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n        table[table_index++] = 20971520;\n        //table.op[opts.table_index] = 64;\n        //table.bits[opts.table_index] = 1;\n        //table.val[opts.table_index++] = 0;\n        table[table_index++] = 20971520;\n        opts.bits = 1;\n        return 0; /* no symbols, but wait for decoding to report error */ \n    }\n    for(min = 1; min < max; min++){\n        if (count[min] !== 0) break;\n    }\n    if (root < min) root = min;\n    /* check for an over-subscribed or incomplete set of lengths */ left = 1;\n    for(len = 1; len <= $2755faf0e26f783c$var$MAXBITS; len++){\n        left <<= 1;\n        left -= count[len];\n        if (left < 0) return -1;\n         /* over-subscribed */ \n    }\n    if (left > 0 && (type === $2755faf0e26f783c$var$CODES$1 || max !== 1)) return -1; /* incomplete set */ \n    /* generate offsets into symbol table for each length for sorting */ offs[1] = 0;\n    for(len = 1; len < $2755faf0e26f783c$var$MAXBITS; len++)offs[len + 1] = offs[len] + count[len];\n    /* sort symbols by length, by symbol order within each length */ for(sym = 0; sym < codes; sym++)if (lens[lens_index + sym] !== 0) work[offs[lens[lens_index + sym]]++] = sym;\n    /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */ /* set up for code type */ // poor man optimization - use if-else instead of switch,\n    // to avoid deopts in old v8\n    if (type === $2755faf0e26f783c$var$CODES$1) {\n        base = extra = work; /* dummy value--not used */ \n        match = 20;\n    } else if (type === $2755faf0e26f783c$var$LENS$1) {\n        base = $2755faf0e26f783c$var$lbase;\n        extra = $2755faf0e26f783c$var$lext;\n        match = 257;\n    } else {\n        base = $2755faf0e26f783c$var$dbase;\n        extra = $2755faf0e26f783c$var$dext;\n        match = 0;\n    }\n    /* initialize opts for loop */ huff = 0; /* starting code */ \n    sym = 0; /* starting code symbol */ \n    len = min; /* starting code length */ \n    next = table_index; /* current table to fill in */ \n    curr = root; /* current table index bits */ \n    drop = 0; /* current bits to drop from code for index */ \n    low = -1; /* trigger new sub-table when len > root */ \n    used = 1 << root; /* use root table entries */ \n    mask = used - 1; /* mask for comparing low */ \n    /* check available table space */ if (type === $2755faf0e26f783c$var$LENS$1 && used > $2755faf0e26f783c$var$ENOUGH_LENS$1 || type === $2755faf0e26f783c$var$DISTS$1 && used > $2755faf0e26f783c$var$ENOUGH_DISTS$1) return 1;\n    /* process all codes and make table entries */ for(;;){\n        /* create table entry */ here_bits = len - drop;\n        if (work[sym] + 1 < match) {\n            here_op = 0;\n            here_val = work[sym];\n        } else if (work[sym] >= match) {\n            here_op = extra[work[sym] - match];\n            here_val = base[work[sym] - match];\n        } else {\n            here_op = 96; /* end of block */ \n            here_val = 0;\n        }\n        /* replicate for those indices with low len bits equal to huff */ incr = 1 << len - drop;\n        fill = 1 << curr;\n        min = fill; /* save offset to next table */ \n        do {\n            fill -= incr;\n            table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;\n        }while (fill !== 0);\n        /* backwards increment the len-bit code huff */ incr = 1 << len - 1;\n        while(huff & incr)incr >>= 1;\n        if (incr !== 0) {\n            huff &= incr - 1;\n            huff += incr;\n        } else huff = 0;\n        /* go to next symbol, update count, len */ sym++;\n        if (--count[len] === 0) {\n            if (len === max) break;\n            len = lens[lens_index + work[sym]];\n        }\n        /* create new sub-table if needed */ if (len > root && (huff & mask) !== low) {\n            /* if first time, transition to sub-tables */ if (drop === 0) drop = root;\n            /* increment past last table */ next += min; /* here min is 1 << curr */ \n            /* determine length of next table */ curr = len - drop;\n            left = 1 << curr;\n            while(curr + drop < max){\n                left -= count[curr + drop];\n                if (left <= 0) break;\n                curr++;\n                left <<= 1;\n            }\n            /* check for enough space */ used += 1 << curr;\n            if (type === $2755faf0e26f783c$var$LENS$1 && used > $2755faf0e26f783c$var$ENOUGH_LENS$1 || type === $2755faf0e26f783c$var$DISTS$1 && used > $2755faf0e26f783c$var$ENOUGH_DISTS$1) return 1;\n            /* point entry in root table to sub-table */ low = huff & mask;\n            /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/ table[low] = root << 24 | curr << 16 | next - table_index | 0;\n        }\n    }\n    /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */ if (huff !== 0) //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = len - drop << 24 | 4194304;\n    /* set return parameters */ //opts.table_index += used;\n    opts.bits = root;\n    return 0;\n};\nvar $2755faf0e26f783c$var$inftrees = $2755faf0e26f783c$var$inflate_table;\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nvar $2755faf0e26f783c$var$CODES = 0;\nvar $2755faf0e26f783c$var$LENS = 1;\nvar $2755faf0e26f783c$var$DISTS = 2;\n/* Public constants ==========================================================*/ /* ===========================================================================*/ var $2755faf0e26f783c$var$Z_FINISH$1 = $2755faf0e26f783c$var$constants$2.Z_FINISH, $2755faf0e26f783c$var$Z_BLOCK = $2755faf0e26f783c$var$constants$2.Z_BLOCK, $2755faf0e26f783c$var$Z_TREES = $2755faf0e26f783c$var$constants$2.Z_TREES, $2755faf0e26f783c$var$Z_OK$1 = $2755faf0e26f783c$var$constants$2.Z_OK, $2755faf0e26f783c$var$Z_STREAM_END$1 = $2755faf0e26f783c$var$constants$2.Z_STREAM_END, $2755faf0e26f783c$var$Z_NEED_DICT$1 = $2755faf0e26f783c$var$constants$2.Z_NEED_DICT, $2755faf0e26f783c$var$Z_STREAM_ERROR$1 = $2755faf0e26f783c$var$constants$2.Z_STREAM_ERROR, $2755faf0e26f783c$var$Z_DATA_ERROR$1 = $2755faf0e26f783c$var$constants$2.Z_DATA_ERROR, $2755faf0e26f783c$var$Z_MEM_ERROR$1 = $2755faf0e26f783c$var$constants$2.Z_MEM_ERROR, $2755faf0e26f783c$var$Z_BUF_ERROR = $2755faf0e26f783c$var$constants$2.Z_BUF_ERROR, $2755faf0e26f783c$var$Z_DEFLATED = $2755faf0e26f783c$var$constants$2.Z_DEFLATED;\n/* STATES ====================================================================*/ /* ===========================================================================*/ var $2755faf0e26f783c$var$HEAD = 16180; /* i: waiting for magic header */ \nvar $2755faf0e26f783c$var$FLAGS = 16181; /* i: waiting for method and flags (gzip) */ \nvar $2755faf0e26f783c$var$TIME = 16182; /* i: waiting for modification time (gzip) */ \nvar $2755faf0e26f783c$var$OS = 16183; /* i: waiting for extra flags and operating system (gzip) */ \nvar $2755faf0e26f783c$var$EXLEN = 16184; /* i: waiting for extra length (gzip) */ \nvar $2755faf0e26f783c$var$EXTRA = 16185; /* i: waiting for extra bytes (gzip) */ \nvar $2755faf0e26f783c$var$NAME = 16186; /* i: waiting for end of file name (gzip) */ \nvar $2755faf0e26f783c$var$COMMENT = 16187; /* i: waiting for end of comment (gzip) */ \nvar $2755faf0e26f783c$var$HCRC = 16188; /* i: waiting for header crc (gzip) */ \nvar $2755faf0e26f783c$var$DICTID = 16189; /* i: waiting for dictionary check value */ \nvar $2755faf0e26f783c$var$DICT = 16190; /* waiting for inflateSetDictionary() call */ \nvar $2755faf0e26f783c$var$TYPE = 16191; /* i: waiting for type bits, including last-flag bit */ \nvar $2755faf0e26f783c$var$TYPEDO = 16192; /* i: same, but skip check to exit inflate on new block */ \nvar $2755faf0e26f783c$var$STORED = 16193; /* i: waiting for stored size (length and complement) */ \nvar $2755faf0e26f783c$var$COPY_ = 16194; /* i/o: same as COPY below, but only first time in */ \nvar $2755faf0e26f783c$var$COPY = 16195; /* i/o: waiting for input or output to copy stored block */ \nvar $2755faf0e26f783c$var$TABLE = 16196; /* i: waiting for dynamic block table lengths */ \nvar $2755faf0e26f783c$var$LENLENS = 16197; /* i: waiting for code length code lengths */ \nvar $2755faf0e26f783c$var$CODELENS = 16198; /* i: waiting for length/lit and distance code lengths */ \nvar $2755faf0e26f783c$var$LEN_ = 16199; /* i: same as LEN below, but only first time in */ \nvar $2755faf0e26f783c$var$LEN = 16200; /* i: waiting for length/lit/eob code */ \nvar $2755faf0e26f783c$var$LENEXT = 16201; /* i: waiting for length extra bits */ \nvar $2755faf0e26f783c$var$DIST = 16202; /* i: waiting for distance code */ \nvar $2755faf0e26f783c$var$DISTEXT = 16203; /* i: waiting for distance extra bits */ \nvar $2755faf0e26f783c$var$MATCH = 16204; /* o: waiting for output space to copy string */ \nvar $2755faf0e26f783c$var$LIT = 16205; /* o: waiting for output space to write literal */ \nvar $2755faf0e26f783c$var$CHECK = 16206; /* i: waiting for 32-bit check value */ \nvar $2755faf0e26f783c$var$LENGTH = 16207; /* i: waiting for 32-bit length (gzip) */ \nvar $2755faf0e26f783c$var$DONE = 16208; /* finished check, done -- remain here until reset */ \nvar $2755faf0e26f783c$var$BAD = 16209; /* got a data error -- remain here until reset */ \nvar $2755faf0e26f783c$var$MEM = 16210; /* got an inflate() memory error -- remain here until reset */ \nvar $2755faf0e26f783c$var$SYNC = 16211; /* looking for synchronization bytes to restart inflate() */ \n/* ===========================================================================*/ var $2755faf0e26f783c$var$ENOUGH_LENS = 852;\nvar $2755faf0e26f783c$var$ENOUGH_DISTS = 592;\n//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\nvar $2755faf0e26f783c$var$MAX_WBITS = 15;\n/* 32K LZ77 window */ var $2755faf0e26f783c$var$DEF_WBITS = $2755faf0e26f783c$var$MAX_WBITS;\nvar $2755faf0e26f783c$var$zswap32 = function(q) {\n    return (q >>> 24 & 0xff) + (q >>> 8 & 0xff00) + ((q & 0xff00) << 8) + ((q & 0xff) << 24);\n};\nfunction $2755faf0e26f783c$var$InflateState() {\n    this.strm = null; /* pointer back to this zlib stream */ \n    this.mode = 0; /* current inflate mode */ \n    this.last = false; /* true if processing last block */ \n    this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip,\n                                 bit 2 true to validate check value */ \n    this.havedict = false; /* true if dictionary provided */ \n    this.flags = 0; /* gzip header method and flags (0 if zlib), or\n                                 -1 if raw or no header yet */ \n    this.dmax = 0; /* zlib header max distance (INFLATE_STRICT) */ \n    this.check = 0; /* protected copy of check value */ \n    this.total = 0; /* protected copy of output count */ \n    // TODO: may be {}\n    this.head = null; /* where to save gzip header information */ \n    /* sliding window */ this.wbits = 0; /* log base 2 of requested window size */ \n    this.wsize = 0; /* window size or zero if not using window */ \n    this.whave = 0; /* valid bytes in the window */ \n    this.wnext = 0; /* window write index */ \n    this.window = null; /* allocated sliding window, if needed */ \n    /* bit accumulator */ this.hold = 0; /* input bit accumulator */ \n    this.bits = 0; /* number of bits in \"in\" */ \n    /* for string and stored block copying */ this.length = 0; /* literal or length of data to copy */ \n    this.offset = 0; /* distance back to copy string from */ \n    /* for table and code decoding */ this.extra = 0; /* extra bits needed */ \n    /* fixed and dynamic code tables */ this.lencode = null; /* starting table for length/literal codes */ \n    this.distcode = null; /* starting table for distance codes */ \n    this.lenbits = 0; /* index bits for lencode */ \n    this.distbits = 0; /* index bits for distcode */ \n    /* dynamic table building */ this.ncode = 0; /* number of code length code lengths */ \n    this.nlen = 0; /* number of length code lengths */ \n    this.ndist = 0; /* number of distance code lengths */ \n    this.have = 0; /* number of code lengths in lens[] */ \n    this.next = null; /* next available space in codes[] */ \n    this.lens = new Uint16Array(320); /* temporary storage for code lengths */ \n    this.work = new Uint16Array(288); /* work area for code table building */ \n    /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */ //this.codes = new Int32Array(ENOUGH);       /* space for code tables */\n    this.lendyn = null; /* dynamic table for length/literal codes (JS specific) */ \n    this.distdyn = null; /* dynamic table for distance codes (JS specific) */ \n    this.sane = 0; /* if false, allow invalid distance too far */ \n    this.back = 0; /* bits back of last unprocessed length/lit */ \n    this.was = 0; /* initial length of match */ \n}\nvar $2755faf0e26f783c$var$inflateStateCheck = function(strm) {\n    if (!strm) return 1;\n    var state = strm.state;\n    if (!state || state.strm !== strm || state.mode < $2755faf0e26f783c$var$HEAD || state.mode > $2755faf0e26f783c$var$SYNC) return 1;\n    return 0;\n};\nvar $2755faf0e26f783c$var$inflateResetKeep = function(strm) {\n    if ($2755faf0e26f783c$var$inflateStateCheck(strm)) return $2755faf0e26f783c$var$Z_STREAM_ERROR$1;\n    var state = strm.state;\n    strm.total_in = strm.total_out = state.total = 0;\n    strm.msg = ''; /*Z_NULL*/ \n    if (state.wrap) strm.adler = state.wrap & 1;\n    state.mode = $2755faf0e26f783c$var$HEAD;\n    state.last = 0;\n    state.havedict = 0;\n    state.flags = -1;\n    state.dmax = 32768;\n    state.head = null /*Z_NULL*/ ;\n    state.hold = 0;\n    state.bits = 0;\n    //state.lencode = state.distcode = state.next = state.codes;\n    state.lencode = state.lendyn = new Int32Array($2755faf0e26f783c$var$ENOUGH_LENS);\n    state.distcode = state.distdyn = new Int32Array($2755faf0e26f783c$var$ENOUGH_DISTS);\n    state.sane = 1;\n    state.back = -1;\n    //Tracev((stderr, \"inflate: reset\\n\"));\n    return $2755faf0e26f783c$var$Z_OK$1;\n};\nvar $2755faf0e26f783c$var$inflateReset = function(strm) {\n    if ($2755faf0e26f783c$var$inflateStateCheck(strm)) return $2755faf0e26f783c$var$Z_STREAM_ERROR$1;\n    var state = strm.state;\n    state.wsize = 0;\n    state.whave = 0;\n    state.wnext = 0;\n    return $2755faf0e26f783c$var$inflateResetKeep(strm);\n};\nvar $2755faf0e26f783c$var$inflateReset2 = function(strm, windowBits) {\n    var wrap;\n    /* get the state */ if ($2755faf0e26f783c$var$inflateStateCheck(strm)) return $2755faf0e26f783c$var$Z_STREAM_ERROR$1;\n    var state = strm.state;\n    /* extract wrap request from windowBits parameter */ if (windowBits < 0) {\n        wrap = 0;\n        windowBits = -windowBits;\n    } else {\n        wrap = (windowBits >> 4) + 5;\n        if (windowBits < 48) windowBits &= 15;\n    }\n    /* set number of window bits, free window if different */ if (windowBits && (windowBits < 8 || windowBits > 15)) return $2755faf0e26f783c$var$Z_STREAM_ERROR$1;\n    if (state.window !== null && state.wbits !== windowBits) state.window = null;\n    /* update state and reset the rest of it */ state.wrap = wrap;\n    state.wbits = windowBits;\n    return $2755faf0e26f783c$var$inflateReset(strm);\n};\nvar $2755faf0e26f783c$var$inflateInit2 = function(strm, windowBits) {\n    if (!strm) return $2755faf0e26f783c$var$Z_STREAM_ERROR$1;\n    //strm.msg = Z_NULL;                 /* in case we return an error */\n    var state = new $2755faf0e26f783c$var$InflateState();\n    //if (state === Z_NULL) return Z_MEM_ERROR;\n    //Tracev((stderr, \"inflate: allocated\\n\"));\n    strm.state = state;\n    state.strm = strm;\n    state.window = null /*Z_NULL*/ ;\n    state.mode = $2755faf0e26f783c$var$HEAD; /* to pass state test in inflateReset2() */ \n    var ret = $2755faf0e26f783c$var$inflateReset2(strm, windowBits);\n    if (ret !== $2755faf0e26f783c$var$Z_OK$1) strm.state = null /*Z_NULL*/ ;\n    return ret;\n};\nvar $2755faf0e26f783c$var$inflateInit = function(strm) {\n    return $2755faf0e26f783c$var$inflateInit2(strm, $2755faf0e26f783c$var$DEF_WBITS);\n};\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */ var $2755faf0e26f783c$var$virgin = true;\nvar $2755faf0e26f783c$var$lenfix, $2755faf0e26f783c$var$distfix; // We have no pointers in JS, so keep tables separate\nvar $2755faf0e26f783c$var$fixedtables = function(state) {\n    /* build fixed huffman tables if first call (may not be thread safe) */ if ($2755faf0e26f783c$var$virgin) {\n        $2755faf0e26f783c$var$lenfix = new Int32Array(512);\n        $2755faf0e26f783c$var$distfix = new Int32Array(32);\n        /* literal/length table */ var sym = 0;\n        while(sym < 144)state.lens[sym++] = 8;\n        while(sym < 256)state.lens[sym++] = 9;\n        while(sym < 280)state.lens[sym++] = 7;\n        while(sym < 288)state.lens[sym++] = 8;\n        $2755faf0e26f783c$var$inftrees($2755faf0e26f783c$var$LENS, state.lens, 0, 288, $2755faf0e26f783c$var$lenfix, 0, state.work, {\n            bits: 9\n        });\n        /* distance table */ sym = 0;\n        while(sym < 32)state.lens[sym++] = 5;\n        $2755faf0e26f783c$var$inftrees($2755faf0e26f783c$var$DISTS, state.lens, 0, 32, $2755faf0e26f783c$var$distfix, 0, state.work, {\n            bits: 5\n        });\n        /* do this just once */ $2755faf0e26f783c$var$virgin = false;\n    }\n    state.lencode = $2755faf0e26f783c$var$lenfix;\n    state.lenbits = 9;\n    state.distcode = $2755faf0e26f783c$var$distfix;\n    state.distbits = 5;\n};\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */ var $2755faf0e26f783c$var$updatewindow = function(strm, src, end, copy) {\n    var dist;\n    var state = strm.state;\n    /* if it hasn't been done already, allocate space for the window */ if (state.window === null) {\n        state.wsize = 1 << state.wbits;\n        state.wnext = 0;\n        state.whave = 0;\n        state.window = new Uint8Array(state.wsize);\n    }\n    /* copy state->wsize or less output bytes into the circular window */ if (copy >= state.wsize) {\n        state.window.set(src.subarray(end - state.wsize, end), 0);\n        state.wnext = 0;\n        state.whave = state.wsize;\n    } else {\n        dist = state.wsize - state.wnext;\n        if (dist > copy) dist = copy;\n        //zmemcpy(state->window + state->wnext, end - copy, dist);\n        state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);\n        copy -= dist;\n        if (copy) {\n            //zmemcpy(state->window, end - copy, copy);\n            state.window.set(src.subarray(end - copy, end), 0);\n            state.wnext = copy;\n            state.whave = state.wsize;\n        } else {\n            state.wnext += dist;\n            if (state.wnext === state.wsize) state.wnext = 0;\n            if (state.whave < state.wsize) state.whave += dist;\n        }\n    }\n    return 0;\n};\nvar $2755faf0e26f783c$var$inflate$2 = function(strm, flush) {\n    var state;\n    var input, output; // input/output buffers\n    var next; /* next input INDEX */ \n    var put; /* next output INDEX */ \n    var have, left; /* available input and output */ \n    var hold; /* bit buffer */ \n    var bits; /* bits in bit buffer */ \n    var _in, _out; /* save starting available input and output */ \n    var copy; /* number of stored or match bytes to copy */ \n    var from; /* where to copy match bytes from */ \n    var from_source;\n    var here = 0; /* current decoding table entry */ \n    var here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n    //let last;                   /* parent table entry */\n    var last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n    var len; /* length to copy for repeats, bits to drop */ \n    var ret; /* return code */ \n    var hbuf = new Uint8Array(4); /* buffer for gzip header crc calculation */ \n    var opts;\n    var n; // temporary variable for NEED_BITS\n    var order = /* permutation of code lengths */ new Uint8Array([\n        16,\n        17,\n        18,\n        0,\n        8,\n        7,\n        9,\n        6,\n        10,\n        5,\n        11,\n        4,\n        12,\n        3,\n        13,\n        2,\n        14,\n        1,\n        15\n    ]);\n    if ($2755faf0e26f783c$var$inflateStateCheck(strm) || !strm.output || !strm.input && strm.avail_in !== 0) return $2755faf0e26f783c$var$Z_STREAM_ERROR$1;\n    state = strm.state;\n    if (state.mode === $2755faf0e26f783c$var$TYPE) state.mode = $2755faf0e26f783c$var$TYPEDO;\n     /* skip check */ \n    //--- LOAD() ---\n    put = strm.next_out;\n    output = strm.output;\n    left = strm.avail_out;\n    next = strm.next_in;\n    input = strm.input;\n    have = strm.avail_in;\n    hold = state.hold;\n    bits = state.bits;\n    //---\n    _in = have;\n    _out = left;\n    ret = $2755faf0e26f783c$var$Z_OK$1;\n    inf_leave: for(;;)switch(state.mode){\n        case $2755faf0e26f783c$var$HEAD:\n            if (state.wrap === 0) {\n                state.mode = $2755faf0e26f783c$var$TYPEDO;\n                break;\n            }\n            //=== NEEDBITS(16);\n            while(bits < 16){\n                if (have === 0) break inf_leave;\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n            }\n            //===//\n            if (state.wrap & 2 && hold === 0x8b1f) {\n                if (state.wbits === 0) state.wbits = 15;\n                state.check = 0 /*crc32(0L, Z_NULL, 0)*/ ;\n                //=== CRC2(state.check, hold);\n                hbuf[0] = hold & 0xff;\n                hbuf[1] = hold >>> 8 & 0xff;\n                state.check = $2755faf0e26f783c$var$crc32_1(state.check, hbuf, 2, 0);\n                //===//\n                //=== INITBITS();\n                hold = 0;\n                bits = 0;\n                //===//\n                state.mode = $2755faf0e26f783c$var$FLAGS;\n                break;\n            }\n            if (state.head) state.head.done = false;\n            if (!(state.wrap & 1) || /* check if zlib header allowed */ (((hold & 0xff) << 8) + (hold >> 8)) % 31) {\n                strm.msg = 'incorrect header check';\n                state.mode = $2755faf0e26f783c$var$BAD;\n                break;\n            }\n            if ((hold & 0x0f) !== $2755faf0e26f783c$var$Z_DEFLATED) {\n                strm.msg = 'unknown compression method';\n                state.mode = $2755faf0e26f783c$var$BAD;\n                break;\n            }\n            //--- DROPBITS(4) ---//\n            hold >>>= 4;\n            bits -= 4;\n            //---//\n            len = (hold & 0x0f) + 8;\n            if (state.wbits === 0) state.wbits = len;\n            if (len > 15 || len > state.wbits) {\n                strm.msg = 'invalid window size';\n                state.mode = $2755faf0e26f783c$var$BAD;\n                break;\n            }\n            // !!! pako patch. Force use `options.windowBits` if passed.\n            // Required to always use max window size by default.\n            state.dmax = 1 << state.wbits;\n            //state.dmax = 1 << len;\n            state.flags = 0; /* indicate zlib header */ \n            //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n            strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/ ;\n            state.mode = hold & 0x200 ? $2755faf0e26f783c$var$DICTID : $2755faf0e26f783c$var$TYPE;\n            //=== INITBITS();\n            hold = 0;\n            bits = 0;\n            break;\n        case $2755faf0e26f783c$var$FLAGS:\n            //=== NEEDBITS(16); */\n            while(bits < 16){\n                if (have === 0) break inf_leave;\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n            }\n            //===//\n            state.flags = hold;\n            if ((state.flags & 0xff) !== $2755faf0e26f783c$var$Z_DEFLATED) {\n                strm.msg = 'unknown compression method';\n                state.mode = $2755faf0e26f783c$var$BAD;\n                break;\n            }\n            if (state.flags & 0xe000) {\n                strm.msg = 'unknown header flags set';\n                state.mode = $2755faf0e26f783c$var$BAD;\n                break;\n            }\n            if (state.head) state.head.text = hold >> 8 & 1;\n            if (state.flags & 0x0200 && state.wrap & 4) {\n                //=== CRC2(state.check, hold);\n                hbuf[0] = hold & 0xff;\n                hbuf[1] = hold >>> 8 & 0xff;\n                state.check = $2755faf0e26f783c$var$crc32_1(state.check, hbuf, 2, 0);\n            //===//\n            }\n            //=== INITBITS();\n            hold = 0;\n            bits = 0;\n            //===//\n            state.mode = $2755faf0e26f783c$var$TIME;\n        /* falls through */ case $2755faf0e26f783c$var$TIME:\n            //=== NEEDBITS(32); */\n            while(bits < 32){\n                if (have === 0) break inf_leave;\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n            }\n            //===//\n            if (state.head) state.head.time = hold;\n            if (state.flags & 0x0200 && state.wrap & 4) {\n                //=== CRC4(state.check, hold)\n                hbuf[0] = hold & 0xff;\n                hbuf[1] = hold >>> 8 & 0xff;\n                hbuf[2] = hold >>> 16 & 0xff;\n                hbuf[3] = hold >>> 24 & 0xff;\n                state.check = $2755faf0e26f783c$var$crc32_1(state.check, hbuf, 4, 0);\n            //===\n            }\n            //=== INITBITS();\n            hold = 0;\n            bits = 0;\n            //===//\n            state.mode = $2755faf0e26f783c$var$OS;\n        /* falls through */ case $2755faf0e26f783c$var$OS:\n            //=== NEEDBITS(16); */\n            while(bits < 16){\n                if (have === 0) break inf_leave;\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n            }\n            //===//\n            if (state.head) {\n                state.head.xflags = hold & 0xff;\n                state.head.os = hold >> 8;\n            }\n            if (state.flags & 0x0200 && state.wrap & 4) {\n                //=== CRC2(state.check, hold);\n                hbuf[0] = hold & 0xff;\n                hbuf[1] = hold >>> 8 & 0xff;\n                state.check = $2755faf0e26f783c$var$crc32_1(state.check, hbuf, 2, 0);\n            //===//\n            }\n            //=== INITBITS();\n            hold = 0;\n            bits = 0;\n            //===//\n            state.mode = $2755faf0e26f783c$var$EXLEN;\n        /* falls through */ case $2755faf0e26f783c$var$EXLEN:\n            if (state.flags & 0x0400) {\n                //=== NEEDBITS(16); */\n                while(bits < 16){\n                    if (have === 0) break inf_leave;\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                state.length = hold;\n                if (state.head) state.head.extra_len = hold;\n                if (state.flags & 0x0200 && state.wrap & 4) {\n                    //=== CRC2(state.check, hold);\n                    hbuf[0] = hold & 0xff;\n                    hbuf[1] = hold >>> 8 & 0xff;\n                    state.check = $2755faf0e26f783c$var$crc32_1(state.check, hbuf, 2, 0);\n                //===//\n                }\n                //=== INITBITS();\n                hold = 0;\n                bits = 0;\n            //===//\n            } else if (state.head) state.head.extra = null /*Z_NULL*/ ;\n            state.mode = $2755faf0e26f783c$var$EXTRA;\n        /* falls through */ case $2755faf0e26f783c$var$EXTRA:\n            if (state.flags & 0x0400) {\n                copy = state.length;\n                if (copy > have) copy = have;\n                if (copy) {\n                    if (state.head) {\n                        len = state.head.extra_len - state.length;\n                        if (!state.head.extra) // Use untyped array for more convenient processing later\n                        state.head.extra = new Uint8Array(state.head.extra_len);\n                        state.head.extra.set(input.subarray(next, // extra field is limited to 65536 bytes\n                        // - no need for additional size check\n                        next + copy), /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/ len);\n                    //zmemcpy(state.head.extra + len, next,\n                    //        len + copy > state.head.extra_max ?\n                    //        state.head.extra_max - len : copy);\n                    }\n                    if (state.flags & 0x0200 && state.wrap & 4) state.check = $2755faf0e26f783c$var$crc32_1(state.check, input, copy, next);\n                    have -= copy;\n                    next += copy;\n                    state.length -= copy;\n                }\n                if (state.length) break inf_leave;\n            }\n            state.length = 0;\n            state.mode = $2755faf0e26f783c$var$NAME;\n        /* falls through */ case $2755faf0e26f783c$var$NAME:\n            if (state.flags & 0x0800) {\n                if (have === 0) break inf_leave;\n                copy = 0;\n                do {\n                    // TODO: 2 or 1 bytes?\n                    len = input[next + copy++];\n                    /* use constant limit because in js we should not preallocate memory */ if (state.head && len && state.length < 65536 /*state.head.name_max*/ ) state.head.name += String.fromCharCode(len);\n                }while (len && copy < have);\n                if (state.flags & 0x0200 && state.wrap & 4) state.check = $2755faf0e26f783c$var$crc32_1(state.check, input, copy, next);\n                have -= copy;\n                next += copy;\n                if (len) break inf_leave;\n            } else if (state.head) state.head.name = null;\n            state.length = 0;\n            state.mode = $2755faf0e26f783c$var$COMMENT;\n        /* falls through */ case $2755faf0e26f783c$var$COMMENT:\n            if (state.flags & 0x1000) {\n                if (have === 0) break inf_leave;\n                copy = 0;\n                do {\n                    len = input[next + copy++];\n                    /* use constant limit because in js we should not preallocate memory */ if (state.head && len && state.length < 65536 /*state.head.comm_max*/ ) state.head.comment += String.fromCharCode(len);\n                }while (len && copy < have);\n                if (state.flags & 0x0200 && state.wrap & 4) state.check = $2755faf0e26f783c$var$crc32_1(state.check, input, copy, next);\n                have -= copy;\n                next += copy;\n                if (len) break inf_leave;\n            } else if (state.head) state.head.comment = null;\n            state.mode = $2755faf0e26f783c$var$HCRC;\n        /* falls through */ case $2755faf0e26f783c$var$HCRC:\n            if (state.flags & 0x0200) {\n                //=== NEEDBITS(16); */\n                while(bits < 16){\n                    if (have === 0) break inf_leave;\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                if (state.wrap & 4 && hold !== (state.check & 0xffff)) {\n                    strm.msg = 'header crc mismatch';\n                    state.mode = $2755faf0e26f783c$var$BAD;\n                    break;\n                }\n                //=== INITBITS();\n                hold = 0;\n                bits = 0;\n            //===//\n            }\n            if (state.head) {\n                state.head.hcrc = state.flags >> 9 & 1;\n                state.head.done = true;\n            }\n            strm.adler = state.check = 0;\n            state.mode = $2755faf0e26f783c$var$TYPE;\n            break;\n        case $2755faf0e26f783c$var$DICTID:\n            //=== NEEDBITS(32); */\n            while(bits < 32){\n                if (have === 0) break inf_leave;\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n            }\n            //===//\n            strm.adler = state.check = $2755faf0e26f783c$var$zswap32(hold);\n            //=== INITBITS();\n            hold = 0;\n            bits = 0;\n            //===//\n            state.mode = $2755faf0e26f783c$var$DICT;\n        /* falls through */ case $2755faf0e26f783c$var$DICT:\n            if (state.havedict === 0) {\n                //--- RESTORE() ---\n                strm.next_out = put;\n                strm.avail_out = left;\n                strm.next_in = next;\n                strm.avail_in = have;\n                state.hold = hold;\n                state.bits = bits;\n                //---\n                return $2755faf0e26f783c$var$Z_NEED_DICT$1;\n            }\n            strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/ ;\n            state.mode = $2755faf0e26f783c$var$TYPE;\n        /* falls through */ case $2755faf0e26f783c$var$TYPE:\n            if (flush === $2755faf0e26f783c$var$Z_BLOCK || flush === $2755faf0e26f783c$var$Z_TREES) break inf_leave;\n        /* falls through */ case $2755faf0e26f783c$var$TYPEDO:\n            if (state.last) {\n                //--- BYTEBITS() ---//\n                hold >>>= bits & 7;\n                bits -= bits & 7;\n                //---//\n                state.mode = $2755faf0e26f783c$var$CHECK;\n                break;\n            }\n            //=== NEEDBITS(3); */\n            while(bits < 3){\n                if (have === 0) break inf_leave;\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n            }\n            //===//\n            state.last = hold & 0x01 /*BITS(1)*/ ;\n            //--- DROPBITS(1) ---//\n            hold >>>= 1;\n            bits -= 1;\n            //---//\n            switch(hold & 0x03){\n                case 0:\n                    /* stored block */ //Tracev((stderr, \"inflate:     stored block%s\\n\",\n                    //        state.last ? \" (last)\" : \"\"));\n                    state.mode = $2755faf0e26f783c$var$STORED;\n                    break;\n                case 1:\n                    /* fixed block */ $2755faf0e26f783c$var$fixedtables(state);\n                    //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n                    //        state.last ? \" (last)\" : \"\"));\n                    state.mode = $2755faf0e26f783c$var$LEN_; /* decode codes */ \n                    if (flush === $2755faf0e26f783c$var$Z_TREES) {\n                        //--- DROPBITS(2) ---//\n                        hold >>>= 2;\n                        bits -= 2;\n                        break inf_leave;\n                    }\n                    break;\n                case 2:\n                    /* dynamic block */ //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n                    //        state.last ? \" (last)\" : \"\"));\n                    state.mode = $2755faf0e26f783c$var$TABLE;\n                    break;\n                case 3:\n                    strm.msg = 'invalid block type';\n                    state.mode = $2755faf0e26f783c$var$BAD;\n            }\n            //--- DROPBITS(2) ---//\n            hold >>>= 2;\n            bits -= 2;\n            break;\n        case $2755faf0e26f783c$var$STORED:\n            //--- BYTEBITS() ---// /* go to byte boundary */\n            hold >>>= bits & 7;\n            bits -= bits & 7;\n            //---//\n            //=== NEEDBITS(32); */\n            while(bits < 32){\n                if (have === 0) break inf_leave;\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n            }\n            //===//\n            if ((hold & 0xffff) !== (hold >>> 16 ^ 0xffff)) {\n                strm.msg = 'invalid stored block lengths';\n                state.mode = $2755faf0e26f783c$var$BAD;\n                break;\n            }\n            state.length = hold & 0xffff;\n            //Tracev((stderr, \"inflate:       stored length %u\\n\",\n            //        state.length));\n            //=== INITBITS();\n            hold = 0;\n            bits = 0;\n            //===//\n            state.mode = $2755faf0e26f783c$var$COPY_;\n            if (flush === $2755faf0e26f783c$var$Z_TREES) break inf_leave;\n        /* falls through */ case $2755faf0e26f783c$var$COPY_:\n            state.mode = $2755faf0e26f783c$var$COPY;\n        /* falls through */ case $2755faf0e26f783c$var$COPY:\n            copy = state.length;\n            if (copy) {\n                if (copy > have) copy = have;\n                if (copy > left) copy = left;\n                if (copy === 0) break inf_leave;\n                //--- zmemcpy(put, next, copy); ---\n                output.set(input.subarray(next, next + copy), put);\n                //---//\n                have -= copy;\n                next += copy;\n                left -= copy;\n                put += copy;\n                state.length -= copy;\n                break;\n            }\n            //Tracev((stderr, \"inflate:       stored end\\n\"));\n            state.mode = $2755faf0e26f783c$var$TYPE;\n            break;\n        case $2755faf0e26f783c$var$TABLE:\n            //=== NEEDBITS(14); */\n            while(bits < 14){\n                if (have === 0) break inf_leave;\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n            }\n            //===//\n            state.nlen = (hold & 0x1f) + 257;\n            //--- DROPBITS(5) ---//\n            hold >>>= 5;\n            bits -= 5;\n            //---//\n            state.ndist = (hold & 0x1f) + 1;\n            //--- DROPBITS(5) ---//\n            hold >>>= 5;\n            bits -= 5;\n            //---//\n            state.ncode = (hold & 0x0f) + 4;\n            //--- DROPBITS(4) ---//\n            hold >>>= 4;\n            bits -= 4;\n            //---//\n            //#ifndef PKZIP_BUG_WORKAROUND\n            if (state.nlen > 286 || state.ndist > 30) {\n                strm.msg = 'too many length or distance symbols';\n                state.mode = $2755faf0e26f783c$var$BAD;\n                break;\n            }\n            //#endif\n            //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n            state.have = 0;\n            state.mode = $2755faf0e26f783c$var$LENLENS;\n        /* falls through */ case $2755faf0e26f783c$var$LENLENS:\n            while(state.have < state.ncode){\n                //=== NEEDBITS(3);\n                while(bits < 3){\n                    if (have === 0) break inf_leave;\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                state.lens[order[state.have++]] = hold & 0x07; //BITS(3);\n                //--- DROPBITS(3) ---//\n                hold >>>= 3;\n                bits -= 3;\n            //---//\n            }\n            while(state.have < 19)state.lens[order[state.have++]] = 0;\n            // We have separate tables & no pointers. 2 commented lines below not needed.\n            //state.next = state.codes;\n            //state.lencode = state.next;\n            // Switch to use dynamic table\n            state.lencode = state.lendyn;\n            state.lenbits = 7;\n            opts = {\n                bits: state.lenbits\n            };\n            ret = $2755faf0e26f783c$var$inftrees($2755faf0e26f783c$var$CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n            state.lenbits = opts.bits;\n            if (ret) {\n                strm.msg = 'invalid code lengths set';\n                state.mode = $2755faf0e26f783c$var$BAD;\n                break;\n            }\n            //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n            state.have = 0;\n            state.mode = $2755faf0e26f783c$var$CODELENS;\n        /* falls through */ case $2755faf0e26f783c$var$CODELENS:\n            while(state.have < state.nlen + state.ndist){\n                for(;;){\n                    here = state.lencode[hold & (1 << state.lenbits) - 1]; /*BITS(state.lenbits)*/ \n                    here_bits = here >>> 24;\n                    here_op = here >>> 16 & 0xff;\n                    here_val = here & 0xffff;\n                    if (here_bits <= bits) break;\n                    //--- PULLBYTE() ---//\n                    if (have === 0) break inf_leave;\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                //---//\n                }\n                if (here_val < 16) {\n                    //--- DROPBITS(here.bits) ---//\n                    hold >>>= here_bits;\n                    bits -= here_bits;\n                    //---//\n                    state.lens[state.have++] = here_val;\n                } else {\n                    if (here_val === 16) {\n                        //=== NEEDBITS(here.bits + 2);\n                        n = here_bits + 2;\n                        while(bits < n){\n                            if (have === 0) break inf_leave;\n                            have--;\n                            hold += input[next++] << bits;\n                            bits += 8;\n                        }\n                        //===//\n                        //--- DROPBITS(here.bits) ---//\n                        hold >>>= here_bits;\n                        bits -= here_bits;\n                        //---//\n                        if (state.have === 0) {\n                            strm.msg = 'invalid bit length repeat';\n                            state.mode = $2755faf0e26f783c$var$BAD;\n                            break;\n                        }\n                        len = state.lens[state.have - 1];\n                        copy = 3 + (hold & 0x03); //BITS(2);\n                        //--- DROPBITS(2) ---//\n                        hold >>>= 2;\n                        bits -= 2;\n                    //---//\n                    } else if (here_val === 17) {\n                        //=== NEEDBITS(here.bits + 3);\n                        n = here_bits + 3;\n                        while(bits < n){\n                            if (have === 0) break inf_leave;\n                            have--;\n                            hold += input[next++] << bits;\n                            bits += 8;\n                        }\n                        //===//\n                        //--- DROPBITS(here.bits) ---//\n                        hold >>>= here_bits;\n                        bits -= here_bits;\n                        //---//\n                        len = 0;\n                        copy = 3 + (hold & 0x07); //BITS(3);\n                        //--- DROPBITS(3) ---//\n                        hold >>>= 3;\n                        bits -= 3;\n                    //---//\n                    } else {\n                        //=== NEEDBITS(here.bits + 7);\n                        n = here_bits + 7;\n                        while(bits < n){\n                            if (have === 0) break inf_leave;\n                            have--;\n                            hold += input[next++] << bits;\n                            bits += 8;\n                        }\n                        //===//\n                        //--- DROPBITS(here.bits) ---//\n                        hold >>>= here_bits;\n                        bits -= here_bits;\n                        //---//\n                        len = 0;\n                        copy = 11 + (hold & 0x7f); //BITS(7);\n                        //--- DROPBITS(7) ---//\n                        hold >>>= 7;\n                        bits -= 7;\n                    //---//\n                    }\n                    if (state.have + copy > state.nlen + state.ndist) {\n                        strm.msg = 'invalid bit length repeat';\n                        state.mode = $2755faf0e26f783c$var$BAD;\n                        break;\n                    }\n                    while(copy--)state.lens[state.have++] = len;\n                }\n            }\n            /* handle error breaks in while */ if (state.mode === $2755faf0e26f783c$var$BAD) break;\n            /* check for end-of-block code (better have one) */ if (state.lens[256] === 0) {\n                strm.msg = 'invalid code -- missing end-of-block';\n                state.mode = $2755faf0e26f783c$var$BAD;\n                break;\n            }\n            /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */ state.lenbits = 9;\n            opts = {\n                bits: state.lenbits\n            };\n            ret = $2755faf0e26f783c$var$inftrees($2755faf0e26f783c$var$LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n            // We have separate tables & no pointers. 2 commented lines below not needed.\n            // state.next_index = opts.table_index;\n            state.lenbits = opts.bits;\n            // state.lencode = state.next;\n            if (ret) {\n                strm.msg = 'invalid literal/lengths set';\n                state.mode = $2755faf0e26f783c$var$BAD;\n                break;\n            }\n            state.distbits = 6;\n            //state.distcode.copy(state.codes);\n            // Switch to use dynamic table\n            state.distcode = state.distdyn;\n            opts = {\n                bits: state.distbits\n            };\n            ret = $2755faf0e26f783c$var$inftrees($2755faf0e26f783c$var$DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n            // We have separate tables & no pointers. 2 commented lines below not needed.\n            // state.next_index = opts.table_index;\n            state.distbits = opts.bits;\n            // state.distcode = state.next;\n            if (ret) {\n                strm.msg = 'invalid distances set';\n                state.mode = $2755faf0e26f783c$var$BAD;\n                break;\n            }\n            //Tracev((stderr, 'inflate:       codes ok\\n'));\n            state.mode = $2755faf0e26f783c$var$LEN_;\n            if (flush === $2755faf0e26f783c$var$Z_TREES) break inf_leave;\n        /* falls through */ case $2755faf0e26f783c$var$LEN_:\n            state.mode = $2755faf0e26f783c$var$LEN;\n        /* falls through */ case $2755faf0e26f783c$var$LEN:\n            if (have >= 6 && left >= 258) {\n                //--- RESTORE() ---\n                strm.next_out = put;\n                strm.avail_out = left;\n                strm.next_in = next;\n                strm.avail_in = have;\n                state.hold = hold;\n                state.bits = bits;\n                //---\n                $2755faf0e26f783c$var$inffast(strm, _out);\n                //--- LOAD() ---\n                put = strm.next_out;\n                output = strm.output;\n                left = strm.avail_out;\n                next = strm.next_in;\n                input = strm.input;\n                have = strm.avail_in;\n                hold = state.hold;\n                bits = state.bits;\n                //---\n                if (state.mode === $2755faf0e26f783c$var$TYPE) state.back = -1;\n                break;\n            }\n            state.back = 0;\n            for(;;){\n                here = state.lencode[hold & (1 << state.lenbits) - 1]; /*BITS(state.lenbits)*/ \n                here_bits = here >>> 24;\n                here_op = here >>> 16 & 0xff;\n                here_val = here & 0xffff;\n                if (here_bits <= bits) break;\n                //--- PULLBYTE() ---//\n                if (have === 0) break inf_leave;\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n            //---//\n            }\n            if (here_op && (here_op & 0xf0) === 0) {\n                last_bits = here_bits;\n                last_op = here_op;\n                last_val = here_val;\n                for(;;){\n                    here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];\n                    here_bits = here >>> 24;\n                    here_op = here >>> 16 & 0xff;\n                    here_val = here & 0xffff;\n                    if (last_bits + here_bits <= bits) break;\n                    //--- PULLBYTE() ---//\n                    if (have === 0) break inf_leave;\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                //---//\n                }\n                //--- DROPBITS(last.bits) ---//\n                hold >>>= last_bits;\n                bits -= last_bits;\n                //---//\n                state.back += last_bits;\n            }\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.back += here_bits;\n            state.length = here_val;\n            if (here_op === 0) {\n                //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n                //        \"inflate:         literal '%c'\\n\" :\n                //        \"inflate:         literal 0x%02x\\n\", here.val));\n                state.mode = $2755faf0e26f783c$var$LIT;\n                break;\n            }\n            if (here_op & 32) {\n                //Tracevv((stderr, \"inflate:         end of block\\n\"));\n                state.back = -1;\n                state.mode = $2755faf0e26f783c$var$TYPE;\n                break;\n            }\n            if (here_op & 64) {\n                strm.msg = 'invalid literal/length code';\n                state.mode = $2755faf0e26f783c$var$BAD;\n                break;\n            }\n            state.extra = here_op & 15;\n            state.mode = $2755faf0e26f783c$var$LENEXT;\n        /* falls through */ case $2755faf0e26f783c$var$LENEXT:\n            if (state.extra) {\n                //=== NEEDBITS(state.extra);\n                n = state.extra;\n                while(bits < n){\n                    if (have === 0) break inf_leave;\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                state.length += hold & (1 << state.extra) - 1 /*BITS(state.extra)*/ ;\n                //--- DROPBITS(state.extra) ---//\n                hold >>>= state.extra;\n                bits -= state.extra;\n                //---//\n                state.back += state.extra;\n            }\n            //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n            state.was = state.length;\n            state.mode = $2755faf0e26f783c$var$DIST;\n        /* falls through */ case $2755faf0e26f783c$var$DIST:\n            for(;;){\n                here = state.distcode[hold & (1 << state.distbits) - 1]; /*BITS(state.distbits)*/ \n                here_bits = here >>> 24;\n                here_op = here >>> 16 & 0xff;\n                here_val = here & 0xffff;\n                if (here_bits <= bits) break;\n                //--- PULLBYTE() ---//\n                if (have === 0) break inf_leave;\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n            //---//\n            }\n            if ((here_op & 0xf0) === 0) {\n                last_bits = here_bits;\n                last_op = here_op;\n                last_val = here_val;\n                for(;;){\n                    here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];\n                    here_bits = here >>> 24;\n                    here_op = here >>> 16 & 0xff;\n                    here_val = here & 0xffff;\n                    if (last_bits + here_bits <= bits) break;\n                    //--- PULLBYTE() ---//\n                    if (have === 0) break inf_leave;\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                //---//\n                }\n                //--- DROPBITS(last.bits) ---//\n                hold >>>= last_bits;\n                bits -= last_bits;\n                //---//\n                state.back += last_bits;\n            }\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.back += here_bits;\n            if (here_op & 64) {\n                strm.msg = 'invalid distance code';\n                state.mode = $2755faf0e26f783c$var$BAD;\n                break;\n            }\n            state.offset = here_val;\n            state.extra = here_op & 15;\n            state.mode = $2755faf0e26f783c$var$DISTEXT;\n        /* falls through */ case $2755faf0e26f783c$var$DISTEXT:\n            if (state.extra) {\n                //=== NEEDBITS(state.extra);\n                n = state.extra;\n                while(bits < n){\n                    if (have === 0) break inf_leave;\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                state.offset += hold & (1 << state.extra) - 1 /*BITS(state.extra)*/ ;\n                //--- DROPBITS(state.extra) ---//\n                hold >>>= state.extra;\n                bits -= state.extra;\n                //---//\n                state.back += state.extra;\n            }\n            //#ifdef INFLATE_STRICT\n            if (state.offset > state.dmax) {\n                strm.msg = 'invalid distance too far back';\n                state.mode = $2755faf0e26f783c$var$BAD;\n                break;\n            }\n            //#endif\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n            state.mode = $2755faf0e26f783c$var$MATCH;\n        /* falls through */ case $2755faf0e26f783c$var$MATCH:\n            if (left === 0) break inf_leave;\n            copy = _out - left;\n            if (state.offset > copy) {\n                copy = state.offset - copy;\n                if (copy > state.whave) {\n                    if (state.sane) {\n                        strm.msg = 'invalid distance too far back';\n                        state.mode = $2755faf0e26f783c$var$BAD;\n                        break;\n                    }\n                }\n                if (copy > state.wnext) {\n                    copy -= state.wnext;\n                    from = state.wsize - copy;\n                } else from = state.wnext - copy;\n                if (copy > state.length) copy = state.length;\n                from_source = state.window;\n            } else {\n                from_source = output;\n                from = put - state.offset;\n                copy = state.length;\n            }\n            if (copy > left) copy = left;\n            left -= copy;\n            state.length -= copy;\n            do output[put++] = from_source[from++];\n            while (--copy);\n            if (state.length === 0) state.mode = $2755faf0e26f783c$var$LEN;\n            break;\n        case $2755faf0e26f783c$var$LIT:\n            if (left === 0) break inf_leave;\n            output[put++] = state.length;\n            left--;\n            state.mode = $2755faf0e26f783c$var$LEN;\n            break;\n        case $2755faf0e26f783c$var$CHECK:\n            if (state.wrap) {\n                //=== NEEDBITS(32);\n                while(bits < 32){\n                    if (have === 0) break inf_leave;\n                    have--;\n                    // Use '|' instead of '+' to make sure that result is signed\n                    hold |= input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                _out -= left;\n                strm.total_out += _out;\n                state.total += _out;\n                if (state.wrap & 4 && _out) strm.adler = state.check = /*UPDATE_CHECK(state.check, put - _out, _out);*/ state.flags ? $2755faf0e26f783c$var$crc32_1(state.check, output, _out, put - _out) : $2755faf0e26f783c$var$adler32_1(state.check, output, _out, put - _out);\n                _out = left;\n                // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n                if (state.wrap & 4 && (state.flags ? hold : $2755faf0e26f783c$var$zswap32(hold)) !== state.check) {\n                    strm.msg = 'incorrect data check';\n                    state.mode = $2755faf0e26f783c$var$BAD;\n                    break;\n                }\n                //=== INITBITS();\n                hold = 0;\n                bits = 0;\n            //===//\n            //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n            }\n            state.mode = $2755faf0e26f783c$var$LENGTH;\n        /* falls through */ case $2755faf0e26f783c$var$LENGTH:\n            if (state.wrap && state.flags) {\n                //=== NEEDBITS(32);\n                while(bits < 32){\n                    if (have === 0) break inf_leave;\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                if (state.wrap & 4 && hold !== (state.total & 0xffffffff)) {\n                    strm.msg = 'incorrect length check';\n                    state.mode = $2755faf0e26f783c$var$BAD;\n                    break;\n                }\n                //=== INITBITS();\n                hold = 0;\n                bits = 0;\n            //===//\n            //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n            }\n            state.mode = $2755faf0e26f783c$var$DONE;\n        /* falls through */ case $2755faf0e26f783c$var$DONE:\n            ret = $2755faf0e26f783c$var$Z_STREAM_END$1;\n            break inf_leave;\n        case $2755faf0e26f783c$var$BAD:\n            ret = $2755faf0e26f783c$var$Z_DATA_ERROR$1;\n            break inf_leave;\n        case $2755faf0e26f783c$var$MEM:\n            return $2755faf0e26f783c$var$Z_MEM_ERROR$1;\n        case $2755faf0e26f783c$var$SYNC:\n        /* falls through */ default:\n            return $2755faf0e26f783c$var$Z_STREAM_ERROR$1;\n    }\n    // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n    /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */ //--- RESTORE() ---\n    strm.next_out = put;\n    strm.avail_out = left;\n    strm.next_in = next;\n    strm.avail_in = have;\n    state.hold = hold;\n    state.bits = bits;\n    //---\n    if (state.wsize || _out !== strm.avail_out && state.mode < $2755faf0e26f783c$var$BAD && (state.mode < $2755faf0e26f783c$var$CHECK || flush !== $2755faf0e26f783c$var$Z_FINISH$1)) $2755faf0e26f783c$var$updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out);\n    _in -= strm.avail_in;\n    _out -= strm.avail_out;\n    strm.total_in += _in;\n    strm.total_out += _out;\n    state.total += _out;\n    if (state.wrap & 4 && _out) strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/ state.flags ? $2755faf0e26f783c$var$crc32_1(state.check, output, _out, strm.next_out - _out) : $2755faf0e26f783c$var$adler32_1(state.check, output, _out, strm.next_out - _out);\n    strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === $2755faf0e26f783c$var$TYPE ? 128 : 0) + (state.mode === $2755faf0e26f783c$var$LEN_ || state.mode === $2755faf0e26f783c$var$COPY_ ? 256 : 0);\n    if ((_in === 0 && _out === 0 || flush === $2755faf0e26f783c$var$Z_FINISH$1) && ret === $2755faf0e26f783c$var$Z_OK$1) ret = $2755faf0e26f783c$var$Z_BUF_ERROR;\n    return ret;\n};\nvar $2755faf0e26f783c$var$inflateEnd = function(strm) {\n    if ($2755faf0e26f783c$var$inflateStateCheck(strm)) return $2755faf0e26f783c$var$Z_STREAM_ERROR$1;\n    var state = strm.state;\n    if (state.window) state.window = null;\n    strm.state = null;\n    return $2755faf0e26f783c$var$Z_OK$1;\n};\nvar $2755faf0e26f783c$var$inflateGetHeader = function(strm, head) {\n    /* check state */ if ($2755faf0e26f783c$var$inflateStateCheck(strm)) return $2755faf0e26f783c$var$Z_STREAM_ERROR$1;\n    var state = strm.state;\n    if ((state.wrap & 2) === 0) return $2755faf0e26f783c$var$Z_STREAM_ERROR$1;\n    /* save header structure */ state.head = head;\n    head.done = false;\n    return $2755faf0e26f783c$var$Z_OK$1;\n};\nvar $2755faf0e26f783c$var$inflateSetDictionary = function(strm, dictionary) {\n    var dictLength = dictionary.length;\n    var state;\n    var dictid;\n    var ret;\n    /* check state */ if ($2755faf0e26f783c$var$inflateStateCheck(strm)) return $2755faf0e26f783c$var$Z_STREAM_ERROR$1;\n    state = strm.state;\n    if (state.wrap !== 0 && state.mode !== $2755faf0e26f783c$var$DICT) return $2755faf0e26f783c$var$Z_STREAM_ERROR$1;\n    /* check for correct dictionary identifier */ if (state.mode === $2755faf0e26f783c$var$DICT) {\n        dictid = 1; /* adler32(0, null, 0)*/ \n        /* dictid = adler32(dictid, dictionary, dictLength); */ dictid = $2755faf0e26f783c$var$adler32_1(dictid, dictionary, dictLength, 0);\n        if (dictid !== state.check) return $2755faf0e26f783c$var$Z_DATA_ERROR$1;\n    }\n    /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */ ret = $2755faf0e26f783c$var$updatewindow(strm, dictionary, dictLength, dictLength);\n    if (ret) {\n        state.mode = $2755faf0e26f783c$var$MEM;\n        return $2755faf0e26f783c$var$Z_MEM_ERROR$1;\n    }\n    state.havedict = 1;\n    // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n    return $2755faf0e26f783c$var$Z_OK$1;\n};\nvar $2755faf0e26f783c$var$inflateReset_1 = $2755faf0e26f783c$var$inflateReset;\nvar $2755faf0e26f783c$var$inflateReset2_1 = $2755faf0e26f783c$var$inflateReset2;\nvar $2755faf0e26f783c$var$inflateResetKeep_1 = $2755faf0e26f783c$var$inflateResetKeep;\nvar $2755faf0e26f783c$var$inflateInit_1 = $2755faf0e26f783c$var$inflateInit;\nvar $2755faf0e26f783c$var$inflateInit2_1 = $2755faf0e26f783c$var$inflateInit2;\nvar $2755faf0e26f783c$var$inflate_2$1 = $2755faf0e26f783c$var$inflate$2;\nvar $2755faf0e26f783c$var$inflateEnd_1 = $2755faf0e26f783c$var$inflateEnd;\nvar $2755faf0e26f783c$var$inflateGetHeader_1 = $2755faf0e26f783c$var$inflateGetHeader;\nvar $2755faf0e26f783c$var$inflateSetDictionary_1 = $2755faf0e26f783c$var$inflateSetDictionary;\nvar $2755faf0e26f783c$var$inflateInfo = 'pako inflate (from Nodeca project)';\n/* Not implemented\nmodule.exports.inflateCodesUsed = inflateCodesUsed;\nmodule.exports.inflateCopy = inflateCopy;\nmodule.exports.inflateGetDictionary = inflateGetDictionary;\nmodule.exports.inflateMark = inflateMark;\nmodule.exports.inflatePrime = inflatePrime;\nmodule.exports.inflateSync = inflateSync;\nmodule.exports.inflateSyncPoint = inflateSyncPoint;\nmodule.exports.inflateUndermine = inflateUndermine;\nmodule.exports.inflateValidate = inflateValidate;\n*/ var $2755faf0e26f783c$var$inflate_1$2 = {\n    inflateReset: $2755faf0e26f783c$var$inflateReset_1,\n    inflateReset2: $2755faf0e26f783c$var$inflateReset2_1,\n    inflateResetKeep: $2755faf0e26f783c$var$inflateResetKeep_1,\n    inflateInit: $2755faf0e26f783c$var$inflateInit_1,\n    inflateInit2: $2755faf0e26f783c$var$inflateInit2_1,\n    inflate: $2755faf0e26f783c$var$inflate_2$1,\n    inflateEnd: $2755faf0e26f783c$var$inflateEnd_1,\n    inflateGetHeader: $2755faf0e26f783c$var$inflateGetHeader_1,\n    inflateSetDictionary: $2755faf0e26f783c$var$inflateSetDictionary_1,\n    inflateInfo: $2755faf0e26f783c$var$inflateInfo\n};\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nfunction $2755faf0e26f783c$var$GZheader() {\n    /* true if compressed data believed to be text */ this.text = 0;\n    /* modification time */ this.time = 0;\n    /* extra flags (not used when writing a gzip file) */ this.xflags = 0;\n    /* operating system */ this.os = 0;\n    /* pointer to extra field or Z_NULL if none */ this.extra = null;\n    /* extra field length (valid if extra != Z_NULL) */ this.extra_len = 0; // Actually, we don't need it in JS,\n    // but leave for few code modifications\n    //\n    // Setup limits is not necessary because in js we should not preallocate memory\n    // for inflate use constant limit in 65536 bytes\n    //\n    /* space at extra (only when reading header) */ // this.extra_max  = 0;\n    /* pointer to zero-terminated file name or Z_NULL */ this.name = '';\n    /* space at name (only when reading header) */ // this.name_max   = 0;\n    /* pointer to zero-terminated comment or Z_NULL */ this.comment = '';\n    /* space at comment (only when reading header) */ // this.comm_max   = 0;\n    /* true if there was or will be a header crc */ this.hcrc = 0;\n    /* true when done reading gzip header (not used when writing a gzip file) */ this.done = false;\n}\nvar $2755faf0e26f783c$var$gzheader = $2755faf0e26f783c$var$GZheader;\nvar $2755faf0e26f783c$var$toString = Object.prototype.toString;\n/* Public constants ==========================================================*/ /* ===========================================================================*/ var $2755faf0e26f783c$var$Z_NO_FLUSH = $2755faf0e26f783c$var$constants$2.Z_NO_FLUSH, $2755faf0e26f783c$var$Z_FINISH = $2755faf0e26f783c$var$constants$2.Z_FINISH, $2755faf0e26f783c$var$Z_OK = $2755faf0e26f783c$var$constants$2.Z_OK, $2755faf0e26f783c$var$Z_STREAM_END = $2755faf0e26f783c$var$constants$2.Z_STREAM_END, $2755faf0e26f783c$var$Z_NEED_DICT = $2755faf0e26f783c$var$constants$2.Z_NEED_DICT, $2755faf0e26f783c$var$Z_STREAM_ERROR = $2755faf0e26f783c$var$constants$2.Z_STREAM_ERROR, $2755faf0e26f783c$var$Z_DATA_ERROR = $2755faf0e26f783c$var$constants$2.Z_DATA_ERROR, $2755faf0e26f783c$var$Z_MEM_ERROR = $2755faf0e26f783c$var$constants$2.Z_MEM_ERROR;\n/* ===========================================================================*/ /**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/ /* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/ /**\n * Inflate.result -> Uint8Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param).\n **/ /**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/ /**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/ /**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/ function $2755faf0e26f783c$var$Inflate$1(options) {\n    this.options = $2755faf0e26f783c$var$common.assign({\n        chunkSize: 65536,\n        windowBits: 15,\n        to: ''\n    }, options || {});\n    var opt = this.options;\n    // Force window size for `raw` data, if not set directly,\n    // because we have no header for autodetect.\n    if (opt.raw && opt.windowBits >= 0 && opt.windowBits < 16) {\n        opt.windowBits = -opt.windowBits;\n        if (opt.windowBits === 0) opt.windowBits = -15;\n    }\n    // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n    if (opt.windowBits >= 0 && opt.windowBits < 16 && !(options && options.windowBits)) opt.windowBits += 32;\n    // Gzip header has no info about windows size, we can do autodetect only\n    // for deflate. So, if window size not set, force it to max when gzip possible\n    if (opt.windowBits > 15 && opt.windowBits < 48) // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    {\n        if ((opt.windowBits & 15) === 0) opt.windowBits |= 15;\n    }\n    this.err = 0; // error code, if happens (0 = Z_OK)\n    this.msg = ''; // error message\n    this.ended = false; // used to avoid multiple onEnd() calls\n    this.chunks = []; // chunks of compressed data\n    this.strm = new $2755faf0e26f783c$var$zstream();\n    this.strm.avail_out = 0;\n    var status = $2755faf0e26f783c$var$inflate_1$2.inflateInit2(this.strm, opt.windowBits);\n    if (status !== $2755faf0e26f783c$var$Z_OK) throw new Error($2755faf0e26f783c$var$messages[status]);\n    this.header = new $2755faf0e26f783c$var$gzheader();\n    $2755faf0e26f783c$var$inflate_1$2.inflateGetHeader(this.strm, this.header);\n    // Setup dictionary\n    if (opt.dictionary) {\n        // Convert data if needed\n        if (typeof opt.dictionary === 'string') opt.dictionary = $2755faf0e26f783c$var$strings.string2buf(opt.dictionary);\n        else if ($2755faf0e26f783c$var$toString.call(opt.dictionary) === '[object ArrayBuffer]') opt.dictionary = new Uint8Array(opt.dictionary);\n        if (opt.raw) {\n            status = $2755faf0e26f783c$var$inflate_1$2.inflateSetDictionary(this.strm, opt.dictionary);\n            if (status !== $2755faf0e26f783c$var$Z_OK) throw new Error($2755faf0e26f783c$var$messages[status]);\n        }\n    }\n}\n/**\n * Inflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer): input data\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE\n *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,\n *   `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. If end of stream detected,\n * [[Inflate#onEnd]] will be called.\n *\n * `flush_mode` is not needed for normal operation, because end of stream\n * detected automatically. You may try to use it for advanced things, but\n * this functionality was not tested.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/ $2755faf0e26f783c$var$Inflate$1.prototype.push = function(data, flush_mode) {\n    var strm = this.strm;\n    var chunkSize = this.options.chunkSize;\n    var dictionary = this.options.dictionary;\n    var status, _flush_mode, last_avail_out;\n    if (this.ended) return false;\n    if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n    else _flush_mode = flush_mode === true ? $2755faf0e26f783c$var$Z_FINISH : $2755faf0e26f783c$var$Z_NO_FLUSH;\n    // Convert data if needed\n    if ($2755faf0e26f783c$var$toString.call(data) === '[object ArrayBuffer]') strm.input = new Uint8Array(data);\n    else strm.input = data;\n    strm.next_in = 0;\n    strm.avail_in = strm.input.length;\n    for(;;){\n        if (strm.avail_out === 0) {\n            strm.output = new Uint8Array(chunkSize);\n            strm.next_out = 0;\n            strm.avail_out = chunkSize;\n        }\n        status = $2755faf0e26f783c$var$inflate_1$2.inflate(strm, _flush_mode);\n        if (status === $2755faf0e26f783c$var$Z_NEED_DICT && dictionary) {\n            status = $2755faf0e26f783c$var$inflate_1$2.inflateSetDictionary(strm, dictionary);\n            if (status === $2755faf0e26f783c$var$Z_OK) status = $2755faf0e26f783c$var$inflate_1$2.inflate(strm, _flush_mode);\n            else if (status === $2755faf0e26f783c$var$Z_DATA_ERROR) // Replace code with more verbose\n            status = $2755faf0e26f783c$var$Z_NEED_DICT;\n        }\n        // Skip snyc markers if more data follows and not raw mode\n        while(strm.avail_in > 0 && status === $2755faf0e26f783c$var$Z_STREAM_END && strm.state.wrap > 0 && data[strm.next_in] !== 0){\n            $2755faf0e26f783c$var$inflate_1$2.inflateReset(strm);\n            status = $2755faf0e26f783c$var$inflate_1$2.inflate(strm, _flush_mode);\n        }\n        switch(status){\n            case $2755faf0e26f783c$var$Z_STREAM_ERROR:\n            case $2755faf0e26f783c$var$Z_DATA_ERROR:\n            case $2755faf0e26f783c$var$Z_NEED_DICT:\n            case $2755faf0e26f783c$var$Z_MEM_ERROR:\n                this.onEnd(status);\n                this.ended = true;\n                return false;\n        }\n        // Remember real `avail_out` value, because we may patch out buffer content\n        // to align utf8 strings boundaries.\n        last_avail_out = strm.avail_out;\n        if (strm.next_out) {\n            if (strm.avail_out === 0 || status === $2755faf0e26f783c$var$Z_STREAM_END) {\n                if (this.options.to === 'string') {\n                    var next_out_utf8 = $2755faf0e26f783c$var$strings.utf8border(strm.output, strm.next_out);\n                    var tail = strm.next_out - next_out_utf8;\n                    var utf8str = $2755faf0e26f783c$var$strings.buf2string(strm.output, next_out_utf8);\n                    // move tail & realign counters\n                    strm.next_out = tail;\n                    strm.avail_out = chunkSize - tail;\n                    if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);\n                    this.onData(utf8str);\n                } else this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));\n            }\n        }\n        // Must repeat iteration if out buffer is full\n        if (status === $2755faf0e26f783c$var$Z_OK && last_avail_out === 0) continue;\n        // Finalize if end of stream reached.\n        if (status === $2755faf0e26f783c$var$Z_STREAM_END) {\n            status = $2755faf0e26f783c$var$inflate_1$2.inflateEnd(this.strm);\n            this.onEnd(status);\n            this.ended = true;\n            return true;\n        }\n        if (strm.avail_in === 0) break;\n    }\n    return true;\n};\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|String): output data. When string output requested,\n *   each chunk will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/ $2755faf0e26f783c$var$Inflate$1.prototype.onData = function(chunk) {\n    this.chunks.push(chunk);\n};\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/ $2755faf0e26f783c$var$Inflate$1.prototype.onEnd = function(status) {\n    // On success - join\n    if (status === $2755faf0e26f783c$var$Z_OK) {\n        if (this.options.to === 'string') this.result = this.chunks.join('');\n        else this.result = $2755faf0e26f783c$var$common.flattenChunks(this.chunks);\n    }\n    this.chunks = [];\n    this.err = status;\n    this.msg = this.strm.msg;\n};\n/**\n * inflate(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako');\n * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));\n * let output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err) {\n *   console.log(err);\n * }\n * ```\n **/ function $2755faf0e26f783c$var$inflate$1(input, options) {\n    var inflator = new $2755faf0e26f783c$var$Inflate$1(options);\n    inflator.push(input);\n    // That will never happens, if you don't cheat with options :)\n    if (inflator.err) throw inflator.msg || $2755faf0e26f783c$var$messages[inflator.err];\n    return inflator.result;\n}\n/**\n * inflateRaw(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/ function $2755faf0e26f783c$var$inflateRaw$1(input, options) {\n    options = options || {};\n    options.raw = true;\n    return $2755faf0e26f783c$var$inflate$1(input, options);\n}\n/**\n * ungzip(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/ var $2755faf0e26f783c$var$Inflate_1$1 = $2755faf0e26f783c$var$Inflate$1;\nvar $2755faf0e26f783c$var$inflate_2 = $2755faf0e26f783c$var$inflate$1;\nvar $2755faf0e26f783c$var$inflateRaw_1$1 = $2755faf0e26f783c$var$inflateRaw$1;\nvar $2755faf0e26f783c$var$ungzip$1 = $2755faf0e26f783c$var$inflate$1;\nvar $2755faf0e26f783c$var$constants = $2755faf0e26f783c$var$constants$2;\nvar $2755faf0e26f783c$var$inflate_1$1 = {\n    Inflate: $2755faf0e26f783c$var$Inflate_1$1,\n    inflate: $2755faf0e26f783c$var$inflate_2,\n    inflateRaw: $2755faf0e26f783c$var$inflateRaw_1$1,\n    ungzip: $2755faf0e26f783c$var$ungzip$1,\n    constants: $2755faf0e26f783c$var$constants\n};\nvar $2755faf0e26f783c$var$Deflate = $2755faf0e26f783c$var$deflate_1$1.Deflate, $2755faf0e26f783c$var$deflate = $2755faf0e26f783c$var$deflate_1$1.deflate, $2755faf0e26f783c$var$deflateRaw = $2755faf0e26f783c$var$deflate_1$1.deflateRaw, $2755faf0e26f783c$var$gzip = $2755faf0e26f783c$var$deflate_1$1.gzip;\nvar $2755faf0e26f783c$var$Inflate = $2755faf0e26f783c$var$inflate_1$1.Inflate, $2755faf0e26f783c$var$inflate = $2755faf0e26f783c$var$inflate_1$1.inflate, $2755faf0e26f783c$var$inflateRaw = $2755faf0e26f783c$var$inflate_1$1.inflateRaw, $2755faf0e26f783c$var$ungzip = $2755faf0e26f783c$var$inflate_1$1.ungzip;\nvar $2755faf0e26f783c$export$ae157b6234afe138 = $2755faf0e26f783c$var$Deflate;\nvar $2755faf0e26f783c$export$2316623ecd1285ab = $2755faf0e26f783c$var$deflate;\nvar $2755faf0e26f783c$export$e95d6a8f69fb340a = $2755faf0e26f783c$var$deflateRaw;\nvar $2755faf0e26f783c$export$69f0ea7cf3a331a8 = $2755faf0e26f783c$var$gzip;\nvar $2755faf0e26f783c$export$d1de70a877d6e43c = $2755faf0e26f783c$var$Inflate;\nvar $2755faf0e26f783c$export$cae1ce83fe4a1782 = $2755faf0e26f783c$var$inflate;\nvar $2755faf0e26f783c$export$d0f0aa2d05c905c5 = $2755faf0e26f783c$var$inflateRaw;\nvar $2755faf0e26f783c$export$95adf9d270383091 = $2755faf0e26f783c$var$ungzip;\nvar $2755faf0e26f783c$export$1a988e7317c65621 = $2755faf0e26f783c$var$constants$2;\nvar $2755faf0e26f783c$export$2e2bcd8739ae039 = {\n    Deflate: $2755faf0e26f783c$export$ae157b6234afe138,\n    deflate: $2755faf0e26f783c$export$2316623ecd1285ab,\n    deflateRaw: $2755faf0e26f783c$export$e95d6a8f69fb340a,\n    gzip: $2755faf0e26f783c$export$69f0ea7cf3a331a8,\n    Inflate: $2755faf0e26f783c$export$d1de70a877d6e43c,\n    inflate: $2755faf0e26f783c$export$cae1ce83fe4a1782,\n    inflateRaw: $2755faf0e26f783c$export$d0f0aa2d05c905c5,\n    ungzip: $2755faf0e26f783c$export$95adf9d270383091,\n    constants: $2755faf0e26f783c$export$1a988e7317c65621\n};\n\n});\n\n\nparcelRegister(\"cAUqy\", function(module, exports) {\n\"use strict\";\nvar $92b49e225bf9343c$var$__assign = module.exports && module.exports.__assign || function() {\n    $92b49e225bf9343c$var$__assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return $92b49e225bf9343c$var$__assign.apply(this, arguments);\n};\nObject.defineProperty(module.exports, \"__esModule\", {\n    value: true\n});\nmodule.exports.hasMultiEffects = module.exports.readVectorMask = module.exports.booleanOperations = module.exports.readBezierKnot = module.exports.infoHandlersMap = module.exports.infoHandlers = void 0;\n\nvar $jWkTT = parcelRequire(\"jWkTT\");\n\nvar $26rz6 = parcelRequire(\"26rz6\");\n\nvar $jE67M = parcelRequire(\"jE67M\");\n\nvar $5OPaf = parcelRequire(\"5OPaf\");\n\nvar $kCSTH = parcelRequire(\"kCSTH\");\n\nvar $klnll = parcelRequire(\"klnll\");\n\nvar $2TM27 = parcelRequire(\"2TM27\");\n\nvar $6rQPt = parcelRequire(\"6rQPt\");\n\nvar $duoIX = parcelRequire(\"duoIX\");\nvar $92b49e225bf9343c$var$fromAtoZ = 'abcdefghijklmnopqrstuvwxyz';\nmodule.exports.infoHandlers = [];\nmodule.exports.infoHandlersMap = {};\nfunction $92b49e225bf9343c$var$addHandler(key, has, read, write) {\n    var handler = {\n        key: key,\n        has: has,\n        read: read,\n        write: write\n    };\n    module.exports.infoHandlers.push(handler);\n    module.exports.infoHandlersMap[handler.key] = handler;\n}\nfunction $92b49e225bf9343c$var$addHandlerAlias(key, target) {\n    module.exports.infoHandlersMap[key] = module.exports.infoHandlersMap[target];\n}\nfunction $92b49e225bf9343c$var$hasKey(key) {\n    return function(target) {\n        return target[key] !== undefined;\n    };\n}\nfunction $92b49e225bf9343c$var$readLength64(reader) {\n    if ((0, $5OPaf.readUint32)(reader)) throw new Error(\"Resource size above 4 GB limit at \".concat(reader.offset.toString(16)));\n    return (0, $5OPaf.readUint32)(reader);\n}\nfunction $92b49e225bf9343c$var$writeLength64(writer, length) {\n    (0, $kCSTH.writeUint32)(writer, 0);\n    (0, $kCSTH.writeUint32)(writer, length);\n}\n$92b49e225bf9343c$var$addHandler('TySh', $92b49e225bf9343c$var$hasKey('text'), function(reader, target, leftBytes) {\n    if ((0, $5OPaf.readInt16)(reader) !== 1) throw new Error(\"Invalid TySh version\");\n    var transform = [];\n    for(var i = 0; i < 6; i++)transform.push((0, $5OPaf.readFloat64)(reader));\n    if ((0, $5OPaf.readInt16)(reader) !== 50) throw new Error(\"Invalid TySh text version\");\n    var text = (0, $klnll.readVersionAndDescriptor)(reader);\n    // console.log(require('util').inspect(text, false, 99, false), 'utf8');\n    if ((0, $5OPaf.readInt16)(reader) !== 1) throw new Error(\"Invalid TySh warp version\");\n    var warp = (0, $klnll.readVersionAndDescriptor)(reader);\n    // console.log(require('util').inspect(warp, false, 99, false), 'utf8');\n    target.text = {\n        transform: transform,\n        left: (0, $5OPaf.readFloat32)(reader),\n        top: (0, $5OPaf.readFloat32)(reader),\n        right: (0, $5OPaf.readFloat32)(reader),\n        bottom: (0, $5OPaf.readFloat32)(reader),\n        text: text['Txt '].replace(/\\r/g, '\\n'),\n        index: text.TextIndex || 0,\n        gridding: $klnll.textGridding.decode(text.textGridding),\n        antiAlias: $klnll.Annt.decode(text.AntA),\n        orientation: $klnll.Ornt.decode(text.Ornt),\n        warp: {\n            style: $klnll.warpStyle.decode(warp.warpStyle),\n            value: warp.warpValue || 0,\n            perspective: warp.warpPerspective || 0,\n            perspectiveOther: warp.warpPerspectiveOther || 0,\n            rotate: $klnll.Ornt.decode(warp.warpRotate)\n        }\n    };\n    if (text.bounds) target.text.bounds = (0, $klnll.descBoundsToBounds)(text.bounds);\n    if (text.boundingBox) target.text.boundingBox = (0, $klnll.descBoundsToBounds)(text.boundingBox);\n    if (text.EngineData) {\n        var engineData = (0, $2TM27.parseEngineData)(text.EngineData);\n        var textData = (0, $6rQPt.decodeEngineData)(engineData);\n        // console.log(require('util').inspect(engineData, false, 99, false), 'utf8');\n        // require('fs').writeFileSync(`layer-${target.name}.txt`, require('util').inspect(engineData, false, 99, false), 'utf8');\n        // const before = parseEngineData(text.EngineData);\n        // const after = encodeEngineData(engineData);\n        // require('fs').writeFileSync('before.txt', require('util').inspect(before, false, 99, false), 'utf8');\n        // require('fs').writeFileSync('after.txt', require('util').inspect(after, false, 99, false), 'utf8');\n        // console.log(require('util').inspect(parseEngineData(text.EngineData), false, 99, true));\n        target.text = $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, target.text), textData);\n    // console.log(require('util').inspect(target.text, false, 99, true));\n    }\n    (0, $5OPaf.skipBytes)(reader, leftBytes());\n}, function(writer, target) {\n    var text = target.text;\n    var warp = text.warp || {};\n    var transform = text.transform || [\n        1,\n        0,\n        0,\n        1,\n        0,\n        0\n    ];\n    var textDescriptor = $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({\n        'Txt ': (text.text || '').replace(/\\r?\\n/g, '\\r'),\n        textGridding: $klnll.textGridding.encode(text.gridding),\n        Ornt: $klnll.Ornt.encode(text.orientation),\n        AntA: $klnll.Annt.encode(text.antiAlias)\n    }, text.bounds ? {\n        bounds: (0, $klnll.boundsToDescBounds)(text.bounds)\n    } : {}), text.boundingBox ? {\n        boundingBox: (0, $klnll.boundsToDescBounds)(text.boundingBox)\n    } : {}), {\n        TextIndex: text.index || 0,\n        EngineData: (0, $2TM27.serializeEngineData)((0, $6rQPt.encodeEngineData)(text))\n    });\n    (0, $kCSTH.writeInt16)(writer, 1); // version\n    for(var i = 0; i < 6; i++)(0, $kCSTH.writeFloat64)(writer, transform[i]);\n    (0, $kCSTH.writeInt16)(writer, 50); // text version\n    (0, $klnll.writeVersionAndDescriptor)(writer, '', 'TxLr', textDescriptor, 'text');\n    (0, $kCSTH.writeInt16)(writer, 1); // warp version\n    (0, $klnll.writeVersionAndDescriptor)(writer, '', 'warp', $92b49e225bf9343c$var$encodeWarp(warp));\n    (0, $kCSTH.writeFloat32)(writer, text.left);\n    (0, $kCSTH.writeFloat32)(writer, text.top);\n    (0, $kCSTH.writeFloat32)(writer, text.right);\n    (0, $kCSTH.writeFloat32)(writer, text.bottom);\n// writeZeros(writer, 2);\n});\n// vector fills\n$92b49e225bf9343c$var$addHandler('SoCo', function(target) {\n    return target.vectorFill !== undefined && target.vectorStroke === undefined && target.vectorFill.type === 'color';\n}, function(reader, target) {\n    var descriptor = (0, $klnll.readVersionAndDescriptor)(reader);\n    target.vectorFill = (0, $klnll.parseVectorContent)(descriptor);\n}, function(writer, target) {\n    var descriptor = (0, $klnll.serializeVectorContent)(target.vectorFill).descriptor;\n    (0, $klnll.writeVersionAndDescriptor)(writer, '', 'null', descriptor);\n});\n$92b49e225bf9343c$var$addHandler('GdFl', function(target) {\n    return target.vectorFill !== undefined && target.vectorStroke === undefined && (target.vectorFill.type === 'solid' || target.vectorFill.type === 'noise');\n}, function(reader, target, left) {\n    var descriptor = (0, $klnll.readVersionAndDescriptor)(reader);\n    target.vectorFill = (0, $klnll.parseVectorContent)(descriptor);\n    (0, $5OPaf.skipBytes)(reader, left());\n}, function(writer, target) {\n    var descriptor = (0, $klnll.serializeVectorContent)(target.vectorFill).descriptor;\n    (0, $klnll.writeVersionAndDescriptor)(writer, '', 'null', descriptor);\n});\n$92b49e225bf9343c$var$addHandler('PtFl', function(target) {\n    return target.vectorFill !== undefined && target.vectorStroke === undefined && target.vectorFill.type === 'pattern';\n}, function(reader, target) {\n    var descriptor = (0, $klnll.readVersionAndDescriptor)(reader);\n    target.vectorFill = (0, $klnll.parseVectorContent)(descriptor);\n}, function(writer, target) {\n    var descriptor = (0, $klnll.serializeVectorContent)(target.vectorFill).descriptor;\n    (0, $klnll.writeVersionAndDescriptor)(writer, '', 'null', descriptor);\n});\n$92b49e225bf9343c$var$addHandler('vscg', function(target) {\n    return target.vectorFill !== undefined && target.vectorStroke !== undefined;\n}, function(reader, target, left) {\n    (0, $5OPaf.readSignature)(reader); // key\n    var desc = (0, $klnll.readVersionAndDescriptor)(reader);\n    target.vectorFill = (0, $klnll.parseVectorContent)(desc);\n    (0, $5OPaf.skipBytes)(reader, left());\n}, function(writer, target) {\n    var _a = (0, $klnll.serializeVectorContent)(target.vectorFill), descriptor = _a.descriptor, key = _a.key;\n    (0, $kCSTH.writeSignature)(writer, key);\n    (0, $klnll.writeVersionAndDescriptor)(writer, '', 'null', descriptor);\n});\nfunction $92b49e225bf9343c$var$readBezierKnot(reader, width, height) {\n    var y0 = (0, $5OPaf.readFixedPointPath32)(reader) * height;\n    var x0 = (0, $5OPaf.readFixedPointPath32)(reader) * width;\n    var y1 = (0, $5OPaf.readFixedPointPath32)(reader) * height;\n    var x1 = (0, $5OPaf.readFixedPointPath32)(reader) * width;\n    var y2 = (0, $5OPaf.readFixedPointPath32)(reader) * height;\n    var x2 = (0, $5OPaf.readFixedPointPath32)(reader) * width;\n    return [\n        x0,\n        y0,\n        x1,\n        y1,\n        x2,\n        y2\n    ];\n}\nmodule.exports.readBezierKnot = $92b49e225bf9343c$var$readBezierKnot;\nfunction $92b49e225bf9343c$var$writeBezierKnot(writer, points, width, height) {\n    (0, $kCSTH.writeFixedPointPath32)(writer, points[1] / height); // y0\n    (0, $kCSTH.writeFixedPointPath32)(writer, points[0] / width); // x0\n    (0, $kCSTH.writeFixedPointPath32)(writer, points[3] / height); // y1\n    (0, $kCSTH.writeFixedPointPath32)(writer, points[2] / width); // x1\n    (0, $kCSTH.writeFixedPointPath32)(writer, points[5] / height); // y2\n    (0, $kCSTH.writeFixedPointPath32)(writer, points[4] / width); // x2\n}\nmodule.exports.booleanOperations = [\n    'exclude',\n    'combine',\n    'subtract',\n    'intersect'\n];\nfunction $92b49e225bf9343c$var$readVectorMask(reader, vectorMask, width, height, size) {\n    var end = reader.offset + size;\n    var paths = vectorMask.paths;\n    var path = undefined;\n    while(end - reader.offset >= 26){\n        var selector = (0, $5OPaf.readUint16)(reader);\n        switch(selector){\n            case 0:\n            case 3:\n                (0, $5OPaf.readUint16)(reader); // count\n                var boolOp = (0, $5OPaf.readInt16)(reader);\n                var flags = (0, $5OPaf.readUint16)(reader); // bit 1 always 1 ?\n                (0, $5OPaf.skipBytes)(reader, 18);\n                path = {\n                    open: selector === 3,\n                    knots: [],\n                    fillRule: flags === 2 ? 'non-zero' : 'even-odd'\n                };\n                if (boolOp !== -1) path.operation = module.exports.booleanOperations[boolOp];\n                paths.push(path);\n                break;\n            case 1:\n            case 2:\n            case 4:\n            case 5:\n                path.knots.push({\n                    linked: selector === 1 || selector === 4,\n                    points: $92b49e225bf9343c$var$readBezierKnot(reader, width, height)\n                });\n                break;\n            case 6:\n                (0, $5OPaf.skipBytes)(reader, 24);\n                break;\n            case 7:\n                // TODO: check if these need to be multiplied by document size\n                var top_1 = (0, $5OPaf.readFixedPointPath32)(reader);\n                var left = (0, $5OPaf.readFixedPointPath32)(reader);\n                var bottom = (0, $5OPaf.readFixedPointPath32)(reader);\n                var right = (0, $5OPaf.readFixedPointPath32)(reader);\n                var resolution = (0, $5OPaf.readFixedPointPath32)(reader);\n                (0, $5OPaf.skipBytes)(reader, 4);\n                vectorMask.clipboard = {\n                    top: top_1,\n                    left: left,\n                    bottom: bottom,\n                    right: right,\n                    resolution: resolution\n                };\n                break;\n            case 8:\n                vectorMask.fillStartsWithAllPixels = !!(0, $5OPaf.readUint16)(reader);\n                (0, $5OPaf.skipBytes)(reader, 22);\n                break;\n            default:\n                throw new Error('Invalid vmsk section');\n        }\n    }\n    return paths;\n}\nmodule.exports.readVectorMask = $92b49e225bf9343c$var$readVectorMask;\n$92b49e225bf9343c$var$addHandler('vmsk', $92b49e225bf9343c$var$hasKey('vectorMask'), function(reader, target, left, _a) {\n    var width = _a.width, height = _a.height;\n    if ((0, $5OPaf.readUint32)(reader) !== 3) throw new Error('Invalid vmsk version');\n    target.vectorMask = {\n        paths: []\n    };\n    var vectorMask = target.vectorMask;\n    var flags = (0, $5OPaf.readUint32)(reader);\n    vectorMask.invert = (flags & 1) !== 0;\n    vectorMask.notLink = (flags & 2) !== 0;\n    vectorMask.disable = (flags & 4) !== 0;\n    $92b49e225bf9343c$var$readVectorMask(reader, vectorMask, width, height, left());\n    // drawBezierPaths(vectorMask.paths, width, height, 'out.png');\n    (0, $5OPaf.skipBytes)(reader, left());\n}, function(writer, target, _a) {\n    var width = _a.width, height = _a.height;\n    var vectorMask = target.vectorMask;\n    var flags = (vectorMask.invert ? 1 : 0) | (vectorMask.notLink ? 2 : 0) | (vectorMask.disable ? 4 : 0);\n    (0, $kCSTH.writeUint32)(writer, 3); // version\n    (0, $kCSTH.writeUint32)(writer, flags);\n    // initial entry\n    (0, $kCSTH.writeUint16)(writer, 6);\n    (0, $kCSTH.writeZeros)(writer, 24);\n    var clipboard = vectorMask.clipboard;\n    if (clipboard) {\n        (0, $kCSTH.writeUint16)(writer, 7);\n        (0, $kCSTH.writeFixedPointPath32)(writer, clipboard.top);\n        (0, $kCSTH.writeFixedPointPath32)(writer, clipboard.left);\n        (0, $kCSTH.writeFixedPointPath32)(writer, clipboard.bottom);\n        (0, $kCSTH.writeFixedPointPath32)(writer, clipboard.right);\n        (0, $kCSTH.writeFixedPointPath32)(writer, clipboard.resolution);\n        (0, $kCSTH.writeZeros)(writer, 4);\n    }\n    if (vectorMask.fillStartsWithAllPixels !== undefined) {\n        (0, $kCSTH.writeUint16)(writer, 8);\n        (0, $kCSTH.writeUint16)(writer, vectorMask.fillStartsWithAllPixels ? 1 : 0);\n        (0, $kCSTH.writeZeros)(writer, 22);\n    }\n    for(var _i = 0, _b = vectorMask.paths; _i < _b.length; _i++){\n        var path = _b[_i];\n        (0, $kCSTH.writeUint16)(writer, path.open ? 3 : 0);\n        (0, $kCSTH.writeUint16)(writer, path.knots.length);\n        (0, $kCSTH.writeUint16)(writer, path.operation ? module.exports.booleanOperations.indexOf(path.operation) : -1); // -1 for undefined\n        (0, $kCSTH.writeUint16)(writer, path.fillRule === 'non-zero' ? 2 : 1);\n        (0, $kCSTH.writeZeros)(writer, 18); // TODO: these are sometimes non-zero\n        var linkedKnot = path.open ? 4 : 1;\n        var unlinkedKnot = path.open ? 5 : 2;\n        for(var _c = 0, _d = path.knots; _c < _d.length; _c++){\n            var _e = _d[_c], linked = _e.linked, points = _e.points;\n            (0, $kCSTH.writeUint16)(writer, linked ? linkedKnot : unlinkedKnot);\n            $92b49e225bf9343c$var$writeBezierKnot(writer, points, width, height);\n        }\n    }\n});\n// TODO: need to write vmsk if has outline ?\n$92b49e225bf9343c$var$addHandlerAlias('vsms', 'vmsk');\n// addHandlerAlias('vmsk', 'vsms');\n$92b49e225bf9343c$var$addHandler('vowv', $92b49e225bf9343c$var$hasKey('vowv'), function(reader, target) {\n    target.vowv = (0, $5OPaf.readUint32)(reader); // always 2 ????\n}, function(writer, target) {\n    (0, $kCSTH.writeUint32)(writer, target.vowv);\n});\n$92b49e225bf9343c$var$addHandler('vogk', $92b49e225bf9343c$var$hasKey('vectorOrigination'), function(reader, target, left) {\n    if ((0, $5OPaf.readInt32)(reader) !== 1) throw new Error(\"Invalid vogk version\");\n    var desc = (0, $klnll.readVersionAndDescriptor)(reader);\n    // console.log(require('util').inspect(desc, false, 99, true));\n    target.vectorOrigination = {\n        keyDescriptorList: []\n    };\n    for(var _i = 0, _a = desc.keyDescriptorList; _i < _a.length; _i++){\n        var i = _a[_i];\n        var item = {};\n        if (i.keyShapeInvalidated != null) item.keyShapeInvalidated = i.keyShapeInvalidated;\n        if (i.keyOriginType != null) item.keyOriginType = i.keyOriginType;\n        if (i.keyOriginResolution != null) item.keyOriginResolution = i.keyOriginResolution;\n        if (i.keyOriginShapeBBox) item.keyOriginShapeBoundingBox = {\n            top: (0, $klnll.parseUnitsOrNumber)(i.keyOriginShapeBBox['Top ']),\n            left: (0, $klnll.parseUnitsOrNumber)(i.keyOriginShapeBBox.Left),\n            bottom: (0, $klnll.parseUnitsOrNumber)(i.keyOriginShapeBBox.Btom),\n            right: (0, $klnll.parseUnitsOrNumber)(i.keyOriginShapeBBox.Rght)\n        };\n        var rectRadii = i.keyOriginRRectRadii;\n        if (rectRadii) item.keyOriginRRectRadii = {\n            topRight: (0, $klnll.parseUnits)(rectRadii.topRight),\n            topLeft: (0, $klnll.parseUnits)(rectRadii.topLeft),\n            bottomLeft: (0, $klnll.parseUnits)(rectRadii.bottomLeft),\n            bottomRight: (0, $klnll.parseUnits)(rectRadii.bottomRight)\n        };\n        var corners = i.keyOriginBoxCorners;\n        if (corners) item.keyOriginBoxCorners = [\n            {\n                x: corners.rectangleCornerA.Hrzn,\n                y: corners.rectangleCornerA.Vrtc\n            },\n            {\n                x: corners.rectangleCornerB.Hrzn,\n                y: corners.rectangleCornerB.Vrtc\n            },\n            {\n                x: corners.rectangleCornerC.Hrzn,\n                y: corners.rectangleCornerC.Vrtc\n            },\n            {\n                x: corners.rectangleCornerD.Hrzn,\n                y: corners.rectangleCornerD.Vrtc\n            }\n        ];\n        var trnf = i.Trnf;\n        if (trnf) item.transform = [\n            trnf.xx,\n            trnf.xy,\n            trnf.xy,\n            trnf.yy,\n            trnf.tx,\n            trnf.ty\n        ];\n        target.vectorOrigination.keyDescriptorList.push(item);\n    }\n    (0, $5OPaf.skipBytes)(reader, left());\n}, function(writer, target) {\n    target;\n    var orig = target.vectorOrigination;\n    var desc = {\n        keyDescriptorList: []\n    };\n    for(var i = 0; i < orig.keyDescriptorList.length; i++){\n        var item = orig.keyDescriptorList[i];\n        desc.keyDescriptorList.push({}); // we're adding keyOriginIndex at the end\n        var out = desc.keyDescriptorList[desc.keyDescriptorList.length - 1];\n        if (item.keyOriginType != null) out.keyOriginType = item.keyOriginType;\n        if (item.keyOriginResolution != null) out.keyOriginResolution = item.keyOriginResolution;\n        var radii = item.keyOriginRRectRadii;\n        if (radii) out.keyOriginRRectRadii = {\n            unitValueQuadVersion: 1,\n            topRight: (0, $klnll.unitsValue)(radii.topRight, 'topRight'),\n            topLeft: (0, $klnll.unitsValue)(radii.topLeft, 'topLeft'),\n            bottomLeft: (0, $klnll.unitsValue)(radii.bottomLeft, 'bottomLeft'),\n            bottomRight: (0, $klnll.unitsValue)(radii.bottomRight, 'bottomRight')\n        };\n        var box = item.keyOriginShapeBoundingBox;\n        if (box) out.keyOriginShapeBBox = {\n            unitValueQuadVersion: 1,\n            'Top ': (0, $klnll.unitsValue)(box.top, 'top'),\n            Left: (0, $klnll.unitsValue)(box.left, 'left'),\n            Btom: (0, $klnll.unitsValue)(box.bottom, 'bottom'),\n            Rght: (0, $klnll.unitsValue)(box.right, 'right')\n        };\n        var corners = item.keyOriginBoxCorners;\n        if (corners && corners.length === 4) out.keyOriginBoxCorners = {\n            rectangleCornerA: {\n                Hrzn: corners[0].x,\n                Vrtc: corners[0].y\n            },\n            rectangleCornerB: {\n                Hrzn: corners[1].x,\n                Vrtc: corners[1].y\n            },\n            rectangleCornerC: {\n                Hrzn: corners[2].x,\n                Vrtc: corners[2].y\n            },\n            rectangleCornerD: {\n                Hrzn: corners[3].x,\n                Vrtc: corners[3].y\n            }\n        };\n        var transform = item.transform;\n        if (transform && transform.length === 6) out.Trnf = {\n            xx: transform[0],\n            xy: transform[1],\n            yx: transform[2],\n            yy: transform[3],\n            tx: transform[4],\n            ty: transform[5]\n        };\n        if (item.keyShapeInvalidated != null) out.keyShapeInvalidated = item.keyShapeInvalidated;\n        out.keyOriginIndex = i;\n    }\n    (0, $kCSTH.writeInt32)(writer, 1); // version\n    (0, $klnll.writeVersionAndDescriptor)(writer, '', 'null', desc);\n});\n$92b49e225bf9343c$var$addHandler('lmfx', function(target) {\n    return target.effects !== undefined && $92b49e225bf9343c$var$hasMultiEffects(target.effects);\n}, function(reader, target, left) {\n    var version = (0, $5OPaf.readUint32)(reader);\n    if (version !== 0) throw new Error('Invalid lmfx version');\n    var desc = (0, $klnll.readVersionAndDescriptor)(reader);\n    // console.log('READ', require('util').inspect(desc, false, 99, true));\n    // discard if read in 'lrFX' or 'lfx2' section\n    target.effects = (0, $klnll.parseEffects)(desc, !!reader.logMissingFeatures);\n    (0, $5OPaf.skipBytes)(reader, left());\n}, function(writer, target, _, options) {\n    var desc = (0, $klnll.serializeEffects)(target.effects, !!options.logMissingFeatures, true);\n    // console.log('WRITE', require('util').inspect(desc, false, 99, true));\n    (0, $kCSTH.writeUint32)(writer, 0); // version\n    (0, $klnll.writeVersionAndDescriptor)(writer, '', 'null', desc);\n});\n$92b49e225bf9343c$var$addHandler('lrFX', $92b49e225bf9343c$var$hasKey('effects'), function(reader, target, left) {\n    if (!target.effects) target.effects = (0, $26rz6.readEffects)(reader);\n    (0, $5OPaf.skipBytes)(reader, left());\n}, function(writer, target) {\n    (0, $26rz6.writeEffects)(writer, target.effects);\n});\n$92b49e225bf9343c$var$addHandler('luni', $92b49e225bf9343c$var$hasKey('name'), function(reader, target, left) {\n    if (left() > 4) {\n        var length_1 = (0, $5OPaf.readUint32)(reader);\n        if (left() >= length_1 * 2) target.name = (0, $5OPaf.readUnicodeStringWithLength)(reader, length_1);\n        else if (reader.logDevFeatures) reader.log('name in luni section is too long');\n    } else if (reader.logDevFeatures) reader.log('empty luni section');\n    (0, $5OPaf.skipBytes)(reader, left());\n}, function(writer, target) {\n    (0, $kCSTH.writeUnicodeString)(writer, target.name);\n// writeUint16(writer, 0); // padding (but not extending string length)\n});\n$92b49e225bf9343c$var$addHandler('lnsr', $92b49e225bf9343c$var$hasKey('nameSource'), function(reader, target) {\n    return target.nameSource = (0, $5OPaf.readSignature)(reader);\n}, function(writer, target) {\n    return (0, $kCSTH.writeSignature)(writer, target.nameSource);\n});\n$92b49e225bf9343c$var$addHandler('lyid', $92b49e225bf9343c$var$hasKey('id'), function(reader, target) {\n    target.id = (0, $5OPaf.readUint32)(reader);\n}, function(writer, target, _psd, options) {\n    var id = target.id;\n    while(options.layerIds.has(id))id += 100; // make sure we don't have duplicate layer ids\n    (0, $kCSTH.writeUint32)(writer, id);\n    options.layerIds.add(id);\n    options.layerToId.set(target, id);\n});\n$92b49e225bf9343c$var$addHandler('lsct', $92b49e225bf9343c$var$hasKey('sectionDivider'), function(reader, target, left) {\n    target.sectionDivider = {\n        type: (0, $5OPaf.readUint32)(reader)\n    };\n    if (left()) {\n        (0, $5OPaf.checkSignature)(reader, '8BIM');\n        target.sectionDivider.key = (0, $5OPaf.readSignature)(reader);\n    }\n    if (left()) target.sectionDivider.subType = (0, $5OPaf.readUint32)(reader);\n}, function(writer, target) {\n    (0, $kCSTH.writeUint32)(writer, target.sectionDivider.type);\n    if (target.sectionDivider.key) {\n        (0, $kCSTH.writeSignature)(writer, '8BIM');\n        (0, $kCSTH.writeSignature)(writer, target.sectionDivider.key);\n        if (target.sectionDivider.subType !== undefined) (0, $kCSTH.writeUint32)(writer, target.sectionDivider.subType);\n    }\n});\n// it seems lsdk is used when there's a layer is nested more than 6 levels, but I don't know why?\n// maybe some limitation of old version of PS?\n$92b49e225bf9343c$var$addHandlerAlias('lsdk', 'lsct');\n$92b49e225bf9343c$var$addHandler('clbl', $92b49e225bf9343c$var$hasKey('blendClippendElements'), function(reader, target) {\n    target.blendClippendElements = !!(0, $5OPaf.readUint8)(reader);\n    (0, $5OPaf.skipBytes)(reader, 3);\n}, function(writer, target) {\n    (0, $kCSTH.writeUint8)(writer, target.blendClippendElements ? 1 : 0);\n    (0, $kCSTH.writeZeros)(writer, 3);\n});\n$92b49e225bf9343c$var$addHandler('infx', $92b49e225bf9343c$var$hasKey('blendInteriorElements'), function(reader, target) {\n    target.blendInteriorElements = !!(0, $5OPaf.readUint8)(reader);\n    (0, $5OPaf.skipBytes)(reader, 3);\n}, function(writer, target) {\n    (0, $kCSTH.writeUint8)(writer, target.blendInteriorElements ? 1 : 0);\n    (0, $kCSTH.writeZeros)(writer, 3);\n});\n$92b49e225bf9343c$var$addHandler('knko', $92b49e225bf9343c$var$hasKey('knockout'), function(reader, target) {\n    target.knockout = !!(0, $5OPaf.readUint8)(reader);\n    (0, $5OPaf.skipBytes)(reader, 3);\n}, function(writer, target) {\n    (0, $kCSTH.writeUint8)(writer, target.knockout ? 1 : 0);\n    (0, $kCSTH.writeZeros)(writer, 3);\n});\n$92b49e225bf9343c$var$addHandler('lmgm', $92b49e225bf9343c$var$hasKey('layerMaskAsGlobalMask'), function(reader, target) {\n    target.layerMaskAsGlobalMask = !!(0, $5OPaf.readUint8)(reader);\n    (0, $5OPaf.skipBytes)(reader, 3);\n}, function(writer, target) {\n    (0, $kCSTH.writeUint8)(writer, target.layerMaskAsGlobalMask ? 1 : 0);\n    (0, $kCSTH.writeZeros)(writer, 3);\n});\n$92b49e225bf9343c$var$addHandler('lspf', $92b49e225bf9343c$var$hasKey('protected'), function(reader, target) {\n    var flags = (0, $5OPaf.readUint32)(reader);\n    target.protected = {\n        transparency: (flags & 0x01) !== 0,\n        composite: (flags & 0x02) !== 0,\n        position: (flags & 0x04) !== 0\n    };\n    if (flags & 0x08) target.protected.artboards = true;\n}, function(writer, target) {\n    var flags = (target.protected.transparency ? 0x01 : 0) | (target.protected.composite ? 0x02 : 0) | (target.protected.position ? 0x04 : 0) | (target.protected.artboards ? 0x08 : 0);\n    (0, $kCSTH.writeUint32)(writer, flags);\n});\n$92b49e225bf9343c$var$addHandler('lclr', $92b49e225bf9343c$var$hasKey('layerColor'), function(reader, target) {\n    var color = (0, $5OPaf.readUint16)(reader);\n    (0, $5OPaf.skipBytes)(reader, 6);\n    target.layerColor = $jE67M.layerColors[color];\n}, function(writer, target) {\n    var index = $jE67M.layerColors.indexOf(target.layerColor);\n    (0, $kCSTH.writeUint16)(writer, index === -1 ? 0 : index);\n    (0, $kCSTH.writeZeros)(writer, 6);\n});\n$92b49e225bf9343c$var$addHandler('shmd', function(target) {\n    return target.timestamp !== undefined || target.animationFrames !== undefined || target.animationFrameFlags !== undefined || target.timeline !== undefined || target.comps !== undefined;\n}, function(reader, target, left) {\n    var count = (0, $5OPaf.readUint32)(reader);\n    var _loop_1 = function _loop_1(i) {\n        (0, $5OPaf.checkSignature)(reader, '8BIM');\n        var key = (0, $5OPaf.readSignature)(reader);\n        (0, $5OPaf.readUint8)(reader); // copy\n        (0, $5OPaf.skipBytes)(reader, 3);\n        (0, $5OPaf.readSection)(reader, 1, function(left) {\n            if (key === 'cust') {\n                var desc = (0, $klnll.readVersionAndDescriptor)(reader);\n                // console.log('cust', target.name, require('util').inspect(desc, false, 99, true));\n                if (desc.layerTime !== undefined) target.timestamp = desc.layerTime;\n            } else if (key === 'mlst') {\n                var desc = (0, $klnll.readVersionAndDescriptor)(reader);\n                // console.log('mlst', target.name, require('util').inspect(desc, false, 99, true));\n                target.animationFrames = [];\n                for(var i_1 = 0; i_1 < desc.LaSt.length; i_1++){\n                    var f = desc.LaSt[i_1];\n                    var frame = {\n                        frames: f.FrLs\n                    };\n                    if (f.enab !== undefined) frame.enable = f.enab;\n                    if (f.Ofst) frame.offset = (0, $klnll.horzVrtcToXY)(f.Ofst);\n                    if (f.FXRf) frame.referencePoint = (0, $klnll.horzVrtcToXY)(f.FXRf);\n                    if (f.Lefx) frame.effects = (0, $klnll.parseEffects)(f.Lefx, !!reader.logMissingFeatures);\n                    if (f.blendOptions && f.blendOptions.Opct) frame.opacity = (0, $klnll.parsePercent)(f.blendOptions.Opct);\n                    target.animationFrames.push(frame);\n                }\n            } else if (key === 'mdyn') {\n                // frame flags\n                (0, $5OPaf.readUint16)(reader); // unknown\n                var propagate = (0, $5OPaf.readUint8)(reader);\n                var flags = (0, $5OPaf.readUint8)(reader);\n                target.animationFrameFlags = {\n                    propagateFrameOne: !propagate,\n                    unifyLayerPosition: (flags & 1) !== 0,\n                    unifyLayerStyle: (flags & 2) !== 0,\n                    unifyLayerVisibility: (flags & 4) !== 0\n                };\n            } else if (key === 'tmln') {\n                var desc = (0, $klnll.readVersionAndDescriptor)(reader);\n                var timeScope = desc.timeScope;\n                // console.log('tmln', target.name, target.id, require('util').inspect(desc, false, 99, true));\n                var timeline = {\n                    start: (0, $klnll.frac)(timeScope.Strt),\n                    duration: (0, $klnll.frac)(timeScope.duration),\n                    inTime: (0, $klnll.frac)(timeScope.inTime),\n                    outTime: (0, $klnll.frac)(timeScope.outTime),\n                    autoScope: desc.autoScope,\n                    audioLevel: desc.audioLevel\n                };\n                if (desc.trackList) timeline.tracks = (0, $klnll.parseTrackList)(desc.trackList, !!reader.logMissingFeatures);\n                target.timeline = timeline;\n            // console.log('tmln:result', target.name, target.id, require('util').inspect(timeline, false, 99, true));\n            } else if (key === 'cmls') {\n                var desc = (0, $klnll.readVersionAndDescriptor)(reader);\n                // console.log('cmls', require('util').inspect(desc, false, 99, true));\n                target.comps = {\n                    settings: []\n                };\n                if (desc.origFXRefPoint) target.comps.originalEffectsReferencePoint = {\n                    x: desc.origFXRefPoint.Hrzn,\n                    y: desc.origFXRefPoint.Vrtc\n                };\n                for(var _i = 0, _a = desc.layerSettings; _i < _a.length; _i++){\n                    var item = _a[_i];\n                    target.comps.settings.push({\n                        compList: item.compList\n                    });\n                    var t = target.comps.settings[target.comps.settings.length - 1];\n                    if ('enab' in item) t.enabled = item.enab;\n                    if (item.Ofst) t.offset = {\n                        x: item.Ofst.Hrzn,\n                        y: item.Ofst.Vrtc\n                    };\n                    if (item.FXRefPoint) t.effectsReferencePoint = {\n                        x: item.FXRefPoint.Hrzn,\n                        y: item.FXRefPoint.Vrtc\n                    };\n                }\n            } else if (key === 'extn') {\n                var desc = (0, $klnll.readVersionAndDescriptor)(reader);\n                // console.log(require('util').inspect(desc, false, 99, true));\n                desc; // TODO: save this\n                reader.logMissingFeatures && reader.log('Unhandled \"shmd\" section key', key);\n            } else reader.logMissingFeatures && reader.log('Unhandled \"shmd\" section key', key);\n            (0, $5OPaf.skipBytes)(reader, left());\n        });\n    };\n    for(var i = 0; i < count; i++)_loop_1(i);\n    (0, $5OPaf.skipBytes)(reader, left());\n}, function(writer, target, _, options) {\n    var animationFrames = target.animationFrames, animationFrameFlags = target.animationFrameFlags, timestamp = target.timestamp, timeline = target.timeline, comps = target.comps;\n    var count = 0;\n    if (animationFrames) count++;\n    if (animationFrameFlags) count++;\n    if (timeline) count++;\n    if (timestamp !== undefined) count++;\n    if (comps) count++;\n    (0, $kCSTH.writeUint32)(writer, count);\n    if (animationFrames) {\n        (0, $kCSTH.writeSignature)(writer, '8BIM');\n        (0, $kCSTH.writeSignature)(writer, 'mlst');\n        (0, $kCSTH.writeUint8)(writer, 0); // copy (always false)\n        (0, $kCSTH.writeZeros)(writer, 3);\n        (0, $kCSTH.writeSection)(writer, 2, function() {\n            var _a;\n            var desc = {\n                LaID: (_a = target.id) !== null && _a !== void 0 ? _a : 0,\n                LaSt: []\n            };\n            for(var i = 0; i < animationFrames.length; i++){\n                var f = animationFrames[i];\n                var frame = {};\n                if (f.enable !== undefined) frame.enab = f.enable;\n                frame.FrLs = f.frames;\n                if (f.offset) frame.Ofst = (0, $klnll.xyToHorzVrtc)(f.offset);\n                if (f.referencePoint) frame.FXRf = (0, $klnll.xyToHorzVrtc)(f.referencePoint);\n                if (f.effects) frame.Lefx = (0, $klnll.serializeEffects)(f.effects, false, false);\n                if (f.opacity !== undefined) frame.blendOptions = {\n                    Opct: (0, $klnll.unitsPercent)(f.opacity)\n                };\n                desc.LaSt.push(frame);\n            }\n            (0, $klnll.writeVersionAndDescriptor)(writer, '', 'null', desc);\n        }, true);\n    }\n    if (animationFrameFlags) {\n        (0, $kCSTH.writeSignature)(writer, '8BIM');\n        (0, $kCSTH.writeSignature)(writer, 'mdyn');\n        (0, $kCSTH.writeUint8)(writer, 0); // copy (always false)\n        (0, $kCSTH.writeZeros)(writer, 3);\n        (0, $kCSTH.writeSection)(writer, 2, function() {\n            (0, $kCSTH.writeUint16)(writer, 0); // unknown\n            (0, $kCSTH.writeUint8)(writer, animationFrameFlags.propagateFrameOne ? 0x0 : 0xf);\n            (0, $kCSTH.writeUint8)(writer, (animationFrameFlags.unifyLayerPosition ? 1 : 0) | (animationFrameFlags.unifyLayerStyle ? 2 : 0) | (animationFrameFlags.unifyLayerVisibility ? 4 : 0));\n        });\n    }\n    if (timeline) {\n        (0, $kCSTH.writeSignature)(writer, '8BIM');\n        (0, $kCSTH.writeSignature)(writer, 'tmln');\n        (0, $kCSTH.writeUint8)(writer, 0); // copy (always false)\n        (0, $kCSTH.writeZeros)(writer, 3);\n        (0, $kCSTH.writeSection)(writer, 2, function() {\n            var desc = {\n                Vrsn: 1,\n                timeScope: {\n                    Vrsn: 1,\n                    Strt: timeline.start,\n                    duration: timeline.duration,\n                    inTime: timeline.inTime,\n                    outTime: timeline.outTime\n                },\n                autoScope: timeline.autoScope,\n                audioLevel: timeline.audioLevel\n            };\n            if (timeline.tracks) desc.trackList = (0, $klnll.serializeTrackList)(timeline.tracks);\n            var id = options.layerToId.get(target) || target.id;\n            if (!id) throw new Error('You need to provide layer.id value whan writing document with animations');\n            desc.LyrI = id;\n            // console.log('WRITE:tmln', target.name, target.id, require('util').inspect(desc, false, 99, true));\n            (0, $klnll.writeVersionAndDescriptor)(writer, '', 'null', desc, 'anim');\n        }, true);\n    }\n    if (timestamp !== undefined) {\n        (0, $kCSTH.writeSignature)(writer, '8BIM');\n        (0, $kCSTH.writeSignature)(writer, 'cust');\n        (0, $kCSTH.writeUint8)(writer, 0); // copy (always false)\n        (0, $kCSTH.writeZeros)(writer, 3);\n        (0, $kCSTH.writeSection)(writer, 2, function() {\n            var desc = {\n                layerTime: timestamp\n            };\n            (0, $klnll.writeVersionAndDescriptor)(writer, '', 'metadata', desc);\n        }, true);\n    }\n    if (comps) {\n        (0, $kCSTH.writeSignature)(writer, '8BIM');\n        (0, $kCSTH.writeSignature)(writer, 'cmls');\n        (0, $kCSTH.writeUint8)(writer, 0); // copy (always false)\n        (0, $kCSTH.writeZeros)(writer, 3);\n        (0, $kCSTH.writeSection)(writer, 2, function() {\n            var id = options.layerToId.get(target) || target.id;\n            if (!id) throw new Error('You need to provide layer.id value whan writing document with layer comps');\n            var desc = {};\n            if (comps.originalEffectsReferencePoint) desc.origFXRefPoint = {\n                Hrzn: comps.originalEffectsReferencePoint.x,\n                Vrtc: comps.originalEffectsReferencePoint.y\n            };\n            desc.LyrI = id;\n            desc.layerSettings = [];\n            for(var _i = 0, _a = comps.settings; _i < _a.length; _i++){\n                var item = _a[_i];\n                var t = {};\n                if (item.enabled !== undefined) t.enab = item.enabled;\n                if (item.offset) t.Ofst = {\n                    Hrzn: item.offset.x,\n                    Vrtc: item.offset.y\n                };\n                if (item.effectsReferencePoint) t.FXRefPoint = {\n                    Hrzn: item.effectsReferencePoint.x,\n                    Vrtc: item.effectsReferencePoint.y\n                };\n                t.compList = item.compList;\n                desc.layerSettings.push(t);\n            }\n            // console.log('cmls', require('util').inspect(desc, false, 99, true));\n            (0, $klnll.writeVersionAndDescriptor)(writer, '', 'null', desc);\n        }, true);\n    }\n});\n$92b49e225bf9343c$var$addHandler('vstk', $92b49e225bf9343c$var$hasKey('vectorStroke'), function(reader, target, left) {\n    var desc = (0, $klnll.readVersionAndDescriptor)(reader);\n    // console.log(require('util').inspect(desc, false, 99, true));\n    target.vectorStroke = {\n        strokeEnabled: desc.strokeEnabled,\n        fillEnabled: desc.fillEnabled,\n        lineWidth: (0, $klnll.parseUnits)(desc.strokeStyleLineWidth),\n        lineDashOffset: (0, $klnll.parseUnits)(desc.strokeStyleLineDashOffset),\n        miterLimit: desc.strokeStyleMiterLimit,\n        lineCapType: $klnll.strokeStyleLineCapType.decode(desc.strokeStyleLineCapType),\n        lineJoinType: $klnll.strokeStyleLineJoinType.decode(desc.strokeStyleLineJoinType),\n        lineAlignment: $klnll.strokeStyleLineAlignment.decode(desc.strokeStyleLineAlignment),\n        scaleLock: desc.strokeStyleScaleLock,\n        strokeAdjust: desc.strokeStyleStrokeAdjust,\n        lineDashSet: desc.strokeStyleLineDashSet.map($klnll.parseUnits),\n        blendMode: $klnll.BlnM.decode(desc.strokeStyleBlendMode),\n        opacity: (0, $klnll.parsePercent)(desc.strokeStyleOpacity),\n        content: (0, $klnll.parseVectorContent)(desc.strokeStyleContent),\n        resolution: desc.strokeStyleResolution\n    };\n    (0, $5OPaf.skipBytes)(reader, left());\n}, function(writer, target) {\n    var _a, _b, _c;\n    var stroke = target.vectorStroke;\n    var desc = {\n        strokeStyleVersion: 2,\n        strokeEnabled: !!stroke.strokeEnabled,\n        fillEnabled: !!stroke.fillEnabled,\n        strokeStyleLineWidth: stroke.lineWidth || {\n            value: 3,\n            units: 'Points'\n        },\n        strokeStyleLineDashOffset: stroke.lineDashOffset || {\n            value: 0,\n            units: 'Points'\n        },\n        strokeStyleMiterLimit: (_a = stroke.miterLimit) !== null && _a !== void 0 ? _a : 100,\n        strokeStyleLineCapType: $klnll.strokeStyleLineCapType.encode(stroke.lineCapType),\n        strokeStyleLineJoinType: $klnll.strokeStyleLineJoinType.encode(stroke.lineJoinType),\n        strokeStyleLineAlignment: $klnll.strokeStyleLineAlignment.encode(stroke.lineAlignment),\n        strokeStyleScaleLock: !!stroke.scaleLock,\n        strokeStyleStrokeAdjust: !!stroke.strokeAdjust,\n        strokeStyleLineDashSet: stroke.lineDashSet || [],\n        strokeStyleBlendMode: $klnll.BlnM.encode(stroke.blendMode),\n        strokeStyleOpacity: (0, $klnll.unitsPercent)((_b = stroke.opacity) !== null && _b !== void 0 ? _b : 1),\n        strokeStyleContent: (0, $klnll.serializeVectorContent)(stroke.content || {\n            type: 'color',\n            color: {\n                r: 0,\n                g: 0,\n                b: 0\n            }\n        }).descriptor,\n        strokeStyleResolution: (_c = stroke.resolution) !== null && _c !== void 0 ? _c : 72\n    };\n    (0, $klnll.writeVersionAndDescriptor)(writer, '', 'strokeStyle', desc);\n});\n$92b49e225bf9343c$var$addHandler('artb', $92b49e225bf9343c$var$hasKey('artboard'), function(reader, target, left) {\n    var desc = (0, $klnll.readVersionAndDescriptor)(reader);\n    var rect = desc.artboardRect;\n    target.artboard = {\n        rect: {\n            top: rect['Top '],\n            left: rect.Left,\n            bottom: rect.Btom,\n            right: rect.Rght\n        },\n        guideIndices: desc.guideIndeces,\n        presetName: desc.artboardPresetName,\n        color: (0, $klnll.parseColor)(desc['Clr ']),\n        backgroundType: desc.artboardBackgroundType\n    };\n    (0, $5OPaf.skipBytes)(reader, left());\n}, function(writer, target) {\n    var _a;\n    var artboard = target.artboard;\n    var rect = artboard.rect;\n    var desc = {\n        artboardRect: {\n            'Top ': rect.top,\n            Left: rect.left,\n            Btom: rect.bottom,\n            Rght: rect.right\n        },\n        guideIndeces: artboard.guideIndices || [],\n        artboardPresetName: artboard.presetName || '',\n        'Clr ': (0, $klnll.serializeColor)(artboard.color),\n        artboardBackgroundType: (_a = artboard.backgroundType) !== null && _a !== void 0 ? _a : 1\n    };\n    (0, $klnll.writeVersionAndDescriptor)(writer, '', 'artboard', desc);\n});\n$92b49e225bf9343c$var$addHandler('sn2P', $92b49e225bf9343c$var$hasKey('usingAlignedRendering'), function(reader, target) {\n    return target.usingAlignedRendering = !!(0, $5OPaf.readUint32)(reader);\n}, function(writer, target) {\n    return (0, $kCSTH.writeUint32)(writer, target.usingAlignedRendering ? 1 : 0);\n});\nvar $92b49e225bf9343c$var$placedLayerTypes = [\n    'unknown',\n    'vector',\n    'raster',\n    'image stack'\n];\nfunction $92b49e225bf9343c$var$parseWarp(warp) {\n    var _a, _b, _c, _d, _e, _f;\n    var result = $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({\n        style: $klnll.warpStyle.decode(warp.warpStyle)\n    }, warp.warpValues ? {\n        values: warp.warpValues\n    } : {\n        value: warp.warpValue || 0\n    }), {\n        perspective: warp.warpPerspective || 0,\n        perspectiveOther: warp.warpPerspectiveOther || 0,\n        rotate: $klnll.Ornt.decode(warp.warpRotate),\n        bounds: warp.bounds && {\n            top: (0, $klnll.parseUnitsOrNumber)(warp.bounds['Top ']),\n            left: (0, $klnll.parseUnitsOrNumber)(warp.bounds.Left),\n            bottom: (0, $klnll.parseUnitsOrNumber)(warp.bounds.Btom),\n            right: (0, $klnll.parseUnitsOrNumber)(warp.bounds.Rght)\n        },\n        uOrder: warp.uOrder,\n        vOrder: warp.vOrder\n    });\n    if (warp.deformNumRows != null || warp.deformNumCols != null) {\n        result.deformNumRows = warp.deformNumRows;\n        result.deformNumCols = warp.deformNumCols;\n    }\n    var envelopeWarp = warp.customEnvelopeWarp;\n    if (envelopeWarp) {\n        result.customEnvelopeWarp = {\n            meshPoints: []\n        };\n        var xs = ((_a = envelopeWarp.meshPoints.find(function(i) {\n            return i.type === 'Hrzn';\n        })) === null || _a === void 0 ? void 0 : _a.values) || [];\n        var ys = ((_b = envelopeWarp.meshPoints.find(function(i) {\n            return i.type === 'Vrtc';\n        })) === null || _b === void 0 ? void 0 : _b.values) || [];\n        for(var i = 0; i < xs.length; i++)result.customEnvelopeWarp.meshPoints.push({\n            x: xs[i],\n            y: ys[i]\n        });\n        if (envelopeWarp.quiltSliceX || envelopeWarp.quiltSliceY) {\n            result.customEnvelopeWarp.quiltSliceX = ((_d = (_c = envelopeWarp.quiltSliceX) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d.values) || [];\n            result.customEnvelopeWarp.quiltSliceY = ((_f = (_e = envelopeWarp.quiltSliceY) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.values) || [];\n        }\n    }\n    return result;\n}\nfunction $92b49e225bf9343c$var$isQuiltWarp(warp) {\n    var _a, _b;\n    return warp.deformNumCols != null || warp.deformNumRows != null || ((_a = warp.customEnvelopeWarp) === null || _a === void 0 ? void 0 : _a.quiltSliceX) || ((_b = warp.customEnvelopeWarp) === null || _b === void 0 ? void 0 : _b.quiltSliceY);\n}\nfunction $92b49e225bf9343c$var$encodeWarp(warp) {\n    var bounds = warp.bounds;\n    var desc = $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({\n        warpStyle: $klnll.warpStyle.encode(warp.style)\n    }, warp.values ? {\n        warpValues: warp.values\n    } : {\n        warpValue: warp.value || 0\n    }), {\n        warpPerspective: warp.perspective || 0,\n        warpPerspectiveOther: warp.perspectiveOther || 0,\n        warpRotate: $klnll.Ornt.encode(warp.rotate),\n        bounds: /*1 ? { // testing\r\n            _classID: 'classFloatRect',\r\n            'Top ': bounds && bounds.top && bounds.top.value || 0,\r\n            Left: bounds && bounds.left && bounds.left.value || 0,\r\n            Btom: bounds && bounds.bottom && bounds.bottom.value || 0,\r\n            Rght: bounds && bounds.right && bounds.right.value || 0,\r\n        } :*/ {\n            'Top ': (0, $klnll.unitsValue)(bounds && bounds.top || {\n                units: 'Pixels',\n                value: 0\n            }, 'bounds.top'),\n            Left: (0, $klnll.unitsValue)(bounds && bounds.left || {\n                units: 'Pixels',\n                value: 0\n            }, 'bounds.left'),\n            Btom: (0, $klnll.unitsValue)(bounds && bounds.bottom || {\n                units: 'Pixels',\n                value: 0\n            }, 'bounds.bottom'),\n            Rght: (0, $klnll.unitsValue)(bounds && bounds.right || {\n                units: 'Pixels',\n                value: 0\n            }, 'bounds.right')\n        },\n        uOrder: warp.uOrder || 0,\n        vOrder: warp.vOrder || 0\n    });\n    var isQuilt = $92b49e225bf9343c$var$isQuiltWarp(warp);\n    if (isQuilt) {\n        var desc2 = desc;\n        desc2.deformNumRows = warp.deformNumRows || 0;\n        desc2.deformNumCols = warp.deformNumCols || 0;\n    }\n    var customEnvelopeWarp = warp.customEnvelopeWarp;\n    if (customEnvelopeWarp) {\n        var meshPoints = customEnvelopeWarp.meshPoints || [];\n        if (isQuilt) {\n            var desc2 = desc;\n            desc2.customEnvelopeWarp = {\n                _name: '',\n                _classID: 'customEnvelopeWarp',\n                quiltSliceX: [\n                    {\n                        type: 'quiltSliceX',\n                        values: customEnvelopeWarp.quiltSliceX || []\n                    }\n                ],\n                quiltSliceY: [\n                    {\n                        type: 'quiltSliceY',\n                        values: customEnvelopeWarp.quiltSliceY || []\n                    }\n                ],\n                meshPoints: [\n                    {\n                        type: 'Hrzn',\n                        values: meshPoints.map(function(p) {\n                            return p.x;\n                        })\n                    },\n                    {\n                        type: 'Vrtc',\n                        values: meshPoints.map(function(p) {\n                            return p.y;\n                        })\n                    }\n                ]\n            };\n        } else desc.customEnvelopeWarp = {\n            _name: '',\n            _classID: 'customEnvelopeWarp',\n            meshPoints: [\n                {\n                    type: 'Hrzn',\n                    values: meshPoints.map(function(p) {\n                        return p.x;\n                    })\n                },\n                {\n                    type: 'Vrtc',\n                    values: meshPoints.map(function(p) {\n                        return p.y;\n                    })\n                }\n            ]\n        };\n    }\n    return desc;\n}\n$92b49e225bf9343c$var$addHandler('PlLd', $92b49e225bf9343c$var$hasKey('placedLayer'), function(reader, target, left) {\n    if ((0, $5OPaf.readSignature)(reader) !== 'plcL') throw new Error(\"Invalid PlLd signature\");\n    if ((0, $5OPaf.readInt32)(reader) !== 3) throw new Error(\"Invalid PlLd version\");\n    var id = (0, $5OPaf.readPascalString)(reader, 1);\n    var pageNumber = (0, $5OPaf.readInt32)(reader);\n    var totalPages = (0, $5OPaf.readInt32)(reader); // TODO: check how this works ?\n    (0, $5OPaf.readInt32)(reader); // anitAliasPolicy 16\n    var placedLayerType = (0, $5OPaf.readInt32)(reader); // 0 = unknown, 1 = vector, 2 = raster, 3 = image stack\n    if (!$92b49e225bf9343c$var$placedLayerTypes[placedLayerType]) throw new Error('Invalid PlLd type');\n    var transform = [];\n    for(var i = 0; i < 8; i++)transform.push((0, $5OPaf.readFloat64)(reader)); // x, y of 4 corners of the transform\n    var warpVersion = (0, $5OPaf.readInt32)(reader);\n    if (warpVersion !== 0) throw new Error(\"Invalid Warp version \".concat(warpVersion));\n    var warp = (0, $klnll.readVersionAndDescriptor)(reader);\n    target.placedLayer = target.placedLayer || {\n        id: id,\n        type: $92b49e225bf9343c$var$placedLayerTypes[placedLayerType],\n        pageNumber: pageNumber,\n        totalPages: totalPages,\n        transform: transform,\n        warp: $92b49e225bf9343c$var$parseWarp(warp)\n    };\n    // console.log('PlLd warp', require('util').inspect(warp, false, 99, true));\n    // console.log('PlLd', require('util').inspect(target.placedLayer, false, 99, true));\n    (0, $5OPaf.skipBytes)(reader, left());\n}, function(writer, target) {\n    var placed = target.placedLayer;\n    (0, $kCSTH.writeSignature)(writer, 'plcL');\n    (0, $kCSTH.writeInt32)(writer, 3); // version\n    if (!placed.id || typeof placed.id !== 'string' || !/^[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$/.test(placed.id)) throw new Error('Placed layer ID must be in a GUID format (example: 20953ddb-9391-11ec-b4f1-c15674f50bc4)');\n    (0, $kCSTH.writePascalString)(writer, placed.id, 1);\n    (0, $kCSTH.writeInt32)(writer, 1); // pageNumber\n    (0, $kCSTH.writeInt32)(writer, 1); // totalPages\n    (0, $kCSTH.writeInt32)(writer, 16); // anitAliasPolicy\n    if ($92b49e225bf9343c$var$placedLayerTypes.indexOf(placed.type) === -1) throw new Error('Invalid placedLayer type');\n    (0, $kCSTH.writeInt32)(writer, $92b49e225bf9343c$var$placedLayerTypes.indexOf(placed.type));\n    for(var i = 0; i < 8; i++)(0, $kCSTH.writeFloat64)(writer, placed.transform[i]);\n    (0, $kCSTH.writeInt32)(writer, 0); // warp version\n    var warp = $92b49e225bf9343c$var$getWarpFromPlacedLayer(placed);\n    var isQuilt = $92b49e225bf9343c$var$isQuiltWarp(warp);\n    var type = isQuilt ? 'quiltWarp' : 'warp';\n    (0, $klnll.writeVersionAndDescriptor)(writer, '', type, $92b49e225bf9343c$var$encodeWarp(warp), type);\n});\nfunction $92b49e225bf9343c$var$uint8ToFloat32(array) {\n    return new Float32Array(array.buffer.slice(array.byteOffset), 0, array.byteLength / 4);\n}\nfunction $92b49e225bf9343c$var$uint8ToUint32(array) {\n    return new Uint32Array(array.buffer.slice(array.byteOffset), 0, array.byteLength / 4);\n}\nfunction $92b49e225bf9343c$var$toUint8(array) {\n    return new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\n}\nfunction $92b49e225bf9343c$var$arrayToPoints(array) {\n    var points = [];\n    for(var i = 0; i < array.length; i += 2)points.push({\n        x: array[i],\n        y: array[i + 1]\n    });\n    return points;\n}\nfunction $92b49e225bf9343c$var$pointsToArray(points) {\n    var array = [];\n    for(var i = 0; i < points.length; i++)array.push(points[i].x, points[i].y);\n    return array;\n}\nfunction $92b49e225bf9343c$var$uint8ToPoints(array) {\n    return $92b49e225bf9343c$var$arrayToPoints($92b49e225bf9343c$var$uint8ToFloat32(array));\n}\nfunction $92b49e225bf9343c$var$hrznVrtcToPoint(desc) {\n    return {\n        x: (0, $klnll.parseUnits)(desc.Hrzn),\n        y: (0, $klnll.parseUnits)(desc.Vrtc)\n    };\n}\nfunction $92b49e225bf9343c$var$pointToHrznVrtc(point) {\n    return {\n        _name: '',\n        _classID: 'Pnt ',\n        Hrzn: (0, $klnll.unitsValue)(point.x, 'x'),\n        Vrtc: (0, $klnll.unitsValue)(point.y, 'y')\n    };\n}\nfunction $92b49e225bf9343c$var$parseFilterFXItem(f, options) {\n    var base = {\n        name: f['Nm  '],\n        opacity: (0, $klnll.parsePercent)(f.blendOptions.Opct),\n        blendMode: $klnll.BlnM.decode(f.blendOptions['Md  ']),\n        enabled: f.enab,\n        hasOptions: f.hasoptions,\n        foregroundColor: (0, $klnll.parseColor)(f.FrgC),\n        backgroundColor: (0, $klnll.parseColor)(f.BckC)\n    };\n    if ('Fltr' in f) switch(f.Fltr._classID){\n        case 'boxblur':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'box blur',\n                filter: {\n                    radius: (0, $klnll.parseUnits)(f.Fltr['Rds '])\n                }\n            });\n        case 'GsnB':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'gaussian blur',\n                filter: {\n                    radius: (0, $klnll.parseUnits)(f.Fltr['Rds '])\n                }\n            });\n        case 'MtnB':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'motion blur',\n                filter: {\n                    angle: f.Fltr.Angl,\n                    distance: (0, $klnll.parseUnits)(f.Fltr.Dstn)\n                }\n            });\n        case 'RdlB':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'radial blur',\n                filter: {\n                    amount: f.Fltr.Amnt,\n                    method: $klnll.BlrM.decode(f.Fltr.BlrM),\n                    quality: $klnll.BlrQ.decode(f.Fltr.BlrQ)\n                }\n            });\n        case 'shapeBlur':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'shape blur',\n                filter: {\n                    radius: (0, $klnll.parseUnits)(f.Fltr['Rds ']),\n                    customShape: {\n                        name: f.Fltr.customShape['Nm  '],\n                        id: f.Fltr.customShape.Idnt\n                    }\n                }\n            });\n        case 'SmrB':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'smart blur',\n                filter: {\n                    radius: f.Fltr['Rds '],\n                    threshold: f.Fltr.Thsh,\n                    quality: $klnll.SmBQ.decode(f.Fltr.SmBQ),\n                    mode: $klnll.SmBM.decode(f.Fltr.SmBM)\n                }\n            });\n        case 'surfaceBlur':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'surface blur',\n                filter: {\n                    radius: (0, $klnll.parseUnits)(f.Fltr['Rds ']),\n                    threshold: f.Fltr.Thsh\n                }\n            });\n        case 'Dspl':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'displace',\n                filter: {\n                    horizontalScale: f.Fltr.HrzS,\n                    verticalScale: f.Fltr.VrtS,\n                    displacementMap: $klnll.DspM.decode(f.Fltr.DspM),\n                    undefinedAreas: $klnll.UndA.decode(f.Fltr.UndA),\n                    displacementFile: {\n                        signature: f.Fltr.DspF.sig,\n                        path: f.Fltr.DspF.path\n                    }\n                }\n            });\n        case 'Pnch':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'pinch',\n                filter: {\n                    amount: f.Fltr.Amnt\n                }\n            });\n        case 'Plr ':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'polar coordinates',\n                filter: {\n                    conversion: $klnll.Cnvr.decode(f.Fltr.Cnvr)\n                }\n            });\n        case 'Rple':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'ripple',\n                filter: {\n                    amount: f.Fltr.Amnt,\n                    size: $klnll.RplS.decode(f.Fltr.RplS)\n                }\n            });\n        case 'Shr ':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'shear',\n                filter: {\n                    shearPoints: f.Fltr.ShrP.map(function(p) {\n                        return {\n                            x: p.Hrzn,\n                            y: p.Vrtc\n                        };\n                    }),\n                    shearStart: f.Fltr.ShrS,\n                    shearEnd: f.Fltr.ShrE,\n                    undefinedAreas: $klnll.UndA.decode(f.Fltr.UndA)\n                }\n            });\n        case 'Sphr':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'spherize',\n                filter: {\n                    amount: f.Fltr.Amnt,\n                    mode: $klnll.SphM.decode(f.Fltr.SphM)\n                }\n            });\n        case 'Twrl':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'twirl',\n                filter: {\n                    angle: f.Fltr.Angl\n                }\n            });\n        case 'Wave':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'wave',\n                filter: {\n                    numberOfGenerators: f.Fltr.NmbG,\n                    type: $klnll.Wvtp.decode(f.Fltr.Wvtp),\n                    wavelength: {\n                        min: f.Fltr.WLMn,\n                        max: f.Fltr.WLMx\n                    },\n                    amplitude: {\n                        min: f.Fltr.AmMn,\n                        max: f.Fltr.AmMx\n                    },\n                    scale: {\n                        x: f.Fltr.SclH,\n                        y: f.Fltr.SclV\n                    },\n                    randomSeed: f.Fltr.RndS,\n                    undefinedAreas: $klnll.UndA.decode(f.Fltr.UndA)\n                }\n            });\n        case 'ZgZg':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'zigzag',\n                filter: {\n                    amount: f.Fltr.Amnt,\n                    ridges: f.Fltr.NmbR,\n                    style: $klnll.ZZTy.decode(f.Fltr.ZZTy)\n                }\n            });\n        case 'AdNs':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'add noise',\n                filter: {\n                    amount: (0, $klnll.parsePercent)(f.Fltr.Nose),\n                    distribution: $klnll.Dstr.decode(f.Fltr.Dstr),\n                    monochromatic: f.Fltr.Mnch,\n                    randomSeed: f.Fltr.FlRs\n                }\n            });\n        case 'DstS':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'dust and scratches',\n                filter: {\n                    radius: f.Fltr['Rds '],\n                    threshold: f.Fltr.Thsh\n                }\n            });\n        case 'Mdn ':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'median',\n                filter: {\n                    radius: (0, $klnll.parseUnits)(f.Fltr['Rds '])\n                }\n            });\n        case 'denoise':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'reduce noise',\n                filter: {\n                    preset: f.Fltr.preset,\n                    removeJpegArtifact: f.Fltr.removeJPEGArtifact,\n                    reduceColorNoise: (0, $klnll.parsePercent)(f.Fltr.ClNs),\n                    sharpenDetails: (0, $klnll.parsePercent)(f.Fltr.Shrp),\n                    channelDenoise: f.Fltr.channelDenoise.map(function(c) {\n                        return $92b49e225bf9343c$var$__assign({\n                            channels: c.Chnl.map($klnll.Chnl.decode),\n                            amount: c.Amnt\n                        }, c.EdgF ? {\n                            preserveDetails: c.EdgF\n                        } : {});\n                    })\n                }\n            });\n        case 'ClrH':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'color halftone',\n                filter: {\n                    radius: f.Fltr['Rds '],\n                    angle1: f.Fltr.Ang1,\n                    angle2: f.Fltr.Ang2,\n                    angle3: f.Fltr.Ang3,\n                    angle4: f.Fltr.Ang4\n                }\n            });\n        case 'Crst':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'crystallize',\n                filter: {\n                    cellSize: f.Fltr.ClSz,\n                    randomSeed: f.Fltr.FlRs\n                }\n            });\n        case 'Mztn':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'mezzotint',\n                filter: {\n                    type: $klnll.MztT.decode(f.Fltr.MztT),\n                    randomSeed: f.Fltr.FlRs\n                }\n            });\n        case 'Msc ':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'mosaic',\n                filter: {\n                    cellSize: (0, $klnll.parseUnits)(f.Fltr.ClSz)\n                }\n            });\n        case 'Pntl':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'pointillize',\n                filter: {\n                    cellSize: f.Fltr.ClSz,\n                    randomSeed: f.Fltr.FlRs\n                }\n            });\n        case 'Clds':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'clouds',\n                filter: {\n                    randomSeed: f.Fltr.FlRs\n                }\n            });\n        case 'DfrC':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'difference clouds',\n                filter: {\n                    randomSeed: f.Fltr.FlRs\n                }\n            });\n        case 'Fbrs':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'fibers',\n                filter: {\n                    variance: f.Fltr.Vrnc,\n                    strength: f.Fltr.Strg,\n                    randomSeed: f.Fltr.RndS\n                }\n            });\n        case 'LnsF':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'lens flare',\n                filter: {\n                    brightness: f.Fltr.Brgh,\n                    position: {\n                        x: f.Fltr.FlrC.Hrzn,\n                        y: f.Fltr.FlrC.Vrtc\n                    },\n                    lensType: $klnll.Lns.decode(f.Fltr['Lns '])\n                }\n            });\n        case 'smartSharpen':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'smart sharpen',\n                filter: {\n                    amount: (0, $klnll.parsePercent)(f.Fltr.Amnt),\n                    radius: (0, $klnll.parseUnits)(f.Fltr['Rds ']),\n                    threshold: f.Fltr.Thsh,\n                    angle: f.Fltr.Angl,\n                    moreAccurate: f.Fltr.moreAccurate,\n                    blur: $klnll.blurType.decode(f.Fltr.blur),\n                    preset: f.Fltr.preset,\n                    shadow: {\n                        fadeAmount: (0, $klnll.parsePercent)(f.Fltr.sdwM.Amnt),\n                        tonalWidth: (0, $klnll.parsePercent)(f.Fltr.sdwM.Wdth),\n                        radius: f.Fltr.sdwM['Rds ']\n                    },\n                    highlight: {\n                        fadeAmount: (0, $klnll.parsePercent)(f.Fltr.hglM.Amnt),\n                        tonalWidth: (0, $klnll.parsePercent)(f.Fltr.hglM.Wdth),\n                        radius: f.Fltr.hglM['Rds ']\n                    }\n                }\n            });\n        case 'UnsM':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'unsharp mask',\n                filter: {\n                    amount: (0, $klnll.parsePercent)(f.Fltr.Amnt),\n                    radius: (0, $klnll.parseUnits)(f.Fltr['Rds ']),\n                    threshold: f.Fltr.Thsh\n                }\n            });\n        case 'Dfs ':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'diffuse',\n                filter: {\n                    mode: $klnll.DfsM.decode(f.Fltr['Md  ']),\n                    randomSeed: f.Fltr.FlRs\n                }\n            });\n        case 'Embs':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'emboss',\n                filter: {\n                    angle: f.Fltr.Angl,\n                    height: f.Fltr.Hght,\n                    amount: f.Fltr.Amnt\n                }\n            });\n        case 'Extr':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'extrude',\n                filter: {\n                    type: $klnll.ExtT.decode(f.Fltr.ExtT),\n                    size: f.Fltr.ExtS,\n                    depth: f.Fltr.ExtD,\n                    depthMode: $klnll.ExtR.decode(f.Fltr.ExtR),\n                    randomSeed: f.Fltr.FlRs,\n                    solidFrontFaces: f.Fltr.ExtF,\n                    maskIncompleteBlocks: f.Fltr.ExtM\n                }\n            });\n        case 'Tls ':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'tiles',\n                filter: {\n                    numberOfTiles: f.Fltr.TlNm,\n                    maximumOffset: f.Fltr.TlOf,\n                    fillEmptyAreaWith: $klnll.FlCl.decode(f.Fltr.FlCl),\n                    randomSeed: f.Fltr.FlRs\n                }\n            });\n        case 'TrcC':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'trace contour',\n                filter: {\n                    level: f.Fltr['Lvl '],\n                    edge: $klnll.CntE.decode(f.Fltr['Edg '])\n                }\n            });\n        case 'Wnd ':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'wind',\n                filter: {\n                    method: $klnll.WndM.decode(f.Fltr.WndM),\n                    direction: $klnll.Drct.decode(f.Fltr.Drct)\n                }\n            });\n        case 'Dntr':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'de-interlace',\n                filter: {\n                    eliminate: $klnll.IntE.decode(f.Fltr.IntE),\n                    newFieldsBy: $klnll.IntC.decode(f.Fltr.IntC)\n                }\n            });\n        case 'Cstm':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'custom',\n                filter: {\n                    scale: f.Fltr['Scl '],\n                    offset: f.Fltr.Ofst,\n                    matrix: f.Fltr.Mtrx\n                }\n            });\n        case 'HghP':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'high pass',\n                filter: {\n                    radius: (0, $klnll.parseUnits)(f.Fltr['Rds '])\n                }\n            });\n        case 'Mxm ':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'maximum',\n                filter: {\n                    radius: (0, $klnll.parseUnits)(f.Fltr['Rds '])\n                }\n            });\n        case 'Mnm ':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'minimum',\n                filter: {\n                    radius: (0, $klnll.parseUnits)(f.Fltr['Rds '])\n                }\n            });\n        case 'Ofst':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'offset',\n                filter: {\n                    horizontal: f.Fltr.Hrzn,\n                    vertical: f.Fltr.Vrtc,\n                    undefinedAreas: $klnll.FlMd.decode(f.Fltr['Fl  '])\n                }\n            });\n        case 'rigidTransform':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'puppet',\n                filter: {\n                    rigidType: f.Fltr.rigidType,\n                    bounds: [\n                        {\n                            x: f.Fltr.PuX0,\n                            y: f.Fltr.PuY0\n                        },\n                        {\n                            x: f.Fltr.PuX1,\n                            y: f.Fltr.PuY1\n                        },\n                        {\n                            x: f.Fltr.PuX2,\n                            y: f.Fltr.PuY2\n                        },\n                        {\n                            x: f.Fltr.PuX3,\n                            y: f.Fltr.PuY3\n                        }\n                    ],\n                    puppetShapeList: f.Fltr.puppetShapeList.map(function(p) {\n                        return {\n                            rigidType: p.rigidType,\n                            // TODO: VrsM\n                            // TODO: VrsN\n                            originalVertexArray: $92b49e225bf9343c$var$uint8ToPoints(p.originalVertexArray),\n                            deformedVertexArray: $92b49e225bf9343c$var$uint8ToPoints(p.deformedVertexArray),\n                            indexArray: Array.from($92b49e225bf9343c$var$uint8ToUint32(p.indexArray)),\n                            pinOffsets: $92b49e225bf9343c$var$arrayToPoints(p.pinOffsets),\n                            posFinalPins: $92b49e225bf9343c$var$arrayToPoints(p.posFinalPins),\n                            pinVertexIndices: p.pinVertexIndices,\n                            selectedPin: p.selectedPin,\n                            pinPosition: $92b49e225bf9343c$var$arrayToPoints(p.PinP),\n                            pinRotation: p.PnRt,\n                            pinOverlay: p.PnOv,\n                            pinDepth: p.PnDp,\n                            meshQuality: p.meshQuality,\n                            meshExpansion: p.meshExpansion,\n                            meshRigidity: p.meshRigidity,\n                            imageResolution: p.imageResolution,\n                            meshBoundaryPath: {\n                                pathComponents: p.meshBoundaryPath.pathComponents.map(function(c) {\n                                    return {\n                                        shapeOperation: c.shapeOperation.split('.')[1],\n                                        paths: c.SbpL.map(function(t) {\n                                            return {\n                                                closed: t.Clsp,\n                                                points: t['Pts '].map(function(pt) {\n                                                    return {\n                                                        anchor: $92b49e225bf9343c$var$hrznVrtcToPoint(pt.Anch),\n                                                        forward: $92b49e225bf9343c$var$hrznVrtcToPoint(pt['Fwd ']),\n                                                        backward: $92b49e225bf9343c$var$hrznVrtcToPoint(pt['Bwd ']),\n                                                        smooth: pt.Smoo\n                                                    };\n                                                })\n                                            };\n                                        })\n                                    };\n                                })\n                            }\n                        };\n                    })\n                }\n            });\n        case 'PbPl':\n            var parameters = [];\n            var Flrt = f.Fltr;\n            for(var i = 0; i < $92b49e225bf9343c$var$fromAtoZ.length; i++){\n                if (!Flrt[\"PN\".concat($92b49e225bf9343c$var$fromAtoZ[i], \"a\")]) break;\n                for(var j = 0; j < $92b49e225bf9343c$var$fromAtoZ.length; j++){\n                    if (!Flrt[\"PN\".concat($92b49e225bf9343c$var$fromAtoZ[i]).concat($92b49e225bf9343c$var$fromAtoZ[j])]) break;\n                    parameters.push({\n                        name: Flrt[\"PN\".concat($92b49e225bf9343c$var$fromAtoZ[i]).concat($92b49e225bf9343c$var$fromAtoZ[j])],\n                        value: Flrt[\"PF\".concat($92b49e225bf9343c$var$fromAtoZ[i]).concat($92b49e225bf9343c$var$fromAtoZ[j])]\n                    });\n                }\n            }\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'oil paint plugin',\n                filter: {\n                    name: f.Fltr.KnNm,\n                    gpu: f.Fltr.GpuY,\n                    lighting: f.Fltr.LIWy,\n                    parameters: parameters\n                }\n            });\n        // case 2089: return {\n        // \t...base,\n        // \ttype: 'adaptive wide angle',\n        // \tparams: {\n        // \t\tcorrection: prjM.decode(f.Fltr.prjM),\n        // \t\tfocalLength: f.Fltr.focL,\n        // \t\tcropFactor: f.Fltr.CrpF,\n        // \t\timageScale: f.Fltr.imgS,\n        // \t\timageX: f.Fltr.imgX,\n        // \t\timageY: f.Fltr.imgY,\n        // \t},\n        // };\n        case 'HsbP':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'hsb/hsl',\n                filter: {\n                    inputMode: $klnll.ClrS.decode(f.Fltr.Inpt),\n                    rowOrder: $klnll.ClrS.decode(f.Fltr.Otpt)\n                }\n            });\n        case 'oilPaint':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'oil paint',\n                filter: {\n                    lightingOn: f.Fltr.lightingOn,\n                    stylization: f.Fltr.stylization,\n                    cleanliness: f.Fltr.cleanliness,\n                    brushScale: f.Fltr.brushScale,\n                    microBrush: f.Fltr.microBrush,\n                    lightDirection: f.Fltr.LghD,\n                    specularity: f.Fltr.specularity\n                }\n            });\n        case 'LqFy':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'liquify',\n                filter: {\n                    liquifyMesh: f.Fltr.LqMe\n                }\n            });\n        case 'perspectiveWarpTransform':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'perspective warp',\n                filter: {\n                    vertices: f.Fltr.vertices.map($92b49e225bf9343c$var$hrznVrtcToPoint),\n                    warpedVertices: f.Fltr.warpedVertices.map($92b49e225bf9343c$var$hrznVrtcToPoint),\n                    quads: f.Fltr.quads.map(function(q) {\n                        return q.indices;\n                    })\n                }\n            });\n        case 'Crvs':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'curves',\n                filter: $92b49e225bf9343c$var$__assign({\n                    presetKind: $klnll.presetKindType.decode(f.Fltr.presetKind)\n                }, f.Fltr.Adjs ? {\n                    adjustments: f.Fltr.Adjs.map(function(a) {\n                        var channels = a.Chnl.map($klnll.Chnl.decode);\n                        if (a['Crv ']) return {\n                            channels: channels,\n                            curve: a['Crv '].map(function(c) {\n                                var point = {\n                                    x: c.Hrzn,\n                                    y: c.Vrtc\n                                };\n                                if (c.Cnty) point.curved = true;\n                                return point;\n                            })\n                        };\n                        else if (a.Mpng) return {\n                            channels: channels,\n                            values: a.Mpng\n                        };\n                        else throw new Error(\"Unknown curve adjustment\");\n                    })\n                } : {})\n            });\n        case 'BrgC':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'brightness/contrast',\n                filter: {\n                    brightness: f.Fltr.Brgh,\n                    contrast: f.Fltr.Cntr,\n                    useLegacy: !!f.Fltr.useLegacy\n                }\n            });\n        default:\n            if (options.throwForMissingFeatures) // console.log('FILTER', require('util').inspect(f, false, 99, true));\n            throw new Error(\"Unknown filter classId: \".concat(f.Fltr._classID));\n            return undefined;\n    }\n    else switch(f.filterID){\n        case 1098281575:\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'average'\n            });\n        case 1114403360:\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'blur'\n            });\n        case 1114403405:\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'blur more'\n            });\n        case 1148416099:\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'despeckle'\n            });\n        case 1180922912:\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'facet'\n            });\n        case 1181902701:\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'fragment'\n            });\n        case 1399353968:\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'sharpen'\n            });\n        case 1399353925:\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'sharpen edges'\n            });\n        case 1399353933:\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'sharpen more'\n            });\n        case 1181639749:\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'find edges'\n            });\n        case 1399616122:\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'solarize'\n            });\n        case 1314149187:\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'ntsc colors'\n            });\n        case 1231976050:\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                type: 'invert'\n            });\n        default:\n            if (options.throwForMissingFeatures) // console.log('FILTER', require('util').inspect(f, false, 99, true));\n            throw new Error(\"Unknown filterID: \".concat(f.filterID));\n    }\n}\nfunction $92b49e225bf9343c$var$parseFilterFX(desc, options) {\n    return {\n        enabled: desc.enab,\n        validAtPosition: desc.validAtPosition,\n        maskEnabled: desc.filterMaskEnable,\n        maskLinked: desc.filterMaskLinked,\n        maskExtendWithWhite: desc.filterMaskExtendWithWhite,\n        list: desc.filterFXList.map(function(x) {\n            return $92b49e225bf9343c$var$parseFilterFXItem(x, options);\n        }).filter(function(x) {\n            return !!x;\n        })\n    };\n}\nfunction $92b49e225bf9343c$var$uvRadius(t) {\n    return (0, $klnll.unitsValue)(t.radius, 'radius');\n}\nfunction $92b49e225bf9343c$var$serializeFilterFXItem(f) {\n    var base = {\n        _name: '',\n        _classID: 'filterFX',\n        'Nm  ': f.name,\n        blendOptions: {\n            _name: '',\n            _classID: 'blendOptions',\n            Opct: (0, $klnll.unitsPercentF)(f.opacity),\n            'Md  ': $klnll.BlnM.encode(f.blendMode)\n        },\n        enab: f.enabled,\n        hasoptions: f.hasOptions,\n        FrgC: (0, $klnll.serializeColor)(f.foregroundColor),\n        BckC: (0, $klnll.serializeColor)(f.backgroundColor)\n    };\n    switch(f.type){\n        case 'average':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                filterID: 1098281575\n            });\n        case 'blur':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                filterID: 1114403360\n            });\n        case 'blur more':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                filterID: 1114403405\n            });\n        case 'box blur':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Box Blur',\n                    _classID: 'boxblur',\n                    'Rds ': $92b49e225bf9343c$var$uvRadius(f.filter)\n                },\n                filterID: 697\n            });\n        case 'gaussian blur':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    // _name: '高斯模糊', // Testing\n                    _name: 'Gaussian Blur',\n                    _classID: 'GsnB',\n                    'Rds ': $92b49e225bf9343c$var$uvRadius(f.filter)\n                },\n                filterID: 1198747202\n            });\n        case 'motion blur':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Motion Blur',\n                    _classID: 'MtnB',\n                    Angl: f.filter.angle,\n                    Dstn: (0, $klnll.unitsValue)(f.filter.distance, 'distance')\n                },\n                filterID: 1299476034\n            });\n        case 'radial blur':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Radial Blur',\n                    _classID: 'RdlB',\n                    Amnt: f.filter.amount,\n                    BlrM: $klnll.BlrM.encode(f.filter.method),\n                    BlrQ: $klnll.BlrQ.encode(f.filter.quality)\n                },\n                filterID: 1382313026\n            });\n        case 'shape blur':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Shape Blur',\n                    _classID: 'shapeBlur',\n                    'Rds ': $92b49e225bf9343c$var$uvRadius(f.filter),\n                    customShape: {\n                        _name: '',\n                        _classID: 'customShape',\n                        'Nm  ': f.filter.customShape.name,\n                        Idnt: f.filter.customShape.id\n                    }\n                },\n                filterID: 702\n            });\n        case 'smart blur':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Smart Blur',\n                    _classID: 'SmrB',\n                    'Rds ': f.filter.radius,\n                    Thsh: f.filter.threshold,\n                    SmBQ: $klnll.SmBQ.encode(f.filter.quality),\n                    SmBM: $klnll.SmBM.encode(f.filter.mode)\n                },\n                filterID: 1399681602\n            });\n        case 'surface blur':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Surface Blur',\n                    _classID: 'surfaceBlur',\n                    'Rds ': $92b49e225bf9343c$var$uvRadius(f.filter),\n                    Thsh: f.filter.threshold\n                },\n                filterID: 701\n            });\n        case 'displace':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Displace',\n                    _classID: 'Dspl',\n                    HrzS: f.filter.horizontalScale,\n                    VrtS: f.filter.verticalScale,\n                    DspM: $klnll.DspM.encode(f.filter.displacementMap),\n                    UndA: $klnll.UndA.encode(f.filter.undefinedAreas),\n                    DspF: {\n                        sig: f.filter.displacementFile.signature,\n                        path: f.filter.displacementFile.path\n                    }\n                },\n                filterID: 1148416108\n            });\n        case 'pinch':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Pinch',\n                    _classID: 'Pnch',\n                    Amnt: f.filter.amount\n                },\n                filterID: 1349411688\n            });\n        case 'polar coordinates':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Polar Coordinates',\n                    _classID: 'Plr ',\n                    Cnvr: $klnll.Cnvr.encode(f.filter.conversion)\n                },\n                filterID: 1349284384\n            });\n        case 'ripple':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Ripple',\n                    _classID: 'Rple',\n                    Amnt: f.filter.amount,\n                    RplS: $klnll.RplS.encode(f.filter.size)\n                },\n                filterID: 1383099493\n            });\n        case 'shear':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Shear',\n                    _classID: 'Shr ',\n                    ShrP: f.filter.shearPoints.map(function(p) {\n                        return {\n                            _name: '',\n                            _classID: 'Pnt ',\n                            Hrzn: p.x,\n                            Vrtc: p.y\n                        };\n                    }),\n                    UndA: $klnll.UndA.encode(f.filter.undefinedAreas),\n                    ShrS: f.filter.shearStart,\n                    ShrE: f.filter.shearEnd\n                },\n                filterID: 1399353888\n            });\n        case 'spherize':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Spherize',\n                    _classID: 'Sphr',\n                    Amnt: f.filter.amount,\n                    SphM: $klnll.SphM.encode(f.filter.mode)\n                },\n                filterID: 1399875698\n            });\n        case 'twirl':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Twirl',\n                    _classID: 'Twrl',\n                    Angl: f.filter.angle\n                },\n                filterID: 1417114220\n            });\n        case 'wave':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Wave',\n                    _classID: 'Wave',\n                    Wvtp: $klnll.Wvtp.encode(f.filter.type),\n                    NmbG: f.filter.numberOfGenerators,\n                    WLMn: f.filter.wavelength.min,\n                    WLMx: f.filter.wavelength.max,\n                    AmMn: f.filter.amplitude.min,\n                    AmMx: f.filter.amplitude.max,\n                    SclH: f.filter.scale.x,\n                    SclV: f.filter.scale.y,\n                    UndA: $klnll.UndA.encode(f.filter.undefinedAreas),\n                    RndS: f.filter.randomSeed\n                },\n                filterID: 1466005093\n            });\n        case 'zigzag':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'ZigZag',\n                    _classID: 'ZgZg',\n                    Amnt: f.filter.amount,\n                    NmbR: f.filter.ridges,\n                    ZZTy: $klnll.ZZTy.encode(f.filter.style)\n                },\n                filterID: 1516722791\n            });\n        case 'add noise':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Add Noise',\n                    _classID: 'AdNs',\n                    Dstr: $klnll.Dstr.encode(f.filter.distribution),\n                    Nose: (0, $klnll.unitsPercentF)(f.filter.amount),\n                    Mnch: f.filter.monochromatic,\n                    FlRs: f.filter.randomSeed\n                },\n                filterID: 1097092723\n            });\n        case 'despeckle':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                filterID: 1148416099\n            });\n        case 'dust and scratches':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Dust & Scratches',\n                    _classID: 'DstS',\n                    'Rds ': f.filter.radius,\n                    Thsh: f.filter.threshold\n                },\n                filterID: 1148417107\n            });\n        case 'median':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Median',\n                    _classID: 'Mdn ',\n                    'Rds ': $92b49e225bf9343c$var$uvRadius(f.filter)\n                },\n                filterID: 1298427424\n            });\n        case 'reduce noise':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Reduce Noise',\n                    _classID: 'denoise',\n                    ClNs: (0, $klnll.unitsPercentF)(f.filter.reduceColorNoise),\n                    Shrp: (0, $klnll.unitsPercentF)(f.filter.sharpenDetails),\n                    removeJPEGArtifact: f.filter.removeJpegArtifact,\n                    channelDenoise: f.filter.channelDenoise.map(function(c) {\n                        return $92b49e225bf9343c$var$__assign({\n                            _name: '',\n                            _classID: 'channelDenoiseParams',\n                            Chnl: c.channels.map(function(i) {\n                                return $klnll.Chnl.encode(i);\n                            }),\n                            Amnt: c.amount\n                        }, c.preserveDetails ? {\n                            EdgF: c.preserveDetails\n                        } : {});\n                    }),\n                    preset: f.filter.preset\n                },\n                filterID: 633\n            });\n        case 'color halftone':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Color Halftone',\n                    _classID: 'ClrH',\n                    'Rds ': f.filter.radius,\n                    Ang1: f.filter.angle1,\n                    Ang2: f.filter.angle2,\n                    Ang3: f.filter.angle3,\n                    Ang4: f.filter.angle4\n                },\n                filterID: 1131180616\n            });\n        case 'crystallize':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Crystallize',\n                    _classID: 'Crst',\n                    ClSz: f.filter.cellSize,\n                    FlRs: f.filter.randomSeed\n                },\n                filterID: 1131574132\n            });\n        case 'facet':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                filterID: 1180922912\n            });\n        case 'fragment':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                filterID: 1181902701\n            });\n        case 'mezzotint':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Mezzotint',\n                    _classID: 'Mztn',\n                    MztT: $klnll.MztT.encode(f.filter.type),\n                    FlRs: f.filter.randomSeed\n                },\n                filterID: 1299870830\n            });\n        case 'mosaic':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Mosaic',\n                    _classID: 'Msc ',\n                    ClSz: (0, $klnll.unitsValue)(f.filter.cellSize, 'cellSize')\n                },\n                filterID: 1299407648\n            });\n        case 'pointillize':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Pointillize',\n                    _classID: 'Pntl',\n                    ClSz: f.filter.cellSize,\n                    FlRs: f.filter.randomSeed\n                },\n                filterID: 1349416044\n            });\n        case 'clouds':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Clouds',\n                    _classID: 'Clds',\n                    FlRs: f.filter.randomSeed\n                },\n                filterID: 1131177075\n            });\n        case 'difference clouds':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Difference Clouds',\n                    _classID: 'DfrC',\n                    FlRs: f.filter.randomSeed\n                },\n                filterID: 1147564611\n            });\n        case 'fibers':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Fibers',\n                    _classID: 'Fbrs',\n                    Vrnc: f.filter.variance,\n                    Strg: f.filter.strength,\n                    RndS: f.filter.randomSeed\n                },\n                filterID: 1180856947\n            });\n        case 'lens flare':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Lens Flare',\n                    _classID: 'LnsF',\n                    Brgh: f.filter.brightness,\n                    FlrC: {\n                        _name: '',\n                        _classID: 'Pnt ',\n                        Hrzn: f.filter.position.x,\n                        Vrtc: f.filter.position.y\n                    },\n                    'Lns ': $klnll.Lns.encode(f.filter.lensType)\n                },\n                filterID: 1282306886\n            });\n        case 'sharpen':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                filterID: 1399353968\n            });\n        case 'sharpen edges':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                filterID: 1399353925\n            });\n        case 'sharpen more':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                filterID: 1399353933\n            });\n        case 'smart sharpen':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Smart Sharpen',\n                    _classID: 'smartSharpen',\n                    Amnt: (0, $klnll.unitsPercentF)(f.filter.amount),\n                    'Rds ': $92b49e225bf9343c$var$uvRadius(f.filter),\n                    Thsh: f.filter.threshold,\n                    Angl: f.filter.angle,\n                    moreAccurate: f.filter.moreAccurate,\n                    blur: $klnll.blurType.encode(f.filter.blur),\n                    preset: f.filter.preset,\n                    sdwM: {\n                        _name: 'Parameters',\n                        _classID: 'adaptCorrectTones',\n                        Amnt: (0, $klnll.unitsPercentF)(f.filter.shadow.fadeAmount),\n                        Wdth: (0, $klnll.unitsPercentF)(f.filter.shadow.tonalWidth),\n                        'Rds ': f.filter.shadow.radius\n                    },\n                    hglM: {\n                        _name: 'Parameters',\n                        _classID: 'adaptCorrectTones',\n                        Amnt: (0, $klnll.unitsPercentF)(f.filter.highlight.fadeAmount),\n                        Wdth: (0, $klnll.unitsPercentF)(f.filter.highlight.tonalWidth),\n                        'Rds ': f.filter.highlight.radius\n                    }\n                },\n                filterID: 698\n            });\n        case 'unsharp mask':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Unsharp Mask',\n                    _classID: 'UnsM',\n                    Amnt: (0, $klnll.unitsPercentF)(f.filter.amount),\n                    'Rds ': $92b49e225bf9343c$var$uvRadius(f.filter),\n                    Thsh: f.filter.threshold\n                },\n                filterID: 1433301837\n            });\n        case 'diffuse':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Diffuse',\n                    _classID: 'Dfs ',\n                    'Md  ': $klnll.DfsM.encode(f.filter.mode),\n                    FlRs: f.filter.randomSeed\n                },\n                filterID: 1147564832\n            });\n        case 'emboss':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Emboss',\n                    _classID: 'Embs',\n                    Angl: f.filter.angle,\n                    Hght: f.filter.height,\n                    Amnt: f.filter.amount\n                },\n                filterID: 1164796531\n            });\n        case 'extrude':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Extrude',\n                    _classID: 'Extr',\n                    ExtS: f.filter.size,\n                    ExtD: f.filter.depth,\n                    ExtF: f.filter.solidFrontFaces,\n                    ExtM: f.filter.maskIncompleteBlocks,\n                    ExtT: $klnll.ExtT.encode(f.filter.type),\n                    ExtR: $klnll.ExtR.encode(f.filter.depthMode),\n                    FlRs: f.filter.randomSeed\n                },\n                filterID: 1165522034\n            });\n        case 'find edges':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                filterID: 1181639749\n            });\n        case 'solarize':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                filterID: 1399616122\n            });\n        case 'tiles':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Tiles',\n                    _classID: 'Tls ',\n                    TlNm: f.filter.numberOfTiles,\n                    TlOf: f.filter.maximumOffset,\n                    FlCl: $klnll.FlCl.encode(f.filter.fillEmptyAreaWith),\n                    FlRs: f.filter.randomSeed\n                },\n                filterID: 1416393504\n            });\n        case 'trace contour':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Trace Contour',\n                    _classID: 'TrcC',\n                    'Lvl ': f.filter.level,\n                    'Edg ': $klnll.CntE.encode(f.filter.edge)\n                },\n                filterID: 1416782659\n            });\n        case 'wind':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Wind',\n                    _classID: 'Wnd ',\n                    WndM: $klnll.WndM.encode(f.filter.method),\n                    Drct: $klnll.Drct.encode(f.filter.direction)\n                },\n                filterID: 1466852384\n            });\n        case 'de-interlace':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'De-Interlace',\n                    _classID: 'Dntr',\n                    IntE: $klnll.IntE.encode(f.filter.eliminate),\n                    IntC: $klnll.IntC.encode(f.filter.newFieldsBy)\n                },\n                filterID: 1148089458\n            });\n        case 'ntsc colors':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                filterID: 1314149187\n            });\n        case 'invert':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                filterID: 1231976050\n            });\n        case 'custom':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Custom',\n                    _classID: 'Cstm',\n                    'Scl ': f.filter.scale,\n                    Ofst: f.filter.offset,\n                    Mtrx: f.filter.matrix\n                },\n                filterID: 1131639917\n            });\n        case 'high pass':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'High Pass',\n                    _classID: 'HghP',\n                    'Rds ': $92b49e225bf9343c$var$uvRadius(f.filter)\n                },\n                filterID: 1214736464\n            });\n        case 'maximum':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Maximum',\n                    _classID: 'Mxm ',\n                    'Rds ': $92b49e225bf9343c$var$uvRadius(f.filter)\n                },\n                filterID: 1299737888\n            });\n        case 'minimum':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Minimum',\n                    _classID: 'Mnm ',\n                    'Rds ': $92b49e225bf9343c$var$uvRadius(f.filter)\n                },\n                filterID: 1299082528\n            });\n        case 'offset':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Offset',\n                    _classID: 'Ofst',\n                    Hrzn: f.filter.horizontal,\n                    Vrtc: f.filter.vertical,\n                    'Fl  ': $klnll.FlMd.encode(f.filter.undefinedAreas)\n                },\n                filterID: 1332114292\n            });\n        case 'puppet':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Rigid Transform',\n                    _classID: 'rigidTransform',\n                    'null': [\n                        'Ordn.Trgt'\n                    ],\n                    rigidType: f.filter.rigidType,\n                    puppetShapeList: f.filter.puppetShapeList.map(function(p) {\n                        return {\n                            _name: '',\n                            _classID: 'puppetShape',\n                            rigidType: p.rigidType,\n                            VrsM: 1,\n                            VrsN: 0,\n                            originalVertexArray: $92b49e225bf9343c$var$toUint8(new Float32Array($92b49e225bf9343c$var$pointsToArray(p.originalVertexArray))),\n                            deformedVertexArray: $92b49e225bf9343c$var$toUint8(new Float32Array($92b49e225bf9343c$var$pointsToArray(p.deformedVertexArray))),\n                            indexArray: $92b49e225bf9343c$var$toUint8(new Uint32Array(p.indexArray)),\n                            pinOffsets: $92b49e225bf9343c$var$pointsToArray(p.pinOffsets),\n                            posFinalPins: $92b49e225bf9343c$var$pointsToArray(p.posFinalPins),\n                            pinVertexIndices: p.pinVertexIndices,\n                            PinP: $92b49e225bf9343c$var$pointsToArray(p.pinPosition),\n                            PnRt: p.pinRotation,\n                            PnOv: p.pinOverlay,\n                            PnDp: p.pinDepth,\n                            meshQuality: p.meshQuality,\n                            meshExpansion: p.meshExpansion,\n                            meshRigidity: p.meshRigidity,\n                            imageResolution: p.imageResolution,\n                            meshBoundaryPath: {\n                                _name: '',\n                                _classID: 'pathClass',\n                                pathComponents: p.meshBoundaryPath.pathComponents.map(function(c) {\n                                    return {\n                                        _name: '',\n                                        _classID: 'PaCm',\n                                        shapeOperation: \"shapeOperation.\".concat(c.shapeOperation),\n                                        SbpL: c.paths.map(function(path) {\n                                            return {\n                                                _name: '',\n                                                _classID: 'Sbpl',\n                                                Clsp: path.closed,\n                                                'Pts ': path.points.map(function(pt) {\n                                                    return {\n                                                        _name: '',\n                                                        _classID: 'Pthp',\n                                                        Anch: $92b49e225bf9343c$var$pointToHrznVrtc(pt.anchor),\n                                                        'Fwd ': $92b49e225bf9343c$var$pointToHrznVrtc(pt.forward),\n                                                        'Bwd ': $92b49e225bf9343c$var$pointToHrznVrtc(pt.backward),\n                                                        Smoo: pt.smooth\n                                                    };\n                                                })\n                                            };\n                                        })\n                                    };\n                                })\n                            },\n                            selectedPin: p.selectedPin\n                        };\n                    }),\n                    PuX0: f.filter.bounds[0].x,\n                    PuX1: f.filter.bounds[1].x,\n                    PuX2: f.filter.bounds[2].x,\n                    PuX3: f.filter.bounds[3].x,\n                    PuY0: f.filter.bounds[0].y,\n                    PuY1: f.filter.bounds[1].y,\n                    PuY2: f.filter.bounds[2].y,\n                    PuY3: f.filter.bounds[3].y\n                },\n                filterID: 991\n            });\n        case 'oil paint plugin':\n            var params = {};\n            for(var i = 0; i < f.filter.parameters.length; i++){\n                var _a = f.filter.parameters[i], name_1 = _a.name, value = _a.value;\n                var suffix = \"\".concat($92b49e225bf9343c$var$fromAtoZ[Math.floor(i / $92b49e225bf9343c$var$fromAtoZ.length)]).concat($92b49e225bf9343c$var$fromAtoZ[i % $92b49e225bf9343c$var$fromAtoZ.length]);\n                params[\"PN\".concat(suffix)] = name_1;\n                params[\"PT\".concat(suffix)] = 0;\n                params[\"PF\".concat(suffix)] = value;\n            }\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: $92b49e225bf9343c$var$__assign({\n                    _name: 'Oil Paint Plugin',\n                    _classID: 'PbPl',\n                    KnNm: f.filter.name,\n                    GpuY: f.filter.gpu,\n                    LIWy: f.filter.lighting,\n                    FPth: '1'\n                }, params),\n                filterID: 1348620396\n            });\n        case 'oil paint':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Oil Paint',\n                    _classID: 'oilPaint',\n                    lightingOn: f.filter.lightingOn,\n                    stylization: f.filter.stylization,\n                    cleanliness: f.filter.cleanliness,\n                    brushScale: f.filter.brushScale,\n                    microBrush: f.filter.microBrush,\n                    LghD: f.filter.lightDirection,\n                    specularity: f.filter.specularity\n                },\n                filterID: 1122\n            });\n        case 'liquify':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Liquify',\n                    _classID: 'LqFy',\n                    LqMe: f.filter.liquifyMesh\n                },\n                filterID: 1282492025\n            });\n        case 'perspective warp':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Perspective Warp',\n                    _classID: 'perspectiveWarpTransform',\n                    vertices: f.filter.vertices.map($92b49e225bf9343c$var$pointToHrznVrtc),\n                    warpedVertices: f.filter.warpedVertices.map($92b49e225bf9343c$var$pointToHrznVrtc),\n                    quads: f.filter.quads.map(function(indices) {\n                        return {\n                            indices: indices\n                        };\n                    })\n                },\n                filterID: 442\n            });\n        case 'curves':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: $92b49e225bf9343c$var$__assign({\n                    _name: 'Curves',\n                    _classID: 'Crvs',\n                    presetKind: $klnll.presetKindType.encode(f.filter.presetKind)\n                }, f.filter.adjustments ? {\n                    Adjs: f.filter.adjustments.map(function(a) {\n                        return 'curve' in a ? {\n                            _name: '',\n                            _classID: 'CrvA',\n                            Chnl: a.channels.map($klnll.Chnl.encode),\n                            'Crv ': a.curve.map(function(c) {\n                                return $92b49e225bf9343c$var$__assign({\n                                    _name: '',\n                                    _classID: 'Pnt ',\n                                    Hrzn: c.x,\n                                    Vrtc: c.y\n                                }, c.curved ? {\n                                    Cnty: true\n                                } : {});\n                            })\n                        } : {\n                            _name: '',\n                            _classID: 'CrvA',\n                            Chnl: a.channels.map($klnll.Chnl.encode),\n                            Mpng: a.values\n                        };\n                    })\n                } : {}),\n                filterID: 1131574899\n            });\n        case 'brightness/contrast':\n            return $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, base), {\n                Fltr: {\n                    _name: 'Brightness/Contrast',\n                    _classID: 'BrgC',\n                    Brgh: f.filter.brightness,\n                    Cntr: f.filter.contrast,\n                    useLegacy: !!f.filter.useLegacy\n                },\n                filterID: 1114793795\n            });\n        // case 'hsb/hsl': return {\n        // TODO: ...\n        // };\n        default:\n            throw new Error(\"Unknow filter type: \".concat(f.type));\n    }\n}\n// let t: any;\nfunction $92b49e225bf9343c$var$getWarpFromPlacedLayer(placed) {\n    if (placed.warp) return placed.warp;\n    if (!placed.width || !placed.height) throw new Error('You must provide width and height of the linked image in placedLayer');\n    var w = placed.width;\n    var h = placed.height;\n    var x0 = 0, x1 = w / 3, x2 = w * 2 / 3, x3 = w;\n    var y0 = 0, y1 = h / 3, y2 = h * 2 / 3, y3 = h;\n    return {\n        style: 'custom',\n        value: 0,\n        perspective: 0,\n        perspectiveOther: 0,\n        rotate: 'horizontal',\n        bounds: {\n            top: {\n                value: 0,\n                units: 'Pixels'\n            },\n            left: {\n                value: 0,\n                units: 'Pixels'\n            },\n            bottom: {\n                value: h,\n                units: 'Pixels'\n            },\n            right: {\n                value: w,\n                units: 'Pixels'\n            }\n        },\n        uOrder: 4,\n        vOrder: 4,\n        customEnvelopeWarp: {\n            meshPoints: [\n                {\n                    x: x0,\n                    y: y0\n                },\n                {\n                    x: x1,\n                    y: y0\n                },\n                {\n                    x: x2,\n                    y: y0\n                },\n                {\n                    x: x3,\n                    y: y0\n                },\n                {\n                    x: x0,\n                    y: y1\n                },\n                {\n                    x: x1,\n                    y: y1\n                },\n                {\n                    x: x2,\n                    y: y1\n                },\n                {\n                    x: x3,\n                    y: y1\n                },\n                {\n                    x: x0,\n                    y: y2\n                },\n                {\n                    x: x1,\n                    y: y2\n                },\n                {\n                    x: x2,\n                    y: y2\n                },\n                {\n                    x: x3,\n                    y: y2\n                },\n                {\n                    x: x0,\n                    y: y3\n                },\n                {\n                    x: x1,\n                    y: y3\n                },\n                {\n                    x: x2,\n                    y: y3\n                },\n                {\n                    x: x3,\n                    y: y3\n                }\n            ]\n        }\n    };\n}\n$92b49e225bf9343c$var$addHandler('SoLd', $92b49e225bf9343c$var$hasKey('placedLayer'), function(reader, target, left) {\n    if ((0, $5OPaf.readSignature)(reader) !== 'soLD') throw new Error(\"Invalid SoLd type\");\n    var version = (0, $5OPaf.readInt32)(reader);\n    if (version !== 4 && version !== 5) throw new Error(\"Invalid SoLd version\");\n    var desc = (0, $klnll.readVersionAndDescriptor)(reader, true);\n    // console.log('SoLd', require('util').inspect(desc, false, 99, true));\n    // console.log('SoLd.warp', require('util').inspect(desc.warp, false, 99, true));\n    // console.log('SoLd.quiltWarp', require('util').inspect(desc.quiltWarp, false, 99, true));\n    // desc.filterFX!.filterFXList[0].Fltr.puppetShapeList[0].meshBoundaryPath.pathComponents[0].SbpL[0]['Pts '] = [];\n    // console.log('read', require('util').inspect(desc.filterFX, false, 99, true));\n    // console.log('filterFXList[0]', require('util').inspect((desc as any).filterFX.filterFXList[0], false, 99, true));\n    // t = desc;\n    target.placedLayer = {\n        id: desc.Idnt,\n        placed: desc.placed,\n        type: $92b49e225bf9343c$var$placedLayerTypes[desc.Type],\n        pageNumber: desc.PgNm,\n        totalPages: desc.totalPages,\n        frameStep: (0, $klnll.frac)(desc.frameStep),\n        duration: (0, $klnll.frac)(desc.duration),\n        frameCount: desc.frameCount,\n        transform: desc.Trnf,\n        width: desc['Sz  '].Wdth,\n        height: desc['Sz  '].Hght,\n        resolution: (0, $klnll.parseUnits)(desc.Rslt),\n        warp: $92b49e225bf9343c$var$parseWarp(desc.quiltWarp || desc.warp)\n    };\n    if (desc.nonAffineTransform && desc.nonAffineTransform.some(function(x, i) {\n        return x !== desc.Trnf[i];\n    })) target.placedLayer.nonAffineTransform = desc.nonAffineTransform;\n    if (desc.Crop) target.placedLayer.crop = desc.Crop;\n    if (desc.comp) target.placedLayer.comp = desc.comp;\n    if (desc.compInfo) target.placedLayer.compInfo = {\n        compID: desc.compInfo.compID,\n        originalCompID: desc.compInfo.originalCompID\n    };\n    if (desc.filterFX) target.placedLayer.filter = $92b49e225bf9343c$var$parseFilterFX(desc.filterFX, reader);\n    // console.log('filter', require('util').inspect(target.placedLayer.filter, false, 99, true));\n    (0, $5OPaf.skipBytes)(reader, left()); // HACK\n}, function(writer, target) {\n    var _a, _b;\n    (0, $kCSTH.writeSignature)(writer, 'soLD');\n    (0, $kCSTH.writeInt32)(writer, 4); // version\n    var placed = target.placedLayer;\n    if (!placed.id || typeof placed.id !== 'string' || !/^[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$/.test(placed.id)) throw new Error('Placed layer ID must be in a GUID format (example: 20953ddb-9391-11ec-b4f1-c15674f50bc4)');\n    var desc = $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({\n        Idnt: placed.id,\n        placed: (_a = placed.placed) !== null && _a !== void 0 ? _a : placed.id,\n        PgNm: placed.pageNumber || 1,\n        totalPages: placed.totalPages || 1\n    }, placed.crop ? {\n        Crop: placed.crop\n    } : {}), {\n        frameStep: placed.frameStep || {\n            numerator: 0,\n            denominator: 600\n        },\n        duration: placed.duration || {\n            numerator: 0,\n            denominator: 600\n        },\n        frameCount: placed.frameCount || 0,\n        Annt: 16,\n        Type: $92b49e225bf9343c$var$placedLayerTypes.indexOf(placed.type),\n        Trnf: placed.transform,\n        nonAffineTransform: (_b = placed.nonAffineTransform) !== null && _b !== void 0 ? _b : placed.transform,\n        // quiltWarp: {} as any,\n        warp: $92b49e225bf9343c$var$encodeWarp($92b49e225bf9343c$var$getWarpFromPlacedLayer(placed)),\n        'Sz  ': {\n            _name: '',\n            _classID: 'Pnt ',\n            Wdth: placed.width || 0,\n            Hght: placed.height || 0\n        },\n        Rslt: placed.resolution ? (0, $klnll.unitsValue)(placed.resolution, 'resolution') : {\n            units: 'Density',\n            value: 72\n        }\n    });\n    if (placed.filter) desc.filterFX = {\n        _name: '',\n        _classID: 'filterFXStyle',\n        enab: placed.filter.enabled,\n        validAtPosition: placed.filter.validAtPosition,\n        filterMaskEnable: placed.filter.maskEnabled,\n        filterMaskLinked: placed.filter.maskLinked,\n        filterMaskExtendWithWhite: placed.filter.maskExtendWithWhite,\n        filterFXList: placed.filter.list.map(function(f) {\n            return $92b49e225bf9343c$var$serializeFilterFXItem(f);\n        })\n    };\n    // TODO:\n    // desc.comp = -1;\n    // desc.compInfo = { _name: '', _classID: 'null', compID: -1, originalCompID: -1 } as any;\n    // desc.ClMg = {\n    // \t_name: '',\n    // \t_classID: 'ClMg',\n    // \tplacedLayerOCIOConversion: 'placedLayerOCIOConversion.placedLayerOCIOConvertEmbedded'\n    // } as any;\n    // if (JSON.stringify(t) !== JSON.stringify(desc)) {\n    // \tconsole.log('read', require('util').inspect(t, false, 99, true));\n    // \tconsole.log('write', require('util').inspect(desc, false, 99, true));\n    // \tconsole.error('DIFFERENT');\n    // \t// throw new Error('DIFFERENT');\n    // }\n    if (placed.warp && $92b49e225bf9343c$var$isQuiltWarp(placed.warp)) {\n        var quiltWarp = $92b49e225bf9343c$var$encodeWarp(placed.warp);\n        desc.quiltWarp = quiltWarp;\n        desc.warp = {\n            warpStyle: 'warpStyle.warpNone',\n            warpValue: quiltWarp.warpValue,\n            warpPerspective: quiltWarp.warpPerspective,\n            warpPerspectiveOther: quiltWarp.warpPerspectiveOther,\n            warpRotate: quiltWarp.warpRotate,\n            bounds: quiltWarp.bounds,\n            uOrder: quiltWarp.uOrder,\n            vOrder: quiltWarp.vOrder\n        };\n    } else delete desc.quiltWarp;\n    if (placed.comp) desc.comp = placed.comp;\n    if (placed.compInfo) desc.compInfo = placed.compInfo;\n    (0, $klnll.writeVersionAndDescriptor)(writer, '', 'null', desc, desc.quiltWarp ? 'quiltWarp' : 'warp');\n});\n$92b49e225bf9343c$var$addHandlerAlias('SoLE', 'SoLd');\n$92b49e225bf9343c$var$addHandler('fxrp', $92b49e225bf9343c$var$hasKey('referencePoint'), function(reader, target) {\n    target.referencePoint = {\n        x: (0, $5OPaf.readFloat64)(reader),\n        y: (0, $5OPaf.readFloat64)(reader)\n    };\n}, function(writer, target) {\n    (0, $kCSTH.writeFloat64)(writer, target.referencePoint.x);\n    (0, $kCSTH.writeFloat64)(writer, target.referencePoint.y);\n});\n$92b49e225bf9343c$var$addHandler('Lr16', function() {\n    return false;\n}, function(reader, _target, _left, psd, imageResources) {\n    (0, $5OPaf.readLayerInfo)(reader, psd, imageResources);\n}, function(_writer, _target) {});\n$92b49e225bf9343c$var$addHandler('Lr32', function() {\n    return false;\n}, function(reader, _target, _left, psd, imageResources) {\n    (0, $5OPaf.readLayerInfo)(reader, psd, imageResources);\n}, function(_writer, _target) {});\n$92b49e225bf9343c$var$addHandler('LMsk', $92b49e225bf9343c$var$hasKey('userMask'), function(reader, target) {\n    target.userMask = {\n        colorSpace: (0, $5OPaf.readColor)(reader),\n        opacity: (0, $5OPaf.readUint16)(reader) / 0xff\n    };\n    var flag = (0, $5OPaf.readUint8)(reader);\n    if (flag !== 128) throw new Error('Invalid flag value');\n    (0, $5OPaf.skipBytes)(reader, 1);\n}, function(writer, target) {\n    var userMask = target.userMask;\n    (0, $kCSTH.writeColor)(writer, userMask.colorSpace);\n    (0, $kCSTH.writeUint16)(writer, (0, $jE67M.clamp)(userMask.opacity, 0, 1) * 0xff);\n    (0, $kCSTH.writeUint8)(writer, 128);\n    (0, $kCSTH.writeZeros)(writer, 1);\n});\nif ($jE67M.MOCK_HANDLERS) $92b49e225bf9343c$var$addHandler('Patt', function(target) {\n    return target._Patt !== undefined;\n}, function(reader, target, left) {\n    // console.log('additional info: Patt');\n    target._Patt = (0, $5OPaf.readBytes)(reader, left());\n}, function(writer, target) {\n    return false;\n});\nelse $92b49e225bf9343c$var$addHandler('Patt', function(target) {\n    return !target;\n}, function(reader, target, left) {\n    if (!left()) return;\n    (0, $5OPaf.skipBytes)(reader, left());\n    return; // not supported yet\n// if (!target.patterns) target.patterns = [];\n// target.patterns.push(readPattern(reader));\n// skipBytes(reader, left());\n}, function(_writer, _target) {});\n/*\r\ninterface CAIDesc {\r\n    enab: boolean;\r\n    generationalGuid: string;\r\n}\r\n\r\naddHandler(\r\n    'CAI ', // content credentials ? something to do with generative tech\r\n    () => false,\r\n    (reader, _target, left) => {\r\n        const version = readUint32(reader); // 3\r\n        const desc = readVersionAndDescriptor(reader) as CAIDesc;\r\n        console.log('CAI', require('util').inspect(desc, false, 99, true));\r\n        console.log('CAI', { version });\r\n        console.log('CAI left', readBytes(reader, left())); // 8 bytes left, all zeroes\r\n    },\r\n    (_writer, _target) => {\r\n    },\r\n);\r\n*/ if ($jE67M.MOCK_HANDLERS) $92b49e225bf9343c$var$addHandler('CAI ', function(target) {\n    return target._CAI_ !== undefined;\n}, function(reader, target, left) {\n    target._CAI_ = (0, $5OPaf.readBytes)(reader, left());\n}, function(writer, target) {\n    (0, $kCSTH.writeBytes)(writer, target._CAI_);\n});\nif ($jE67M.MOCK_HANDLERS) $92b49e225bf9343c$var$addHandler('OCIO', function(target) {\n    return target._OCIO !== undefined;\n}, function(reader, target, left) {\n    target._OCIO = (0, $5OPaf.readBytes)(reader, left());\n}, function(writer, target) {\n    (0, $kCSTH.writeBytes)(writer, target._OCIO);\n});\n// interface GenIDesc {\n// \tisUsingGenTech: number;\n// }\nif ($jE67M.MOCK_HANDLERS) $92b49e225bf9343c$var$addHandler('GenI', function(target) {\n    return target._GenI !== undefined;\n}, function(reader, target, left) {\n    target._GenI = (0, $5OPaf.readBytes)(reader, left());\n// const desc = readVersionAndDescriptor(reader) as GenIDesc;\n// console.log('GenI', require('util').inspect(desc, false, 99, true));\n}, function(writer, target) {\n    (0, $kCSTH.writeBytes)(writer, target._GenI);\n});\nfunction $92b49e225bf9343c$var$readRect(reader) {\n    var top = (0, $5OPaf.readInt32)(reader);\n    var left = (0, $5OPaf.readInt32)(reader);\n    var bottom = (0, $5OPaf.readInt32)(reader);\n    var right = (0, $5OPaf.readInt32)(reader);\n    return {\n        top: top,\n        left: left,\n        bottom: bottom,\n        right: right\n    };\n}\nfunction $92b49e225bf9343c$var$writeRect(writer, rect) {\n    (0, $kCSTH.writeInt32)(writer, rect.top);\n    (0, $kCSTH.writeInt32)(writer, rect.left);\n    (0, $kCSTH.writeInt32)(writer, rect.bottom);\n    (0, $kCSTH.writeInt32)(writer, rect.right);\n}\n$92b49e225bf9343c$var$addHandler('Anno', function(target) {\n    return target.annotations !== undefined;\n}, function(reader, target, left) {\n    var major = (0, $5OPaf.readUint16)(reader);\n    var minor = (0, $5OPaf.readUint16)(reader);\n    if (major !== 2 || minor !== 1) throw new Error('Invalid Anno version');\n    var count = (0, $5OPaf.readUint32)(reader);\n    var annotations = [];\n    for(var i = 0; i < count; i++){\n        /*const length =*/ (0, $5OPaf.readUint32)(reader);\n        var type = (0, $5OPaf.readSignature)(reader);\n        var open_1 = !!(0, $5OPaf.readUint8)(reader);\n        /*const flags =*/ (0, $5OPaf.readUint8)(reader); // always 28\n        /*const optionalBlocks =*/ (0, $5OPaf.readUint16)(reader);\n        var iconLocation = $92b49e225bf9343c$var$readRect(reader);\n        var popupLocation = $92b49e225bf9343c$var$readRect(reader);\n        var color = (0, $5OPaf.readColor)(reader);\n        var author = (0, $5OPaf.readPascalString)(reader, 2);\n        var name_2 = (0, $5OPaf.readPascalString)(reader, 2);\n        var date = (0, $5OPaf.readPascalString)(reader, 2);\n        /*const contentLength =*/ (0, $5OPaf.readUint32)(reader);\n        /*const dataType =*/ (0, $5OPaf.readSignature)(reader);\n        var dataLength = (0, $5OPaf.readUint32)(reader);\n        var data = void 0;\n        if (type === 'txtA') {\n            if (dataLength >= 2 && (0, $5OPaf.readUint16)(reader) === 0xfeff) data = (0, $5OPaf.readUnicodeStringWithLength)(reader, (dataLength - 2) / 2);\n            else {\n                reader.offset -= 2;\n                data = (0, $5OPaf.readAsciiString)(reader, dataLength);\n            }\n            data = data.replace(/\\r/g, '\\n');\n        } else if (type === 'sndA') data = (0, $5OPaf.readBytes)(reader, dataLength);\n        else throw new Error('Unknown annotation type');\n        annotations.push({\n            type: type === 'txtA' ? 'text' : 'sound',\n            open: open_1,\n            iconLocation: iconLocation,\n            popupLocation: popupLocation,\n            color: color,\n            author: author,\n            name: name_2,\n            date: date,\n            data: data\n        });\n    }\n    target.annotations = annotations;\n    (0, $5OPaf.skipBytes)(reader, left());\n}, function(writer, target) {\n    var annotations = target.annotations;\n    (0, $kCSTH.writeUint16)(writer, 2);\n    (0, $kCSTH.writeUint16)(writer, 1);\n    (0, $kCSTH.writeUint32)(writer, annotations.length);\n    for(var _i = 0, annotations_1 = annotations; _i < annotations_1.length; _i++){\n        var annotation = annotations_1[_i];\n        var sound = annotation.type === 'sound';\n        if (sound && !(annotation.data instanceof Uint8Array)) throw new Error('Sound annotation data should be Uint8Array');\n        if (!sound && typeof annotation.data !== 'string') throw new Error('Text annotation data should be string');\n        var lengthOffset = writer.offset;\n        (0, $kCSTH.writeUint32)(writer, 0); // length\n        (0, $kCSTH.writeSignature)(writer, sound ? 'sndA' : 'txtA');\n        (0, $kCSTH.writeUint8)(writer, annotation.open ? 1 : 0);\n        (0, $kCSTH.writeUint8)(writer, 28);\n        (0, $kCSTH.writeUint16)(writer, 1);\n        $92b49e225bf9343c$var$writeRect(writer, annotation.iconLocation);\n        $92b49e225bf9343c$var$writeRect(writer, annotation.popupLocation);\n        (0, $kCSTH.writeColor)(writer, annotation.color);\n        (0, $kCSTH.writePascalString)(writer, annotation.author || '', 2);\n        (0, $kCSTH.writePascalString)(writer, annotation.name || '', 2);\n        (0, $kCSTH.writePascalString)(writer, annotation.date || '', 2);\n        var contentOffset = writer.offset;\n        (0, $kCSTH.writeUint32)(writer, 0); // content length\n        (0, $kCSTH.writeSignature)(writer, sound ? 'sndM' : 'txtC');\n        (0, $kCSTH.writeUint32)(writer, 0); // data length\n        var dataOffset = writer.offset;\n        if (sound) (0, $kCSTH.writeBytes)(writer, annotation.data);\n        else {\n            (0, $kCSTH.writeUint16)(writer, 0xfeff); // unicode string indicator\n            var text = annotation.data.replace(/\\n/g, '\\r');\n            for(var i = 0; i < text.length; i++)(0, $kCSTH.writeUint16)(writer, text.charCodeAt(i));\n        }\n        writer.view.setUint32(lengthOffset, writer.offset - lengthOffset, false);\n        writer.view.setUint32(contentOffset, writer.offset - contentOffset, false);\n        writer.view.setUint32(dataOffset - 4, writer.offset - dataOffset, false);\n    }\n});\nfunction $92b49e225bf9343c$var$createLnkHandler(tag) {\n    $92b49e225bf9343c$var$addHandler(tag, function(target) {\n        var psd = target;\n        if (!psd.linkedFiles || !psd.linkedFiles.length) return false;\n        if (tag === 'lnkE' && !psd.linkedFiles.some(function(f) {\n            return f.linkedFile;\n        })) return false;\n        return true;\n    }, function(reader, target, left, _psd) {\n        var psd = target;\n        psd.linkedFiles = psd.linkedFiles || [];\n        while(left() > 8){\n            var size = $92b49e225bf9343c$var$readLength64(reader);\n            var startOffset = reader.offset;\n            var type = (0, $5OPaf.readSignature)(reader);\n            // liFD - linked file data\n            // liFE - linked file external\n            // liFA - linked file alias\n            var version = (0, $5OPaf.readInt32)(reader);\n            var id = (0, $5OPaf.readPascalString)(reader, 1);\n            var name_3 = (0, $5OPaf.readUnicodeString)(reader);\n            var fileType = (0, $5OPaf.readSignature)(reader).trim(); // '    ' if empty\n            var fileCreator = (0, $5OPaf.readSignature)(reader).trim(); // '    ' or '\\0\\0\\0\\0' if empty\n            var dataSize = $92b49e225bf9343c$var$readLength64(reader);\n            var hasFileOpenDescriptor = (0, $5OPaf.readUint8)(reader);\n            var fileOpenDescriptor = hasFileOpenDescriptor ? (0, $klnll.readVersionAndDescriptor)(reader) : undefined;\n            var linkedFileDescriptor = type === 'liFE' ? (0, $klnll.readVersionAndDescriptor)(reader) : undefined;\n            var file = {\n                id: id,\n                name: name_3\n            };\n            if (fileType) file.type = fileType;\n            if (fileCreator) file.creator = fileCreator;\n            if (fileOpenDescriptor) file.descriptor = {\n                compInfo: {\n                    compID: fileOpenDescriptor.compInfo.compID,\n                    originalCompID: fileOpenDescriptor.compInfo.originalCompID\n                }\n            };\n            if (type === 'liFE' && version > 3) {\n                var year = (0, $5OPaf.readInt32)(reader);\n                var month = (0, $5OPaf.readUint8)(reader);\n                var day = (0, $5OPaf.readUint8)(reader);\n                var hour = (0, $5OPaf.readUint8)(reader);\n                var minute = (0, $5OPaf.readUint8)(reader);\n                var seconds = (0, $5OPaf.readFloat64)(reader);\n                var wholeSeconds = Math.floor(seconds);\n                var ms = (seconds - wholeSeconds) * 1000;\n                file.time = new Date(Date.UTC(year, month, day, hour, minute, wholeSeconds, ms)).toISOString();\n            }\n            var fileSize = type === 'liFE' ? $92b49e225bf9343c$var$readLength64(reader) : 0;\n            if (type === 'liFA') (0, $5OPaf.skipBytes)(reader, 8);\n            if (type === 'liFD') file.data = (0, $5OPaf.readBytes)(reader, dataSize); // seems to be a typo in docs\n            if (version >= 5) file.childDocumentID = (0, $5OPaf.readUnicodeString)(reader);\n            if (version >= 6) file.assetModTime = (0, $5OPaf.readFloat64)(reader);\n            if (version >= 7) file.assetLockedState = (0, $5OPaf.readUint8)(reader);\n            if (type === 'liFE' && version === 2) file.data = (0, $5OPaf.readBytes)(reader, fileSize);\n            if (reader.skipLinkedFilesData) file.data = undefined;\n            if (tag === 'lnkE') file.linkedFile = {\n                fileSize: fileSize,\n                name: (linkedFileDescriptor === null || linkedFileDescriptor === void 0 ? void 0 : linkedFileDescriptor['Nm  ']) || '',\n                fullPath: (linkedFileDescriptor === null || linkedFileDescriptor === void 0 ? void 0 : linkedFileDescriptor.fullPath) || '',\n                originalPath: (linkedFileDescriptor === null || linkedFileDescriptor === void 0 ? void 0 : linkedFileDescriptor.originalPath) || '',\n                relativePath: (linkedFileDescriptor === null || linkedFileDescriptor === void 0 ? void 0 : linkedFileDescriptor.relPath) || ''\n            };\n            psd.linkedFiles.push(file);\n            while(size % 4)size++;\n            reader.offset = startOffset + size;\n        }\n        (0, $5OPaf.skipBytes)(reader, left()); // ?\n    }, function(writer, target) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        var psd = target;\n        for(var _i = 0, _k = psd.linkedFiles; _i < _k.length; _i++){\n            var file = _k[_i];\n            if (tag === 'lnkE' !== !!file.linkedFile) continue;\n            var version = 2;\n            if (file.assetLockedState != null) version = 7;\n            else if (file.assetModTime != null) version = 6;\n            else if (file.childDocumentID != null) version = 5;\n            else if (tag == 'lnkE') version = 3;\n            $92b49e225bf9343c$var$writeLength64(writer, 0);\n            var sizeOffset = writer.offset;\n            (0, $kCSTH.writeSignature)(writer, tag === 'lnkE' ? 'liFE' : file.data ? 'liFD' : 'liFA');\n            (0, $kCSTH.writeInt32)(writer, version);\n            if (!file.id || typeof file.id !== 'string' || !/^[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$/.test(file.id)) throw new Error('Linked file ID must be in a GUID format (example: 20953ddb-9391-11ec-b4f1-c15674f50bc4)');\n            (0, $kCSTH.writePascalString)(writer, file.id, 1);\n            (0, $kCSTH.writeUnicodeStringWithPadding)(writer, file.name || '');\n            (0, $kCSTH.writeSignature)(writer, file.type ? \"\".concat(file.type, \"    \").substring(0, 4) : '    ');\n            (0, $kCSTH.writeSignature)(writer, file.creator ? \"\".concat(file.creator, \"    \").substring(0, 4) : '\\0\\0\\0\\0');\n            $92b49e225bf9343c$var$writeLength64(writer, file.data ? file.data.byteLength : 0);\n            if (file.descriptor && file.descriptor.compInfo) {\n                var desc = {\n                    compInfo: {\n                        compID: file.descriptor.compInfo.compID,\n                        originalCompID: file.descriptor.compInfo.originalCompID\n                    }\n                };\n                (0, $kCSTH.writeUint8)(writer, 1);\n                (0, $klnll.writeVersionAndDescriptor)(writer, '', 'null', desc);\n            } else (0, $kCSTH.writeUint8)(writer, 0);\n            if (tag === 'lnkE') {\n                var desc = {\n                    descVersion: 2,\n                    'Nm  ': (_b = (_a = file.linkedFile) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : '',\n                    fullPath: (_d = (_c = file.linkedFile) === null || _c === void 0 ? void 0 : _c.fullPath) !== null && _d !== void 0 ? _d : '',\n                    originalPath: (_f = (_e = file.linkedFile) === null || _e === void 0 ? void 0 : _e.originalPath) !== null && _f !== void 0 ? _f : '',\n                    relPath: (_h = (_g = file.linkedFile) === null || _g === void 0 ? void 0 : _g.relativePath) !== null && _h !== void 0 ? _h : ''\n                };\n                (0, $klnll.writeVersionAndDescriptor)(writer, '', 'ExternalFileLink', desc);\n                var time = file.time ? new Date(file.time) : new Date();\n                (0, $kCSTH.writeInt32)(writer, time.getUTCFullYear());\n                (0, $kCSTH.writeUint8)(writer, time.getUTCMonth());\n                (0, $kCSTH.writeUint8)(writer, time.getUTCDate());\n                (0, $kCSTH.writeUint8)(writer, time.getUTCHours());\n                (0, $kCSTH.writeUint8)(writer, time.getUTCMinutes());\n                (0, $kCSTH.writeFloat64)(writer, time.getUTCSeconds() + time.getUTCMilliseconds() / 1000);\n            }\n            if (file.data) (0, $kCSTH.writeBytes)(writer, file.data);\n            else $92b49e225bf9343c$var$writeLength64(writer, ((_j = file.linkedFile) === null || _j === void 0 ? void 0 : _j.fileSize) || 0);\n            if (version >= 5) (0, $kCSTH.writeUnicodeStringWithPadding)(writer, file.childDocumentID || '');\n            if (version >= 6) (0, $kCSTH.writeFloat64)(writer, file.assetModTime || 0);\n            if (version >= 7) (0, $kCSTH.writeUint8)(writer, file.assetLockedState || 0);\n            var size = writer.offset - sizeOffset;\n            writer.view.setUint32(sizeOffset - 4, size, false); // write size\n            while(size % 4){\n                size++;\n                (0, $kCSTH.writeUint8)(writer, 0);\n            }\n        }\n    });\n}\n$92b49e225bf9343c$var$createLnkHandler('lnk2');\n$92b49e225bf9343c$var$createLnkHandler('lnkE');\n$92b49e225bf9343c$var$addHandlerAlias('lnkD', 'lnk2');\n$92b49e225bf9343c$var$addHandlerAlias('lnk3', 'lnk2');\n$92b49e225bf9343c$var$addHandler('pths', $92b49e225bf9343c$var$hasKey('pathList'), function(reader, target) {\n    var desc = (0, $klnll.readVersionAndDescriptor)(reader, true);\n    // console.log(require('util').inspect(desc, false, 99, true));\n    // if (options.throwForMissingFeatures && desc?.pathList?.length) throw new Error('non-empty pathList in `pths`');\n    desc;\n    target.pathList = []; // TODO: read paths\n}, function(writer, _target) {\n    var desc = {\n        pathList: []\n    };\n    (0, $klnll.writeVersionAndDescriptor)(writer, '', 'pathsDataClass', desc);\n});\n$92b49e225bf9343c$var$addHandler('lyvr', $92b49e225bf9343c$var$hasKey('version'), function(reader, target) {\n    return target.version = (0, $5OPaf.readUint32)(reader);\n}, function(writer, target) {\n    return (0, $kCSTH.writeUint32)(writer, target.version);\n});\n$92b49e225bf9343c$var$addHandler('lfxs', function() {\n    return false;\n}, // NOTE: this might be insufficient\n// target => target.effects !== undefined && (\n// \t!!target.effects.dropShadow?.some(e => e.choke) ||\n// \t!!target.effects.innerShadow?.some(e => e.choke) ||\n// \t!!target.effects.outerGlow?.choke ||\n// \t!!target.effects.innerGlow?.choke\n// ),\nfunction(reader, target, left) {\n    var version = (0, $5OPaf.readUint32)(reader);\n    if (version !== 0) throw new Error(\"Invalid lfxs version\");\n    var desc = (0, $klnll.readVersionAndDescriptor)(reader);\n    target.effects = (0, $klnll.parseEffects)(desc, !!reader.logMissingFeatures);\n    (0, $5OPaf.skipBytes)(reader, left());\n}, function(writer, target, _, options) {\n    var desc = (0, $klnll.serializeEffects)(target.effects, !!options.logMissingFeatures, true);\n    (0, $kCSTH.writeUint32)(writer, 0); // version\n    (0, $klnll.writeVersionAndDescriptor)(writer, '', 'null', desc);\n});\nfunction $92b49e225bf9343c$var$adjustmentType(type) {\n    return function(target) {\n        return !!target.adjustment && target.adjustment.type === type;\n    };\n}\n$92b49e225bf9343c$var$addHandler('brit', $92b49e225bf9343c$var$adjustmentType('brightness/contrast'), function(reader, target, left) {\n    if (!target.adjustment) target.adjustment = {\n        type: 'brightness/contrast',\n        brightness: (0, $5OPaf.readInt16)(reader),\n        contrast: (0, $5OPaf.readInt16)(reader),\n        meanValue: (0, $5OPaf.readInt16)(reader),\n        labColorOnly: !!(0, $5OPaf.readUint8)(reader),\n        useLegacy: true\n    };\n    (0, $5OPaf.skipBytes)(reader, left());\n}, function(writer, target) {\n    var _a;\n    var info = target.adjustment;\n    (0, $kCSTH.writeInt16)(writer, info.brightness || 0);\n    (0, $kCSTH.writeInt16)(writer, info.contrast || 0);\n    (0, $kCSTH.writeInt16)(writer, (_a = info.meanValue) !== null && _a !== void 0 ? _a : 127);\n    (0, $kCSTH.writeUint8)(writer, info.labColorOnly ? 1 : 0);\n    (0, $kCSTH.writeZeros)(writer, 1);\n});\nfunction $92b49e225bf9343c$var$readLevelsChannel(reader) {\n    var shadowInput = (0, $5OPaf.readInt16)(reader);\n    var highlightInput = (0, $5OPaf.readInt16)(reader);\n    var shadowOutput = (0, $5OPaf.readInt16)(reader);\n    var highlightOutput = (0, $5OPaf.readInt16)(reader);\n    var midtoneInput = (0, $5OPaf.readInt16)(reader) / 100;\n    return {\n        shadowInput: shadowInput,\n        highlightInput: highlightInput,\n        shadowOutput: shadowOutput,\n        highlightOutput: highlightOutput,\n        midtoneInput: midtoneInput\n    };\n}\nfunction $92b49e225bf9343c$var$writeLevelsChannel(writer, channel) {\n    (0, $kCSTH.writeInt16)(writer, channel.shadowInput);\n    (0, $kCSTH.writeInt16)(writer, channel.highlightInput);\n    (0, $kCSTH.writeInt16)(writer, channel.shadowOutput);\n    (0, $kCSTH.writeInt16)(writer, channel.highlightOutput);\n    (0, $kCSTH.writeInt16)(writer, Math.round(channel.midtoneInput * 100));\n}\n$92b49e225bf9343c$var$addHandler('levl', $92b49e225bf9343c$var$adjustmentType('levels'), function(reader, target, left) {\n    if ((0, $5OPaf.readUint16)(reader) !== 2) throw new Error('Invalid levl version');\n    target.adjustment = $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, target.adjustment), {\n        type: 'levels',\n        rgb: $92b49e225bf9343c$var$readLevelsChannel(reader),\n        red: $92b49e225bf9343c$var$readLevelsChannel(reader),\n        green: $92b49e225bf9343c$var$readLevelsChannel(reader),\n        blue: $92b49e225bf9343c$var$readLevelsChannel(reader)\n    });\n    (0, $5OPaf.skipBytes)(reader, left());\n}, function(writer, target) {\n    var info = target.adjustment;\n    var defaultChannel = {\n        shadowInput: 0,\n        highlightInput: 255,\n        shadowOutput: 0,\n        highlightOutput: 255,\n        midtoneInput: 1\n    };\n    (0, $kCSTH.writeUint16)(writer, 2); // version\n    $92b49e225bf9343c$var$writeLevelsChannel(writer, info.rgb || defaultChannel);\n    $92b49e225bf9343c$var$writeLevelsChannel(writer, info.red || defaultChannel);\n    $92b49e225bf9343c$var$writeLevelsChannel(writer, info.blue || defaultChannel);\n    $92b49e225bf9343c$var$writeLevelsChannel(writer, info.green || defaultChannel);\n    for(var i = 0; i < 59; i++)$92b49e225bf9343c$var$writeLevelsChannel(writer, defaultChannel);\n});\nfunction $92b49e225bf9343c$var$readCurveChannel(reader) {\n    var nodes = (0, $5OPaf.readUint16)(reader);\n    var channel = [];\n    for(var j = 0; j < nodes; j++){\n        var output = (0, $5OPaf.readInt16)(reader);\n        var input = (0, $5OPaf.readInt16)(reader);\n        channel.push({\n            input: input,\n            output: output\n        });\n    }\n    return channel;\n}\nfunction $92b49e225bf9343c$var$writeCurveChannel(writer, channel) {\n    (0, $kCSTH.writeUint16)(writer, channel.length);\n    for(var _i = 0, channel_1 = channel; _i < channel_1.length; _i++){\n        var n = channel_1[_i];\n        (0, $kCSTH.writeUint16)(writer, n.output);\n        (0, $kCSTH.writeUint16)(writer, n.input);\n    }\n}\n$92b49e225bf9343c$var$addHandler('curv', $92b49e225bf9343c$var$adjustmentType('curves'), function(reader, target, left) {\n    (0, $5OPaf.readUint8)(reader);\n    if ((0, $5OPaf.readUint16)(reader) !== 1) throw new Error('Invalid curv version');\n    (0, $5OPaf.readUint16)(reader);\n    var channels = (0, $5OPaf.readUint16)(reader);\n    var info = {\n        type: 'curves'\n    };\n    if (channels & 1) info.rgb = $92b49e225bf9343c$var$readCurveChannel(reader);\n    if (channels & 2) info.red = $92b49e225bf9343c$var$readCurveChannel(reader);\n    if (channels & 4) info.green = $92b49e225bf9343c$var$readCurveChannel(reader);\n    if (channels & 8) info.blue = $92b49e225bf9343c$var$readCurveChannel(reader);\n    target.adjustment = $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, target.adjustment), info);\n    // ignoring, duplicate information\n    // checkSignature(reader, 'Crv ');\n    // const cVersion = readUint16(reader);\n    // readUint16(reader);\n    // const channelCount = readUint16(reader);\n    // for (let i = 0; i < channelCount; i++) {\n    // \tconst index = readUint16(reader);\n    // \tconst nodes = readUint16(reader);\n    // \tfor (let j = 0; j < nodes; j++) {\n    // \t\tconst output = readInt16(reader);\n    // \t\tconst input = readInt16(reader);\n    // \t}\n    // }\n    (0, $5OPaf.skipBytes)(reader, left());\n}, function(writer, target) {\n    var info = target.adjustment;\n    var rgb = info.rgb, red = info.red, green = info.green, blue = info.blue;\n    var channels = 0;\n    var channelCount = 0;\n    if (rgb && rgb.length) {\n        channels |= 1;\n        channelCount++;\n    }\n    if (red && red.length) {\n        channels |= 2;\n        channelCount++;\n    }\n    if (green && green.length) {\n        channels |= 4;\n        channelCount++;\n    }\n    if (blue && blue.length) {\n        channels |= 8;\n        channelCount++;\n    }\n    (0, $kCSTH.writeUint8)(writer, 0);\n    (0, $kCSTH.writeUint16)(writer, 1); // version\n    (0, $kCSTH.writeUint16)(writer, 0);\n    (0, $kCSTH.writeUint16)(writer, channels);\n    if (rgb && rgb.length) $92b49e225bf9343c$var$writeCurveChannel(writer, rgb);\n    if (red && red.length) $92b49e225bf9343c$var$writeCurveChannel(writer, red);\n    if (green && green.length) $92b49e225bf9343c$var$writeCurveChannel(writer, green);\n    if (blue && blue.length) $92b49e225bf9343c$var$writeCurveChannel(writer, blue);\n    (0, $kCSTH.writeSignature)(writer, 'Crv ');\n    (0, $kCSTH.writeUint16)(writer, 4); // version\n    (0, $kCSTH.writeUint16)(writer, 0);\n    (0, $kCSTH.writeUint16)(writer, channelCount);\n    if (rgb && rgb.length) {\n        (0, $kCSTH.writeUint16)(writer, 0);\n        $92b49e225bf9343c$var$writeCurveChannel(writer, rgb);\n    }\n    if (red && red.length) {\n        (0, $kCSTH.writeUint16)(writer, 1);\n        $92b49e225bf9343c$var$writeCurveChannel(writer, red);\n    }\n    if (green && green.length) {\n        (0, $kCSTH.writeUint16)(writer, 2);\n        $92b49e225bf9343c$var$writeCurveChannel(writer, green);\n    }\n    if (blue && blue.length) {\n        (0, $kCSTH.writeUint16)(writer, 3);\n        $92b49e225bf9343c$var$writeCurveChannel(writer, blue);\n    }\n    (0, $kCSTH.writeZeros)(writer, 2);\n});\n$92b49e225bf9343c$var$addHandler('expA', $92b49e225bf9343c$var$adjustmentType('exposure'), function(reader, target, left) {\n    if ((0, $5OPaf.readUint16)(reader) !== 1) throw new Error('Invalid expA version');\n    target.adjustment = $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, target.adjustment), {\n        type: 'exposure',\n        exposure: (0, $5OPaf.readFloat32)(reader),\n        offset: (0, $5OPaf.readFloat32)(reader),\n        gamma: (0, $5OPaf.readFloat32)(reader)\n    });\n    (0, $5OPaf.skipBytes)(reader, left());\n}, function(writer, target) {\n    var info = target.adjustment;\n    (0, $kCSTH.writeUint16)(writer, 1); // version\n    (0, $kCSTH.writeFloat32)(writer, info.exposure);\n    (0, $kCSTH.writeFloat32)(writer, info.offset);\n    (0, $kCSTH.writeFloat32)(writer, info.gamma);\n    (0, $kCSTH.writeZeros)(writer, 2);\n});\n$92b49e225bf9343c$var$addHandler('vibA', $92b49e225bf9343c$var$adjustmentType('vibrance'), function(reader, target, left) {\n    var desc = (0, $klnll.readVersionAndDescriptor)(reader);\n    target.adjustment = {\n        type: 'vibrance'\n    };\n    if (desc.vibrance !== undefined) target.adjustment.vibrance = desc.vibrance;\n    if (desc.Strt !== undefined) target.adjustment.saturation = desc.Strt;\n    (0, $5OPaf.skipBytes)(reader, left());\n}, function(writer, target) {\n    var info = target.adjustment;\n    var desc = {};\n    if (info.vibrance !== undefined) desc.vibrance = info.vibrance;\n    if (info.saturation !== undefined) desc.Strt = info.saturation;\n    (0, $klnll.writeVersionAndDescriptor)(writer, '', 'null', desc);\n});\nfunction $92b49e225bf9343c$var$readHueChannel(reader) {\n    return {\n        a: (0, $5OPaf.readInt16)(reader),\n        b: (0, $5OPaf.readInt16)(reader),\n        c: (0, $5OPaf.readInt16)(reader),\n        d: (0, $5OPaf.readInt16)(reader),\n        hue: (0, $5OPaf.readInt16)(reader),\n        saturation: (0, $5OPaf.readInt16)(reader),\n        lightness: (0, $5OPaf.readInt16)(reader)\n    };\n}\nfunction $92b49e225bf9343c$var$writeHueChannel(writer, channel) {\n    var c = channel || {};\n    (0, $kCSTH.writeInt16)(writer, c.a || 0);\n    (0, $kCSTH.writeInt16)(writer, c.b || 0);\n    (0, $kCSTH.writeInt16)(writer, c.c || 0);\n    (0, $kCSTH.writeInt16)(writer, c.d || 0);\n    (0, $kCSTH.writeInt16)(writer, c.hue || 0);\n    (0, $kCSTH.writeInt16)(writer, c.saturation || 0);\n    (0, $kCSTH.writeInt16)(writer, c.lightness || 0);\n}\n$92b49e225bf9343c$var$addHandler('hue2', $92b49e225bf9343c$var$adjustmentType('hue/saturation'), function(reader, target, left) {\n    if ((0, $5OPaf.readUint16)(reader) !== 2) throw new Error('Invalid hue2 version');\n    target.adjustment = $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, target.adjustment), {\n        type: 'hue/saturation',\n        master: $92b49e225bf9343c$var$readHueChannel(reader),\n        reds: $92b49e225bf9343c$var$readHueChannel(reader),\n        yellows: $92b49e225bf9343c$var$readHueChannel(reader),\n        greens: $92b49e225bf9343c$var$readHueChannel(reader),\n        cyans: $92b49e225bf9343c$var$readHueChannel(reader),\n        blues: $92b49e225bf9343c$var$readHueChannel(reader),\n        magentas: $92b49e225bf9343c$var$readHueChannel(reader)\n    });\n    (0, $5OPaf.skipBytes)(reader, left());\n}, function(writer, target) {\n    var info = target.adjustment;\n    (0, $kCSTH.writeUint16)(writer, 2); // version\n    $92b49e225bf9343c$var$writeHueChannel(writer, info.master);\n    $92b49e225bf9343c$var$writeHueChannel(writer, info.reds);\n    $92b49e225bf9343c$var$writeHueChannel(writer, info.yellows);\n    $92b49e225bf9343c$var$writeHueChannel(writer, info.greens);\n    $92b49e225bf9343c$var$writeHueChannel(writer, info.cyans);\n    $92b49e225bf9343c$var$writeHueChannel(writer, info.blues);\n    $92b49e225bf9343c$var$writeHueChannel(writer, info.magentas);\n});\nfunction $92b49e225bf9343c$var$readColorBalance(reader) {\n    return {\n        cyanRed: (0, $5OPaf.readInt16)(reader),\n        magentaGreen: (0, $5OPaf.readInt16)(reader),\n        yellowBlue: (0, $5OPaf.readInt16)(reader)\n    };\n}\nfunction $92b49e225bf9343c$var$writeColorBalance(writer, value) {\n    (0, $kCSTH.writeInt16)(writer, value.cyanRed || 0);\n    (0, $kCSTH.writeInt16)(writer, value.magentaGreen || 0);\n    (0, $kCSTH.writeInt16)(writer, value.yellowBlue || 0);\n}\n$92b49e225bf9343c$var$addHandler('blnc', $92b49e225bf9343c$var$adjustmentType('color balance'), function(reader, target, left) {\n    target.adjustment = {\n        type: 'color balance',\n        shadows: $92b49e225bf9343c$var$readColorBalance(reader),\n        midtones: $92b49e225bf9343c$var$readColorBalance(reader),\n        highlights: $92b49e225bf9343c$var$readColorBalance(reader),\n        preserveLuminosity: !!(0, $5OPaf.readUint8)(reader)\n    };\n    (0, $5OPaf.skipBytes)(reader, left());\n}, function(writer, target) {\n    var info = target.adjustment;\n    $92b49e225bf9343c$var$writeColorBalance(writer, info.shadows || {});\n    $92b49e225bf9343c$var$writeColorBalance(writer, info.midtones || {});\n    $92b49e225bf9343c$var$writeColorBalance(writer, info.highlights || {});\n    (0, $kCSTH.writeUint8)(writer, info.preserveLuminosity ? 1 : 0);\n    (0, $kCSTH.writeZeros)(writer, 1);\n});\n$92b49e225bf9343c$var$addHandler('blwh', $92b49e225bf9343c$var$adjustmentType('black & white'), function(reader, target, left) {\n    var desc = (0, $klnll.readVersionAndDescriptor)(reader);\n    target.adjustment = {\n        type: 'black & white',\n        reds: desc['Rd  '],\n        yellows: desc.Yllw,\n        greens: desc['Grn '],\n        cyans: desc['Cyn '],\n        blues: desc['Bl  '],\n        magentas: desc.Mgnt,\n        useTint: !!desc.useTint,\n        presetKind: desc.bwPresetKind,\n        presetFileName: desc.blackAndWhitePresetFileName\n    };\n    if (desc.tintColor !== undefined) target.adjustment.tintColor = (0, $klnll.parseColor)(desc.tintColor);\n    (0, $5OPaf.skipBytes)(reader, left());\n}, function(writer, target) {\n    var info = target.adjustment;\n    var desc = {\n        'Rd  ': info.reds || 0,\n        Yllw: info.yellows || 0,\n        'Grn ': info.greens || 0,\n        'Cyn ': info.cyans || 0,\n        'Bl  ': info.blues || 0,\n        Mgnt: info.magentas || 0,\n        useTint: !!info.useTint,\n        tintColor: (0, $klnll.serializeColor)(info.tintColor),\n        bwPresetKind: info.presetKind || 0,\n        blackAndWhitePresetFileName: info.presetFileName || ''\n    };\n    (0, $klnll.writeVersionAndDescriptor)(writer, '', 'null', desc);\n});\n$92b49e225bf9343c$var$addHandler('phfl', $92b49e225bf9343c$var$adjustmentType('photo filter'), function(reader, target, left) {\n    var version = (0, $5OPaf.readUint16)(reader);\n    if (version !== 2 && version !== 3) throw new Error('Invalid phfl version');\n    var color;\n    if (version === 2) color = (0, $5OPaf.readColor)(reader);\n    else // TODO: test this, this is probably wrong\n    color = {\n        l: (0, $5OPaf.readInt32)(reader) / 100,\n        a: (0, $5OPaf.readInt32)(reader) / 100,\n        b: (0, $5OPaf.readInt32)(reader) / 100\n    };\n    target.adjustment = {\n        type: 'photo filter',\n        color: color,\n        density: (0, $5OPaf.readUint32)(reader) / 100,\n        preserveLuminosity: !!(0, $5OPaf.readUint8)(reader)\n    };\n    (0, $5OPaf.skipBytes)(reader, left());\n}, function(writer, target) {\n    var info = target.adjustment;\n    (0, $kCSTH.writeUint16)(writer, 2); // version\n    (0, $kCSTH.writeColor)(writer, info.color || {\n        l: 0,\n        a: 0,\n        b: 0\n    });\n    (0, $kCSTH.writeUint32)(writer, (info.density || 0) * 100);\n    (0, $kCSTH.writeUint8)(writer, info.preserveLuminosity ? 1 : 0);\n    (0, $kCSTH.writeZeros)(writer, 3);\n});\nfunction $92b49e225bf9343c$var$readMixrChannel(reader) {\n    var red = (0, $5OPaf.readInt16)(reader);\n    var green = (0, $5OPaf.readInt16)(reader);\n    var blue = (0, $5OPaf.readInt16)(reader);\n    (0, $5OPaf.skipBytes)(reader, 2);\n    var constant = (0, $5OPaf.readInt16)(reader);\n    return {\n        red: red,\n        green: green,\n        blue: blue,\n        constant: constant\n    };\n}\nfunction $92b49e225bf9343c$var$writeMixrChannel(writer, channel) {\n    var c = channel || {};\n    (0, $kCSTH.writeInt16)(writer, c.red);\n    (0, $kCSTH.writeInt16)(writer, c.green);\n    (0, $kCSTH.writeInt16)(writer, c.blue);\n    (0, $kCSTH.writeZeros)(writer, 2);\n    (0, $kCSTH.writeInt16)(writer, c.constant);\n}\n$92b49e225bf9343c$var$addHandler('mixr', $92b49e225bf9343c$var$adjustmentType('channel mixer'), function(reader, target, left) {\n    if ((0, $5OPaf.readUint16)(reader) !== 1) throw new Error('Invalid mixr version');\n    var adjustment = target.adjustment = $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, target.adjustment), {\n        type: 'channel mixer',\n        monochrome: !!(0, $5OPaf.readUint16)(reader)\n    });\n    if (!adjustment.monochrome) {\n        adjustment.red = $92b49e225bf9343c$var$readMixrChannel(reader);\n        adjustment.green = $92b49e225bf9343c$var$readMixrChannel(reader);\n        adjustment.blue = $92b49e225bf9343c$var$readMixrChannel(reader);\n    }\n    adjustment.gray = $92b49e225bf9343c$var$readMixrChannel(reader);\n    (0, $5OPaf.skipBytes)(reader, left());\n}, function(writer, target) {\n    var info = target.adjustment;\n    (0, $kCSTH.writeUint16)(writer, 1); // version\n    (0, $kCSTH.writeUint16)(writer, info.monochrome ? 1 : 0);\n    if (info.monochrome) {\n        $92b49e225bf9343c$var$writeMixrChannel(writer, info.gray);\n        (0, $kCSTH.writeZeros)(writer, 30);\n    } else {\n        $92b49e225bf9343c$var$writeMixrChannel(writer, info.red);\n        $92b49e225bf9343c$var$writeMixrChannel(writer, info.green);\n        $92b49e225bf9343c$var$writeMixrChannel(writer, info.blue);\n        $92b49e225bf9343c$var$writeMixrChannel(writer, info.gray);\n    }\n});\nvar $92b49e225bf9343c$var$colorLookupType = (0, $jE67M.createEnum)('colorLookupType', '3DLUT', {\n    '3dlut': '3DLUT',\n    abstractProfile: 'abstractProfile',\n    deviceLinkProfile: 'deviceLinkProfile'\n});\nvar $92b49e225bf9343c$var$LUTFormatType = (0, $jE67M.createEnum)('LUTFormatType', 'look', {\n    look: 'LUTFormatLOOK',\n    cube: 'LUTFormatCUBE',\n    '3dl': 'LUTFormat3DL'\n});\nvar $92b49e225bf9343c$var$colorLookupOrder = (0, $jE67M.createEnum)('colorLookupOrder', 'rgb', {\n    rgb: 'rgbOrder',\n    bgr: 'bgrOrder'\n});\n$92b49e225bf9343c$var$addHandler('clrL', $92b49e225bf9343c$var$adjustmentType('color lookup'), function(reader, target, left) {\n    if ((0, $5OPaf.readUint16)(reader) !== 1) throw new Error('Invalid clrL version');\n    var desc = (0, $klnll.readVersionAndDescriptor)(reader);\n    target.adjustment = {\n        type: 'color lookup'\n    };\n    var info = target.adjustment;\n    if (desc.lookupType !== undefined) info.lookupType = $92b49e225bf9343c$var$colorLookupType.decode(desc.lookupType);\n    if (desc['Nm  '] !== undefined) info.name = desc['Nm  '];\n    if (desc.Dthr !== undefined) info.dither = desc.Dthr;\n    if (desc.profile !== undefined) info.profile = desc.profile;\n    if (desc.LUTFormat !== undefined) info.lutFormat = $92b49e225bf9343c$var$LUTFormatType.decode(desc.LUTFormat);\n    if (desc.dataOrder !== undefined) info.dataOrder = $92b49e225bf9343c$var$colorLookupOrder.decode(desc.dataOrder);\n    if (desc.tableOrder !== undefined) info.tableOrder = $92b49e225bf9343c$var$colorLookupOrder.decode(desc.tableOrder);\n    if (desc.LUT3DFileData !== undefined) info.lut3DFileData = desc.LUT3DFileData;\n    if (desc.LUT3DFileName !== undefined) info.lut3DFileName = desc.LUT3DFileName;\n    (0, $5OPaf.skipBytes)(reader, left());\n}, function(writer, target) {\n    var info = target.adjustment;\n    var desc = {};\n    if (info.lookupType !== undefined) desc.lookupType = $92b49e225bf9343c$var$colorLookupType.encode(info.lookupType);\n    if (info.name !== undefined) desc['Nm  '] = info.name;\n    if (info.dither !== undefined) desc.Dthr = info.dither;\n    if (info.profile !== undefined) desc.profile = info.profile;\n    if (info.lutFormat !== undefined) desc.LUTFormat = $92b49e225bf9343c$var$LUTFormatType.encode(info.lutFormat);\n    if (info.dataOrder !== undefined) desc.dataOrder = $92b49e225bf9343c$var$colorLookupOrder.encode(info.dataOrder);\n    if (info.tableOrder !== undefined) desc.tableOrder = $92b49e225bf9343c$var$colorLookupOrder.encode(info.tableOrder);\n    if (info.lut3DFileData !== undefined) desc.LUT3DFileData = info.lut3DFileData;\n    if (info.lut3DFileName !== undefined) desc.LUT3DFileName = info.lut3DFileName;\n    (0, $kCSTH.writeUint16)(writer, 1); // version\n    (0, $klnll.writeVersionAndDescriptor)(writer, '', 'null', desc);\n});\n$92b49e225bf9343c$var$addHandler('nvrt', $92b49e225bf9343c$var$adjustmentType('invert'), function(reader, target, left) {\n    target.adjustment = {\n        type: 'invert'\n    };\n    (0, $5OPaf.skipBytes)(reader, left());\n}, function() {\n// nothing to write here\n});\n$92b49e225bf9343c$var$addHandler('post', $92b49e225bf9343c$var$adjustmentType('posterize'), function(reader, target, left) {\n    target.adjustment = {\n        type: 'posterize',\n        levels: (0, $5OPaf.readUint16)(reader)\n    };\n    (0, $5OPaf.skipBytes)(reader, left());\n}, function(writer, target) {\n    var _a;\n    var info = target.adjustment;\n    (0, $kCSTH.writeUint16)(writer, (_a = info.levels) !== null && _a !== void 0 ? _a : 4);\n    (0, $kCSTH.writeZeros)(writer, 2);\n});\n$92b49e225bf9343c$var$addHandler('thrs', $92b49e225bf9343c$var$adjustmentType('threshold'), function(reader, target, left) {\n    target.adjustment = {\n        type: 'threshold',\n        level: (0, $5OPaf.readUint16)(reader)\n    };\n    (0, $5OPaf.skipBytes)(reader, left());\n}, function(writer, target) {\n    var _a;\n    var info = target.adjustment;\n    (0, $kCSTH.writeUint16)(writer, (_a = info.level) !== null && _a !== void 0 ? _a : 128);\n    (0, $kCSTH.writeZeros)(writer, 2);\n});\nvar $92b49e225bf9343c$var$grdmColorModels = [\n    '',\n    '',\n    '',\n    'rgb',\n    'hsb',\n    '',\n    'lab'\n];\n$92b49e225bf9343c$var$addHandler('grdm', $92b49e225bf9343c$var$adjustmentType('gradient map'), function(reader, target, left) {\n    var version = (0, $5OPaf.readUint16)(reader);\n    if (version !== 1 && version !== 3) throw new Error('Invalid grdm version');\n    var info = {\n        type: 'gradient map',\n        gradientType: 'solid'\n    };\n    info.reverse = !!(0, $5OPaf.readUint8)(reader);\n    info.dither = !!(0, $5OPaf.readUint8)(reader);\n    var hasMethod = !!(0, $5OPaf.readUint8)(reader);\n    reader.offset--;\n    if (hasMethod) {\n        var method = (0, $5OPaf.readSignature)(reader);\n        info.method = $klnll.gradientInterpolationMethodType.decode(method);\n    }\n    info.name = (0, $5OPaf.readUnicodeString)(reader);\n    info.colorStops = [];\n    info.opacityStops = [];\n    var stopsCount = (0, $5OPaf.readUint16)(reader);\n    for(var i = 0; i < stopsCount; i++){\n        info.colorStops.push({\n            location: (0, $5OPaf.readUint32)(reader),\n            midpoint: (0, $5OPaf.readUint32)(reader) / 100,\n            color: (0, $5OPaf.readColor)(reader)\n        });\n        (0, $5OPaf.skipBytes)(reader, 2);\n    }\n    var opacityStopsCount = (0, $5OPaf.readUint16)(reader);\n    for(var i = 0; i < opacityStopsCount; i++)info.opacityStops.push({\n        location: (0, $5OPaf.readUint32)(reader),\n        midpoint: (0, $5OPaf.readUint32)(reader) / 100,\n        opacity: (0, $5OPaf.readUint16)(reader) / 0xff\n    });\n    var expansionCount = (0, $5OPaf.readUint16)(reader);\n    if (expansionCount !== 2) throw new Error('Invalid grdm expansion count');\n    var interpolation = (0, $5OPaf.readUint16)(reader);\n    info.smoothness = interpolation / 4096;\n    var length = (0, $5OPaf.readUint16)(reader);\n    if (length !== 32) throw new Error('Invalid grdm length');\n    info.gradientType = (0, $5OPaf.readUint16)(reader) ? 'noise' : 'solid';\n    info.randomSeed = (0, $5OPaf.readUint32)(reader);\n    info.addTransparency = !!(0, $5OPaf.readUint16)(reader);\n    info.restrictColors = !!(0, $5OPaf.readUint16)(reader);\n    info.roughness = (0, $5OPaf.readUint32)(reader) / 4096;\n    info.colorModel = $92b49e225bf9343c$var$grdmColorModels[(0, $5OPaf.readUint16)(reader)] || 'rgb';\n    info.min = [\n        (0, $5OPaf.readUint16)(reader) / 0x8000,\n        (0, $5OPaf.readUint16)(reader) / 0x8000,\n        (0, $5OPaf.readUint16)(reader) / 0x8000,\n        (0, $5OPaf.readUint16)(reader) / 0x8000\n    ];\n    info.max = [\n        (0, $5OPaf.readUint16)(reader) / 0x8000,\n        (0, $5OPaf.readUint16)(reader) / 0x8000,\n        (0, $5OPaf.readUint16)(reader) / 0x8000,\n        (0, $5OPaf.readUint16)(reader) / 0x8000\n    ];\n    (0, $5OPaf.skipBytes)(reader, left());\n    for(var _i = 0, _a = info.colorStops; _i < _a.length; _i++){\n        var s = _a[_i];\n        s.location /= interpolation;\n    }\n    for(var _b = 0, _c = info.opacityStops; _b < _c.length; _b++){\n        var s = _c[_b];\n        s.location /= interpolation;\n    }\n    target.adjustment = info;\n}, function(writer, target) {\n    var _a, _b, _c;\n    var info = target.adjustment;\n    (0, $kCSTH.writeUint16)(writer, info.method !== undefined ? 3 : 1); // version\n    (0, $kCSTH.writeUint8)(writer, info.reverse ? 1 : 0);\n    (0, $kCSTH.writeUint8)(writer, info.dither ? 1 : 0);\n    if (info.method !== undefined) (0, $kCSTH.writeSignature)(writer, $klnll.gradientInterpolationMethodType.encode(info.method));\n    (0, $kCSTH.writeUnicodeStringWithPadding)(writer, info.name || '');\n    (0, $kCSTH.writeUint16)(writer, info.colorStops && info.colorStops.length || 0);\n    var interpolation = Math.round(((_a = info.smoothness) !== null && _a !== void 0 ? _a : 1) * 4096);\n    for(var _i = 0, _d = info.colorStops || []; _i < _d.length; _i++){\n        var s = _d[_i];\n        (0, $kCSTH.writeUint32)(writer, Math.round(s.location * interpolation));\n        (0, $kCSTH.writeUint32)(writer, Math.round(s.midpoint * 100));\n        (0, $kCSTH.writeColor)(writer, s.color);\n        (0, $kCSTH.writeZeros)(writer, 2);\n    }\n    (0, $kCSTH.writeUint16)(writer, info.opacityStops && info.opacityStops.length || 0);\n    for(var _e = 0, _f = info.opacityStops || []; _e < _f.length; _e++){\n        var s = _f[_e];\n        (0, $kCSTH.writeUint32)(writer, Math.round(s.location * interpolation));\n        (0, $kCSTH.writeUint32)(writer, Math.round(s.midpoint * 100));\n        (0, $kCSTH.writeUint16)(writer, Math.round(s.opacity * 0xff));\n    }\n    (0, $kCSTH.writeUint16)(writer, 2); // expansion count\n    (0, $kCSTH.writeUint16)(writer, interpolation);\n    (0, $kCSTH.writeUint16)(writer, 32); // length\n    (0, $kCSTH.writeUint16)(writer, info.gradientType === 'noise' ? 1 : 0);\n    (0, $kCSTH.writeUint32)(writer, info.randomSeed || 0);\n    (0, $kCSTH.writeUint16)(writer, info.addTransparency ? 1 : 0);\n    (0, $kCSTH.writeUint16)(writer, info.restrictColors ? 1 : 0);\n    (0, $kCSTH.writeUint32)(writer, Math.round(((_b = info.roughness) !== null && _b !== void 0 ? _b : 1) * 4096));\n    var colorModel = $92b49e225bf9343c$var$grdmColorModels.indexOf((_c = info.colorModel) !== null && _c !== void 0 ? _c : 'rgb');\n    (0, $kCSTH.writeUint16)(writer, colorModel === -1 ? 3 : colorModel);\n    for(var i = 0; i < 4; i++)(0, $kCSTH.writeUint16)(writer, Math.round((info.min && info.min[i] || 0) * 0x8000));\n    for(var i = 0; i < 4; i++)(0, $kCSTH.writeUint16)(writer, Math.round((info.max && info.max[i] || 0) * 0x8000));\n    (0, $kCSTH.writeZeros)(writer, 4);\n});\nfunction $92b49e225bf9343c$var$readSelectiveColors(reader) {\n    return {\n        c: (0, $5OPaf.readInt16)(reader),\n        m: (0, $5OPaf.readInt16)(reader),\n        y: (0, $5OPaf.readInt16)(reader),\n        k: (0, $5OPaf.readInt16)(reader)\n    };\n}\nfunction $92b49e225bf9343c$var$writeSelectiveColors(writer, cmyk) {\n    var c = cmyk || {};\n    (0, $kCSTH.writeInt16)(writer, c.c);\n    (0, $kCSTH.writeInt16)(writer, c.m);\n    (0, $kCSTH.writeInt16)(writer, c.y);\n    (0, $kCSTH.writeInt16)(writer, c.k);\n}\n$92b49e225bf9343c$var$addHandler('selc', $92b49e225bf9343c$var$adjustmentType('selective color'), function(reader, target) {\n    if ((0, $5OPaf.readUint16)(reader) !== 1) throw new Error('Invalid selc version');\n    var mode = (0, $5OPaf.readUint16)(reader) ? 'absolute' : 'relative';\n    (0, $5OPaf.skipBytes)(reader, 8);\n    target.adjustment = {\n        type: 'selective color',\n        mode: mode,\n        reds: $92b49e225bf9343c$var$readSelectiveColors(reader),\n        yellows: $92b49e225bf9343c$var$readSelectiveColors(reader),\n        greens: $92b49e225bf9343c$var$readSelectiveColors(reader),\n        cyans: $92b49e225bf9343c$var$readSelectiveColors(reader),\n        blues: $92b49e225bf9343c$var$readSelectiveColors(reader),\n        magentas: $92b49e225bf9343c$var$readSelectiveColors(reader),\n        whites: $92b49e225bf9343c$var$readSelectiveColors(reader),\n        neutrals: $92b49e225bf9343c$var$readSelectiveColors(reader),\n        blacks: $92b49e225bf9343c$var$readSelectiveColors(reader)\n    };\n}, function(writer, target) {\n    var info = target.adjustment;\n    (0, $kCSTH.writeUint16)(writer, 1); // version\n    (0, $kCSTH.writeUint16)(writer, info.mode === 'absolute' ? 1 : 0);\n    (0, $kCSTH.writeZeros)(writer, 8);\n    $92b49e225bf9343c$var$writeSelectiveColors(writer, info.reds);\n    $92b49e225bf9343c$var$writeSelectiveColors(writer, info.yellows);\n    $92b49e225bf9343c$var$writeSelectiveColors(writer, info.greens);\n    $92b49e225bf9343c$var$writeSelectiveColors(writer, info.cyans);\n    $92b49e225bf9343c$var$writeSelectiveColors(writer, info.blues);\n    $92b49e225bf9343c$var$writeSelectiveColors(writer, info.magentas);\n    $92b49e225bf9343c$var$writeSelectiveColors(writer, info.whites);\n    $92b49e225bf9343c$var$writeSelectiveColors(writer, info.neutrals);\n    $92b49e225bf9343c$var$writeSelectiveColors(writer, info.blacks);\n});\n$92b49e225bf9343c$var$addHandler('CgEd', function(target) {\n    var a = target.adjustment;\n    if (!a) return false;\n    return a.type === 'brightness/contrast' && !a.useLegacy || (a.type === 'levels' || a.type === 'curves' || a.type === 'exposure' || a.type === 'channel mixer' || a.type === 'hue/saturation') && a.presetFileName !== undefined;\n}, function(reader, target, left) {\n    var desc = (0, $klnll.readVersionAndDescriptor)(reader);\n    if (desc.Vrsn !== 1) throw new Error('Invalid CgEd version');\n    // this section can specify preset file name for other adjustment types\n    if ('presetFileName' in desc) target.adjustment = $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, target.adjustment), {\n        presetKind: desc.presetKind,\n        presetFileName: desc.presetFileName\n    });\n    else if ('curvesPresetFileName' in desc) target.adjustment = $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, target.adjustment), {\n        presetKind: desc.curvesPresetKind,\n        presetFileName: desc.curvesPresetFileName\n    });\n    else if ('mixerPresetFileName' in desc) target.adjustment = $92b49e225bf9343c$var$__assign($92b49e225bf9343c$var$__assign({}, target.adjustment), {\n        presetKind: desc.mixerPresetKind,\n        presetFileName: desc.mixerPresetFileName\n    });\n    else target.adjustment = {\n        type: 'brightness/contrast',\n        brightness: desc.Brgh,\n        contrast: desc.Cntr,\n        meanValue: desc.means,\n        useLegacy: !!desc.useLegacy,\n        labColorOnly: !!desc['Lab '],\n        auto: !!desc.Auto\n    };\n    (0, $5OPaf.skipBytes)(reader, left());\n}, function(writer, target) {\n    var _a, _b, _c, _d;\n    var info = target.adjustment;\n    if (info.type === 'levels' || info.type === 'exposure' || info.type === 'hue/saturation') {\n        var desc = {\n            Vrsn: 1,\n            presetKind: (_a = info.presetKind) !== null && _a !== void 0 ? _a : 1,\n            presetFileName: info.presetFileName || ''\n        };\n        (0, $klnll.writeVersionAndDescriptor)(writer, '', 'null', desc);\n    } else if (info.type === 'curves') {\n        var desc = {\n            Vrsn: 1,\n            curvesPresetKind: (_b = info.presetKind) !== null && _b !== void 0 ? _b : 1,\n            curvesPresetFileName: info.presetFileName || ''\n        };\n        (0, $klnll.writeVersionAndDescriptor)(writer, '', 'null', desc);\n    } else if (info.type === 'channel mixer') {\n        var desc = {\n            Vrsn: 1,\n            mixerPresetKind: (_c = info.presetKind) !== null && _c !== void 0 ? _c : 1,\n            mixerPresetFileName: info.presetFileName || ''\n        };\n        (0, $klnll.writeVersionAndDescriptor)(writer, '', 'null', desc);\n    } else if (info.type === 'brightness/contrast') {\n        var desc = {\n            Vrsn: 1,\n            Brgh: info.brightness || 0,\n            Cntr: info.contrast || 0,\n            means: (_d = info.meanValue) !== null && _d !== void 0 ? _d : 127,\n            'Lab ': !!info.labColorOnly,\n            useLegacy: !!info.useLegacy,\n            Auto: !!info.auto\n        };\n        (0, $klnll.writeVersionAndDescriptor)(writer, '', 'null', desc);\n    } else throw new Error('Unhandled CgEd case');\n});\nfunction $92b49e225bf9343c$var$getTextLayersSortedByIndex(psd) {\n    var layers = [];\n    function collect(layer) {\n        var _a;\n        if (layer.children) for(var _i = 0, _b = layer.children; _i < _b.length; _i++){\n            var child = _b[_i];\n            if (((_a = child.text) === null || _a === void 0 ? void 0 : _a.index) !== undefined) layers[child.text.index] = child;\n            collect(child);\n        }\n    }\n    collect(psd);\n    return layers;\n}\n$92b49e225bf9343c$var$addHandler('Txt2', $92b49e225bf9343c$var$hasKey('engineData'), function(reader, target, left, psd) {\n    var data = (0, $5OPaf.readBytes)(reader, left());\n    target.engineData = (0, $jWkTT.fromByteArray)(data);\n    var layersByIndex = $92b49e225bf9343c$var$getTextLayersSortedByIndex(psd);\n    var engineData = (0, $2TM27.parseEngineData)(data);\n    var engineData2 = (0, $duoIX.decodeEngineData2)(engineData);\n    var TextFrameSet = engineData2.ResourceDict.TextFrameSet;\n    if (TextFrameSet) for(var i = 0; i < TextFrameSet.length; i++){\n        var layer = layersByIndex[i];\n        if (TextFrameSet[i].path && (layer === null || layer === void 0 ? void 0 : layer.text)) layer.text.textPath = TextFrameSet[i].path;\n    }\n// console.log(require('util').inspect(engineData, false, 99, true));\n// require('fs').writeFileSync('test_data.bin', data);\n// require('fs').writeFileSync('test_data.txt', require('util').inspect(engineData, false, 99, false), 'utf8');\n// require('fs').writeFileSync('test_data.json', JSON.stringify(engineData2, null, 2), 'utf8');\n}, function(writer, target) {\n    var buffer = (0, $jWkTT.toByteArray)(target.engineData);\n    (0, $kCSTH.writeBytes)(writer, buffer);\n});\n$92b49e225bf9343c$var$addHandler('FEid', $92b49e225bf9343c$var$hasKey('filterEffectsMasks'), function(reader, target, leftBytes) {\n    var version = (0, $5OPaf.readInt32)(reader);\n    if (version < 1 || version > 3) throw new Error(\"Invalid filterEffects version \".concat(version));\n    target.filterEffectsMasks = [];\n    while(leftBytes() > 8){\n        if ((0, $5OPaf.readUint32)(reader)) throw new Error('filterEffects: 64 bit length is not supported');\n        var length_2 = (0, $5OPaf.readUint32)(reader);\n        var end = reader.offset + length_2;\n        var id = (0, $5OPaf.readPascalString)(reader, 1);\n        var effectVersion = (0, $5OPaf.readInt32)(reader);\n        if (effectVersion !== 1) throw new Error(\"Invalid filterEffect version \".concat(effectVersion));\n        if ((0, $5OPaf.readUint32)(reader)) throw new Error('filterEffect: 64 bit length is not supported');\n        /*const effectLength =*/ (0, $5OPaf.readUint32)(reader);\n        // const endOfEffect = reader.offset + effectLength;\n        var top_2 = (0, $5OPaf.readInt32)(reader);\n        var left = (0, $5OPaf.readInt32)(reader);\n        var bottom = (0, $5OPaf.readInt32)(reader);\n        var right = (0, $5OPaf.readInt32)(reader);\n        var depth = (0, $5OPaf.readInt32)(reader);\n        var maxChannels = (0, $5OPaf.readInt32)(reader);\n        var channels = [];\n        // 0 -> R, 1 -> G, 2 -> B, 25 -> A\n        for(var i = 0; i < maxChannels + 2; i++){\n            var exists = (0, $5OPaf.readInt32)(reader);\n            if (exists) {\n                if ((0, $5OPaf.readUint32)(reader)) throw new Error('filterEffect: 64 bit length is not supported');\n                var channelLength = (0, $5OPaf.readUint32)(reader);\n                if (!channelLength) throw new Error('filterEffect: Empty channel');\n                var compressionMode = (0, $5OPaf.readUint16)(reader);\n                var data = (0, $5OPaf.readBytes)(reader, channelLength - 2);\n                channels.push({\n                    compressionMode: compressionMode,\n                    data: data\n                });\n            } else channels.push(undefined);\n        }\n        target.filterEffectsMasks.push({\n            id: id,\n            top: top_2,\n            left: left,\n            bottom: bottom,\n            right: right,\n            depth: depth,\n            channels: channels\n        });\n        if (reader.offset < end && (0, $5OPaf.readUint8)(reader)) {\n            var top_3 = (0, $5OPaf.readInt32)(reader);\n            var left_1 = (0, $5OPaf.readInt32)(reader);\n            var bottom_1 = (0, $5OPaf.readInt32)(reader);\n            var right_1 = (0, $5OPaf.readInt32)(reader);\n            if ((0, $5OPaf.readUint32)(reader)) throw new Error('filterEffect: 64 bit length is not supported');\n            var extraLength = (0, $5OPaf.readUint32)(reader);\n            var compressionMode = (0, $5OPaf.readUint16)(reader);\n            var data = (0, $5OPaf.readBytes)(reader, extraLength - 2);\n            target.filterEffectsMasks[target.filterEffectsMasks.length - 1].extra = {\n                top: top_3,\n                left: left_1,\n                bottom: bottom_1,\n                right: right_1,\n                compressionMode: compressionMode,\n                data: data\n            };\n        }\n        reader.offset = end;\n        var len = length_2;\n        while(len % 4){\n            reader.offset++;\n            len++;\n        }\n    }\n}, function(writer, target) {\n    var _a;\n    (0, $kCSTH.writeInt32)(writer, 3); // version\n    for(var _i = 0, _b = target.filterEffectsMasks; _i < _b.length; _i++){\n        var mask = _b[_i];\n        (0, $kCSTH.writeUint32)(writer, 0);\n        (0, $kCSTH.writeUint32)(writer, 0);\n        var lengthOffset = writer.offset;\n        (0, $kCSTH.writePascalString)(writer, mask.id, 1);\n        (0, $kCSTH.writeInt32)(writer, 1); // version\n        (0, $kCSTH.writeUint32)(writer, 0);\n        (0, $kCSTH.writeUint32)(writer, 0);\n        var length2Offset = writer.offset;\n        (0, $kCSTH.writeInt32)(writer, mask.top);\n        (0, $kCSTH.writeInt32)(writer, mask.left);\n        (0, $kCSTH.writeInt32)(writer, mask.bottom);\n        (0, $kCSTH.writeInt32)(writer, mask.right);\n        (0, $kCSTH.writeInt32)(writer, mask.depth);\n        var maxChannels = Math.max(0, mask.channels.length - 2);\n        (0, $kCSTH.writeInt32)(writer, maxChannels);\n        for(var i = 0; i < maxChannels + 2; i++){\n            var channel = mask.channels[i];\n            (0, $kCSTH.writeInt32)(writer, channel ? 1 : 0);\n            if (channel) {\n                (0, $kCSTH.writeUint32)(writer, 0);\n                (0, $kCSTH.writeUint32)(writer, channel.data.length + 2);\n                (0, $kCSTH.writeUint16)(writer, channel.compressionMode);\n                (0, $kCSTH.writeBytes)(writer, channel.data);\n            }\n        }\n        writer.view.setUint32(length2Offset - 4, writer.offset - length2Offset, false);\n        var extra = (_a = target.filterEffectsMasks[target.filterEffectsMasks.length - 1]) === null || _a === void 0 ? void 0 : _a.extra;\n        if (extra) {\n            (0, $kCSTH.writeUint8)(writer, 1);\n            (0, $kCSTH.writeInt32)(writer, extra.top);\n            (0, $kCSTH.writeInt32)(writer, extra.left);\n            (0, $kCSTH.writeInt32)(writer, extra.bottom);\n            (0, $kCSTH.writeInt32)(writer, extra.right);\n            (0, $kCSTH.writeUint32)(writer, 0);\n            (0, $kCSTH.writeUint32)(writer, extra.data.byteLength + 2);\n            (0, $kCSTH.writeUint16)(writer, extra.compressionMode);\n            (0, $kCSTH.writeBytes)(writer, extra.data);\n        }\n        var length_3 = writer.offset - lengthOffset;\n        writer.view.setUint32(lengthOffset - 4, length_3, false);\n        while(length_3 % 4){\n            (0, $kCSTH.writeZeros)(writer, 1);\n            length_3++;\n        }\n    }\n});\n$92b49e225bf9343c$var$addHandlerAlias('FXid', 'FEid');\n$92b49e225bf9343c$var$addHandler('FMsk', $92b49e225bf9343c$var$hasKey('filterMask'), function(reader, target) {\n    target.filterMask = {\n        colorSpace: (0, $5OPaf.readColor)(reader),\n        opacity: (0, $5OPaf.readUint16)(reader) / 0xff\n    };\n}, function(writer, target) {\n    var _a;\n    (0, $kCSTH.writeColor)(writer, target.filterMask.colorSpace);\n    (0, $kCSTH.writeUint16)(writer, (0, $jE67M.clamp)((_a = target.filterMask.opacity) !== null && _a !== void 0 ? _a : 1, 0, 1) * 0xff);\n});\n$92b49e225bf9343c$var$addHandler('artd', function(target) {\n    return target.artboards !== undefined;\n}, function(reader, target, left) {\n    var desc = (0, $klnll.readVersionAndDescriptor)(reader);\n    target.artboards = {\n        count: desc['Cnt '],\n        autoExpandOffset: {\n            horizontal: desc.autoExpandOffset.Hrzn,\n            vertical: desc.autoExpandOffset.Vrtc\n        },\n        origin: {\n            horizontal: desc.origin.Hrzn,\n            vertical: desc.origin.Vrtc\n        },\n        autoExpandEnabled: desc.autoExpandEnabled,\n        autoNestEnabled: desc.autoNestEnabled,\n        autoPositionEnabled: desc.autoPositionEnabled,\n        shrinkwrapOnSaveEnabled: !!desc.shrinkwrapOnSaveEnabled,\n        docDefaultNewArtboardBackgroundColor: (0, $klnll.parseColor)(desc.docDefaultNewArtboardBackgroundColor),\n        docDefaultNewArtboardBackgroundType: desc.docDefaultNewArtboardBackgroundType\n    };\n    (0, $5OPaf.skipBytes)(reader, left());\n}, function(writer, target) {\n    var _a, _b, _c, _d, _e;\n    var artb = target.artboards;\n    var desc = {\n        'Cnt ': artb.count,\n        autoExpandOffset: artb.autoExpandOffset ? {\n            Hrzn: artb.autoExpandOffset.horizontal,\n            Vrtc: artb.autoExpandOffset.vertical\n        } : {\n            Hrzn: 0,\n            Vrtc: 0\n        },\n        origin: artb.origin ? {\n            Hrzn: artb.origin.horizontal,\n            Vrtc: artb.origin.vertical\n        } : {\n            Hrzn: 0,\n            Vrtc: 0\n        },\n        autoExpandEnabled: (_a = artb.autoExpandEnabled) !== null && _a !== void 0 ? _a : true,\n        autoNestEnabled: (_b = artb.autoNestEnabled) !== null && _b !== void 0 ? _b : true,\n        autoPositionEnabled: (_c = artb.autoPositionEnabled) !== null && _c !== void 0 ? _c : true,\n        shrinkwrapOnSaveEnabled: (_d = artb.shrinkwrapOnSaveEnabled) !== null && _d !== void 0 ? _d : true,\n        docDefaultNewArtboardBackgroundColor: (0, $klnll.serializeColor)(artb.docDefaultNewArtboardBackgroundColor),\n        docDefaultNewArtboardBackgroundType: (_e = artb.docDefaultNewArtboardBackgroundType) !== null && _e !== void 0 ? _e : 1\n    };\n    (0, $klnll.writeVersionAndDescriptor)(writer, '', 'null', desc, 'artd');\n});\nfunction $92b49e225bf9343c$var$hasMultiEffects(effects) {\n    return Object.keys(effects).map(function(key) {\n        return effects[key];\n    }).some(function(v) {\n        return Array.isArray(v) && v.length > 1;\n    });\n}\nmodule.exports.hasMultiEffects = $92b49e225bf9343c$var$hasMultiEffects;\n$92b49e225bf9343c$var$addHandler('lfx2', function(target) {\n    return target.effects !== undefined && !$92b49e225bf9343c$var$hasMultiEffects(target.effects);\n}, function(reader, target, left) {\n    var version = (0, $5OPaf.readUint32)(reader);\n    if (version !== 0) throw new Error(\"Invalid lfx2 version\");\n    var desc = (0, $klnll.readVersionAndDescriptor)(reader);\n    // console.log('READ', require('util').inspect(desc, false, 99, true));\n    // TODO: don't discard if we got it from lmfx\n    // discard if read in 'lrFX' section\n    target.effects = (0, $klnll.parseEffects)(desc, !!reader.logMissingFeatures);\n    (0, $5OPaf.skipBytes)(reader, left());\n}, function(writer, target, _, options) {\n    var desc = (0, $klnll.serializeEffects)(target.effects, !!options.logMissingFeatures, true);\n    // console.log('WRITE', require('util').inspect(desc, false, 99, true));\n    (0, $kCSTH.writeUint32)(writer, 0); // version\n    (0, $klnll.writeVersionAndDescriptor)(writer, '', 'null', desc);\n});\n$92b49e225bf9343c$var$addHandler('cinf', $92b49e225bf9343c$var$hasKey('compositorUsed'), function(reader, target, left) {\n    var desc = (0, $klnll.readVersionAndDescriptor)(reader);\n    // console.log(require('util').inspect(desc, false, 99, true));\n    function enumValue(desc) {\n        return desc.split('.')[1];\n    }\n    target.compositorUsed = {\n        description: desc.description,\n        reason: desc.reason,\n        engine: enumValue(desc.Engn)\n    };\n    if (desc.Vrsn) target.compositorUsed.version = desc.Vrsn;\n    if (desc.psVersion) target.compositorUsed.photoshopVersion = desc.psVersion;\n    if (desc.enableCompCore) target.compositorUsed.enableCompCore = enumValue(desc.enableCompCore);\n    if (desc.enableCompCoreGPU) target.compositorUsed.enableCompCoreGPU = enumValue(desc.enableCompCoreGPU);\n    if (desc.enableCompCoreThreads) target.compositorUsed.enableCompCoreThreads = enumValue(desc.enableCompCoreThreads);\n    if (desc.compCoreSupport) target.compositorUsed.compCoreSupport = enumValue(desc.compCoreSupport);\n    if (desc.compCoreGPUSupport) target.compositorUsed.compCoreGPUSupport = enumValue(desc.compCoreGPUSupport);\n    (0, $5OPaf.skipBytes)(reader, left());\n}, function(writer, target) {\n    var cinf = target.compositorUsed;\n    var desc = {\n        Vrsn: cinf.version || {\n            major: 1,\n            minor: 0,\n            fix: 0\n        }\n    };\n    if (cinf.photoshopVersion) desc.psVersion = cinf.photoshopVersion;\n    desc.description = cinf.description;\n    desc.reason = cinf.reason;\n    desc.Engn = \"Engn.\".concat(cinf.engine);\n    if (cinf.enableCompCore) desc.enableCompCore = \"enable.\".concat(cinf.enableCompCore);\n    if (cinf.enableCompCoreGPU) desc.enableCompCoreGPU = \"enable.\".concat(cinf.enableCompCoreGPU);\n    if (cinf.enableCompCoreThreads) desc.enableCompCoreThreads = \"enable.\".concat(cinf.enableCompCoreThreads);\n    if (cinf.compCoreSupport) desc.compCoreSupport = \"reason.\".concat(cinf.compCoreSupport);\n    if (cinf.compCoreGPUSupport) desc.compCoreGPUSupport = \"reason.\".concat(cinf.compCoreGPUSupport);\n    (0, $klnll.writeVersionAndDescriptor)(writer, '', 'null', desc);\n});\n// extension settings ?, ignore it\n$92b49e225bf9343c$var$addHandler('extn', function(target) {\n    return target._extn !== undefined;\n}, function(reader, target) {\n    var desc = (0, $klnll.readVersionAndDescriptor)(reader);\n    // console.log(require('util').inspect(desc, false, 99, true));\n    if ($jE67M.MOCK_HANDLERS) target._extn = desc;\n}, function(writer, target) {\n    // TODO: need to add correct types for desc fields (resources/src.psd)\n    if ($jE67M.MOCK_HANDLERS) (0, $klnll.writeVersionAndDescriptor)(writer, '', 'null', target._extn);\n});\n$92b49e225bf9343c$var$addHandler('iOpa', $92b49e225bf9343c$var$hasKey('fillOpacity'), function(reader, target) {\n    target.fillOpacity = (0, $5OPaf.readUint8)(reader) / 0xff;\n    (0, $5OPaf.skipBytes)(reader, 3);\n}, function(writer, target) {\n    (0, $kCSTH.writeUint8)(writer, target.fillOpacity * 0xff);\n    (0, $kCSTH.writeZeros)(writer, 3);\n});\n$92b49e225bf9343c$var$addHandler('brst', $92b49e225bf9343c$var$hasKey('channelBlendingRestrictions'), function(reader, target, left) {\n    target.channelBlendingRestrictions = [];\n    while(left() > 4)target.channelBlendingRestrictions.push((0, $5OPaf.readInt32)(reader));\n}, function(writer, target) {\n    for(var _i = 0, _a = target.channelBlendingRestrictions; _i < _a.length; _i++){\n        var channel = _a[_i];\n        (0, $kCSTH.writeInt32)(writer, channel);\n    }\n});\n$92b49e225bf9343c$var$addHandler('tsly', $92b49e225bf9343c$var$hasKey('transparencyShapesLayer'), function(reader, target) {\n    target.transparencyShapesLayer = !!(0, $5OPaf.readUint8)(reader);\n    (0, $5OPaf.skipBytes)(reader, 3);\n}, function(writer, target) {\n    (0, $kCSTH.writeUint8)(writer, target.transparencyShapesLayer ? 1 : 0);\n    (0, $kCSTH.writeZeros)(writer, 3);\n});\n\n});\nparcelRegister(\"26rz6\", function(module, exports) {\n\"use strict\";\nObject.defineProperty(module.exports, \"__esModule\", {\n    value: true\n});\nmodule.exports.writeEffects = module.exports.readEffects = void 0;\n\nvar $jE67M = parcelRequire(\"jE67M\");\n\nvar $5OPaf = parcelRequire(\"5OPaf\");\n\nvar $kCSTH = parcelRequire(\"kCSTH\");\nvar $18818631259b9992$var$bevelStyles = [\n    undefined,\n    'outer bevel',\n    'inner bevel',\n    'emboss',\n    'pillow emboss',\n    'stroke emboss'\n];\nfunction $18818631259b9992$var$readBlendMode(reader) {\n    (0, $5OPaf.checkSignature)(reader, '8BIM');\n    return $jE67M.toBlendMode[(0, $5OPaf.readSignature)(reader)] || 'normal';\n}\nfunction $18818631259b9992$var$writeBlendMode(writer, mode) {\n    (0, $kCSTH.writeSignature)(writer, '8BIM');\n    (0, $kCSTH.writeSignature)(writer, $jE67M.fromBlendMode[mode] || 'norm');\n}\nfunction $18818631259b9992$var$readFixedPoint8(reader) {\n    return (0, $5OPaf.readUint8)(reader) / 0xff;\n}\nfunction $18818631259b9992$var$writeFixedPoint8(writer, value) {\n    (0, $kCSTH.writeUint8)(writer, Math.round(value * 0xff) | 0);\n}\nfunction $18818631259b9992$var$readEffects(reader) {\n    var version = (0, $5OPaf.readUint16)(reader);\n    if (version !== 0) throw new Error(\"Invalid effects layer version: \".concat(version));\n    var effectsCount = (0, $5OPaf.readUint16)(reader);\n    var effects = {};\n    for(var i = 0; i < effectsCount; i++){\n        (0, $5OPaf.checkSignature)(reader, '8BIM');\n        var type = (0, $5OPaf.readSignature)(reader);\n        switch(type){\n            case 'cmnS':\n                var size = (0, $5OPaf.readUint32)(reader);\n                var version_1 = (0, $5OPaf.readUint32)(reader);\n                var visible = !!(0, $5OPaf.readUint8)(reader);\n                (0, $5OPaf.skipBytes)(reader, 2);\n                if (size !== 7 || version_1 !== 0 || !visible) throw new Error(\"Invalid effects common state\");\n                break;\n            case 'dsdw':\n            case 'isdw':\n                var blockSize = (0, $5OPaf.readUint32)(reader);\n                var version_2 = (0, $5OPaf.readUint32)(reader);\n                if (blockSize !== 41 && blockSize !== 51) throw new Error(\"Invalid shadow size: \".concat(blockSize));\n                if (version_2 !== 0 && version_2 !== 2) throw new Error(\"Invalid shadow version: \".concat(version_2));\n                var size = (0, $5OPaf.readFixedPoint32)(reader);\n                (0, $5OPaf.readFixedPoint32)(reader); // intensity\n                var angle = (0, $5OPaf.readFixedPoint32)(reader);\n                var distance = (0, $5OPaf.readFixedPoint32)(reader);\n                var color = (0, $5OPaf.readColor)(reader);\n                var blendMode = $18818631259b9992$var$readBlendMode(reader);\n                var enabled = !!(0, $5OPaf.readUint8)(reader);\n                var useGlobalLight = !!(0, $5OPaf.readUint8)(reader);\n                var opacity = $18818631259b9992$var$readFixedPoint8(reader);\n                if (blockSize >= 51) (0, $5OPaf.readColor)(reader); // native color\n                var shadowInfo = {\n                    size: {\n                        units: 'Pixels',\n                        value: size\n                    },\n                    distance: {\n                        units: 'Pixels',\n                        value: distance\n                    },\n                    angle: angle,\n                    color: color,\n                    blendMode: blendMode,\n                    enabled: enabled,\n                    useGlobalLight: useGlobalLight,\n                    opacity: opacity\n                };\n                if (type === 'dsdw') effects.dropShadow = [\n                    shadowInfo\n                ];\n                else effects.innerShadow = [\n                    shadowInfo\n                ];\n                break;\n            case 'oglw':\n                var blockSize = (0, $5OPaf.readUint32)(reader);\n                var version_3 = (0, $5OPaf.readUint32)(reader);\n                if (blockSize !== 32 && blockSize !== 42) throw new Error(\"Invalid outer glow size: \".concat(blockSize));\n                if (version_3 !== 0 && version_3 !== 2) throw new Error(\"Invalid outer glow version: \".concat(version_3));\n                var size = (0, $5OPaf.readFixedPoint32)(reader);\n                (0, $5OPaf.readFixedPoint32)(reader); // intensity\n                var color = (0, $5OPaf.readColor)(reader);\n                var blendMode = $18818631259b9992$var$readBlendMode(reader);\n                var enabled = !!(0, $5OPaf.readUint8)(reader);\n                var opacity = $18818631259b9992$var$readFixedPoint8(reader);\n                if (blockSize >= 42) (0, $5OPaf.readColor)(reader); // native color\n                effects.outerGlow = {\n                    size: {\n                        units: 'Pixels',\n                        value: size\n                    },\n                    color: color,\n                    blendMode: blendMode,\n                    enabled: enabled,\n                    opacity: opacity\n                };\n                break;\n            case 'iglw':\n                var blockSize = (0, $5OPaf.readUint32)(reader);\n                var version_4 = (0, $5OPaf.readUint32)(reader);\n                if (blockSize !== 32 && blockSize !== 43) throw new Error(\"Invalid inner glow size: \".concat(blockSize));\n                if (version_4 !== 0 && version_4 !== 2) throw new Error(\"Invalid inner glow version: \".concat(version_4));\n                var size = (0, $5OPaf.readFixedPoint32)(reader);\n                (0, $5OPaf.readFixedPoint32)(reader); // intensity\n                var color = (0, $5OPaf.readColor)(reader);\n                var blendMode = $18818631259b9992$var$readBlendMode(reader);\n                var enabled = !!(0, $5OPaf.readUint8)(reader);\n                var opacity = $18818631259b9992$var$readFixedPoint8(reader);\n                if (blockSize >= 43) {\n                    (0, $5OPaf.readUint8)(reader); // inverted\n                    (0, $5OPaf.readColor)(reader); // native color\n                }\n                effects.innerGlow = {\n                    size: {\n                        units: 'Pixels',\n                        value: size\n                    },\n                    color: color,\n                    blendMode: blendMode,\n                    enabled: enabled,\n                    opacity: opacity\n                };\n                break;\n            case 'bevl':\n                var blockSize = (0, $5OPaf.readUint32)(reader);\n                var version_5 = (0, $5OPaf.readUint32)(reader);\n                if (blockSize !== 58 && blockSize !== 78) throw new Error(\"Invalid bevel size: \".concat(blockSize));\n                if (version_5 !== 0 && version_5 !== 2) throw new Error(\"Invalid bevel version: \".concat(version_5));\n                var angle = (0, $5OPaf.readFixedPoint32)(reader);\n                var strength = (0, $5OPaf.readFixedPoint32)(reader);\n                var size = (0, $5OPaf.readFixedPoint32)(reader);\n                var highlightBlendMode = $18818631259b9992$var$readBlendMode(reader);\n                var shadowBlendMode = $18818631259b9992$var$readBlendMode(reader);\n                var highlightColor = (0, $5OPaf.readColor)(reader);\n                var shadowColor = (0, $5OPaf.readColor)(reader);\n                var style = $18818631259b9992$var$bevelStyles[(0, $5OPaf.readUint8)(reader)] || 'inner bevel';\n                var highlightOpacity = $18818631259b9992$var$readFixedPoint8(reader);\n                var shadowOpacity = $18818631259b9992$var$readFixedPoint8(reader);\n                var enabled = !!(0, $5OPaf.readUint8)(reader);\n                var useGlobalLight = !!(0, $5OPaf.readUint8)(reader);\n                var direction = (0, $5OPaf.readUint8)(reader) ? 'down' : 'up';\n                if (blockSize >= 78) {\n                    (0, $5OPaf.readColor)(reader); // real highlight color\n                    (0, $5OPaf.readColor)(reader); // real shadow color\n                }\n                effects.bevel = {\n                    size: {\n                        units: 'Pixels',\n                        value: size\n                    },\n                    angle: angle,\n                    strength: strength,\n                    highlightBlendMode: highlightBlendMode,\n                    shadowBlendMode: shadowBlendMode,\n                    highlightColor: highlightColor,\n                    shadowColor: shadowColor,\n                    style: style,\n                    highlightOpacity: highlightOpacity,\n                    shadowOpacity: shadowOpacity,\n                    enabled: enabled,\n                    useGlobalLight: useGlobalLight,\n                    direction: direction\n                };\n                break;\n            case 'sofi':\n                var size = (0, $5OPaf.readUint32)(reader);\n                var version_6 = (0, $5OPaf.readUint32)(reader);\n                if (size !== 34) throw new Error(\"Invalid effects solid fill info size: \".concat(size));\n                if (version_6 !== 2) throw new Error(\"Invalid effects solid fill info version: \".concat(version_6));\n                var blendMode = $18818631259b9992$var$readBlendMode(reader);\n                var color = (0, $5OPaf.readColor)(reader);\n                var opacity = $18818631259b9992$var$readFixedPoint8(reader);\n                var enabled = !!(0, $5OPaf.readUint8)(reader);\n                (0, $5OPaf.readColor)(reader); // native color\n                effects.solidFill = [\n                    {\n                        blendMode: blendMode,\n                        color: color,\n                        opacity: opacity,\n                        enabled: enabled\n                    }\n                ];\n                break;\n            default:\n                throw new Error(\"Invalid effect type: '\".concat(type, \"'\"));\n        }\n    }\n    return effects;\n}\nmodule.exports.readEffects = $18818631259b9992$var$readEffects;\nfunction $18818631259b9992$var$writeShadowInfo(writer, shadow) {\n    var _a;\n    (0, $kCSTH.writeUint32)(writer, 51);\n    (0, $kCSTH.writeUint32)(writer, 2);\n    (0, $kCSTH.writeFixedPoint32)(writer, shadow.size && shadow.size.value || 0);\n    (0, $kCSTH.writeFixedPoint32)(writer, 0); // intensity\n    (0, $kCSTH.writeFixedPoint32)(writer, shadow.angle || 0);\n    (0, $kCSTH.writeFixedPoint32)(writer, shadow.distance && shadow.distance.value || 0);\n    (0, $kCSTH.writeColor)(writer, shadow.color);\n    $18818631259b9992$var$writeBlendMode(writer, shadow.blendMode);\n    (0, $kCSTH.writeUint8)(writer, shadow.enabled ? 1 : 0);\n    (0, $kCSTH.writeUint8)(writer, shadow.useGlobalLight ? 1 : 0);\n    $18818631259b9992$var$writeFixedPoint8(writer, (_a = shadow.opacity) !== null && _a !== void 0 ? _a : 1);\n    (0, $kCSTH.writeColor)(writer, shadow.color); // native color\n}\nfunction $18818631259b9992$var$writeEffects(writer, effects) {\n    var _a, _b, _c, _d, _e, _f;\n    var dropShadow = (_a = effects.dropShadow) === null || _a === void 0 ? void 0 : _a[0];\n    var innerShadow = (_b = effects.innerShadow) === null || _b === void 0 ? void 0 : _b[0];\n    var outerGlow = effects.outerGlow;\n    var innerGlow = effects.innerGlow;\n    var bevel = effects.bevel;\n    var solidFill = (_c = effects.solidFill) === null || _c === void 0 ? void 0 : _c[0];\n    var count = 1;\n    if (dropShadow) count++;\n    if (innerShadow) count++;\n    if (outerGlow) count++;\n    if (innerGlow) count++;\n    if (bevel) count++;\n    if (solidFill) count++;\n    (0, $kCSTH.writeUint16)(writer, 0);\n    (0, $kCSTH.writeUint16)(writer, count);\n    (0, $kCSTH.writeSignature)(writer, '8BIM');\n    (0, $kCSTH.writeSignature)(writer, 'cmnS');\n    (0, $kCSTH.writeUint32)(writer, 7); // size\n    (0, $kCSTH.writeUint32)(writer, 0); // version\n    (0, $kCSTH.writeUint8)(writer, 1); // visible\n    (0, $kCSTH.writeZeros)(writer, 2);\n    if (dropShadow) {\n        (0, $kCSTH.writeSignature)(writer, '8BIM');\n        (0, $kCSTH.writeSignature)(writer, 'dsdw');\n        $18818631259b9992$var$writeShadowInfo(writer, dropShadow);\n    }\n    if (innerShadow) {\n        (0, $kCSTH.writeSignature)(writer, '8BIM');\n        (0, $kCSTH.writeSignature)(writer, 'isdw');\n        $18818631259b9992$var$writeShadowInfo(writer, innerShadow);\n    }\n    if (outerGlow) {\n        (0, $kCSTH.writeSignature)(writer, '8BIM');\n        (0, $kCSTH.writeSignature)(writer, 'oglw');\n        (0, $kCSTH.writeUint32)(writer, 42);\n        (0, $kCSTH.writeUint32)(writer, 2);\n        (0, $kCSTH.writeFixedPoint32)(writer, ((_d = outerGlow.size) === null || _d === void 0 ? void 0 : _d.value) || 0);\n        (0, $kCSTH.writeFixedPoint32)(writer, 0); // intensity\n        (0, $kCSTH.writeColor)(writer, outerGlow.color);\n        $18818631259b9992$var$writeBlendMode(writer, outerGlow.blendMode);\n        (0, $kCSTH.writeUint8)(writer, outerGlow.enabled ? 1 : 0);\n        $18818631259b9992$var$writeFixedPoint8(writer, outerGlow.opacity || 0);\n        (0, $kCSTH.writeColor)(writer, outerGlow.color);\n    }\n    if (innerGlow) {\n        (0, $kCSTH.writeSignature)(writer, '8BIM');\n        (0, $kCSTH.writeSignature)(writer, 'iglw');\n        (0, $kCSTH.writeUint32)(writer, 43);\n        (0, $kCSTH.writeUint32)(writer, 2);\n        (0, $kCSTH.writeFixedPoint32)(writer, ((_e = innerGlow.size) === null || _e === void 0 ? void 0 : _e.value) || 0);\n        (0, $kCSTH.writeFixedPoint32)(writer, 0); // intensity\n        (0, $kCSTH.writeColor)(writer, innerGlow.color);\n        $18818631259b9992$var$writeBlendMode(writer, innerGlow.blendMode);\n        (0, $kCSTH.writeUint8)(writer, innerGlow.enabled ? 1 : 0);\n        $18818631259b9992$var$writeFixedPoint8(writer, innerGlow.opacity || 0);\n        (0, $kCSTH.writeUint8)(writer, 0); // inverted\n        (0, $kCSTH.writeColor)(writer, innerGlow.color);\n    }\n    if (bevel) {\n        (0, $kCSTH.writeSignature)(writer, '8BIM');\n        (0, $kCSTH.writeSignature)(writer, 'bevl');\n        (0, $kCSTH.writeUint32)(writer, 78);\n        (0, $kCSTH.writeUint32)(writer, 2);\n        (0, $kCSTH.writeFixedPoint32)(writer, bevel.angle || 0);\n        (0, $kCSTH.writeFixedPoint32)(writer, bevel.strength || 0);\n        (0, $kCSTH.writeFixedPoint32)(writer, ((_f = bevel.size) === null || _f === void 0 ? void 0 : _f.value) || 0);\n        $18818631259b9992$var$writeBlendMode(writer, bevel.highlightBlendMode);\n        $18818631259b9992$var$writeBlendMode(writer, bevel.shadowBlendMode);\n        (0, $kCSTH.writeColor)(writer, bevel.highlightColor);\n        (0, $kCSTH.writeColor)(writer, bevel.shadowColor);\n        var style = $18818631259b9992$var$bevelStyles.indexOf(bevel.style);\n        (0, $kCSTH.writeUint8)(writer, style <= 0 ? 1 : style);\n        $18818631259b9992$var$writeFixedPoint8(writer, bevel.highlightOpacity || 0);\n        $18818631259b9992$var$writeFixedPoint8(writer, bevel.shadowOpacity || 0);\n        (0, $kCSTH.writeUint8)(writer, bevel.enabled ? 1 : 0);\n        (0, $kCSTH.writeUint8)(writer, bevel.useGlobalLight ? 1 : 0);\n        (0, $kCSTH.writeUint8)(writer, bevel.direction === 'down' ? 1 : 0);\n        (0, $kCSTH.writeColor)(writer, bevel.highlightColor);\n        (0, $kCSTH.writeColor)(writer, bevel.shadowColor);\n    }\n    if (solidFill) {\n        (0, $kCSTH.writeSignature)(writer, '8BIM');\n        (0, $kCSTH.writeSignature)(writer, 'sofi');\n        (0, $kCSTH.writeUint32)(writer, 34);\n        (0, $kCSTH.writeUint32)(writer, 2);\n        $18818631259b9992$var$writeBlendMode(writer, solidFill.blendMode);\n        (0, $kCSTH.writeColor)(writer, solidFill.color);\n        $18818631259b9992$var$writeFixedPoint8(writer, solidFill.opacity || 0);\n        (0, $kCSTH.writeUint8)(writer, solidFill.enabled ? 1 : 0);\n        (0, $kCSTH.writeColor)(writer, solidFill.color);\n    }\n}\nmodule.exports.writeEffects = $18818631259b9992$var$writeEffects;\n\n});\nparcelRegister(\"5OPaf\", function(module, exports) {\n\"use strict\";\nvar $43c94f66d9a06bba$var$__rest = module.exports && module.exports.__rest || function(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") {\n        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n};\nObject.defineProperty(module.exports, \"__esModule\", {\n    value: true\n});\nmodule.exports.readPattern = module.exports.readColor = module.exports.readSection = module.exports.readDataRLE = module.exports.readDataZip = module.exports.createImageDataBitDepth = module.exports.readAdditionalLayerInfo = module.exports.readGlobalLayerMaskInfo = module.exports.readData = module.exports.readLayerInfo = module.exports.readPsd = module.exports.checkSignature = module.exports.skipBytes = module.exports.readAsciiString = module.exports.readUnicodeStringWithLengthLE = module.exports.readUnicodeStringWithLength = module.exports.readUnicodeString = module.exports.readPascalString = module.exports.validSignatureAt = module.exports.readSignature = module.exports.readBytes = module.exports.readFixedPointPath32 = module.exports.readFixedPoint32 = module.exports.readFloat64 = module.exports.readFloat32 = module.exports.readUint32 = module.exports.readInt32LE = module.exports.readInt32 = module.exports.readUint16LE = module.exports.readUint16 = module.exports.readInt16 = module.exports.peekUint8 = module.exports.readUint8 = module.exports.warnOrThrow = module.exports.createReader = module.exports.supportedColorModes = void 0;\n\nvar $1eu3Z = parcelRequire(\"1eu3Z\");\n\nvar $jE67M = parcelRequire(\"jE67M\");\n\nvar $cAUqy = parcelRequire(\"cAUqy\");\n\nvar $aqyg9 = parcelRequire(\"aqyg9\");\nmodule.exports.supportedColorModes = [\n    0 /* ColorMode.Bitmap */ ,\n    1 /* ColorMode.Grayscale */ ,\n    3 /* ColorMode.RGB */ ,\n    2 /* ColorMode.Indexed */ \n];\nvar $43c94f66d9a06bba$var$colorModes = [\n    'bitmap',\n    'grayscale',\n    'indexed',\n    'RGB',\n    'CMYK',\n    'multichannel',\n    'duotone',\n    'lab'\n];\nfunction $43c94f66d9a06bba$var$setupGrayscale(data) {\n    var size = data.width * data.height * 4;\n    for(var i = 0; i < size; i += 4){\n        data.data[i + 1] = data.data[i];\n        data.data[i + 2] = data.data[i];\n    }\n}\nfunction $43c94f66d9a06bba$var$createReader(buffer, offset, length) {\n    var view = new DataView(buffer, offset, length);\n    return {\n        view: view,\n        offset: 0,\n        strict: false,\n        debug: false,\n        large: false,\n        globalAlpha: false,\n        log: console.log\n    };\n}\nmodule.exports.createReader = $43c94f66d9a06bba$var$createReader;\nfunction $43c94f66d9a06bba$var$warnOrThrow(reader, message) {\n    if (reader.strict) throw new Error(message);\n    if (reader.debug) reader.log(message);\n}\nmodule.exports.warnOrThrow = $43c94f66d9a06bba$var$warnOrThrow;\nfunction $43c94f66d9a06bba$var$readUint8(reader) {\n    reader.offset += 1;\n    return reader.view.getUint8(reader.offset - 1);\n}\nmodule.exports.readUint8 = $43c94f66d9a06bba$var$readUint8;\nfunction $43c94f66d9a06bba$var$peekUint8(reader) {\n    return reader.view.getUint8(reader.offset);\n}\nmodule.exports.peekUint8 = $43c94f66d9a06bba$var$peekUint8;\nfunction $43c94f66d9a06bba$var$readInt16(reader) {\n    reader.offset += 2;\n    return reader.view.getInt16(reader.offset - 2, false);\n}\nmodule.exports.readInt16 = $43c94f66d9a06bba$var$readInt16;\nfunction $43c94f66d9a06bba$var$readUint16(reader) {\n    reader.offset += 2;\n    return reader.view.getUint16(reader.offset - 2, false);\n}\nmodule.exports.readUint16 = $43c94f66d9a06bba$var$readUint16;\nfunction $43c94f66d9a06bba$var$readUint16LE(reader) {\n    reader.offset += 2;\n    return reader.view.getUint16(reader.offset - 2, true);\n}\nmodule.exports.readUint16LE = $43c94f66d9a06bba$var$readUint16LE;\nfunction $43c94f66d9a06bba$var$readInt32(reader) {\n    reader.offset += 4;\n    return reader.view.getInt32(reader.offset - 4, false);\n}\nmodule.exports.readInt32 = $43c94f66d9a06bba$var$readInt32;\nfunction $43c94f66d9a06bba$var$readInt32LE(reader) {\n    reader.offset += 4;\n    return reader.view.getInt32(reader.offset - 4, true);\n}\nmodule.exports.readInt32LE = $43c94f66d9a06bba$var$readInt32LE;\nfunction $43c94f66d9a06bba$var$readUint32(reader) {\n    reader.offset += 4;\n    return reader.view.getUint32(reader.offset - 4, false);\n}\nmodule.exports.readUint32 = $43c94f66d9a06bba$var$readUint32;\nfunction $43c94f66d9a06bba$var$readFloat32(reader) {\n    reader.offset += 4;\n    return reader.view.getFloat32(reader.offset - 4, false);\n}\nmodule.exports.readFloat32 = $43c94f66d9a06bba$var$readFloat32;\nfunction $43c94f66d9a06bba$var$readFloat64(reader) {\n    reader.offset += 8;\n    return reader.view.getFloat64(reader.offset - 8, false);\n}\nmodule.exports.readFloat64 = $43c94f66d9a06bba$var$readFloat64;\n// 32-bit fixed-point number 16.16\nfunction $43c94f66d9a06bba$var$readFixedPoint32(reader) {\n    return $43c94f66d9a06bba$var$readInt32(reader) / 65536;\n}\nmodule.exports.readFixedPoint32 = $43c94f66d9a06bba$var$readFixedPoint32;\n// 32-bit fixed-point number 8.24\nfunction $43c94f66d9a06bba$var$readFixedPointPath32(reader) {\n    return $43c94f66d9a06bba$var$readInt32(reader) / 16777216;\n}\nmodule.exports.readFixedPointPath32 = $43c94f66d9a06bba$var$readFixedPointPath32;\nfunction $43c94f66d9a06bba$var$readBytes(reader, length) {\n    var start = reader.view.byteOffset + reader.offset;\n    reader.offset += length;\n    if (start + length > reader.view.buffer.byteLength) {\n        // fix for broken PSD files that are missing part of file at the end\n        $43c94f66d9a06bba$var$warnOrThrow(reader, 'Reading bytes exceeding buffer length');\n        if (length > 104857600) throw new Error('Reading past end of file'); // limit to 100MB\n        var result = new Uint8Array(length);\n        var len = Math.min(length, reader.view.byteLength - start);\n        if (len > 0) result.set(new Uint8Array(reader.view.buffer, start, len));\n        return result;\n    } else return new Uint8Array(reader.view.buffer, start, length);\n}\nmodule.exports.readBytes = $43c94f66d9a06bba$var$readBytes;\nfunction $43c94f66d9a06bba$var$readSignature(reader) {\n    return $43c94f66d9a06bba$var$readShortString(reader, 4);\n}\nmodule.exports.readSignature = $43c94f66d9a06bba$var$readSignature;\nfunction $43c94f66d9a06bba$var$validSignatureAt(reader, offset) {\n    var sig = String.fromCharCode(reader.view.getUint8(offset)) + String.fromCharCode(reader.view.getUint8(offset + 1)) + String.fromCharCode(reader.view.getUint8(offset + 2)) + String.fromCharCode(reader.view.getUint8(offset + 3));\n    return sig == '8BIM' || sig == '8B64';\n}\nmodule.exports.validSignatureAt = $43c94f66d9a06bba$var$validSignatureAt;\nfunction $43c94f66d9a06bba$var$readPascalString(reader, padTo) {\n    var length = $43c94f66d9a06bba$var$readUint8(reader);\n    var text = length ? $43c94f66d9a06bba$var$readShortString(reader, length) : '';\n    while(++length % padTo)reader.offset++;\n    return text;\n}\nmodule.exports.readPascalString = $43c94f66d9a06bba$var$readPascalString;\nfunction $43c94f66d9a06bba$var$readUnicodeString(reader) {\n    var length = $43c94f66d9a06bba$var$readUint32(reader);\n    return $43c94f66d9a06bba$var$readUnicodeStringWithLength(reader, length);\n}\nmodule.exports.readUnicodeString = $43c94f66d9a06bba$var$readUnicodeString;\nfunction $43c94f66d9a06bba$var$readUnicodeStringWithLength(reader, length) {\n    var text = '';\n    while(length--){\n        var value = $43c94f66d9a06bba$var$readUint16(reader);\n        if (value || length > 0) text += String.fromCharCode(value);\n    }\n    return text;\n}\nmodule.exports.readUnicodeStringWithLength = $43c94f66d9a06bba$var$readUnicodeStringWithLength;\nfunction $43c94f66d9a06bba$var$readUnicodeStringWithLengthLE(reader, length) {\n    var text = '';\n    while(length--){\n        var value = $43c94f66d9a06bba$var$readUint16LE(reader);\n        if (value || length > 0) text += String.fromCharCode(value);\n    }\n    return text;\n}\nmodule.exports.readUnicodeStringWithLengthLE = $43c94f66d9a06bba$var$readUnicodeStringWithLengthLE;\nfunction $43c94f66d9a06bba$var$readAsciiString(reader, length) {\n    var text = '';\n    while(length--)text += String.fromCharCode($43c94f66d9a06bba$var$readUint8(reader));\n    return text;\n}\nmodule.exports.readAsciiString = $43c94f66d9a06bba$var$readAsciiString;\nfunction $43c94f66d9a06bba$var$skipBytes(reader, count) {\n    reader.offset += count;\n}\nmodule.exports.skipBytes = $43c94f66d9a06bba$var$skipBytes;\nfunction $43c94f66d9a06bba$var$checkSignature(reader, a, b) {\n    var offset = reader.offset;\n    var signature = $43c94f66d9a06bba$var$readSignature(reader);\n    if (signature !== a && signature !== b) throw new Error(\"Invalid signature: '\".concat(signature, \"' at 0x\").concat(offset.toString(16)));\n}\nmodule.exports.checkSignature = $43c94f66d9a06bba$var$checkSignature;\nfunction $43c94f66d9a06bba$var$readShortString(reader, length) {\n    var buffer = $43c94f66d9a06bba$var$readBytes(reader, length);\n    var result = '';\n    for(var i = 0; i < buffer.length; i++)result += String.fromCharCode(buffer[i]);\n    return result;\n}\nfunction $43c94f66d9a06bba$var$isValidSignature(sig) {\n    return sig === '8BIM' || sig === 'MeSa' || sig === 'AgHg' || sig === 'PHUT' || sig === 'DCSR';\n}\nfunction $43c94f66d9a06bba$var$readPsd(reader, readOptions) {\n    var _a;\n    if (readOptions === void 0) readOptions = {};\n    // header\n    $43c94f66d9a06bba$var$checkSignature(reader, '8BPS');\n    var version = $43c94f66d9a06bba$var$readUint16(reader);\n    if (version !== 1 && version !== 2) throw new Error(\"Invalid PSD file version: \".concat(version));\n    $43c94f66d9a06bba$var$skipBytes(reader, 6);\n    var channels = $43c94f66d9a06bba$var$readUint16(reader);\n    var height = $43c94f66d9a06bba$var$readUint32(reader);\n    var width = $43c94f66d9a06bba$var$readUint32(reader);\n    var bitsPerChannel = $43c94f66d9a06bba$var$readUint16(reader);\n    var colorMode = $43c94f66d9a06bba$var$readUint16(reader);\n    var maxSize = version === 1 ? 30000 : 300000;\n    if (width > maxSize || height > maxSize) throw new Error(\"Invalid size: \".concat(width, \"x\").concat(height));\n    if (channels > 16) throw new Error(\"Invalid channel count: \".concat(channels));\n    if (![\n        1,\n        8,\n        16,\n        32\n    ].includes(bitsPerChannel)) throw new Error(\"Invalid bitsPerChannel: \".concat(bitsPerChannel));\n    if (module.exports.supportedColorModes.indexOf(colorMode) === -1) throw new Error(\"Color mode not supported: \".concat((_a = $43c94f66d9a06bba$var$colorModes[colorMode]) !== null && _a !== void 0 ? _a : colorMode));\n    var psd = {\n        width: width,\n        height: height,\n        channels: channels,\n        bitsPerChannel: bitsPerChannel,\n        colorMode: colorMode\n    };\n    Object.assign(reader, readOptions);\n    reader.large = version === 2;\n    reader.globalAlpha = false;\n    var fixOffsets = [\n        0,\n        1,\n        -1,\n        2,\n        -2,\n        3,\n        -3,\n        4,\n        -4\n    ];\n    // color mode data\n    $43c94f66d9a06bba$var$readSection(reader, 1, function(left) {\n        if (!left()) return;\n        if (colorMode === 2 /* ColorMode.Indexed */ ) {\n            // should have 256 colors here saved as 8bit channels RGB\n            if (left() != 768) throw new Error('Invalid color palette size');\n            psd.palette = [];\n            for(var i = 0; i < 256; i++)psd.palette.push({\n                r: $43c94f66d9a06bba$var$readUint8(reader),\n                g: 0,\n                b: 0\n            });\n            for(var i = 0; i < 256; i++)psd.palette[i].g = $43c94f66d9a06bba$var$readUint8(reader);\n            for(var i = 0; i < 256; i++)psd.palette[i].b = $43c94f66d9a06bba$var$readUint8(reader);\n        }\n        $43c94f66d9a06bba$var$skipBytes(reader, left());\n    });\n    // image resources\n    var imageResources = {};\n    $43c94f66d9a06bba$var$readSection(reader, 1, function(left) {\n        var _loop_1 = function _loop_1() {\n            var sigOffset = reader.offset;\n            var sig = '';\n            // attempt to fix broken document by realigning with the signature\n            for(var _i = 0, fixOffsets_1 = fixOffsets; _i < fixOffsets_1.length; _i++){\n                var offset = fixOffsets_1[_i];\n                try {\n                    reader.offset = sigOffset + offset;\n                    sig = $43c94f66d9a06bba$var$readSignature(reader);\n                } catch (_a) {}\n                if ($43c94f66d9a06bba$var$isValidSignature(sig)) break;\n            }\n            if (!$43c94f66d9a06bba$var$isValidSignature(sig)) throw new Error(\"Invalid signature: '\".concat(sig, \"' at 0x\").concat(sigOffset.toString(16)));\n            var id = $43c94f66d9a06bba$var$readUint16(reader);\n            $43c94f66d9a06bba$var$readPascalString(reader, 2); // name\n            $43c94f66d9a06bba$var$readSection(reader, 2, function(left) {\n                var handler = $aqyg9.resourceHandlersMap[id];\n                var skip = id === 1036 && !!reader.skipThumbnail;\n                if (handler && !skip) try {\n                    handler.read(reader, imageResources, left);\n                } catch (e) {\n                    if (reader.throwForMissingFeatures) throw e;\n                    $43c94f66d9a06bba$var$skipBytes(reader, left());\n                }\n                else // options.logMissingFeatures && console.log(`Unhandled image resource: ${id} (${left()})`);\n                $43c94f66d9a06bba$var$skipBytes(reader, left());\n            });\n        };\n        while(left() > 0)_loop_1();\n    });\n    var layersGroup = imageResources.layersGroup, layerGroupsEnabledId = imageResources.layerGroupsEnabledId, rest = $43c94f66d9a06bba$var$__rest(imageResources, [\n        \"layersGroup\",\n        \"layerGroupsEnabledId\"\n    ]);\n    if (Object.keys(rest)) psd.imageResources = rest;\n    // layer and mask info\n    $43c94f66d9a06bba$var$readSection(reader, 1, function(left) {\n        $43c94f66d9a06bba$var$readSection(reader, 2, function(left) {\n            $43c94f66d9a06bba$var$readLayerInfo(reader, psd, imageResources);\n            $43c94f66d9a06bba$var$skipBytes(reader, left());\n        }, undefined, reader.large);\n        // SAI does not include this section\n        if (left() > 0) {\n            var globalLayerMaskInfo = $43c94f66d9a06bba$var$readGlobalLayerMaskInfo(reader);\n            if (globalLayerMaskInfo) psd.globalLayerMaskInfo = globalLayerMaskInfo;\n        } else // revert back to end of section if exceeded section limits\n        // opt.logMissingFeatures && console.log('reverting to end of section');\n        $43c94f66d9a06bba$var$skipBytes(reader, left());\n        while(left() > 0){\n            // sometimes there are empty bytes here\n            while(left() && $43c94f66d9a06bba$var$peekUint8(reader) === 0)// opt.logMissingFeatures && console.log('skipping 0 byte');\n            $43c94f66d9a06bba$var$skipBytes(reader, 1);\n            if (left() >= 12) $43c94f66d9a06bba$var$readAdditionalLayerInfo(reader, psd, psd, imageResources);\n            else // opt.logMissingFeatures && console.log('skipping leftover bytes', left());\n            $43c94f66d9a06bba$var$skipBytes(reader, left());\n        }\n    }, undefined, reader.large);\n    var hasChildren = psd.children && psd.children.length;\n    var skipComposite = reader.skipCompositeImageData && (reader.skipLayerImageData || hasChildren);\n    if (!skipComposite) $43c94f66d9a06bba$var$readImageData(reader, psd);\n    // TODO: show converted color mode instead of original PSD file color mode\n    //       but add option to preserve file color mode (need to return image data instead of canvas in that case)\n    // psd.colorMode = ColorMode.RGB; // we convert all color modes to RGB\n    return psd;\n}\nmodule.exports.readPsd = $43c94f66d9a06bba$var$readPsd;\nfunction $43c94f66d9a06bba$var$readLayerInfo(reader, psd, imageResources) {\n    var _a, _b;\n    var _c = imageResources.layersGroup, layersGroup = _c === void 0 ? [] : _c, _d = imageResources.layerGroupsEnabledId, layerGroupsEnabledId = _d === void 0 ? [] : _d;\n    var layerCount = $43c94f66d9a06bba$var$readInt16(reader);\n    if (layerCount < 0) {\n        reader.globalAlpha = true;\n        layerCount = -layerCount;\n    }\n    var layers = [];\n    var layerChannels = [];\n    for(var i = 0; i < layerCount; i++){\n        var _e = $43c94f66d9a06bba$var$readLayerRecord(reader, psd, imageResources), layer = _e.layer, channels = _e.channels;\n        if (layersGroup[i] !== undefined) layer.linkGroup = layersGroup[i];\n        if (layerGroupsEnabledId[i] !== undefined) layer.linkGroupEnabled = !!layerGroupsEnabledId[i];\n        layers.push(layer);\n        layerChannels.push(channels);\n    }\n    if (!reader.skipLayerImageData) for(var i = 0; i < layerCount; i++)$43c94f66d9a06bba$var$readLayerChannelImageData(reader, psd, layers[i], layerChannels[i]);\n    if (!psd.children) psd.children = [];\n    var stack = [\n        psd\n    ];\n    for(var i = layers.length - 1; i >= 0; i--){\n        var l = layers[i];\n        var type = l.sectionDivider ? l.sectionDivider.type : 0 /* SectionDividerType.Other */ ;\n        if (type === 1 /* SectionDividerType.OpenFolder */  || type === 2 /* SectionDividerType.ClosedFolder */ ) {\n            l.opened = type === 1 /* SectionDividerType.OpenFolder */ ;\n            l.children = [];\n            if ((_a = l.sectionDivider) === null || _a === void 0 ? void 0 : _a.key) l.blendMode = (_b = $jE67M.toBlendMode[l.sectionDivider.key]) !== null && _b !== void 0 ? _b : l.blendMode;\n            stack[stack.length - 1].children.unshift(l);\n            stack.push(l);\n        } else if (type === 3 /* SectionDividerType.BoundingSectionDivider */ ) stack.pop();\n        else stack[stack.length - 1].children.unshift(l);\n    }\n}\nmodule.exports.readLayerInfo = $43c94f66d9a06bba$var$readLayerInfo;\nfunction $43c94f66d9a06bba$var$readLayerRecord(reader, psd, imageResources) {\n    var layer = {};\n    layer.top = $43c94f66d9a06bba$var$readInt32(reader);\n    layer.left = $43c94f66d9a06bba$var$readInt32(reader);\n    layer.bottom = $43c94f66d9a06bba$var$readInt32(reader);\n    layer.right = $43c94f66d9a06bba$var$readInt32(reader);\n    var channelCount = $43c94f66d9a06bba$var$readUint16(reader);\n    var channels = [];\n    for(var i = 0; i < channelCount; i++){\n        var id = $43c94f66d9a06bba$var$readInt16(reader);\n        var length_1 = $43c94f66d9a06bba$var$readUint32(reader);\n        if (reader.large) {\n            if (length_1 !== 0) throw new Error('Sizes larger than 4GB are not supported');\n            length_1 = $43c94f66d9a06bba$var$readUint32(reader);\n        }\n        channels.push({\n            id: id,\n            length: length_1\n        });\n    }\n    $43c94f66d9a06bba$var$checkSignature(reader, '8BIM');\n    var blendMode = $43c94f66d9a06bba$var$readSignature(reader);\n    if (!$jE67M.toBlendMode[blendMode]) throw new Error(\"Invalid blend mode: '\".concat(blendMode, \"'\"));\n    layer.blendMode = $jE67M.toBlendMode[blendMode];\n    layer.opacity = $43c94f66d9a06bba$var$readUint8(reader) / 0xff;\n    layer.clipping = $43c94f66d9a06bba$var$readUint8(reader) === 1;\n    var flags = $43c94f66d9a06bba$var$readUint8(reader);\n    layer.transparencyProtected = (flags & 0x01) !== 0;\n    layer.hidden = (flags & 0x02) !== 0;\n    if (flags & 0x20) layer.effectsOpen = true;\n    // 0x04 - obsolete\n    // 0x08 - 1 for Photoshop 5.0 and later, tells if bit 4 has useful information\n    // 0x10 - pixel data irrelevant to appearance of document\n    // 0x20 - effects/filters panel is expanded\n    $43c94f66d9a06bba$var$skipBytes(reader, 1);\n    $43c94f66d9a06bba$var$readSection(reader, 1, function(left) {\n        $43c94f66d9a06bba$var$readLayerMaskData(reader, layer);\n        var blendingRanges = $43c94f66d9a06bba$var$readLayerBlendingRanges(reader);\n        if (blendingRanges) layer.blendingRanges = blendingRanges;\n        layer.name = $43c94f66d9a06bba$var$readPascalString(reader, 1); // should be padded to 4, but is not sometimes\n        // HACK: fix for sometimes layer.name string not being padded correctly, just skip until we get valid signature\n        while(left() > 4 && !$43c94f66d9a06bba$var$validSignatureAt(reader, reader.offset))reader.offset++;\n        while(left() >= 12)$43c94f66d9a06bba$var$readAdditionalLayerInfo(reader, layer, psd, imageResources);\n        $43c94f66d9a06bba$var$skipBytes(reader, left());\n    });\n    return {\n        layer: layer,\n        channels: channels\n    };\n}\nfunction $43c94f66d9a06bba$var$readLayerMaskData(reader, layer) {\n    return $43c94f66d9a06bba$var$readSection(reader, 1, function(left) {\n        if (!left()) return undefined;\n        var mask = {};\n        layer.mask = mask;\n        mask.top = $43c94f66d9a06bba$var$readInt32(reader);\n        mask.left = $43c94f66d9a06bba$var$readInt32(reader);\n        mask.bottom = $43c94f66d9a06bba$var$readInt32(reader);\n        mask.right = $43c94f66d9a06bba$var$readInt32(reader);\n        mask.defaultColor = $43c94f66d9a06bba$var$readUint8(reader);\n        var flags = $43c94f66d9a06bba$var$readUint8(reader);\n        mask.positionRelativeToLayer = (flags & 1 /* LayerMaskFlags.PositionRelativeToLayer */ ) !== 0;\n        mask.disabled = (flags & 2 /* LayerMaskFlags.LayerMaskDisabled */ ) !== 0;\n        mask.fromVectorData = (flags & 8 /* LayerMaskFlags.LayerMaskFromRenderingOtherData */ ) !== 0;\n        if (left() >= 18) {\n            var realMask = {};\n            layer.realMask = realMask;\n            var realFlags = $43c94f66d9a06bba$var$readUint8(reader);\n            realMask.positionRelativeToLayer = (realFlags & 1 /* LayerMaskFlags.PositionRelativeToLayer */ ) !== 0;\n            realMask.disabled = (realFlags & 2 /* LayerMaskFlags.LayerMaskDisabled */ ) !== 0;\n            realMask.fromVectorData = (realFlags & 8 /* LayerMaskFlags.LayerMaskFromRenderingOtherData */ ) !== 0;\n            realMask.defaultColor = $43c94f66d9a06bba$var$readUint8(reader); // Real user mask background. 0 or 255.\n            realMask.top = $43c94f66d9a06bba$var$readInt32(reader);\n            realMask.left = $43c94f66d9a06bba$var$readInt32(reader);\n            realMask.bottom = $43c94f66d9a06bba$var$readInt32(reader);\n            realMask.right = $43c94f66d9a06bba$var$readInt32(reader);\n        }\n        if (flags & 16 /* LayerMaskFlags.MaskHasParametersAppliedToIt */ ) {\n            var params = $43c94f66d9a06bba$var$readUint8(reader);\n            if (params & 1 /* MaskParams.UserMaskDensity */ ) mask.userMaskDensity = $43c94f66d9a06bba$var$readUint8(reader) / 0xff;\n            if (params & 2 /* MaskParams.UserMaskFeather */ ) mask.userMaskFeather = $43c94f66d9a06bba$var$readFloat64(reader);\n            if (params & 4 /* MaskParams.VectorMaskDensity */ ) mask.vectorMaskDensity = $43c94f66d9a06bba$var$readUint8(reader) / 0xff;\n            if (params & 8 /* MaskParams.VectorMaskFeather */ ) mask.vectorMaskFeather = $43c94f66d9a06bba$var$readFloat64(reader);\n        }\n        $43c94f66d9a06bba$var$skipBytes(reader, left());\n    });\n}\nfunction $43c94f66d9a06bba$var$readBlendingRange(reader) {\n    return [\n        $43c94f66d9a06bba$var$readUint8(reader),\n        $43c94f66d9a06bba$var$readUint8(reader),\n        $43c94f66d9a06bba$var$readUint8(reader),\n        $43c94f66d9a06bba$var$readUint8(reader)\n    ];\n}\nfunction $43c94f66d9a06bba$var$readLayerBlendingRanges(reader) {\n    return $43c94f66d9a06bba$var$readSection(reader, 1, function(left) {\n        var compositeGrayBlendSource = $43c94f66d9a06bba$var$readBlendingRange(reader);\n        var compositeGraphBlendDestinationRange = $43c94f66d9a06bba$var$readBlendingRange(reader);\n        var ranges = [];\n        while(left() > 0){\n            var sourceRange = $43c94f66d9a06bba$var$readBlendingRange(reader);\n            var destRange = $43c94f66d9a06bba$var$readBlendingRange(reader);\n            ranges.push({\n                sourceRange: sourceRange,\n                destRange: destRange\n            });\n        }\n        return {\n            compositeGrayBlendSource: compositeGrayBlendSource,\n            compositeGraphBlendDestinationRange: compositeGraphBlendDestinationRange,\n            ranges: ranges\n        };\n    });\n}\nfunction $43c94f66d9a06bba$var$readLayerChannelImageData(reader, psd, layer, channels) {\n    var _a, _b, _c, _d;\n    var layerWidth = (layer.right || 0) - (layer.left || 0);\n    var layerHeight = (layer.bottom || 0) - (layer.top || 0);\n    var cmyk = psd.colorMode === 4 /* ColorMode.CMYK */ ;\n    var imageData;\n    if (layerWidth && layerHeight) {\n        if (cmyk) {\n            if (psd.bitsPerChannel !== 8) throw new Error('bitsPerChannel Not supproted');\n            imageData = {\n                width: layerWidth,\n                height: layerHeight,\n                data: new Uint8ClampedArray(layerWidth * layerHeight * 5)\n            };\n            for(var p = 4; p < imageData.data.byteLength; p += 5)imageData.data[p] = 255;\n        } else {\n            imageData = $43c94f66d9a06bba$var$createImageDataBitDepth(layerWidth, layerHeight, (_a = psd.bitsPerChannel) !== null && _a !== void 0 ? _a : 8);\n            (0, $jE67M.resetImageData)(imageData);\n        }\n    }\n    if ($jE67M.RAW_IMAGE_DATA) {\n        layer.imageDataRaw = [];\n        layer.imageDataRawCompression = [];\n    }\n    for(var _i = 0, channels_1 = channels; _i < channels_1.length; _i++){\n        var channel = channels_1[_i];\n        if (channel.length === 0) continue;\n        if (channel.length < 2) throw new Error('Invalid channel length');\n        var start = reader.offset;\n        var compression = $43c94f66d9a06bba$var$readUint16(reader);\n        // try to fix broken files where there's 1 byte shift of channel\n        if (compression > 3) {\n            reader.offset -= 1;\n            compression = $43c94f66d9a06bba$var$readUint16(reader);\n        }\n        // try to fix broken files where there's 1 byte shift of channel\n        if (compression > 3) {\n            reader.offset -= 3;\n            compression = $43c94f66d9a06bba$var$readUint16(reader);\n        }\n        if (compression > 3) throw new Error(\"Invalid compression: \".concat(compression));\n        if (channel.id === -2 /* ChannelID.UserMask */  || channel.id === -3 /* ChannelID.RealUserMask */ ) {\n            var mask = channel.id === -2 /* ChannelID.UserMask */  ? layer.mask : layer.realMask;\n            if (!mask) throw new Error(\"Missing layer \".concat(channel.id === -2 /* ChannelID.UserMask */  ? 'mask' : 'real mask', \" data\"));\n            var maskWidth = (mask.right || 0) - (mask.left || 0);\n            var maskHeight = (mask.bottom || 0) - (mask.top || 0);\n            if (maskWidth < 0 || maskHeight < 0 || maskWidth > 30000 || maskHeight > 30000) throw new Error('Invalid mask size');\n            if (maskWidth && maskHeight) {\n                var maskData = $43c94f66d9a06bba$var$createImageDataBitDepth(maskWidth, maskHeight, (_b = psd.bitsPerChannel) !== null && _b !== void 0 ? _b : 8);\n                (0, $jE67M.resetImageData)(maskData);\n                var start_1 = reader.offset;\n                $43c94f66d9a06bba$var$readData(reader, channel.length, maskData, compression, maskWidth, maskHeight, (_c = psd.bitsPerChannel) !== null && _c !== void 0 ? _c : 8, 0, reader.large, 4);\n                if ($jE67M.RAW_IMAGE_DATA) {\n                    if (channel.id === -2 /* ChannelID.UserMask */ ) {\n                        layer.maskDataRawCompression = compression;\n                        layer.maskDataRaw = new Uint8Array(reader.view.buffer, reader.view.byteOffset + start_1, reader.offset - start_1);\n                    } else {\n                        layer.realMaskDataRawCompression = compression;\n                        layer.realMaskDataRaw = new Uint8Array(reader.view.buffer, reader.view.byteOffset + start_1, reader.offset - start_1);\n                    }\n                }\n                $43c94f66d9a06bba$var$setupGrayscale(maskData);\n                if (reader.useImageData) mask.imageData = maskData;\n                else mask.canvas = (0, $jE67M.imageDataToCanvas)(maskData);\n            }\n        } else {\n            var offset = (0, $jE67M.offsetForChannel)(channel.id, cmyk);\n            var targetData = imageData;\n            if (offset < 0) {\n                targetData = undefined;\n                if (reader.throwForMissingFeatures) throw new Error(\"Channel not supported: \".concat(channel.id));\n            }\n            $43c94f66d9a06bba$var$readData(reader, channel.length, targetData, compression, layerWidth, layerHeight, (_d = psd.bitsPerChannel) !== null && _d !== void 0 ? _d : 8, offset, reader.large, cmyk ? 5 : 4);\n            if ($jE67M.RAW_IMAGE_DATA) {\n                layer.imageDataRawCompression[channel.id] = compression;\n                layer.imageDataRaw[channel.id] = new Uint8Array(reader.view.buffer, reader.view.byteOffset + start + 2, channel.length - 2);\n            }\n            reader.offset = start + channel.length;\n            if (targetData && psd.colorMode === 1 /* ColorMode.Grayscale */ ) $43c94f66d9a06bba$var$setupGrayscale(targetData);\n        }\n    }\n    if (imageData) {\n        if (cmyk) {\n            var cmykData = imageData;\n            imageData = (0, $jE67M.createImageData)(cmykData.width, cmykData.height);\n            $43c94f66d9a06bba$var$cmykToRgb(cmykData, imageData, false);\n        }\n        if (reader.useImageData) layer.imageData = imageData;\n        else layer.canvas = (0, $jE67M.imageDataToCanvas)(imageData);\n    }\n}\nfunction $43c94f66d9a06bba$var$readData(reader, length, data, compression, width, height, bitDepth, offset, large, step) {\n    if (compression === 0 /* Compression.RawData */ ) $43c94f66d9a06bba$var$readDataRaw(reader, data, width, height, bitDepth, step, offset);\n    else if (compression === 1 /* Compression.RleCompressed */ ) $43c94f66d9a06bba$var$readDataRLE(reader, data, width, height, bitDepth, step, [\n        offset\n    ], large);\n    else if (compression === 2 /* Compression.ZipWithoutPrediction */ ) $43c94f66d9a06bba$var$readDataZip(reader, length, data, width, height, bitDepth, step, offset, false);\n    else if (compression === 3 /* Compression.ZipWithPrediction */ ) $43c94f66d9a06bba$var$readDataZip(reader, length, data, width, height, bitDepth, step, offset, true);\n    else throw new Error(\"Invalid Compression type: \".concat(compression));\n}\nmodule.exports.readData = $43c94f66d9a06bba$var$readData;\nfunction $43c94f66d9a06bba$var$readGlobalLayerMaskInfo(reader) {\n    return $43c94f66d9a06bba$var$readSection(reader, 1, function(left) {\n        if (!left()) return undefined;\n        var overlayColorSpace = $43c94f66d9a06bba$var$readUint16(reader);\n        var colorSpace1 = $43c94f66d9a06bba$var$readUint16(reader);\n        var colorSpace2 = $43c94f66d9a06bba$var$readUint16(reader);\n        var colorSpace3 = $43c94f66d9a06bba$var$readUint16(reader);\n        var colorSpace4 = $43c94f66d9a06bba$var$readUint16(reader);\n        var opacity = $43c94f66d9a06bba$var$readUint16(reader) / 0xff;\n        var kind = $43c94f66d9a06bba$var$readUint8(reader);\n        $43c94f66d9a06bba$var$skipBytes(reader, left()); // 3 bytes of padding ?\n        return {\n            overlayColorSpace: overlayColorSpace,\n            colorSpace1: colorSpace1,\n            colorSpace2: colorSpace2,\n            colorSpace3: colorSpace3,\n            colorSpace4: colorSpace4,\n            opacity: opacity,\n            kind: kind\n        };\n    });\n}\nmodule.exports.readGlobalLayerMaskInfo = $43c94f66d9a06bba$var$readGlobalLayerMaskInfo;\nfunction $43c94f66d9a06bba$var$readAdditionalLayerInfo(reader, target, psd, imageResources) {\n    var sig = $43c94f66d9a06bba$var$readSignature(reader);\n    if (sig !== '8BIM' && sig !== '8B64') throw new Error(\"Invalid signature: '\".concat(sig, \"' at 0x\").concat((reader.offset - 4).toString(16)));\n    var key = $43c94f66d9a06bba$var$readSignature(reader);\n    // `largeAdditionalInfoKeys` fallback, because some keys don't have 8B64 signature even when they are 64bit\n    var u64 = sig === '8B64' || reader.large && $jE67M.largeAdditionalInfoKeys.indexOf(key) !== -1;\n    $43c94f66d9a06bba$var$readSection(reader, 2, function(left) {\n        var handler = $cAUqy.infoHandlersMap[key];\n        if (handler) try {\n            handler.read(reader, target, left, psd, imageResources);\n        } catch (e) {\n            if (reader.throwForMissingFeatures) throw e;\n        }\n        else {\n            reader.logMissingFeatures && reader.log(\"Unhandled additional info: \".concat(key));\n            $43c94f66d9a06bba$var$skipBytes(reader, left());\n        }\n        if (left()) {\n            reader.logMissingFeatures && reader.log(\"Unread \".concat(left(), \" bytes left for additional info: \").concat(key));\n            $43c94f66d9a06bba$var$skipBytes(reader, left());\n        }\n    }, false, u64);\n}\nmodule.exports.readAdditionalLayerInfo = $43c94f66d9a06bba$var$readAdditionalLayerInfo;\nfunction $43c94f66d9a06bba$var$createImageDataBitDepth(width, height, bitDepth, channels) {\n    if (channels === void 0) channels = 4;\n    if (bitDepth === 1 || bitDepth === 8) {\n        if (channels === 4) return (0, $jE67M.createImageData)(width, height);\n        else return {\n            width: width,\n            height: height,\n            data: new Uint8ClampedArray(width * height * channels)\n        };\n    } else if (bitDepth === 16) return {\n        width: width,\n        height: height,\n        data: new Uint16Array(width * height * channels)\n    };\n    else if (bitDepth === 32) return {\n        width: width,\n        height: height,\n        data: new Float32Array(width * height * channels)\n    };\n    else throw new Error(\"Invalid bitDepth (\".concat(bitDepth, \")\"));\n}\nmodule.exports.createImageDataBitDepth = $43c94f66d9a06bba$var$createImageDataBitDepth;\nfunction $43c94f66d9a06bba$var$readImageData(reader, psd) {\n    var _a;\n    var compression = $43c94f66d9a06bba$var$readUint16(reader);\n    var bitsPerChannel = (_a = psd.bitsPerChannel) !== null && _a !== void 0 ? _a : 8;\n    if (module.exports.supportedColorModes.indexOf(psd.colorMode) === -1) throw new Error(\"Color mode not supported: \".concat(psd.colorMode));\n    if (compression !== 0 /* Compression.RawData */  && compression !== 1 /* Compression.RleCompressed */ ) throw new Error(\"Compression type not supported: \".concat(compression));\n    var imageData = $43c94f66d9a06bba$var$createImageDataBitDepth(psd.width, psd.height, bitsPerChannel);\n    (0, $jE67M.resetImageData)(imageData);\n    switch(psd.colorMode){\n        case 0 /* ColorMode.Bitmap */ :\n            if (bitsPerChannel !== 1) throw new Error('Invalid bitsPerChannel for bitmap color mode');\n            var bytes = void 0;\n            if (compression === 0 /* Compression.RawData */ ) bytes = $43c94f66d9a06bba$var$readBytes(reader, Math.ceil(psd.width / 8) * psd.height);\n            else if (compression === 1 /* Compression.RleCompressed */ ) {\n                bytes = new Uint8Array(psd.width * psd.height);\n                $43c94f66d9a06bba$var$readDataRLE(reader, {\n                    data: bytes,\n                    width: psd.width,\n                    height: psd.height\n                }, psd.width, psd.height, 8, 1, [\n                    0\n                ], reader.large);\n            } else throw new Error(\"Bitmap compression not supported: \".concat(compression));\n            (0, $jE67M.decodeBitmap)(bytes, imageData.data, psd.width, psd.height);\n            break;\n        case 3 /* ColorMode.RGB */ :\n        case 1 /* ColorMode.Grayscale */ :\n            var channels = psd.colorMode === 1 /* ColorMode.Grayscale */  ? [\n                0\n            ] : [\n                0,\n                1,\n                2\n            ];\n            if (psd.channels && psd.channels > 3) for(var i = 3; i < psd.channels; i++)// TODO: store these channels in additional image data\n            channels.push(i);\n            else if (reader.globalAlpha) channels.push(3);\n            if (compression === 0 /* Compression.RawData */ ) for(var i = 0; i < channels.length; i++)$43c94f66d9a06bba$var$readDataRaw(reader, imageData, psd.width, psd.height, bitsPerChannel, 4, channels[i]);\n            else if (compression === 1 /* Compression.RleCompressed */ ) {\n                var start = reader.offset;\n                $43c94f66d9a06bba$var$readDataRLE(reader, imageData, psd.width, psd.height, bitsPerChannel, 4, channels, reader.large);\n                if ($jE67M.RAW_IMAGE_DATA) psd.imageDataRaw = new Uint8Array(reader.view.buffer, reader.view.byteOffset + start, reader.offset - start);\n            }\n            if (psd.colorMode === 1 /* ColorMode.Grayscale */ ) $43c94f66d9a06bba$var$setupGrayscale(imageData);\n            break;\n        case 2 /* ColorMode.Indexed */ :\n            if (bitsPerChannel !== 8) throw new Error('bitsPerChannel Not supproted');\n            if (psd.channels !== 1) throw new Error('Invalid channel count');\n            if (!psd.palette) throw new Error('Missing color palette');\n            if (compression === 0 /* Compression.RawData */ ) throw new Error(\"Not implemented\");\n            else if (compression === 1 /* Compression.RleCompressed */ ) {\n                var indexedImageData = {\n                    width: imageData.width,\n                    height: imageData.height,\n                    data: new Uint8Array(imageData.width * imageData.height)\n                };\n                $43c94f66d9a06bba$var$readDataRLE(reader, indexedImageData, psd.width, psd.height, bitsPerChannel, 1, [\n                    0\n                ], reader.large);\n                $43c94f66d9a06bba$var$indexedToRgb(indexedImageData, imageData, psd.palette);\n            } else throw new Error(\"Not implemented\");\n            break;\n        case 4 /* ColorMode.CMYK */ :\n            if (bitsPerChannel !== 8) throw new Error('bitsPerChannel Not supproted');\n            if (psd.channels !== 4) throw new Error(\"Invalid channel count\");\n            var channels = [\n                0,\n                1,\n                2,\n                3\n            ];\n            if (reader.globalAlpha) channels.push(4);\n            if (compression === 0 /* Compression.RawData */ ) throw new Error(\"Not implemented\");\n            else if (compression === 1 /* Compression.RleCompressed */ ) {\n                var cmykImageData = {\n                    width: imageData.width,\n                    height: imageData.height,\n                    data: new Uint8Array(imageData.width * imageData.height * 5)\n                };\n                var start = reader.offset;\n                $43c94f66d9a06bba$var$readDataRLE(reader, cmykImageData, psd.width, psd.height, bitsPerChannel, 5, channels, reader.large);\n                $43c94f66d9a06bba$var$cmykToRgb(cmykImageData, imageData, true);\n                if ($jE67M.RAW_IMAGE_DATA) psd.imageDataRaw = new Uint8Array(reader.view.buffer, reader.view.byteOffset + start, reader.offset - start);\n            } else throw new Error(\"Not implemented\");\n            break;\n        default:\n            throw new Error(\"Color mode not supported: \".concat(psd.colorMode));\n    }\n    // remove weird white matte\n    if (reader.globalAlpha) {\n        if (psd.bitsPerChannel !== 8) throw new Error('bitsPerChannel Not supproted');\n        var p = imageData.data;\n        var size = imageData.width * imageData.height * 4;\n        for(var i = 0; i < size; i += 4){\n            var pa = p[i + 3];\n            if (pa != 0 && pa != 255) {\n                var a = pa / 255;\n                var ra = 1 / a;\n                var invA = 255 * (1 - ra);\n                p[i + 0] = p[i + 0] * ra + invA;\n                p[i + 1] = p[i + 1] * ra + invA;\n                p[i + 2] = p[i + 2] * ra + invA;\n            }\n        }\n    }\n    if (reader.useImageData) psd.imageData = imageData;\n    else psd.canvas = (0, $jE67M.imageDataToCanvas)(imageData);\n}\nfunction $43c94f66d9a06bba$var$cmykToRgb(cmyk, rgb, reverseAlpha) {\n    var size = rgb.width * rgb.height * 4;\n    var srcData = cmyk.data;\n    var dstData = rgb.data;\n    for(var src = 0, dst = 0; dst < size; src += 5, dst += 4){\n        var c = srcData[src];\n        var m = srcData[src + 1];\n        var y = srcData[src + 2];\n        var k = srcData[src + 3];\n        dstData[dst] = (c * k | 0) / 255 | 0;\n        dstData[dst + 1] = (m * k | 0) / 255 | 0;\n        dstData[dst + 2] = (y * k | 0) / 255 | 0;\n        dstData[dst + 3] = reverseAlpha ? 255 - srcData[src + 4] : srcData[src + 4];\n    }\n// for (let src = 0, dst = 0; dst < size; src += 5, dst += 4) {\n// \tconst c = 1 - (srcData[src + 0] / 255);\n// \tconst m = 1 - (srcData[src + 1] / 255);\n// \tconst y = 1 - (srcData[src + 2] / 255);\n// \t// const k = srcData[src + 3] / 255;\n// \tdstData[dst + 0] = ((1 - c * 0.8) * 255) | 0;\n// \tdstData[dst + 1] = ((1 - m * 0.8) * 255) | 0;\n// \tdstData[dst + 2] = ((1 - y * 0.8) * 255) | 0;\n// \tdstData[dst + 3] = reverseAlpha ? 255 - srcData[src + 4] : srcData[src + 4];\n// }\n}\nfunction $43c94f66d9a06bba$var$indexedToRgb(indexed, rgb, palette) {\n    var size = indexed.width * indexed.height;\n    var srcData = indexed.data;\n    var dstData = rgb.data;\n    for(var src = 0, dst = 0; src < size; src++, dst += 4){\n        var c = palette[srcData[src]];\n        dstData[dst + 0] = c.r;\n        dstData[dst + 1] = c.g;\n        dstData[dst + 2] = c.b;\n        dstData[dst + 3] = 255;\n    }\n}\nfunction $43c94f66d9a06bba$var$verifyCompatible(a, b) {\n    if (a.byteLength / a.length !== b.byteLength / b.length) throw new Error('Invalid array types');\n}\nfunction $43c94f66d9a06bba$var$bytesToArray(bytes, bitDepth) {\n    if (bitDepth === 8) return bytes;\n    else if (bitDepth === 16) {\n        if (bytes.byteOffset % 2) {\n            var result = new Uint16Array(bytes.byteLength / 2);\n            new Uint8Array(result.buffer, result.byteOffset, result.byteLength).set(bytes);\n            return result;\n        } else return new Uint16Array(bytes.buffer, bytes.byteOffset, bytes.byteLength / 2);\n    } else if (bitDepth === 32) {\n        if (bytes.byteOffset % 4) {\n            var result = new Float32Array(bytes.byteLength / 4);\n            new Uint8Array(result.buffer, result.byteOffset, result.byteLength).set(bytes);\n            return result;\n        } else return new Float32Array(bytes.buffer, bytes.byteOffset, bytes.byteLength / 4);\n    } else throw new Error(\"Invalid bitDepth (\".concat(bitDepth, \")\"));\n}\nfunction $43c94f66d9a06bba$var$copyChannelToPixelData(pixelData, channel, offset, step) {\n    $43c94f66d9a06bba$var$verifyCompatible(pixelData.data, channel);\n    var size = pixelData.width * pixelData.height;\n    var data = pixelData.data;\n    for(var i = 0, p = offset | 0; i < size; i++, p = p + step | 0)data[p] = channel[i];\n}\nfunction $43c94f66d9a06bba$var$readDataRaw(reader, pixelData, width, height, bitDepth, step, offset) {\n    var buffer = $43c94f66d9a06bba$var$readBytes(reader, width * height * Math.floor(bitDepth / 8));\n    if (bitDepth == 32) for(var i = 0; i < buffer.byteLength; i += 4){\n        var a = buffer[i + 0];\n        var b = buffer[i + 1];\n        var c = buffer[i + 2];\n        var d = buffer[i + 3];\n        buffer[i + 0] = d;\n        buffer[i + 1] = c;\n        buffer[i + 2] = b;\n        buffer[i + 3] = a;\n    }\n    var array = $43c94f66d9a06bba$var$bytesToArray(buffer, bitDepth);\n    if (pixelData && offset < step) $43c94f66d9a06bba$var$copyChannelToPixelData(pixelData, array, offset, step);\n}\nfunction $43c94f66d9a06bba$var$decodePredicted(data, width, height, mod) {\n    for(var y = 0; y < height; y++){\n        var offset = y * width;\n        for(var x = 1, o = offset + 1; x < width; x++, o++)data[o] = (data[o - 1] + data[o]) % mod;\n    }\n}\nfunction $43c94f66d9a06bba$var$readDataZip(reader, length, pixelData, width, height, bitDepth, step, offset, prediction) {\n    var compressed = $43c94f66d9a06bba$var$readBytes(reader, length);\n    var decompressed = (0, $1eu3Z.inflate)(compressed);\n    if (pixelData && offset < step) {\n        var array = $43c94f66d9a06bba$var$bytesToArray(decompressed, bitDepth);\n        if (bitDepth === 8) {\n            if (prediction) $43c94f66d9a06bba$var$decodePredicted(decompressed, width, height, 0x100);\n            $43c94f66d9a06bba$var$copyChannelToPixelData(pixelData, decompressed, offset, step);\n        } else if (bitDepth === 16) {\n            if (prediction) $43c94f66d9a06bba$var$decodePredicted(array, width, height, 0x10000);\n            $43c94f66d9a06bba$var$copyChannelToPixelData(pixelData, array, offset, step);\n        } else if (bitDepth === 32) {\n            if (prediction) $43c94f66d9a06bba$var$decodePredicted(decompressed, width * 4, height, 0x100);\n            var di = offset;\n            var dst = new Uint32Array(pixelData.data.buffer, pixelData.data.byteOffset, pixelData.data.length);\n            for(var y = 0; y < height; y++){\n                var a = width * 4 * y;\n                for(var x = 0; x < width; x++, a++, di += step){\n                    var b = a + width;\n                    var c = b + width;\n                    var d = c + width;\n                    dst[di] = (decompressed[a] << 24 | decompressed[b] << 16 | decompressed[c] << 8 | decompressed[d]) >>> 0;\n                }\n            }\n        } else throw new Error('Invalid bitDepth');\n    }\n}\nmodule.exports.readDataZip = $43c94f66d9a06bba$var$readDataZip;\nfunction $43c94f66d9a06bba$var$readDataRLE(reader, pixelData, width, height, bitDepth, step, offsets, large) {\n    var data = pixelData && pixelData.data;\n    var lengths;\n    if (large) {\n        lengths = new Uint32Array(offsets.length * height);\n        for(var o = 0, li = 0; o < offsets.length; o++)for(var y = 0; y < height; y++, li++)lengths[li] = $43c94f66d9a06bba$var$readUint32(reader);\n    } else {\n        lengths = new Uint16Array(offsets.length * height);\n        for(var o = 0, li = 0; o < offsets.length; o++)for(var y = 0; y < height; y++, li++)lengths[li] = $43c94f66d9a06bba$var$readUint16(reader);\n    }\n    if (bitDepth !== 1 && bitDepth !== 8) throw new Error(\"Invalid bit depth (\".concat(bitDepth, \")\"));\n    var extraLimit = step - 1 | 0; // 3 for rgb, 4 for cmyk\n    for(var c = 0, li = 0; c < offsets.length; c++){\n        var offset = offsets[c] | 0;\n        var extra = c > extraLimit || offset > extraLimit;\n        if (!data || extra) for(var y = 0; y < height; y++, li++)$43c94f66d9a06bba$var$skipBytes(reader, lengths[li]);\n        else for(var y = 0, p = offset | 0; y < height; y++, li++){\n            var length_2 = lengths[li];\n            var buffer = $43c94f66d9a06bba$var$readBytes(reader, length_2);\n            for(var i = 0, x = 0; i < length_2; i++){\n                var header = buffer[i];\n                if (header > 128) {\n                    var value = buffer[++i];\n                    header = 256 - header | 0;\n                    for(var j = 0; j <= header && x < width; j = j + 1 | 0, x = x + 1 | 0){\n                        data[p] = value;\n                        p = p + step | 0;\n                    }\n                } else if (header < 128) for(var j = 0; j <= header && x < width; j = j + 1 | 0, x = x + 1 | 0){\n                    data[p] = buffer[++i];\n                    p = p + step | 0;\n                }\n            // This showed up on some images from non-photoshop programs, ignoring it seems to work just fine.\n            // if (i >= length) throw new Error(`Invalid RLE data: exceeded buffer size ${i}/${length}`);\n            }\n        }\n    }\n}\nmodule.exports.readDataRLE = $43c94f66d9a06bba$var$readDataRLE;\nfunction $43c94f66d9a06bba$var$readSection(reader, round, func, skipEmpty, eightBytes) {\n    if (skipEmpty === void 0) skipEmpty = true;\n    if (eightBytes === void 0) eightBytes = false;\n    var length = $43c94f66d9a06bba$var$readUint32(reader);\n    if (eightBytes) {\n        if (length !== 0) throw new Error('Sizes larger than 4GB are not supported');\n        length = $43c94f66d9a06bba$var$readUint32(reader);\n    }\n    if (length <= 0 && skipEmpty) return undefined;\n    var end = reader.offset + length;\n    if (end > reader.view.byteLength) throw new Error('Section exceeds file size');\n    var result = func(function() {\n        return end - reader.offset;\n    });\n    if (reader.offset !== end) {\n        if (reader.offset > end) $43c94f66d9a06bba$var$warnOrThrow(reader, 'Exceeded section limits');\n        else $43c94f66d9a06bba$var$warnOrThrow(reader, \"Unread section data\"); // : ${end - reader.offset} bytes at 0x${reader.offset.toString(16)}`);\n    }\n    while(end % round)end++;\n    reader.offset = end;\n    return result;\n}\nmodule.exports.readSection = $43c94f66d9a06bba$var$readSection;\nfunction $43c94f66d9a06bba$var$readColor(reader) {\n    var colorSpace = $43c94f66d9a06bba$var$readUint16(reader);\n    switch(colorSpace){\n        case 0 /* ColorSpace.RGB */ :\n            var r = $43c94f66d9a06bba$var$readUint16(reader) / 257;\n            var g = $43c94f66d9a06bba$var$readUint16(reader) / 257;\n            var b = $43c94f66d9a06bba$var$readUint16(reader) / 257;\n            $43c94f66d9a06bba$var$skipBytes(reader, 2);\n            return {\n                r: r,\n                g: g,\n                b: b\n            };\n        case 1 /* ColorSpace.HSB */ :\n            var h = $43c94f66d9a06bba$var$readUint16(reader) / 0xffff;\n            var s = $43c94f66d9a06bba$var$readUint16(reader) / 0xffff;\n            var b = $43c94f66d9a06bba$var$readUint16(reader) / 0xffff;\n            $43c94f66d9a06bba$var$skipBytes(reader, 2);\n            return {\n                h: h,\n                s: s,\n                b: b\n            };\n        case 2 /* ColorSpace.CMYK */ :\n            var c = $43c94f66d9a06bba$var$readUint16(reader) / 257;\n            var m = $43c94f66d9a06bba$var$readUint16(reader) / 257;\n            var y = $43c94f66d9a06bba$var$readUint16(reader) / 257;\n            var k = $43c94f66d9a06bba$var$readUint16(reader) / 257;\n            return {\n                c: c,\n                m: m,\n                y: y,\n                k: k\n            };\n        case 7 /* ColorSpace.Lab */ :\n            var l = $43c94f66d9a06bba$var$readInt16(reader) / 10000;\n            var ta = $43c94f66d9a06bba$var$readInt16(reader);\n            var tb = $43c94f66d9a06bba$var$readInt16(reader);\n            var a = ta < 0 ? ta / 12800 : ta / 12700;\n            var b = tb < 0 ? tb / 12800 : tb / 12700;\n            $43c94f66d9a06bba$var$skipBytes(reader, 2);\n            return {\n                l: l,\n                a: a,\n                b: b\n            };\n        case 8 /* ColorSpace.Grayscale */ :\n            var k = $43c94f66d9a06bba$var$readUint16(reader) * 255 / 10000;\n            $43c94f66d9a06bba$var$skipBytes(reader, 6);\n            return {\n                k: k\n            };\n        default:\n            throw new Error('Invalid color space');\n    }\n}\nmodule.exports.readColor = $43c94f66d9a06bba$var$readColor;\nfunction $43c94f66d9a06bba$var$readPattern(reader) {\n    $43c94f66d9a06bba$var$readUint32(reader); // length\n    var version = $43c94f66d9a06bba$var$readUint32(reader);\n    if (version !== 1) throw new Error(\"Invalid pattern version: \".concat(version));\n    var colorMode = $43c94f66d9a06bba$var$readUint32(reader);\n    var x = $43c94f66d9a06bba$var$readInt16(reader);\n    var y = $43c94f66d9a06bba$var$readInt16(reader);\n    // we only support RGB and grayscale for now\n    if (colorMode !== 3 /* ColorMode.RGB */  && colorMode !== 1 /* ColorMode.Grayscale */  && colorMode !== 2 /* ColorMode.Indexed */ ) throw new Error(\"Unsupported pattern color mode: \".concat(colorMode));\n    var name = $43c94f66d9a06bba$var$readUnicodeString(reader);\n    var id = $43c94f66d9a06bba$var$readPascalString(reader, 1);\n    var palette = [];\n    if (colorMode === 2 /* ColorMode.Indexed */ ) {\n        for(var i = 0; i < 256; i++)palette.push({\n            r: $43c94f66d9a06bba$var$readUint8(reader),\n            g: $43c94f66d9a06bba$var$readUint8(reader),\n            b: $43c94f66d9a06bba$var$readUint8(reader)\n        });\n        $43c94f66d9a06bba$var$skipBytes(reader, 4); // no idea what this is\n    }\n    // virtual memory array list\n    var version2 = $43c94f66d9a06bba$var$readUint32(reader);\n    if (version2 !== 3) throw new Error(\"Invalid pattern VMAL version: \".concat(version2));\n    $43c94f66d9a06bba$var$readUint32(reader); // length\n    var top = $43c94f66d9a06bba$var$readUint32(reader);\n    var left = $43c94f66d9a06bba$var$readUint32(reader);\n    var bottom = $43c94f66d9a06bba$var$readUint32(reader);\n    var right = $43c94f66d9a06bba$var$readUint32(reader);\n    var channelsCount = $43c94f66d9a06bba$var$readUint32(reader);\n    var width = right - left;\n    var height = bottom - top;\n    var data = new Uint8Array(width * height * 4);\n    for(var i = 3; i < data.byteLength; i += 4)data[i] = 255;\n    for(var i = 0, ch = 0; i < channelsCount + 2; i++){\n        var has = $43c94f66d9a06bba$var$readUint32(reader);\n        if (!has) continue;\n        var length_3 = $43c94f66d9a06bba$var$readUint32(reader);\n        var pixelDepth = $43c94f66d9a06bba$var$readUint32(reader);\n        var ctop = $43c94f66d9a06bba$var$readUint32(reader);\n        var cleft = $43c94f66d9a06bba$var$readUint32(reader);\n        var cbottom = $43c94f66d9a06bba$var$readUint32(reader);\n        var cright = $43c94f66d9a06bba$var$readUint32(reader);\n        var pixelDepth2 = $43c94f66d9a06bba$var$readUint16(reader);\n        var compressionMode = $43c94f66d9a06bba$var$readUint8(reader); // 0 - raw, 1 - zip\n        var dataLength = length_3 - 23;\n        var cdata = $43c94f66d9a06bba$var$readBytes(reader, dataLength);\n        if (pixelDepth !== 8 || pixelDepth2 !== 8) throw new Error('16bit pixel depth not supported for patterns');\n        var w = cright - cleft;\n        var h = cbottom - ctop;\n        var ox = cleft - left;\n        var oy = ctop - top;\n        if (compressionMode === 0) {\n            if (colorMode === 3 /* ColorMode.RGB */  && ch < 3) {\n                for(var y_1 = 0; y_1 < h; y_1++)for(var x_1 = 0; x_1 < w; x_1++){\n                    var src = x_1 + y_1 * w;\n                    var dst = (ox + x_1 + (y_1 + oy) * width) * 4;\n                    data[dst + ch] = cdata[src];\n                }\n            }\n            if (colorMode === 1 /* ColorMode.Grayscale */  && ch < 1) {\n                for(var y_2 = 0; y_2 < h; y_2++)for(var x_2 = 0; x_2 < w; x_2++){\n                    var src = x_2 + y_2 * w;\n                    var dst = (ox + x_2 + (y_2 + oy) * width) * 4;\n                    var value = cdata[src];\n                    data[dst + 0] = value;\n                    data[dst + 1] = value;\n                    data[dst + 2] = value;\n                }\n            }\n            if (colorMode === 2 /* ColorMode.Indexed */ ) // TODO:\n            throw new Error('Indexed pattern color mode not implemented');\n        } else if (compressionMode === 1) {\n            // console.log({ colorMode });\n            // require('fs').writeFileSync('zip.bin', Buffer.from(cdata));\n            // const data = require('zlib').inflateRawSync(cdata);\n            // const data = require('zlib').unzipSync(cdata);\n            // console.log(data);\n            // throw new Error('Zip compression not supported for pattern');\n            // throw new Error('Unsupported pattern compression');\n            reader.log('Unsupported pattern compression');\n            name += ' (failed to decode)';\n        } else throw new Error('Invalid pattern compression mode');\n        ch++;\n    }\n    // TODO: use canvas instead of data ?\n    return {\n        id: id,\n        name: name,\n        x: x,\n        y: y,\n        bounds: {\n            x: left,\n            y: top,\n            w: width,\n            h: height\n        },\n        data: data\n    };\n}\nmodule.exports.readPattern = $43c94f66d9a06bba$var$readPattern;\n\n});\nparcelRegister(\"aqyg9\", function(module, exports) {\n\"use strict\";\nvar $7976e85542dc0fe3$var$__assign = module.exports && module.exports.__assign || function() {\n    $7976e85542dc0fe3$var$__assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return $7976e85542dc0fe3$var$__assign.apply(this, arguments);\n};\nObject.defineProperty(module.exports, \"__esModule\", {\n    value: true\n});\nmodule.exports.resourceHandlersMap = module.exports.resourceHandlers = void 0;\n\nvar $jWkTT = parcelRequire(\"jWkTT\");\n\nvar $5OPaf = parcelRequire(\"5OPaf\");\n\nvar $kCSTH = parcelRequire(\"kCSTH\");\n\nvar $jE67M = parcelRequire(\"jE67M\");\n\nvar $5wpNI = parcelRequire(\"5wpNI\");\n\nvar $klnll = parcelRequire(\"klnll\");\nmodule.exports.resourceHandlers = [];\nmodule.exports.resourceHandlersMap = {};\nfunction $7976e85542dc0fe3$var$addHandler(key, has, read, write) {\n    var handler = {\n        key: key,\n        has: has,\n        read: read,\n        write: write\n    };\n    module.exports.resourceHandlers.push(handler);\n    module.exports.resourceHandlersMap[handler.key] = handler;\n}\nvar $7976e85542dc0fe3$var$LOG_MOCK_HANDLERS = false;\nvar $7976e85542dc0fe3$var$RESOLUTION_UNITS = [\n    undefined,\n    'PPI',\n    'PPCM'\n];\nvar $7976e85542dc0fe3$var$MEASUREMENT_UNITS = [\n    undefined,\n    'Inches',\n    'Centimeters',\n    'Points',\n    'Picas',\n    'Columns'\n];\nvar $7976e85542dc0fe3$var$hex = '0123456789abcdef';\nfunction $7976e85542dc0fe3$var$charToNibble(code) {\n    return code <= 57 ? code - 48 : code - 87;\n}\nfunction $7976e85542dc0fe3$var$byteAt(value, index) {\n    return $7976e85542dc0fe3$var$charToNibble(value.charCodeAt(index)) << 4 | $7976e85542dc0fe3$var$charToNibble(value.charCodeAt(index + 1));\n}\nfunction $7976e85542dc0fe3$var$readUtf8String(reader, length) {\n    var buffer = (0, $5OPaf.readBytes)(reader, length);\n    return (0, $5wpNI.decodeString)(buffer);\n}\nfunction $7976e85542dc0fe3$var$writeUtf8String(writer, value) {\n    var buffer = (0, $5wpNI.encodeString)(value);\n    (0, $kCSTH.writeBytes)(writer, buffer);\n}\nfunction $7976e85542dc0fe3$var$readEncodedString(reader) {\n    var length = (0, $5OPaf.readUint8)(reader);\n    var buffer = (0, $5OPaf.readBytes)(reader, length);\n    var notAscii = false;\n    for(var i = 0; i < buffer.byteLength; i++)if (buffer[i] & 0x80) {\n        notAscii = true;\n        break;\n    }\n    if (notAscii) {\n        var decoder = new TextDecoder('gbk');\n        return decoder.decode(buffer);\n    } else return (0, $5wpNI.decodeString)(buffer);\n}\nfunction $7976e85542dc0fe3$var$writeEncodedString(writer, value) {\n    var ascii = '';\n    for(var i = 0, code = value.codePointAt(i++); code !== undefined; code = value.codePointAt(i++))ascii += code > 0x7f ? '?' : String.fromCodePoint(code);\n    var buffer = (0, $5wpNI.encodeString)(ascii);\n    (0, $kCSTH.writeUint8)(writer, buffer.byteLength);\n    (0, $kCSTH.writeBytes)(writer, buffer);\n}\n$jE67M.MOCK_HANDLERS && $7976e85542dc0fe3$var$addHandler(1028, function(target) {\n    return target._ir1028 !== undefined;\n}, function(reader, target, left) {\n    $7976e85542dc0fe3$var$LOG_MOCK_HANDLERS && console.log('image resource 1028', left());\n    target._ir1028 = (0, $5OPaf.readBytes)(reader, left());\n}, function(writer, target) {\n    (0, $kCSTH.writeBytes)(writer, target._ir1028);\n});\n$7976e85542dc0fe3$var$addHandler(1061, function(target) {\n    return target.captionDigest !== undefined;\n}, function(reader, target) {\n    var captionDigest = '';\n    for(var i = 0; i < 16; i++){\n        var byte = (0, $5OPaf.readUint8)(reader);\n        captionDigest += $7976e85542dc0fe3$var$hex[byte >> 4];\n        captionDigest += $7976e85542dc0fe3$var$hex[byte & 0xf];\n    }\n    target.captionDigest = captionDigest;\n}, function(writer, target) {\n    for(var i = 0; i < 16; i++)(0, $kCSTH.writeUint8)(writer, $7976e85542dc0fe3$var$byteAt(target.captionDigest, i * 2));\n});\n$7976e85542dc0fe3$var$addHandler(1060, function(target) {\n    return target.xmpMetadata !== undefined;\n}, function(reader, target, left) {\n    target.xmpMetadata = $7976e85542dc0fe3$var$readUtf8String(reader, left());\n}, function(writer, target) {\n    $7976e85542dc0fe3$var$writeUtf8String(writer, target.xmpMetadata);\n});\nvar $7976e85542dc0fe3$var$Inte = (0, $jE67M.createEnum)('Inte', 'perceptual', {\n    'perceptual': 'Img ',\n    'saturation': 'Grp ',\n    'relative colorimetric': 'Clrm',\n    'absolute colorimetric': 'AClr'\n});\n$7976e85542dc0fe3$var$addHandler(1082, function(target) {\n    return target.printInformation !== undefined;\n}, function(reader, target) {\n    var _a, _b;\n    var desc = (0, $klnll.readVersionAndDescriptor)(reader);\n    target.printInformation = {\n        printerName: desc.printerName || '',\n        renderingIntent: $7976e85542dc0fe3$var$Inte.decode((_a = desc.Inte) !== null && _a !== void 0 ? _a : 'Inte.Img ')\n    };\n    var info = target.printInformation;\n    if (desc.PstS !== undefined) info.printerManagesColors = desc.PstS;\n    if (desc['Nm  '] !== undefined) info.printerProfile = desc['Nm  '];\n    if (desc.MpBl !== undefined) info.blackPointCompensation = desc.MpBl;\n    if (desc.printSixteenBit !== undefined) info.printSixteenBit = desc.printSixteenBit;\n    if (desc.hardProof !== undefined) info.hardProof = desc.hardProof;\n    if (desc.printProofSetup) {\n        if ('Bltn' in desc.printProofSetup) info.proofSetup = {\n            builtin: desc.printProofSetup.Bltn.split('.')[1]\n        };\n        else info.proofSetup = {\n            profile: desc.printProofSetup.profile,\n            renderingIntent: $7976e85542dc0fe3$var$Inte.decode((_b = desc.printProofSetup.Inte) !== null && _b !== void 0 ? _b : 'Inte.Img '),\n            blackPointCompensation: !!desc.printProofSetup.MpBl,\n            paperWhite: !!desc.printProofSetup.paperWhite\n        };\n    }\n}, function(writer, target) {\n    var _a, _b;\n    var info = target.printInformation;\n    var desc = {};\n    if (info.printerManagesColors) desc.PstS = true;\n    else {\n        if (info.hardProof !== undefined) desc.hardProof = !!info.hardProof;\n        desc.ClrS = 'ClrS.RGBC'; // TODO: ???\n        desc['Nm  '] = (_a = info.printerProfile) !== null && _a !== void 0 ? _a : 'CIE RGB';\n    }\n    desc.Inte = $7976e85542dc0fe3$var$Inte.encode(info.renderingIntent);\n    if (!info.printerManagesColors) desc.MpBl = !!info.blackPointCompensation;\n    desc.printSixteenBit = !!info.printSixteenBit;\n    desc.printerName = info.printerName || '';\n    if (info.proofSetup && 'profile' in info.proofSetup) desc.printProofSetup = {\n        profile: info.proofSetup.profile || '',\n        Inte: $7976e85542dc0fe3$var$Inte.encode(info.proofSetup.renderingIntent),\n        MpBl: !!info.proofSetup.blackPointCompensation,\n        paperWhite: !!info.proofSetup.paperWhite\n    };\n    else desc.printProofSetup = {\n        Bltn: ((_b = info.proofSetup) === null || _b === void 0 ? void 0 : _b.builtin) ? \"builtinProof.\".concat(info.proofSetup.builtin) : 'builtinProof.proofCMYK'\n    };\n    (0, $klnll.writeVersionAndDescriptor)(writer, '', 'printOutput', desc);\n});\n$jE67M.MOCK_HANDLERS && $7976e85542dc0fe3$var$addHandler(1083, function(target) {\n    return target._ir1083 !== undefined;\n}, function(reader, target, left) {\n    $7976e85542dc0fe3$var$LOG_MOCK_HANDLERS && console.log('image resource 1083', left());\n    target._ir1083 = (0, $5OPaf.readBytes)(reader, left());\n// TODO:\n// const desc = readVersionAndDescriptor(reader);\n// console.log('1083', require('util').inspect(desc, false, 99, true));\n}, function(writer, target) {\n    (0, $kCSTH.writeBytes)(writer, target._ir1083);\n});\n$7976e85542dc0fe3$var$addHandler(1005, function(target) {\n    return target.resolutionInfo !== undefined;\n}, function(reader, target) {\n    var horizontalResolution = (0, $5OPaf.readFixedPoint32)(reader);\n    var horizontalResolutionUnit = (0, $5OPaf.readUint16)(reader);\n    var widthUnit = (0, $5OPaf.readUint16)(reader);\n    var verticalResolution = (0, $5OPaf.readFixedPoint32)(reader);\n    var verticalResolutionUnit = (0, $5OPaf.readUint16)(reader);\n    var heightUnit = (0, $5OPaf.readUint16)(reader);\n    target.resolutionInfo = {\n        horizontalResolution: horizontalResolution,\n        horizontalResolutionUnit: $7976e85542dc0fe3$var$RESOLUTION_UNITS[horizontalResolutionUnit] || 'PPI',\n        widthUnit: $7976e85542dc0fe3$var$MEASUREMENT_UNITS[widthUnit] || 'Inches',\n        verticalResolution: verticalResolution,\n        verticalResolutionUnit: $7976e85542dc0fe3$var$RESOLUTION_UNITS[verticalResolutionUnit] || 'PPI',\n        heightUnit: $7976e85542dc0fe3$var$MEASUREMENT_UNITS[heightUnit] || 'Inches'\n    };\n}, function(writer, target) {\n    var info = target.resolutionInfo;\n    (0, $kCSTH.writeFixedPoint32)(writer, info.horizontalResolution || 0);\n    (0, $kCSTH.writeUint16)(writer, Math.max(1, $7976e85542dc0fe3$var$RESOLUTION_UNITS.indexOf(info.horizontalResolutionUnit)));\n    (0, $kCSTH.writeUint16)(writer, Math.max(1, $7976e85542dc0fe3$var$MEASUREMENT_UNITS.indexOf(info.widthUnit)));\n    (0, $kCSTH.writeFixedPoint32)(writer, info.verticalResolution || 0);\n    (0, $kCSTH.writeUint16)(writer, Math.max(1, $7976e85542dc0fe3$var$RESOLUTION_UNITS.indexOf(info.verticalResolutionUnit)));\n    (0, $kCSTH.writeUint16)(writer, Math.max(1, $7976e85542dc0fe3$var$MEASUREMENT_UNITS.indexOf(info.heightUnit)));\n});\nvar $7976e85542dc0fe3$var$printScaleStyles = [\n    'centered',\n    'size to fit',\n    'user defined'\n];\n$7976e85542dc0fe3$var$addHandler(1062, function(target) {\n    return target.printScale !== undefined;\n}, function(reader, target) {\n    target.printScale = {\n        style: $7976e85542dc0fe3$var$printScaleStyles[(0, $5OPaf.readInt16)(reader)],\n        x: (0, $5OPaf.readFloat32)(reader),\n        y: (0, $5OPaf.readFloat32)(reader),\n        scale: (0, $5OPaf.readFloat32)(reader)\n    };\n}, function(writer, target) {\n    var _a = target.printScale, style = _a.style, x = _a.x, y = _a.y, scale = _a.scale;\n    (0, $kCSTH.writeInt16)(writer, Math.max(0, $7976e85542dc0fe3$var$printScaleStyles.indexOf(style)));\n    (0, $kCSTH.writeFloat32)(writer, x || 0);\n    (0, $kCSTH.writeFloat32)(writer, y || 0);\n    (0, $kCSTH.writeFloat32)(writer, scale || 0);\n});\n$7976e85542dc0fe3$var$addHandler(1006, function(target) {\n    return target.alphaChannelNames !== undefined;\n}, function(reader, target, left) {\n    if (!target.alphaChannelNames) {\n        target.alphaChannelNames = [];\n        while(left() > 0){\n            var value = $7976e85542dc0fe3$var$readEncodedString(reader);\n            // const value = readPascalString(reader, 1);\n            target.alphaChannelNames.push(value);\n        }\n    } else (0, $5OPaf.skipBytes)(reader, left());\n}, function(writer, target) {\n    for(var _i = 0, _a = target.alphaChannelNames; _i < _a.length; _i++){\n        var name_1 = _a[_i];\n        $7976e85542dc0fe3$var$writeEncodedString(writer, name_1);\n    // writePascalString(writer, name, 1);\n    }\n});\n$7976e85542dc0fe3$var$addHandler(1045, function(target) {\n    return target.alphaChannelNames !== undefined;\n}, function(reader, target, left) {\n    target.alphaChannelNames = [];\n    while(left() > 0)target.alphaChannelNames.push((0, $5OPaf.readUnicodeString)(reader));\n}, function(writer, target) {\n    for(var _i = 0, _a = target.alphaChannelNames; _i < _a.length; _i++){\n        var name_2 = _a[_i];\n        (0, $kCSTH.writeUnicodeStringWithPadding)(writer, name_2);\n    }\n});\n$jE67M.MOCK_HANDLERS && $7976e85542dc0fe3$var$addHandler(1077, function(target) {\n    return target._ir1077 !== undefined;\n}, function(reader, target, left) {\n    $7976e85542dc0fe3$var$LOG_MOCK_HANDLERS && console.log('image resource 1077', left());\n    target._ir1077 = (0, $5OPaf.readBytes)(reader, left());\n}, function(writer, target) {\n    (0, $kCSTH.writeBytes)(writer, target._ir1077);\n});\n$7976e85542dc0fe3$var$addHandler(1053, function(target) {\n    return target.alphaIdentifiers !== undefined;\n}, function(reader, target, left) {\n    target.alphaIdentifiers = [];\n    while(left() >= 4)target.alphaIdentifiers.push((0, $5OPaf.readUint32)(reader));\n}, function(writer, target) {\n    for(var _i = 0, _a = target.alphaIdentifiers; _i < _a.length; _i++){\n        var id = _a[_i];\n        (0, $kCSTH.writeUint32)(writer, id);\n    }\n});\n$7976e85542dc0fe3$var$addHandler(1010, function(target) {\n    return target.backgroundColor !== undefined;\n}, function(reader, target) {\n    return target.backgroundColor = (0, $5OPaf.readColor)(reader);\n}, function(writer, target) {\n    return (0, $kCSTH.writeColor)(writer, target.backgroundColor);\n});\n$7976e85542dc0fe3$var$addHandler(1037, function(target) {\n    return target.globalAngle !== undefined;\n}, function(reader, target) {\n    return target.globalAngle = (0, $5OPaf.readInt32)(reader);\n}, function(writer, target) {\n    return (0, $kCSTH.writeInt32)(writer, target.globalAngle);\n});\n$7976e85542dc0fe3$var$addHandler(1049, function(target) {\n    return target.globalAltitude !== undefined;\n}, function(reader, target) {\n    return target.globalAltitude = (0, $5OPaf.readUint32)(reader);\n}, function(writer, target) {\n    return (0, $kCSTH.writeUint32)(writer, target.globalAltitude);\n});\n$7976e85542dc0fe3$var$addHandler(1011, function(target) {\n    return target.printFlags !== undefined;\n}, function(reader, target) {\n    target.printFlags = {\n        labels: !!(0, $5OPaf.readUint8)(reader),\n        cropMarks: !!(0, $5OPaf.readUint8)(reader),\n        colorBars: !!(0, $5OPaf.readUint8)(reader),\n        registrationMarks: !!(0, $5OPaf.readUint8)(reader),\n        negative: !!(0, $5OPaf.readUint8)(reader),\n        flip: !!(0, $5OPaf.readUint8)(reader),\n        interpolate: !!(0, $5OPaf.readUint8)(reader),\n        caption: !!(0, $5OPaf.readUint8)(reader),\n        printFlags: !!(0, $5OPaf.readUint8)(reader)\n    };\n}, function(writer, target) {\n    var flags = target.printFlags;\n    (0, $kCSTH.writeUint8)(writer, flags.labels ? 1 : 0);\n    (0, $kCSTH.writeUint8)(writer, flags.cropMarks ? 1 : 0);\n    (0, $kCSTH.writeUint8)(writer, flags.colorBars ? 1 : 0);\n    (0, $kCSTH.writeUint8)(writer, flags.registrationMarks ? 1 : 0);\n    (0, $kCSTH.writeUint8)(writer, flags.negative ? 1 : 0);\n    (0, $kCSTH.writeUint8)(writer, flags.flip ? 1 : 0);\n    (0, $kCSTH.writeUint8)(writer, flags.interpolate ? 1 : 0);\n    (0, $kCSTH.writeUint8)(writer, flags.caption ? 1 : 0);\n    (0, $kCSTH.writeUint8)(writer, flags.printFlags ? 1 : 0);\n});\n$jE67M.MOCK_HANDLERS && $7976e85542dc0fe3$var$addHandler(10000, function(target) {\n    return target._ir10000 !== undefined;\n}, function(reader, target, left) {\n    $7976e85542dc0fe3$var$LOG_MOCK_HANDLERS && console.log('image resource 10000', left());\n    target._ir10000 = (0, $5OPaf.readBytes)(reader, left());\n}, function(writer, target) {\n    (0, $kCSTH.writeBytes)(writer, target._ir10000);\n});\n$jE67M.MOCK_HANDLERS && $7976e85542dc0fe3$var$addHandler(1013, function(target) {\n    return target._ir1013 !== undefined;\n}, function(reader, target, left) {\n    $7976e85542dc0fe3$var$LOG_MOCK_HANDLERS && console.log('image resource 1013', left());\n    target._ir1013 = (0, $5OPaf.readBytes)(reader, left());\n}, function(writer, target) {\n    (0, $kCSTH.writeBytes)(writer, target._ir1013);\n});\n$jE67M.MOCK_HANDLERS && $7976e85542dc0fe3$var$addHandler(1016, function(target) {\n    return target._ir1016 !== undefined;\n}, function(reader, target, left) {\n    $7976e85542dc0fe3$var$LOG_MOCK_HANDLERS && console.log('image resource 1016', left());\n    target._ir1016 = (0, $5OPaf.readBytes)(reader, left());\n}, function(writer, target) {\n    (0, $kCSTH.writeBytes)(writer, target._ir1016);\n});\n$7976e85542dc0fe3$var$addHandler(1080, function(target) {\n    return target.countInformation !== undefined;\n}, function(reader, target) {\n    var desc = (0, $klnll.readVersionAndDescriptor)(reader);\n    target.countInformation = desc.countGroupList.map(function(g) {\n        return {\n            color: {\n                r: g['Rd  '],\n                g: g['Grn '],\n                b: g['Bl  ']\n            },\n            name: g['Nm  '],\n            size: g['Rds '],\n            fontSize: g.fontSize,\n            visible: g.Vsbl,\n            points: g.countObjectList.map(function(p) {\n                return {\n                    x: p['X   '],\n                    y: p['Y   ']\n                };\n            })\n        };\n    });\n}, function(writer, target) {\n    var desc = {\n        Vrsn: 1,\n        countGroupList: target.countInformation.map(function(g) {\n            return {\n                'Rd  ': g.color.r,\n                'Grn ': g.color.g,\n                'Bl  ': g.color.b,\n                'Nm  ': g.name,\n                'Rds ': g.size,\n                fontSize: g.fontSize,\n                Vsbl: g.visible,\n                countObjectList: g.points.map(function(p) {\n                    return {\n                        'X   ': p.x,\n                        'Y   ': p.y\n                    };\n                })\n            };\n        })\n    };\n    (0, $klnll.writeVersionAndDescriptor)(writer, '', 'Cnt ', desc);\n});\n$7976e85542dc0fe3$var$addHandler(1024, function(target) {\n    return target.layerState !== undefined;\n}, function(reader, target) {\n    return target.layerState = (0, $5OPaf.readUint16)(reader);\n}, function(writer, target) {\n    return (0, $kCSTH.writeUint16)(writer, target.layerState);\n});\n$7976e85542dc0fe3$var$addHandler(1026, function(target) {\n    return target.layersGroup !== undefined;\n}, function(reader, target, left) {\n    target.layersGroup = [];\n    while(left() > 0)target.layersGroup.push((0, $5OPaf.readUint16)(reader));\n}, function(writer, target) {\n    for(var _i = 0, _a = target.layersGroup; _i < _a.length; _i++){\n        var g = _a[_i];\n        (0, $kCSTH.writeUint16)(writer, g);\n    }\n});\n$7976e85542dc0fe3$var$addHandler(1072, function(target) {\n    return target.layerGroupsEnabledId !== undefined;\n}, function(reader, target, left) {\n    target.layerGroupsEnabledId = [];\n    while(left() > 0)target.layerGroupsEnabledId.push((0, $5OPaf.readUint8)(reader));\n}, function(writer, target) {\n    for(var _i = 0, _a = target.layerGroupsEnabledId; _i < _a.length; _i++){\n        var id = _a[_i];\n        (0, $kCSTH.writeUint8)(writer, id);\n    }\n});\n$7976e85542dc0fe3$var$addHandler(1069, function(target) {\n    return target.layerSelectionIds !== undefined;\n}, function(reader, target) {\n    var count = (0, $5OPaf.readUint16)(reader);\n    target.layerSelectionIds = [];\n    while(count--)target.layerSelectionIds.push((0, $5OPaf.readUint32)(reader));\n}, function(writer, target) {\n    (0, $kCSTH.writeUint16)(writer, target.layerSelectionIds.length);\n    for(var _i = 0, _a = target.layerSelectionIds; _i < _a.length; _i++){\n        var id = _a[_i];\n        (0, $kCSTH.writeUint32)(writer, id);\n    }\n});\n$7976e85542dc0fe3$var$addHandler(1032, function(target) {\n    return target.gridAndGuidesInformation !== undefined;\n}, function(reader, target) {\n    var version = (0, $5OPaf.readUint32)(reader);\n    var horizontal = (0, $5OPaf.readUint32)(reader);\n    var vertical = (0, $5OPaf.readUint32)(reader);\n    var count = (0, $5OPaf.readUint32)(reader);\n    if (version !== 1) throw new Error(\"Invalid 1032 resource version: \".concat(version));\n    target.gridAndGuidesInformation = {\n        grid: {\n            horizontal: horizontal,\n            vertical: vertical\n        },\n        guides: []\n    };\n    for(var i = 0; i < count; i++)target.gridAndGuidesInformation.guides.push({\n        location: (0, $5OPaf.readUint32)(reader) / 32,\n        direction: (0, $5OPaf.readUint8)(reader) ? 'horizontal' : 'vertical'\n    });\n}, function(writer, target) {\n    var info = target.gridAndGuidesInformation;\n    var grid = info.grid || {\n        horizontal: 576,\n        vertical: 576\n    };\n    var guides = info.guides || [];\n    (0, $kCSTH.writeUint32)(writer, 1);\n    (0, $kCSTH.writeUint32)(writer, grid.horizontal);\n    (0, $kCSTH.writeUint32)(writer, grid.vertical);\n    (0, $kCSTH.writeUint32)(writer, guides.length);\n    for(var _i = 0, guides_1 = guides; _i < guides_1.length; _i++){\n        var g = guides_1[_i];\n        (0, $kCSTH.writeUint32)(writer, g.location * 32);\n        (0, $kCSTH.writeUint8)(writer, g.direction === 'horizontal' ? 1 : 0);\n    }\n});\n$7976e85542dc0fe3$var$addHandler(1065, function(target) {\n    return target.layerComps !== undefined;\n}, function(reader, target) {\n    var desc = (0, $klnll.readVersionAndDescriptor)(reader, true);\n    // console.log('CompList', require('util').inspect(desc, false, 99, true));\n    target.layerComps = {\n        list: []\n    };\n    for(var _i = 0, _a = desc.list; _i < _a.length; _i++){\n        var item = _a[_i];\n        target.layerComps.list.push({\n            id: item.compID,\n            name: item['Nm  '],\n            capturedInfo: item.capturedInfo\n        });\n        if ('comment' in item) target.layerComps.list[target.layerComps.list.length - 1].comment = item.comment;\n    }\n    if ('lastAppliedComp' in desc) target.layerComps.lastApplied = desc.lastAppliedComp;\n}, function(writer, target) {\n    var layerComps = target.layerComps;\n    var desc = {\n        list: []\n    };\n    for(var _i = 0, _a = layerComps.list; _i < _a.length; _i++){\n        var item = _a[_i];\n        var t = {};\n        t._classID = 'Comp';\n        t['Nm  '] = item.name;\n        if ('comment' in item) t.comment = item.comment;\n        t.compID = item.id;\n        t.capturedInfo = item.capturedInfo;\n        desc.list.push(t);\n    }\n    if ('lastApplied' in layerComps) desc.lastAppliedComp = layerComps.lastApplied;\n    // console.log('CompList', require('util').inspect(desc, false, 99, true));\n    (0, $klnll.writeVersionAndDescriptor)(writer, '', 'CompList', desc);\n});\n$jE67M.MOCK_HANDLERS && $7976e85542dc0fe3$var$addHandler(1092, function(target) {\n    return target._ir1092 !== undefined;\n}, function(reader, target, left) {\n    $7976e85542dc0fe3$var$LOG_MOCK_HANDLERS && console.log('image resource 1092', left());\n    // 16 bytes, seems to be 4 integers\n    target._ir1092 = (0, $5OPaf.readBytes)(reader, left());\n}, function(writer, target) {\n    (0, $kCSTH.writeBytes)(writer, target._ir1092);\n});\n// 0 - normal, 7 - multiply, 8 - screen, 23 - difference\nvar $7976e85542dc0fe3$var$onionSkinsBlendModes = [\n    'normal',\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    'multiply',\n    'screen',\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    'difference'\n];\n$7976e85542dc0fe3$var$addHandler(1078, function(target) {\n    return target.onionSkins !== undefined;\n}, function(reader, target) {\n    var desc = (0, $klnll.readVersionAndDescriptor)(reader);\n    // console.log('1078', require('util').inspect(desc, false, 99, true));\n    target.onionSkins = {\n        enabled: desc.enab,\n        framesBefore: desc.numBefore,\n        framesAfter: desc.numAfter,\n        frameSpacing: desc.Spcn,\n        minOpacity: desc.minOpacity / 100,\n        maxOpacity: desc.maxOpacity / 100,\n        blendMode: $7976e85542dc0fe3$var$onionSkinsBlendModes[desc.BlnM] || 'normal'\n    };\n}, function(writer, target) {\n    var onionSkins = target.onionSkins;\n    var desc = {\n        Vrsn: 1,\n        enab: onionSkins.enabled,\n        numBefore: onionSkins.framesBefore,\n        numAfter: onionSkins.framesAfter,\n        Spcn: onionSkins.frameSpacing,\n        minOpacity: onionSkins.minOpacity * 100 | 0,\n        maxOpacity: onionSkins.maxOpacity * 100 | 0,\n        BlnM: Math.max(0, $7976e85542dc0fe3$var$onionSkinsBlendModes.indexOf(onionSkins.blendMode))\n    };\n    (0, $klnll.writeVersionAndDescriptor)(writer, '', 'null', desc);\n});\n$7976e85542dc0fe3$var$addHandler(1075, function(target) {\n    return target.timelineInformation !== undefined;\n}, function(reader, target) {\n    var _a, _b;\n    var desc = (0, $klnll.readVersionAndDescriptor)(reader);\n    target.timelineInformation = {\n        enabled: desc.enab,\n        frameStep: (0, $klnll.frac)(desc.frameStep),\n        frameRate: desc.frameRate,\n        time: (0, $klnll.frac)(desc.time),\n        duration: (0, $klnll.frac)(desc.duration),\n        workInTime: (0, $klnll.frac)(desc.workInTime),\n        workOutTime: (0, $klnll.frac)(desc.workOutTime),\n        repeats: desc.LCnt,\n        hasMotion: desc.hasMotion,\n        globalTracks: (0, $klnll.parseTrackList)(desc.globalTrackList, !!reader.logMissingFeatures)\n    };\n    if ((_b = (_a = desc.audioClipGroupList) === null || _a === void 0 ? void 0 : _a.audioClipGroupList) === null || _b === void 0 ? void 0 : _b.length) target.timelineInformation.audioClipGroups = desc.audioClipGroupList.audioClipGroupList.map(function(g) {\n        return {\n            id: g.groupID,\n            muted: g.muted,\n            audioClips: g.audioClipList.map(function(_a) {\n                var clipID = _a.clipID, timeScope = _a.timeScope, muted = _a.muted, audioLevel = _a.audioLevel, frameReader = _a.frameReader;\n                return {\n                    id: clipID,\n                    start: (0, $klnll.frac)(timeScope.Strt),\n                    duration: (0, $klnll.frac)(timeScope.duration),\n                    inTime: (0, $klnll.frac)(timeScope.inTime),\n                    outTime: (0, $klnll.frac)(timeScope.outTime),\n                    muted: muted,\n                    audioLevel: audioLevel,\n                    frameReader: {\n                        type: frameReader.frameReaderType,\n                        mediaDescriptor: frameReader.mediaDescriptor,\n                        link: {\n                            name: frameReader['Lnk ']['Nm  '],\n                            fullPath: frameReader['Lnk '].fullPath,\n                            relativePath: frameReader['Lnk '].relPath\n                        }\n                    }\n                };\n            })\n        };\n    });\n}, function(writer, target) {\n    var _a;\n    var timeline = target.timelineInformation;\n    var desc = {\n        Vrsn: 1,\n        enab: timeline.enabled,\n        frameStep: timeline.frameStep,\n        frameRate: timeline.frameRate,\n        time: timeline.time,\n        duration: timeline.duration,\n        workInTime: timeline.workInTime,\n        workOutTime: timeline.workOutTime,\n        LCnt: timeline.repeats,\n        globalTrackList: (0, $klnll.serializeTrackList)(timeline.globalTracks),\n        audioClipGroupList: {\n            audioClipGroupList: (_a = timeline.audioClipGroups) === null || _a === void 0 ? void 0 : _a.map(function(a) {\n                return {\n                    groupID: a.id,\n                    muted: a.muted,\n                    audioClipList: a.audioClips.map(function(c) {\n                        return {\n                            clipID: c.id,\n                            timeScope: {\n                                Vrsn: 1,\n                                Strt: c.start,\n                                duration: c.duration,\n                                inTime: c.inTime,\n                                outTime: c.outTime\n                            },\n                            frameReader: {\n                                frameReaderType: c.frameReader.type,\n                                descVersion: 1,\n                                'Lnk ': {\n                                    descVersion: 1,\n                                    'Nm  ': c.frameReader.link.name,\n                                    fullPath: c.frameReader.link.fullPath,\n                                    relPath: c.frameReader.link.relativePath\n                                },\n                                mediaDescriptor: c.frameReader.mediaDescriptor\n                            },\n                            muted: c.muted,\n                            audioLevel: c.audioLevel\n                        };\n                    })\n                };\n            })\n        },\n        hasMotion: timeline.hasMotion\n    };\n    (0, $klnll.writeVersionAndDescriptor)(writer, '', 'null', desc, 'anim');\n});\n$7976e85542dc0fe3$var$addHandler(1076, function(target) {\n    return target.sheetDisclosure !== undefined;\n}, function(reader, target) {\n    var desc = (0, $klnll.readVersionAndDescriptor)(reader);\n    target.sheetDisclosure = {};\n    if (desc.sheetTimelineOptions) target.sheetDisclosure.sheetTimelineOptions = desc.sheetTimelineOptions.map(function(o) {\n        return {\n            sheetID: o.sheetID,\n            sheetDisclosed: o.sheetDisclosed,\n            lightsDisclosed: o.lightsDisclosed,\n            meshesDisclosed: o.meshesDisclosed,\n            materialsDisclosed: o.materialsDisclosed\n        };\n    });\n}, function(writer, target) {\n    var disclosure = target.sheetDisclosure;\n    var desc = {\n        Vrsn: 1\n    };\n    if (disclosure.sheetTimelineOptions) desc.sheetTimelineOptions = disclosure.sheetTimelineOptions.map(function(d) {\n        return {\n            Vrsn: 2,\n            sheetID: d.sheetID,\n            sheetDisclosed: d.sheetDisclosed,\n            lightsDisclosed: d.lightsDisclosed,\n            meshesDisclosed: d.meshesDisclosed,\n            materialsDisclosed: d.materialsDisclosed\n        };\n    });\n    (0, $klnll.writeVersionAndDescriptor)(writer, '', 'null', desc);\n});\n$7976e85542dc0fe3$var$addHandler(1054, function(target) {\n    return target.urlsList !== undefined;\n}, function(reader, target) {\n    var count = (0, $5OPaf.readUint32)(reader);\n    target.urlsList = [];\n    for(var i = 0; i < count; i++){\n        var long = (0, $5OPaf.readSignature)(reader);\n        if (long !== 'slic' && reader.throwForMissingFeatures) throw new Error('Unknown long');\n        var id = (0, $5OPaf.readUint32)(reader);\n        var url = (0, $5OPaf.readUnicodeString)(reader);\n        target.urlsList.push({\n            id: id,\n            url: url,\n            ref: 'slice'\n        });\n    }\n}, function(writer, target) {\n    var list = target.urlsList;\n    (0, $kCSTH.writeUint32)(writer, list.length);\n    for(var i = 0; i < list.length; i++){\n        (0, $kCSTH.writeSignature)(writer, 'slic');\n        (0, $kCSTH.writeUint32)(writer, list[i].id);\n        (0, $kCSTH.writeUnicodeString)(writer, list[i].url);\n    }\n});\nfunction $7976e85542dc0fe3$var$boundsToBounds(bounds) {\n    return {\n        'Top ': bounds.top,\n        Left: bounds.left,\n        Btom: bounds.bottom,\n        Rght: bounds.right\n    };\n}\nfunction $7976e85542dc0fe3$var$boundsFromBounds(bounds) {\n    return {\n        top: bounds['Top '],\n        left: bounds.Left,\n        bottom: bounds.Btom,\n        right: bounds.Rght\n    };\n}\nfunction $7976e85542dc0fe3$var$clamped(array, index) {\n    return array[Math.max(0, Math.min(array.length - 1, index))];\n}\nvar $7976e85542dc0fe3$var$sliceOrigins = [\n    'autoGenerated',\n    'layer',\n    'userGenerated'\n];\nvar $7976e85542dc0fe3$var$sliceTypes = [\n    'noImage',\n    'image'\n];\nvar $7976e85542dc0fe3$var$sliceAlignments = [\n    'default'\n];\n$7976e85542dc0fe3$var$addHandler(1050, function(target) {\n    return target.slices ? target.slices.length : 0;\n}, function(reader, target) {\n    var version = (0, $5OPaf.readUint32)(reader);\n    if (version === 6) {\n        if (!target.slices) target.slices = [];\n        var top_1 = (0, $5OPaf.readInt32)(reader);\n        var left = (0, $5OPaf.readInt32)(reader);\n        var bottom = (0, $5OPaf.readInt32)(reader);\n        var right = (0, $5OPaf.readInt32)(reader);\n        var groupName = (0, $5OPaf.readUnicodeString)(reader);\n        var count = (0, $5OPaf.readUint32)(reader);\n        target.slices.push({\n            bounds: {\n                top: top_1,\n                left: left,\n                bottom: bottom,\n                right: right\n            },\n            groupName: groupName,\n            slices: []\n        });\n        var slices_1 = target.slices[target.slices.length - 1].slices;\n        for(var i = 0; i < count; i++){\n            var id = (0, $5OPaf.readUint32)(reader);\n            var groupId = (0, $5OPaf.readUint32)(reader);\n            var origin_1 = $7976e85542dc0fe3$var$clamped($7976e85542dc0fe3$var$sliceOrigins, (0, $5OPaf.readUint32)(reader));\n            var associatedLayerId = origin_1 == 'layer' ? (0, $5OPaf.readUint32)(reader) : 0;\n            var name_3 = (0, $5OPaf.readUnicodeString)(reader);\n            var type = $7976e85542dc0fe3$var$clamped($7976e85542dc0fe3$var$sliceTypes, (0, $5OPaf.readUint32)(reader));\n            var left_1 = (0, $5OPaf.readInt32)(reader);\n            var top_2 = (0, $5OPaf.readInt32)(reader);\n            var right_1 = (0, $5OPaf.readInt32)(reader);\n            var bottom_1 = (0, $5OPaf.readInt32)(reader);\n            var url = (0, $5OPaf.readUnicodeString)(reader);\n            var target_1 = (0, $5OPaf.readUnicodeString)(reader);\n            var message = (0, $5OPaf.readUnicodeString)(reader);\n            var altTag = (0, $5OPaf.readUnicodeString)(reader);\n            var cellTextIsHTML = !!(0, $5OPaf.readUint8)(reader);\n            var cellText = (0, $5OPaf.readUnicodeString)(reader);\n            var horizontalAlignment = $7976e85542dc0fe3$var$clamped($7976e85542dc0fe3$var$sliceAlignments, (0, $5OPaf.readUint32)(reader));\n            var verticalAlignment = $7976e85542dc0fe3$var$clamped($7976e85542dc0fe3$var$sliceAlignments, (0, $5OPaf.readUint32)(reader));\n            var a = (0, $5OPaf.readUint8)(reader);\n            var r = (0, $5OPaf.readUint8)(reader);\n            var g = (0, $5OPaf.readUint8)(reader);\n            var b = (0, $5OPaf.readUint8)(reader);\n            var backgroundColorType = a + r + g + b === 0 ? 'none' : a === 0 ? 'matte' : 'color';\n            slices_1.push({\n                id: id,\n                groupId: groupId,\n                origin: origin_1,\n                associatedLayerId: associatedLayerId,\n                name: name_3,\n                target: target_1,\n                message: message,\n                altTag: altTag,\n                cellTextIsHTML: cellTextIsHTML,\n                cellText: cellText,\n                horizontalAlignment: horizontalAlignment,\n                verticalAlignment: verticalAlignment,\n                type: type,\n                url: url,\n                bounds: {\n                    top: top_2,\n                    left: left_1,\n                    bottom: bottom_1,\n                    right: right_1\n                },\n                backgroundColorType: backgroundColorType,\n                backgroundColor: {\n                    r: r,\n                    g: g,\n                    b: b,\n                    a: a\n                }\n            });\n        }\n        var desc = (0, $klnll.readVersionAndDescriptor)(reader);\n        desc.slices.forEach(function(d) {\n            var slice = slices_1.find(function(s) {\n                return d.sliceID == s.id;\n            });\n            if (slice) {\n                slice.topOutset = d.topOutset;\n                slice.leftOutset = d.leftOutset;\n                slice.bottomOutset = d.bottomOutset;\n                slice.rightOutset = d.rightOutset;\n            }\n        });\n    } else if (version === 7 || version === 8) {\n        var desc = (0, $klnll.readVersionAndDescriptor)(reader);\n        if (!target.slices) target.slices = [];\n        target.slices.push({\n            groupName: desc.baseName,\n            bounds: $7976e85542dc0fe3$var$boundsFromBounds(desc.bounds),\n            slices: desc.slices.map(function(s) {\n                return $7976e85542dc0fe3$var$__assign($7976e85542dc0fe3$var$__assign({}, s['Nm  '] ? {\n                    name: s['Nm  ']\n                } : {}), {\n                    id: s.sliceID,\n                    groupId: s.groupID,\n                    associatedLayerId: 0,\n                    origin: $klnll.ESliceOrigin.decode(s.origin),\n                    type: $klnll.ESliceType.decode(s.Type),\n                    bounds: $7976e85542dc0fe3$var$boundsFromBounds(s.bounds),\n                    url: s.url,\n                    target: s.null,\n                    message: s.Msge,\n                    altTag: s.altTag,\n                    cellTextIsHTML: s.cellTextIsHTML,\n                    cellText: s.cellText,\n                    horizontalAlignment: $klnll.ESliceHorzAlign.decode(s.horzAlign),\n                    verticalAlignment: $klnll.ESliceVertAlign.decode(s.vertAlign),\n                    backgroundColorType: $klnll.ESliceBGColorType.decode(s.bgColorType),\n                    backgroundColor: s.bgColor ? {\n                        r: s.bgColor['Rd  '],\n                        g: s.bgColor['Grn '],\n                        b: s.bgColor['Bl  '],\n                        a: s.bgColor.alpha\n                    } : {\n                        r: 0,\n                        g: 0,\n                        b: 0,\n                        a: 0\n                    },\n                    topOutset: s.topOutset || 0,\n                    leftOutset: s.leftOutset || 0,\n                    bottomOutset: s.bottomOutset || 0,\n                    rightOutset: s.rightOutset || 0\n                });\n            })\n        });\n    } else throw new Error(\"Invalid slices version (\".concat(version, \")\"));\n}, function(writer, target, index) {\n    var _a = target.slices[index], bounds = _a.bounds, groupName = _a.groupName, slices = _a.slices;\n    (0, $kCSTH.writeUint32)(writer, 6); // version\n    (0, $kCSTH.writeInt32)(writer, bounds.top);\n    (0, $kCSTH.writeInt32)(writer, bounds.left);\n    (0, $kCSTH.writeInt32)(writer, bounds.bottom);\n    (0, $kCSTH.writeInt32)(writer, bounds.right);\n    (0, $kCSTH.writeUnicodeString)(writer, groupName);\n    (0, $kCSTH.writeUint32)(writer, slices.length);\n    for(var i = 0; i < slices.length; i++){\n        var slice = slices[i];\n        var _b = slice.backgroundColor, a = _b.a, r = _b.r, g = _b.g, b = _b.b;\n        if (slice.backgroundColorType === 'none') a = r = g = b = 0;\n        else if (slice.backgroundColorType === 'matte') {\n            a = 0;\n            r = g = b = 255;\n        }\n        (0, $kCSTH.writeUint32)(writer, slice.id);\n        (0, $kCSTH.writeUint32)(writer, slice.groupId);\n        (0, $kCSTH.writeUint32)(writer, $7976e85542dc0fe3$var$sliceOrigins.indexOf(slice.origin));\n        if (slice.origin === 'layer') (0, $kCSTH.writeUint32)(writer, slice.associatedLayerId);\n        (0, $kCSTH.writeUnicodeString)(writer, slice.name || '');\n        (0, $kCSTH.writeUint32)(writer, $7976e85542dc0fe3$var$sliceTypes.indexOf(slice.type));\n        (0, $kCSTH.writeInt32)(writer, slice.bounds.left);\n        (0, $kCSTH.writeInt32)(writer, slice.bounds.top);\n        (0, $kCSTH.writeInt32)(writer, slice.bounds.right);\n        (0, $kCSTH.writeInt32)(writer, slice.bounds.bottom);\n        (0, $kCSTH.writeUnicodeString)(writer, slice.url);\n        (0, $kCSTH.writeUnicodeString)(writer, slice.target);\n        (0, $kCSTH.writeUnicodeString)(writer, slice.message);\n        (0, $kCSTH.writeUnicodeString)(writer, slice.altTag);\n        (0, $kCSTH.writeUint8)(writer, slice.cellTextIsHTML ? 1 : 0);\n        (0, $kCSTH.writeUnicodeString)(writer, slice.cellText);\n        (0, $kCSTH.writeUint32)(writer, $7976e85542dc0fe3$var$sliceAlignments.indexOf(slice.horizontalAlignment));\n        (0, $kCSTH.writeUint32)(writer, $7976e85542dc0fe3$var$sliceAlignments.indexOf(slice.verticalAlignment));\n        (0, $kCSTH.writeUint8)(writer, a);\n        (0, $kCSTH.writeUint8)(writer, r);\n        (0, $kCSTH.writeUint8)(writer, g);\n        (0, $kCSTH.writeUint8)(writer, b);\n    }\n    var desc = {\n        bounds: $7976e85542dc0fe3$var$boundsToBounds(bounds),\n        slices: []\n    };\n    slices.forEach(function(s) {\n        var slice = $7976e85542dc0fe3$var$__assign($7976e85542dc0fe3$var$__assign({\n            sliceID: s.id,\n            groupID: s.groupId,\n            origin: $klnll.ESliceOrigin.encode(s.origin),\n            Type: $klnll.ESliceType.encode(s.type),\n            bounds: $7976e85542dc0fe3$var$boundsToBounds(s.bounds)\n        }, s.name ? {\n            'Nm  ': s.name\n        } : {}), {\n            url: s.url,\n            null: s.target,\n            Msge: s.message,\n            altTag: s.altTag,\n            cellTextIsHTML: s.cellTextIsHTML,\n            cellText: s.cellText,\n            horzAlign: $klnll.ESliceHorzAlign.encode(s.horizontalAlignment),\n            vertAlign: $klnll.ESliceVertAlign.encode(s.verticalAlignment),\n            bgColorType: $klnll.ESliceBGColorType.encode(s.backgroundColorType)\n        });\n        if (s.backgroundColorType === 'color') {\n            var _a = s.backgroundColor, r = _a.r, g = _a.g, b = _a.b, a = _a.a;\n            slice.bgColor = {\n                'Rd  ': r,\n                'Grn ': g,\n                'Bl  ': b,\n                alpha: a\n            };\n        }\n        slice.topOutset = s.topOutset || 0;\n        slice.leftOutset = s.leftOutset || 0;\n        slice.bottomOutset = s.bottomOutset || 0;\n        slice.rightOutset = s.rightOutset || 0;\n        desc.slices.push(slice);\n    });\n    (0, $klnll.writeVersionAndDescriptor)(writer, '', 'null', desc, 'slices');\n});\n$7976e85542dc0fe3$var$addHandler(1064, function(target) {\n    return target.pixelAspectRatio !== undefined;\n}, function(reader, target) {\n    if ((0, $5OPaf.readUint32)(reader) > 2) throw new Error('Invalid pixelAspectRatio version');\n    target.pixelAspectRatio = {\n        aspect: (0, $5OPaf.readFloat64)(reader)\n    };\n}, function(writer, target) {\n    (0, $kCSTH.writeUint32)(writer, 2); // version\n    (0, $kCSTH.writeFloat64)(writer, target.pixelAspectRatio.aspect);\n});\n$7976e85542dc0fe3$var$addHandler(1041, function(target) {\n    return target.iccUntaggedProfile !== undefined;\n}, function(reader, target) {\n    target.iccUntaggedProfile = !!(0, $5OPaf.readUint8)(reader);\n}, function(writer, target) {\n    (0, $kCSTH.writeUint8)(writer, target.iccUntaggedProfile ? 1 : 0);\n});\n$jE67M.MOCK_HANDLERS && $7976e85542dc0fe3$var$addHandler(1039, function(target) {\n    return target._ir1039 !== undefined;\n}, function(reader, target, left) {\n    // TODO: this is raw bytes, just return as a byte array\n    $7976e85542dc0fe3$var$LOG_MOCK_HANDLERS && console.log('image resource 1039', left());\n    target._ir1039 = (0, $5OPaf.readBytes)(reader, left());\n}, function(writer, target) {\n    (0, $kCSTH.writeBytes)(writer, target._ir1039);\n});\n$7976e85542dc0fe3$var$addHandler(1044, function(target) {\n    return target.idsSeedNumber !== undefined;\n}, function(reader, target) {\n    return target.idsSeedNumber = (0, $5OPaf.readUint32)(reader);\n}, function(writer, target) {\n    return (0, $kCSTH.writeUint32)(writer, target.idsSeedNumber);\n});\n$7976e85542dc0fe3$var$addHandler(1036, function(target) {\n    return target.thumbnail !== undefined || target.thumbnailRaw !== undefined;\n}, function(reader, target, left) {\n    var format = (0, $5OPaf.readUint32)(reader); // 1 = kJpegRGB, 0 = kRawRGB\n    var width = (0, $5OPaf.readUint32)(reader);\n    var height = (0, $5OPaf.readUint32)(reader);\n    (0, $5OPaf.readUint32)(reader); // widthBytes = (width * bits_per_pixel + 31) / 32 * 4.\n    (0, $5OPaf.readUint32)(reader); // totalSize = widthBytes * height * planes\n    (0, $5OPaf.readUint32)(reader); // sizeAfterCompression\n    var bitsPerPixel = (0, $5OPaf.readUint16)(reader); // 24\n    var planes = (0, $5OPaf.readUint16)(reader); // 1\n    if (format !== 1 || bitsPerPixel !== 24 || planes !== 1) {\n        reader.logMissingFeatures && reader.log(\"Invalid thumbnail data (format: \".concat(format, \", bitsPerPixel: \").concat(bitsPerPixel, \", planes: \").concat(planes, \")\"));\n        (0, $5OPaf.skipBytes)(reader, left());\n        return;\n    }\n    var size = left();\n    var data = (0, $5OPaf.readBytes)(reader, size);\n    if (reader.useRawThumbnail) target.thumbnailRaw = {\n        width: width,\n        height: height,\n        data: data\n    };\n    else if (data.byteLength) target.thumbnail = (0, $jE67M.createCanvasFromData)(data);\n}, function(writer, target) {\n    var _a;\n    var width = 0;\n    var height = 0;\n    var data = new Uint8Array(0);\n    if (target.thumbnailRaw) {\n        width = target.thumbnailRaw.width;\n        height = target.thumbnailRaw.height;\n        data = target.thumbnailRaw.data;\n    } else try {\n        var dataUrl = (_a = target.thumbnail.toDataURL('image/jpeg', 1)) === null || _a === void 0 ? void 0 : _a.substring(23);\n        if (dataUrl) {\n            data = (0, $jWkTT.toByteArray)(dataUrl); // this sometimes fails for some reason, maybe some browser bugs\n            width = target.thumbnail.width;\n            height = target.thumbnail.height;\n        }\n    } catch (_b) {}\n    var bitsPerPixel = 24;\n    var widthBytes = Math.floor((width * bitsPerPixel + 31) / 32) * 4;\n    var planes = 1;\n    var totalSize = widthBytes * height * planes;\n    var sizeAfterCompression = data.length;\n    (0, $kCSTH.writeUint32)(writer, 1); // 1 = kJpegRGB\n    (0, $kCSTH.writeUint32)(writer, width);\n    (0, $kCSTH.writeUint32)(writer, height);\n    (0, $kCSTH.writeUint32)(writer, widthBytes);\n    (0, $kCSTH.writeUint32)(writer, totalSize);\n    (0, $kCSTH.writeUint32)(writer, sizeAfterCompression);\n    (0, $kCSTH.writeUint16)(writer, bitsPerPixel);\n    (0, $kCSTH.writeUint16)(writer, planes);\n    (0, $kCSTH.writeBytes)(writer, data);\n});\n$7976e85542dc0fe3$var$addHandler(1057, function(target) {\n    return target.versionInfo !== undefined;\n}, function(reader, target, left) {\n    var version = (0, $5OPaf.readUint32)(reader);\n    if (version !== 1) throw new Error('Invalid versionInfo version');\n    target.versionInfo = {\n        hasRealMergedData: !!(0, $5OPaf.readUint8)(reader),\n        writerName: (0, $5OPaf.readUnicodeString)(reader),\n        readerName: (0, $5OPaf.readUnicodeString)(reader),\n        fileVersion: (0, $5OPaf.readUint32)(reader)\n    };\n    (0, $5OPaf.skipBytes)(reader, left());\n}, function(writer, target) {\n    var versionInfo = target.versionInfo;\n    (0, $kCSTH.writeUint32)(writer, 1); // version\n    (0, $kCSTH.writeUint8)(writer, versionInfo.hasRealMergedData ? 1 : 0);\n    (0, $kCSTH.writeUnicodeString)(writer, versionInfo.writerName);\n    (0, $kCSTH.writeUnicodeString)(writer, versionInfo.readerName);\n    (0, $kCSTH.writeUint32)(writer, versionInfo.fileVersion);\n});\n$jE67M.MOCK_HANDLERS && $7976e85542dc0fe3$var$addHandler(1058, function(target) {\n    return target._ir1058 !== undefined;\n}, function(reader, target, left) {\n    $7976e85542dc0fe3$var$LOG_MOCK_HANDLERS && console.log('image resource 1058', left());\n    target._ir1058 = (0, $5OPaf.readBytes)(reader, left());\n}, function(writer, target) {\n    (0, $kCSTH.writeBytes)(writer, target._ir1058);\n});\n$7976e85542dc0fe3$var$addHandler(7000, function(target) {\n    return target.imageReadyVariables !== undefined;\n}, function(reader, target, left) {\n    target.imageReadyVariables = $7976e85542dc0fe3$var$readUtf8String(reader, left());\n}, function(writer, target) {\n    $7976e85542dc0fe3$var$writeUtf8String(writer, target.imageReadyVariables);\n});\n$7976e85542dc0fe3$var$addHandler(7001, function(target) {\n    return target.imageReadyDataSets !== undefined;\n}, function(reader, target, left) {\n    target.imageReadyDataSets = $7976e85542dc0fe3$var$readUtf8String(reader, left());\n}, function(writer, target) {\n    $7976e85542dc0fe3$var$writeUtf8String(writer, target.imageReadyDataSets);\n});\n$7976e85542dc0fe3$var$addHandler(1088, function(target) {\n    return target.pathSelectionState !== undefined;\n}, function(reader, target, _left) {\n    var desc = (0, $klnll.readVersionAndDescriptor)(reader);\n    target.pathSelectionState = desc['null'];\n}, function(writer, target) {\n    var desc = {\n        'null': target.pathSelectionState\n    };\n    (0, $klnll.writeVersionAndDescriptor)(writer, '', 'null', desc);\n});\n$jE67M.MOCK_HANDLERS && $7976e85542dc0fe3$var$addHandler(1025, function(target) {\n    return target._ir1025 !== undefined;\n}, function(reader, target, left) {\n    $7976e85542dc0fe3$var$LOG_MOCK_HANDLERS && console.log('image resource 1025', left());\n    target._ir1025 = (0, $5OPaf.readBytes)(reader, left());\n}, function(writer, target) {\n    (0, $kCSTH.writeBytes)(writer, target._ir1025);\n});\nvar $7976e85542dc0fe3$var$FrmD = (0, $jE67M.createEnum)('FrmD', '', {\n    auto: 'Auto',\n    none: 'None',\n    dispose: 'Disp'\n});\n$7976e85542dc0fe3$var$addHandler(4000, function(target) {\n    return target.animations !== undefined;\n}, function(reader, target, left) {\n    var key = (0, $5OPaf.readSignature)(reader);\n    if (key === 'mani') {\n        (0, $5OPaf.checkSignature)(reader, 'IRFR');\n        (0, $5OPaf.readSection)(reader, 1, function(left) {\n            var _loop_1 = function _loop_1() {\n                (0, $5OPaf.checkSignature)(reader, '8BIM');\n                var key_1 = (0, $5OPaf.readSignature)(reader);\n                (0, $5OPaf.readSection)(reader, 1, function(left) {\n                    if (key_1 === 'AnDs') {\n                        var desc = (0, $klnll.readVersionAndDescriptor)(reader);\n                        target.animations = {\n                            // desc.AFSt ???\n                            frames: desc.FrIn.map(function(x) {\n                                return {\n                                    id: x.FrID,\n                                    delay: (x.FrDl || 0) / 100,\n                                    dispose: x.FrDs ? $7976e85542dc0fe3$var$FrmD.decode(x.FrDs) : 'auto'\n                                };\n                            }),\n                            animations: desc.FSts.map(function(x) {\n                                return {\n                                    id: x.FsID,\n                                    frames: x.FsFr,\n                                    repeats: x.LCnt,\n                                    activeFrame: x.AFrm || 0\n                                };\n                            })\n                        };\n                    // console.log('#4000 AnDs', require('util').inspect(desc, false, 99, true));\n                    // console.log('#4000 AnDs:result', require('util').inspect(target.animations, false, 99, true));\n                    } else if (key_1 === 'Roll') {\n                        var bytes = (0, $5OPaf.readBytes)(reader, left());\n                        reader.logDevFeatures && reader.log('#4000 Roll', bytes);\n                    } else reader.logMissingFeatures && reader.log('Unhandled subsection in #4000', key_1);\n                });\n            };\n            while(left() > 0)_loop_1();\n        });\n    } else if (key === 'mopt') {\n        var bytes = (0, $5OPaf.readBytes)(reader, left());\n        reader.logDevFeatures && reader.log('#4000 mopt', bytes);\n    } else reader.logMissingFeatures && reader.log('Unhandled key in #4000:', key);\n}, function(writer, target) {\n    if (target.animations) {\n        (0, $kCSTH.writeSignature)(writer, 'mani');\n        (0, $kCSTH.writeSignature)(writer, 'IRFR');\n        (0, $kCSTH.writeSection)(writer, 1, function() {\n            (0, $kCSTH.writeSignature)(writer, '8BIM');\n            (0, $kCSTH.writeSignature)(writer, 'AnDs');\n            (0, $kCSTH.writeSection)(writer, 1, function() {\n                var desc = {\n                    // AFSt: 0, // ???\n                    FrIn: [],\n                    FSts: []\n                };\n                for(var i = 0; i < target.animations.frames.length; i++){\n                    var f = target.animations.frames[i];\n                    var frame = {\n                        FrID: f.id\n                    };\n                    if (f.delay) frame.FrDl = f.delay * 100 | 0;\n                    frame.FrDs = $7976e85542dc0fe3$var$FrmD.encode(f.dispose);\n                    // if (i === 0) frame.FrGA = 30; // ???\n                    desc.FrIn.push(frame);\n                }\n                for(var i = 0; i < target.animations.animations.length; i++){\n                    var a = target.animations.animations[i];\n                    var anim = {\n                        FsID: a.id,\n                        AFrm: a.activeFrame | 0,\n                        FsFr: a.frames,\n                        LCnt: a.repeats | 0\n                    };\n                    desc.FSts.push(anim);\n                }\n                (0, $klnll.writeVersionAndDescriptor)(writer, '', 'null', desc);\n            });\n        // writeSignature(writer, '8BIM');\n        // writeSignature(writer, 'Roll');\n        // writeSection(writer, 1, () => {\n        // \twriteZeros(writer, 8);\n        // });\n        });\n    }\n});\n// TODO: Unfinished\n$jE67M.MOCK_HANDLERS && $7976e85542dc0fe3$var$addHandler(4001, function(target) {\n    return target._ir4001 !== undefined;\n}, function(reader, target, left) {\n    if ($jE67M.MOCK_HANDLERS) {\n        $7976e85542dc0fe3$var$LOG_MOCK_HANDLERS && console.log('image resource 4001', left());\n        target._ir4001 = (0, $5OPaf.readBytes)(reader, left());\n        return;\n    }\n    var key = (0, $5OPaf.readSignature)(reader);\n    if (key === 'mfri') {\n        var version = (0, $5OPaf.readUint32)(reader);\n        if (version !== 2) throw new Error('Invalid mfri version');\n        var length_1 = (0, $5OPaf.readUint32)(reader);\n        var bytes = (0, $5OPaf.readBytes)(reader, length_1);\n        reader.logDevFeatures && reader.log('mfri', bytes);\n    } else if (key === 'mset') {\n        var desc = (0, $klnll.readVersionAndDescriptor)(reader);\n        reader.logDevFeatures && reader.log('mset', desc);\n    } else reader.logMissingFeatures && reader.log('Unhandled key in #4001', key);\n}, function(writer, target) {\n    (0, $kCSTH.writeBytes)(writer, target._ir4001);\n});\n// TODO: Unfinished\n$jE67M.MOCK_HANDLERS && $7976e85542dc0fe3$var$addHandler(4002, function(target) {\n    return target._ir4002 !== undefined;\n}, function(reader, target, left) {\n    $7976e85542dc0fe3$var$LOG_MOCK_HANDLERS && console.log('image resource 4002', left());\n    target._ir4002 = (0, $5OPaf.readBytes)(reader, left());\n}, function(writer, target) {\n    (0, $kCSTH.writeBytes)(writer, target._ir4002);\n});\n\n});\nparcelRegister(\"5wpNI\", function(module, exports) {\n\"use strict\";\nObject.defineProperty(module.exports, \"__esModule\", {\n    value: true\n});\nmodule.exports.decodeString = module.exports.encodeString = module.exports.encodeStringTo = module.exports.stringLengthInBytes = void 0;\nfunction $4053f470e500857f$var$charLengthInBytes(code) {\n    if ((code & 0xffffff80) === 0) return 1;\n    else if ((code & 0xfffff800) === 0) return 2;\n    else if ((code & 0xffff0000) === 0) return 3;\n    else return 4;\n}\nfunction $4053f470e500857f$var$stringLengthInBytes(value) {\n    var result = 0;\n    for(var i = 0; i < value.length; i++){\n        var code = value.charCodeAt(i);\n        // high surrogate\n        if (code >= 0xd800 && code <= 0xdbff) {\n            if (i + 1 < value.length) {\n                var extra = value.charCodeAt(i + 1);\n                // low surrogate\n                if ((extra & 0xfc00) === 0xdc00) {\n                    i++;\n                    result += $4053f470e500857f$var$charLengthInBytes(((code & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000);\n                }\n            }\n        } else result += $4053f470e500857f$var$charLengthInBytes(code);\n    }\n    return result;\n}\nmodule.exports.stringLengthInBytes = $4053f470e500857f$var$stringLengthInBytes;\nfunction $4053f470e500857f$var$writeCharacter(buffer, offset, code) {\n    var length = $4053f470e500857f$var$charLengthInBytes(code);\n    switch(length){\n        case 1:\n            buffer[offset] = code;\n            break;\n        case 2:\n            buffer[offset] = code >> 6 & 0x1f | 0xc0;\n            buffer[offset + 1] = code & 0x3f | 0x80;\n            break;\n        case 3:\n            buffer[offset] = code >> 12 & 0x0f | 0xe0;\n            buffer[offset + 1] = code >> 6 & 0x3f | 0x80;\n            buffer[offset + 2] = code & 0x3f | 0x80;\n            break;\n        default:\n            buffer[offset] = code >> 18 & 0x07 | 0xf0;\n            buffer[offset + 1] = code >> 12 & 0x3f | 0x80;\n            buffer[offset + 2] = code >> 6 & 0x3f | 0x80;\n            buffer[offset + 3] = code & 0x3f | 0x80;\n            break;\n    }\n    return length;\n}\nfunction $4053f470e500857f$var$encodeStringTo(buffer, offset, value) {\n    for(var i = 0; i < value.length; i++){\n        var code = value.charCodeAt(i);\n        // high surrogate\n        if (code >= 0xd800 && code <= 0xdbff) {\n            if (i + 1 < value.length) {\n                var extra = value.charCodeAt(i + 1);\n                // low surrogate\n                if ((extra & 0xfc00) === 0xdc00) {\n                    i++;\n                    var fullCode = ((code & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n                    offset += $4053f470e500857f$var$writeCharacter(buffer, offset, fullCode);\n                }\n            }\n        } else offset += $4053f470e500857f$var$writeCharacter(buffer, offset, code);\n    }\n    return offset;\n}\nmodule.exports.encodeStringTo = $4053f470e500857f$var$encodeStringTo;\nfunction $4053f470e500857f$var$encodeString(value) {\n    if (value.length > 1000 && typeof TextEncoder !== 'undefined') return new TextEncoder().encode(value);\n    var buffer = new Uint8Array($4053f470e500857f$var$stringLengthInBytes(value));\n    $4053f470e500857f$var$encodeStringTo(buffer, 0, value);\n    return buffer;\n}\nmodule.exports.encodeString = $4053f470e500857f$var$encodeString;\nfunction $4053f470e500857f$var$continuationByte(buffer, index) {\n    if (index >= buffer.length) throw Error('Invalid byte index');\n    var continuationByte = buffer[index];\n    if ((continuationByte & 0xC0) === 0x80) return continuationByte & 0x3F;\n    else throw Error('Invalid continuation byte');\n}\nfunction $4053f470e500857f$var$decodeString(value) {\n    if (value.byteLength > 1000 && typeof TextDecoder !== 'undefined') return new TextDecoder().decode(value);\n    var result = [];\n    for(var i = 0; i < value.length;){\n        var byte1 = value[i++];\n        var code = void 0;\n        if ((byte1 & 0x80) === 0) code = byte1;\n        else if ((byte1 & 0xe0) === 0xc0) {\n            var byte2 = $4053f470e500857f$var$continuationByte(value, i++);\n            code = (byte1 & 0x1f) << 6 | byte2;\n            if (code < 0x80) throw Error('Invalid continuation byte');\n        } else if ((byte1 & 0xf0) === 0xe0) {\n            var byte2 = $4053f470e500857f$var$continuationByte(value, i++);\n            var byte3 = $4053f470e500857f$var$continuationByte(value, i++);\n            code = (byte1 & 0x0f) << 12 | byte2 << 6 | byte3;\n            if (code < 0x0800) throw Error('Invalid continuation byte');\n            if (code >= 0xd800 && code <= 0xdfff) throw Error(\"Lone surrogate U+\".concat(code.toString(16).toUpperCase(), \" is not a scalar value\"));\n        } else if ((byte1 & 0xf8) === 0xf0) {\n            var byte2 = $4053f470e500857f$var$continuationByte(value, i++);\n            var byte3 = $4053f470e500857f$var$continuationByte(value, i++);\n            var byte4 = $4053f470e500857f$var$continuationByte(value, i++);\n            code = (byte1 & 0x0f) << 0x12 | byte2 << 0x0c | byte3 << 0x06 | byte4;\n            if (code < 0x010000 || code > 0x10ffff) throw Error('Invalid continuation byte');\n        } else throw Error('Invalid UTF-8 detected');\n        if (code > 0xffff) {\n            code -= 0x10000;\n            result.push(String.fromCharCode(code >>> 10 & 0x3ff | 0xd800));\n            code = 0xdc00 | code & 0x3ff;\n        }\n        result.push(String.fromCharCode(code));\n    }\n    return result.join('');\n}\nmodule.exports.decodeString = $4053f470e500857f$var$decodeString;\n\n});\n\nparcelRegister(\"klnll\", function(module, exports) {\n\"use strict\";\nvar $ecf7e04a3a5ae4fa$var$__assign = module.exports && module.exports.__assign || function() {\n    $ecf7e04a3a5ae4fa$var$__assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return $ecf7e04a3a5ae4fa$var$__assign.apply(this, arguments);\n};\nvar $ecf7e04a3a5ae4fa$var$__rest = module.exports && module.exports.__rest || function(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") {\n        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n};\nObject.defineProperty(module.exports, \"__esModule\", {\n    value: true\n});\nmodule.exports.ESliceOrigin = module.exports.ESliceVertAlign = module.exports.ESliceHorzAlign = module.exports.ESliceType = module.exports.FrFl = module.exports.FStl = module.exports.ClrS = module.exports.gradientInterpolationMethodType = module.exports.stdTrackID = module.exports.animInterpStyleEnum = module.exports.GrdT = module.exports.IGSr = module.exports.BETE = module.exports.BESs = module.exports.bvlT = module.exports.BESl = module.exports.BlnM = module.exports.warpStyle = module.exports.Annt = module.exports.Ornt = module.exports.textGridding = module.exports.frac = module.exports.unitsValue = module.exports.unitsPercentF = module.exports.unitsPercent = module.exports.unitsAngle = module.exports.parseUnitsToNumber = module.exports.parseUnitsOrNumber = module.exports.parseUnits = module.exports.parsePercentOrAngle = module.exports.parsePercent = module.exports.parseAngle = module.exports.serializeColor = module.exports.parseColor = module.exports.serializeVectorContent = module.exports.parseVectorContent = module.exports.serializeTrackList = module.exports.parseTrackList = module.exports.parseEffects = module.exports.serializeEffects = module.exports.boundsToDescBounds = module.exports.descBoundsToBounds = module.exports.xyToHorzVrtc = module.exports.horzVrtcToXY = module.exports.writeVersionAndDescriptor = module.exports.readVersionAndDescriptor = module.exports.writeDescriptorStructure = module.exports.readDescriptorStructure = module.exports.readAsciiStringOrClassId = module.exports.setLogErrors = void 0;\nmodule.exports.presetKindType = module.exports.prjM = module.exports.FlMd = module.exports.IntC = module.exports.IntE = module.exports.Drct = module.exports.WndM = module.exports.CntE = module.exports.FlCl = module.exports.ExtR = module.exports.ExtT = module.exports.DfsM = module.exports.blurType = module.exports.Lns = module.exports.MztT = module.exports.Chnl = module.exports.Dstr = module.exports.ZZTy = module.exports.Wvtp = module.exports.SphM = module.exports.RplS = module.exports.Cnvr = module.exports.UndA = module.exports.DspM = module.exports.SmBQ = module.exports.SmBM = module.exports.BlrQ = module.exports.BlrM = module.exports.strokeStyleLineAlignment = module.exports.strokeStyleLineJoinType = module.exports.strokeStyleLineCapType = module.exports.ESliceBGColorType = void 0;\n\nvar $jE67M = parcelRequire(\"jE67M\");\n\nvar $5OPaf = parcelRequire(\"5OPaf\");\n\nvar $kCSTH = parcelRequire(\"kCSTH\");\nfunction $ecf7e04a3a5ae4fa$var$revMap(map) {\n    var result = {};\n    Object.keys(map).forEach(function(key) {\n        return result[map[key]] = key;\n    });\n    return result;\n}\nvar $ecf7e04a3a5ae4fa$var$unitsMap = {\n    '#Ang': 'Angle',\n    '#Rsl': 'Density',\n    '#Rlt': 'Distance',\n    '#Nne': 'None',\n    '#Prc': 'Percent',\n    '#Pxl': 'Pixels',\n    '#Mlm': 'Millimeters',\n    '#Pnt': 'Points',\n    'RrPi': 'Picas',\n    'RrIn': 'Inches',\n    'RrCm': 'Centimeters'\n};\nvar $ecf7e04a3a5ae4fa$var$unitsMapRev = $ecf7e04a3a5ae4fa$var$revMap($ecf7e04a3a5ae4fa$var$unitsMap);\nvar $ecf7e04a3a5ae4fa$var$logErrors = false;\nfunction $ecf7e04a3a5ae4fa$var$setLogErrors(value) {\n    $ecf7e04a3a5ae4fa$var$logErrors = value;\n}\nmodule.exports.setLogErrors = $ecf7e04a3a5ae4fa$var$setLogErrors;\nfunction $ecf7e04a3a5ae4fa$var$makeType(name, classID) {\n    return {\n        name: name,\n        classID: classID\n    };\n}\nvar $ecf7e04a3a5ae4fa$var$nullType = $ecf7e04a3a5ae4fa$var$makeType('', 'null');\nvar $ecf7e04a3a5ae4fa$var$USE_CHINESE = false; // Testing\nvar $ecf7e04a3a5ae4fa$var$fieldToExtType = {\n    strokeStyleContent: $ecf7e04a3a5ae4fa$var$makeType('', 'solidColorLayer'),\n    printProofSetup: $ecf7e04a3a5ae4fa$var$makeType($ecf7e04a3a5ae4fa$var$USE_CHINESE ? \"\\u6821\\u6837\\u8BBE\\u7F6E\" : 'Proof Setup', 'proofSetup'),\n    Grad: $ecf7e04a3a5ae4fa$var$makeType($ecf7e04a3a5ae4fa$var$USE_CHINESE ? \"\\u6E10\\u53D8\" : 'Gradient', 'Grdn'),\n    Trnf: $ecf7e04a3a5ae4fa$var$makeType($ecf7e04a3a5ae4fa$var$USE_CHINESE ? \"\\u53D8\\u6362\" : 'Transform', 'Trnf'),\n    patternFill: $ecf7e04a3a5ae4fa$var$makeType('', 'patternFill'),\n    ebbl: $ecf7e04a3a5ae4fa$var$makeType('', 'ebbl'),\n    SoFi: $ecf7e04a3a5ae4fa$var$makeType('', 'SoFi'),\n    GrFl: $ecf7e04a3a5ae4fa$var$makeType('', 'GrFl'),\n    sdwC: $ecf7e04a3a5ae4fa$var$makeType('', 'RGBC'),\n    hglC: $ecf7e04a3a5ae4fa$var$makeType('', 'RGBC'),\n    'Clr ': $ecf7e04a3a5ae4fa$var$makeType('', 'RGBC'),\n    'tintColor': $ecf7e04a3a5ae4fa$var$makeType('', 'RGBC'),\n    Ofst: $ecf7e04a3a5ae4fa$var$makeType('', 'Pnt '),\n    ChFX: $ecf7e04a3a5ae4fa$var$makeType('', 'ChFX'),\n    MpgS: $ecf7e04a3a5ae4fa$var$makeType('', 'ShpC'),\n    DrSh: $ecf7e04a3a5ae4fa$var$makeType('', 'DrSh'),\n    IrSh: $ecf7e04a3a5ae4fa$var$makeType('', 'IrSh'),\n    OrGl: $ecf7e04a3a5ae4fa$var$makeType('', 'OrGl'),\n    IrGl: $ecf7e04a3a5ae4fa$var$makeType('', 'IrGl'),\n    TrnS: $ecf7e04a3a5ae4fa$var$makeType('', 'ShpC'),\n    Ptrn: $ecf7e04a3a5ae4fa$var$makeType('', 'Ptrn'),\n    FrFX: $ecf7e04a3a5ae4fa$var$makeType('', 'FrFX'),\n    phase: $ecf7e04a3a5ae4fa$var$makeType('', 'Pnt '),\n    frameStep: $ecf7e04a3a5ae4fa$var$nullType,\n    duration: $ecf7e04a3a5ae4fa$var$nullType,\n    workInTime: $ecf7e04a3a5ae4fa$var$nullType,\n    workOutTime: $ecf7e04a3a5ae4fa$var$nullType,\n    audioClipGroupList: $ecf7e04a3a5ae4fa$var$nullType,\n    bounds: $ecf7e04a3a5ae4fa$var$makeType('', 'Rctn'),\n    customEnvelopeWarp: $ecf7e04a3a5ae4fa$var$makeType('', 'customEnvelopeWarp'),\n    warp: $ecf7e04a3a5ae4fa$var$makeType('', 'warp'),\n    'Sz  ': $ecf7e04a3a5ae4fa$var$makeType('', 'Pnt '),\n    origin: $ecf7e04a3a5ae4fa$var$makeType('', 'Pnt '),\n    autoExpandOffset: $ecf7e04a3a5ae4fa$var$makeType('', 'Pnt '),\n    keyOriginShapeBBox: $ecf7e04a3a5ae4fa$var$makeType('', 'unitRect'),\n    Vrsn: $ecf7e04a3a5ae4fa$var$nullType,\n    psVersion: $ecf7e04a3a5ae4fa$var$nullType,\n    docDefaultNewArtboardBackgroundColor: $ecf7e04a3a5ae4fa$var$makeType('', 'RGBC'),\n    artboardRect: $ecf7e04a3a5ae4fa$var$makeType('', 'classFloatRect'),\n    keyOriginRRectRadii: $ecf7e04a3a5ae4fa$var$makeType('', 'radii'),\n    keyOriginBoxCorners: $ecf7e04a3a5ae4fa$var$nullType,\n    rectangleCornerA: $ecf7e04a3a5ae4fa$var$makeType('', 'Pnt '),\n    rectangleCornerB: $ecf7e04a3a5ae4fa$var$makeType('', 'Pnt '),\n    rectangleCornerC: $ecf7e04a3a5ae4fa$var$makeType('', 'Pnt '),\n    rectangleCornerD: $ecf7e04a3a5ae4fa$var$makeType('', 'Pnt '),\n    compInfo: $ecf7e04a3a5ae4fa$var$nullType,\n    quiltWarp: $ecf7e04a3a5ae4fa$var$makeType('', 'quiltWarp'),\n    generatorSettings: $ecf7e04a3a5ae4fa$var$nullType,\n    crema: $ecf7e04a3a5ae4fa$var$nullType,\n    FrIn: $ecf7e04a3a5ae4fa$var$nullType,\n    blendOptions: $ecf7e04a3a5ae4fa$var$nullType,\n    FXRf: $ecf7e04a3a5ae4fa$var$nullType,\n    Lefx: $ecf7e04a3a5ae4fa$var$nullType,\n    time: $ecf7e04a3a5ae4fa$var$nullType,\n    animKey: $ecf7e04a3a5ae4fa$var$nullType,\n    timeScope: $ecf7e04a3a5ae4fa$var$nullType,\n    inTime: $ecf7e04a3a5ae4fa$var$nullType,\n    outTime: $ecf7e04a3a5ae4fa$var$nullType,\n    sheetStyle: $ecf7e04a3a5ae4fa$var$nullType,\n    translation: $ecf7e04a3a5ae4fa$var$nullType,\n    Skew: $ecf7e04a3a5ae4fa$var$nullType,\n    boundingBox: $ecf7e04a3a5ae4fa$var$makeType('', 'boundingBox'),\n    'Lnk ': $ecf7e04a3a5ae4fa$var$makeType('', 'ExternalFileLink'),\n    frameReader: $ecf7e04a3a5ae4fa$var$makeType('', 'FrameReader'),\n    effectParams: $ecf7e04a3a5ae4fa$var$makeType('', 'motionTrackEffectParams'),\n    Impr: $ecf7e04a3a5ae4fa$var$makeType('None', 'none'),\n    Anch: $ecf7e04a3a5ae4fa$var$makeType('', 'Pnt '),\n    'Fwd ': $ecf7e04a3a5ae4fa$var$makeType('', 'Pnt '),\n    'Bwd ': $ecf7e04a3a5ae4fa$var$makeType('', 'Pnt '),\n    FlrC: $ecf7e04a3a5ae4fa$var$makeType('', 'Pnt '),\n    meshBoundaryPath: $ecf7e04a3a5ae4fa$var$makeType('', 'pathClass'),\n    filterFX: $ecf7e04a3a5ae4fa$var$makeType('', 'filterFXStyle'),\n    Fltr: $ecf7e04a3a5ae4fa$var$makeType('', 'rigidTransform'),\n    FrgC: $ecf7e04a3a5ae4fa$var$makeType('', 'RGBC'),\n    BckC: $ecf7e04a3a5ae4fa$var$makeType('', 'RGBC'),\n    sdwM: $ecf7e04a3a5ae4fa$var$makeType('Parameters', 'adaptCorrectTones'),\n    hglM: $ecf7e04a3a5ae4fa$var$makeType('Parameters', 'adaptCorrectTones'),\n    customShape: $ecf7e04a3a5ae4fa$var$makeType('', 'customShape'),\n    origFXRefPoint: $ecf7e04a3a5ae4fa$var$nullType,\n    FXRefPoint: $ecf7e04a3a5ae4fa$var$nullType,\n    ClMg: $ecf7e04a3a5ae4fa$var$makeType('', 'ClMg')\n};\nvar $ecf7e04a3a5ae4fa$var$fieldToArrayExtType = {\n    'Crv ': $ecf7e04a3a5ae4fa$var$makeType('', 'CrPt'),\n    Clrs: $ecf7e04a3a5ae4fa$var$makeType('', 'Clrt'),\n    Trns: $ecf7e04a3a5ae4fa$var$makeType('', 'TrnS'),\n    keyDescriptorList: $ecf7e04a3a5ae4fa$var$nullType,\n    solidFillMulti: $ecf7e04a3a5ae4fa$var$makeType('', 'SoFi'),\n    gradientFillMulti: $ecf7e04a3a5ae4fa$var$makeType('', 'GrFl'),\n    dropShadowMulti: $ecf7e04a3a5ae4fa$var$makeType('', 'DrSh'),\n    innerShadowMulti: $ecf7e04a3a5ae4fa$var$makeType('', 'IrSh'),\n    frameFXMulti: $ecf7e04a3a5ae4fa$var$makeType('', 'FrFX'),\n    FrIn: $ecf7e04a3a5ae4fa$var$nullType,\n    FSts: $ecf7e04a3a5ae4fa$var$nullType,\n    LaSt: $ecf7e04a3a5ae4fa$var$nullType,\n    sheetTimelineOptions: $ecf7e04a3a5ae4fa$var$nullType,\n    trackList: $ecf7e04a3a5ae4fa$var$makeType('', 'animationTrack'),\n    globalTrackList: $ecf7e04a3a5ae4fa$var$makeType('', 'animationTrack'),\n    keyList: $ecf7e04a3a5ae4fa$var$nullType,\n    audioClipGroupList: $ecf7e04a3a5ae4fa$var$nullType,\n    audioClipList: $ecf7e04a3a5ae4fa$var$nullType,\n    countObjectList: $ecf7e04a3a5ae4fa$var$makeType('', 'countObject'),\n    countGroupList: $ecf7e04a3a5ae4fa$var$makeType('', 'countGroup'),\n    slices: $ecf7e04a3a5ae4fa$var$makeType('', 'slice'),\n    'Pts ': $ecf7e04a3a5ae4fa$var$makeType('', 'Pthp'),\n    SbpL: $ecf7e04a3a5ae4fa$var$makeType('', 'SbpL'),\n    pathComponents: $ecf7e04a3a5ae4fa$var$makeType('', 'PaCm'),\n    filterFXList: $ecf7e04a3a5ae4fa$var$makeType('', 'filterFX'),\n    puppetShapeList: $ecf7e04a3a5ae4fa$var$makeType('', 'puppetShape'),\n    channelDenoise: $ecf7e04a3a5ae4fa$var$makeType('', 'channelDenoiseParams'),\n    ShrP: $ecf7e04a3a5ae4fa$var$makeType('', 'Pnt '),\n    layerSettings: $ecf7e04a3a5ae4fa$var$nullType,\n    list: $ecf7e04a3a5ae4fa$var$nullType,\n    Adjs: $ecf7e04a3a5ae4fa$var$makeType('', 'CrvA')\n};\nvar $ecf7e04a3a5ae4fa$var$typeToField = {\n    'TEXT': [\n        'Txt ',\n        'printerName',\n        'Nm  ',\n        'Idnt',\n        'blackAndWhitePresetFileName',\n        'LUT3DFileName',\n        'presetFileName',\n        'curvesPresetFileName',\n        'mixerPresetFileName',\n        'placed',\n        'description',\n        'reason',\n        'artboardPresetName',\n        'json',\n        'clipID',\n        'relPath',\n        'fullPath',\n        'mediaDescriptor',\n        'Msge',\n        'altTag',\n        'url',\n        'cellText',\n        'preset',\n        'KnNm',\n        'FPth',\n        'comment',\n        'originalPath'\n    ],\n    'tdta': [\n        'EngineData',\n        'LUT3DFileData',\n        'indexArray',\n        'originalVertexArray',\n        'deformedVertexArray',\n        'LqMe'\n    ],\n    'long': [\n        'TextIndex',\n        'RndS',\n        'Mdpn',\n        'Smth',\n        'Lctn',\n        'strokeStyleVersion',\n        'LaID',\n        'Vrsn',\n        'Cnt ',\n        'Brgh',\n        'Cntr',\n        'means',\n        'vibrance',\n        'Strt',\n        'bwPresetKind',\n        'comp',\n        'compID',\n        'originalCompID',\n        'curvesPresetKind',\n        'mixerPresetKind',\n        'uOrder',\n        'vOrder',\n        'PgNm',\n        'totalPages',\n        'Crop',\n        'numerator',\n        'denominator',\n        'frameCount',\n        'Annt',\n        'keyOriginType',\n        'unitValueQuadVersion',\n        'keyOriginIndex',\n        'major',\n        'minor',\n        'fix',\n        'docDefaultNewArtboardBackgroundType',\n        'artboardBackgroundType',\n        'numModifyingFX',\n        'deformNumRows',\n        'deformNumCols',\n        'FrID',\n        'FrDl',\n        'FsID',\n        'LCnt',\n        'AFrm',\n        'AFSt',\n        'numBefore',\n        'numAfter',\n        'Spcn',\n        'minOpacity',\n        'maxOpacity',\n        'BlnM',\n        'sheetID',\n        'gblA',\n        'globalAltitude',\n        'descVersion',\n        'frameReaderType',\n        'LyrI',\n        'zoomOrigin',\n        'fontSize',\n        'Rds ',\n        'sliceID',\n        'topOutset',\n        'leftOutset',\n        'bottomOutset',\n        'rightOutset',\n        'filterID',\n        'meshQuality',\n        'meshExpansion',\n        'meshRigidity',\n        'VrsM',\n        'VrsN',\n        'NmbG',\n        'WLMn',\n        'WLMx',\n        'AmMn',\n        'AmMx',\n        'SclH',\n        'SclV',\n        'Lvl ',\n        'TlNm',\n        'TlOf',\n        'FlRs',\n        'Thsh',\n        'ShrS',\n        'ShrE',\n        'FlRs',\n        'Vrnc',\n        'Strg',\n        'ExtS',\n        'ExtD',\n        'HrzS',\n        'VrtS',\n        'NmbR',\n        'EdgF',\n        'Ang1',\n        'Ang2',\n        'Ang3',\n        'Ang4',\n        'lastAppliedComp',\n        'capturedInfo'\n    ],\n    'enum': [\n        'textGridding',\n        'Ornt',\n        'warpStyle',\n        'warpRotate',\n        'Inte',\n        'Bltn',\n        'ClrS',\n        'BlrQ',\n        'bvlT',\n        'bvlS',\n        'bvlD',\n        'Md  ',\n        'glwS',\n        'GrdF',\n        'GlwT',\n        'RplS',\n        'BlrM',\n        'SmBM',\n        'strokeStyleLineCapType',\n        'strokeStyleLineJoinType',\n        'strokeStyleLineAlignment',\n        'strokeStyleBlendMode',\n        'PntT',\n        'Styl',\n        'lookupType',\n        'LUTFormat',\n        'dataOrder',\n        'tableOrder',\n        'enableCompCore',\n        'enableCompCoreGPU',\n        'compCoreSupport',\n        'compCoreGPUSupport',\n        'Engn',\n        'enableCompCoreThreads',\n        'gs99',\n        'FrDs',\n        'trackID',\n        'animInterpStyle',\n        'horzAlign',\n        'vertAlign',\n        'bgColorType',\n        'shapeOperation',\n        'UndA',\n        'Wvtp',\n        'Drct',\n        'WndM',\n        'Edg ',\n        'FlCl',\n        'IntE',\n        'IntC',\n        'Cnvr',\n        'Fl  ',\n        'Dstr',\n        'MztT',\n        'Lns ',\n        'ExtT',\n        'DspM',\n        'ExtR',\n        'ZZTy',\n        'SphM',\n        'SmBQ',\n        'placedLayerOCIOConversion',\n        'gradientsInterpolationMethod'\n    ],\n    'bool': [\n        'PstS',\n        'printSixteenBit',\n        'masterFXSwitch',\n        'enab',\n        'uglg',\n        'antialiasGloss',\n        'useShape',\n        'useTexture',\n        'uglg',\n        'antialiasGloss',\n        'useShape',\n        'Vsbl',\n        'useTexture',\n        'Algn',\n        'Rvrs',\n        'Dthr',\n        'Invr',\n        'VctC',\n        'ShTr',\n        'layerConceals',\n        'strokeEnabled',\n        'fillEnabled',\n        'strokeStyleScaleLock',\n        'strokeStyleStrokeAdjust',\n        'hardProof',\n        'MpBl',\n        'paperWhite',\n        'useLegacy',\n        'Auto',\n        'Lab ',\n        'useTint',\n        'keyShapeInvalidated',\n        'autoExpandEnabled',\n        'autoNestEnabled',\n        'autoPositionEnabled',\n        'shrinkwrapOnSaveEnabled',\n        'present',\n        'showInDialog',\n        'overprint',\n        'sheetDisclosed',\n        'lightsDisclosed',\n        'meshesDisclosed',\n        'materialsDisclosed',\n        'hasMotion',\n        'muted',\n        'Effc',\n        'selected',\n        'autoScope',\n        'fillCanvas',\n        'cellTextIsHTML',\n        'Smoo',\n        'Clsp',\n        'validAtPosition',\n        'rigidType',\n        'hasoptions',\n        'filterMaskEnable',\n        'filterMaskLinked',\n        'filterMaskExtendWithWhite',\n        'removeJPEGArtifact',\n        'Mnch',\n        'ExtF',\n        'ExtM',\n        'moreAccurate',\n        'GpuY',\n        'LIWy',\n        'Cnty'\n    ],\n    'doub': [\n        'warpValue',\n        'warpPerspective',\n        'warpPerspectiveOther',\n        'Intr',\n        'Wdth',\n        'Hght',\n        'strokeStyleMiterLimit',\n        'strokeStyleResolution',\n        'layerTime',\n        'keyOriginResolution',\n        'xx',\n        'xy',\n        'yx',\n        'yy',\n        'tx',\n        'ty',\n        'FrGA',\n        'frameRate',\n        'audioLevel',\n        'rotation',\n        'X   ',\n        'Y   ',\n        'redFloat',\n        'greenFloat',\n        'blueFloat',\n        'imageResolution',\n        'PuX0',\n        'PuX1',\n        'PuX2',\n        'PuX3',\n        'PuY0',\n        'PuY1',\n        'PuY2',\n        'PuY3'\n    ],\n    'UntF': [\n        'sdwO',\n        'hglO',\n        'lagl',\n        'Lald',\n        'srgR',\n        'blur',\n        'Sftn',\n        'Opct',\n        'Dstn',\n        'Angl',\n        'Ckmt',\n        'Nose',\n        'Inpr',\n        'ShdN',\n        'strokeStyleLineWidth',\n        'strokeStyleLineDashOffset',\n        'strokeStyleOpacity',\n        'H   ',\n        'Top ',\n        'Left',\n        'Btom',\n        'Rght',\n        'Rslt',\n        'topRight',\n        'topLeft',\n        'bottomLeft',\n        'bottomRight',\n        'ClNs',\n        'Shrp'\n    ],\n    'VlLs': [\n        'Crv ',\n        'Clrs',\n        'Mnm ',\n        'Mxm ',\n        'Trns',\n        'pathList',\n        'strokeStyleLineDashSet',\n        'FrLs',\n        'slices',\n        'LaSt',\n        'Trnf',\n        'nonAffineTransform',\n        'keyDescriptorList',\n        'guideIndeces',\n        'gradientFillMulti',\n        'solidFillMulti',\n        'frameFXMulti',\n        'innerShadowMulti',\n        'dropShadowMulti',\n        'FrIn',\n        'FSts',\n        'FsFr',\n        'sheetTimelineOptions',\n        'audioClipList',\n        'trackList',\n        'globalTrackList',\n        'keyList',\n        'audioClipList',\n        'warpValues',\n        'selectedPin',\n        'Pts ',\n        'SbpL',\n        'pathComponents',\n        'pinOffsets',\n        'posFinalPins',\n        'pinVertexIndices',\n        'PinP',\n        'PnRt',\n        'PnOv',\n        'PnDp',\n        'filterFXList',\n        'puppetShapeList',\n        'ShrP',\n        'channelDenoise',\n        'Mtrx',\n        'layerSettings',\n        'list',\n        'compList',\n        'Adjs'\n    ],\n    'ObAr': [\n        'meshPoints',\n        'quiltSliceX',\n        'quiltSliceY'\n    ],\n    'obj ': [\n        'null',\n        'Chnl'\n    ],\n    'Pth ': [\n        'DspF'\n    ]\n};\nvar $ecf7e04a3a5ae4fa$var$channels = [\n    'Rd  ',\n    'Grn ',\n    'Bl  ',\n    'Yllw',\n    'Ylw ',\n    'Cyn ',\n    'Mgnt',\n    'Blck',\n    'Gry ',\n    'Lmnc',\n    'A   ',\n    'B   '\n];\nvar $ecf7e04a3a5ae4fa$var$fieldToArrayType = {\n    'Mnm ': 'long',\n    'Mxm ': 'long',\n    FrLs: 'long',\n    strokeStyleLineDashSet: 'UntF',\n    Trnf: 'doub',\n    nonAffineTransform: 'doub',\n    keyDescriptorList: 'Objc',\n    gradientFillMulti: 'Objc',\n    solidFillMulti: 'Objc',\n    frameFXMulti: 'Objc',\n    innerShadowMulti: 'Objc',\n    dropShadowMulti: 'Objc',\n    LaSt: 'Objc',\n    FrIn: 'Objc',\n    FSts: 'Objc',\n    FsFr: 'long',\n    blendOptions: 'Objc',\n    sheetTimelineOptions: 'Objc',\n    keyList: 'Objc',\n    warpValues: 'doub',\n    selectedPin: 'long',\n    'Pts ': 'Objc',\n    SbpL: 'Objc',\n    pathComponents: 'Objc',\n    pinOffsets: 'doub',\n    posFinalPins: 'doub',\n    pinVertexIndices: 'long',\n    PinP: 'doub',\n    PnRt: 'long',\n    PnOv: 'bool',\n    PnDp: 'doub',\n    filterFXList: 'Objc',\n    puppetShapeList: 'Objc',\n    ShrP: 'Objc',\n    channelDenoise: 'Objc',\n    Mtrx: 'long',\n    compList: 'long',\n    Chnl: 'enum'\n};\nvar $ecf7e04a3a5ae4fa$var$fieldToType = {};\nfor(var $ecf7e04a3a5ae4fa$var$_i = 0, $ecf7e04a3a5ae4fa$var$_a = Object.keys($ecf7e04a3a5ae4fa$var$typeToField); $ecf7e04a3a5ae4fa$var$_i < $ecf7e04a3a5ae4fa$var$_a.length; $ecf7e04a3a5ae4fa$var$_i++){\n    var $ecf7e04a3a5ae4fa$var$type = $ecf7e04a3a5ae4fa$var$_a[$ecf7e04a3a5ae4fa$var$_i];\n    for(var $ecf7e04a3a5ae4fa$var$_b = 0, $ecf7e04a3a5ae4fa$var$_c = $ecf7e04a3a5ae4fa$var$typeToField[$ecf7e04a3a5ae4fa$var$type]; $ecf7e04a3a5ae4fa$var$_b < $ecf7e04a3a5ae4fa$var$_c.length; $ecf7e04a3a5ae4fa$var$_b++){\n        var $ecf7e04a3a5ae4fa$var$field = $ecf7e04a3a5ae4fa$var$_c[$ecf7e04a3a5ae4fa$var$_b];\n        $ecf7e04a3a5ae4fa$var$fieldToType[$ecf7e04a3a5ae4fa$var$field] = $ecf7e04a3a5ae4fa$var$type;\n    }\n}\nfor(var $ecf7e04a3a5ae4fa$var$_d = 0, $ecf7e04a3a5ae4fa$var$_e = Object.keys($ecf7e04a3a5ae4fa$var$fieldToExtType); $ecf7e04a3a5ae4fa$var$_d < $ecf7e04a3a5ae4fa$var$_e.length; $ecf7e04a3a5ae4fa$var$_d++){\n    var $ecf7e04a3a5ae4fa$var$field = $ecf7e04a3a5ae4fa$var$_e[$ecf7e04a3a5ae4fa$var$_d];\n    if (!$ecf7e04a3a5ae4fa$var$fieldToType[$ecf7e04a3a5ae4fa$var$field]) $ecf7e04a3a5ae4fa$var$fieldToType[$ecf7e04a3a5ae4fa$var$field] = 'Objc';\n}\nfor(var $ecf7e04a3a5ae4fa$var$_f = 0, $ecf7e04a3a5ae4fa$var$_g = Object.keys($ecf7e04a3a5ae4fa$var$fieldToArrayExtType); $ecf7e04a3a5ae4fa$var$_f < $ecf7e04a3a5ae4fa$var$_g.length; $ecf7e04a3a5ae4fa$var$_f++){\n    var $ecf7e04a3a5ae4fa$var$field = $ecf7e04a3a5ae4fa$var$_g[$ecf7e04a3a5ae4fa$var$_f];\n    $ecf7e04a3a5ae4fa$var$fieldToArrayType[$ecf7e04a3a5ae4fa$var$field] = 'Objc';\n}\nfunction $ecf7e04a3a5ae4fa$var$getTypeByKey(key, value, root, parent) {\n    if (key === 'presetKind') return typeof value === 'string' ? 'enum' : 'long';\n    if (key === 'null' && root === 'slices') return 'TEXT';\n    else if (key === 'groupID') return root === 'slices' ? 'long' : 'TEXT';\n    else if (key === 'Sz  ') return 'Wdth' in value ? 'Objc' : 'units' in value ? 'UntF' : 'doub';\n    else if (key === 'Type') return typeof value === 'string' ? 'enum' : 'long';\n    else if (key === 'AntA') return typeof value === 'string' ? 'enum' : 'bool';\n    else if ((key === 'Hrzn' || key === 'Vrtc') && (parent.Type === 'keyType.Pstn' || parent._classID === 'Ofst')) return 'long';\n    else if (key === 'Hrzn' || key === 'Vrtc' || key === 'Top ' || key === 'Left' || key === 'Btom' || key === 'Rght') {\n        if (root === 'slices') return 'long';\n        return typeof value === 'number' ? 'doub' : 'UntF';\n    } else if (key === 'Vrsn') return typeof value === 'number' ? 'long' : 'Objc';\n    else if (key === 'Rd  ' || key === 'Grn ' || key === 'Bl  ') return root === 'artd' ? 'long' : 'doub';\n    else if (key === 'Trnf') return Array.isArray(value) ? 'VlLs' : 'Objc';\n    else return $ecf7e04a3a5ae4fa$var$fieldToType[key];\n}\nfunction $ecf7e04a3a5ae4fa$var$readAsciiStringOrClassId(reader) {\n    var length = (0, $5OPaf.readInt32)(reader);\n    return (0, $5OPaf.readAsciiString)(reader, length || 4);\n}\nmodule.exports.readAsciiStringOrClassId = $ecf7e04a3a5ae4fa$var$readAsciiStringOrClassId;\nfunction $ecf7e04a3a5ae4fa$var$writeAsciiStringOrClassId(writer, value) {\n    if (value.length === 4 && value !== 'warp' && value !== 'time' && value !== 'hold' && value !== 'list') {\n        // write classId\n        (0, $kCSTH.writeInt32)(writer, 0);\n        (0, $kCSTH.writeSignature)(writer, value);\n    } else {\n        // write ascii string\n        (0, $kCSTH.writeInt32)(writer, value.length);\n        for(var i = 0; i < value.length; i++)(0, $kCSTH.writeUint8)(writer, value.charCodeAt(i));\n    }\n}\nfunction $ecf7e04a3a5ae4fa$var$readDescriptorStructure(reader, includeClass) {\n    var struct = $ecf7e04a3a5ae4fa$var$readClassStructure(reader);\n    var object = includeClass ? {\n        _name: struct.name,\n        _classID: struct.classID\n    } : {};\n    // console.log('>> ', struct);\n    var itemsCount = (0, $5OPaf.readUint32)(reader);\n    for(var i = 0; i < itemsCount; i++){\n        var key = $ecf7e04a3a5ae4fa$var$readAsciiStringOrClassId(reader);\n        var type = (0, $5OPaf.readSignature)(reader);\n        // console.log(`> '${key}' '${type}'`);\n        var data = $ecf7e04a3a5ae4fa$var$readOSType(reader, type, includeClass);\n        // if (!getTypeByKey(key, data)) console.log(`> '${key}' '${type}'`, data);\n        object[key] = data;\n    }\n    return object;\n}\nmodule.exports.readDescriptorStructure = $ecf7e04a3a5ae4fa$var$readDescriptorStructure;\nfunction $ecf7e04a3a5ae4fa$var$writeDescriptorStructure(writer, name, classId, value, root) {\n    if ($ecf7e04a3a5ae4fa$var$logErrors && !classId) console.log('Missing classId for: ', name, classId, value);\n    // write class structure\n    (0, $kCSTH.writeUnicodeStringWithPadding)(writer, name);\n    $ecf7e04a3a5ae4fa$var$writeAsciiStringOrClassId(writer, classId);\n    var keys = Object.keys(value);\n    var keyCount = keys.length;\n    if ('_name' in value) keyCount--;\n    if ('_classID' in value) keyCount--;\n    (0, $kCSTH.writeUint32)(writer, keyCount);\n    for(var _i = 0, keys_1 = keys; _i < keys_1.length; _i++){\n        var key = keys_1[_i];\n        if (key === '_name' || key === '_classID') continue;\n        var type = $ecf7e04a3a5ae4fa$var$getTypeByKey(key, value[key], root, value);\n        var extType = $ecf7e04a3a5ae4fa$var$fieldToExtType[key];\n        if (key === 'bounds' && root === 'text') extType = $ecf7e04a3a5ae4fa$var$makeType('', 'bounds');\n        else if (key === 'origin') type = root === 'slices' ? 'enum' : 'Objc';\n        else if ((key === 'Cyn ' || key === 'Mgnt' || key === 'Ylw ' || key === 'Blck') && value._classID === 'CMYC') type = 'doub';\n        else if (/^PN[a-z][a-z]$/.test(key)) type = 'TEXT';\n        else if (/^PT[a-z][a-z]$/.test(key)) type = 'long';\n        else if (/^PF[a-z][a-z]$/.test(key)) type = 'doub';\n        else if ((key === 'Rds ' || key === 'Thsh') && typeof value[key] === 'number' && value._classID === 'SmrB') type = 'doub';\n        else if (key === 'ClSz' || key === 'Rds ' || key === 'Amnt') type = typeof value[key] === 'number' ? 'long' : 'UntF';\n        else if ((key === 'sdwM' || key === 'hglM') && typeof value[key] === 'string') type = 'enum';\n        else if (key === 'blur' && typeof value[key] === 'string') type = 'enum';\n        else if (key === 'Hght' && typeof value[key] === 'number' && value._classID === 'Embs') type = 'long';\n        else if (key === 'Angl' && typeof value[key] === 'number' && (value._classID === 'Embs' || value._classID === 'smartSharpen' || value._classID === 'Twrl' || value._classID === 'MtnB')) type = 'long';\n        else if (key === 'Angl' && typeof value[key] === 'number') type = 'doub'; // ???\n        else if (key === 'bounds' && root === 'slices') {\n            type = 'Objc';\n            extType = $ecf7e04a3a5ae4fa$var$makeType('', 'Rct1');\n        } else if (key === 'Scl ') {\n            if (typeof value[key] === 'object' && 'Hrzn' in value[key]) {\n                type = 'Objc';\n                extType = $ecf7e04a3a5ae4fa$var$nullType;\n            } else if (typeof value[key] === 'number') type = 'long';\n            else type = 'UntF';\n        } else if (key === 'audioClipGroupList' && keys.length === 1) type = 'VlLs';\n        else if ((key === 'Strt' || key === 'Brgh') && 'H   ' in value) type = 'doub';\n        else if (key === 'Wdth' && typeof value[key] === 'object') type = 'UntF';\n        else if (key === 'Ofst' && typeof value[key] === 'number') type = 'long';\n        else if (key === 'Strt' && typeof value[key] === 'object') {\n            type = 'Objc';\n            extType = $ecf7e04a3a5ae4fa$var$nullType;\n        } else if ($ecf7e04a3a5ae4fa$var$channels.indexOf(key) !== -1) type = classId === 'RGBC' && root !== 'artd' ? 'doub' : 'long';\n        else if (key === 'profile') type = classId === 'printOutput' ? 'TEXT' : 'tdta';\n        else if (key === 'strokeStyleContent') {\n            if (value[key]['Clr ']) extType = $ecf7e04a3a5ae4fa$var$makeType('', 'solidColorLayer');\n            else if (value[key].Grad) extType = $ecf7e04a3a5ae4fa$var$makeType('', 'gradientLayer');\n            else if (value[key].Ptrn) extType = $ecf7e04a3a5ae4fa$var$makeType('', 'patternLayer');\n            else $ecf7e04a3a5ae4fa$var$logErrors && console.log('Invalid strokeStyleContent value', value[key]);\n        } else if (key === 'bounds' && root === 'quiltWarp') extType = $ecf7e04a3a5ae4fa$var$makeType('', 'classFloatRect');\n        if (extType && extType.classID === 'RGBC') {\n            if ('H   ' in value[key]) extType = {\n                classID: 'HSBC',\n                name: ''\n            };\n        }\n        $ecf7e04a3a5ae4fa$var$writeAsciiStringOrClassId(writer, key);\n        (0, $kCSTH.writeSignature)(writer, type || 'long');\n        $ecf7e04a3a5ae4fa$var$writeOSType(writer, type || 'long', value[key], key, extType, root);\n        if ($ecf7e04a3a5ae4fa$var$logErrors && !type) console.log(\"Missing descriptor field type for: '\".concat(key, \"' in\"), value);\n    }\n}\nmodule.exports.writeDescriptorStructure = $ecf7e04a3a5ae4fa$var$writeDescriptorStructure;\nfunction $ecf7e04a3a5ae4fa$var$readOSType(reader, type, includeClass) {\n    switch(type){\n        case 'obj ':\n            return $ecf7e04a3a5ae4fa$var$readReferenceStructure(reader);\n        case 'Objc':\n        case 'GlbO':\n            return $ecf7e04a3a5ae4fa$var$readDescriptorStructure(reader, includeClass);\n        case 'VlLs':\n            var length_1 = (0, $5OPaf.readInt32)(reader);\n            var items = [];\n            for(var i = 0; i < length_1; i++){\n                var itemType = (0, $5OPaf.readSignature)(reader);\n                // console.log('  >', itemType);\n                items.push($ecf7e04a3a5ae4fa$var$readOSType(reader, itemType, includeClass));\n            }\n            return items;\n        case 'doub':\n            return (0, $5OPaf.readFloat64)(reader);\n        case 'UntF':\n            var units = (0, $5OPaf.readSignature)(reader);\n            var value = (0, $5OPaf.readFloat64)(reader);\n            if (!$ecf7e04a3a5ae4fa$var$unitsMap[units]) throw new Error(\"Invalid units: \".concat(units));\n            return {\n                units: $ecf7e04a3a5ae4fa$var$unitsMap[units],\n                value: value\n            };\n        case 'UnFl':\n            var units = (0, $5OPaf.readSignature)(reader);\n            var value = (0, $5OPaf.readFloat32)(reader);\n            if (!$ecf7e04a3a5ae4fa$var$unitsMap[units]) throw new Error(\"Invalid units: \".concat(units));\n            return {\n                units: $ecf7e04a3a5ae4fa$var$unitsMap[units],\n                value: value\n            };\n        case 'TEXT':\n            return (0, $5OPaf.readUnicodeString)(reader);\n        case 'enum':\n            var enumType = $ecf7e04a3a5ae4fa$var$readAsciiStringOrClassId(reader);\n            var value = $ecf7e04a3a5ae4fa$var$readAsciiStringOrClassId(reader);\n            return \"\".concat(enumType, \".\").concat(value);\n        case 'long':\n            return (0, $5OPaf.readInt32)(reader);\n        case 'comp':\n            var low = (0, $5OPaf.readUint32)(reader);\n            var high = (0, $5OPaf.readUint32)(reader);\n            return {\n                low: low,\n                high: high\n            };\n        case 'bool':\n            return !!(0, $5OPaf.readUint8)(reader);\n        case 'type':\n        case 'GlbC':\n            return $ecf7e04a3a5ae4fa$var$readClassStructure(reader);\n        case 'alis':\n            var length_2 = (0, $5OPaf.readInt32)(reader);\n            return (0, $5OPaf.readAsciiString)(reader, length_2);\n        case 'tdta':\n            var length_3 = (0, $5OPaf.readInt32)(reader);\n            return (0, $5OPaf.readBytes)(reader, length_3);\n        case 'ObAr':\n            (0, $5OPaf.readInt32)(reader); // version: 16\n            (0, $5OPaf.readUnicodeString)(reader); // name: ''\n            $ecf7e04a3a5ae4fa$var$readAsciiStringOrClassId(reader); // 'rationalPoint'\n            var length_4 = (0, $5OPaf.readInt32)(reader);\n            var items = [];\n            for(var i = 0; i < length_4; i++){\n                var type1 = $ecf7e04a3a5ae4fa$var$readAsciiStringOrClassId(reader); // type Hrzn | Vrtc\n                (0, $5OPaf.readSignature)(reader); // UnFl\n                (0, $5OPaf.readSignature)(reader); // units ? '#Pxl'\n                var valuesCount = (0, $5OPaf.readInt32)(reader);\n                var values = [];\n                for(var j = 0; j < valuesCount; j++)values.push((0, $5OPaf.readFloat64)(reader));\n                items.push({\n                    type: type1,\n                    values: values\n                });\n            }\n            return items;\n        case 'Pth ':\n            /*const length =*/ (0, $5OPaf.readInt32)(reader); // total size of all fields below\n            var sig = (0, $5OPaf.readSignature)(reader);\n            /*const pathSize =*/ (0, $5OPaf.readInt32LE)(reader); // the same as length\n            var charsCount = (0, $5OPaf.readInt32LE)(reader);\n            var path = (0, $5OPaf.readUnicodeStringWithLengthLE)(reader, charsCount);\n            return {\n                sig: sig,\n                path: path\n            };\n        default:\n            throw new Error(\"Invalid TySh descriptor OSType: \".concat(type, \" at \").concat(reader.offset.toString(16)));\n    }\n}\nvar $ecf7e04a3a5ae4fa$var$ObArTypes = {\n    meshPoints: 'rationalPoint',\n    quiltSliceX: 'UntF',\n    quiltSliceY: 'UntF'\n};\nfunction $ecf7e04a3a5ae4fa$var$writeOSType(writer, type, value, key, extType, root) {\n    switch(type){\n        case 'obj ':\n            $ecf7e04a3a5ae4fa$var$writeReferenceStructure(writer, key, value);\n            break;\n        case 'Objc':\n        case 'GlbO':\n            if (typeof value !== 'object') throw new Error(\"Invalid struct value: \".concat(JSON.stringify(value), \", key: \").concat(key));\n            if (!extType) throw new Error(\"Missing ext type for: '\".concat(key, \"' (\").concat(JSON.stringify(value), \")\"));\n            var name_1 = value._name || extType.name;\n            var classID = value._classID || extType.classID;\n            $ecf7e04a3a5ae4fa$var$writeDescriptorStructure(writer, name_1, classID, value, root);\n            break;\n        case 'VlLs':\n            if (!Array.isArray(value)) throw new Error(\"Invalid list value: \".concat(JSON.stringify(value), \", key: \").concat(key));\n            (0, $kCSTH.writeInt32)(writer, value.length);\n            for(var i = 0; i < value.length; i++){\n                var type_1 = $ecf7e04a3a5ae4fa$var$fieldToArrayType[key];\n                (0, $kCSTH.writeSignature)(writer, type_1 || 'long');\n                $ecf7e04a3a5ae4fa$var$writeOSType(writer, type_1 || 'long', value[i], \"\".concat(key, \"[]\"), $ecf7e04a3a5ae4fa$var$fieldToArrayExtType[key], root);\n                if ($ecf7e04a3a5ae4fa$var$logErrors && !type_1) console.log(\"Missing descriptor array type for: '\".concat(key, \"' in\"), value);\n            }\n            break;\n        case 'doub':\n            if (typeof value !== 'number') throw new Error(\"Invalid number value: \".concat(JSON.stringify(value), \", key: \").concat(key));\n            (0, $kCSTH.writeFloat64)(writer, value);\n            break;\n        case 'UntF':\n            if (!$ecf7e04a3a5ae4fa$var$unitsMapRev[value.units]) throw new Error(\"Invalid units: \".concat(value.units, \" in \").concat(key));\n            (0, $kCSTH.writeSignature)(writer, $ecf7e04a3a5ae4fa$var$unitsMapRev[value.units]);\n            (0, $kCSTH.writeFloat64)(writer, value.value);\n            break;\n        case 'UnFl':\n            if (!$ecf7e04a3a5ae4fa$var$unitsMapRev[value.units]) throw new Error(\"Invalid units: \".concat(value.units, \" in \").concat(key));\n            (0, $kCSTH.writeSignature)(writer, $ecf7e04a3a5ae4fa$var$unitsMapRev[value.units]);\n            (0, $kCSTH.writeFloat32)(writer, value.value);\n            break;\n        case 'TEXT':\n            (0, $kCSTH.writeUnicodeStringWithPadding)(writer, value);\n            break;\n        case 'enum':\n            if (typeof value !== 'string') throw new Error(\"Invalid enum value: \".concat(JSON.stringify(value), \", key: \").concat(key));\n            var _a = value.split('.'), _type = _a[0], val = _a[1];\n            $ecf7e04a3a5ae4fa$var$writeAsciiStringOrClassId(writer, _type);\n            $ecf7e04a3a5ae4fa$var$writeAsciiStringOrClassId(writer, val);\n            break;\n        case 'long':\n            if (typeof value !== 'number') throw new Error(\"Invalid integer value: \".concat(JSON.stringify(value), \", key: \").concat(key));\n            (0, $kCSTH.writeInt32)(writer, value);\n            break;\n        // case 'comp': // Large Integer\n        // \twriteLargeInteger(reader);\n        case 'bool':\n            if (typeof value !== 'boolean') throw new Error(\"Invalid boolean value: \".concat(JSON.stringify(value), \", key: \").concat(key));\n            (0, $kCSTH.writeUint8)(writer, value ? 1 : 0);\n            break;\n        // case 'type': // Class\n        // case 'GlbC': // Class\n        // \twriteClassStructure(reader);\n        // case 'alis': // Alias\n        // \twriteAliasStructure(reader);\n        case 'tdta':\n            (0, $kCSTH.writeInt32)(writer, value.byteLength);\n            (0, $kCSTH.writeBytes)(writer, value);\n            break;\n        case 'ObAr':\n            (0, $kCSTH.writeInt32)(writer, 16); // version\n            (0, $kCSTH.writeUnicodeStringWithPadding)(writer, ''); // name\n            var type_2 = $ecf7e04a3a5ae4fa$var$ObArTypes[key];\n            if (!type_2) throw new Error(\"Not implemented ObArType for: \".concat(key));\n            $ecf7e04a3a5ae4fa$var$writeAsciiStringOrClassId(writer, type_2);\n            (0, $kCSTH.writeInt32)(writer, value.length);\n            for(var i = 0; i < value.length; i++){\n                $ecf7e04a3a5ae4fa$var$writeAsciiStringOrClassId(writer, value[i].type); // Hrzn | Vrtc\n                (0, $kCSTH.writeSignature)(writer, 'UnFl');\n                (0, $kCSTH.writeSignature)(writer, '#Pxl');\n                (0, $kCSTH.writeInt32)(writer, value[i].values.length);\n                for(var j = 0; j < value[i].values.length; j++)(0, $kCSTH.writeFloat64)(writer, value[i].values[j]);\n            }\n            break;\n        case 'Pth ':\n            var length_5 = 12 + value.path.length * 2;\n            (0, $kCSTH.writeInt32)(writer, length_5);\n            (0, $kCSTH.writeSignature)(writer, value.sig);\n            (0, $kCSTH.writeInt32LE)(writer, length_5);\n            (0, $kCSTH.writeInt32LE)(writer, value.path.length);\n            (0, $kCSTH.writeUnicodeStringWithoutLengthLE)(writer, value.path);\n            break;\n        default:\n            throw new Error(\"Not implemented descriptor OSType: \".concat(type));\n    }\n}\nfunction $ecf7e04a3a5ae4fa$var$readReferenceStructure(reader) {\n    var itemsCount = (0, $5OPaf.readInt32)(reader);\n    var items = [];\n    for(var i = 0; i < itemsCount; i++){\n        var type = (0, $5OPaf.readSignature)(reader);\n        switch(type){\n            case 'prop':\n                $ecf7e04a3a5ae4fa$var$readClassStructure(reader);\n                var keyID = $ecf7e04a3a5ae4fa$var$readAsciiStringOrClassId(reader);\n                items.push(keyID);\n                break;\n            case 'Clss':\n                items.push($ecf7e04a3a5ae4fa$var$readClassStructure(reader));\n                break;\n            case 'Enmr':\n                $ecf7e04a3a5ae4fa$var$readClassStructure(reader);\n                var typeID = $ecf7e04a3a5ae4fa$var$readAsciiStringOrClassId(reader);\n                var value = $ecf7e04a3a5ae4fa$var$readAsciiStringOrClassId(reader);\n                items.push(\"\".concat(typeID, \".\").concat(value));\n                break;\n            case 'rele':\n                // const { name, classID } =\n                $ecf7e04a3a5ae4fa$var$readClassStructure(reader);\n                items.push((0, $5OPaf.readUint32)(reader));\n                break;\n            case 'Idnt':\n                items.push((0, $5OPaf.readInt32)(reader));\n                break;\n            case 'indx':\n                items.push((0, $5OPaf.readInt32)(reader));\n                break;\n            case 'name':\n                $ecf7e04a3a5ae4fa$var$readClassStructure(reader);\n                items.push((0, $5OPaf.readUnicodeString)(reader));\n                break;\n            default:\n                throw new Error(\"Invalid descriptor reference type: \".concat(type));\n        }\n    }\n    return items;\n}\nfunction $ecf7e04a3a5ae4fa$var$writeReferenceStructure(writer, _key, items) {\n    (0, $kCSTH.writeInt32)(writer, items.length);\n    for(var i = 0; i < items.length; i++){\n        var value = items[i];\n        var type = 'unknown';\n        if (typeof value === 'string') {\n            if (/^[a-z ]+\\.[a-z ]+$/i.test(value)) type = 'Enmr';\n            else type = 'name';\n        }\n        (0, $kCSTH.writeSignature)(writer, type);\n        switch(type){\n            // case 'prop': // Property\n            // case 'Clss': // Class\n            case 'Enmr':\n                var _a = value.split('.'), typeID = _a[0], enumValue = _a[1];\n                $ecf7e04a3a5ae4fa$var$writeClassStructure(writer, '\\0', typeID);\n                $ecf7e04a3a5ae4fa$var$writeAsciiStringOrClassId(writer, typeID);\n                $ecf7e04a3a5ae4fa$var$writeAsciiStringOrClassId(writer, enumValue);\n                break;\n            // case 'rele': // Offset\n            // case 'Idnt': // Identifier\n            // case 'indx': // Index\n            case 'name':\n                $ecf7e04a3a5ae4fa$var$writeClassStructure(writer, '\\0', 'Lyr ');\n                (0, $kCSTH.writeUnicodeString)(writer, value + '\\0');\n                break;\n            default:\n                throw new Error(\"Invalid descriptor reference type: \".concat(type));\n        }\n    }\n    return items;\n}\nfunction $ecf7e04a3a5ae4fa$var$readClassStructure(reader) {\n    var name = (0, $5OPaf.readUnicodeString)(reader);\n    var classID = $ecf7e04a3a5ae4fa$var$readAsciiStringOrClassId(reader);\n    return {\n        name: name,\n        classID: classID\n    };\n}\nfunction $ecf7e04a3a5ae4fa$var$writeClassStructure(writer, name, classID) {\n    (0, $kCSTH.writeUnicodeString)(writer, name);\n    $ecf7e04a3a5ae4fa$var$writeAsciiStringOrClassId(writer, classID);\n}\nfunction $ecf7e04a3a5ae4fa$var$readVersionAndDescriptor(reader, includeClass) {\n    if (includeClass === void 0) includeClass = false;\n    var version = (0, $5OPaf.readUint32)(reader);\n    if (version !== 16) throw new Error(\"Invalid descriptor version: \".concat(version));\n    var desc = $ecf7e04a3a5ae4fa$var$readDescriptorStructure(reader, includeClass);\n    // console.log(require('util').inspect(desc, false, 99, true));\n    return desc;\n}\nmodule.exports.readVersionAndDescriptor = $ecf7e04a3a5ae4fa$var$readVersionAndDescriptor;\nfunction $ecf7e04a3a5ae4fa$var$writeVersionAndDescriptor(writer, name, classID, descriptor, root) {\n    if (root === void 0) root = '';\n    (0, $kCSTH.writeUint32)(writer, 16); // version\n    $ecf7e04a3a5ae4fa$var$writeDescriptorStructure(writer, name, classID, descriptor, root);\n}\nmodule.exports.writeVersionAndDescriptor = $ecf7e04a3a5ae4fa$var$writeVersionAndDescriptor;\nfunction $ecf7e04a3a5ae4fa$var$horzVrtcToXY(hv) {\n    return {\n        x: hv.Hrzn,\n        y: hv.Vrtc\n    };\n}\nmodule.exports.horzVrtcToXY = $ecf7e04a3a5ae4fa$var$horzVrtcToXY;\nfunction $ecf7e04a3a5ae4fa$var$xyToHorzVrtc(xy) {\n    return {\n        Hrzn: xy.x,\n        Vrtc: xy.y\n    };\n}\nmodule.exports.xyToHorzVrtc = $ecf7e04a3a5ae4fa$var$xyToHorzVrtc;\nfunction $ecf7e04a3a5ae4fa$var$descBoundsToBounds(desc) {\n    return {\n        top: $ecf7e04a3a5ae4fa$var$parseUnits(desc['Top ']),\n        left: $ecf7e04a3a5ae4fa$var$parseUnits(desc.Left),\n        right: $ecf7e04a3a5ae4fa$var$parseUnits(desc.Rght),\n        bottom: $ecf7e04a3a5ae4fa$var$parseUnits(desc.Btom)\n    };\n}\nmodule.exports.descBoundsToBounds = $ecf7e04a3a5ae4fa$var$descBoundsToBounds;\nfunction $ecf7e04a3a5ae4fa$var$boundsToDescBounds(bounds) {\n    var _a;\n    return _a = {\n        Left: $ecf7e04a3a5ae4fa$var$unitsValue(bounds.left, 'bounds.left')\n    }, _a['Top '] = $ecf7e04a3a5ae4fa$var$unitsValue(bounds.top, 'bounds.top'), _a.Rght = $ecf7e04a3a5ae4fa$var$unitsValue(bounds.right, 'bounds.right'), _a.Btom = $ecf7e04a3a5ae4fa$var$unitsValue(bounds.bottom, 'bounds.bottom'), _a;\n}\nmodule.exports.boundsToDescBounds = $ecf7e04a3a5ae4fa$var$boundsToDescBounds;\nfunction $ecf7e04a3a5ae4fa$var$parseFxObject(fx) {\n    var stroke = {\n        enabled: !!fx.enab,\n        position: module.exports.FStl.decode(fx.Styl),\n        fillType: module.exports.FrFl.decode(fx.PntT),\n        blendMode: module.exports.BlnM.decode(fx['Md  ']),\n        opacity: $ecf7e04a3a5ae4fa$var$parsePercent(fx.Opct),\n        size: $ecf7e04a3a5ae4fa$var$parseUnits(fx['Sz  '])\n    };\n    if (fx.present !== undefined) stroke.present = fx.present;\n    if (fx.showInDialog !== undefined) stroke.showInDialog = fx.showInDialog;\n    if (fx.overprint !== undefined) stroke.overprint = fx.overprint;\n    if (fx['Clr ']) stroke.color = $ecf7e04a3a5ae4fa$var$parseColor(fx['Clr ']);\n    if (fx.Grad) stroke.gradient = $ecf7e04a3a5ae4fa$var$parseGradientContent(fx);\n    if (fx.Ptrn) stroke.pattern = $ecf7e04a3a5ae4fa$var$parsePatternContent(fx);\n    return stroke;\n}\nfunction $ecf7e04a3a5ae4fa$var$serializeFxObject(stroke) {\n    var FrFX = {};\n    FrFX.enab = !!stroke.enabled;\n    if (stroke.present !== undefined) FrFX.present = !!stroke.present;\n    if (stroke.showInDialog !== undefined) FrFX.showInDialog = !!stroke.showInDialog;\n    FrFX.Styl = module.exports.FStl.encode(stroke.position);\n    FrFX.PntT = module.exports.FrFl.encode(stroke.fillType);\n    FrFX['Md  '] = module.exports.BlnM.encode(stroke.blendMode);\n    FrFX.Opct = $ecf7e04a3a5ae4fa$var$unitsPercent(stroke.opacity);\n    FrFX['Sz  '] = $ecf7e04a3a5ae4fa$var$unitsValue(stroke.size, 'size');\n    if (stroke.color) FrFX['Clr '] = $ecf7e04a3a5ae4fa$var$serializeColor(stroke.color);\n    if (stroke.gradient) FrFX = $ecf7e04a3a5ae4fa$var$__assign($ecf7e04a3a5ae4fa$var$__assign({}, FrFX), $ecf7e04a3a5ae4fa$var$serializeGradientContent(stroke.gradient));\n    if (stroke.pattern) FrFX = $ecf7e04a3a5ae4fa$var$__assign($ecf7e04a3a5ae4fa$var$__assign({}, FrFX), $ecf7e04a3a5ae4fa$var$serializePatternContent(stroke.pattern));\n    if (stroke.overprint !== undefined) FrFX.overprint = !!stroke.overprint;\n    return FrFX;\n}\nfunction $ecf7e04a3a5ae4fa$var$serializeEffects(e, log, multi) {\n    var _a, _b, _c;\n    var info = multi ? {\n        'Scl ': $ecf7e04a3a5ae4fa$var$unitsPercentF((_a = e.scale) !== null && _a !== void 0 ? _a : 1),\n        masterFXSwitch: !e.disabled\n    } : {\n        masterFXSwitch: !e.disabled,\n        'Scl ': $ecf7e04a3a5ae4fa$var$unitsPercentF((_b = e.scale) !== null && _b !== void 0 ? _b : 1)\n    };\n    var arrayKeys = [\n        'dropShadow',\n        'innerShadow',\n        'solidFill',\n        'gradientOverlay',\n        'stroke'\n    ];\n    for(var _i = 0, arrayKeys_1 = arrayKeys; _i < arrayKeys_1.length; _i++){\n        var key = arrayKeys_1[_i];\n        if (e[key] && !Array.isArray(e[key])) throw new Error(\"\".concat(key, \" should be an array\"));\n    }\n    var useMulti = function useMulti(arr) {\n        return !!arr && arr.length > 1 && multi;\n    };\n    var useSingle = function useSingle(arr) {\n        return !!arr && arr.length >= 1 && (!multi || arr.length === 1);\n    };\n    if (useSingle(e.dropShadow)) info.DrSh = $ecf7e04a3a5ae4fa$var$serializeEffectObject(e.dropShadow[0], 'dropShadow', log);\n    if (useMulti(e.dropShadow)) info.dropShadowMulti = e.dropShadow.map(function(i) {\n        return $ecf7e04a3a5ae4fa$var$serializeEffectObject(i, 'dropShadow', log);\n    });\n    if (useSingle(e.innerShadow)) info.IrSh = $ecf7e04a3a5ae4fa$var$serializeEffectObject(e.innerShadow[0], 'innerShadow', log);\n    if (useMulti(e.innerShadow)) info.innerShadowMulti = e.innerShadow.map(function(i) {\n        return $ecf7e04a3a5ae4fa$var$serializeEffectObject(i, 'innerShadow', log);\n    });\n    if (e.outerGlow) info.OrGl = $ecf7e04a3a5ae4fa$var$serializeEffectObject(e.outerGlow, 'outerGlow', log);\n    if (useMulti(e.solidFill)) info.solidFillMulti = e.solidFill.map(function(i) {\n        return $ecf7e04a3a5ae4fa$var$serializeEffectObject(i, 'solidFill', log);\n    });\n    if (useMulti(e.gradientOverlay)) info.gradientFillMulti = e.gradientOverlay.map(function(i) {\n        return $ecf7e04a3a5ae4fa$var$serializeEffectObject(i, 'gradientOverlay', log);\n    });\n    if (useMulti(e.stroke)) info.frameFXMulti = e.stroke.map(function(i) {\n        return $ecf7e04a3a5ae4fa$var$serializeFxObject(i);\n    });\n    if (e.innerGlow) info.IrGl = $ecf7e04a3a5ae4fa$var$serializeEffectObject(e.innerGlow, 'innerGlow', log);\n    if (e.bevel) info.ebbl = $ecf7e04a3a5ae4fa$var$serializeEffectObject(e.bevel, 'bevel', log);\n    if (useSingle(e.solidFill)) info.SoFi = $ecf7e04a3a5ae4fa$var$serializeEffectObject(e.solidFill[0], 'solidFill', log);\n    if (e.patternOverlay) info.patternFill = $ecf7e04a3a5ae4fa$var$serializeEffectObject(e.patternOverlay, 'patternOverlay', log);\n    if (useSingle(e.gradientOverlay)) info.GrFl = $ecf7e04a3a5ae4fa$var$serializeEffectObject(e.gradientOverlay[0], 'gradientOverlay', log);\n    if (e.satin) info.ChFX = $ecf7e04a3a5ae4fa$var$serializeEffectObject(e.satin, 'satin', log);\n    if (useSingle(e.stroke)) info.FrFX = $ecf7e04a3a5ae4fa$var$serializeFxObject((_c = e.stroke) === null || _c === void 0 ? void 0 : _c[0]);\n    if (multi) {\n        info.numModifyingFX = 0;\n        for(var _d = 0, _e = Object.keys(e); _d < _e.length; _d++){\n            var key = _e[_d];\n            var value = e[key];\n            if (Array.isArray(value)) for(var _f = 0, value_1 = value; _f < value_1.length; _f++){\n                var effect = value_1[_f];\n                if (effect.enabled) info.numModifyingFX++;\n            }\n            else if (value.enabled) info.numModifyingFX++;\n        }\n    }\n    return info;\n}\nmodule.exports.serializeEffects = $ecf7e04a3a5ae4fa$var$serializeEffects;\nfunction $ecf7e04a3a5ae4fa$var$parseEffects(info, log) {\n    var effects = {};\n    var masterFXSwitch = info.masterFXSwitch, DrSh = info.DrSh, dropShadowMulti = info.dropShadowMulti, IrSh = info.IrSh, innerShadowMulti = info.innerShadowMulti, OrGl = info.OrGl, IrGl = info.IrGl, ebbl = info.ebbl, SoFi = info.SoFi, solidFillMulti = info.solidFillMulti, patternFill = info.patternFill, GrFl = info.GrFl, gradientFillMulti = info.gradientFillMulti, ChFX = info.ChFX, FrFX = info.FrFX, frameFXMulti = info.frameFXMulti, numModifyingFX = info.numModifyingFX, rest = $ecf7e04a3a5ae4fa$var$__rest(info, [\n        \"masterFXSwitch\",\n        \"DrSh\",\n        \"dropShadowMulti\",\n        \"IrSh\",\n        \"innerShadowMulti\",\n        \"OrGl\",\n        \"IrGl\",\n        \"ebbl\",\n        \"SoFi\",\n        \"solidFillMulti\",\n        \"patternFill\",\n        \"GrFl\",\n        \"gradientFillMulti\",\n        \"ChFX\",\n        \"FrFX\",\n        \"frameFXMulti\",\n        \"numModifyingFX\"\n    ]);\n    if (!masterFXSwitch) effects.disabled = true;\n    if (info['Scl ']) effects.scale = $ecf7e04a3a5ae4fa$var$parsePercent(info['Scl ']);\n    if (DrSh) effects.dropShadow = [\n        $ecf7e04a3a5ae4fa$var$parseEffectObject(DrSh, log)\n    ];\n    if (dropShadowMulti) effects.dropShadow = dropShadowMulti.map(function(i) {\n        return $ecf7e04a3a5ae4fa$var$parseEffectObject(i, log);\n    });\n    if (IrSh) effects.innerShadow = [\n        $ecf7e04a3a5ae4fa$var$parseEffectObject(IrSh, log)\n    ];\n    if (innerShadowMulti) effects.innerShadow = innerShadowMulti.map(function(i) {\n        return $ecf7e04a3a5ae4fa$var$parseEffectObject(i, log);\n    });\n    if (OrGl) effects.outerGlow = $ecf7e04a3a5ae4fa$var$parseEffectObject(OrGl, log);\n    if (IrGl) effects.innerGlow = $ecf7e04a3a5ae4fa$var$parseEffectObject(IrGl, log);\n    if (ebbl) effects.bevel = $ecf7e04a3a5ae4fa$var$parseEffectObject(ebbl, log);\n    if (SoFi) effects.solidFill = [\n        $ecf7e04a3a5ae4fa$var$parseEffectObject(SoFi, log)\n    ];\n    if (solidFillMulti) effects.solidFill = solidFillMulti.map(function(i) {\n        return $ecf7e04a3a5ae4fa$var$parseEffectObject(i, log);\n    });\n    if (patternFill) effects.patternOverlay = $ecf7e04a3a5ae4fa$var$parseEffectObject(patternFill, log);\n    if (GrFl) effects.gradientOverlay = [\n        $ecf7e04a3a5ae4fa$var$parseEffectObject(GrFl, log)\n    ];\n    if (gradientFillMulti) effects.gradientOverlay = gradientFillMulti.map(function(i) {\n        return $ecf7e04a3a5ae4fa$var$parseEffectObject(i, log);\n    });\n    if (ChFX) effects.satin = $ecf7e04a3a5ae4fa$var$parseEffectObject(ChFX, log);\n    if (FrFX) effects.stroke = [\n        $ecf7e04a3a5ae4fa$var$parseFxObject(FrFX)\n    ];\n    if (frameFXMulti) effects.stroke = frameFXMulti.map(function(i) {\n        return $ecf7e04a3a5ae4fa$var$parseFxObject(i);\n    });\n    if (log && Object.keys(rest).length > 1) console.log('Unhandled effect keys:', rest);\n    return effects;\n}\nmodule.exports.parseEffects = $ecf7e04a3a5ae4fa$var$parseEffects;\nfunction $ecf7e04a3a5ae4fa$var$parseKeyList(keyList, logMissingFeatures) {\n    var keys = [];\n    for(var j = 0; j < keyList.length; j++){\n        var key = keyList[j];\n        var _a = key.time, denominator = _a.denominator, numerator = _a.numerator, selected = key.selected, animKey = key.animKey;\n        var time = {\n            numerator: numerator,\n            denominator: denominator\n        };\n        var interpolation = module.exports.animInterpStyleEnum.decode(key.animInterpStyle);\n        switch(animKey.Type){\n            case 'keyType.Opct':\n                keys.push({\n                    interpolation: interpolation,\n                    time: time,\n                    selected: selected,\n                    type: 'opacity',\n                    value: $ecf7e04a3a5ae4fa$var$parsePercent(animKey.Opct)\n                });\n                break;\n            case 'keyType.Pstn':\n                keys.push({\n                    interpolation: interpolation,\n                    time: time,\n                    selected: selected,\n                    type: 'position',\n                    x: animKey.Hrzn,\n                    y: animKey.Vrtc\n                });\n                break;\n            case 'keyType.Trnf':\n                keys.push({\n                    interpolation: interpolation,\n                    time: time,\n                    selected: selected,\n                    type: 'transform',\n                    scale: $ecf7e04a3a5ae4fa$var$horzVrtcToXY(animKey['Scl ']),\n                    skew: $ecf7e04a3a5ae4fa$var$horzVrtcToXY(animKey.Skew),\n                    rotation: animKey.rotation,\n                    translation: $ecf7e04a3a5ae4fa$var$horzVrtcToXY(animKey.translation)\n                });\n                break;\n            case 'keyType.sheetStyle':\n                var key_1 = {\n                    interpolation: interpolation,\n                    time: time,\n                    selected: selected,\n                    type: 'style'\n                };\n                if (animKey.sheetStyle.Lefx) key_1.style = $ecf7e04a3a5ae4fa$var$parseEffects(animKey.sheetStyle.Lefx, logMissingFeatures);\n                keys.push(key_1);\n                break;\n            case 'keyType.globalLighting':\n                keys.push({\n                    interpolation: interpolation,\n                    time: time,\n                    selected: selected,\n                    type: 'globalLighting',\n                    globalAngle: animKey.gblA,\n                    globalAltitude: animKey.globalAltitude\n                });\n                break;\n            default:\n                throw new Error(\"Unsupported keyType value\");\n        }\n    }\n    return keys;\n}\nfunction $ecf7e04a3a5ae4fa$var$serializeKeyList(keys) {\n    var keyList = [];\n    for(var j = 0; j < keys.length; j++){\n        var key = keys[j];\n        var time = key.time, _a = key.selected, selected = _a === void 0 ? false : _a, interpolation = key.interpolation;\n        var animInterpStyle = module.exports.animInterpStyleEnum.encode(interpolation);\n        var animKey = void 0;\n        switch(key.type){\n            case 'opacity':\n                animKey = {\n                    Type: 'keyType.Opct',\n                    Opct: $ecf7e04a3a5ae4fa$var$unitsPercent(key.value)\n                };\n                break;\n            case 'position':\n                animKey = {\n                    Type: 'keyType.Pstn',\n                    Hrzn: key.x,\n                    Vrtc: key.y\n                };\n                break;\n            case 'transform':\n                animKey = {\n                    Type: 'keyType.Trnf',\n                    'Scl ': $ecf7e04a3a5ae4fa$var$xyToHorzVrtc(key.scale),\n                    Skew: $ecf7e04a3a5ae4fa$var$xyToHorzVrtc(key.skew),\n                    rotation: key.rotation,\n                    translation: $ecf7e04a3a5ae4fa$var$xyToHorzVrtc(key.translation)\n                };\n                break;\n            case 'style':\n                animKey = {\n                    Type: 'keyType.sheetStyle',\n                    sheetStyle: {\n                        Vrsn: 1,\n                        blendOptions: {}\n                    }\n                };\n                if (key.style) animKey.sheetStyle = {\n                    Vrsn: 1,\n                    Lefx: $ecf7e04a3a5ae4fa$var$serializeEffects(key.style, false, false),\n                    blendOptions: {}\n                };\n                break;\n            case 'globalLighting':\n                animKey = {\n                    Type: 'keyType.globalLighting',\n                    gblA: key.globalAngle,\n                    globalAltitude: key.globalAltitude\n                };\n                break;\n            default:\n                throw new Error(\"Unsupported keyType value\");\n        }\n        keyList.push({\n            Vrsn: 1,\n            animInterpStyle: animInterpStyle,\n            time: time,\n            animKey: animKey,\n            selected: selected\n        });\n    }\n    return keyList;\n}\nfunction $ecf7e04a3a5ae4fa$var$parseTrackList(trackList, logMissingFeatures) {\n    var tracks = [];\n    for(var i = 0; i < trackList.length; i++){\n        var tr = trackList[i];\n        var track = {\n            type: module.exports.stdTrackID.decode(tr.trackID),\n            enabled: tr.enab,\n            keys: $ecf7e04a3a5ae4fa$var$parseKeyList(tr.keyList, logMissingFeatures)\n        };\n        if (tr.effectParams) track.effectParams = {\n            fillCanvas: tr.effectParams.fillCanvas,\n            zoomOrigin: tr.effectParams.zoomOrigin,\n            keys: $ecf7e04a3a5ae4fa$var$parseKeyList(tr.effectParams.keyList, logMissingFeatures)\n        };\n        tracks.push(track);\n    }\n    return tracks;\n}\nmodule.exports.parseTrackList = $ecf7e04a3a5ae4fa$var$parseTrackList;\nfunction $ecf7e04a3a5ae4fa$var$serializeTrackList(tracks) {\n    var trackList = [];\n    for(var i = 0; i < tracks.length; i++){\n        var t = tracks[i];\n        trackList.push($ecf7e04a3a5ae4fa$var$__assign($ecf7e04a3a5ae4fa$var$__assign({\n            trackID: module.exports.stdTrackID.encode(t.type),\n            Vrsn: 1,\n            enab: !!t.enabled,\n            Effc: !!t.effectParams\n        }, t.effectParams ? {\n            effectParams: {\n                keyList: $ecf7e04a3a5ae4fa$var$serializeKeyList(t.keys),\n                fillCanvas: t.effectParams.fillCanvas,\n                zoomOrigin: t.effectParams.zoomOrigin\n            }\n        } : {}), {\n            keyList: $ecf7e04a3a5ae4fa$var$serializeKeyList(t.keys)\n        }));\n    }\n    return trackList;\n}\nmodule.exports.serializeTrackList = $ecf7e04a3a5ae4fa$var$serializeTrackList;\nfunction $ecf7e04a3a5ae4fa$var$parseEffectObject(obj, reportErrors) {\n    var result = {};\n    for(var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++){\n        var key = _a[_i];\n        var val = obj[key];\n        switch(key){\n            case 'enab':\n                result.enabled = !!val;\n                break;\n            case 'uglg':\n                result.useGlobalLight = !!val;\n                break;\n            case 'AntA':\n                result.antialiased = !!val;\n                break;\n            case 'Algn':\n                result.align = !!val;\n                break;\n            case 'Dthr':\n                result.dither = !!val;\n                break;\n            case 'Invr':\n                result.invert = !!val;\n                break;\n            case 'Rvrs':\n                result.reverse = !!val;\n                break;\n            case 'Clr ':\n                result.color = $ecf7e04a3a5ae4fa$var$parseColor(val);\n                break;\n            case 'hglC':\n                result.highlightColor = $ecf7e04a3a5ae4fa$var$parseColor(val);\n                break;\n            case 'sdwC':\n                result.shadowColor = $ecf7e04a3a5ae4fa$var$parseColor(val);\n                break;\n            case 'Styl':\n                result.position = module.exports.FStl.decode(val);\n                break;\n            case 'Md  ':\n                result.blendMode = module.exports.BlnM.decode(val);\n                break;\n            case 'hglM':\n                result.highlightBlendMode = module.exports.BlnM.decode(val);\n                break;\n            case 'sdwM':\n                result.shadowBlendMode = module.exports.BlnM.decode(val);\n                break;\n            case 'bvlS':\n                result.style = module.exports.BESl.decode(val);\n                break;\n            case 'bvlD':\n                result.direction = module.exports.BESs.decode(val);\n                break;\n            case 'bvlT':\n                result.technique = module.exports.bvlT.decode(val);\n                break;\n            case 'GlwT':\n                result.technique = module.exports.BETE.decode(val);\n                break;\n            case 'glwS':\n                result.source = module.exports.IGSr.decode(val);\n                break;\n            case 'Type':\n                result.type = module.exports.GrdT.decode(val);\n                break;\n            case 'gs99':\n                result.interpolationMethod = module.exports.gradientInterpolationMethodType.decode(val);\n                break;\n            case 'Opct':\n                result.opacity = $ecf7e04a3a5ae4fa$var$parsePercent(val);\n                break;\n            case 'hglO':\n                result.highlightOpacity = $ecf7e04a3a5ae4fa$var$parsePercent(val);\n                break;\n            case 'sdwO':\n                result.shadowOpacity = $ecf7e04a3a5ae4fa$var$parsePercent(val);\n                break;\n            case 'lagl':\n                result.angle = $ecf7e04a3a5ae4fa$var$parseAngle(val);\n                break;\n            case 'Angl':\n                result.angle = $ecf7e04a3a5ae4fa$var$parseAngle(val);\n                break;\n            case 'Lald':\n                result.altitude = $ecf7e04a3a5ae4fa$var$parseAngle(val);\n                break;\n            case 'Sftn':\n                result.soften = $ecf7e04a3a5ae4fa$var$parseUnits(val);\n                break;\n            case 'srgR':\n                result.strength = $ecf7e04a3a5ae4fa$var$parsePercent(val);\n                break;\n            case 'blur':\n                result.size = $ecf7e04a3a5ae4fa$var$parseUnits(val);\n                break;\n            case 'Nose':\n                result.noise = $ecf7e04a3a5ae4fa$var$parsePercent(val);\n                break;\n            case 'Inpr':\n                result.range = $ecf7e04a3a5ae4fa$var$parsePercent(val);\n                break;\n            case 'Ckmt':\n                result.choke = $ecf7e04a3a5ae4fa$var$parseUnits(val);\n                break;\n            case 'ShdN':\n                result.jitter = $ecf7e04a3a5ae4fa$var$parsePercent(val);\n                break;\n            case 'Dstn':\n                result.distance = $ecf7e04a3a5ae4fa$var$parseUnits(val);\n                break;\n            case 'Scl ':\n                result.scale = $ecf7e04a3a5ae4fa$var$parsePercent(val);\n                break;\n            case 'Ptrn':\n                result.pattern = {\n                    name: val['Nm  '],\n                    id: val.Idnt\n                };\n                break;\n            case 'phase':\n                result.phase = {\n                    x: val.Hrzn,\n                    y: val.Vrtc\n                };\n                break;\n            case 'Ofst':\n                result.offset = {\n                    x: $ecf7e04a3a5ae4fa$var$parsePercent(val.Hrzn),\n                    y: $ecf7e04a3a5ae4fa$var$parsePercent(val.Vrtc)\n                };\n                break;\n            case 'MpgS':\n            case 'TrnS':\n                result.contour = {\n                    name: val['Nm  '],\n                    curve: val['Crv '].map(function(p) {\n                        return {\n                            x: p.Hrzn,\n                            y: p.Vrtc\n                        };\n                    })\n                };\n                break;\n            case 'Grad':\n                result.gradient = $ecf7e04a3a5ae4fa$var$parseGradient(val);\n                break;\n            case 'useTexture':\n            case 'useShape':\n            case 'layerConceals':\n            case 'present':\n            case 'showInDialog':\n            case 'antialiasGloss':\n                result[key] = val;\n                break;\n            case '_name':\n            case '_classID':\n                break;\n            default:\n                reportErrors && console.log(\"Invalid effect key: '\".concat(key, \"', value:\"), val);\n        }\n    }\n    return result;\n}\nfunction $ecf7e04a3a5ae4fa$var$serializeEffectObject(obj, objName, reportErrors) {\n    var result = {};\n    for(var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++){\n        var objKey = _a[_i];\n        var key = objKey;\n        var val = obj[key];\n        switch(key){\n            case 'enabled':\n                result.enab = !!val;\n                break;\n            case 'useGlobalLight':\n                result.uglg = !!val;\n                break;\n            case 'antialiased':\n                result.AntA = !!val;\n                break;\n            case 'align':\n                result.Algn = !!val;\n                break;\n            case 'dither':\n                result.Dthr = !!val;\n                break;\n            case 'invert':\n                result.Invr = !!val;\n                break;\n            case 'reverse':\n                result.Rvrs = !!val;\n                break;\n            case 'color':\n                result['Clr '] = $ecf7e04a3a5ae4fa$var$serializeColor(val);\n                break;\n            case 'highlightColor':\n                result.hglC = $ecf7e04a3a5ae4fa$var$serializeColor(val);\n                break;\n            case 'shadowColor':\n                result.sdwC = $ecf7e04a3a5ae4fa$var$serializeColor(val);\n                break;\n            case 'position':\n                result.Styl = module.exports.FStl.encode(val);\n                break;\n            case 'blendMode':\n                result['Md  '] = module.exports.BlnM.encode(val);\n                break;\n            case 'highlightBlendMode':\n                result.hglM = module.exports.BlnM.encode(val);\n                break;\n            case 'shadowBlendMode':\n                result.sdwM = module.exports.BlnM.encode(val);\n                break;\n            case 'style':\n                result.bvlS = module.exports.BESl.encode(val);\n                break;\n            case 'direction':\n                result.bvlD = module.exports.BESs.encode(val);\n                break;\n            case 'technique':\n                if (objName === 'bevel') result.bvlT = module.exports.bvlT.encode(val);\n                else result.GlwT = module.exports.BETE.encode(val);\n                break;\n            case 'source':\n                result.glwS = module.exports.IGSr.encode(val);\n                break;\n            case 'type':\n                result.Type = module.exports.GrdT.encode(val);\n                break;\n            case 'interpolationMethod':\n                result.gs99 = module.exports.gradientInterpolationMethodType.encode(val);\n                break;\n            case 'opacity':\n                result.Opct = $ecf7e04a3a5ae4fa$var$unitsPercent(val);\n                break;\n            case 'highlightOpacity':\n                result.hglO = $ecf7e04a3a5ae4fa$var$unitsPercent(val);\n                break;\n            case 'shadowOpacity':\n                result.sdwO = $ecf7e04a3a5ae4fa$var$unitsPercent(val);\n                break;\n            case 'angle':\n                if (objName === 'gradientOverlay' || objName === 'patternFill') result.Angl = $ecf7e04a3a5ae4fa$var$unitsAngle(val);\n                else result.lagl = $ecf7e04a3a5ae4fa$var$unitsAngle(val);\n                break;\n            case 'altitude':\n                result.Lald = $ecf7e04a3a5ae4fa$var$unitsAngle(val);\n                break;\n            case 'soften':\n                result.Sftn = $ecf7e04a3a5ae4fa$var$unitsValue(val, key);\n                break;\n            case 'strength':\n                result.srgR = $ecf7e04a3a5ae4fa$var$unitsPercent(val);\n                break;\n            case 'size':\n                result.blur = $ecf7e04a3a5ae4fa$var$unitsValue(val, key);\n                break;\n            case 'noise':\n                result.Nose = $ecf7e04a3a5ae4fa$var$unitsPercent(val);\n                break;\n            case 'range':\n                result.Inpr = $ecf7e04a3a5ae4fa$var$unitsPercent(val);\n                break;\n            case 'choke':\n                result.Ckmt = $ecf7e04a3a5ae4fa$var$unitsValue(val, key);\n                break;\n            case 'jitter':\n                result.ShdN = $ecf7e04a3a5ae4fa$var$unitsPercent(val);\n                break;\n            case 'distance':\n                result.Dstn = $ecf7e04a3a5ae4fa$var$unitsValue(val, key);\n                break;\n            case 'scale':\n                result['Scl '] = $ecf7e04a3a5ae4fa$var$unitsPercent(val);\n                break;\n            case 'pattern':\n                result.Ptrn = {\n                    'Nm  ': val.name,\n                    Idnt: val.id\n                };\n                break;\n            case 'phase':\n                result.phase = {\n                    Hrzn: val.x,\n                    Vrtc: val.y\n                };\n                break;\n            case 'offset':\n                result.Ofst = {\n                    Hrzn: $ecf7e04a3a5ae4fa$var$unitsPercent(val.x),\n                    Vrtc: $ecf7e04a3a5ae4fa$var$unitsPercent(val.y)\n                };\n                break;\n            case 'contour':\n                result[objName === 'satin' ? 'MpgS' : 'TrnS'] = {\n                    'Nm  ': val.name,\n                    'Crv ': val.curve.map(function(p) {\n                        return {\n                            Hrzn: p.x,\n                            Vrtc: p.y\n                        };\n                    })\n                };\n                break;\n            case 'gradient':\n                result.Grad = $ecf7e04a3a5ae4fa$var$serializeGradient(val);\n                break;\n            case 'useTexture':\n            case 'useShape':\n            case 'layerConceals':\n            case 'present':\n            case 'showInDialog':\n            case 'antialiasGloss':\n                result[key] = val;\n                break;\n            default:\n                reportErrors && console.log(\"Invalid effect key: '\".concat(key, \"', value:\"), val);\n        }\n    }\n    return result;\n}\nfunction $ecf7e04a3a5ae4fa$var$parseGradient(grad) {\n    if (grad.GrdF === 'GrdF.CstS') {\n        var samples_1 = grad.Intr || 4096;\n        return {\n            type: 'solid',\n            name: grad['Nm  '],\n            smoothness: grad.Intr / 4096,\n            colorStops: grad.Clrs.map(function(s) {\n                return {\n                    color: $ecf7e04a3a5ae4fa$var$parseColor(s['Clr ']),\n                    location: s.Lctn / samples_1,\n                    midpoint: s.Mdpn / 100\n                };\n            }),\n            opacityStops: grad.Trns.map(function(s) {\n                return {\n                    opacity: $ecf7e04a3a5ae4fa$var$parsePercent(s.Opct),\n                    location: s.Lctn / samples_1,\n                    midpoint: s.Mdpn / 100\n                };\n            })\n        };\n    } else return {\n        type: 'noise',\n        name: grad['Nm  '],\n        roughness: grad.Smth / 4096,\n        colorModel: module.exports.ClrS.decode(grad.ClrS),\n        randomSeed: grad.RndS,\n        restrictColors: !!grad.VctC,\n        addTransparency: !!grad.ShTr,\n        min: grad['Mnm '].map(function(x) {\n            return x / 100;\n        }),\n        max: grad['Mxm '].map(function(x) {\n            return x / 100;\n        })\n    };\n}\nfunction $ecf7e04a3a5ae4fa$var$serializeGradient(grad) {\n    var _a, _b;\n    if (grad.type === 'solid') {\n        var samples_2 = Math.round(((_a = grad.smoothness) !== null && _a !== void 0 ? _a : 1) * 4096);\n        return {\n            'Nm  ': grad.name || '',\n            GrdF: 'GrdF.CstS',\n            Intr: samples_2,\n            Clrs: grad.colorStops.map(function(s) {\n                var _a;\n                return {\n                    'Clr ': $ecf7e04a3a5ae4fa$var$serializeColor(s.color),\n                    Type: 'Clry.UsrS',\n                    Lctn: Math.round(s.location * samples_2),\n                    Mdpn: Math.round(((_a = s.midpoint) !== null && _a !== void 0 ? _a : 0.5) * 100)\n                };\n            }),\n            Trns: grad.opacityStops.map(function(s) {\n                var _a;\n                return {\n                    Opct: $ecf7e04a3a5ae4fa$var$unitsPercent(s.opacity),\n                    Lctn: Math.round(s.location * samples_2),\n                    Mdpn: Math.round(((_a = s.midpoint) !== null && _a !== void 0 ? _a : 0.5) * 100)\n                };\n            })\n        };\n    } else return {\n        GrdF: 'GrdF.ClNs',\n        'Nm  ': grad.name || '',\n        ShTr: !!grad.addTransparency,\n        VctC: !!grad.restrictColors,\n        ClrS: module.exports.ClrS.encode(grad.colorModel),\n        RndS: grad.randomSeed || 0,\n        Smth: Math.round(((_b = grad.roughness) !== null && _b !== void 0 ? _b : 1) * 4096),\n        'Mnm ': (grad.min || [\n            0,\n            0,\n            0,\n            0\n        ]).map(function(x) {\n            return x * 100;\n        }),\n        'Mxm ': (grad.max || [\n            1,\n            1,\n            1,\n            1\n        ]).map(function(x) {\n            return x * 100;\n        })\n    };\n}\nfunction $ecf7e04a3a5ae4fa$var$parseGradientContent(descriptor) {\n    var result = $ecf7e04a3a5ae4fa$var$parseGradient(descriptor.Grad);\n    result.style = module.exports.GrdT.decode(descriptor.Type);\n    if (descriptor.Dthr !== undefined) result.dither = descriptor.Dthr;\n    if (descriptor.gradientsInterpolationMethod !== undefined) result.interpolationMethod = module.exports.gradientInterpolationMethodType.decode(descriptor.gradientsInterpolationMethod);\n    if (descriptor.Rvrs !== undefined) result.reverse = descriptor.Rvrs;\n    if (descriptor.Angl !== undefined) result.angle = $ecf7e04a3a5ae4fa$var$parseAngle(descriptor.Angl);\n    if (descriptor['Scl '] !== undefined) result.scale = $ecf7e04a3a5ae4fa$var$parsePercent(descriptor['Scl ']);\n    if (descriptor.Algn !== undefined) result.align = descriptor.Algn;\n    if (descriptor.Ofst !== undefined) result.offset = {\n        x: $ecf7e04a3a5ae4fa$var$parsePercent(descriptor.Ofst.Hrzn),\n        y: $ecf7e04a3a5ae4fa$var$parsePercent(descriptor.Ofst.Vrtc)\n    };\n    return result;\n}\nfunction $ecf7e04a3a5ae4fa$var$parsePatternContent(descriptor) {\n    var result = {\n        name: descriptor.Ptrn['Nm  '],\n        id: descriptor.Ptrn.Idnt\n    };\n    if (descriptor.Lnkd !== undefined) result.linked = descriptor.Lnkd;\n    if (descriptor.phase !== undefined) result.phase = {\n        x: descriptor.phase.Hrzn,\n        y: descriptor.phase.Vrtc\n    };\n    return result;\n}\nfunction $ecf7e04a3a5ae4fa$var$parseVectorContent(descriptor) {\n    if ('Grad' in descriptor) return $ecf7e04a3a5ae4fa$var$parseGradientContent(descriptor);\n    else if ('Ptrn' in descriptor) return $ecf7e04a3a5ae4fa$var$__assign({\n        type: 'pattern'\n    }, $ecf7e04a3a5ae4fa$var$parsePatternContent(descriptor));\n    else if ('Clr ' in descriptor) return {\n        type: 'color',\n        color: $ecf7e04a3a5ae4fa$var$parseColor(descriptor['Clr '])\n    };\n    else throw new Error('Invalid vector content');\n}\nmodule.exports.parseVectorContent = $ecf7e04a3a5ae4fa$var$parseVectorContent;\nfunction $ecf7e04a3a5ae4fa$var$serializeGradientContent(content) {\n    var result = {};\n    if (content.dither !== undefined) result.Dthr = content.dither;\n    if (content.interpolationMethod !== undefined) result.gradientsInterpolationMethod = module.exports.gradientInterpolationMethodType.encode(content.interpolationMethod);\n    if (content.reverse !== undefined) result.Rvrs = content.reverse;\n    if (content.angle !== undefined) result.Angl = $ecf7e04a3a5ae4fa$var$unitsAngle(content.angle);\n    result.Type = module.exports.GrdT.encode(content.style);\n    if (content.align !== undefined) result.Algn = content.align;\n    if (content.scale !== undefined) result['Scl '] = $ecf7e04a3a5ae4fa$var$unitsPercent(content.scale);\n    if (content.offset) result.Ofst = {\n        Hrzn: $ecf7e04a3a5ae4fa$var$unitsPercent(content.offset.x),\n        Vrtc: $ecf7e04a3a5ae4fa$var$unitsPercent(content.offset.y)\n    };\n    result.Grad = $ecf7e04a3a5ae4fa$var$serializeGradient(content);\n    return result;\n}\nfunction $ecf7e04a3a5ae4fa$var$serializePatternContent(content) {\n    var result = {\n        Ptrn: {\n            'Nm  ': content.name || '',\n            Idnt: content.id || ''\n        }\n    };\n    if (content.linked !== undefined) result.Lnkd = !!content.linked;\n    if (content.phase !== undefined) result.phase = {\n        Hrzn: content.phase.x,\n        Vrtc: content.phase.y\n    };\n    return result;\n}\nfunction $ecf7e04a3a5ae4fa$var$serializeVectorContent(content) {\n    if (content.type === 'color') return {\n        key: 'SoCo',\n        descriptor: {\n            'Clr ': $ecf7e04a3a5ae4fa$var$serializeColor(content.color)\n        }\n    };\n    else if (content.type === 'pattern') return {\n        key: 'PtFl',\n        descriptor: $ecf7e04a3a5ae4fa$var$serializePatternContent(content)\n    };\n    else return {\n        key: 'GdFl',\n        descriptor: $ecf7e04a3a5ae4fa$var$serializeGradientContent(content)\n    };\n}\nmodule.exports.serializeVectorContent = $ecf7e04a3a5ae4fa$var$serializeVectorContent;\nfunction $ecf7e04a3a5ae4fa$var$parseColor(color) {\n    if ('H   ' in color) return {\n        h: $ecf7e04a3a5ae4fa$var$parsePercentOrAngle(color['H   ']),\n        s: color.Strt,\n        b: color.Brgh\n    };\n    else if ('Rd  ' in color) return {\n        r: color['Rd  '],\n        g: color['Grn '],\n        b: color['Bl  ']\n    };\n    else if ('Cyn ' in color) return {\n        c: color['Cyn '],\n        m: color.Mgnt,\n        y: color['Ylw '],\n        k: color.Blck\n    };\n    else if ('Gry ' in color) return {\n        k: color['Gry ']\n    };\n    else if ('Lmnc' in color) return {\n        l: color.Lmnc,\n        a: color['A   '],\n        b: color['B   ']\n    };\n    else if ('redFloat' in color) return {\n        fr: color.redFloat,\n        fg: color.greenFloat,\n        fb: color.blueFloat\n    };\n    else throw new Error('Unsupported color descriptor');\n}\nmodule.exports.parseColor = $ecf7e04a3a5ae4fa$var$parseColor;\nfunction $ecf7e04a3a5ae4fa$var$serializeColor(color) {\n    if (!color) return {\n        _name: '',\n        _classID: 'RGBC',\n        'Rd  ': 0,\n        'Grn ': 0,\n        'Bl  ': 0\n    };\n    else if ('r' in color) return {\n        _name: '',\n        _classID: 'RGBC',\n        'Rd  ': color.r || 0,\n        'Grn ': color.g || 0,\n        'Bl  ': color.b || 0\n    };\n    else if ('fr' in color) return {\n        _name: '',\n        _classID: 'RGBC',\n        redFloat: color.fr,\n        greenFloat: color.fg,\n        blueFloat: color.fb\n    };\n    else if ('h' in color) return {\n        _name: '',\n        _classID: 'HSBC',\n        'H   ': $ecf7e04a3a5ae4fa$var$unitsAngle(color.h * 360),\n        Strt: color.s || 0,\n        Brgh: color.b || 0\n    };\n    else if ('c' in color) return {\n        _name: '',\n        _classID: 'CMYC',\n        'Cyn ': color.c || 0,\n        Mgnt: color.m || 0,\n        'Ylw ': color.y || 0,\n        Blck: color.k || 0\n    };\n    else if ('l' in color) return {\n        _name: '',\n        _classID: 'LABC',\n        Lmnc: color.l || 0,\n        'A   ': color.a || 0,\n        'B   ': color.b || 0\n    };\n    else if ('k' in color) return {\n        _name: '',\n        _classID: 'GRYC',\n        'Gry ': color.k\n    };\n    else throw new Error('Invalid color value');\n}\nmodule.exports.serializeColor = $ecf7e04a3a5ae4fa$var$serializeColor;\nfunction $ecf7e04a3a5ae4fa$var$parseAngle(x) {\n    if (x === undefined) return 0;\n    if (x.units !== 'Angle') throw new Error(\"Invalid units: \".concat(x.units));\n    return x.value;\n}\nmodule.exports.parseAngle = $ecf7e04a3a5ae4fa$var$parseAngle;\nfunction $ecf7e04a3a5ae4fa$var$parsePercent(x) {\n    if (x === undefined) return 1;\n    if (x.units !== 'Percent') throw new Error(\"Invalid units: \".concat(x.units));\n    return x.value / 100;\n}\nmodule.exports.parsePercent = $ecf7e04a3a5ae4fa$var$parsePercent;\nfunction $ecf7e04a3a5ae4fa$var$parsePercentOrAngle(x) {\n    if (x === undefined) return 1;\n    if (x.units === 'Percent') return x.value / 100;\n    if (x.units === 'Angle') return x.value / 360;\n    throw new Error(\"Invalid units: \".concat(x.units));\n}\nmodule.exports.parsePercentOrAngle = $ecf7e04a3a5ae4fa$var$parsePercentOrAngle;\nfunction $ecf7e04a3a5ae4fa$var$parseUnits(_a) {\n    var units = _a.units, value = _a.value;\n    if (units !== 'Pixels' && units !== 'Millimeters' && units !== 'Points' && units !== 'None' && units !== 'Picas' && units !== 'Inches' && units !== 'Centimeters' && units !== 'Density') throw new Error(\"Invalid units: \".concat(JSON.stringify({\n        units: units,\n        value: value\n    })));\n    return {\n        value: value,\n        units: units\n    };\n}\nmodule.exports.parseUnits = $ecf7e04a3a5ae4fa$var$parseUnits;\nfunction $ecf7e04a3a5ae4fa$var$parseUnitsOrNumber(value, units) {\n    if (units === void 0) units = 'Pixels';\n    if (typeof value === 'number') return {\n        value: value,\n        units: units\n    };\n    return $ecf7e04a3a5ae4fa$var$parseUnits(value);\n}\nmodule.exports.parseUnitsOrNumber = $ecf7e04a3a5ae4fa$var$parseUnitsOrNumber;\nfunction $ecf7e04a3a5ae4fa$var$parseUnitsToNumber(_a, expectedUnits) {\n    var units = _a.units, value = _a.value;\n    if (units !== expectedUnits) throw new Error(\"Invalid units: \".concat(JSON.stringify({\n        units: units,\n        value: value\n    })));\n    return value;\n}\nmodule.exports.parseUnitsToNumber = $ecf7e04a3a5ae4fa$var$parseUnitsToNumber;\nfunction $ecf7e04a3a5ae4fa$var$unitsAngle(value) {\n    return {\n        units: 'Angle',\n        value: value || 0\n    };\n}\nmodule.exports.unitsAngle = $ecf7e04a3a5ae4fa$var$unitsAngle;\nfunction $ecf7e04a3a5ae4fa$var$unitsPercent(value) {\n    return {\n        units: 'Percent',\n        value: Math.round((value || 0) * 100)\n    };\n}\nmodule.exports.unitsPercent = $ecf7e04a3a5ae4fa$var$unitsPercent;\nfunction $ecf7e04a3a5ae4fa$var$unitsPercentF(value) {\n    return {\n        units: 'Percent',\n        value: (value || 0) * 100\n    };\n}\nmodule.exports.unitsPercentF = $ecf7e04a3a5ae4fa$var$unitsPercentF;\nfunction $ecf7e04a3a5ae4fa$var$unitsValue(x, key) {\n    if (x == null) return {\n        units: 'Pixels',\n        value: 0\n    };\n    if (typeof x !== 'object') throw new Error(\"Invalid value: \".concat(JSON.stringify(x), \" (key: \").concat(key, \") (should have value and units)\"));\n    var units = x.units, value = x.value;\n    if (typeof value !== 'number') throw new Error(\"Invalid value in \".concat(JSON.stringify(x), \" (key: \").concat(key, \")\"));\n    if (units !== 'Pixels' && units !== 'Millimeters' && units !== 'Points' && units !== 'None' && units !== 'Picas' && units !== 'Inches' && units !== 'Centimeters' && units !== 'Density') throw new Error(\"Invalid units in \".concat(JSON.stringify(x), \" (key: \").concat(key, \")\"));\n    return {\n        units: units,\n        value: value\n    };\n}\nmodule.exports.unitsValue = $ecf7e04a3a5ae4fa$var$unitsValue;\nfunction $ecf7e04a3a5ae4fa$var$frac(_a) {\n    var numerator = _a.numerator, denominator = _a.denominator;\n    return {\n        numerator: numerator,\n        denominator: denominator\n    };\n}\nmodule.exports.frac = $ecf7e04a3a5ae4fa$var$frac;\nmodule.exports.textGridding = (0, $jE67M.createEnum)('textGridding', 'none', {\n    none: 'None',\n    round: 'Rnd '\n});\nmodule.exports.Ornt = (0, $jE67M.createEnum)('Ornt', 'horizontal', {\n    horizontal: 'Hrzn',\n    vertical: 'Vrtc'\n});\nmodule.exports.Annt = (0, $jE67M.createEnum)('Annt', 'sharp', {\n    none: 'Anno',\n    sharp: 'antiAliasSharp',\n    crisp: 'AnCr',\n    strong: 'AnSt',\n    smooth: 'AnSm',\n    platform: 'antiAliasPlatformGray',\n    platformLCD: 'antiAliasPlatformLCD'\n});\nmodule.exports.warpStyle = (0, $jE67M.createEnum)('warpStyle', 'none', {\n    none: 'warpNone',\n    arc: 'warpArc',\n    arcLower: 'warpArcLower',\n    arcUpper: 'warpArcUpper',\n    arch: 'warpArch',\n    bulge: 'warpBulge',\n    shellLower: 'warpShellLower',\n    shellUpper: 'warpShellUpper',\n    flag: 'warpFlag',\n    wave: 'warpWave',\n    fish: 'warpFish',\n    rise: 'warpRise',\n    fisheye: 'warpFisheye',\n    inflate: 'warpInflate',\n    squeeze: 'warpSqueeze',\n    twist: 'warpTwist',\n    cylinder: 'warpCylinder',\n    custom: 'warpCustom'\n});\nmodule.exports.BlnM = (0, $jE67M.createEnum)('BlnM', 'normal', {\n    'normal': 'Nrml',\n    'dissolve': 'Dslv',\n    'darken': 'Drkn',\n    'multiply': 'Mltp',\n    'color burn': 'CBrn',\n    'linear burn': 'linearBurn',\n    'darker color': 'darkerColor',\n    'lighten': 'Lghn',\n    'screen': 'Scrn',\n    'color dodge': 'CDdg',\n    'linear dodge': 'linearDodge',\n    'lighter color': 'lighterColor',\n    'overlay': 'Ovrl',\n    'soft light': 'SftL',\n    'hard light': 'HrdL',\n    'vivid light': 'vividLight',\n    'linear light': 'linearLight',\n    'pin light': 'pinLight',\n    'hard mix': 'hardMix',\n    'difference': 'Dfrn',\n    'exclusion': 'Xclu',\n    'subtract': 'blendSubtraction',\n    'divide': 'blendDivide',\n    'hue': 'H   ',\n    'saturation': 'Strt',\n    'color': 'Clr ',\n    'luminosity': 'Lmns',\n    // used in ABR\n    'linear height': 'linearHeight',\n    'height': 'Hght',\n    'subtraction': 'Sbtr'\n});\nmodule.exports.BESl = (0, $jE67M.createEnum)('BESl', 'inner bevel', {\n    'inner bevel': 'InrB',\n    'outer bevel': 'OtrB',\n    'emboss': 'Embs',\n    'pillow emboss': 'PlEb',\n    'stroke emboss': 'strokeEmboss'\n});\nmodule.exports.bvlT = (0, $jE67M.createEnum)('bvlT', 'smooth', {\n    'smooth': 'SfBL',\n    'chisel hard': 'PrBL',\n    'chisel soft': 'Slmt'\n});\nmodule.exports.BESs = (0, $jE67M.createEnum)('BESs', 'up', {\n    up: 'In  ',\n    down: 'Out '\n});\nmodule.exports.BETE = (0, $jE67M.createEnum)('BETE', 'softer', {\n    softer: 'SfBL',\n    precise: 'PrBL'\n});\nmodule.exports.IGSr = (0, $jE67M.createEnum)('IGSr', 'edge', {\n    edge: 'SrcE',\n    center: 'SrcC'\n});\nmodule.exports.GrdT = (0, $jE67M.createEnum)('GrdT', 'linear', {\n    linear: 'Lnr ',\n    radial: 'Rdl ',\n    angle: 'Angl',\n    reflected: 'Rflc',\n    diamond: 'Dmnd'\n});\nmodule.exports.animInterpStyleEnum = (0, $jE67M.createEnum)('animInterpStyle', 'linear', {\n    linear: 'Lnr ',\n    hold: 'hold'\n});\nmodule.exports.stdTrackID = (0, $jE67M.createEnum)('stdTrackID', 'opacity', {\n    opacity: 'opacityTrack',\n    style: 'styleTrack',\n    sheetTransform: 'sheetTransformTrack',\n    sheetPosition: 'sheetPositionTrack',\n    globalLighting: 'globalLightingTrack'\n});\nmodule.exports.gradientInterpolationMethodType = (0, $jE67M.createEnum)('gradientInterpolationMethodType', 'perceptual', {\n    perceptual: 'Perc',\n    linear: 'Lnr ',\n    classic: 'Gcls',\n    smooth: 'Smoo'\n});\nmodule.exports.ClrS = (0, $jE67M.createEnum)('ClrS', 'rgb', {\n    rgb: 'RGBC',\n    hsb: 'HSBl',\n    lab: 'LbCl',\n    hsl: 'HSLC'\n});\nmodule.exports.FStl = (0, $jE67M.createEnum)('FStl', 'outside', {\n    outside: 'OutF',\n    center: 'CtrF',\n    inside: 'InsF'\n});\nmodule.exports.FrFl = (0, $jE67M.createEnum)('FrFl', 'color', {\n    color: 'SClr',\n    gradient: 'GrFl',\n    pattern: 'Ptrn'\n});\nmodule.exports.ESliceType = (0, $jE67M.createEnum)('ESliceType', 'image', {\n    image: 'Img ',\n    noImage: 'noImage'\n});\nmodule.exports.ESliceHorzAlign = (0, $jE67M.createEnum)('ESliceHorzAlign', 'default', {\n    default: 'default'\n});\nmodule.exports.ESliceVertAlign = (0, $jE67M.createEnum)('ESliceVertAlign', 'default', {\n    default: 'default'\n});\nmodule.exports.ESliceOrigin = (0, $jE67M.createEnum)('ESliceOrigin', 'userGenerated', {\n    userGenerated: 'userGenerated',\n    autoGenerated: 'autoGenerated',\n    layer: 'layer'\n});\nmodule.exports.ESliceBGColorType = (0, $jE67M.createEnum)('ESliceBGColorType', 'none', {\n    none: 'None',\n    matte: 'matte',\n    color: 'Clr '\n});\nmodule.exports.strokeStyleLineCapType = (0, $jE67M.createEnum)('strokeStyleLineCapType', 'butt', {\n    butt: 'strokeStyleButtCap',\n    round: 'strokeStyleRoundCap',\n    square: 'strokeStyleSquareCap'\n});\nmodule.exports.strokeStyleLineJoinType = (0, $jE67M.createEnum)('strokeStyleLineJoinType', 'miter', {\n    miter: 'strokeStyleMiterJoin',\n    round: 'strokeStyleRoundJoin',\n    bevel: 'strokeStyleBevelJoin'\n});\nmodule.exports.strokeStyleLineAlignment = (0, $jE67M.createEnum)('strokeStyleLineAlignment', 'inside', {\n    inside: 'strokeStyleAlignInside',\n    center: 'strokeStyleAlignCenter',\n    outside: 'strokeStyleAlignOutside'\n});\nmodule.exports.BlrM = (0, $jE67M.createEnum)('BlrM', 'ispinmage', {\n    spin: 'Spn ',\n    zoom: 'Zm  '\n});\nmodule.exports.BlrQ = (0, $jE67M.createEnum)('BlrQ', 'good', {\n    draft: 'Drft',\n    good: 'Gd  ',\n    best: 'Bst '\n});\nmodule.exports.SmBM = (0, $jE67M.createEnum)('SmBM', 'normal', {\n    normal: 'SBMN',\n    'edge only': 'SBME',\n    'overlay edge': 'SBMO'\n});\nmodule.exports.SmBQ = (0, $jE67M.createEnum)('SmBQ', 'medium', {\n    low: 'SBQL',\n    medium: 'SBQM',\n    high: 'SBQH'\n});\nmodule.exports.DspM = (0, $jE67M.createEnum)('DspM', 'stretch to fit', {\n    'stretch to fit': 'StrF',\n    'tile': 'Tile'\n});\nmodule.exports.UndA = (0, $jE67M.createEnum)('UndA', 'repeat edge pixels', {\n    'wrap around': 'WrpA',\n    'repeat edge pixels': 'RptE'\n});\nmodule.exports.Cnvr = (0, $jE67M.createEnum)('Cnvr', 'rectangular to polar', {\n    'rectangular to polar': 'RctP',\n    'polar to rectangular': 'PlrR'\n});\nmodule.exports.RplS = (0, $jE67M.createEnum)('RplS', 'medium', {\n    small: 'Sml ',\n    medium: 'Mdm ',\n    large: 'Lrg '\n});\nmodule.exports.SphM = (0, $jE67M.createEnum)('SphM', 'normal', {\n    'normal': 'Nrml',\n    'horizontal only': 'HrzO',\n    'vertical only': 'VrtO'\n});\nmodule.exports.Wvtp = (0, $jE67M.createEnum)('Wvtp', 'sine', {\n    sine: 'WvSn',\n    triangle: 'WvTr',\n    square: 'WvSq'\n});\nmodule.exports.ZZTy = (0, $jE67M.createEnum)('ZZTy', 'pond ripples', {\n    'around center': 'ArnC',\n    'out from center': 'OtFr',\n    'pond ripples': 'PndR'\n});\nmodule.exports.Dstr = (0, $jE67M.createEnum)('Dstr', 'uniform', {\n    uniform: 'Unfr',\n    gaussian: 'Gsn '\n});\nmodule.exports.Chnl = (0, $jE67M.createEnum)('Chnl', 'composite', {\n    red: 'Rd  ',\n    green: 'Grn ',\n    blue: 'Bl  ',\n    composite: 'Cmps'\n});\nmodule.exports.MztT = (0, $jE67M.createEnum)('MztT', 'fine dots', {\n    'fine dots': 'FnDt',\n    'medium dots': 'MdmD',\n    'grainy dots': 'GrnD',\n    'coarse dots': 'CrsD',\n    'short lines': 'ShrL',\n    'medium lines': 'MdmL',\n    'long lines': 'LngL',\n    'short strokes': 'ShSt',\n    'medium strokes': 'MdmS',\n    'long strokes': 'LngS'\n});\nmodule.exports.Lns = (0, $jE67M.createEnum)('Lns ', '50-300mm zoom', {\n    '50-300mm zoom': 'Zm  ',\n    '32mm prime': 'Nkn ',\n    '105mm prime': 'Nkn1',\n    'movie prime': 'PnVs'\n});\nmodule.exports.blurType = (0, $jE67M.createEnum)('blurType', 'gaussian blur', {\n    'gaussian blur': 'GsnB',\n    'lens blur': 'lensBlur',\n    'motion blur': 'MtnB'\n});\nmodule.exports.DfsM = (0, $jE67M.createEnum)('DfsM', 'normal', {\n    'normal': 'Nrml',\n    'darken only': 'DrkO',\n    'lighten only': 'LghO',\n    'anisotropic': 'anisotropic'\n});\nmodule.exports.ExtT = (0, $jE67M.createEnum)('ExtT', 'blocks', {\n    blocks: 'Blks',\n    pyramids: 'Pyrm'\n});\nmodule.exports.ExtR = (0, $jE67M.createEnum)('ExtR', 'random', {\n    random: 'Rndm',\n    'level-based': 'LvlB'\n});\nmodule.exports.FlCl = (0, $jE67M.createEnum)('FlCl', 'background color', {\n    'background color': 'FlBc',\n    'foreground color': 'FlFr',\n    'inverse image': 'FlIn',\n    'unaltered image': 'FlSm'\n});\nmodule.exports.CntE = (0, $jE67M.createEnum)('CntE', 'upper', {\n    lower: 'Lwr ',\n    upper: 'Upr '\n});\nmodule.exports.WndM = (0, $jE67M.createEnum)('WndM', 'wind', {\n    wind: 'Wnd ',\n    blast: 'Blst',\n    stagger: 'Stgr'\n});\nmodule.exports.Drct = (0, $jE67M.createEnum)('Drct', 'from the right', {\n    left: 'Left',\n    right: 'Rght'\n});\nmodule.exports.IntE = (0, $jE67M.createEnum)('IntE', 'odd lines', {\n    'odd lines': 'ElmO',\n    'even lines': 'ElmE'\n});\nmodule.exports.IntC = (0, $jE67M.createEnum)('IntC', 'interpolation', {\n    duplication: 'CrtD',\n    interpolation: 'CrtI'\n});\nmodule.exports.FlMd = (0, $jE67M.createEnum)('FlMd', 'wrap around', {\n    'set to transparent': 'Bckg',\n    'repeat edge pixels': 'Rpt ',\n    'wrap around': 'Wrp '\n});\nmodule.exports.prjM = (0, $jE67M.createEnum)('prjM', 'fisheye', {\n    'fisheye': 'fisP',\n    'perspective': 'perP',\n    'auto': 'auto',\n    'full spherical': 'fusP'\n});\nmodule.exports.presetKindType = (0, $jE67M.createEnum)('presetKindType', 'presetKindCustom', {\n    custom: 'presetKindCustom',\n    default: 'presetKindDefault'\n});\n\n});\n\n\n\n\nparcelRegister(\"2TM27\", function(module, exports) {\n\"use strict\";\nObject.defineProperty(module.exports, \"__esModule\", {\n    value: true\n});\nmodule.exports.serializeEngineData = module.exports.parseEngineData = void 0;\nfunction $21c5fa39013f749a$var$isWhitespace(char) {\n    // ' ', '\\n', '\\r', '\\t'\n    return char === 32 || char === 10 || char === 13 || char === 9;\n}\nfunction $21c5fa39013f749a$var$isNumber(char) {\n    // 0123456789.-\n    return char >= 48 && char <= 57 || char === 46 || char === 45;\n}\nfunction $21c5fa39013f749a$var$parseEngineData(data) {\n    var index = 0;\n    function skipWhitespace() {\n        while(index < data.length && $21c5fa39013f749a$var$isWhitespace(data[index]))index++;\n    }\n    function getTextByte() {\n        var byte = data[index];\n        index++;\n        if (byte === 92) {\n            byte = data[index];\n            index++;\n        }\n        return byte;\n    }\n    function getText() {\n        var result = '';\n        if (data[index] === 41) {\n            index++;\n            return result;\n        }\n        // Strings start with utf-16 BOM\n        if (data[index] !== 0xFE || data[index + 1] !== 0xFF) throw new Error('Invalid utf-16 BOM');\n        index += 2;\n        // ), ( and \\ characters are escaped in ascii manner, remove the escapes before interpreting\n        // the bytes as utf-16\n        while(index < data.length && data[index] !== 41){\n            var high = getTextByte();\n            var low = getTextByte();\n            var char = high << 8 | low;\n            result += String.fromCharCode(char);\n        }\n        index++;\n        return result;\n    }\n    var root = null;\n    var stack = [];\n    function pushContainer(value) {\n        if (!stack.length) {\n            stack.push(value);\n            root = value;\n        } else {\n            pushValue(value);\n            stack.push(value);\n        }\n    }\n    function pushValue(value) {\n        if (!stack.length) throw new Error('Invalid data');\n        var top = stack[stack.length - 1];\n        if (typeof top === 'string') {\n            stack[stack.length - 2][top] = value;\n            pop();\n        } else if (Array.isArray(top)) top.push(value);\n        else throw new Error('Invalid data');\n    }\n    function pushProperty(name) {\n        if (!stack.length) pushContainer({});\n        var top = stack[stack.length - 1];\n        if (top && typeof top === 'string') {\n            if (name === 'nil') pushValue(null);\n            else pushValue(\"/\".concat(name));\n        } else if (top && typeof top === 'object') stack.push(name);\n        else throw new Error('Invalid data');\n    }\n    function pop() {\n        if (!stack.length) throw new Error('Invalid data');\n        stack.pop();\n    }\n    skipWhitespace();\n    var dataLength = data.length;\n    while(dataLength > 0 && data[dataLength - 1] === 0)dataLength--; // trim 0 bytes from end\n    while(index < dataLength){\n        var i = index;\n        var char = data[i];\n        if (char === 60 && data[i + 1] === 60) {\n            index += 2;\n            pushContainer({});\n        } else if (char === 62 && data[i + 1] === 62) {\n            index += 2;\n            pop();\n        } else if (char === 47) {\n            index += 1;\n            var start = index;\n            while(index < data.length && !$21c5fa39013f749a$var$isWhitespace(data[index]))index++;\n            var name_1 = '';\n            for(var i_1 = start; i_1 < index; i_1++)name_1 += String.fromCharCode(data[i_1]);\n            pushProperty(name_1);\n        } else if (char === 40) {\n            index += 1;\n            pushValue(getText());\n        } else if (char === 91) {\n            index += 1;\n            pushContainer([]);\n        } else if (char === 93) {\n            index += 1;\n            pop();\n        } else if (char === 110 && data[i + 1] === 117 && data[i + 2] === 108 && data[i + 3] === 108) {\n            index += 4;\n            pushValue(null);\n        } else if (char === 116 && data[i + 1] === 114 && data[i + 2] === 117 && data[i + 3] === 101) {\n            index += 4;\n            pushValue(true);\n        } else if (char === 102 && data[i + 1] === 97 && data[i + 2] === 108 && data[i + 3] === 115 && data[i + 4] === 101) {\n            index += 5;\n            pushValue(false);\n        } else if ($21c5fa39013f749a$var$isNumber(char)) {\n            var value = '';\n            while(index < data.length && $21c5fa39013f749a$var$isNumber(data[index])){\n                value += String.fromCharCode(data[index]);\n                index++;\n            }\n            pushValue(parseFloat(value));\n        } else {\n            index += 1;\n            console.log(\"Invalid token '\".concat(String.fromCharCode(char), \"' (\").concat(char, \") at \").concat(index));\n        // throw new Error(`Invalid token ${String.fromCharCode(char)} at ${index}`);\n        }\n        skipWhitespace();\n    }\n    return root;\n}\nmodule.exports.parseEngineData = $21c5fa39013f749a$var$parseEngineData;\nvar $21c5fa39013f749a$var$floatKeys = [\n    'Axis',\n    'XY',\n    'Zone',\n    'WordSpacing',\n    'FirstLineIndent',\n    'GlyphSpacing',\n    'StartIndent',\n    'EndIndent',\n    'SpaceBefore',\n    'SpaceAfter',\n    'LetterSpacing',\n    'Values',\n    'GridSize',\n    'GridLeading',\n    'PointBase',\n    'BoxBounds',\n    'TransformPoint0',\n    'TransformPoint1',\n    'TransformPoint2',\n    'FontSize',\n    'Leading',\n    'HorizontalScale',\n    'VerticalScale',\n    'BaselineShift',\n    'Tsume',\n    'OutlineWidth',\n    'AutoLeading'\n];\nvar $21c5fa39013f749a$var$intArrays = [\n    'RunLengthArray'\n];\n// TODO: handle /nil\nfunction $21c5fa39013f749a$var$serializeEngineData(data, condensed) {\n    if (condensed === void 0) condensed = false;\n    var buffer = new Uint8Array(1024);\n    var offset = 0;\n    var indent = 0;\n    function write(value) {\n        if (offset >= buffer.length) {\n            var newBuffer = new Uint8Array(buffer.length * 2);\n            newBuffer.set(buffer);\n            buffer = newBuffer;\n        }\n        buffer[offset] = value;\n        offset++;\n    }\n    function writeString(value) {\n        for(var i = 0; i < value.length; i++)write(value.charCodeAt(i));\n    }\n    function writeIndent() {\n        if (condensed) writeString(' ');\n        else for(var i = 0; i < indent; i++)writeString('\\t');\n    }\n    function writeProperty(key, value) {\n        writeIndent();\n        writeString(\"/\".concat(key));\n        writeValue(value, key, true);\n        if (!condensed) writeString('\\n');\n    }\n    function serializeInt(value) {\n        return value.toString();\n    }\n    function serializeFloat(value) {\n        return value.toFixed(5).replace(/(\\d)0+$/g, '$1').replace(/^0+\\.([1-9])/g, '.$1').replace(/^-0+\\.0(\\d)/g, '-.0$1');\n    }\n    function serializeNumber(value, key) {\n        var isFloat = key && $21c5fa39013f749a$var$floatKeys.indexOf(key) !== -1 || (value | 0) !== value;\n        return isFloat ? serializeFloat(value) : serializeInt(value);\n    }\n    function getKeys(value) {\n        var keys = Object.keys(value);\n        if (keys.indexOf('98') !== -1) keys.unshift.apply(keys, keys.splice(keys.indexOf('99'), 1));\n        if (keys.indexOf('99') !== -1) keys.unshift.apply(keys, keys.splice(keys.indexOf('99'), 1));\n        return keys;\n    }\n    function writeStringByte(value) {\n        if (value === 40 || value === 41 || value === 92) write(92); // \\\n        write(value);\n    }\n    function writeValue(value, key, inProperty) {\n        if (inProperty === void 0) inProperty = false;\n        function writePrefix() {\n            if (inProperty) writeString(' ');\n            else writeIndent();\n        }\n        if (value === null) {\n            writePrefix();\n            writeString(condensed ? '/nil' : 'null');\n        } else if (typeof value === 'number') {\n            writePrefix();\n            writeString(serializeNumber(value, key));\n        } else if (typeof value === 'boolean') {\n            writePrefix();\n            writeString(value ? 'true' : 'false');\n        } else if (typeof value === 'string') {\n            writePrefix();\n            if ((key === '99' || key === '98') && value.charAt(0) === '/') writeString(value);\n            else {\n                writeString('(');\n                write(0xfe);\n                write(0xff);\n                for(var i = 0; i < value.length; i++){\n                    var code = value.charCodeAt(i);\n                    writeStringByte(code >> 8 & 0xff);\n                    writeStringByte(code & 0xff);\n                }\n                writeString(')');\n            }\n        } else if (Array.isArray(value)) {\n            writePrefix();\n            if (value.every(function(x) {\n                return typeof x === 'number';\n            })) {\n                writeString('[');\n                var intArray = $21c5fa39013f749a$var$intArrays.indexOf(key) !== -1;\n                for(var _i = 0, value_1 = value; _i < value_1.length; _i++){\n                    var x = value_1[_i];\n                    writeString(' ');\n                    writeString(intArray ? serializeNumber(x) : serializeFloat(x));\n                }\n                writeString(' ]');\n            } else {\n                writeString('[');\n                if (!condensed) writeString('\\n');\n                for(var _a = 0, value_2 = value; _a < value_2.length; _a++){\n                    var x = value_2[_a];\n                    writeValue(x, key);\n                    if (!condensed) writeString('\\n');\n                }\n                writeIndent();\n                writeString(']');\n            }\n        } else if (typeof value === 'object') {\n            if (inProperty && !condensed) writeString('\\n');\n            writeIndent();\n            writeString('<<');\n            if (!condensed) writeString('\\n');\n            indent++;\n            for(var _b = 0, _c = getKeys(value); _b < _c.length; _b++){\n                var key_1 = _c[_b];\n                writeProperty(key_1, value[key_1]);\n            }\n            indent--;\n            writeIndent();\n            writeString('>>');\n        }\n        return undefined;\n    }\n    if (condensed) {\n        if (typeof data === 'object') for(var _i = 0, _a = getKeys(data); _i < _a.length; _i++){\n            var key = _a[_i];\n            writeProperty(key, data[key]);\n        }\n    } else {\n        writeString('\\n\\n');\n        writeValue(data);\n    }\n    return buffer.slice(0, offset);\n}\nmodule.exports.serializeEngineData = $21c5fa39013f749a$var$serializeEngineData;\n\n});\n\nparcelRegister(\"6rQPt\", function(module, exports) {\n\"use strict\";\nvar $4b1e3e7817bb5a66$var$__assign = module.exports && module.exports.__assign || function() {\n    $4b1e3e7817bb5a66$var$__assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return $4b1e3e7817bb5a66$var$__assign.apply(this, arguments);\n};\nObject.defineProperty(module.exports, \"__esModule\", {\n    value: true\n});\nmodule.exports.encodeEngineData = module.exports.decodeEngineData = void 0;\nvar $4b1e3e7817bb5a66$var$defaultFont = {\n    name: 'MyriadPro-Regular',\n    script: 0,\n    type: 0,\n    synthetic: 0\n};\nvar $4b1e3e7817bb5a66$var$defaultParagraphStyle = {\n    justification: 'left',\n    firstLineIndent: 0,\n    startIndent: 0,\n    endIndent: 0,\n    spaceBefore: 0,\n    spaceAfter: 0,\n    autoHyphenate: true,\n    hyphenatedWordSize: 6,\n    preHyphen: 2,\n    postHyphen: 2,\n    consecutiveHyphens: 8,\n    zone: 36,\n    wordSpacing: [\n        0.8,\n        1,\n        1.33\n    ],\n    letterSpacing: [\n        0,\n        0,\n        0\n    ],\n    glyphSpacing: [\n        1,\n        1,\n        1\n    ],\n    autoLeading: 1.2,\n    leadingType: 0,\n    hanging: false,\n    burasagari: false,\n    kinsokuOrder: 0,\n    everyLineComposer: false\n};\nvar $4b1e3e7817bb5a66$var$defaultStyle = {\n    font: $4b1e3e7817bb5a66$var$defaultFont,\n    fontSize: 12,\n    fauxBold: false,\n    fauxItalic: false,\n    autoLeading: true,\n    leading: 0,\n    horizontalScale: 1,\n    verticalScale: 1,\n    tracking: 0,\n    autoKerning: true,\n    kerning: 0,\n    baselineShift: 0,\n    fontCaps: 0,\n    fontBaseline: 0,\n    underline: false,\n    strikethrough: false,\n    ligatures: true,\n    dLigatures: false,\n    baselineDirection: 2,\n    tsume: 0,\n    styleRunAlignment: 2,\n    language: 0,\n    noBreak: false,\n    fillColor: {\n        r: 0,\n        g: 0,\n        b: 0\n    },\n    strokeColor: {\n        r: 0,\n        g: 0,\n        b: 0\n    },\n    fillFlag: true,\n    strokeFlag: false,\n    fillFirst: true,\n    yUnderline: 1,\n    outlineWidth: 1,\n    characterDirection: 0,\n    hindiNumbers: false,\n    kashida: 1,\n    diacriticPos: 2\n};\nvar $4b1e3e7817bb5a66$var$defaultGridInfo = {\n    isOn: false,\n    show: false,\n    size: 18,\n    leading: 22,\n    color: {\n        r: 0,\n        g: 0,\n        b: 255\n    },\n    leadingFillColor: {\n        r: 0,\n        g: 0,\n        b: 255\n    },\n    alignLineHeightToGridFlags: false\n};\nvar $4b1e3e7817bb5a66$var$paragraphStyleKeys = [\n    'justification',\n    'firstLineIndent',\n    'startIndent',\n    'endIndent',\n    'spaceBefore',\n    'spaceAfter',\n    'autoHyphenate',\n    'hyphenatedWordSize',\n    'preHyphen',\n    'postHyphen',\n    'consecutiveHyphens',\n    'zone',\n    'wordSpacing',\n    'letterSpacing',\n    'glyphSpacing',\n    'autoLeading',\n    'leadingType',\n    'hanging',\n    'burasagari',\n    'kinsokuOrder',\n    'everyLineComposer'\n];\nvar $4b1e3e7817bb5a66$var$styleKeys = [\n    'font',\n    'fontSize',\n    'fauxBold',\n    'fauxItalic',\n    'autoLeading',\n    'leading',\n    'horizontalScale',\n    'verticalScale',\n    'tracking',\n    'autoKerning',\n    'kerning',\n    'baselineShift',\n    'fontCaps',\n    'fontBaseline',\n    'underline',\n    'strikethrough',\n    'ligatures',\n    'dLigatures',\n    'baselineDirection',\n    'tsume',\n    'styleRunAlignment',\n    'language',\n    'noBreak',\n    'fillColor',\n    'strokeColor',\n    'fillFlag',\n    'strokeFlag',\n    'fillFirst',\n    'yUnderline',\n    'outlineWidth',\n    'characterDirection',\n    'hindiNumbers',\n    'kashida',\n    'diacriticPos'\n];\nvar $4b1e3e7817bb5a66$var$antialias = [\n    'none',\n    'crisp',\n    'strong',\n    'smooth',\n    'sharp'\n];\nvar $4b1e3e7817bb5a66$var$justification = [\n    'left',\n    'right',\n    'center',\n    'justify-left',\n    'justify-right',\n    'justify-center',\n    'justify-all'\n];\nfunction $4b1e3e7817bb5a66$var$upperFirst(value) {\n    return value.substring(0, 1).toUpperCase() + value.substring(1);\n}\nfunction $4b1e3e7817bb5a66$var$decodeColor(color) {\n    var c = color.Values;\n    switch(color.Type){\n        case 0:\n            return {\n                k: c[1] * 255\n            }; // grayscale (alpha?)\n        case 1:\n            return c[0] === 1 ? {\n                r: c[1] * 255,\n                g: c[2] * 255,\n                b: c[3] * 255\n            } : {\n                r: c[1] * 255,\n                g: c[2] * 255,\n                b: c[3] * 255,\n                a: c[0] * 255\n            }; // rgba\n        case 2:\n            return {\n                c: c[1] * 255,\n                m: c[2] * 255,\n                y: c[3] * 255,\n                k: c[4] * 255\n            }; // cmyk (alpha?)\n        default:\n            throw new Error('Unknown color type in text layer');\n    }\n}\nfunction $4b1e3e7817bb5a66$var$encodeColor(color) {\n    if (!color) return {\n        Type: 1,\n        Values: [\n            0,\n            0,\n            0,\n            0\n        ]\n    };\n    else if ('r' in color) return {\n        Type: 1,\n        Values: [\n            'a' in color ? color.a / 255 : 1,\n            color.r / 255,\n            color.g / 255,\n            color.b / 255\n        ]\n    };\n    else if ('c' in color) return {\n        Type: 2,\n        Values: [\n            1,\n            color.c / 255,\n            color.m / 255,\n            color.y / 255,\n            color.k / 255\n        ]\n    };\n    else if ('k' in color) return {\n        Type: 0,\n        Values: [\n            1,\n            color.k / 255\n        ]\n    };\n    else throw new Error('Invalid color type in text layer');\n}\nfunction $4b1e3e7817bb5a66$var$arraysEqual(a, b) {\n    if (!a || !b) return false;\n    if (a.length !== b.length) return false;\n    for(var i = 0; i < a.length; i++)if (a[i] !== b[i]) return false;\n    return true;\n}\nfunction $4b1e3e7817bb5a66$var$objectsEqual(a, b) {\n    if (!a || !b) return false;\n    for(var _i = 0, _a = Object.keys(a); _i < _a.length; _i++){\n        var key = _a[_i];\n        if (a[key] !== b[key]) return false;\n    }\n    for(var _b = 0, _c = Object.keys(b); _b < _c.length; _b++){\n        var key = _c[_b];\n        if (a[key] !== b[key]) return false;\n    }\n    return true;\n}\nfunction $4b1e3e7817bb5a66$var$findOrAddFont(fonts, font) {\n    for(var i = 0; i < fonts.length; i++){\n        if (fonts[i].name === font.name) return i;\n    }\n    fonts.push(font);\n    return fonts.length - 1;\n}\nfunction $4b1e3e7817bb5a66$var$decodeObject(obj, keys, fonts) {\n    var result = {};\n    for(var _i = 0, keys_1 = keys; _i < keys_1.length; _i++){\n        var key = keys_1[_i];\n        var Key = $4b1e3e7817bb5a66$var$upperFirst(key);\n        if (obj[Key] === undefined) continue;\n        if (key === 'justification') result[key] = $4b1e3e7817bb5a66$var$justification[obj[Key]];\n        else if (key === 'font') result[key] = fonts[obj[Key]];\n        else if (key === 'fillColor' || key === 'strokeColor') result[key] = $4b1e3e7817bb5a66$var$decodeColor(obj[Key]);\n        else result[key] = obj[Key];\n    }\n    return result;\n}\nfunction $4b1e3e7817bb5a66$var$encodeObject(obj, keys, fonts) {\n    var _a;\n    var result = {};\n    for(var _i = 0, keys_2 = keys; _i < keys_2.length; _i++){\n        var key = keys_2[_i];\n        var Key = $4b1e3e7817bb5a66$var$upperFirst(key);\n        if (obj[key] === undefined) continue;\n        if (key === 'justification') result[Key] = $4b1e3e7817bb5a66$var$justification.indexOf((_a = obj[key]) !== null && _a !== void 0 ? _a : 'left');\n        else if (key === 'font') result[Key] = $4b1e3e7817bb5a66$var$findOrAddFont(fonts, obj[key]);\n        else if (key === 'fillColor' || key === 'strokeColor') result[Key] = $4b1e3e7817bb5a66$var$encodeColor(obj[key]);\n        else result[Key] = obj[key];\n    }\n    return result;\n}\nfunction $4b1e3e7817bb5a66$var$decodeParagraphStyle(obj, fonts) {\n    return $4b1e3e7817bb5a66$var$decodeObject(obj, $4b1e3e7817bb5a66$var$paragraphStyleKeys, fonts);\n}\nfunction $4b1e3e7817bb5a66$var$decodeStyle(obj, fonts) {\n    return $4b1e3e7817bb5a66$var$decodeObject(obj, $4b1e3e7817bb5a66$var$styleKeys, fonts);\n}\nfunction $4b1e3e7817bb5a66$var$encodeParagraphStyle(obj, fonts) {\n    return $4b1e3e7817bb5a66$var$encodeObject(obj, $4b1e3e7817bb5a66$var$paragraphStyleKeys, fonts);\n}\nfunction $4b1e3e7817bb5a66$var$encodeStyle(obj, fonts) {\n    return $4b1e3e7817bb5a66$var$encodeObject(obj, $4b1e3e7817bb5a66$var$styleKeys, fonts);\n}\nfunction $4b1e3e7817bb5a66$var$deduplicateValues(base, runs, keys) {\n    if (!runs.length) return;\n    var _loop_1 = function _loop_1(key) {\n        var value = runs[0].style[key];\n        if (value !== undefined) {\n            var identical = false;\n            if (Array.isArray(value)) identical = runs.every(function(r) {\n                return $4b1e3e7817bb5a66$var$arraysEqual(r.style[key], value);\n            });\n            else if (typeof value === 'object') identical = runs.every(function(r) {\n                return $4b1e3e7817bb5a66$var$objectsEqual(r.style[key], value);\n            });\n            else identical = runs.every(function(r) {\n                return r.style[key] === value;\n            });\n            if (identical) base[key] = value;\n        }\n        var styleValue = base[key];\n        if (styleValue !== undefined) for(var _a = 0, runs_1 = runs; _a < runs_1.length; _a++){\n            var r = runs_1[_a];\n            var same = false;\n            if (Array.isArray(value)) same = $4b1e3e7817bb5a66$var$arraysEqual(r.style[key], value);\n            else if (typeof value === 'object') same = $4b1e3e7817bb5a66$var$objectsEqual(r.style[key], value);\n            else same = r.style[key] === value;\n            if (same) delete r.style[key];\n        }\n    };\n    for(var _i = 0, keys_3 = keys; _i < keys_3.length; _i++){\n        var key = keys_3[_i];\n        _loop_1(key);\n    }\n    if (runs.every(function(x) {\n        return Object.keys(x.style).length === 0;\n    })) runs.length = 0;\n}\nfunction $4b1e3e7817bb5a66$var$decodeEngineData(engineData) {\n    var _a, _b, _c, _d, _e, _f;\n    // console.log('engineData', require('util').inspect(engineData, false, 99, true));\n    var engineDict = engineData.EngineDict;\n    var resourceDict = engineData.ResourceDict;\n    var fonts = resourceDict.FontSet.map(function(f) {\n        return {\n            name: f.Name,\n            script: f.Script,\n            type: f.FontType,\n            synthetic: f.Synthetic\n        };\n    });\n    var text = engineDict.Editor.Text.replace(/\\r/g, '\\n');\n    var removedCharacters = 0;\n    while(/\\n$/.test(text)){\n        text = text.substring(0, text.length - 1);\n        removedCharacters++;\n    }\n    var result = {\n        text: text,\n        antiAlias: (_a = $4b1e3e7817bb5a66$var$antialias[engineDict.AntiAlias]) !== null && _a !== void 0 ? _a : 'smooth',\n        useFractionalGlyphWidths: !!engineDict.UseFractionalGlyphWidths,\n        superscriptSize: resourceDict.SuperscriptSize,\n        superscriptPosition: resourceDict.SuperscriptPosition,\n        subscriptSize: resourceDict.SubscriptSize,\n        subscriptPosition: resourceDict.SubscriptPosition,\n        smallCapSize: resourceDict.SmallCapSize\n    };\n    // shape\n    var photoshop = (_f = (_e = (_d = (_c = (_b = engineDict.Rendered) === null || _b === void 0 ? void 0 : _b.Shapes) === null || _c === void 0 ? void 0 : _c.Children) === null || _d === void 0 ? void 0 : _d[0]) === null || _e === void 0 ? void 0 : _e.Cookie) === null || _f === void 0 ? void 0 : _f.Photoshop;\n    if (photoshop) {\n        result.shapeType = photoshop.ShapeType === 1 ? 'box' : 'point';\n        if (photoshop.PointBase) result.pointBase = photoshop.PointBase;\n        if (photoshop.BoxBounds) result.boxBounds = photoshop.BoxBounds;\n    }\n    // paragraph style\n    // const theNormalParagraphSheet = resourceDict.TheNormalParagraphSheet;\n    // const paragraphSheetSet = resourceDict.ParagraphSheetSet;\n    // const paragraphProperties = paragraphSheetSet[theNormalParagraphSheet].Properties;\n    var paragraphRun = engineDict.ParagraphRun;\n    result.paragraphStyle = {}; // decodeParagraphStyle(paragraphProperties, fonts);\n    result.paragraphStyleRuns = [];\n    for(var i = 0; i < paragraphRun.RunArray.length; i++){\n        var run_1 = paragraphRun.RunArray[i];\n        var length_1 = paragraphRun.RunLengthArray[i];\n        var style = $4b1e3e7817bb5a66$var$decodeParagraphStyle(run_1.ParagraphSheet.Properties, fonts);\n        // const adjustments = {\n        //   axis: run.Adjustments.Axis,\n        //   xy: run.Adjustments.XY,\n        // };\n        result.paragraphStyleRuns.push({\n            length: length_1,\n            style: style /*, adjustments*/ \n        });\n    }\n    for(var counter = removedCharacters; result.paragraphStyleRuns.length && counter > 0; counter--)if (--result.paragraphStyleRuns[result.paragraphStyleRuns.length - 1].length === 0) result.paragraphStyleRuns.pop();\n    $4b1e3e7817bb5a66$var$deduplicateValues(result.paragraphStyle, result.paragraphStyleRuns, $4b1e3e7817bb5a66$var$paragraphStyleKeys);\n    if (!result.paragraphStyleRuns.length) delete result.paragraphStyleRuns;\n    // style\n    // const theNormalStyleSheet = resourceDict.TheNormalStyleSheet;\n    // const styleSheetSet = resourceDict.StyleSheetSet;\n    // const styleSheetData = styleSheetSet[theNormalStyleSheet].StyleSheetData;\n    var styleRun = engineDict.StyleRun;\n    result.style = {}; // decodeStyle(styleSheetData, fonts);\n    result.styleRuns = [];\n    for(var i = 0; i < styleRun.RunArray.length; i++){\n        var length_2 = styleRun.RunLengthArray[i];\n        var style = $4b1e3e7817bb5a66$var$decodeStyle(styleRun.RunArray[i].StyleSheet.StyleSheetData, fonts);\n        if (!style.font) style.font = fonts[0];\n        result.styleRuns.push({\n            length: length_2,\n            style: style\n        });\n    }\n    for(var counter = removedCharacters; result.styleRuns.length && counter > 0; counter--)if (--result.styleRuns[result.styleRuns.length - 1].length === 0) result.styleRuns.pop();\n    $4b1e3e7817bb5a66$var$deduplicateValues(result.style, result.styleRuns, $4b1e3e7817bb5a66$var$styleKeys);\n    if (!result.styleRuns.length) delete result.styleRuns;\n    return result;\n}\nmodule.exports.decodeEngineData = $4b1e3e7817bb5a66$var$decodeEngineData;\nfunction $4b1e3e7817bb5a66$var$encodeEngineData(data) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n    var text = \"\".concat((data.text || '').replace(/\\r?\\n/g, '\\r'), \"\\r\");\n    var fonts = [\n        {\n            name: 'AdobeInvisFont',\n            script: 0,\n            type: 0,\n            synthetic: 0\n        }\n    ];\n    var defFont = ((_a = data.style) === null || _a === void 0 ? void 0 : _a.font) || ((_c = (_b = data.styleRuns) === null || _b === void 0 ? void 0 : _b.find(function(s) {\n        return s.style.font;\n    })) === null || _c === void 0 ? void 0 : _c.style.font) || $4b1e3e7817bb5a66$var$defaultFont;\n    var paragraphRunArray = [];\n    var paragraphRunLengthArray = [];\n    var paragraphRuns = data.paragraphStyleRuns;\n    if (paragraphRuns && paragraphRuns.length) {\n        var leftLength_1 = text.length;\n        for(var _i = 0, paragraphRuns_1 = paragraphRuns; _i < paragraphRuns_1.length; _i++){\n            var run_2 = paragraphRuns_1[_i];\n            var runLength = Math.min(run_2.length, leftLength_1);\n            leftLength_1 -= runLength;\n            if (!runLength) continue; // ignore 0 size runs\n            // extend last run if it's only for trailing \\r\n            if (leftLength_1 === 1 && run_2 === paragraphRuns[paragraphRuns.length - 1]) {\n                runLength++;\n                leftLength_1--;\n            }\n            paragraphRunLengthArray.push(runLength);\n            paragraphRunArray.push({\n                ParagraphSheet: {\n                    DefaultStyleSheet: 0,\n                    Properties: $4b1e3e7817bb5a66$var$encodeParagraphStyle($4b1e3e7817bb5a66$var$__assign($4b1e3e7817bb5a66$var$__assign($4b1e3e7817bb5a66$var$__assign({}, $4b1e3e7817bb5a66$var$defaultParagraphStyle), data.paragraphStyle), run_2.style), fonts)\n                },\n                Adjustments: {\n                    Axis: [\n                        1,\n                        0,\n                        1\n                    ],\n                    XY: [\n                        0,\n                        0\n                    ]\n                }\n            });\n        }\n        if (leftLength_1) {\n            paragraphRunLengthArray.push(leftLength_1);\n            paragraphRunArray.push({\n                ParagraphSheet: {\n                    DefaultStyleSheet: 0,\n                    Properties: $4b1e3e7817bb5a66$var$encodeParagraphStyle($4b1e3e7817bb5a66$var$__assign($4b1e3e7817bb5a66$var$__assign({}, $4b1e3e7817bb5a66$var$defaultParagraphStyle), data.paragraphStyle), fonts)\n                },\n                Adjustments: {\n                    Axis: [\n                        1,\n                        0,\n                        1\n                    ],\n                    XY: [\n                        0,\n                        0\n                    ]\n                }\n            });\n        }\n    } else {\n        for(var i = 0, last = 0; i < text.length; i++)if (text.charCodeAt(i) === 13) {\n            paragraphRunLengthArray.push(i - last + 1);\n            paragraphRunArray.push({\n                ParagraphSheet: {\n                    DefaultStyleSheet: 0,\n                    Properties: $4b1e3e7817bb5a66$var$encodeParagraphStyle($4b1e3e7817bb5a66$var$__assign($4b1e3e7817bb5a66$var$__assign({}, $4b1e3e7817bb5a66$var$defaultParagraphStyle), data.paragraphStyle), fonts)\n                },\n                Adjustments: {\n                    Axis: [\n                        1,\n                        0,\n                        1\n                    ],\n                    XY: [\n                        0,\n                        0\n                    ]\n                }\n            });\n            last = i + 1;\n        }\n    }\n    var styleSheetData = $4b1e3e7817bb5a66$var$encodeStyle($4b1e3e7817bb5a66$var$__assign($4b1e3e7817bb5a66$var$__assign({}, $4b1e3e7817bb5a66$var$defaultStyle), {\n        font: defFont\n    }), fonts);\n    var styleRuns = data.styleRuns || [\n        {\n            length: text.length,\n            style: data.style || {}\n        }\n    ];\n    var styleRunArray = [];\n    var styleRunLengthArray = [];\n    var leftLength = text.length;\n    for(var _o = 0, styleRuns_1 = styleRuns; _o < styleRuns_1.length; _o++){\n        var run_3 = styleRuns_1[_o];\n        var runLength = Math.min(run_3.length, leftLength);\n        leftLength -= runLength;\n        if (!runLength) continue; // ignore 0 size runs\n        // extend last run if it's only for trailing \\r\n        if (leftLength === 1 && run_3 === styleRuns[styleRuns.length - 1]) {\n            runLength++;\n            leftLength--;\n        }\n        styleRunLengthArray.push(runLength);\n        styleRunArray.push({\n            StyleSheet: {\n                StyleSheetData: $4b1e3e7817bb5a66$var$encodeStyle($4b1e3e7817bb5a66$var$__assign($4b1e3e7817bb5a66$var$__assign({\n                    kerning: 0,\n                    autoKerning: true,\n                    fillColor: {\n                        r: 0,\n                        g: 0,\n                        b: 0\n                    }\n                }, data.style), run_3.style), fonts)\n            }\n        });\n    }\n    // add extra run to the end if existing ones didn't fill it up\n    if (leftLength && styleRuns.length) {\n        styleRunLengthArray.push(leftLength);\n        styleRunArray.push({\n            StyleSheet: {\n                StyleSheetData: $4b1e3e7817bb5a66$var$encodeStyle($4b1e3e7817bb5a66$var$__assign({\n                    kerning: 0,\n                    autoKerning: true,\n                    fillColor: {\n                        r: 0,\n                        g: 0,\n                        b: 0\n                    }\n                }, data.style), fonts)\n            }\n        });\n    }\n    var gridInfo = $4b1e3e7817bb5a66$var$__assign($4b1e3e7817bb5a66$var$__assign({}, $4b1e3e7817bb5a66$var$defaultGridInfo), data.gridInfo);\n    var WritingDirection = data.orientation === 'vertical' ? 2 : 0;\n    var Procession = data.orientation === 'vertical' ? 1 : 0;\n    var ShapeType = data.shapeType === 'box' ? 1 : 0;\n    var Photoshop = {\n        ShapeType: ShapeType\n    };\n    if (ShapeType === 0) Photoshop.PointBase = data.pointBase || [\n        0,\n        0\n    ];\n    else Photoshop.BoxBounds = data.boxBounds || [\n        0,\n        0,\n        0,\n        0\n    ];\n    // needed for correct order of properties\n    Photoshop.Base = {\n        ShapeType: ShapeType,\n        TransformPoint0: [\n            1,\n            0\n        ],\n        TransformPoint1: [\n            0,\n            1\n        ],\n        TransformPoint2: [\n            0,\n            0\n        ]\n    };\n    var defaultResources = {\n        KinsokuSet: [\n            {\n                Name: 'PhotoshopKinsokuHard',\n                NoStart: \"\\u3001\\u3002\\uFF0C\\uFF0E\\u30FB\\uFF1A\\uFF1B\\uFF1F\\uFF01\\u30FC\\u2015\\u2019\\u201D\\uFF09\\u3015\\uFF3D\\uFF5D\\u3009\\u300B\\u300D\\u300F\\u3011\\u30FD\\u30FE\\u309D\\u309E\\u3005\\u3041\\u3043\\u3045\\u3047\\u3049\\u3063\\u3083\\u3085\\u3087\\u308E\\u30A1\\u30A3\\u30A5\\u30A7\\u30A9\\u30C3\\u30E3\\u30E5\\u30E7\\u30EE\\u30F5\\u30F6\\u309B\\u309C?!)]},.:;\\u2103\\u2109\\xa2\\uFF05\\u2030\",\n                NoEnd: \"\\u2018\\u201C\\uFF08\\u3014\\uFF3B\\uFF5B\\u3008\\u300A\\u300C\\u300E\\u3010([{\\uFFE5\\uFF04\\xa3\\uFF20\\xa7\\u3012\\uFF03\",\n                Keep: \"\\u2015\\u2025\",\n                Hanging: \"\\u3001\\u3002.,\"\n            },\n            {\n                Name: 'PhotoshopKinsokuSoft',\n                NoStart: \"\\u3001\\u3002\\uFF0C\\uFF0E\\u30FB\\uFF1A\\uFF1B\\uFF1F\\uFF01\\u2019\\u201D\\uFF09\\u3015\\uFF3D\\uFF5D\\u3009\\u300B\\u300D\\u300F\\u3011\\u30FD\\u30FE\\u309D\\u309E\\u3005\",\n                NoEnd: \"\\u2018\\u201C\\uFF08\\u3014\\uFF3B\\uFF5B\\u3008\\u300A\\u300C\\u300E\\u3010\",\n                Keep: \"\\u2015\\u2025\",\n                Hanging: \"\\u3001\\u3002.,\"\n            }\n        ],\n        MojiKumiSet: [\n            {\n                InternalName: 'Photoshop6MojiKumiSet1'\n            },\n            {\n                InternalName: 'Photoshop6MojiKumiSet2'\n            },\n            {\n                InternalName: 'Photoshop6MojiKumiSet3'\n            },\n            {\n                InternalName: 'Photoshop6MojiKumiSet4'\n            }\n        ],\n        TheNormalStyleSheet: 0,\n        TheNormalParagraphSheet: 0,\n        ParagraphSheetSet: [\n            {\n                Name: 'Normal RGB',\n                DefaultStyleSheet: 0,\n                Properties: $4b1e3e7817bb5a66$var$encodeParagraphStyle($4b1e3e7817bb5a66$var$__assign($4b1e3e7817bb5a66$var$__assign({}, $4b1e3e7817bb5a66$var$defaultParagraphStyle), data.paragraphStyle), fonts)\n            }\n        ],\n        StyleSheetSet: [\n            {\n                Name: 'Normal RGB',\n                StyleSheetData: styleSheetData\n            }\n        ],\n        FontSet: fonts.map(function(f) {\n            return {\n                Name: f.name,\n                Script: f.script || 0,\n                FontType: f.type || 0,\n                Synthetic: f.synthetic || 0\n            };\n        }),\n        SuperscriptSize: (_d = data.superscriptSize) !== null && _d !== void 0 ? _d : 0.583,\n        SuperscriptPosition: (_e = data.superscriptPosition) !== null && _e !== void 0 ? _e : 0.333,\n        SubscriptSize: (_f = data.subscriptSize) !== null && _f !== void 0 ? _f : 0.583,\n        SubscriptPosition: (_g = data.subscriptPosition) !== null && _g !== void 0 ? _g : 0.333,\n        SmallCapSize: (_h = data.smallCapSize) !== null && _h !== void 0 ? _h : 0.7\n    };\n    var engineData = {\n        EngineDict: {\n            Editor: {\n                Text: text\n            },\n            ParagraphRun: {\n                DefaultRunData: {\n                    ParagraphSheet: {\n                        DefaultStyleSheet: 0,\n                        Properties: {}\n                    },\n                    Adjustments: {\n                        Axis: [\n                            1,\n                            0,\n                            1\n                        ],\n                        XY: [\n                            0,\n                            0\n                        ]\n                    }\n                },\n                RunArray: paragraphRunArray,\n                RunLengthArray: paragraphRunLengthArray,\n                IsJoinable: 1\n            },\n            StyleRun: {\n                DefaultRunData: {\n                    StyleSheet: {\n                        StyleSheetData: {}\n                    }\n                },\n                RunArray: styleRunArray,\n                RunLengthArray: styleRunLengthArray,\n                IsJoinable: 2\n            },\n            GridInfo: {\n                GridIsOn: !!gridInfo.isOn,\n                ShowGrid: !!gridInfo.show,\n                GridSize: (_j = gridInfo.size) !== null && _j !== void 0 ? _j : 18,\n                GridLeading: (_k = gridInfo.leading) !== null && _k !== void 0 ? _k : 22,\n                GridColor: $4b1e3e7817bb5a66$var$encodeColor(gridInfo.color),\n                GridLeadingFillColor: $4b1e3e7817bb5a66$var$encodeColor(gridInfo.color),\n                AlignLineHeightToGridFlags: !!gridInfo.alignLineHeightToGridFlags\n            },\n            AntiAlias: $4b1e3e7817bb5a66$var$antialias.indexOf((_l = data.antiAlias) !== null && _l !== void 0 ? _l : 'sharp'),\n            UseFractionalGlyphWidths: (_m = data.useFractionalGlyphWidths) !== null && _m !== void 0 ? _m : true,\n            Rendered: {\n                Version: 1,\n                Shapes: {\n                    WritingDirection: WritingDirection,\n                    Children: [\n                        {\n                            ShapeType: ShapeType,\n                            Procession: Procession,\n                            Lines: {\n                                WritingDirection: WritingDirection,\n                                Children: []\n                            },\n                            Cookie: {\n                                Photoshop: Photoshop\n                            }\n                        }\n                    ]\n                }\n            }\n        },\n        ResourceDict: $4b1e3e7817bb5a66$var$__assign({}, defaultResources),\n        DocumentResources: $4b1e3e7817bb5a66$var$__assign({}, defaultResources)\n    };\n    // console.log('encodeEngineData', require('util').inspect(engineData, false, 99, true));\n    return engineData;\n}\nmodule.exports.encodeEngineData = $4b1e3e7817bb5a66$var$encodeEngineData;\n\n});\n\nparcelRegister(\"duoIX\", function(module, exports) {\n\"use strict\";\n/// Engine data 2 experiments\n// /test/engineData2.json:1109 is character codes\nObject.defineProperty(module.exports, \"__esModule\", {\n    value: true\n});\nmodule.exports.decodeEngineData2 = void 0;\nvar $9d214166cfbe7e30$var$keysColor = {\n    '0': {\n        uproot: true,\n        children: {\n            '0': {\n                name: 'Type'\n            },\n            '1': {\n                name: 'Values'\n            }\n        }\n    }\n};\nvar $9d214166cfbe7e30$var$keysStyleSheet = {\n    '0': {\n        name: 'Font'\n    },\n    '1': {\n        name: 'FontSize'\n    },\n    '2': {\n        name: 'FauxBold'\n    },\n    '3': {\n        name: 'FauxItalic'\n    },\n    '4': {\n        name: 'AutoLeading'\n    },\n    '5': {\n        name: 'Leading'\n    },\n    '6': {\n        name: 'HorizontalScale'\n    },\n    '7': {\n        name: 'VerticalScale'\n    },\n    '8': {\n        name: 'Tracking'\n    },\n    '9': {\n        name: 'BaselineShift'\n    },\n    // '10': ???\n    '11': {\n        name: 'Kerning?'\n    },\n    '12': {\n        name: 'FontCaps'\n    },\n    '13': {\n        name: 'FontBaseline'\n    },\n    '15': {\n        name: 'Strikethrough?'\n    },\n    '16': {\n        name: 'Underline?'\n    },\n    '18': {\n        name: 'Ligatures'\n    },\n    '19': {\n        name: 'DLigatures'\n    },\n    // '20': ???\n    // '21': ???\n    // '22': ???\n    '23': {\n        name: 'Fractions'\n    },\n    '24': {\n        name: 'Ordinals'\n    },\n    // '25': ???\n    // '26': ???\n    // '27': ???\n    '28': {\n        name: 'StylisticAlternates'\n    },\n    // '29': ???\n    '30': {\n        name: 'OldStyle?'\n    },\n    '35': {\n        name: 'BaselineDirection'\n    },\n    '38': {\n        name: 'Language'\n    },\n    '52': {\n        name: 'NoBreak'\n    },\n    '53': {\n        name: 'FillColor',\n        children: $9d214166cfbe7e30$var$keysColor\n    },\n    '54': {\n        name: 'StrokeColor',\n        children: $9d214166cfbe7e30$var$keysColor\n    },\n    '55': {\n        children: {\n            '99': {\n                uproot: true\n            }\n        }\n    },\n    // '68': ???\n    // '70': ???\n    // '71': ???\n    // '72': ???\n    // '73': ???\n    '79': {\n        children: $9d214166cfbe7e30$var$keysColor\n    }\n};\nvar $9d214166cfbe7e30$var$keysParagraph = {\n    '0': {\n        name: 'Justification'\n    },\n    '1': {\n        name: 'FirstLineIndent'\n    },\n    '2': {\n        name: 'StartIndent'\n    },\n    '3': {\n        name: 'EndIndent'\n    },\n    '4': {\n        name: 'SpaceBefore'\n    },\n    '5': {\n        name: 'SpaceAfter'\n    },\n    '7': {\n        name: 'AutoLeading'\n    },\n    '9': {\n        name: 'AutoHyphenate'\n    },\n    '10': {\n        name: 'HyphenatedWordSize'\n    },\n    '11': {\n        name: 'PreHyphen'\n    },\n    '12': {\n        name: 'PostHyphen'\n    },\n    '13': {\n        name: 'ConsecutiveHyphens?'\n    },\n    '14': {\n        name: 'Zone'\n    },\n    '15': {\n        name: 'HypenateCapitalizedWords'\n    },\n    '17': {\n        name: 'WordSpacing'\n    },\n    '18': {\n        name: 'LetterSpacing'\n    },\n    '19': {\n        name: 'GlyphSpacing'\n    },\n    '32': {\n        name: 'StyleSheet',\n        children: $9d214166cfbe7e30$var$keysStyleSheet\n    }\n};\nvar $9d214166cfbe7e30$var$keysStyleSheetData = {\n    name: 'StyleSheetData',\n    children: $9d214166cfbe7e30$var$keysStyleSheet\n};\nvar $9d214166cfbe7e30$var$keysRoot = {\n    '0': {\n        name: 'ResourceDict',\n        children: {\n            '1': {\n                name: 'FontSet',\n                children: {\n                    '0': {\n                        uproot: true,\n                        children: {\n                            '0': {\n                                uproot: true,\n                                children: {\n                                    '0': {\n                                        uproot: true,\n                                        children: {\n                                            '0': {\n                                                name: 'Name'\n                                            },\n                                            '2': {\n                                                name: 'FontType'\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            '2': {\n                name: '2',\n                children: {}\n            },\n            '3': {\n                name: 'MojiKumiSet',\n                children: {\n                    '0': {\n                        uproot: true,\n                        children: {\n                            '0': {\n                                uproot: true,\n                                children: {\n                                    '0': {\n                                        name: 'InternalName'\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            '4': {\n                name: 'KinsokuSet',\n                children: {\n                    '0': {\n                        uproot: true,\n                        children: {\n                            '0': {\n                                uproot: true,\n                                children: {\n                                    '0': {\n                                        name: 'Name'\n                                    },\n                                    '5': {\n                                        uproot: true,\n                                        children: {\n                                            '0': {\n                                                name: 'NoStart'\n                                            },\n                                            '1': {\n                                                name: 'NoEnd'\n                                            },\n                                            '2': {\n                                                name: 'Keep'\n                                            },\n                                            '3': {\n                                                name: 'Hanging'\n                                            },\n                                            '4': {\n                                                name: 'Name'\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            '5': {\n                name: 'StyleSheetSet',\n                children: {\n                    '0': {\n                        uproot: true,\n                        children: {\n                            '0': {\n                                uproot: true,\n                                children: {\n                                    '0': {\n                                        name: 'Name'\n                                    },\n                                    '6': $9d214166cfbe7e30$var$keysStyleSheetData\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            '6': {\n                name: 'ParagraphSheetSet',\n                children: {\n                    '0': {\n                        uproot: true,\n                        children: {\n                            '0': {\n                                uproot: true,\n                                children: {\n                                    '0': {\n                                        name: 'Name'\n                                    },\n                                    '5': {\n                                        name: 'Properties',\n                                        children: $9d214166cfbe7e30$var$keysParagraph\n                                    },\n                                    '6': {\n                                        name: 'DefaultStyleSheet'\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            '8': {\n                name: 'TextFrameSet',\n                children: {\n                    '0': {\n                        uproot: true,\n                        children: {\n                            '0': {\n                                name: 'path',\n                                children: {\n                                    '0': {\n                                        name: 'name'\n                                    },\n                                    '1': {\n                                        name: 'bezierCurve',\n                                        children: {\n                                            '0': {\n                                                name: 'controlPoints'\n                                            }\n                                        }\n                                    },\n                                    '2': {\n                                        name: 'data',\n                                        children: {\n                                            '0': {\n                                                name: 'type'\n                                            },\n                                            '1': {\n                                                name: 'orientation'\n                                            },\n                                            '2': {\n                                                name: 'frameMatrix'\n                                            },\n                                            '4': {\n                                                name: '4'\n                                            },\n                                            '6': {\n                                                name: 'textRange'\n                                            },\n                                            '7': {\n                                                name: 'rowGutter'\n                                            },\n                                            '8': {\n                                                name: 'columnGutter'\n                                            },\n                                            '9': {\n                                                name: '9'\n                                            },\n                                            '10': {\n                                                name: 'baselineAlignment',\n                                                children: {\n                                                    '0': {\n                                                        name: 'flag'\n                                                    },\n                                                    '1': {\n                                                        name: 'min'\n                                                    }\n                                                }\n                                            },\n                                            '11': {\n                                                name: 'pathData',\n                                                children: {\n                                                    '1': {\n                                                        name: '1'\n                                                    },\n                                                    '0': {\n                                                        name: 'reversed'\n                                                    },\n                                                    '2': {\n                                                        name: '2'\n                                                    },\n                                                    '3': {\n                                                        name: '3'\n                                                    },\n                                                    '4': {\n                                                        name: 'spacing'\n                                                    },\n                                                    '5': {\n                                                        name: '5'\n                                                    },\n                                                    '6': {\n                                                        name: '6'\n                                                    },\n                                                    '7': {\n                                                        name: '7'\n                                                    },\n                                                    '18': {\n                                                        name: '18'\n                                                    }\n                                                }\n                                            },\n                                            '12': {\n                                                name: '12'\n                                            },\n                                            '13': {\n                                                name: '13'\n                                            }\n                                        }\n                                    },\n                                    '3': {\n                                        name: '3'\n                                    },\n                                    '97': {\n                                        name: 'uuid'\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            '9': {\n                name: 'Predefined',\n                children: {\n                    '0': {\n                        children: {\n                            '0': {\n                                uproot: true\n                            }\n                        }\n                    },\n                    '1': {\n                        children: {\n                            '0': {\n                                uproot: true\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    },\n    '1': {\n        name: 'EngineDict',\n        children: {\n            '0': {\n                name: '0',\n                children: {\n                    // 0: ???\n                    // 1: ???\n                    // 2: ???\n                    '3': {\n                        name: 'SuperscriptSize'\n                    },\n                    '4': {\n                        name: 'SuperscriptPosition'\n                    },\n                    '5': {\n                        name: 'SubscriptSize'\n                    },\n                    '6': {\n                        name: 'SubscriptPosition'\n                    },\n                    '7': {\n                        name: 'SmallCapSize'\n                    },\n                    '8': {\n                        name: 'UseFractionalGlyphWidths'\n                    },\n                    '15': {\n                        children: {\n                            '0': {\n                                uproot: true\n                            }\n                        }\n                    }\n                }\n            },\n            '1': {\n                name: 'Editors?',\n                children: {\n                    '0': {\n                        name: 'Editor',\n                        children: {\n                            '0': {\n                                name: 'Text'\n                            },\n                            '5': {\n                                name: 'ParagraphRun',\n                                children: {\n                                    '0': {\n                                        name: 'RunArray',\n                                        children: {\n                                            '0': {\n                                                name: 'ParagraphSheet',\n                                                children: {\n                                                    '0': {\n                                                        uproot: true,\n                                                        children: {\n                                                            '0': {\n                                                                name: '0'\n                                                            },\n                                                            '5': {\n                                                                name: '5',\n                                                                children: $9d214166cfbe7e30$var$keysParagraph\n                                                            },\n                                                            '6': {\n                                                                name: '6'\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            },\n                                            '1': {\n                                                name: 'RunLength'\n                                            }\n                                        }\n                                    }\n                                }\n                            },\n                            '6': {\n                                name: 'StyleRun',\n                                children: {\n                                    '0': {\n                                        name: 'RunArray',\n                                        children: {\n                                            '0': {\n                                                name: 'StyleSheet',\n                                                children: {\n                                                    '0': {\n                                                        uproot: true,\n                                                        children: {\n                                                            '6': $9d214166cfbe7e30$var$keysStyleSheetData\n                                                        }\n                                                    }\n                                                }\n                                            },\n                                            '1': {\n                                                name: 'RunLength'\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    '1': {\n                        name: 'FontVectorData ???'\n                    }\n                }\n            },\n            '2': {\n                name: 'StyleSheet',\n                children: $9d214166cfbe7e30$var$keysStyleSheet\n            },\n            '3': {\n                name: 'ParagraphSheet',\n                children: $9d214166cfbe7e30$var$keysParagraph\n            }\n        }\n    }\n};\nfunction $9d214166cfbe7e30$var$decodeObj(obj, keys) {\n    var _a, _b;\n    if (obj === null) return obj;\n    if (Array.isArray(obj)) return obj.map(function(x) {\n        return $9d214166cfbe7e30$var$decodeObj(x, keys);\n    });\n    if (typeof obj !== 'object') return obj;\n    var result = {};\n    for(var _i = 0, _c = Object.keys(obj); _i < _c.length; _i++){\n        var key = _c[_i];\n        if (keys[key]) {\n            if (keys[key].uproot) {\n                if (key !== '99') result = $9d214166cfbe7e30$var$decodeObj(obj[key], (_a = keys[key].children) !== null && _a !== void 0 ? _a : {});\n                if (obj['99']) result._type = obj['99'];\n                break;\n            } else result[keys[key].name || key] = $9d214166cfbe7e30$var$decodeObj(obj[key], (_b = keys[key].children) !== null && _b !== void 0 ? _b : {});\n        } else if (key === '99') result._type = obj[key];\n        else result[key] = $9d214166cfbe7e30$var$decodeObj(obj[key], {});\n    }\n    return result;\n}\nfunction $9d214166cfbe7e30$var$decodeEngineData2(data) {\n    return $9d214166cfbe7e30$var$decodeObj(data, $9d214166cfbe7e30$var$keysRoot);\n}\nmodule.exports.decodeEngineData2 = $9d214166cfbe7e30$var$decodeEngineData2;\n\n});\n\n\n\nparcelRegister(\"TW1B9\", function(module, exports) {\n\"use strict\";\nObject.defineProperty(module.exports, \"__esModule\", {\n    value: true\n});\nmodule.exports.readAbr = void 0;\n\nvar $klnll = parcelRequire(\"klnll\");\n\nvar $5OPaf = parcelRequire(\"5OPaf\");\nvar $0a8225ae4984856a$var$dynamicsControl = [\n    'off',\n    'fade',\n    'pen pressure',\n    'pen tilt',\n    'stylus wheel',\n    'initial direction',\n    'direction',\n    'initial rotation',\n    'rotation'\n];\nvar $0a8225ae4984856a$var$toBrushType = {\n    _: 'brush',\n    MixB: 'mixer brush',\n    SmTl: 'smudge brush'\n};\nfunction $0a8225ae4984856a$var$parseDynamics(desc) {\n    return {\n        control: $0a8225ae4984856a$var$dynamicsControl[desc.bVTy],\n        steps: desc.fStp,\n        jitter: (0, $klnll.parsePercent)(desc.jitter),\n        minimum: (0, $klnll.parsePercent)(desc['Mnm '])\n    };\n}\nfunction $0a8225ae4984856a$var$parseBrushShape(desc) {\n    var shape = {\n        size: (0, $klnll.parseUnitsToNumber)(desc.Dmtr, 'Pixels'),\n        angle: (0, $klnll.parseAngle)(desc.Angl),\n        roundness: (0, $klnll.parsePercent)(desc.Rndn),\n        spacingOn: desc.Intr,\n        spacing: (0, $klnll.parsePercent)(desc.Spcn),\n        flipX: desc.flipX,\n        flipY: desc.flipY\n    };\n    if (desc['Nm  ']) shape.name = desc['Nm  '];\n    if (desc.Hrdn) shape.hardness = (0, $klnll.parsePercent)(desc.Hrdn);\n    if (desc.sampledData) shape.sampledData = desc.sampledData;\n    return shape;\n}\nfunction $0a8225ae4984856a$var$readAbr(buffer, options) {\n    var _a, _b, _c, _d;\n    if (options === void 0) options = {};\n    var reader = (0, $5OPaf.createReader)(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n    var version = (0, $5OPaf.readInt16)(reader);\n    var samples = [];\n    var brushes = [];\n    var patterns = [];\n    if (version === 1 || version === 2) throw new Error(\"Unsupported ABR version (\".concat(version, \")\")); // TODO: ...\n    else if (version === 6 || version === 7 || version === 9 || version === 10) {\n        var minorVersion = (0, $5OPaf.readInt16)(reader);\n        if (minorVersion !== 1 && minorVersion !== 2) throw new Error('Unsupported ABR minor version');\n        while(reader.offset < reader.view.byteLength){\n            (0, $5OPaf.checkSignature)(reader, '8BIM');\n            var type = (0, $5OPaf.readSignature)(reader);\n            var size = (0, $5OPaf.readUint32)(reader);\n            var end = reader.offset + size;\n            switch(type){\n                case 'samp':\n                    while(reader.offset < end){\n                        var brushLength = (0, $5OPaf.readUint32)(reader);\n                        while(brushLength & 3)brushLength++; // pad to 4 byte alignment\n                        var brushEnd = reader.offset + brushLength;\n                        var id = (0, $5OPaf.readPascalString)(reader, 1);\n                        // v1 - Skip the Int16 bounds rectangle and the unknown Int16.\n                        // v2 - Skip the unknown bytes.\n                        (0, $5OPaf.skipBytes)(reader, minorVersion === 1 ? 10 : 264);\n                        var y = (0, $5OPaf.readInt32)(reader);\n                        var x = (0, $5OPaf.readInt32)(reader);\n                        var h = (0, $5OPaf.readInt32)(reader) - y;\n                        var w = (0, $5OPaf.readInt32)(reader) - x;\n                        if (w <= 0 || h <= 0) throw new Error('Invalid bounds');\n                        var bithDepth = (0, $5OPaf.readInt16)(reader);\n                        var compression = (0, $5OPaf.readUint8)(reader); // 0 - raw, 1 - RLE\n                        var alpha = new Uint8Array(w * h);\n                        if (bithDepth === 8) {\n                            if (compression === 0) alpha.set((0, $5OPaf.readBytes)(reader, alpha.byteLength));\n                            else if (compression === 1) (0, $5OPaf.readDataRLE)(reader, {\n                                width: w,\n                                height: h,\n                                data: alpha\n                            }, w, h, bithDepth, 1, [\n                                0\n                            ], false);\n                            else throw new Error('Invalid compression');\n                        } else if (bithDepth === 16) {\n                            if (compression === 0) for(var i = 0; i < alpha.byteLength; i++)alpha[i] = (0, $5OPaf.readUint16)(reader) >> 8; // convert to 8bit values\n                            else if (compression === 1) throw new Error('not implemented (16bit RLE)'); // TODO: ...\n                            else throw new Error('Invalid compression');\n                        } else throw new Error('Invalid depth');\n                        samples.push({\n                            id: id,\n                            bounds: {\n                                x: x,\n                                y: y,\n                                w: w,\n                                h: h\n                            },\n                            alpha: alpha\n                        });\n                        reader.offset = brushEnd;\n                    }\n                    break;\n                case 'desc':\n                    var desc = (0, $klnll.readVersionAndDescriptor)(reader, true);\n                    // console.log(require('util').inspect(desc, false, 99, true));\n                    for(var _i = 0, _e = desc.Brsh; _i < _e.length; _i++){\n                        var brush = _e[_i];\n                        var b = {\n                            name: brush['Nm  '],\n                            shape: $0a8225ae4984856a$var$parseBrushShape(brush.Brsh),\n                            spacing: (0, $klnll.parsePercent)(brush.Spcn),\n                            // TODO: brushGroup ???\n                            wetEdges: brush.Wtdg,\n                            noise: brush.Nose,\n                            // TODO: TxtC ??? smoothing / build-up ?\n                            // TODO: 'Rpt ' ???\n                            useBrushSize: brush.useBrushSize\n                        };\n                        if (brush.interpretation != null) b.interpretation = brush.interpretation;\n                        if (brush.protectTexture != null) b.protectTexture = brush.protectTexture;\n                        if (brush.useTipDynamics) b.shapeDynamics = {\n                            tiltScale: (0, $klnll.parsePercent)(brush.tiltScale),\n                            sizeDynamics: $0a8225ae4984856a$var$parseDynamics(brush.szVr),\n                            angleDynamics: $0a8225ae4984856a$var$parseDynamics(brush.angleDynamics),\n                            roundnessDynamics: $0a8225ae4984856a$var$parseDynamics(brush.roundnessDynamics),\n                            flipX: brush.flipX,\n                            flipY: brush.flipY,\n                            brushProjection: brush.brushProjection,\n                            minimumDiameter: (0, $klnll.parsePercent)(brush.minimumDiameter),\n                            minimumRoundness: (0, $klnll.parsePercent)(brush.minimumRoundness)\n                        };\n                        if (brush.useScatter) b.scatter = {\n                            count: brush['Cnt '],\n                            bothAxes: brush.bothAxes,\n                            countDynamics: $0a8225ae4984856a$var$parseDynamics(brush.countDynamics),\n                            scatterDynamics: $0a8225ae4984856a$var$parseDynamics(brush.scatterDynamics)\n                        };\n                        if (brush.useTexture && brush.Txtr) b.texture = {\n                            id: brush.Txtr.Idnt,\n                            name: brush.Txtr['Nm  '],\n                            blendMode: $klnll.BlnM.decode(brush.textureBlendMode),\n                            depth: (0, $klnll.parsePercent)(brush.textureDepth),\n                            depthMinimum: (0, $klnll.parsePercent)(brush.minimumDepth),\n                            depthDynamics: $0a8225ae4984856a$var$parseDynamics(brush.textureDepthDynamics),\n                            scale: (0, $klnll.parsePercent)(brush.textureScale),\n                            invert: brush.InvT,\n                            brightness: brush.textureBrightness,\n                            contrast: brush.textureContrast\n                        };\n                        var db = brush.dualBrush;\n                        if (db && db.useDualBrush) b.dualBrush = {\n                            flip: db.Flip,\n                            shape: $0a8225ae4984856a$var$parseBrushShape(db.Brsh),\n                            blendMode: $klnll.BlnM.decode(db.BlnM),\n                            useScatter: db.useScatter,\n                            spacing: (0, $klnll.parsePercent)(db.Spcn),\n                            count: db['Cnt '],\n                            bothAxes: db.bothAxes,\n                            countDynamics: $0a8225ae4984856a$var$parseDynamics(db.countDynamics),\n                            scatterDynamics: $0a8225ae4984856a$var$parseDynamics(db.scatterDynamics)\n                        };\n                        if (brush.useColorDynamics) b.colorDynamics = {\n                            foregroundBackground: $0a8225ae4984856a$var$parseDynamics(brush.clVr),\n                            hue: (0, $klnll.parsePercent)(brush['H   ']),\n                            saturation: (0, $klnll.parsePercent)(brush.Strt),\n                            brightness: (0, $klnll.parsePercent)(brush.Brgh),\n                            purity: (0, $klnll.parsePercent)(brush.purity),\n                            perTip: brush.colorDynamicsPerTip\n                        };\n                        if (brush.usePaintDynamics) b.transfer = {\n                            flowDynamics: $0a8225ae4984856a$var$parseDynamics(brush.prVr),\n                            opacityDynamics: $0a8225ae4984856a$var$parseDynamics(brush.opVr),\n                            wetnessDynamics: $0a8225ae4984856a$var$parseDynamics(brush.wtVr),\n                            mixDynamics: $0a8225ae4984856a$var$parseDynamics(brush.mxVr)\n                        };\n                        if (brush.useBrushPose) b.brushPose = {\n                            overrideAngle: brush.overridePoseAngle,\n                            overrideTiltX: brush.overridePoseTiltX,\n                            overrideTiltY: brush.overridePoseTiltY,\n                            overridePressure: brush.overridePosePressure,\n                            pressure: (0, $klnll.parsePercent)(brush.brushPosePressure),\n                            tiltX: brush.brushPoseTiltX,\n                            tiltY: brush.brushPoseTiltY,\n                            angle: brush.brushPoseAngle\n                        };\n                        var to = brush.toolOptions;\n                        if (to) {\n                            b.toolOptions = {\n                                type: $0a8225ae4984856a$var$toBrushType[to._classID] || 'brush',\n                                brushPreset: to.brushPreset,\n                                flow: (_a = to.flow) !== null && _a !== void 0 ? _a : 100,\n                                smooth: (_b = to.Smoo) !== null && _b !== void 0 ? _b : 0,\n                                mode: $klnll.BlnM.decode(to['Md  '] || 'BlnM.Nrml'),\n                                opacity: (_c = to.Opct) !== null && _c !== void 0 ? _c : 100,\n                                smoothing: !!to.smoothing,\n                                smoothingValue: to.smoothingValue || 0,\n                                smoothingRadiusMode: !!to.smoothingRadiusMode,\n                                smoothingCatchup: !!to.smoothingCatchup,\n                                smoothingCatchupAtEnd: !!to.smoothingCatchupAtEnd,\n                                smoothingZoomCompensation: !!to.smoothingZoomCompensation,\n                                pressureSmoothing: !!to.pressureSmoothing,\n                                usePressureOverridesSize: !!to.usePressureOverridesSize,\n                                usePressureOverridesOpacity: !!to.usePressureOverridesOpacity,\n                                useLegacy: !!to.useLegacy\n                            };\n                            if (to.prVr) b.toolOptions.flowDynamics = $0a8225ae4984856a$var$parseDynamics(to.prVr);\n                            if (to.opVr) b.toolOptions.opacityDynamics = $0a8225ae4984856a$var$parseDynamics(to.opVr);\n                            if (to.szVr) b.toolOptions.sizeDynamics = $0a8225ae4984856a$var$parseDynamics(to.szVr);\n                            if ('wetness' in to) b.toolOptions.wetness = to.wetness;\n                            if ('dryness' in to) b.toolOptions.dryness = to.dryness;\n                            if ('mix' in to) b.toolOptions.mix = to.mix;\n                            if ('autoFill' in to) b.toolOptions.autoFill = to.autoFill;\n                            if ('autoClean' in to) b.toolOptions.autoClean = to.autoClean;\n                            if ('loadSolidColorOnly' in to) b.toolOptions.loadSolidColorOnly = to.loadSolidColorOnly;\n                            if ('sampleAllLayers' in to) b.toolOptions.sampleAllLayers = to.sampleAllLayers;\n                            if ('SmdF' in to) b.toolOptions.smudgeFingerPainting = to.SmdF;\n                            if ('SmdS' in to) b.toolOptions.smudgeSampleAllLayers = to.SmdS;\n                            if ('Prs ' in to) b.toolOptions.strength = to['Prs '];\n                            if ('SmdF' in to) b.toolOptions.smudgeFingerPainting = to.SmdF;\n                            if ('SmdS' in to) b.toolOptions.smudgeSampleAllLayers = to.SmdS;\n                        }\n                        brushes.push(b);\n                    }\n                    break;\n                case 'patt':\n                    if (reader.offset < end) {\n                        patterns.push((0, $5OPaf.readPattern)(reader));\n                        reader.offset = end;\n                    }\n                    break;\n                case 'phry':\n                    // TODO: what is this ?\n                    var desc = (0, $klnll.readVersionAndDescriptor)(reader);\n                    if (options.logMissingFeatures) {\n                        if ((_d = desc.hierarchy) === null || _d === void 0 ? void 0 : _d.length) console.log('unhandled phry section', desc);\n                    }\n                    break;\n                default:\n                    throw new Error(\"Invalid brush type: \".concat(type));\n            }\n            // align to 4 bytes\n            while(size % 4){\n                reader.offset++;\n                size++;\n            }\n        }\n    } else throw new Error(\"Unsupported ABR version (\".concat(version, \")\"));\n    return {\n        samples: samples,\n        patterns: patterns,\n        brushes: brushes\n    };\n}\nmodule.exports.readAbr = $0a8225ae4984856a$var$readAbr;\n\n});\n\nparcelRegister(\"3vNLh\", function(module, exports) {\n\"use strict\";\nvar $28eaddf107490bfc$var$__assign = module.exports && module.exports.__assign || function() {\n    $28eaddf107490bfc$var$__assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return $28eaddf107490bfc$var$__assign.apply(this, arguments);\n};\nObject.defineProperty(module.exports, \"__esModule\", {\n    value: true\n});\nmodule.exports.readCsh = void 0;\n\nvar $cAUqy = parcelRequire(\"cAUqy\");\n\nvar $5OPaf = parcelRequire(\"5OPaf\");\nfunction $28eaddf107490bfc$var$readCsh(buffer) {\n    var reader = (0, $5OPaf.createReader)(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n    var csh = {\n        shapes: []\n    };\n    (0, $5OPaf.checkSignature)(reader, 'cush');\n    if ((0, $5OPaf.readUint32)(reader) !== 2) throw new Error('Invalid version');\n    var count = (0, $5OPaf.readUint32)(reader);\n    for(var i = 0; i < count; i++){\n        var name_1 = (0, $5OPaf.readUnicodeString)(reader);\n        while(reader.offset % 4)reader.offset++; // pad to 4byte bounds\n        if ((0, $5OPaf.readUint32)(reader) !== 1) throw new Error('Invalid shape version');\n        var size = (0, $5OPaf.readUint32)(reader);\n        var end = reader.offset + size;\n        var id = (0, $5OPaf.readPascalString)(reader, 1);\n        // this might not be correct ???\n        var y1 = (0, $5OPaf.readUint32)(reader);\n        var x1 = (0, $5OPaf.readUint32)(reader);\n        var y2 = (0, $5OPaf.readUint32)(reader);\n        var x2 = (0, $5OPaf.readUint32)(reader);\n        var width = x2 - x1;\n        var height = y2 - y1;\n        var mask = {\n            paths: []\n        };\n        (0, $cAUqy.readVectorMask)(reader, mask, width, height, end - reader.offset);\n        csh.shapes.push($28eaddf107490bfc$var$__assign({\n            name: name_1,\n            id: id,\n            width: width,\n            height: height\n        }, mask));\n        reader.offset = end;\n    }\n    return csh;\n}\nmodule.exports.readCsh = $28eaddf107490bfc$var$readCsh;\n\n});\n\nparcelRegister(\"cKsyM\", function(module, exports) {\n\"use strict\";\nObject.defineProperty(module.exports, \"__esModule\", {\n    value: true\n});\nmodule.exports.LayerCompCapturedInfo = module.exports.SectionDividerType = module.exports.ColorMode = void 0;\nvar $947fef523b1cc421$var$ColorMode;\n(function(ColorMode) {\n    ColorMode[ColorMode[\"Bitmap\"] = 0] = \"Bitmap\";\n    ColorMode[ColorMode[\"Grayscale\"] = 1] = \"Grayscale\";\n    ColorMode[ColorMode[\"Indexed\"] = 2] = \"Indexed\";\n    ColorMode[ColorMode[\"RGB\"] = 3] = \"RGB\";\n    ColorMode[ColorMode[\"CMYK\"] = 4] = \"CMYK\";\n    ColorMode[ColorMode[\"Multichannel\"] = 7] = \"Multichannel\";\n    ColorMode[ColorMode[\"Duotone\"] = 8] = \"Duotone\";\n    ColorMode[ColorMode[\"Lab\"] = 9] = \"Lab\";\n})($947fef523b1cc421$var$ColorMode = module.exports.ColorMode || (module.exports.ColorMode = {}));\nvar $947fef523b1cc421$var$SectionDividerType;\n(function(SectionDividerType) {\n    SectionDividerType[SectionDividerType[\"Other\"] = 0] = \"Other\";\n    SectionDividerType[SectionDividerType[\"OpenFolder\"] = 1] = \"OpenFolder\";\n    SectionDividerType[SectionDividerType[\"ClosedFolder\"] = 2] = \"ClosedFolder\";\n    SectionDividerType[SectionDividerType[\"BoundingSectionDivider\"] = 3] = \"BoundingSectionDivider\";\n})($947fef523b1cc421$var$SectionDividerType = module.exports.SectionDividerType || (module.exports.SectionDividerType = {}));\nvar $947fef523b1cc421$var$LayerCompCapturedInfo;\n(function(LayerCompCapturedInfo) {\n    LayerCompCapturedInfo[LayerCompCapturedInfo[\"None\"] = 0] = \"None\";\n    LayerCompCapturedInfo[LayerCompCapturedInfo[\"Visibility\"] = 1] = \"Visibility\";\n    LayerCompCapturedInfo[LayerCompCapturedInfo[\"Position\"] = 2] = \"Position\";\n    LayerCompCapturedInfo[LayerCompCapturedInfo[\"Appearance\"] = 4] = \"Appearance\";\n})($947fef523b1cc421$var$LayerCompCapturedInfo = module.exports.LayerCompCapturedInfo || (module.exports.LayerCompCapturedInfo = {}));\n\n});\n\n\n})();\n//# sourceMappingURL=dist.9a7dd667.js.map\n","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.writePsdBuffer = exports.writePsdUint8Array = exports.writePsd = exports.readPsd = exports.byteArrayToBase64 = exports.initializeCanvas = void 0;\r\nvar psdWriter_1 = require(\"./psdWriter\");\r\nvar psdReader_1 = require(\"./psdReader\");\r\nvar base64_js_1 = require(\"base64-js\");\r\n__exportStar(require(\"./abr\"), exports);\r\n__exportStar(require(\"./csh\"), exports);\r\nvar helpers_1 = require(\"./helpers\");\r\nObject.defineProperty(exports, \"initializeCanvas\", { enumerable: true, get: function () { return helpers_1.initializeCanvas; } });\r\n__exportStar(require(\"./psd\"), exports);\r\nexports.byteArrayToBase64 = base64_js_1.fromByteArray;\r\nfunction readPsd(buffer, options) {\r\n    var reader = 'buffer' in buffer ?\r\n        (0, psdReader_1.createReader)(buffer.buffer, buffer.byteOffset, buffer.byteLength) :\r\n        (0, psdReader_1.createReader)(buffer);\r\n    return (0, psdReader_1.readPsd)(reader, options);\r\n}\r\nexports.readPsd = readPsd;\r\nfunction writePsd(psd, options) {\r\n    var writer = (0, psdWriter_1.createWriter)();\r\n    (0, psdWriter_1.writePsd)(writer, psd, options);\r\n    return (0, psdWriter_1.getWriterBuffer)(writer);\r\n}\r\nexports.writePsd = writePsd;\r\nfunction writePsdUint8Array(psd, options) {\r\n    var writer = (0, psdWriter_1.createWriter)();\r\n    (0, psdWriter_1.writePsd)(writer, psd, options);\r\n    return (0, psdWriter_1.getWriterBufferNoCopy)(writer);\r\n}\r\nexports.writePsdUint8Array = writePsdUint8Array;\r\nfunction writePsdBuffer(psd, options) {\r\n    if (typeof Buffer === 'undefined') {\r\n        throw new Error('Buffer not supported on this platform');\r\n    }\r\n    return Buffer.from(writePsdUint8Array(psd, options));\r\n}\r\nexports.writePsdBuffer = writePsdBuffer;\r\n//# sourceMappingURL=index.js.map","import { Psd, ReadOptions, WriteOptions } from './psd';\nimport { PsdWriter, writePsd as writePsdInternal, getWriterBuffer, createWriter, getWriterBufferNoCopy } from './psdWriter';\nimport { PsdReader, readPsd as readPsdInternal, createReader } from './psdReader';\nimport { fromByteArray } from 'base64-js';\n\nexport * from './abr';\nexport * from './csh';\nexport { initializeCanvas } from './helpers';\nexport * from './psd';\nexport type { PsdReader, PsdWriter };\n\ninterface BufferLike {\n\tbuffer: ArrayBuffer;\n\tbyteOffset: number;\n\tbyteLength: number;\n}\n\nexport const byteArrayToBase64 = fromByteArray;\n\nexport function readPsd(buffer: ArrayBuffer | BufferLike, options?: ReadOptions): Psd {\n\tconst reader = 'buffer' in buffer ?\n\t\tcreateReader(buffer.buffer, buffer.byteOffset, buffer.byteLength) :\n\t\tcreateReader(buffer);\n\treturn readPsdInternal(reader, options);\n}\n\nexport function writePsd(psd: Psd, options?: WriteOptions): ArrayBuffer {\n\tconst writer = createWriter();\n\twritePsdInternal(writer, psd, options);\n\treturn getWriterBuffer(writer);\n}\n\nexport function writePsdUint8Array(psd: Psd, options?: WriteOptions): Uint8Array {\n\tconst writer = createWriter();\n\twritePsdInternal(writer, psd, options);\n\treturn getWriterBufferNoCopy(writer);\n}\n\nexport function writePsdBuffer(psd: Psd, options?: WriteOptions): Buffer {\n\tif (typeof Buffer === 'undefined') {\n\t\tthrow new Error('Buffer not supported on this platform');\n\t}\n\n\treturn Buffer.from(writePsdUint8Array(psd, options));\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","import { _ as _get_prototype_of } from \"./_get_prototype_of.js\";\nimport { _ as _is_native_reflect_construct } from \"./_is_native_reflect_construct.js\";\nimport { _ as _possible_constructor_return } from \"./_possible_constructor_return.js\";\n\nfunction _call_super(_this, derived, args) {\n    // Super\n    derived = _get_prototype_of(derived);\n    return _possible_constructor_return(\n        _this,\n        _is_native_reflect_construct()\n            // NOTE: This doesn't work if this.__proto__.constructor has been modified.\n            ? Reflect.construct(derived, args || [], _get_prototype_of(_this).constructor)\n            : derived.apply(_this, args)\n    );\n}\n\nexport { _call_super as _ };\n","function _get_prototype_of(o) {\n    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n\n    return _get_prototype_of(o);\n}\nexport { _get_prototype_of as _ };\n","function _is_native_reflect_construct() {\n    // Since Reflect.construct can't be properly polyfilled, some\n    // implementations (e.g. core-js@2) don't set the correct internal slots.\n    // Those polyfills don't allow us to subclass built-ins, so we need to\n    // use our fallback implementation.\n    try {\n        // If the internal slots aren't set, this throws an error similar to\n        //   TypeError: this is not a Boolean object.\n        var result = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n    } catch (_) {}\n    return (_is_native_reflect_construct = function() {\n        return !!result;\n    })();\n}\n\nexport { _is_native_reflect_construct as _ };\n","import { _ as _assert_this_initialized } from \"./_assert_this_initialized.js\";\nimport { _ as _type_of } from \"./_type_of.js\";\n\nfunction _possible_constructor_return(self, call) {\n    if (call && (_type_of(call) === \"object\" || typeof call === \"function\")) return call;\n\n    return _assert_this_initialized(self);\n}\nexport { _possible_constructor_return as _ };\n","function _assert_this_initialized(self) {\n    if (self === void 0) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\n    return self;\n}\nexport { _assert_this_initialized as _ };\n","function _type_of(obj) {\n    \"@swc/helpers - typeof\";\n\n    return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n}\nexport { _type_of as _ };\n","import { _ as _set_prototype_of } from \"./_set_prototype_of.js\";\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });\n\n    if (superClass) _set_prototype_of(subClass, superClass);\n}\nexport { _inherits as _ };\n","function _set_prototype_of(o, p) {\n    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {\n        o.__proto__ = p;\n\n        return o;\n    };\n\n    return _set_prototype_of(o, p);\n}\nexport { _set_prototype_of as _ };\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","\"use strict\";\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.writeColor = exports.writePsd = exports.writeSection = exports.writeUnicodeStringWithPadding = exports.writeUnicodeString = exports.writeUnicodeStringWithoutLengthLE = exports.writeUnicodeStringWithoutLength = exports.writePascalString = exports.writeSignature = exports.writeZeros = exports.writeBytes = exports.writeFixedPointPath32 = exports.writeFixedPoint32 = exports.writeFloat64 = exports.writeFloat32 = exports.writeUint32 = exports.writeInt32LE = exports.writeInt32 = exports.writeUint16LE = exports.writeUint16 = exports.writeInt16 = exports.writeUint8 = exports.getWriterBufferNoCopy = exports.getWriterBuffer = exports.createWriter = void 0;\r\nvar helpers_1 = require(\"./helpers\");\r\nvar additionalInfo_1 = require(\"./additionalInfo\");\r\nvar imageResources_1 = require(\"./imageResources\");\r\nfunction createWriter(size) {\r\n    if (size === void 0) { size = 4096; }\r\n    var buffer = new ArrayBuffer(size);\r\n    var view = new DataView(buffer);\r\n    var offset = 0;\r\n    return { buffer: buffer, view: view, offset: offset, tempBuffer: undefined };\r\n}\r\nexports.createWriter = createWriter;\r\nfunction getWriterBuffer(writer) {\r\n    return writer.buffer.slice(0, writer.offset);\r\n}\r\nexports.getWriterBuffer = getWriterBuffer;\r\nfunction getWriterBufferNoCopy(writer) {\r\n    return new Uint8Array(writer.buffer, 0, writer.offset);\r\n}\r\nexports.getWriterBufferNoCopy = getWriterBufferNoCopy;\r\nfunction writeUint8(writer, value) {\r\n    var offset = addSize(writer, 1);\r\n    writer.view.setUint8(offset, value);\r\n}\r\nexports.writeUint8 = writeUint8;\r\nfunction writeInt16(writer, value) {\r\n    var offset = addSize(writer, 2);\r\n    writer.view.setInt16(offset, value, false);\r\n}\r\nexports.writeInt16 = writeInt16;\r\nfunction writeUint16(writer, value) {\r\n    var offset = addSize(writer, 2);\r\n    writer.view.setUint16(offset, value, false);\r\n}\r\nexports.writeUint16 = writeUint16;\r\nfunction writeUint16LE(writer, value) {\r\n    var offset = addSize(writer, 2);\r\n    writer.view.setUint16(offset, value, true);\r\n}\r\nexports.writeUint16LE = writeUint16LE;\r\nfunction writeInt32(writer, value) {\r\n    var offset = addSize(writer, 4);\r\n    writer.view.setInt32(offset, value, false);\r\n}\r\nexports.writeInt32 = writeInt32;\r\nfunction writeInt32LE(writer, value) {\r\n    var offset = addSize(writer, 4);\r\n    writer.view.setInt32(offset, value, true);\r\n}\r\nexports.writeInt32LE = writeInt32LE;\r\nfunction writeUint32(writer, value) {\r\n    var offset = addSize(writer, 4);\r\n    writer.view.setUint32(offset, value, false);\r\n}\r\nexports.writeUint32 = writeUint32;\r\nfunction writeFloat32(writer, value) {\r\n    var offset = addSize(writer, 4);\r\n    writer.view.setFloat32(offset, value, false);\r\n}\r\nexports.writeFloat32 = writeFloat32;\r\nfunction writeFloat64(writer, value) {\r\n    var offset = addSize(writer, 8);\r\n    writer.view.setFloat64(offset, value, false);\r\n}\r\nexports.writeFloat64 = writeFloat64;\r\n// 32-bit fixed-point number 16.16\r\nfunction writeFixedPoint32(writer, value) {\r\n    writeInt32(writer, value * (1 << 16));\r\n}\r\nexports.writeFixedPoint32 = writeFixedPoint32;\r\n// 32-bit fixed-point number 8.24\r\nfunction writeFixedPointPath32(writer, value) {\r\n    writeInt32(writer, value * (1 << 24));\r\n}\r\nexports.writeFixedPointPath32 = writeFixedPointPath32;\r\nfunction writeBytes(writer, buffer) {\r\n    if (buffer) {\r\n        ensureSize(writer, writer.offset + buffer.length);\r\n        var bytes = new Uint8Array(writer.buffer);\r\n        bytes.set(buffer, writer.offset);\r\n        writer.offset += buffer.length;\r\n    }\r\n}\r\nexports.writeBytes = writeBytes;\r\nfunction writeZeros(writer, count) {\r\n    for (var i = 0; i < count; i++) {\r\n        writeUint8(writer, 0);\r\n    }\r\n}\r\nexports.writeZeros = writeZeros;\r\nfunction writeSignature(writer, signature) {\r\n    if (signature.length !== 4)\r\n        throw new Error(\"Invalid signature: '\".concat(signature, \"'\"));\r\n    for (var i = 0; i < 4; i++) {\r\n        writeUint8(writer, signature.charCodeAt(i));\r\n    }\r\n}\r\nexports.writeSignature = writeSignature;\r\nfunction writePascalString(writer, text, padTo) {\r\n    var length = text.length;\r\n    if (length > 255)\r\n        throw new Error(\"String too long\");\r\n    writeUint8(writer, length);\r\n    for (var i = 0; i < length; i++) {\r\n        var code = text.charCodeAt(i);\r\n        // writeUint8(writer, code); // for testing\r\n        writeUint8(writer, code < 128 ? code : '?'.charCodeAt(0));\r\n    }\r\n    while (++length % padTo) {\r\n        writeUint8(writer, 0);\r\n    }\r\n}\r\nexports.writePascalString = writePascalString;\r\nfunction writeUnicodeStringWithoutLength(writer, text) {\r\n    for (var i = 0; i < text.length; i++) {\r\n        writeUint16(writer, text.charCodeAt(i));\r\n    }\r\n}\r\nexports.writeUnicodeStringWithoutLength = writeUnicodeStringWithoutLength;\r\nfunction writeUnicodeStringWithoutLengthLE(writer, text) {\r\n    for (var i = 0; i < text.length; i++) {\r\n        writeUint16LE(writer, text.charCodeAt(i));\r\n    }\r\n}\r\nexports.writeUnicodeStringWithoutLengthLE = writeUnicodeStringWithoutLengthLE;\r\nfunction writeUnicodeString(writer, text) {\r\n    writeUint32(writer, text.length);\r\n    writeUnicodeStringWithoutLength(writer, text);\r\n}\r\nexports.writeUnicodeString = writeUnicodeString;\r\nfunction writeUnicodeStringWithPadding(writer, text) {\r\n    writeUint32(writer, text.length + 1);\r\n    for (var i = 0; i < text.length; i++) {\r\n        writeUint16(writer, text.charCodeAt(i));\r\n    }\r\n    writeUint16(writer, 0);\r\n}\r\nexports.writeUnicodeStringWithPadding = writeUnicodeStringWithPadding;\r\nfunction getLargestLayerSize(layers) {\r\n    if (layers === void 0) { layers = []; }\r\n    var max = 0;\r\n    for (var _i = 0, layers_1 = layers; _i < layers_1.length; _i++) {\r\n        var layer = layers_1[_i];\r\n        if (layer.canvas || layer.imageData) {\r\n            var _a = getLayerDimentions(layer), width = _a.width, height = _a.height;\r\n            max = Math.max(max, 2 * height + 2 * width * height);\r\n        }\r\n        if (layer.children) {\r\n            max = Math.max(max, getLargestLayerSize(layer.children));\r\n        }\r\n    }\r\n    return max;\r\n}\r\nfunction writeSection(writer, round, func, writeTotalLength, large) {\r\n    if (writeTotalLength === void 0) { writeTotalLength = false; }\r\n    if (large === void 0) { large = false; }\r\n    if (large)\r\n        writeUint32(writer, 0);\r\n    var offset = writer.offset;\r\n    writeUint32(writer, 0);\r\n    func();\r\n    var length = writer.offset - offset - 4;\r\n    var len = length;\r\n    while ((len % round) !== 0) {\r\n        writeUint8(writer, 0);\r\n        len++;\r\n    }\r\n    // while ((writer.offset % round) !== 0) {\r\n    // \twriteUint8(writer, 0);\r\n    // \tlen++;\r\n    // }\r\n    if (writeTotalLength) {\r\n        length = len;\r\n    }\r\n    writer.view.setUint32(offset, length, false);\r\n}\r\nexports.writeSection = writeSection;\r\nfunction verifyBitCount(target) {\r\n    var _a;\r\n    (_a = target.children) === null || _a === void 0 ? void 0 : _a.forEach(verifyBitCount);\r\n    var data = target.imageData;\r\n    if (data && (data.data instanceof Uint32Array || data.data instanceof Uint16Array)) {\r\n        throw new Error('imageData has incorrect bitDepth');\r\n    }\r\n    if ('mask' in target && target.mask) {\r\n        var data_1 = target.mask.imageData;\r\n        if (data_1 && (data_1.data instanceof Uint32Array || data_1.data instanceof Uint16Array)) {\r\n            throw new Error('mask imageData has incorrect bitDepth');\r\n        }\r\n    }\r\n}\r\nfunction writePsd(writer, psd, options) {\r\n    var _a;\r\n    if (options === void 0) { options = {}; }\r\n    if (!(+psd.width > 0 && +psd.height > 0))\r\n        throw new Error('Invalid document size');\r\n    if ((psd.width > 30000 || psd.height > 30000) && !options.psb)\r\n        throw new Error('Document size is too large (max is 30000x30000, use PSB format instead)');\r\n    var bitsPerChannel = (_a = psd.bitsPerChannel) !== null && _a !== void 0 ? _a : 8;\r\n    if (bitsPerChannel !== 8)\r\n        throw new Error('bitsPerChannel other than 8 are not supported for writing');\r\n    verifyBitCount(psd);\r\n    var imageResources = __assign({}, psd.imageResources);\r\n    var opt = __assign(__assign({}, options), { layerIds: new Set(), layerToId: new Map() });\r\n    if (opt.generateThumbnail) {\r\n        imageResources.thumbnail = createThumbnail(psd);\r\n    }\r\n    var imageData = psd.imageData;\r\n    if (!imageData && psd.canvas) {\r\n        imageData = psd.canvas.getContext('2d').getImageData(0, 0, psd.canvas.width, psd.canvas.height);\r\n    }\r\n    if (imageData && (psd.width !== imageData.width || psd.height !== imageData.height))\r\n        throw new Error('Document canvas must have the same size as document');\r\n    var globalAlpha = !!imageData && (0, helpers_1.hasAlpha)(imageData);\r\n    var maxBufferSize = Math.max(getLargestLayerSize(psd.children), 4 * 2 * psd.width * psd.height + 2 * psd.height);\r\n    writer.tempBuffer = new Uint8Array(maxBufferSize);\r\n    // header\r\n    writeSignature(writer, '8BPS');\r\n    writeUint16(writer, options.psb ? 2 : 1); // version\r\n    writeZeros(writer, 6);\r\n    writeUint16(writer, globalAlpha ? 4 : 3); // channels\r\n    writeUint32(writer, psd.height);\r\n    writeUint32(writer, psd.width);\r\n    writeUint16(writer, bitsPerChannel); // bits per channel\r\n    writeUint16(writer, 3 /* ColorMode.RGB */); // we only support saving RGB right now\r\n    // color mode data\r\n    writeSection(writer, 1, function () {\r\n        var _a, _b, _c;\r\n        if (psd.palette) {\r\n            for (var i = 0; i < 256; i++)\r\n                writeUint8(writer, ((_a = psd.palette[i]) === null || _a === void 0 ? void 0 : _a.r) || 0);\r\n            for (var i = 0; i < 256; i++)\r\n                writeUint8(writer, ((_b = psd.palette[i]) === null || _b === void 0 ? void 0 : _b.g) || 0);\r\n            for (var i = 0; i < 256; i++)\r\n                writeUint8(writer, ((_c = psd.palette[i]) === null || _c === void 0 ? void 0 : _c.b) || 0);\r\n        }\r\n        // TODO: other data?\r\n    });\r\n    var layers = [];\r\n    addChildren(layers, psd.children);\r\n    if (!layers.length)\r\n        layers.push({});\r\n    // image resources\r\n    imageResources.layersGroup = layers.map(function (l) { return l.linkGroup || 0; });\r\n    imageResources.layerGroupsEnabledId = layers.map(function (l) { return l.linkGroupEnabled == false ? 0 : 1; });\r\n    writeSection(writer, 1, function () {\r\n        var _loop_1 = function (handler) {\r\n            var has = handler.has(imageResources);\r\n            var count = has === false ? 0 : (has === true ? 1 : has);\r\n            var _loop_2 = function (i) {\r\n                writeSignature(writer, '8BIM');\r\n                writeUint16(writer, handler.key);\r\n                writePascalString(writer, '', 2);\r\n                writeSection(writer, 2, function () { return handler.write(writer, imageResources, i); });\r\n            };\r\n            for (var i = 0; i < count; i++) {\r\n                _loop_2(i);\r\n            }\r\n        };\r\n        for (var _i = 0, resourceHandlers_1 = imageResources_1.resourceHandlers; _i < resourceHandlers_1.length; _i++) {\r\n            var handler = resourceHandlers_1[_i];\r\n            _loop_1(handler);\r\n        }\r\n    });\r\n    // layer and mask info\r\n    writeSection(writer, 2, function () {\r\n        writeLayerInfo(writer, layers, psd, globalAlpha, opt);\r\n        writeGlobalLayerMaskInfo(writer, psd.globalLayerMaskInfo);\r\n        writeAdditionalLayerInfo(writer, psd, psd, opt);\r\n    }, undefined, !!opt.psb);\r\n    // image data\r\n    var channels = globalAlpha ? [0, 1, 2, 3] : [0, 1, 2];\r\n    var width = imageData ? imageData.width : psd.width;\r\n    var height = imageData ? imageData.height : psd.height;\r\n    var data = { data: new Uint8Array(width * height * 4), width: width, height: height };\r\n    writeUint16(writer, 1 /* Compression.RleCompressed */); // Photoshop doesn't support zip compression of composite image data\r\n    if (helpers_1.RAW_IMAGE_DATA && psd.imageDataRaw) {\r\n        console.log('writing raw image data');\r\n        writeBytes(writer, psd.imageDataRaw);\r\n    }\r\n    else {\r\n        if (imageData)\r\n            data.data.set(new Uint8Array(imageData.data.buffer, imageData.data.byteOffset, imageData.data.byteLength));\r\n        // add weird white matte\r\n        if (globalAlpha) {\r\n            var size = data.width * data.height * 4;\r\n            var p = data.data;\r\n            for (var i = 0; i < size; i += 4) {\r\n                var pa = p[i + 3];\r\n                if (pa != 0 && pa != 255) {\r\n                    var a = pa / 255;\r\n                    var ra = 255 * (1 - a);\r\n                    p[i + 0] = p[i + 0] * a + ra;\r\n                    p[i + 1] = p[i + 1] * a + ra;\r\n                    p[i + 2] = p[i + 2] * a + ra;\r\n                }\r\n            }\r\n        }\r\n        writeBytes(writer, (0, helpers_1.writeDataRLE)(writer.tempBuffer, data, channels, !!options.psb));\r\n    }\r\n}\r\nexports.writePsd = writePsd;\r\nfunction writeLayerInfo(writer, layers, psd, globalAlpha, options) {\r\n    writeSection(writer, 4, function () {\r\n        var _a;\r\n        writeInt16(writer, globalAlpha ? -layers.length : layers.length);\r\n        var layersData = layers.map(function (l, i) { return getChannels(writer.tempBuffer, l, i === 0, options); });\r\n        var _loop_3 = function (layerData) {\r\n            var layer = layerData.layer, top_1 = layerData.top, left = layerData.left, bottom = layerData.bottom, right = layerData.right, channels = layerData.channels;\r\n            writeInt32(writer, top_1);\r\n            writeInt32(writer, left);\r\n            writeInt32(writer, bottom);\r\n            writeInt32(writer, right);\r\n            writeUint16(writer, channels.length);\r\n            for (var _e = 0, channels_1 = channels; _e < channels_1.length; _e++) {\r\n                var c = channels_1[_e];\r\n                writeInt16(writer, c.channelId);\r\n                if (options.psb)\r\n                    writeUint32(writer, 0);\r\n                writeUint32(writer, c.length);\r\n            }\r\n            writeSignature(writer, '8BIM');\r\n            writeSignature(writer, helpers_1.fromBlendMode[layer.blendMode] || 'norm');\r\n            writeUint8(writer, Math.round((0, helpers_1.clamp)((_a = layer.opacity) !== null && _a !== void 0 ? _a : 1, 0, 1) * 255));\r\n            writeUint8(writer, layer.clipping ? 1 : 0);\r\n            var flags = 0x08; // 1 for Photoshop 5.0 and later, tells if bit 4 has useful information\r\n            if (layer.transparencyProtected)\r\n                flags |= 0x01;\r\n            if (layer.hidden)\r\n                flags |= 0x02;\r\n            if (layer.vectorMask || (layer.sectionDivider && layer.sectionDivider.type !== 0 /* SectionDividerType.Other */) || layer.adjustment) {\r\n                flags |= 0x10; // pixel data irrelevant to appearance of document\r\n            }\r\n            if (layer.effectsOpen)\r\n                flags |= 0x20;\r\n            writeUint8(writer, flags);\r\n            writeUint8(writer, 0); // filler\r\n            writeSection(writer, 1, function () {\r\n                writeLayerMaskData(writer, layer, layerData);\r\n                writeLayerBlendingRanges(writer, layer);\r\n                writePascalString(writer, (layer.name || '').substring(0, 255), 4);\r\n                writeAdditionalLayerInfo(writer, layer, psd, options);\r\n            });\r\n        };\r\n        // layer records\r\n        for (var _i = 0, layersData_1 = layersData; _i < layersData_1.length; _i++) {\r\n            var layerData = layersData_1[_i];\r\n            _loop_3(layerData);\r\n        }\r\n        // layer channel image data\r\n        for (var _b = 0, layersData_2 = layersData; _b < layersData_2.length; _b++) {\r\n            var layerData = layersData_2[_b];\r\n            for (var _c = 0, _d = layerData.channels; _c < _d.length; _c++) {\r\n                var channel = _d[_c];\r\n                writeUint16(writer, channel.compression);\r\n                if (channel.buffer) {\r\n                    writeBytes(writer, channel.buffer);\r\n                }\r\n            }\r\n        }\r\n    }, true, options.psb);\r\n}\r\nfunction writeLayerMaskData(writer, _a, layerData) {\r\n    var mask = _a.mask, realMask = _a.realMask;\r\n    writeSection(writer, 1, function () {\r\n        if (!mask && !realMask)\r\n            return;\r\n        var params = 0, flags = 0, realFlags = 0;\r\n        if (mask) {\r\n            if (mask.userMaskDensity !== undefined)\r\n                params |= 1 /* MaskParams.UserMaskDensity */;\r\n            if (mask.userMaskFeather !== undefined)\r\n                params |= 2 /* MaskParams.UserMaskFeather */;\r\n            if (mask.vectorMaskDensity !== undefined)\r\n                params |= 4 /* MaskParams.VectorMaskDensity */;\r\n            if (mask.vectorMaskFeather !== undefined)\r\n                params |= 8 /* MaskParams.VectorMaskFeather */;\r\n            if (mask.disabled)\r\n                flags |= 2 /* LayerMaskFlags.LayerMaskDisabled */;\r\n            if (mask.positionRelativeToLayer)\r\n                flags |= 1 /* LayerMaskFlags.PositionRelativeToLayer */;\r\n            if (mask.fromVectorData)\r\n                flags |= 8 /* LayerMaskFlags.LayerMaskFromRenderingOtherData */;\r\n            if (params)\r\n                flags |= 16 /* LayerMaskFlags.MaskHasParametersAppliedToIt */;\r\n        }\r\n        var m = layerData.mask || {};\r\n        writeInt32(writer, m.top || 0);\r\n        writeInt32(writer, m.left || 0);\r\n        writeInt32(writer, m.bottom || 0);\r\n        writeInt32(writer, m.right || 0);\r\n        writeUint8(writer, mask && mask.defaultColor || 0);\r\n        writeUint8(writer, flags);\r\n        if (realMask) {\r\n            if (realMask.disabled)\r\n                realFlags |= 2 /* LayerMaskFlags.LayerMaskDisabled */;\r\n            if (realMask.positionRelativeToLayer)\r\n                realFlags |= 1 /* LayerMaskFlags.PositionRelativeToLayer */;\r\n            if (realMask.fromVectorData)\r\n                realFlags |= 8 /* LayerMaskFlags.LayerMaskFromRenderingOtherData */;\r\n            var r = layerData.realMask || {};\r\n            writeUint8(writer, realFlags);\r\n            writeUint8(writer, realMask.defaultColor || 0);\r\n            writeInt32(writer, r.top || 0);\r\n            writeInt32(writer, r.left || 0);\r\n            writeInt32(writer, r.bottom || 0);\r\n            writeInt32(writer, r.right || 0);\r\n        }\r\n        if (params && mask) {\r\n            writeUint8(writer, params);\r\n            if (mask.userMaskDensity !== undefined)\r\n                writeUint8(writer, Math.round(mask.userMaskDensity * 0xff));\r\n            if (mask.userMaskFeather !== undefined)\r\n                writeFloat64(writer, mask.userMaskFeather);\r\n            if (mask.vectorMaskDensity !== undefined)\r\n                writeUint8(writer, Math.round(mask.vectorMaskDensity * 0xff));\r\n            if (mask.vectorMaskFeather !== undefined)\r\n                writeFloat64(writer, mask.vectorMaskFeather);\r\n        }\r\n        writeZeros(writer, 2);\r\n    });\r\n}\r\nfunction writerBlendingRange(writer, range) {\r\n    writeUint8(writer, range[0]);\r\n    writeUint8(writer, range[1]);\r\n    writeUint8(writer, range[2]);\r\n    writeUint8(writer, range[3]);\r\n}\r\nfunction writeLayerBlendingRanges(writer, layer) {\r\n    writeSection(writer, 1, function () {\r\n        var ranges = layer.blendingRanges;\r\n        if (ranges) {\r\n            writerBlendingRange(writer, ranges.compositeGrayBlendSource);\r\n            writerBlendingRange(writer, ranges.compositeGraphBlendDestinationRange);\r\n            for (var _i = 0, _a = ranges.ranges; _i < _a.length; _i++) {\r\n                var r = _a[_i];\r\n                writerBlendingRange(writer, r.sourceRange);\r\n                writerBlendingRange(writer, r.destRange);\r\n            }\r\n        }\r\n    });\r\n}\r\nfunction writeGlobalLayerMaskInfo(writer, info) {\r\n    writeSection(writer, 1, function () {\r\n        if (info) {\r\n            writeUint16(writer, info.overlayColorSpace);\r\n            writeUint16(writer, info.colorSpace1);\r\n            writeUint16(writer, info.colorSpace2);\r\n            writeUint16(writer, info.colorSpace3);\r\n            writeUint16(writer, info.colorSpace4);\r\n            writeUint16(writer, info.opacity * 0xff);\r\n            writeUint8(writer, info.kind);\r\n            writeZeros(writer, 3);\r\n        }\r\n    });\r\n}\r\nfunction writeAdditionalLayerInfo(writer, target, psd, options) {\r\n    var _loop_4 = function (handler) {\r\n        var key = handler.key;\r\n        if (key === 'Txt2' && options.invalidateTextLayers)\r\n            return \"continue\";\r\n        if (key === 'vmsk' && options.psb)\r\n            key = 'vsms';\r\n        if (handler.has(target)) {\r\n            var large = options.psb && helpers_1.largeAdditionalInfoKeys.indexOf(key) !== -1;\r\n            var writeTotalLength = key !== 'Txt2' && key !== 'cinf' && key !== 'extn' && key !== 'CAI ' && key !== 'OCIO';\r\n            var fourBytes = key === 'Txt2' || key === 'luni' || key === 'vmsk' || key === 'artb' || key === 'artd' ||\r\n                key === 'vogk' || key === 'SoLd' || key === 'lnk2' || key === 'vscg' || key === 'vsms' || key === 'GdFl' ||\r\n                key === 'lmfx' || key === 'lrFX' || key === 'cinf' || key === 'PlLd' || key === 'Anno' || key === 'CAI ' || key === 'OCIO' || key === 'GenI' || key === 'FEid';\r\n            writeSignature(writer, large ? '8B64' : '8BIM');\r\n            writeSignature(writer, key);\r\n            writeSection(writer, fourBytes ? 4 : 2, function () {\r\n                handler.write(writer, target, psd, options);\r\n            }, writeTotalLength, large);\r\n        }\r\n    };\r\n    for (var _i = 0, infoHandlers_1 = additionalInfo_1.infoHandlers; _i < infoHandlers_1.length; _i++) {\r\n        var handler = infoHandlers_1[_i];\r\n        _loop_4(handler);\r\n    }\r\n}\r\nfunction addChildren(layers, children) {\r\n    if (!children)\r\n        return;\r\n    // const layerIds: number[] = [2];\r\n    // const timestamps: number[] = [1740120767.0230637];\r\n    for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {\r\n        var c = children_1[_i];\r\n        if (c.children && c.canvas)\r\n            throw new Error(\"Invalid layer, cannot have both 'canvas' and 'children' properties\");\r\n        if (c.children && c.imageData)\r\n            throw new Error(\"Invalid layer, cannot have both 'imageData' and 'children' properties\");\r\n        if (c.children) {\r\n            layers.push({\r\n                name: '</Layer group>',\r\n                sectionDivider: {\r\n                    type: 3 /* SectionDividerType.BoundingSectionDivider */,\r\n                },\r\n                // blendingRanges: children[0].blendingRanges,\r\n                // nameSource: 'lset',\r\n                // id: layerIds.shift(),\r\n                // protected: {\r\n                // \ttransparency: false,\r\n                // \tcomposite: false,\r\n                // \tposition: false,\r\n                // },\r\n                // layerColor: 'red',\r\n                // timestamp: timestamps.shift(),\r\n                // referencePoint: { x: 0, y: 0 },\r\n            });\r\n            addChildren(layers, c.children);\r\n            layers.push(__assign(__assign({}, c), { blendMode: c.blendMode === 'pass through' ? 'normal' : c.blendMode, sectionDivider: {\r\n                    type: c.opened === false ? 2 /* SectionDividerType.ClosedFolder */ : 1 /* SectionDividerType.OpenFolder */,\r\n                    key: helpers_1.fromBlendMode[c.blendMode] || 'pass',\r\n                    subType: 0,\r\n                } }));\r\n        }\r\n        else {\r\n            layers.push(__assign({}, c));\r\n        }\r\n    }\r\n}\r\nfunction resizeBuffer(writer, size) {\r\n    var newLength = writer.buffer.byteLength;\r\n    do {\r\n        newLength *= 2;\r\n    } while (size > newLength);\r\n    var newBuffer = new ArrayBuffer(newLength);\r\n    var newBytes = new Uint8Array(newBuffer);\r\n    var oldBytes = new Uint8Array(writer.buffer);\r\n    newBytes.set(oldBytes);\r\n    writer.buffer = newBuffer;\r\n    writer.view = new DataView(writer.buffer);\r\n}\r\nfunction ensureSize(writer, size) {\r\n    if (size > writer.buffer.byteLength) {\r\n        resizeBuffer(writer, size);\r\n    }\r\n}\r\nfunction addSize(writer, size) {\r\n    var offset = writer.offset;\r\n    ensureSize(writer, writer.offset += size);\r\n    return offset;\r\n}\r\nfunction createThumbnail(psd) {\r\n    var canvas = (0, helpers_1.createCanvas)(10, 10);\r\n    var scale = 1;\r\n    if (psd.width > psd.height) {\r\n        canvas.width = 160;\r\n        canvas.height = Math.floor(psd.height * (canvas.width / psd.width));\r\n        scale = canvas.width / psd.width;\r\n    }\r\n    else {\r\n        canvas.height = 160;\r\n        canvas.width = Math.floor(psd.width * (canvas.height / psd.height));\r\n        scale = canvas.height / psd.height;\r\n    }\r\n    var context = canvas.getContext('2d');\r\n    context.scale(scale, scale);\r\n    if (psd.imageData) {\r\n        context.drawImage((0, helpers_1.imageDataToCanvas)(psd.imageData), 0, 0);\r\n    }\r\n    else if (psd.canvas) {\r\n        context.drawImage(psd.canvas, 0, 0);\r\n    }\r\n    return canvas;\r\n}\r\nfunction getMaskChannels(tempBuffer, layerData, layer, mask, options, realMask) {\r\n    var top = mask.top | 0;\r\n    var left = mask.left | 0;\r\n    var right = mask.right | 0;\r\n    var bottom = mask.bottom | 0;\r\n    var _a = getLayerDimentions(mask), width = _a.width, height = _a.height;\r\n    var imageData = mask.imageData;\r\n    if (!imageData && mask.canvas && width && height) {\r\n        imageData = mask.canvas.getContext('2d').getImageData(0, 0, width, height);\r\n    }\r\n    if (width && height && imageData) {\r\n        right = left + width;\r\n        bottom = top + height;\r\n        if (imageData.width !== width || imageData.height !== height) {\r\n            throw new Error('Invalid imageData dimentions');\r\n        }\r\n        var buffer = void 0;\r\n        var compression = void 0;\r\n        if (helpers_1.RAW_IMAGE_DATA && layer[realMask ? 'realMaskDataRaw' : 'maskDataRaw']) {\r\n            buffer = layer[realMask ? 'realMaskDataRaw' : 'maskDataRaw'];\r\n            compression = layer[realMask ? 'realMaskDataRawCompression' : 'maskDataRawCompression'];\r\n        }\r\n        else if (options.compress) {\r\n            buffer = (0, helpers_1.writeDataZipWithoutPrediction)(imageData, [0]);\r\n            compression = 2 /* Compression.ZipWithoutPrediction */;\r\n        }\r\n        else {\r\n            buffer = (0, helpers_1.writeDataRLE)(tempBuffer, imageData, [0], !!options.psb);\r\n            compression = 1 /* Compression.RleCompressed */;\r\n        }\r\n        layerData.channels.push({ channelId: realMask ? -3 /* ChannelID.RealUserMask */ : -2 /* ChannelID.UserMask */, compression: compression, buffer: buffer, length: 2 + buffer.length });\r\n    }\r\n    layerData[realMask ? 'realMask' : 'mask'] = { top: top, left: left, right: right, bottom: bottom };\r\n}\r\nfunction getChannels(tempBuffer, layer, background, options) {\r\n    var layerData = getLayerChannels(tempBuffer, layer, background, options);\r\n    if (layer.mask)\r\n        getMaskChannels(tempBuffer, layerData, layer, layer.mask, options, false);\r\n    if (layer.realMask)\r\n        getMaskChannels(tempBuffer, layerData, layer, layer.realMask, options, true);\r\n    return layerData;\r\n}\r\nfunction getLayerDimentions(_a) {\r\n    var canvas = _a.canvas, imageData = _a.imageData;\r\n    return imageData || canvas || { width: 0, height: 0 };\r\n}\r\nfunction cropImageData(data, left, top, width, height) {\r\n    if (data.data instanceof Uint32Array || data.data instanceof Uint16Array) {\r\n        throw new Error('imageData has incorrect bit depth');\r\n    }\r\n    var croppedData = (0, helpers_1.createImageData)(width, height);\r\n    var srcData = data.data;\r\n    var dstData = croppedData.data;\r\n    for (var y = 0; y < height; y++) {\r\n        for (var x = 0; x < width; x++) {\r\n            var src = ((x + left) + (y + top) * data.width) * 4;\r\n            var dst = (x + y * width) * 4;\r\n            dstData[dst] = srcData[src];\r\n            dstData[dst + 1] = srcData[src + 1];\r\n            dstData[dst + 2] = srcData[src + 2];\r\n            dstData[dst + 3] = srcData[src + 3];\r\n        }\r\n    }\r\n    return croppedData;\r\n}\r\nfunction getLayerChannels(tempBuffer, layer, background, options) {\r\n    var _a;\r\n    var top = layer.top | 0;\r\n    var left = layer.left | 0;\r\n    var right = layer.right | 0;\r\n    var bottom = layer.bottom | 0;\r\n    var channels = [\r\n        { channelId: -1 /* ChannelID.Transparency */, compression: 0 /* Compression.RawData */, buffer: undefined, length: 2 },\r\n        { channelId: 0 /* ChannelID.Color0 */, compression: 0 /* Compression.RawData */, buffer: undefined, length: 2 },\r\n        { channelId: 1 /* ChannelID.Color1 */, compression: 0 /* Compression.RawData */, buffer: undefined, length: 2 },\r\n        { channelId: 2 /* ChannelID.Color2 */, compression: 0 /* Compression.RawData */, buffer: undefined, length: 2 },\r\n    ];\r\n    var _b = getLayerDimentions(layer), width = _b.width, height = _b.height;\r\n    if (!(layer.canvas || layer.imageData) || !width || !height) {\r\n        right = left;\r\n        bottom = top;\r\n        return { layer: layer, top: top, left: left, right: right, bottom: bottom, channels: channels };\r\n    }\r\n    right = left + width;\r\n    bottom = top + height;\r\n    var data = layer.imageData || layer.canvas.getContext('2d').getImageData(0, 0, width, height);\r\n    if (options.trimImageData) {\r\n        var trimmed = trimData(data);\r\n        if (trimmed.left !== 0 || trimmed.top !== 0 || trimmed.right !== data.width || trimmed.bottom !== data.height) {\r\n            left += trimmed.left;\r\n            top += trimmed.top;\r\n            right -= (data.width - trimmed.right);\r\n            bottom -= (data.height - trimmed.bottom);\r\n            width = right - left;\r\n            height = bottom - top;\r\n            if (!width || !height)\r\n                return { layer: layer, top: top, left: left, right: right, bottom: bottom, channels: channels };\r\n            data = cropImageData(data, trimmed.left, trimmed.top, width, height);\r\n        }\r\n    }\r\n    var channelIds = [\r\n        0 /* ChannelID.Color0 */,\r\n        1 /* ChannelID.Color1 */,\r\n        2 /* ChannelID.Color2 */,\r\n    ];\r\n    if (!background || options.noBackground || layer.mask || (0, helpers_1.hasAlpha)(data) || (helpers_1.RAW_IMAGE_DATA && ((_a = layer.imageDataRaw) === null || _a === void 0 ? void 0 : _a['-1']))) {\r\n        channelIds.unshift(-1 /* ChannelID.Transparency */);\r\n    }\r\n    channels = channelIds.map(function (channelId) {\r\n        var offset = (0, helpers_1.offsetForChannel)(channelId, false); // TODO: psd.colorMode === ColorMode.CMYK);\r\n        var buffer;\r\n        var compression;\r\n        if (helpers_1.RAW_IMAGE_DATA && layer.imageDataRaw) {\r\n            // console.log('written raw layer image data');\r\n            buffer = layer.imageDataRaw[channelId];\r\n            compression = layer.imageDataRawCompression[channelId];\r\n        }\r\n        else if (options.compress) {\r\n            buffer = (0, helpers_1.writeDataZipWithoutPrediction)(data, [offset]);\r\n            compression = 2 /* Compression.ZipWithoutPrediction */;\r\n        }\r\n        else {\r\n            buffer = (0, helpers_1.writeDataRLE)(tempBuffer, data, [offset], !!options.psb);\r\n            compression = 1 /* Compression.RleCompressed */;\r\n        }\r\n        return { channelId: channelId, compression: compression, buffer: buffer, length: 2 + buffer.length };\r\n    });\r\n    return { layer: layer, top: top, left: left, right: right, bottom: bottom, channels: channels };\r\n}\r\nfunction isRowEmpty(_a, y, left, right) {\r\n    var data = _a.data, width = _a.width;\r\n    var start = ((y * width + left) * 4 + 3) | 0;\r\n    var end = (start + (right - left) * 4) | 0;\r\n    for (var i = start; i < end; i = (i + 4) | 0) {\r\n        if (data[i] !== 0) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction isColEmpty(_a, x, top, bottom) {\r\n    var data = _a.data, width = _a.width;\r\n    var stride = (width * 4) | 0;\r\n    var start = (top * stride + x * 4 + 3) | 0;\r\n    for (var y = top, i = start; y < bottom; y++, i = (i + stride) | 0) {\r\n        if (data[i] !== 0) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction trimData(data) {\r\n    var top = 0;\r\n    var left = 0;\r\n    var right = data.width;\r\n    var bottom = data.height;\r\n    while (top < bottom && isRowEmpty(data, top, left, right))\r\n        top++;\r\n    while (bottom > top && isRowEmpty(data, bottom - 1, left, right))\r\n        bottom--;\r\n    while (left < right && isColEmpty(data, left, top, bottom))\r\n        left++;\r\n    while (right > left && isColEmpty(data, right - 1, top, bottom))\r\n        right--;\r\n    return { top: top, left: left, right: right, bottom: bottom };\r\n}\r\nfunction writeColor(writer, color) {\r\n    if (!color) {\r\n        writeUint16(writer, 0 /* ColorSpace.RGB */);\r\n        writeZeros(writer, 8);\r\n    }\r\n    else if ('r' in color) {\r\n        writeUint16(writer, 0 /* ColorSpace.RGB */);\r\n        writeUint16(writer, Math.round(color.r * 257));\r\n        writeUint16(writer, Math.round(color.g * 257));\r\n        writeUint16(writer, Math.round(color.b * 257));\r\n        writeUint16(writer, 0);\r\n    }\r\n    else if ('fr' in color) {\r\n        writeUint16(writer, 0 /* ColorSpace.RGB */);\r\n        writeUint16(writer, Math.round(color.fr * 255 * 257));\r\n        writeUint16(writer, Math.round(color.fg * 255 * 257));\r\n        writeUint16(writer, Math.round(color.fb * 255 * 257));\r\n        writeUint16(writer, 0);\r\n    }\r\n    else if ('l' in color) {\r\n        writeUint16(writer, 7 /* ColorSpace.Lab */);\r\n        writeInt16(writer, Math.round(color.l * 10000));\r\n        writeInt16(writer, Math.round(color.a < 0 ? (color.a * 12800) : (color.a * 12700)));\r\n        writeInt16(writer, Math.round(color.b < 0 ? (color.b * 12800) : (color.b * 12700)));\r\n        writeUint16(writer, 0);\r\n    }\r\n    else if ('h' in color) {\r\n        writeUint16(writer, 1 /* ColorSpace.HSB */);\r\n        writeUint16(writer, Math.round(color.h * 0xffff));\r\n        writeUint16(writer, Math.round(color.s * 0xffff));\r\n        writeUint16(writer, Math.round(color.b * 0xffff));\r\n        writeUint16(writer, 0);\r\n    }\r\n    else if ('c' in color) {\r\n        writeUint16(writer, 2 /* ColorSpace.CMYK */);\r\n        writeUint16(writer, Math.round(color.c * 257));\r\n        writeUint16(writer, Math.round(color.m * 257));\r\n        writeUint16(writer, Math.round(color.y * 257));\r\n        writeUint16(writer, Math.round(color.k * 257));\r\n    }\r\n    else {\r\n        writeUint16(writer, 8 /* ColorSpace.Grayscale */);\r\n        writeUint16(writer, Math.round(color.k * 10000 / 255));\r\n        writeZeros(writer, 6);\r\n    }\r\n}\r\nexports.writeColor = writeColor;\r\n//# sourceMappingURL=psdWriter.js.map","import { Psd, Layer, LayerAdditionalInfo, ColorMode, SectionDividerType, WriteOptions, Color, GlobalLayerMaskInfo, PixelData, LayerMaskData } from './psd';\nimport { hasAlpha, createCanvas, writeDataRLE, LayerChannelData, ChannelData, offsetForChannel, createImageData, fromBlendMode, ChannelID, Compression, clamp, LayerMaskFlags, MaskParams, ColorSpace, Bounds, largeAdditionalInfoKeys, RAW_IMAGE_DATA, writeDataZipWithoutPrediction, imageDataToCanvas } from './helpers';\nimport { ExtendedWriteOptions, infoHandlers } from './additionalInfo';\nimport { InternalImageResources, resourceHandlers } from './imageResources';\n\nexport interface PsdWriter {\n\toffset: number;\n\tbuffer: ArrayBuffer;\n\tview: DataView;\n\ttempBuffer: Uint8Array | undefined;\n}\n\nexport function createWriter(size = 4096): PsdWriter {\n\tconst buffer = new ArrayBuffer(size);\n\tconst view = new DataView(buffer);\n\tconst offset = 0;\n\treturn { buffer, view, offset, tempBuffer: undefined };\n}\n\nexport function getWriterBuffer(writer: PsdWriter) {\n\treturn writer.buffer.slice(0, writer.offset);\n}\n\nexport function getWriterBufferNoCopy(writer: PsdWriter) {\n\treturn new Uint8Array(writer.buffer, 0, writer.offset);\n}\n\nexport function writeUint8(writer: PsdWriter, value: number) {\n\tconst offset = addSize(writer, 1);\n\twriter.view.setUint8(offset, value);\n}\n\nexport function writeInt16(writer: PsdWriter, value: number) {\n\tconst offset = addSize(writer, 2);\n\twriter.view.setInt16(offset, value, false);\n}\n\nexport function writeUint16(writer: PsdWriter, value: number) {\n\tconst offset = addSize(writer, 2);\n\twriter.view.setUint16(offset, value, false);\n}\n\nexport function writeUint16LE(writer: PsdWriter, value: number) {\n\tconst offset = addSize(writer, 2);\n\twriter.view.setUint16(offset, value, true);\n}\n\nexport function writeInt32(writer: PsdWriter, value: number) {\n\tconst offset = addSize(writer, 4);\n\twriter.view.setInt32(offset, value, false);\n}\n\nexport function writeInt32LE(writer: PsdWriter, value: number) {\n\tconst offset = addSize(writer, 4);\n\twriter.view.setInt32(offset, value, true);\n}\n\nexport function writeUint32(writer: PsdWriter, value: number) {\n\tconst offset = addSize(writer, 4);\n\twriter.view.setUint32(offset, value, false);\n}\n\nexport function writeFloat32(writer: PsdWriter, value: number) {\n\tconst offset = addSize(writer, 4);\n\twriter.view.setFloat32(offset, value, false);\n}\n\nexport function writeFloat64(writer: PsdWriter, value: number) {\n\tconst offset = addSize(writer, 8);\n\twriter.view.setFloat64(offset, value, false);\n}\n\n// 32-bit fixed-point number 16.16\nexport function writeFixedPoint32(writer: PsdWriter, value: number) {\n\twriteInt32(writer, value * (1 << 16));\n}\n\n// 32-bit fixed-point number 8.24\nexport function writeFixedPointPath32(writer: PsdWriter, value: number) {\n\twriteInt32(writer, value * (1 << 24));\n}\n\nexport function writeBytes(writer: PsdWriter, buffer: Uint8Array | undefined) {\n\tif (buffer) {\n\t\tensureSize(writer, writer.offset + buffer.length);\n\t\tconst bytes = new Uint8Array(writer.buffer);\n\t\tbytes.set(buffer, writer.offset);\n\t\twriter.offset += buffer.length;\n\t}\n}\n\nexport function writeZeros(writer: PsdWriter, count: number) {\n\tfor (let i = 0; i < count; i++) {\n\t\twriteUint8(writer, 0);\n\t}\n}\n\nexport function writeSignature(writer: PsdWriter, signature: string) {\n\tif (signature.length !== 4) throw new Error(`Invalid signature: '${signature}'`);\n\n\tfor (let i = 0; i < 4; i++) {\n\t\twriteUint8(writer, signature.charCodeAt(i));\n\t}\n}\n\nexport function writePascalString(writer: PsdWriter, text: string, padTo: number) {\n\tlet length = text.length;\n\tif (length > 255) throw new Error(`String too long`);\n\n\twriteUint8(writer, length);\n\n\tfor (let i = 0; i < length; i++) {\n\t\tconst code = text.charCodeAt(i);\n\t\t// writeUint8(writer, code); // for testing\n\t\twriteUint8(writer, code < 128 ? code : '?'.charCodeAt(0));\n\t}\n\n\twhile (++length % padTo) {\n\t\twriteUint8(writer, 0);\n\t}\n}\n\nexport function writeUnicodeStringWithoutLength(writer: PsdWriter, text: string) {\n\tfor (let i = 0; i < text.length; i++) {\n\t\twriteUint16(writer, text.charCodeAt(i));\n\t}\n}\n\nexport function writeUnicodeStringWithoutLengthLE(writer: PsdWriter, text: string) {\n\tfor (let i = 0; i < text.length; i++) {\n\t\twriteUint16LE(writer, text.charCodeAt(i));\n\t}\n}\n\nexport function writeUnicodeString(writer: PsdWriter, text: string) {\n\twriteUint32(writer, text.length);\n\twriteUnicodeStringWithoutLength(writer, text);\n}\n\nexport function writeUnicodeStringWithPadding(writer: PsdWriter, text: string) {\n\twriteUint32(writer, text.length + 1);\n\n\tfor (let i = 0; i < text.length; i++) {\n\t\twriteUint16(writer, text.charCodeAt(i));\n\t}\n\n\twriteUint16(writer, 0);\n}\n\nfunction getLargestLayerSize(layers: Layer[] = []): number {\n\tlet max = 0;\n\n\tfor (const layer of layers) {\n\t\tif (layer.canvas || layer.imageData) {\n\t\t\tconst { width, height } = getLayerDimentions(layer);\n\t\t\tmax = Math.max(max, 2 * height + 2 * width * height);\n\t\t}\n\n\t\tif (layer.children) {\n\t\t\tmax = Math.max(max, getLargestLayerSize(layer.children));\n\t\t}\n\t}\n\n\treturn max;\n}\n\nexport function writeSection(writer: PsdWriter, round: number, func: () => void, writeTotalLength = false, large = false) {\n\tif (large) writeUint32(writer, 0);\n\tconst offset = writer.offset;\n\twriteUint32(writer, 0);\n\n\tfunc();\n\n\tlet length = writer.offset - offset - 4;\n\tlet len = length;\n\n\twhile ((len % round) !== 0) {\n\t\twriteUint8(writer, 0);\n\t\tlen++;\n\t}\n\n\t// while ((writer.offset % round) !== 0) {\n\t// \twriteUint8(writer, 0);\n\t// \tlen++;\n\t// }\n\n\tif (writeTotalLength) {\n\t\tlength = len;\n\t}\n\n\twriter.view.setUint32(offset, length, false);\n}\n\nfunction verifyBitCount(target: Psd | Layer) {\n\ttarget.children?.forEach(verifyBitCount);\n\n\tconst data = target.imageData;\n\tif (data && (data.data instanceof Uint32Array || data.data instanceof Uint16Array)) {\n\t\tthrow new Error('imageData has incorrect bitDepth');\n\t}\n\n\tif ('mask' in target && target.mask) {\n\t\tconst data = target.mask.imageData;\n\t\tif (data && (data.data instanceof Uint32Array || data.data instanceof Uint16Array)) {\n\t\t\tthrow new Error('mask imageData has incorrect bitDepth');\n\t\t}\n\t}\n}\n\nexport function writePsd(writer: PsdWriter, psd: Psd, options: WriteOptions = {}) {\n\tif (!(+psd.width > 0 && +psd.height > 0))\n\t\tthrow new Error('Invalid document size');\n\n\tif ((psd.width > 30000 || psd.height > 30000) && !options.psb)\n\t\tthrow new Error('Document size is too large (max is 30000x30000, use PSB format instead)');\n\n\tconst bitsPerChannel = psd.bitsPerChannel ?? 8;\n\n\tif (bitsPerChannel !== 8)\n\t\tthrow new Error('bitsPerChannel other than 8 are not supported for writing');\n\n\tverifyBitCount(psd);\n\n\tconst imageResources: InternalImageResources = { ...psd.imageResources };\n\tconst opt: ExtendedWriteOptions = { ...options, layerIds: new Set(), layerToId: new Map() };\n\n\tif (opt.generateThumbnail) {\n\t\timageResources.thumbnail = createThumbnail(psd);\n\t}\n\n\tlet imageData = psd.imageData;\n\n\tif (!imageData && psd.canvas) {\n\t\timageData = psd.canvas.getContext('2d')!.getImageData(0, 0, psd.canvas.width, psd.canvas.height);\n\t}\n\n\tif (imageData && (psd.width !== imageData.width || psd.height !== imageData.height))\n\t\tthrow new Error('Document canvas must have the same size as document');\n\n\tconst globalAlpha = !!imageData && hasAlpha(imageData);\n\tconst maxBufferSize = Math.max(getLargestLayerSize(psd.children), 4 * 2 * psd.width * psd.height + 2 * psd.height);\n\twriter.tempBuffer = new Uint8Array(maxBufferSize);\n\n\t// header\n\twriteSignature(writer, '8BPS');\n\twriteUint16(writer, options.psb ? 2 : 1); // version\n\twriteZeros(writer, 6);\n\twriteUint16(writer, globalAlpha ? 4 : 3); // channels\n\twriteUint32(writer, psd.height);\n\twriteUint32(writer, psd.width);\n\twriteUint16(writer, bitsPerChannel); // bits per channel\n\twriteUint16(writer, ColorMode.RGB); // we only support saving RGB right now\n\n\t// color mode data\n\twriteSection(writer, 1, () => {\n\t\tif (psd.palette) {\n\t\t\tfor (let i = 0; i < 256; i++) writeUint8(writer, psd.palette[i]?.r || 0);\n\t\t\tfor (let i = 0; i < 256; i++) writeUint8(writer, psd.palette[i]?.g || 0);\n\t\t\tfor (let i = 0; i < 256; i++) writeUint8(writer, psd.palette[i]?.b || 0);\n\t\t}\n\n\t\t// TODO: other data?\n\t});\n\n\tconst layers: Layer[] = [];\n\taddChildren(layers, psd.children);\n\tif (!layers.length) layers.push({});\n\n\t// image resources\n\n\timageResources.layersGroup = layers.map(l => l.linkGroup || 0);\n\timageResources.layerGroupsEnabledId = layers.map(l => l.linkGroupEnabled == false ? 0 : 1);\n\n\twriteSection(writer, 1, () => {\n\t\tfor (const handler of resourceHandlers) {\n\t\t\tconst has = handler.has(imageResources);\n\t\t\tconst count = has === false ? 0 : (has === true ? 1 : has);\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\twriteSignature(writer, '8BIM');\n\t\t\t\twriteUint16(writer, handler.key);\n\t\t\t\twritePascalString(writer, '', 2);\n\t\t\t\twriteSection(writer, 2, () => handler.write(writer, imageResources, i));\n\t\t\t}\n\t\t}\n\t});\n\n\t// layer and mask info\n\twriteSection(writer, 2, () => {\n\t\twriteLayerInfo(writer, layers, psd, globalAlpha, opt);\n\t\twriteGlobalLayerMaskInfo(writer, psd.globalLayerMaskInfo);\n\t\twriteAdditionalLayerInfo(writer, psd, psd, opt);\n\t}, undefined, !!opt.psb);\n\n\t// image data\n\tconst channels = globalAlpha ? [0, 1, 2, 3] : [0, 1, 2];\n\tconst width = imageData ? imageData.width : psd.width;\n\tconst height = imageData ? imageData.height : psd.height;\n\tconst data: PixelData = { data: new Uint8Array(width * height * 4), width, height };\n\n\twriteUint16(writer, Compression.RleCompressed); // Photoshop doesn't support zip compression of composite image data\n\n\tif (RAW_IMAGE_DATA && (psd as any).imageDataRaw) {\n\t\tconsole.log('writing raw image data');\n\t\twriteBytes(writer, (psd as any).imageDataRaw);\n\t} else {\n\t\tif (imageData) data.data.set(new Uint8Array(imageData.data.buffer, imageData.data.byteOffset, imageData.data.byteLength));\n\n\t\t// add weird white matte\n\t\tif (globalAlpha) {\n\t\t\tconst size = data.width * data.height * 4;\n\t\t\tconst p = data.data;\n\t\t\tfor (let i = 0; i < size; i += 4) {\n\t\t\t\tconst pa = p[i + 3];\n\t\t\t\tif (pa != 0 && pa != 255) {\n\t\t\t\t\tconst a = pa / 255;\n\t\t\t\t\tconst ra = 255 * (1 - a);\n\t\t\t\t\tp[i + 0] = p[i + 0] * a + ra;\n\t\t\t\t\tp[i + 1] = p[i + 1] * a + ra;\n\t\t\t\t\tp[i + 2] = p[i + 2] * a + ra;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\twriteBytes(writer, writeDataRLE(writer.tempBuffer, data, channels, !!options.psb));\n\t}\n}\n\nfunction writeLayerInfo(writer: PsdWriter, layers: Layer[], psd: Psd, globalAlpha: boolean, options: ExtendedWriteOptions) {\n\twriteSection(writer, 4, () => {\n\t\twriteInt16(writer, globalAlpha ? -layers.length : layers.length);\n\n\t\tconst layersData = layers.map((l, i) => getChannels(writer.tempBuffer!, l, i === 0, options));\n\n\t\t// layer records\n\t\tfor (const layerData of layersData) {\n\t\t\tconst { layer, top, left, bottom, right, channels } = layerData;\n\n\t\t\twriteInt32(writer, top);\n\t\t\twriteInt32(writer, left);\n\t\t\twriteInt32(writer, bottom);\n\t\t\twriteInt32(writer, right);\n\t\t\twriteUint16(writer, channels.length);\n\n\t\t\tfor (const c of channels) {\n\t\t\t\twriteInt16(writer, c.channelId);\n\t\t\t\tif (options.psb) writeUint32(writer, 0);\n\t\t\t\twriteUint32(writer, c.length);\n\t\t\t}\n\n\t\t\twriteSignature(writer, '8BIM');\n\t\t\twriteSignature(writer, fromBlendMode[layer.blendMode!] || 'norm');\n\t\t\twriteUint8(writer, Math.round(clamp(layer.opacity ?? 1, 0, 1) * 255));\n\t\t\twriteUint8(writer, layer.clipping ? 1 : 0);\n\n\t\t\tlet flags = 0x08; // 1 for Photoshop 5.0 and later, tells if bit 4 has useful information\n\t\t\tif (layer.transparencyProtected) flags |= 0x01;\n\t\t\tif (layer.hidden) flags |= 0x02;\n\t\t\tif (layer.vectorMask || (layer.sectionDivider && layer.sectionDivider.type !== SectionDividerType.Other) || layer.adjustment) {\n\t\t\t\tflags |= 0x10; // pixel data irrelevant to appearance of document\n\t\t\t}\n\t\t\tif (layer.effectsOpen) flags |= 0x20;\n\n\t\t\twriteUint8(writer, flags);\n\t\t\twriteUint8(writer, 0); // filler\n\t\t\twriteSection(writer, 1, () => {\n\t\t\t\twriteLayerMaskData(writer, layer, layerData);\n\t\t\t\twriteLayerBlendingRanges(writer, layer);\n\t\t\t\twritePascalString(writer, (layer.name || '').substring(0, 255), 4);\n\t\t\t\twriteAdditionalLayerInfo(writer, layer, psd, options);\n\t\t\t});\n\t\t}\n\n\t\t// layer channel image data\n\t\tfor (const layerData of layersData) {\n\t\t\tfor (const channel of layerData.channels) {\n\t\t\t\twriteUint16(writer, channel.compression);\n\n\t\t\t\tif (channel.buffer) {\n\t\t\t\t\twriteBytes(writer, channel.buffer);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, true, options.psb);\n}\n\nfunction writeLayerMaskData(writer: PsdWriter, { mask, realMask }: Layer, layerData: LayerChannelData) {\n\twriteSection(writer, 1, () => {\n\t\tif (!mask && !realMask) return;\n\n\t\tlet params = 0, flags = 0, realFlags = 0;\n\n\t\tif (mask) {\n\t\t\tif (mask.userMaskDensity !== undefined) params |= MaskParams.UserMaskDensity;\n\t\t\tif (mask.userMaskFeather !== undefined) params |= MaskParams.UserMaskFeather;\n\t\t\tif (mask.vectorMaskDensity !== undefined) params |= MaskParams.VectorMaskDensity;\n\t\t\tif (mask.vectorMaskFeather !== undefined) params |= MaskParams.VectorMaskFeather;\n\n\t\t\tif (mask.disabled) flags |= LayerMaskFlags.LayerMaskDisabled;\n\t\t\tif (mask.positionRelativeToLayer) flags |= LayerMaskFlags.PositionRelativeToLayer;\n\t\t\tif (mask.fromVectorData) flags |= LayerMaskFlags.LayerMaskFromRenderingOtherData;\n\t\t\tif (params) flags |= LayerMaskFlags.MaskHasParametersAppliedToIt;\n\t\t}\n\n\t\tconst m = layerData.mask || {} as Partial<Bounds>;\n\t\twriteInt32(writer, m.top || 0);\n\t\twriteInt32(writer, m.left || 0);\n\t\twriteInt32(writer, m.bottom || 0);\n\t\twriteInt32(writer, m.right || 0);\n\t\twriteUint8(writer, mask && mask.defaultColor || 0);\n\t\twriteUint8(writer, flags);\n\n\t\tif (realMask) {\n\t\t\tif (realMask.disabled) realFlags |= LayerMaskFlags.LayerMaskDisabled;\n\t\t\tif (realMask.positionRelativeToLayer) realFlags |= LayerMaskFlags.PositionRelativeToLayer;\n\t\t\tif (realMask.fromVectorData) realFlags |= LayerMaskFlags.LayerMaskFromRenderingOtherData;\n\n\t\t\tconst r = layerData.realMask || {} as Partial<Bounds>;\n\t\t\twriteUint8(writer, realFlags);\n\t\t\twriteUint8(writer, realMask.defaultColor || 0);\n\t\t\twriteInt32(writer, r.top || 0);\n\t\t\twriteInt32(writer, r.left || 0);\n\t\t\twriteInt32(writer, r.bottom || 0);\n\t\t\twriteInt32(writer, r.right || 0);\n\t\t}\n\n\t\tif (params && mask) {\n\t\t\twriteUint8(writer, params);\n\t\t\tif (mask.userMaskDensity !== undefined) writeUint8(writer, Math.round(mask.userMaskDensity * 0xff));\n\t\t\tif (mask.userMaskFeather !== undefined) writeFloat64(writer, mask.userMaskFeather);\n\t\t\tif (mask.vectorMaskDensity !== undefined) writeUint8(writer, Math.round(mask.vectorMaskDensity * 0xff));\n\t\t\tif (mask.vectorMaskFeather !== undefined) writeFloat64(writer, mask.vectorMaskFeather);\n\t\t}\n\n\t\twriteZeros(writer, 2);\n\t});\n}\n\nfunction writerBlendingRange(writer: PsdWriter, range: number[]) {\n\twriteUint8(writer, range[0]);\n\twriteUint8(writer, range[1]);\n\twriteUint8(writer, range[2]);\n\twriteUint8(writer, range[3]);\n}\n\nfunction writeLayerBlendingRanges(writer: PsdWriter, layer: Layer) {\n\twriteSection(writer, 1, () => {\n\t\tconst ranges = layer.blendingRanges;\n\n\t\tif (ranges) {\n\t\t\twriterBlendingRange(writer, ranges.compositeGrayBlendSource);\n\t\t\twriterBlendingRange(writer, ranges.compositeGraphBlendDestinationRange);\n\n\t\t\tfor (const r of ranges.ranges) {\n\t\t\t\twriterBlendingRange(writer, r.sourceRange);\n\t\t\t\twriterBlendingRange(writer, r.destRange);\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction writeGlobalLayerMaskInfo(writer: PsdWriter, info: GlobalLayerMaskInfo | undefined) {\n\twriteSection(writer, 1, () => {\n\t\tif (info) {\n\t\t\twriteUint16(writer, info.overlayColorSpace);\n\t\t\twriteUint16(writer, info.colorSpace1);\n\t\t\twriteUint16(writer, info.colorSpace2);\n\t\t\twriteUint16(writer, info.colorSpace3);\n\t\t\twriteUint16(writer, info.colorSpace4);\n\t\t\twriteUint16(writer, info.opacity * 0xff);\n\t\t\twriteUint8(writer, info.kind);\n\t\t\twriteZeros(writer, 3);\n\t\t}\n\t});\n}\n\nfunction writeAdditionalLayerInfo(writer: PsdWriter, target: LayerAdditionalInfo, psd: Psd, options: ExtendedWriteOptions) {\n\tfor (const handler of infoHandlers) {\n\t\tlet key = handler.key;\n\n\t\tif (key === 'Txt2' && options.invalidateTextLayers) continue;\n\t\tif (key === 'vmsk' && options.psb) key = 'vsms';\n\n\t\tif (handler.has(target)) {\n\t\t\tconst large = options.psb && largeAdditionalInfoKeys.indexOf(key) !== -1;\n\t\t\tconst writeTotalLength = key !== 'Txt2' && key !== 'cinf' && key !== 'extn' && key !== 'CAI ' && key !== 'OCIO';\n\t\t\tconst fourBytes = key === 'Txt2' || key === 'luni' || key === 'vmsk' || key === 'artb' || key === 'artd' ||\n\t\t\t\tkey === 'vogk' || key === 'SoLd' || key === 'lnk2' || key === 'vscg' || key === 'vsms' || key === 'GdFl' ||\n\t\t\t\tkey === 'lmfx' || key === 'lrFX' || key === 'cinf' || key === 'PlLd' || key === 'Anno' || key === 'CAI ' || key === 'OCIO' || key === 'GenI' || key === 'FEid';\n\n\t\t\twriteSignature(writer, large ? '8B64' : '8BIM');\n\t\t\twriteSignature(writer, key);\n\t\t\twriteSection(writer, fourBytes ? 4 : 2, () => {\n\t\t\t\thandler.write(writer, target, psd, options);\n\t\t\t}, writeTotalLength, large);\n\t\t}\n\t}\n}\n\nfunction addChildren(layers: Layer[], children: Layer[] | undefined) {\n\tif (!children) return;\n\n\t// const layerIds: number[] = [2];\n\t// const timestamps: number[] = [1740120767.0230637];\n\n\tfor (const c of children) {\n\t\tif (c.children && c.canvas) throw new Error(`Invalid layer, cannot have both 'canvas' and 'children' properties`);\n\t\tif (c.children && c.imageData) throw new Error(`Invalid layer, cannot have both 'imageData' and 'children' properties`);\n\n\t\tif (c.children) {\n\t\t\tlayers.push({\n\t\t\t\tname: '</Layer group>',\n\t\t\t\tsectionDivider: {\n\t\t\t\t\ttype: SectionDividerType.BoundingSectionDivider,\n\t\t\t\t},\n\t\t\t\t// blendingRanges: children[0].blendingRanges,\n\t\t\t\t// nameSource: 'lset',\n\t\t\t\t// id: layerIds.shift(),\n\t\t\t\t// protected: {\n\t\t\t\t// \ttransparency: false,\n\t\t\t\t// \tcomposite: false,\n\t\t\t\t// \tposition: false,\n\t\t\t\t// },\n\t\t\t\t// layerColor: 'red',\n\t\t\t\t// timestamp: timestamps.shift(),\n\t\t\t\t// referencePoint: { x: 0, y: 0 },\n\t\t\t});\n\t\t\taddChildren(layers, c.children);\n\t\t\tlayers.push({\n\t\t\t\t...c,\n\t\t\t\tblendMode: c.blendMode === 'pass through' ? 'normal' : c.blendMode,\n\t\t\t\tsectionDivider: {\n\t\t\t\t\ttype: c.opened === false ? SectionDividerType.ClosedFolder : SectionDividerType.OpenFolder,\n\t\t\t\t\tkey: fromBlendMode[c.blendMode!] || 'pass',\n\t\t\t\t\tsubType: 0,\n\t\t\t\t},\n\t\t\t});\n\t\t} else {\n\t\t\tlayers.push({ ...c });\n\t\t}\n\t}\n}\n\nfunction resizeBuffer(writer: PsdWriter, size: number) {\n\tlet newLength = writer.buffer.byteLength;\n\n\tdo {\n\t\tnewLength *= 2;\n\t} while (size > newLength);\n\n\tconst newBuffer = new ArrayBuffer(newLength);\n\tconst newBytes = new Uint8Array(newBuffer);\n\tconst oldBytes = new Uint8Array(writer.buffer);\n\tnewBytes.set(oldBytes);\n\twriter.buffer = newBuffer;\n\twriter.view = new DataView(writer.buffer);\n}\n\nfunction ensureSize(writer: PsdWriter, size: number) {\n\tif (size > writer.buffer.byteLength) {\n\t\tresizeBuffer(writer, size);\n\t}\n}\n\nfunction addSize(writer: PsdWriter, size: number) {\n\tconst offset = writer.offset;\n\tensureSize(writer, writer.offset += size);\n\treturn offset;\n}\n\nfunction createThumbnail(psd: Psd) {\n\tconst canvas = createCanvas(10, 10);\n\tlet scale = 1;\n\n\tif (psd.width > psd.height) {\n\t\tcanvas.width = 160;\n\t\tcanvas.height = Math.floor(psd.height * (canvas.width / psd.width));\n\t\tscale = canvas.width / psd.width;\n\t} else {\n\t\tcanvas.height = 160;\n\t\tcanvas.width = Math.floor(psd.width * (canvas.height / psd.height));\n\t\tscale = canvas.height / psd.height;\n\t}\n\n\tconst context = canvas.getContext('2d')!;\n\tcontext.scale(scale, scale);\n\n\tif (psd.imageData) {\n\t\tcontext.drawImage(imageDataToCanvas(psd.imageData), 0, 0);\n\t} else if (psd.canvas) {\n\t\tcontext.drawImage(psd.canvas, 0, 0);\n\t}\n\n\treturn canvas;\n}\n\nfunction getMaskChannels(tempBuffer: Uint8Array, layerData: LayerChannelData, layer: Layer, mask: LayerMaskData, options: WriteOptions, realMask: boolean) {\n\tlet top = (mask.top as any) | 0;\n\tlet left = (mask.left as any) | 0;\n\tlet right = (mask.right as any) | 0;\n\tlet bottom = (mask.bottom as any) | 0;\n\tlet { width, height } = getLayerDimentions(mask);\n\tlet imageData = mask.imageData;\n\n\tif (!imageData && mask.canvas && width && height) {\n\t\timageData = mask.canvas.getContext('2d')!.getImageData(0, 0, width, height);\n\t}\n\n\tif (width && height && imageData) {\n\t\tright = left + width;\n\t\tbottom = top + height;\n\n\t\tif (imageData.width !== width || imageData.height !== height) {\n\t\t\tthrow new Error('Invalid imageData dimentions');\n\t\t}\n\n\t\tlet buffer: Uint8Array;\n\t\tlet compression: Compression;\n\n\t\tif (RAW_IMAGE_DATA && (layer as any)[realMask ? 'realMaskDataRaw' : 'maskDataRaw']) {\n\t\t\tbuffer = (layer as any)[realMask ? 'realMaskDataRaw' : 'maskDataRaw'];\n\t\t\tcompression = (layer as any)[realMask ? 'realMaskDataRawCompression' : 'maskDataRawCompression'];\n\t\t} else if (options.compress) {\n\t\t\tbuffer = writeDataZipWithoutPrediction(imageData, [0]);\n\t\t\tcompression = Compression.ZipWithoutPrediction;\n\t\t} else {\n\t\t\tbuffer = writeDataRLE(tempBuffer, imageData, [0], !!options.psb)!;\n\t\t\tcompression = Compression.RleCompressed;\n\t\t}\n\n\t\tlayerData.channels.push({ channelId: realMask ? ChannelID.RealUserMask : ChannelID.UserMask, compression, buffer, length: 2 + buffer.length });\n\t}\n\n\tlayerData[realMask ? 'realMask' : 'mask'] = { top, left, right, bottom };\n}\n\nfunction getChannels(tempBuffer: Uint8Array, layer: Layer, background: boolean, options: WriteOptions): LayerChannelData {\n\tconst layerData = getLayerChannels(tempBuffer, layer, background, options);\n\tif (layer.mask) getMaskChannels(tempBuffer, layerData, layer, layer.mask, options, false);\n\tif (layer.realMask) getMaskChannels(tempBuffer, layerData, layer, layer.realMask, options, true);\n\treturn layerData;\n}\n\nfunction getLayerDimentions({ canvas, imageData }: Layer): { width: number; height: number; } {\n\treturn imageData || canvas || { width: 0, height: 0 };\n}\n\nfunction cropImageData(data: PixelData, left: number, top: number, width: number, height: number) {\n\tif (data.data instanceof Uint32Array || data.data instanceof Uint16Array) {\n\t\tthrow new Error('imageData has incorrect bit depth');\n\t}\n\n\tconst croppedData = createImageData(width, height);\n\tconst srcData = data.data;\n\tconst dstData = croppedData.data;\n\n\tfor (let y = 0; y < height; y++) {\n\t\tfor (let x = 0; x < width; x++) {\n\t\t\tlet src = ((x + left) + (y + top) * data.width) * 4;\n\t\t\tlet dst = (x + y * width) * 4;\n\t\t\tdstData[dst] = srcData[src];\n\t\t\tdstData[dst + 1] = srcData[src + 1];\n\t\t\tdstData[dst + 2] = srcData[src + 2];\n\t\t\tdstData[dst + 3] = srcData[src + 3];\n\t\t}\n\t}\n\n\treturn croppedData;\n}\n\nfunction getLayerChannels(tempBuffer: Uint8Array, layer: Layer, background: boolean, options: WriteOptions): LayerChannelData {\n\tlet top = (layer.top as any) | 0;\n\tlet left = (layer.left as any) | 0;\n\tlet right = (layer.right as any) | 0;\n\tlet bottom = (layer.bottom as any) | 0;\n\tlet channels: ChannelData[] = [\n\t\t{ channelId: ChannelID.Transparency, compression: Compression.RawData, buffer: undefined, length: 2 },\n\t\t{ channelId: ChannelID.Color0, compression: Compression.RawData, buffer: undefined, length: 2 },\n\t\t{ channelId: ChannelID.Color1, compression: Compression.RawData, buffer: undefined, length: 2 },\n\t\t{ channelId: ChannelID.Color2, compression: Compression.RawData, buffer: undefined, length: 2 },\n\t];\n\tlet { width, height } = getLayerDimentions(layer);\n\n\tif (!(layer.canvas || layer.imageData) || !width || !height) {\n\t\tright = left;\n\t\tbottom = top;\n\t\treturn { layer, top, left, right, bottom, channels };\n\t}\n\n\tright = left + width;\n\tbottom = top + height;\n\n\tlet data = layer.imageData || layer.canvas!.getContext('2d')!.getImageData(0, 0, width, height);\n\n\tif (options.trimImageData) {\n\t\tconst trimmed = trimData(data);\n\n\t\tif (trimmed.left !== 0 || trimmed.top !== 0 || trimmed.right !== data.width || trimmed.bottom !== data.height) {\n\t\t\tleft += trimmed.left;\n\t\t\ttop += trimmed.top;\n\t\t\tright -= (data.width - trimmed.right);\n\t\t\tbottom -= (data.height - trimmed.bottom);\n\t\t\twidth = right - left;\n\t\t\theight = bottom - top;\n\n\t\t\tif (!width || !height) return { layer, top, left, right, bottom, channels };\n\n\t\t\tdata = cropImageData(data, trimmed.left, trimmed.top, width, height);\n\t\t}\n\t}\n\n\tconst channelIds = [\n\t\tChannelID.Color0,\n\t\tChannelID.Color1,\n\t\tChannelID.Color2,\n\t];\n\n\tif (!background || options.noBackground || layer.mask || hasAlpha(data) || (RAW_IMAGE_DATA && (layer as any).imageDataRaw?.['-1'])) {\n\t\tchannelIds.unshift(ChannelID.Transparency);\n\t}\n\n\tchannels = channelIds.map(channelId => {\n\t\tconst offset = offsetForChannel(channelId, false); // TODO: psd.colorMode === ColorMode.CMYK);\n\t\tlet buffer: Uint8Array;\n\t\tlet compression: Compression;\n\n\t\tif (RAW_IMAGE_DATA && (layer as any).imageDataRaw) {\n\t\t\t// console.log('written raw layer image data');\n\t\t\tbuffer = (layer as any).imageDataRaw[channelId];\n\t\t\tcompression = (layer as any).imageDataRawCompression[channelId];\n\t\t} else if (options.compress) {\n\t\t\tbuffer = writeDataZipWithoutPrediction(data, [offset]);\n\t\t\tcompression = Compression.ZipWithoutPrediction;\n\t\t} else {\n\t\t\tbuffer = writeDataRLE(tempBuffer, data, [offset], !!options.psb)!;\n\t\t\tcompression = Compression.RleCompressed;\n\t\t}\n\n\t\treturn { channelId, compression, buffer, length: 2 + buffer.length };\n\t});\n\n\treturn { layer, top, left, right, bottom, channels };\n}\n\nfunction isRowEmpty({ data, width }: PixelData, y: number, left: number, right: number) {\n\tconst start = ((y * width + left) * 4 + 3) | 0;\n\tconst end = (start + (right - left) * 4) | 0;\n\n\tfor (let i = start; i < end; i = (i + 4) | 0) {\n\t\tif (data[i] !== 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nfunction isColEmpty({ data, width }: PixelData, x: number, top: number, bottom: number) {\n\tconst stride = (width * 4) | 0;\n\tconst start = (top * stride + x * 4 + 3) | 0;\n\n\tfor (let y = top, i = start; y < bottom; y++, i = (i + stride) | 0) {\n\t\tif (data[i] !== 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nfunction trimData(data: PixelData) {\n\tlet top = 0;\n\tlet left = 0;\n\tlet right = data.width;\n\tlet bottom = data.height;\n\n\twhile (top < bottom && isRowEmpty(data, top, left, right))\n\t\ttop++;\n\twhile (bottom > top && isRowEmpty(data, bottom - 1, left, right))\n\t\tbottom--;\n\twhile (left < right && isColEmpty(data, left, top, bottom))\n\t\tleft++;\n\twhile (right > left && isColEmpty(data, right - 1, top, bottom))\n\t\tright--;\n\n\treturn { top, left, right, bottom };\n}\n\nexport function writeColor(writer: PsdWriter, color: Color | undefined) {\n\tif (!color) {\n\t\twriteUint16(writer, ColorSpace.RGB);\n\t\twriteZeros(writer, 8);\n\t} else if ('r' in color) {\n\t\twriteUint16(writer, ColorSpace.RGB);\n\t\twriteUint16(writer, Math.round(color.r * 257));\n\t\twriteUint16(writer, Math.round(color.g * 257));\n\t\twriteUint16(writer, Math.round(color.b * 257));\n\t\twriteUint16(writer, 0);\n\t} else if ('fr' in color) {\n\t\twriteUint16(writer, ColorSpace.RGB);\n\t\twriteUint16(writer, Math.round(color.fr * 255 * 257));\n\t\twriteUint16(writer, Math.round(color.fg * 255 * 257));\n\t\twriteUint16(writer, Math.round(color.fb * 255 * 257));\n\t\twriteUint16(writer, 0);\n\t} else if ('l' in color) {\n\t\twriteUint16(writer, ColorSpace.Lab);\n\t\twriteInt16(writer, Math.round(color.l * 10000));\n\t\twriteInt16(writer, Math.round(color.a < 0 ? (color.a * 12800) : (color.a * 12700)));\n\t\twriteInt16(writer, Math.round(color.b < 0 ? (color.b * 12800) : (color.b * 12700)));\n\t\twriteUint16(writer, 0);\n\t} else if ('h' in color) {\n\t\twriteUint16(writer, ColorSpace.HSB);\n\t\twriteUint16(writer, Math.round(color.h * 0xffff));\n\t\twriteUint16(writer, Math.round(color.s * 0xffff));\n\t\twriteUint16(writer, Math.round(color.b * 0xffff));\n\t\twriteUint16(writer, 0);\n\t} else if ('c' in color) {\n\t\twriteUint16(writer, ColorSpace.CMYK);\n\t\twriteUint16(writer, Math.round(color.c * 257));\n\t\twriteUint16(writer, Math.round(color.m * 257));\n\t\twriteUint16(writer, Math.round(color.y * 257));\n\t\twriteUint16(writer, Math.round(color.k * 257));\n\t} else {\n\t\twriteUint16(writer, ColorSpace.Grayscale);\n\t\twriteUint16(writer, Math.round(color.k * 10000 / 255));\n\t\twriteZeros(writer, 6);\n\t}\n}\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.initializeCanvas = exports.createImageData = exports.createCanvasFromData = exports.createCanvas = exports.writeDataZipWithoutPrediction = exports.writeDataRLE = exports.writeDataRaw = exports.decodeBitmap = exports.imageDataToCanvas = exports.resetImageData = exports.hasAlpha = exports.clamp = exports.offsetForChannel = exports.Compression = exports.ChannelID = exports.MaskParams = exports.LayerMaskFlags = exports.ColorSpace = exports.createEnum = exports.revMap = exports.largeAdditionalInfoKeys = exports.layerColors = exports.toBlendMode = exports.fromBlendMode = exports.RAW_IMAGE_DATA = exports.MOCK_HANDLERS = void 0;\r\nvar base64_js_1 = require(\"base64-js\");\r\nvar pako_1 = require(\"pako\");\r\nexports.MOCK_HANDLERS = false;\r\nexports.RAW_IMAGE_DATA = false;\r\nexports.fromBlendMode = {};\r\nexports.toBlendMode = {\r\n    'pass': 'pass through',\r\n    'norm': 'normal',\r\n    'diss': 'dissolve',\r\n    'dark': 'darken',\r\n    'mul ': 'multiply',\r\n    'idiv': 'color burn',\r\n    'lbrn': 'linear burn',\r\n    'dkCl': 'darker color',\r\n    'lite': 'lighten',\r\n    'scrn': 'screen',\r\n    'div ': 'color dodge',\r\n    'lddg': 'linear dodge',\r\n    'lgCl': 'lighter color',\r\n    'over': 'overlay',\r\n    'sLit': 'soft light',\r\n    'hLit': 'hard light',\r\n    'vLit': 'vivid light',\r\n    'lLit': 'linear light',\r\n    'pLit': 'pin light',\r\n    'hMix': 'hard mix',\r\n    'diff': 'difference',\r\n    'smud': 'exclusion',\r\n    'fsub': 'subtract',\r\n    'fdiv': 'divide',\r\n    'hue ': 'hue',\r\n    'sat ': 'saturation',\r\n    'colr': 'color',\r\n    'lum ': 'luminosity',\r\n};\r\nObject.keys(exports.toBlendMode).forEach(function (key) { return exports.fromBlendMode[exports.toBlendMode[key]] = key; });\r\nexports.layerColors = [\r\n    'none', 'red', 'orange', 'yellow', 'green', 'blue', 'violet', 'gray'\r\n];\r\nexports.largeAdditionalInfoKeys = [\r\n    // from documentation\r\n    'LMsk', 'Lr16', 'Lr32', 'Layr', 'Mt16', 'Mt32', 'Mtrn', 'Alph', 'FMsk', 'lnk2', 'FEid', 'FXid', 'PxSD',\r\n    // from guessing\r\n    'cinf',\r\n];\r\nfunction revMap(map) {\r\n    var result = {};\r\n    Object.keys(map).forEach(function (key) { return result[map[key]] = key; });\r\n    return result;\r\n}\r\nexports.revMap = revMap;\r\nfunction createEnum(prefix, def, map) {\r\n    var rev = revMap(map);\r\n    var decode = function (val) {\r\n        var value = val.split('.')[1];\r\n        if (value && !rev[value])\r\n            throw new Error(\"Unrecognized value for enum: '\".concat(val, \"'\"));\r\n        return rev[value] || def;\r\n    };\r\n    var encode = function (val) {\r\n        if (val && !map[val])\r\n            throw new Error(\"Invalid value for enum: '\".concat(val, \"'\"));\r\n        return \"\".concat(prefix, \".\").concat(map[val] || map[def]);\r\n    };\r\n    return { decode: decode, encode: encode };\r\n}\r\nexports.createEnum = createEnum;\r\nvar ColorSpace;\r\n(function (ColorSpace) {\r\n    ColorSpace[ColorSpace[\"RGB\"] = 0] = \"RGB\";\r\n    ColorSpace[ColorSpace[\"HSB\"] = 1] = \"HSB\";\r\n    ColorSpace[ColorSpace[\"CMYK\"] = 2] = \"CMYK\";\r\n    ColorSpace[ColorSpace[\"Lab\"] = 7] = \"Lab\";\r\n    ColorSpace[ColorSpace[\"Grayscale\"] = 8] = \"Grayscale\";\r\n})(ColorSpace = exports.ColorSpace || (exports.ColorSpace = {}));\r\nvar LayerMaskFlags;\r\n(function (LayerMaskFlags) {\r\n    LayerMaskFlags[LayerMaskFlags[\"PositionRelativeToLayer\"] = 1] = \"PositionRelativeToLayer\";\r\n    LayerMaskFlags[LayerMaskFlags[\"LayerMaskDisabled\"] = 2] = \"LayerMaskDisabled\";\r\n    LayerMaskFlags[LayerMaskFlags[\"InvertLayerMaskWhenBlending\"] = 4] = \"InvertLayerMaskWhenBlending\";\r\n    LayerMaskFlags[LayerMaskFlags[\"LayerMaskFromRenderingOtherData\"] = 8] = \"LayerMaskFromRenderingOtherData\";\r\n    LayerMaskFlags[LayerMaskFlags[\"MaskHasParametersAppliedToIt\"] = 16] = \"MaskHasParametersAppliedToIt\";\r\n})(LayerMaskFlags = exports.LayerMaskFlags || (exports.LayerMaskFlags = {}));\r\nvar MaskParams;\r\n(function (MaskParams) {\r\n    MaskParams[MaskParams[\"UserMaskDensity\"] = 1] = \"UserMaskDensity\";\r\n    MaskParams[MaskParams[\"UserMaskFeather\"] = 2] = \"UserMaskFeather\";\r\n    MaskParams[MaskParams[\"VectorMaskDensity\"] = 4] = \"VectorMaskDensity\";\r\n    MaskParams[MaskParams[\"VectorMaskFeather\"] = 8] = \"VectorMaskFeather\";\r\n})(MaskParams = exports.MaskParams || (exports.MaskParams = {}));\r\nvar ChannelID;\r\n(function (ChannelID) {\r\n    ChannelID[ChannelID[\"Color0\"] = 0] = \"Color0\";\r\n    ChannelID[ChannelID[\"Color1\"] = 1] = \"Color1\";\r\n    ChannelID[ChannelID[\"Color2\"] = 2] = \"Color2\";\r\n    ChannelID[ChannelID[\"Color3\"] = 3] = \"Color3\";\r\n    ChannelID[ChannelID[\"Transparency\"] = -1] = \"Transparency\";\r\n    ChannelID[ChannelID[\"UserMask\"] = -2] = \"UserMask\";\r\n    ChannelID[ChannelID[\"RealUserMask\"] = -3] = \"RealUserMask\";\r\n})(ChannelID = exports.ChannelID || (exports.ChannelID = {}));\r\nvar Compression;\r\n(function (Compression) {\r\n    Compression[Compression[\"RawData\"] = 0] = \"RawData\";\r\n    Compression[Compression[\"RleCompressed\"] = 1] = \"RleCompressed\";\r\n    Compression[Compression[\"ZipWithoutPrediction\"] = 2] = \"ZipWithoutPrediction\";\r\n    Compression[Compression[\"ZipWithPrediction\"] = 3] = \"ZipWithPrediction\";\r\n})(Compression = exports.Compression || (exports.Compression = {}));\r\nfunction offsetForChannel(channelId, cmyk) {\r\n    switch (channelId) {\r\n        case 0 /* ChannelID.Color0 */: return 0;\r\n        case 1 /* ChannelID.Color1 */: return 1;\r\n        case 2 /* ChannelID.Color2 */: return 2;\r\n        case 3 /* ChannelID.Color3 */: return cmyk ? 3 : channelId + 1;\r\n        case -1 /* ChannelID.Transparency */: return cmyk ? 4 : 3;\r\n        default: return channelId + 1;\r\n    }\r\n}\r\nexports.offsetForChannel = offsetForChannel;\r\nfunction clamp(value, min, max) {\r\n    return value < min ? min : (value > max ? max : value);\r\n}\r\nexports.clamp = clamp;\r\nfunction hasAlpha(data) {\r\n    var size = data.width * data.height * 4;\r\n    for (var i = 3; i < size; i += 4) {\r\n        if (data.data[i] !== 255) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nexports.hasAlpha = hasAlpha;\r\nfunction resetImageData(_a) {\r\n    var data = _a.data;\r\n    var alpha = (data instanceof Float32Array) ? 1.0 : ((data instanceof Uint16Array) ? 0xffff : 0xff);\r\n    for (var p = 0, size = data.length | 0; p < size; p = (p + 4) | 0) {\r\n        data[p + 0] = 0;\r\n        data[p + 1] = 0;\r\n        data[p + 2] = 0;\r\n        data[p + 3] = alpha;\r\n    }\r\n}\r\nexports.resetImageData = resetImageData;\r\nfunction imageDataToCanvas(pixelData) {\r\n    var canvas = (0, exports.createCanvas)(pixelData.width, pixelData.height);\r\n    var imageData;\r\n    if (pixelData.data instanceof Uint8ClampedArray) {\r\n        imageData = pixelData;\r\n    }\r\n    else {\r\n        imageData = (0, exports.createImageData)(pixelData.width, pixelData.height);\r\n        var src = pixelData.data;\r\n        var dst = imageData.data;\r\n        if (src instanceof Float32Array) {\r\n            for (var i = 0, size = src.length; i < size; i += 4) {\r\n                dst[i + 0] = Math.round(Math.pow(src[i + 0], 1.0 / 2.2) * 255);\r\n                dst[i + 1] = Math.round(Math.pow(src[i + 1], 1.0 / 2.2) * 255);\r\n                dst[i + 2] = Math.round(Math.pow(src[i + 2], 1.0 / 2.2) * 255);\r\n                dst[i + 3] = Math.round(src[i + 3] * 255);\r\n            }\r\n        }\r\n        else {\r\n            var shift = (src instanceof Uint16Array) ? 8 : 0;\r\n            for (var i = 0, size = src.length; i < size; i++) {\r\n                dst[i] = src[i] >>> shift;\r\n            }\r\n        }\r\n    }\r\n    canvas.getContext('2d').putImageData(imageData, 0, 0);\r\n    return canvas;\r\n}\r\nexports.imageDataToCanvas = imageDataToCanvas;\r\nfunction decodeBitmap(input, output, width, height) {\r\n    if (!(input instanceof Uint8Array || input instanceof Uint8ClampedArray))\r\n        throw new Error('Invalid bit depth');\r\n    for (var y = 0, p = 0, o = 0; y < height; y++) {\r\n        for (var x = 0; x < width;) {\r\n            var b = input[o++];\r\n            for (var i = 0; i < 8 && x < width; i++, x++, p += 4) {\r\n                var v = b & 0x80 ? 0 : 255;\r\n                b = b << 1;\r\n                output[p + 0] = v;\r\n                output[p + 1] = v;\r\n                output[p + 2] = v;\r\n                output[p + 3] = 255;\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.decodeBitmap = decodeBitmap;\r\nfunction writeDataRaw(data, offset, width, height) {\r\n    if (!width || !height)\r\n        return undefined;\r\n    var array = new Uint8Array(width * height);\r\n    for (var i = 0; i < array.length; i++) {\r\n        array[i] = data.data[i * 4 + offset];\r\n    }\r\n    return array;\r\n}\r\nexports.writeDataRaw = writeDataRaw;\r\nfunction writeDataRLE(buffer, _a, offsets, large) {\r\n    var data = _a.data, width = _a.width, height = _a.height;\r\n    if (!width || !height)\r\n        return undefined;\r\n    var stride = (4 * width) | 0;\r\n    var ol = 0;\r\n    var o = (offsets.length * (large ? 4 : 2) * height) | 0;\r\n    for (var _i = 0, offsets_1 = offsets; _i < offsets_1.length; _i++) {\r\n        var offset = offsets_1[_i];\r\n        for (var y = 0, p = offset | 0; y < height; y++) {\r\n            var strideStart = (y * stride) | 0;\r\n            var strideEnd = (strideStart + stride) | 0;\r\n            var lastIndex = (strideEnd + offset - 4) | 0;\r\n            var lastIndex2 = (lastIndex - 4) | 0;\r\n            var startOffset = o;\r\n            for (p = (strideStart + offset) | 0; p < strideEnd; p = (p + 4) | 0) {\r\n                if (p < lastIndex2) {\r\n                    var value1 = data[p];\r\n                    p = (p + 4) | 0;\r\n                    var value2 = data[p];\r\n                    p = (p + 4) | 0;\r\n                    var value3 = data[p];\r\n                    if (value1 === value2 && value1 === value3) {\r\n                        var count = 3;\r\n                        while (count < 128 && p < lastIndex && data[(p + 4) | 0] === value1) {\r\n                            count = (count + 1) | 0;\r\n                            p = (p + 4) | 0;\r\n                        }\r\n                        buffer[o++] = 1 - count;\r\n                        buffer[o++] = value1;\r\n                    }\r\n                    else {\r\n                        var countIndex = o;\r\n                        var writeLast = true;\r\n                        var count = 1;\r\n                        buffer[o++] = 0;\r\n                        buffer[o++] = value1;\r\n                        while (p < lastIndex && count < 128) {\r\n                            p = (p + 4) | 0;\r\n                            value1 = value2;\r\n                            value2 = value3;\r\n                            value3 = data[p];\r\n                            if (value1 === value2 && value1 === value3) {\r\n                                p = (p - 12) | 0;\r\n                                writeLast = false;\r\n                                break;\r\n                            }\r\n                            else {\r\n                                count++;\r\n                                buffer[o++] = value1;\r\n                            }\r\n                        }\r\n                        if (writeLast) {\r\n                            if (count < 127) {\r\n                                buffer[o++] = value2;\r\n                                buffer[o++] = value3;\r\n                                count += 2;\r\n                            }\r\n                            else if (count < 128) {\r\n                                buffer[o++] = value2;\r\n                                count++;\r\n                                p = (p - 4) | 0;\r\n                            }\r\n                            else {\r\n                                p = (p - 8) | 0;\r\n                            }\r\n                        }\r\n                        buffer[countIndex] = count - 1;\r\n                    }\r\n                }\r\n                else if (p === lastIndex) {\r\n                    buffer[o++] = 0;\r\n                    buffer[o++] = data[p];\r\n                }\r\n                else { // p === lastIndex2\r\n                    buffer[o++] = 1;\r\n                    buffer[o++] = data[p];\r\n                    p = (p + 4) | 0;\r\n                    buffer[o++] = data[p];\r\n                }\r\n            }\r\n            var length_1 = o - startOffset;\r\n            if (large) {\r\n                buffer[ol++] = (length_1 >> 24) & 0xff;\r\n                buffer[ol++] = (length_1 >> 16) & 0xff;\r\n            }\r\n            buffer[ol++] = (length_1 >> 8) & 0xff;\r\n            buffer[ol++] = length_1 & 0xff;\r\n        }\r\n    }\r\n    return buffer.slice(0, o);\r\n}\r\nexports.writeDataRLE = writeDataRLE;\r\nfunction writeDataZipWithoutPrediction(_a, offsets) {\r\n    var data = _a.data, width = _a.width, height = _a.height;\r\n    var size = width * height;\r\n    var channel = new Uint8Array(size);\r\n    var buffers = [];\r\n    var totalLength = 0;\r\n    for (var _i = 0, offsets_2 = offsets; _i < offsets_2.length; _i++) {\r\n        var offset = offsets_2[_i];\r\n        for (var i = 0, o = offset; i < size; i++, o += 4) {\r\n            channel[i] = data[o];\r\n        }\r\n        var buffer = (0, pako_1.deflate)(channel);\r\n        buffers.push(buffer);\r\n        totalLength += buffer.byteLength;\r\n    }\r\n    if (buffers.length > 0) {\r\n        var buffer = new Uint8Array(totalLength);\r\n        var offset = 0;\r\n        for (var _b = 0, buffers_1 = buffers; _b < buffers_1.length; _b++) {\r\n            var b = buffers_1[_b];\r\n            buffer.set(b, offset);\r\n            offset += b.byteLength;\r\n        }\r\n        return buffer;\r\n    }\r\n    else {\r\n        return buffers[0];\r\n    }\r\n}\r\nexports.writeDataZipWithoutPrediction = writeDataZipWithoutPrediction;\r\nvar createCanvas = function () {\r\n    throw new Error('Canvas not initialized, use initializeCanvas method to set up createCanvas method');\r\n};\r\nexports.createCanvas = createCanvas;\r\nvar createCanvasFromData = function () {\r\n    throw new Error('Canvas not initialized, use initializeCanvas method to set up createCanvasFromData method');\r\n};\r\nexports.createCanvasFromData = createCanvasFromData;\r\nvar tempCanvas = undefined;\r\nvar createImageData = function (width, height) {\r\n    if (!tempCanvas)\r\n        tempCanvas = (0, exports.createCanvas)(1, 1);\r\n    return tempCanvas.getContext('2d').createImageData(width, height);\r\n};\r\nexports.createImageData = createImageData;\r\nif (typeof document !== 'undefined') {\r\n    exports.createCanvas = function (width, height) {\r\n        var canvas = document.createElement('canvas');\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        return canvas;\r\n    };\r\n    exports.createCanvasFromData = function (data) {\r\n        var image = new Image();\r\n        image.src = 'data:image/jpeg;base64,' + (0, base64_js_1.fromByteArray)(data);\r\n        var canvas = document.createElement('canvas');\r\n        canvas.width = image.width;\r\n        canvas.height = image.height;\r\n        canvas.getContext('2d').drawImage(image, 0, 0);\r\n        return canvas;\r\n    };\r\n}\r\nfunction initializeCanvas(createCanvasMethod, createCanvasFromDataMethod, createImageDataMethod) {\r\n    exports.createCanvas = createCanvasMethod;\r\n    exports.createCanvasFromData = createCanvasFromDataMethod || exports.createCanvasFromData;\r\n    exports.createImageData = createImageDataMethod || exports.createImageData;\r\n}\r\nexports.initializeCanvas = initializeCanvas;\r\n//# sourceMappingURL=helpers.js.map","import { fromByteArray } from 'base64-js';\nimport { deflate as deflateSync } from 'pako';\nimport { Layer, BlendMode, LayerColor, PixelData, PixelArray } from './psd';\n\nexport const MOCK_HANDLERS = false;\nexport const RAW_IMAGE_DATA = false;\n\nexport const fromBlendMode: { [key: string]: string } = {};\nexport const toBlendMode: { [key: string]: BlendMode } = {\n\t'pass': 'pass through',\n\t'norm': 'normal',\n\t'diss': 'dissolve',\n\t'dark': 'darken',\n\t'mul ': 'multiply',\n\t'idiv': 'color burn',\n\t'lbrn': 'linear burn',\n\t'dkCl': 'darker color',\n\t'lite': 'lighten',\n\t'scrn': 'screen',\n\t'div ': 'color dodge',\n\t'lddg': 'linear dodge',\n\t'lgCl': 'lighter color',\n\t'over': 'overlay',\n\t'sLit': 'soft light',\n\t'hLit': 'hard light',\n\t'vLit': 'vivid light',\n\t'lLit': 'linear light',\n\t'pLit': 'pin light',\n\t'hMix': 'hard mix',\n\t'diff': 'difference',\n\t'smud': 'exclusion',\n\t'fsub': 'subtract',\n\t'fdiv': 'divide',\n\t'hue ': 'hue',\n\t'sat ': 'saturation',\n\t'colr': 'color',\n\t'lum ': 'luminosity',\n};\n\nObject.keys(toBlendMode).forEach(key => fromBlendMode[toBlendMode[key]] = key);\n\nexport const layerColors: LayerColor[] = [\n\t'none', 'red', 'orange', 'yellow', 'green', 'blue', 'violet', 'gray'\n];\n\nexport const largeAdditionalInfoKeys = [\n\t// from documentation\n\t'LMsk', 'Lr16', 'Lr32', 'Layr', 'Mt16', 'Mt32', 'Mtrn', 'Alph', 'FMsk', 'lnk2', 'FEid', 'FXid', 'PxSD',\n\t// from guessing\n\t'cinf',\n];\n\nexport interface Dict {\n\t[key: string]: string;\n}\n\nexport function revMap(map: Dict) {\n\tconst result: Dict = {};\n\tObject.keys(map).forEach(key => result[map[key]] = key);\n\treturn result;\n}\n\nexport function createEnum<T>(prefix: string, def: string, map: Dict) {\n\tconst rev = revMap(map);\n\tconst decode = (val: string): T => {\n\t\tconst value = val.split('.')[1];\n\t\tif (value && !rev[value]) throw new Error(`Unrecognized value for enum: '${val}'`);\n\t\treturn (rev[value] as any) || def;\n\t};\n\tconst encode = (val: T | undefined): string => {\n\t\tif (val && !map[val as any]) throw new Error(`Invalid value for enum: '${val}'`);\n\t\treturn `${prefix}.${map[val as any] || map[def]}`;\n\t};\n\treturn { decode, encode };\n}\n\nexport const enum ColorSpace {\n\tRGB = 0,\n\tHSB = 1,\n\tCMYK = 2,\n\tLab = 7,\n\tGrayscale = 8,\n}\n\nexport const enum LayerMaskFlags {\n\tPositionRelativeToLayer = 1,\n\tLayerMaskDisabled = 2,\n\tInvertLayerMaskWhenBlending = 4, // obsolete\n\tLayerMaskFromRenderingOtherData = 8,\n\tMaskHasParametersAppliedToIt = 16,\n}\n\nexport const enum MaskParams {\n\tUserMaskDensity = 1,\n\tUserMaskFeather = 2,\n\tVectorMaskDensity = 4,\n\tVectorMaskFeather = 8,\n}\n\nexport const enum ChannelID {\n\tColor0 = 0, // red (rgb) / cyan (cmyk)\n\tColor1 = 1, // green (rgb) / magenta (cmyk)\n\tColor2 = 2, // blue (rgb) / yellow (cmyk)\n\tColor3 = 3, // - (rgb) / black (cmyk)\n\tTransparency = -1,\n\tUserMask = -2,\n\tRealUserMask = -3,\n}\n\nexport const enum Compression {\n\tRawData = 0,\n\tRleCompressed = 1,\n\tZipWithoutPrediction = 2,\n\tZipWithPrediction = 3,\n}\n\nexport interface ChannelData {\n\tchannelId: ChannelID;\n\tcompression: Compression;\n\tbuffer: Uint8Array | undefined;\n\tlength: number;\n}\n\nexport interface Bounds {\n\ttop: number;\n\tleft: number;\n\tright: number;\n\tbottom: number;\n}\n\nexport interface LayerChannelData {\n\tlayer: Layer;\n\tchannels: ChannelData[];\n\ttop: number;\n\tleft: number;\n\tright: number;\n\tbottom: number;\n\tmask?: Bounds;\n\trealMask?: Bounds;\n}\n\nexport function offsetForChannel(channelId: ChannelID, cmyk: boolean) {\n\tswitch (channelId) {\n\t\tcase ChannelID.Color0: return 0;\n\t\tcase ChannelID.Color1: return 1;\n\t\tcase ChannelID.Color2: return 2;\n\t\tcase ChannelID.Color3: return cmyk ? 3 : channelId + 1;\n\t\tcase ChannelID.Transparency: return cmyk ? 4 : 3;\n\t\tdefault: return channelId + 1;\n\t}\n}\n\nexport function clamp(value: number, min: number, max: number) {\n\treturn value < min ? min : (value > max ? max : value);\n}\n\nexport function hasAlpha(data: PixelData) {\n\tconst size = data.width * data.height * 4;\n\n\tfor (let i = 3; i < size; i += 4) {\n\t\tif (data.data[i] !== 255) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\nexport function resetImageData({ data }: PixelData) {\n\tconst alpha = (data instanceof Float32Array) ? 1.0 : ((data instanceof Uint16Array) ? 0xffff : 0xff);\n\n\tfor (let p = 0, size = data.length | 0; p < size; p = (p + 4) | 0) {\n\t\tdata[p + 0] = 0;\n\t\tdata[p + 1] = 0;\n\t\tdata[p + 2] = 0;\n\t\tdata[p + 3] = alpha;\n\t}\n}\n\nexport function imageDataToCanvas(pixelData: PixelData) {\n\tconst canvas = createCanvas(pixelData.width, pixelData.height);\n\tlet imageData: ImageData;\n\n\tif (pixelData.data instanceof Uint8ClampedArray) {\n\t\timageData = pixelData as ImageData;\n\t} else {\n\t\timageData = createImageData(pixelData.width, pixelData.height);\n\t\tconst src = pixelData.data;\n\t\tconst dst = imageData.data;\n\n\t\tif (src instanceof Float32Array) {\n\t\t\tfor (let i = 0, size = src.length; i < size; i += 4) {\n\t\t\t\tdst[i + 0] = Math.round(Math.pow(src[i + 0], 1.0 / 2.2) * 255);\n\t\t\t\tdst[i + 1] = Math.round(Math.pow(src[i + 1], 1.0 / 2.2) * 255);\n\t\t\t\tdst[i + 2] = Math.round(Math.pow(src[i + 2], 1.0 / 2.2) * 255);\n\t\t\t\tdst[i + 3] = Math.round(src[i + 3] * 255);\n\t\t\t}\n\t\t} else {\n\t\t\tconst shift = (src instanceof Uint16Array) ? 8 : 0;\n\n\t\t\tfor (let i = 0, size = src.length; i < size; i++) {\n\t\t\t\tdst[i] = src[i] >>> shift;\n\t\t\t}\n\t\t}\n\t}\n\n\tcanvas.getContext('2d')!.putImageData(imageData, 0, 0);\n\treturn canvas;\n}\n\nexport function decodeBitmap(input: PixelArray, output: PixelArray, width: number, height: number) {\n\tif (!(input instanceof Uint8Array || input instanceof Uint8ClampedArray)) throw new Error('Invalid bit depth');\n\n\tfor (let y = 0, p = 0, o = 0; y < height; y++) {\n\t\tfor (let x = 0; x < width;) {\n\t\t\tlet b = input[o++];\n\n\t\t\tfor (let i = 0; i < 8 && x < width; i++, x++, p += 4) {\n\t\t\t\tconst v = b & 0x80 ? 0 : 255;\n\t\t\t\tb = b << 1;\n\t\t\t\toutput[p + 0] = v;\n\t\t\t\toutput[p + 1] = v;\n\t\t\t\toutput[p + 2] = v;\n\t\t\t\toutput[p + 3] = 255;\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport function writeDataRaw(data: PixelData, offset: number, width: number, height: number) {\n\tif (!width || !height)\n\t\treturn undefined;\n\n\tconst array = new Uint8Array(width * height);\n\n\tfor (let i = 0; i < array.length; i++) {\n\t\tarray[i] = data.data[i * 4 + offset];\n\t}\n\n\treturn array;\n}\n\nexport function writeDataRLE(buffer: Uint8Array, { data, width, height }: PixelData, offsets: number[], large: boolean) {\n\tif (!width || !height) return undefined;\n\n\tconst stride = (4 * width) | 0;\n\n\tlet ol = 0;\n\tlet o = (offsets.length * (large ? 4 : 2) * height) | 0;\n\n\tfor (const offset of offsets) {\n\t\tfor (let y = 0, p = offset | 0; y < height; y++) {\n\t\t\tconst strideStart = (y * stride) | 0;\n\t\t\tconst strideEnd = (strideStart + stride) | 0;\n\t\t\tconst lastIndex = (strideEnd + offset - 4) | 0;\n\t\t\tconst lastIndex2 = (lastIndex - 4) | 0;\n\t\t\tconst startOffset = o;\n\n\t\t\tfor (p = (strideStart + offset) | 0; p < strideEnd; p = (p + 4) | 0) {\n\t\t\t\tif (p < lastIndex2) {\n\t\t\t\t\tlet value1 = data[p];\n\t\t\t\t\tp = (p + 4) | 0;\n\t\t\t\t\tlet value2 = data[p];\n\t\t\t\t\tp = (p + 4) | 0;\n\t\t\t\t\tlet value3 = data[p];\n\n\t\t\t\t\tif (value1 === value2 && value1 === value3) {\n\t\t\t\t\t\tlet count = 3;\n\n\t\t\t\t\t\twhile (count < 128 && p < lastIndex && data[(p + 4) | 0] === value1) {\n\t\t\t\t\t\t\tcount = (count + 1) | 0;\n\t\t\t\t\t\t\tp = (p + 4) | 0;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbuffer[o++] = 1 - count;\n\t\t\t\t\t\tbuffer[o++] = value1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst countIndex = o;\n\t\t\t\t\t\tlet writeLast = true;\n\t\t\t\t\t\tlet count = 1;\n\t\t\t\t\t\tbuffer[o++] = 0;\n\t\t\t\t\t\tbuffer[o++] = value1;\n\n\t\t\t\t\t\twhile (p < lastIndex && count < 128) {\n\t\t\t\t\t\t\tp = (p + 4) | 0;\n\t\t\t\t\t\t\tvalue1 = value2;\n\t\t\t\t\t\t\tvalue2 = value3;\n\t\t\t\t\t\t\tvalue3 = data[p];\n\n\t\t\t\t\t\t\tif (value1 === value2 && value1 === value3) {\n\t\t\t\t\t\t\t\tp = (p - 12) | 0;\n\t\t\t\t\t\t\t\twriteLast = false;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\t\tbuffer[o++] = value1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (writeLast) {\n\t\t\t\t\t\t\tif (count < 127) {\n\t\t\t\t\t\t\t\tbuffer[o++] = value2;\n\t\t\t\t\t\t\t\tbuffer[o++] = value3;\n\t\t\t\t\t\t\t\tcount += 2;\n\t\t\t\t\t\t\t} else if (count < 128) {\n\t\t\t\t\t\t\t\tbuffer[o++] = value2;\n\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\t\tp = (p - 4) | 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tp = (p - 8) | 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbuffer[countIndex] = count - 1;\n\t\t\t\t\t}\n\t\t\t\t} else if (p === lastIndex) {\n\t\t\t\t\tbuffer[o++] = 0;\n\t\t\t\t\tbuffer[o++] = data[p];\n\t\t\t\t} else { // p === lastIndex2\n\t\t\t\t\tbuffer[o++] = 1;\n\t\t\t\t\tbuffer[o++] = data[p];\n\t\t\t\t\tp = (p + 4) | 0;\n\t\t\t\t\tbuffer[o++] = data[p];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst length = o - startOffset;\n\n\t\t\tif (large) {\n\t\t\t\tbuffer[ol++] = (length >> 24) & 0xff;\n\t\t\t\tbuffer[ol++] = (length >> 16) & 0xff;\n\t\t\t}\n\n\t\t\tbuffer[ol++] = (length >> 8) & 0xff;\n\t\t\tbuffer[ol++] = length & 0xff;\n\t\t}\n\t}\n\n\treturn buffer.slice(0, o);\n}\n\nexport function writeDataZipWithoutPrediction({ data, width, height }: PixelData, offsets: number[]) {\n\tconst size = width * height;\n\tconst channel = new Uint8Array(size);\n\tconst buffers: Uint8Array[] = [];\n\tlet totalLength = 0;\n\n\tfor (const offset of offsets) {\n\t\tfor (let i = 0, o = offset; i < size; i++, o += 4) {\n\t\t\tchannel[i] = data[o];\n\t\t}\n\n\t\tconst buffer = deflateSync(channel);\n\t\tbuffers.push(buffer);\n\t\ttotalLength += buffer.byteLength;\n\t}\n\n\tif (buffers.length > 0) {\n\t\tconst buffer = new Uint8Array(totalLength);\n\t\tlet offset = 0;\n\n\t\tfor (const b of buffers) {\n\t\t\tbuffer.set(b, offset);\n\t\t\toffset += b.byteLength;\n\t\t}\n\n\t\treturn buffer;\n\t} else {\n\t\treturn buffers[0];\n\t}\n}\n\nexport let createCanvas: (width: number, height: number) => HTMLCanvasElement = () => {\n\tthrow new Error('Canvas not initialized, use initializeCanvas method to set up createCanvas method');\n};\n\nexport let createCanvasFromData: (data: Uint8Array) => HTMLCanvasElement = () => {\n\tthrow new Error('Canvas not initialized, use initializeCanvas method to set up createCanvasFromData method');\n};\n\nlet tempCanvas: HTMLCanvasElement | undefined = undefined;\n\nexport let createImageData: (width: number, height: number) => ImageData = (width, height) => {\n\tif (!tempCanvas) tempCanvas = createCanvas(1, 1);\n\treturn tempCanvas.getContext('2d')!.createImageData(width, height);\n};\n\nif (typeof document !== 'undefined') {\n\tcreateCanvas = (width, height) => {\n\t\tconst canvas = document.createElement('canvas');\n\t\tcanvas.width = width;\n\t\tcanvas.height = height;\n\t\treturn canvas;\n\t};\n\n\tcreateCanvasFromData = (data) => {\n\t\tconst image = new Image();\n\t\timage.src = 'data:image/jpeg;base64,' + fromByteArray(data);\n\t\tconst canvas = document.createElement('canvas');\n\t\tcanvas.width = image.width;\n\t\tcanvas.height = image.height;\n\t\tcanvas.getContext('2d')!.drawImage(image, 0, 0);\n\t\treturn canvas;\n\t};\n}\n\nexport function initializeCanvas(\n\tcreateCanvasMethod: (width: number, height: number) => HTMLCanvasElement,\n\tcreateCanvasFromDataMethod?: (data: Uint8Array) => HTMLCanvasElement,\n\tcreateImageDataMethod?: (width: number, height: number) => ImageData\n) {\n\tcreateCanvas = createCanvasMethod;\n\tcreateCanvasFromData = createCanvasFromDataMethod || createCanvasFromData;\n\tcreateImageData = createImageDataMethod || createImageData;\n}\n","\n/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//const Z_FILTERED          = 1;\n//const Z_HUFFMAN_ONLY      = 2;\n//const Z_RLE               = 3;\nconst Z_FIXED$1               = 4;\n//const Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nconst Z_BINARY              = 0;\nconst Z_TEXT                = 1;\n//const Z_ASCII             = 1; // = Z_TEXT\nconst Z_UNKNOWN$1             = 2;\n\n/*============================================================================*/\n\n\nfunction zero$1(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nconst STORED_BLOCK = 0;\nconst STATIC_TREES = 1;\nconst DYN_TREES    = 2;\n/* The three kinds of block type */\n\nconst MIN_MATCH$1    = 3;\nconst MAX_MATCH$1    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nconst LENGTH_CODES$1  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nconst LITERALS$1      = 256;\n/* number of literal bytes 0..255 */\n\nconst L_CODES$1       = LITERALS$1 + 1 + LENGTH_CODES$1;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nconst D_CODES$1       = 30;\n/* number of distance codes */\n\nconst BL_CODES$1      = 19;\n/* number of codes used to transfer the bit lengths */\n\nconst HEAP_SIZE$1     = 2 * L_CODES$1 + 1;\n/* maximum heap size */\n\nconst MAX_BITS$1      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nconst MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nconst END_BLOCK   = 256;\n/* end of block literal code */\n\nconst REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nconst REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nconst REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nconst extra_lbits =   /* extra bits for each length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);\n\nconst extra_dbits =   /* extra bits for each distance code */\n  new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);\n\nconst extra_blbits =  /* extra bits for each bit length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);\n\nconst bl_order =\n  new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nconst DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nconst static_ltree  = new Array((L_CODES$1 + 2) * 2);\nzero$1(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nconst static_dtree  = new Array(D_CODES$1 * 2);\nzero$1(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nconst _dist_code    = new Array(DIST_CODE_LEN);\nzero$1(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nconst _length_code  = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);\nzero$1(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nconst base_length   = new Array(LENGTH_CODES$1);\nzero$1(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nconst base_dist     = new Array(D_CODES$1);\nzero$1(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nlet static_l_desc;\nlet static_d_desc;\nlet static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nconst d_code = (dist) => {\n\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n};\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nconst put_short = (s, w) => {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n};\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nconst send_bits = (s, value, length) => {\n\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n};\n\n\nconst send_code = (s, c, tree) => {\n\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n};\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nconst bi_reverse = (code, len) => {\n\n  let res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nconst bi_flush = (s) => {\n\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n};\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nconst gen_bitlen = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n\n  const tree            = desc.dyn_tree;\n  const max_code        = desc.max_code;\n  const stree           = desc.stat_desc.static_tree;\n  const has_stree       = desc.stat_desc.has_stree;\n  const extra           = desc.stat_desc.extra_bits;\n  const base            = desc.stat_desc.extra_base;\n  const max_length      = desc.stat_desc.max_length;\n  let h;              /* heap index */\n  let n, m;           /* iterate over the tree elements */\n  let bits;           /* bit length */\n  let xbits;          /* extra bits */\n  let f;              /* frequency */\n  let overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS$1; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Tracev((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Tracev((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nconst gen_codes = (tree, max_code, bl_count) => {\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n\n  const next_code = new Array(MAX_BITS$1 + 1); /* next code value for each bit length */\n  let code = 0;              /* running code value */\n  let bits;                  /* bit index */\n  let n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS$1; bits++) {\n    code = (code + bl_count[bits - 1]) << 1;\n    next_code[bits] = code;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    let len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n};\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nconst tr_static_init = () => {\n\n  let n;        /* iterates over tree elements */\n  let bits;     /* bit counter */\n  let length;   /* length value */\n  let code;     /* code value */\n  let dist;     /* distance index */\n  const bl_count = new Array(MAX_BITS$1 + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES$1 - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES$1; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS$1; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES$1 + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES$1; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES$1, MAX_BITS$1);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES$1, MAX_BL_BITS);\n\n  //static_init_done = true;\n};\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nconst init_block = (s) => {\n\n  let n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES$1;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES$1;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES$1; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.sym_next = s.matches = 0;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nconst bi_windup = (s) =>\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n};\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nconst smaller = (tree, n, m, depth) => {\n\n  const _n2 = n * 2;\n  const _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n};\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nconst pqdownheap = (s, tree, k) => {\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n\n  const v = s.heap[k];\n  let j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n};\n\n\n// inlined manually\n// const SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nconst compress_block = (s, ltree, dtree) => {\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n\n  let dist;           /* distance of matched string */\n  let lc;             /* match length or unmatched char (if dist == 0) */\n  let sx = 0;         /* running index in sym_buf */\n  let code;           /* the code to send */\n  let extra;          /* number of extra bits to send */\n\n  if (s.sym_next !== 0) {\n    do {\n      dist = s.pending_buf[s.sym_buf + sx++] & 0xff;\n      dist += (s.pending_buf[s.sym_buf + sx++] & 0xff) << 8;\n      lc = s.pending_buf[s.sym_buf + sx++];\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS$1 + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and sym_buf is ok: */\n      //Assert(s->pending < s->lit_bufsize + sx, \"pendingBuf overflow\");\n\n    } while (sx < s.sym_next);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n};\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nconst build_tree = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n\n  const tree     = desc.dyn_tree;\n  const stree    = desc.stat_desc.static_tree;\n  const has_stree = desc.stat_desc.has_stree;\n  const elems    = desc.stat_desc.elems;\n  let n, m;          /* iterate over heap elements */\n  let max_code = -1; /* largest code with non zero frequency */\n  let node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE$1;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n};\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nconst scan_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nconst send_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nconst build_bl_tree = (s) => {\n\n  let max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n};\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nconst send_all_trees = (s, lcodes, dcodes, blcodes) => {\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n\n  let rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n};\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"block list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"allow list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nconst detect_data_type = (s) => {\n  /* block_mask is the bit mask of block-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  let block_mask = 0xf3ffc07f;\n  let n;\n\n  /* Check for non-textual (\"block-listed\") bytes. */\n  for (n = 0; n <= 31; n++, block_mask >>>= 1) {\n    if ((block_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"allow-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS$1; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"block-listed\" or \"allow-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n};\n\n\nlet static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nconst _tr_init$1 = (s) =>\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n};\n\n\n/* ===========================================================================\n * Send a stored block\n */\nconst _tr_stored_block$1 = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  bi_windup(s);        /* align on byte boundary */\n  put_short(s, stored_len);\n  put_short(s, ~stored_len);\n  if (stored_len) {\n    s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);\n  }\n  s.pending += stored_len;\n};\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nconst _tr_align$1 = (s) => {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n};\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and write out the encoded block.\n */\nconst _tr_flush_block$1 = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  let max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN$1) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->sym_next / 3));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block$1(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n};\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nconst _tr_tally$1 = (s, dist, lc) => {\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist;\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;\n  s.pending_buf[s.sym_buf + s.sym_next++] = lc;\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n  return (s.sym_next === s.sym_end);\n};\n\nvar _tr_init_1  = _tr_init$1;\nvar _tr_stored_block_1 = _tr_stored_block$1;\nvar _tr_flush_block_1  = _tr_flush_block$1;\nvar _tr_tally_1 = _tr_tally$1;\nvar _tr_align_1 = _tr_align$1;\n\nvar trees = {\n\t_tr_init: _tr_init_1,\n\t_tr_stored_block: _tr_stored_block_1,\n\t_tr_flush_block: _tr_flush_block_1,\n\t_tr_tally: _tr_tally_1,\n\t_tr_align: _tr_align_1\n};\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst adler32 = (adler, buf, len, pos) => {\n  let s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n};\n\n\nvar adler32_1 = adler32;\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nconst makeTable = () => {\n  let c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n};\n\n// Create table on load. Just 255 signed longs. Not a problem.\nconst crcTable = new Uint32Array(makeTable());\n\n\nconst crc32 = (crc, buf, len, pos) => {\n  const t = crcTable;\n  const end = pos + len;\n\n  crc ^= -1;\n\n  for (let i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n};\n\n\nvar crc32_1 = crc32;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar messages = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar constants$2 = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  Z_MEM_ERROR:       -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = trees;\n\n\n\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$2, Z_PARTIAL_FLUSH, Z_FULL_FLUSH: Z_FULL_FLUSH$1, Z_FINISH: Z_FINISH$3, Z_BLOCK: Z_BLOCK$1,\n  Z_OK: Z_OK$3, Z_STREAM_END: Z_STREAM_END$3, Z_STREAM_ERROR: Z_STREAM_ERROR$2, Z_DATA_ERROR: Z_DATA_ERROR$2, Z_BUF_ERROR: Z_BUF_ERROR$1,\n  Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,\n  Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1,\n  Z_UNKNOWN,\n  Z_DEFLATED: Z_DEFLATED$2\n} = constants$2;\n\n/*============================================================================*/\n\n\nconst MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nconst MAX_WBITS$1 = 15;\n/* 32K LZ77 window */\nconst DEF_MEM_LEVEL = 8;\n\n\nconst LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nconst LITERALS      = 256;\n/* number of literal bytes 0..255 */\nconst L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nconst D_CODES       = 30;\n/* number of distance codes */\nconst BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nconst HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nconst MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst MIN_MATCH = 3;\nconst MAX_MATCH = 258;\nconst MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nconst PRESET_DICT = 0x20;\n\nconst INIT_STATE    =  42;    /* zlib header -> BUSY_STATE */\n//#ifdef GZIP\nconst GZIP_STATE    =  57;    /* gzip header -> BUSY_STATE | EXTRA_STATE */\n//#endif\nconst EXTRA_STATE   =  69;    /* gzip extra block -> NAME_STATE */\nconst NAME_STATE    =  73;    /* gzip file name -> COMMENT_STATE */\nconst COMMENT_STATE =  91;    /* gzip comment -> HCRC_STATE */\nconst HCRC_STATE    = 103;    /* gzip header CRC -> BUSY_STATE */\nconst BUSY_STATE    = 113;    /* deflate -> FINISH_STATE */\nconst FINISH_STATE  = 666;    /* stream complete */\n\nconst BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nconst BS_BLOCK_DONE     = 2; /* block flush performed */\nconst BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nconst BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nconst OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nconst err = (strm, errorCode) => {\n  strm.msg = messages[errorCode];\n  return errorCode;\n};\n\nconst rank = (f) => {\n  return ((f) * 2) - ((f) > 4 ? 9 : 0);\n};\n\nconst zero = (buf) => {\n  let len = buf.length; while (--len >= 0) { buf[len] = 0; }\n};\n\n/* ===========================================================================\n * Slide the hash table when sliding the window down (could be avoided with 32\n * bit values at the expense of memory usage). We slide even when level == 0 to\n * keep the hash table consistent if we switch back to level > 0 later.\n */\nconst slide_hash = (s) => {\n  let n, m;\n  let p;\n  let wsize = s.w_size;\n\n  n = s.hash_size;\n  p = n;\n  do {\n    m = s.head[--p];\n    s.head[p] = (m >= wsize ? m - wsize : 0);\n  } while (--n);\n  n = wsize;\n//#ifndef FASTEST\n  p = n;\n  do {\n    m = s.prev[--p];\n    s.prev[p] = (m >= wsize ? m - wsize : 0);\n    /* If n is not on any hash chain, prev[n] is garbage but\n     * its value will never be used.\n     */\n  } while (--n);\n//#endif\n};\n\n/* eslint-disable new-cap */\nlet HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;\n// This hash causes less collisions, https://github.com/nodeca/pako/issues/135\n// But breaks binary compatibility\n//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;\nlet HASH = HASH_ZLIB;\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output, except for\n * some deflate_stored() output, goes through this function so some\n * applications may wish to modify it to avoid allocating a large\n * strm->next_out buffer and copying into it. (See also read_buf()).\n */\nconst flush_pending = (strm) => {\n  const s = strm.state;\n\n  //_tr_flush_bits(s);\n  let len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);\n  strm.next_out  += len;\n  s.pending_out  += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending      -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n};\n\n\nconst flush_block_only = (s, last) => {\n  _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n};\n\n\nconst put_byte = (s, b) => {\n  s.pending_buf[s.pending++] = b;\n};\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nconst putShortMSB = (s, b) => {\n\n  //  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n};\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nconst read_buf = (strm, buf, start, size) => {\n\n  let len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32_1(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32_1(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n};\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nconst longest_match = (s, cur_match) => {\n\n  let chain_length = s.max_chain_length;      /* max hash chain length */\n  let scan = s.strstart; /* current string */\n  let match;                       /* matched string */\n  let len;                           /* length of current match */\n  let best_len = s.prev_length;              /* best match length so far */\n  let nice_match = s.nice_match;             /* stop if match long enough */\n  const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  const _win = s.window; // shortcut\n\n  const wmask = s.w_mask;\n  const prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  const strend = s.strstart + MAX_MATCH;\n  let scan_end1  = _win[scan + best_len - 1];\n  let scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n};\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nconst fill_window = (s) => {\n\n  const _w_size = s.w_size;\n  let n, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n      if (s.insert > s.strstart) {\n        s.insert = s.strstart;\n      }\n      slide_hash(s);\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    const curr = s.strstart + s.lookahead;\n//    let init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n};\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n *\n * In case deflateParams() is used to later switch to a non-zero compression\n * level, s->matches (otherwise unused when storing) keeps track of the number\n * of hash table slides to perform. If s->matches is 1, then one hash table\n * slide will be done when switching. If s->matches is 2, the maximum value\n * allowed here, then the hash table will be cleared, since two or more slides\n * is the same as a clear.\n *\n * deflate_stored() is written to minimize the number of times an input byte is\n * copied. It is most efficient with large input and output buffers, which\n * maximizes the opportunites to have a single copy from next_in to next_out.\n */\nconst deflate_stored = (s, flush) => {\n\n  /* Smallest worthy block size when not flushing or finishing. By default\n   * this is 32K. This can be as small as 507 bytes for memLevel == 1. For\n   * large input and output buffers, the stored block size will be larger.\n   */\n  let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;\n\n  /* Copy as many min_block or larger stored blocks directly to next_out as\n   * possible. If flushing, copy the remaining available input to next_out as\n   * stored blocks, if there is enough space.\n   */\n  let len, left, have, last = 0;\n  let used = s.strm.avail_in;\n  do {\n    /* Set len to the maximum size block that we can copy directly with the\n     * available input data and output space. Set left to how much of that\n     * would be copied from what's left in the window.\n     */\n    len = 65535/* MAX_STORED */;     /* maximum deflate stored block length */\n    have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    if (s.strm.avail_out < have) {         /* need room for header */\n      break;\n    }\n      /* maximum stored block length that will fit in avail_out: */\n    have = s.strm.avail_out - have;\n    left = s.strstart - s.block_start;  /* bytes left in window */\n    if (len > left + s.strm.avail_in) {\n      len = left + s.strm.avail_in;   /* limit len to the input */\n    }\n    if (len > have) {\n      len = have;             /* limit len to the output */\n    }\n\n    /* If the stored block would be less than min_block in length, or if\n     * unable to copy all of the available input when flushing, then try\n     * copying to the window and the pending buffer instead. Also don't\n     * write an empty block when flushing -- deflate() does that.\n     */\n    if (len < min_block && ((len === 0 && flush !== Z_FINISH$3) ||\n                        flush === Z_NO_FLUSH$2 ||\n                        len !== left + s.strm.avail_in)) {\n      break;\n    }\n\n    /* Make a dummy stored block in pending to get the header bytes,\n     * including any pending bits. This also updates the debugging counts.\n     */\n    last = flush === Z_FINISH$3 && len === left + s.strm.avail_in ? 1 : 0;\n    _tr_stored_block(s, 0, 0, last);\n\n    /* Replace the lengths in the dummy stored block with len. */\n    s.pending_buf[s.pending - 4] = len;\n    s.pending_buf[s.pending - 3] = len >> 8;\n    s.pending_buf[s.pending - 2] = ~len;\n    s.pending_buf[s.pending - 1] = ~len >> 8;\n\n    /* Write the stored block header bytes. */\n    flush_pending(s.strm);\n\n//#ifdef ZLIB_DEBUG\n//    /* Update debugging counts for the data about to be copied. */\n//    s->compressed_len += len << 3;\n//    s->bits_sent += len << 3;\n//#endif\n\n    /* Copy uncompressed bytes from the window to next_out. */\n    if (left) {\n      if (left > len) {\n        left = len;\n      }\n      //zmemcpy(s->strm->next_out, s->window + s->block_start, left);\n      s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);\n      s.strm.next_out += left;\n      s.strm.avail_out -= left;\n      s.strm.total_out += left;\n      s.block_start += left;\n      len -= left;\n    }\n\n    /* Copy uncompressed bytes directly from next_in to next_out, updating\n     * the check value.\n     */\n    if (len) {\n      read_buf(s.strm, s.strm.output, s.strm.next_out, len);\n      s.strm.next_out += len;\n      s.strm.avail_out -= len;\n      s.strm.total_out += len;\n    }\n  } while (last === 0);\n\n  /* Update the sliding window with the last s->w_size bytes of the copied\n   * data, or append all of the copied data to the existing window if less\n   * than s->w_size bytes were copied. Also update the number of bytes to\n   * insert in the hash tables, in the event that deflateParams() switches to\n   * a non-zero compression level.\n   */\n  used -= s.strm.avail_in;    /* number of input bytes directly copied */\n  if (used) {\n    /* If any input was used, then no unused input remains in the window,\n     * therefore s->block_start == s->strstart.\n     */\n    if (used >= s.w_size) {  /* supplant the previous history */\n      s.matches = 2;     /* clear hash */\n      //zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);\n      s.strstart = s.w_size;\n      s.insert = s.strstart;\n    }\n    else {\n      if (s.window_size - s.strstart <= used) {\n        /* Slide the window down. */\n        s.strstart -= s.w_size;\n        //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n        if (s.matches < 2) {\n          s.matches++;   /* add a pending slide_hash() */\n        }\n        if (s.insert > s.strstart) {\n          s.insert = s.strstart;\n        }\n      }\n      //zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);\n      s.strstart += used;\n      s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;\n    }\n    s.block_start = s.strstart;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* If the last block was written to next_out, then done. */\n  if (last) {\n    return BS_FINISH_DONE;\n  }\n\n  /* If flushing and all input has been consumed, then done. */\n  if (flush !== Z_NO_FLUSH$2 && flush !== Z_FINISH$3 &&\n    s.strm.avail_in === 0 && s.strstart === s.block_start) {\n    return BS_BLOCK_DONE;\n  }\n\n  /* Fill the window with any remaining input. */\n  have = s.window_size - s.strstart;\n  if (s.strm.avail_in > have && s.block_start >= s.w_size) {\n    /* Slide the window down. */\n    s.block_start -= s.w_size;\n    s.strstart -= s.w_size;\n    //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n    s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n    if (s.matches < 2) {\n      s.matches++;       /* add a pending slide_hash() */\n    }\n    have += s.w_size;      /* more space now */\n    if (s.insert > s.strstart) {\n      s.insert = s.strstart;\n    }\n  }\n  if (have > s.strm.avail_in) {\n    have = s.strm.avail_in;\n  }\n  if (have) {\n    read_buf(s.strm, s.window, s.strstart, have);\n    s.strstart += have;\n    s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* There was not enough avail_out to write a complete worthy or flushed\n   * stored block to next_out. Write a stored block to pending instead, if we\n   * have enough input for a worthy block, or if flushing and there is enough\n   * room for the remaining input as a stored block in the pending buffer.\n   */\n  have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    /* maximum stored block length that will fit in pending: */\n  have = s.pending_buf_size - have > 65535/* MAX_STORED */ ? 65535/* MAX_STORED */ : s.pending_buf_size - have;\n  min_block = have > s.w_size ? s.w_size : have;\n  left = s.strstart - s.block_start;\n  if (left >= min_block ||\n     ((left || flush === Z_FINISH$3) && flush !== Z_NO_FLUSH$2 &&\n     s.strm.avail_in === 0 && left <= have)) {\n    len = left > have ? have : left;\n    last = flush === Z_FINISH$3 && s.strm.avail_in === 0 &&\n         len === left ? 1 : 0;\n    _tr_stored_block(s, s.block_start, len, last);\n    s.block_start += len;\n    flush_pending(s.strm);\n  }\n\n  /* We've done all we can with the available input and output. */\n  return last ? BS_FINISH_STARTED : BS_NEED_MORE;\n};\n\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nconst deflate_fast = (s, flush) => {\n\n  let hash_head;        /* head of the hash chain */\n  let bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nconst deflate_slow = (s, flush) => {\n\n  let hash_head;          /* head of hash chain */\n  let bflush;              /* set if current block must be flushed */\n\n  let max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n};\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nconst deflate_rle = (s, flush) => {\n\n  let bflush;            /* set if current block must be flushed */\n  let prev;              /* byte at distance one to match */\n  let scan, strend;      /* scan goes up to strend for length of run */\n\n  const _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nconst deflate_huff = (s, flush) => {\n\n  let bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH$2) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nconst configuration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nconst lm_init = (s) => {\n\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n};\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED$2; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new Uint16Array(HEAP_SIZE * 2);\n  this.dyn_dtree  = new Uint16Array((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new Uint16Array((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new Uint16Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new Uint16Array(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.sym_buf = 0;        /* buffer for distances and literals/lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.sym_next = 0;      /* running index in sym_buf */\n  this.sym_end = 0;       /* symbol table full when sym_next reaches this */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\n/* =========================================================================\n * Check for a valid deflate stream state. Return 0 if ok, 1 if not.\n */\nconst deflateStateCheck = (strm) => {\n\n  if (!strm) {\n    return 1;\n  }\n  const s = strm.state;\n  if (!s || s.strm !== strm || (s.status !== INIT_STATE &&\n//#ifdef GZIP\n                                s.status !== GZIP_STATE &&\n//#endif\n                                s.status !== EXTRA_STATE &&\n                                s.status !== NAME_STATE &&\n                                s.status !== COMMENT_STATE &&\n                                s.status !== HCRC_STATE &&\n                                s.status !== BUSY_STATE &&\n                                s.status !== FINISH_STATE)) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst deflateResetKeep = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return err(strm, Z_STREAM_ERROR$2);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  const s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status =\n//#ifdef GZIP\n    s.wrap === 2 ? GZIP_STATE :\n//#endif\n    s.wrap ? INIT_STATE : BUSY_STATE;\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = -2;\n  _tr_init(s);\n  return Z_OK$3;\n};\n\n\nconst deflateReset = (strm) => {\n\n  const ret = deflateResetKeep(strm);\n  if (ret === Z_OK$3) {\n    lm_init(strm.state);\n  }\n  return ret;\n};\n\n\nconst deflateSetHeader = (strm, head) => {\n\n  if (deflateStateCheck(strm) || strm.state.wrap !== 2) {\n    return Z_STREAM_ERROR$2;\n  }\n  strm.state.gzhead = head;\n  return Z_OK$3;\n};\n\n\nconst deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {\n\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR$2;\n  }\n  let wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION$1) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED || (windowBits === 8 && wrap !== 1)) {\n    return err(strm, Z_STREAM_ERROR$2);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  const s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n  s.status = INIT_STATE;     /* to pass state test in deflateReset() */\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new Uint8Array(s.w_size * 2);\n  s.head = new Uint16Array(s.hash_size);\n  s.prev = new Uint16Array(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  /* We overlay pending_buf and sym_buf. This works since the average size\n   * for length/distance pairs over any compressed block is assured to be 31\n   * bits or less.\n   *\n   * Analysis: The longest fixed codes are a length code of 8 bits plus 5\n   * extra bits, for lengths 131 to 257. The longest fixed distance codes are\n   * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest\n   * possible fixed-codes length/distance pair is then 31 bits total.\n   *\n   * sym_buf starts one-fourth of the way into pending_buf. So there are\n   * three bytes in sym_buf for every four bytes in pending_buf. Each symbol\n   * in sym_buf is three bytes -- two for the distance and one for the\n   * literal/length. As each symbol is consumed, the pointer to the next\n   * sym_buf value to read moves forward three bytes. From that symbol, up to\n   * 31 bits are written to pending_buf. The closest the written pending_buf\n   * bits gets to the next sym_buf symbol to read is just before the last\n   * code is written. At that time, 31*(n-2) bits have been written, just\n   * after 24*(n-2) bits have been consumed from sym_buf. sym_buf starts at\n   * 8*n bits into pending_buf. (Note that the symbol buffer fills when n-1\n   * symbols are written.) The closest the writing gets to what is unread is\n   * then n+14 bits. Here n is lit_bufsize, which is 16384 by default, and\n   * can range from 128 to 32768.\n   *\n   * Therefore, at a minimum, there are 142 bits of space between what is\n   * written and what is read in the overlain buffers, so the symbols cannot\n   * be overwritten by the compressed data. That space is actually 139 bits,\n   * due to the three-bit fixed-code block header.\n   *\n   * That covers the case where either Z_FIXED is specified, forcing fixed\n   * codes, or when the use of fixed codes is chosen, because that choice\n   * results in a smaller compressed block than dynamic codes. That latter\n   * condition then assures that the above analysis also covers all dynamic\n   * blocks. A dynamic-code block will only be chosen to be emitted if it has\n   * fewer bits than a fixed-code block would for the same set of symbols.\n   * Therefore its average symbol length is assured to be less than 31. So\n   * the compressed data for a dynamic block also cannot overwrite the\n   * symbols from which it is being constructed.\n   */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n  s.pending_buf = new Uint8Array(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->sym_buf = s->pending_buf + s->lit_bufsize;\n  s.sym_buf = s.lit_bufsize;\n\n  //s->sym_end = (s->lit_bufsize - 1) * 3;\n  s.sym_end = (s.lit_bufsize - 1) * 3;\n  /* We avoid equality with lit_bufsize*3 because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n};\n\nconst deflateInit = (strm, level) => {\n\n  return deflateInit2(strm, level, Z_DEFLATED$2, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);\n};\n\n\n/* ========================================================================= */\nconst deflate$2 = (strm, flush) => {\n\n  if (deflateStateCheck(strm) || flush > Z_BLOCK$1 || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR$2) : Z_STREAM_ERROR$2;\n  }\n\n  const s = strm.state;\n\n  if (!strm.output ||\n      (strm.avail_in !== 0 && !strm.input) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH$3)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$2);\n  }\n\n  const old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH$3) {\n    return err(strm, Z_BUF_ERROR$1);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR$1);\n  }\n\n  /* Write the header */\n  if (s.status === INIT_STATE && s.wrap === 0) {\n    s.status = BUSY_STATE;\n  }\n  if (s.status === INIT_STATE) {\n    /* zlib header */\n    let header = (Z_DEFLATED$2 + ((s.w_bits - 8) << 4)) << 8;\n    let level_flags = -1;\n\n    if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n      level_flags = 0;\n    } else if (s.level < 6) {\n      level_flags = 1;\n    } else if (s.level === 6) {\n      level_flags = 2;\n    } else {\n      level_flags = 3;\n    }\n    header |= (level_flags << 6);\n    if (s.strstart !== 0) { header |= PRESET_DICT; }\n    header += 31 - (header % 31);\n\n    putShortMSB(s, header);\n\n    /* Save the adler32 of the preset dictionary: */\n    if (s.strstart !== 0) {\n      putShortMSB(s, strm.adler >>> 16);\n      putShortMSB(s, strm.adler & 0xffff);\n    }\n    strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n  }\n//#ifdef GZIP\n  if (s.status === GZIP_STATE) {\n    /* gzip header */\n    strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n    put_byte(s, 31);\n    put_byte(s, 139);\n    put_byte(s, 8);\n    if (!s.gzhead) { // s->gzhead == Z_NULL\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, OS_CODE);\n      s.status = BUSY_STATE;\n\n      /* Compression must start with an empty pending buffer */\n      flush_pending(strm);\n      if (s.pending !== 0) {\n        s.last_flush = -1;\n        return Z_OK$3;\n      }\n    }\n    else {\n      put_byte(s, (s.gzhead.text ? 1 : 0) +\n                  (s.gzhead.hcrc ? 2 : 0) +\n                  (!s.gzhead.extra ? 0 : 4) +\n                  (!s.gzhead.name ? 0 : 8) +\n                  (!s.gzhead.comment ? 0 : 16)\n      );\n      put_byte(s, s.gzhead.time & 0xff);\n      put_byte(s, (s.gzhead.time >> 8) & 0xff);\n      put_byte(s, (s.gzhead.time >> 16) & 0xff);\n      put_byte(s, (s.gzhead.time >> 24) & 0xff);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, s.gzhead.os & 0xff);\n      if (s.gzhead.extra && s.gzhead.extra.length) {\n        put_byte(s, s.gzhead.extra.length & 0xff);\n        put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n      }\n      if (s.gzhead.hcrc) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);\n      }\n      s.gzindex = 0;\n      s.status = EXTRA_STATE;\n    }\n  }\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let left = (s.gzhead.extra.length & 0xffff) - s.gzindex;\n      while (s.pending + left > s.pending_buf_size) {\n        let copy = s.pending_buf_size - s.pending;\n        // zmemcpy(s.pending_buf + s.pending,\n        //    s.gzhead.extra + s.gzindex, copy);\n        s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);\n        s.pending = s.pending_buf_size;\n        //--- HCRC_UPDATE(beg) ---//\n        if (s.gzhead.hcrc && s.pending > beg) {\n          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n        }\n        //---//\n        s.gzindex += copy;\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK$3;\n        }\n        beg = 0;\n        left -= copy;\n      }\n      // JS specific: s.gzhead.extra may be TypedArray or Array for backward compatibility\n      //              TypedArray.slice and TypedArray.from don't exist in IE10-IE11\n      let gzhead_extra = new Uint8Array(s.gzhead.extra);\n      // zmemcpy(s->pending_buf + s->pending,\n      //     s->gzhead->extra + s->gzindex, left);\n      s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);\n      s.pending += left;\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = NAME_STATE;\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK$3;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = COMMENT_STATE;\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK$3;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n    }\n    s.status = HCRC_STATE;\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK$3;\n        }\n      }\n      put_byte(s, strm.adler & 0xff);\n      put_byte(s, (strm.adler >> 8) & 0xff);\n      strm.adler = 0; //crc32(0L, Z_NULL, 0);\n    }\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n  }\n//#endif\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH$2 && s.status !== FINISH_STATE)) {\n    let bstate = s.level === 0 ? deflate_stored(s, flush) :\n                 s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :\n                 s.strategy === Z_RLE ? deflate_rle(s, flush) :\n                 configuration_table[s.level].func(s, flush);\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK$3;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        _tr_align(s);\n      }\n      else if (flush !== Z_BLOCK$1) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        _tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH$1) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK$3;\n      }\n    }\n  }\n\n  if (flush !== Z_FINISH$3) { return Z_OK$3; }\n  if (s.wrap <= 0) { return Z_STREAM_END$3; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK$3 : Z_STREAM_END$3;\n};\n\n\nconst deflateEnd = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  const status = strm.state.status;\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$2) : Z_OK$3;\n};\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nconst deflateSetDictionary = (strm, dictionary) => {\n\n  let dictLength = dictionary.length;\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  const s = strm.state;\n  const wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    let tmpDict = new Uint8Array(s.w_size);\n    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  const avail = strm.avail_in;\n  const next = strm.next_in;\n  const input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    let str = s.strstart;\n    let n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK$3;\n};\n\n\nvar deflateInit_1 = deflateInit;\nvar deflateInit2_1 = deflateInit2;\nvar deflateReset_1 = deflateReset;\nvar deflateResetKeep_1 = deflateResetKeep;\nvar deflateSetHeader_1 = deflateSetHeader;\nvar deflate_2$1 = deflate$2;\nvar deflateEnd_1 = deflateEnd;\nvar deflateSetDictionary_1 = deflateSetDictionary;\nvar deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.deflateBound = deflateBound;\nmodule.exports.deflateCopy = deflateCopy;\nmodule.exports.deflateGetDictionary = deflateGetDictionary;\nmodule.exports.deflateParams = deflateParams;\nmodule.exports.deflatePending = deflatePending;\nmodule.exports.deflatePrime = deflatePrime;\nmodule.exports.deflateTune = deflateTune;\n*/\n\nvar deflate_1$2 = {\n\tdeflateInit: deflateInit_1,\n\tdeflateInit2: deflateInit2_1,\n\tdeflateReset: deflateReset_1,\n\tdeflateResetKeep: deflateResetKeep_1,\n\tdeflateSetHeader: deflateSetHeader_1,\n\tdeflate: deflate_2$1,\n\tdeflateEnd: deflateEnd_1,\n\tdeflateSetDictionary: deflateSetDictionary_1,\n\tdeflateInfo: deflateInfo\n};\n\nconst _has = (obj, key) => {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\n\nvar assign = function (obj /*from1, from2, from3, ...*/) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    const source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (const p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// Join array of chunks to single array.\nvar flattenChunks = (chunks) => {\n  // calculate data length\n  let len = 0;\n\n  for (let i = 0, l = chunks.length; i < l; i++) {\n    len += chunks[i].length;\n  }\n\n  // join chunks\n  const result = new Uint8Array(len);\n\n  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {\n    let chunk = chunks[i];\n    result.set(chunk, pos);\n    pos += chunk.length;\n  }\n\n  return result;\n};\n\nvar common = {\n\tassign: assign,\n\tflattenChunks: flattenChunks\n};\n\n// String encode/decode helpers\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nlet STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nconst _utf8len = new Uint8Array(256);\nfor (let q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nvar string2buf = (str) => {\n  if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {\n    return new TextEncoder().encode(str);\n  }\n\n  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new Uint8Array(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper\nconst buf2binstring = (buf, len) => {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if (buf.subarray && STR_APPLY_UIA_OK) {\n      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));\n    }\n  }\n\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n};\n\n\n// convert array to string\nvar buf2string = (buf, max) => {\n  const len = max || buf.length;\n\n  if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {\n    return new TextDecoder().decode(buf.subarray(0, max));\n  }\n\n  let i, out;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  const utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    let c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    let c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nvar utf8border = (buf, max) => {\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  let pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\nvar strings = {\n\tstring2buf: string2buf,\n\tbuf2string: buf2string,\n\tutf8border: utf8border\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nvar zstream = ZStream;\n\nconst toString$1 = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$1, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH: Z_FINISH$2,\n  Z_OK: Z_OK$2, Z_STREAM_END: Z_STREAM_END$2,\n  Z_DEFAULT_COMPRESSION,\n  Z_DEFAULT_STRATEGY,\n  Z_DEFLATED: Z_DEFLATED$1\n} = constants$2;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate$1(options) {\n  this.options = common.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED$1,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY\n  }, options || {});\n\n  let opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new zstream();\n  this.strm.avail_out = 0;\n\n  let status = deflate_1$2.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK$2) {\n    throw new Error(messages[status]);\n  }\n\n  if (opt.header) {\n    deflate_1$2.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    let dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString$1.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = deflate_1$2.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK$2) {\n      throw new Error(messages[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must\n * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending\n * buffers and call [[Deflate#onEnd]].\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate$1.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  let status, _flush_mode;\n\n  if (this.ended) { return false; }\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH$2 : Z_NO_FLUSH$1;\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString$1.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    // Make sure avail_out > 6 to avoid repeating markers\n    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    status = deflate_1$2.deflate(strm, _flush_mode);\n\n    // Ended => flush and finish\n    if (status === Z_STREAM_END$2) {\n      if (strm.next_out > 0) {\n        this.onData(strm.output.subarray(0, strm.next_out));\n      }\n      status = deflate_1$2.deflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return status === Z_OK$2;\n    }\n\n    // Flush if out buffer full\n    if (strm.avail_out === 0) {\n      this.onData(strm.output);\n      continue;\n    }\n\n    // Flush if requested and has data\n    if (_flush_mode > 0 && strm.next_out > 0) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array): output data.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate$1.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate$1.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK$2) {\n    this.result = common.flattenChunks(this.chunks);\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate$1(input, options) {\n  const deflator = new Deflate$1(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || messages[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw$1(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate$1(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip$1(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate$1(input, options);\n}\n\n\nvar Deflate_1$1 = Deflate$1;\nvar deflate_2 = deflate$1;\nvar deflateRaw_1$1 = deflateRaw$1;\nvar gzip_1$1 = gzip$1;\nvar constants$1 = constants$2;\n\nvar deflate_1$1 = {\n\tDeflate: Deflate_1$1,\n\tdeflate: deflate_2,\n\tdeflateRaw: deflateRaw_1$1,\n\tgzip: gzip_1$1,\n\tconstants: constants$1\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nconst BAD$1 = 16209;       /* got a data error -- remain here until reset */\nconst TYPE$1 = 16191;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nvar inffast = function inflate_fast(strm, start) {\n  let _in;                    /* local strm.input */\n  let last;                   /* have enough input while in < last */\n  let _out;                   /* local strm.output */\n  let beg;                    /* inflate()'s initial strm.output */\n  let end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  let dmax;                   /* maximum distance from zlib header */\n//#endif\n  let wsize;                  /* window size or zero if not using window */\n  let whave;                  /* valid bytes in the window */\n  let wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  let s_window;               /* allocated sliding window, if wsize != 0 */\n  let hold;                   /* local strm.hold */\n  let bits;                   /* local strm.bits */\n  let lcode;                  /* local strm.lencode */\n  let dcode;                  /* local strm.distcode */\n  let lmask;                  /* mask for first level of length codes */\n  let dmask;                  /* mask for first level of distance codes */\n  let here;                   /* retrieved table entry */\n  let op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  let len;                    /* match length, unused bytes */\n  let dist;                   /* match distance */\n  let from;                   /* where to copy match from */\n  let from_source;\n\n\n  let input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  const state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD$1;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD$1;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD$1;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE$1;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD$1;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst MAXBITS = 15;\nconst ENOUGH_LENS$1 = 852;\nconst ENOUGH_DISTS$1 = 592;\n//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst CODES$1 = 0;\nconst LENS$1 = 1;\nconst DISTS$1 = 2;\n\nconst lbase = new Uint16Array([ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n]);\n\nconst lext = new Uint8Array([ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n]);\n\nconst dbase = new Uint16Array([ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n]);\n\nconst dext = new Uint8Array([ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n]);\n\nconst inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>\n{\n  const bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  let len = 0;               /* a code's length in bits */\n  let sym = 0;               /* index of code symbols */\n  let min = 0, max = 0;          /* minimum and maximum code lengths */\n  let root = 0;              /* number of index bits for root table */\n  let curr = 0;              /* number of index bits for current table */\n  let drop = 0;              /* code bits to drop for sub-table */\n  let left = 0;                   /* number of prefix codes available */\n  let used = 0;              /* code entries in table used */\n  let huff = 0;              /* Huffman code */\n  let incr;              /* for incrementing code, index */\n  let fill;              /* index for replicating entries */\n  let low;               /* low bits for current root entry */\n  let mask;              /* mask for low root bits */\n  let next;             /* next available space in table */\n  let base = null;     /* base value table to use */\n//  let shoextra;    /* extra bits table to use */\n  let match;                  /* use base and extra for symbol >= match */\n  const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  let extra = null;\n\n  let here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES$1 || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES$1) {\n    base = extra = work;    /* dummy value--not used */\n    match = 20;\n\n  } else if (type === LENS$1) {\n    base = lbase;\n    extra = lext;\n    match = 257;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    match = 0;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS$1 && used > ENOUGH_LENS$1) ||\n    (type === DISTS$1 && used > ENOUGH_DISTS$1)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] + 1 < match) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] >= match) {\n      here_op = extra[work[sym] - match];\n      here_val = base[work[sym] - match];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS$1 && used > ENOUGH_LENS$1) ||\n        (type === DISTS$1 && used > ENOUGH_DISTS$1)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n\n\nvar inftrees = inflate_table;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n\n\n\n\n\nconst CODES = 0;\nconst LENS = 1;\nconst DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_FINISH: Z_FINISH$1, Z_BLOCK, Z_TREES,\n  Z_OK: Z_OK$1, Z_STREAM_END: Z_STREAM_END$1, Z_NEED_DICT: Z_NEED_DICT$1, Z_STREAM_ERROR: Z_STREAM_ERROR$1, Z_DATA_ERROR: Z_DATA_ERROR$1, Z_MEM_ERROR: Z_MEM_ERROR$1, Z_BUF_ERROR,\n  Z_DEFLATED\n} = constants$2;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nconst    HEAD = 16180;       /* i: waiting for magic header */\nconst    FLAGS = 16181;      /* i: waiting for method and flags (gzip) */\nconst    TIME = 16182;       /* i: waiting for modification time (gzip) */\nconst    OS = 16183;         /* i: waiting for extra flags and operating system (gzip) */\nconst    EXLEN = 16184;      /* i: waiting for extra length (gzip) */\nconst    EXTRA = 16185;      /* i: waiting for extra bytes (gzip) */\nconst    NAME = 16186;       /* i: waiting for end of file name (gzip) */\nconst    COMMENT = 16187;    /* i: waiting for end of comment (gzip) */\nconst    HCRC = 16188;       /* i: waiting for header crc (gzip) */\nconst    DICTID = 16189;    /* i: waiting for dictionary check value */\nconst    DICT = 16190;      /* waiting for inflateSetDictionary() call */\nconst        TYPE = 16191;      /* i: waiting for type bits, including last-flag bit */\nconst        TYPEDO = 16192;    /* i: same, but skip check to exit inflate on new block */\nconst        STORED = 16193;    /* i: waiting for stored size (length and complement) */\nconst        COPY_ = 16194;     /* i/o: same as COPY below, but only first time in */\nconst        COPY = 16195;      /* i/o: waiting for input or output to copy stored block */\nconst        TABLE = 16196;     /* i: waiting for dynamic block table lengths */\nconst        LENLENS = 16197;   /* i: waiting for code length code lengths */\nconst        CODELENS = 16198;  /* i: waiting for length/lit and distance code lengths */\nconst            LEN_ = 16199;      /* i: same as LEN below, but only first time in */\nconst            LEN = 16200;       /* i: waiting for length/lit/eob code */\nconst            LENEXT = 16201;    /* i: waiting for length extra bits */\nconst            DIST = 16202;      /* i: waiting for distance code */\nconst            DISTEXT = 16203;   /* i: waiting for distance extra bits */\nconst            MATCH = 16204;     /* o: waiting for output space to copy string */\nconst            LIT = 16205;       /* o: waiting for output space to write literal */\nconst    CHECK = 16206;     /* i: waiting for 32-bit check value */\nconst    LENGTH = 16207;    /* i: waiting for 32-bit length (gzip) */\nconst    DONE = 16208;      /* finished check, done -- remain here until reset */\nconst    BAD = 16209;       /* got a data error -- remain here until reset */\nconst    MEM = 16210;       /* got an inflate() memory error -- remain here until reset */\nconst    SYNC = 16211;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nconst ENOUGH_LENS = 852;\nconst ENOUGH_DISTS = 592;\n//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst MAX_WBITS = 15;\n/* 32K LZ77 window */\nconst DEF_WBITS = MAX_WBITS;\n\n\nconst zswap32 = (q) => {\n\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n};\n\n\nfunction InflateState() {\n  this.strm = null;           /* pointer back to this zlib stream */\n  this.mode = 0;              /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip,\n                                 bit 2 true to validate check value */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib), or\n                                 -1 if raw or no header yet */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new Uint16Array(320); /* temporary storage for code lengths */\n  this.work = new Uint16Array(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new Int32Array(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\n\nconst inflateStateCheck = (strm) => {\n\n  if (!strm) {\n    return 1;\n  }\n  const state = strm.state;\n  if (!state || state.strm !== strm ||\n    state.mode < HEAD || state.mode > SYNC) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst inflateResetKeep = (strm) => {\n\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.flags = -1;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);\n  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK$1;\n};\n\n\nconst inflateReset = (strm) => {\n\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n};\n\n\nconst inflateReset2 = (strm, windowBits) => {\n  let wrap;\n\n  /* get the state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 5;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR$1;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n};\n\n\nconst inflateInit2 = (strm, windowBits) => {\n\n  if (!strm) { return Z_STREAM_ERROR$1; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  const state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.strm = strm;\n  state.window = null/*Z_NULL*/;\n  state.mode = HEAD;     /* to pass state test in inflateReset2() */\n  const ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK$1) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n};\n\n\nconst inflateInit = (strm) => {\n\n  return inflateInit2(strm, DEF_WBITS);\n};\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nlet virgin = true;\n\nlet lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\n\nconst fixedtables = (state) => {\n\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    lenfix = new Int32Array(512);\n    distfix = new Int32Array(32);\n\n    /* literal/length table */\n    let sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inftrees(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inftrees(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n};\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nconst updatewindow = (strm, src, end, copy) => {\n\n  let dist;\n  const state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new Uint8Array(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    state.window.set(src.subarray(end - state.wsize, end), 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      state.window.set(src.subarray(end - copy, end), 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n};\n\n\nconst inflate$2 = (strm, flush) => {\n\n  let state;\n  let input, output;          // input/output buffers\n  let next;                   /* next input INDEX */\n  let put;                    /* next output INDEX */\n  let have, left;             /* available input and output */\n  let hold;                   /* bit buffer */\n  let bits;                   /* bits in bit buffer */\n  let _in, _out;              /* save starting available input and output */\n  let copy;                   /* number of stored or match bytes to copy */\n  let from;                   /* where to copy match bytes from */\n  let from_source;\n  let here = 0;               /* current decoding table entry */\n  let here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //let last;                   /* parent table entry */\n  let last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  let len;                    /* length to copy for repeats, bits to drop */\n  let ret;                    /* return code */\n  const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */\n  let opts;\n\n  let n; // temporary variable for NEED_BITS\n\n  const order = /* permutation of code lengths */\n    new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);\n\n\n  if (inflateStateCheck(strm) || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK$1;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          if (state.wbits === 0) {\n            state.wbits = 15;\n          }\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        if (len > 15 || len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n\n        // !!! pako patch. Force use `options.windowBits` if passed.\n        // Required to always use max window size by default.\n        state.dmax = 1 << state.wbits;\n        //state.dmax = 1 << len;\n\n        state.flags = 0;               /* indicate zlib header */\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32_1(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Uint8Array(state.head.extra_len);\n              }\n              state.head.extra.set(\n                input.subarray(\n                  next,\n                  // extra field is limited to 65536 bytes\n                  // - no need for additional size check\n                  next + copy\n                ),\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if ((state.flags & 0x0200) && (state.wrap & 4)) {\n              state.check = crc32_1(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if ((state.wrap & 4) && hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT$1;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          output.set(input.subarray(next, next + copy), put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inftrees(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inffast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if ((state.wrap & 4) && _out) {\n            strm.adler = state.check =\n                /*UPDATE_CHECK(state.check, put - _out, _out);*/\n                (state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.wrap & 4) && (state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if ((state.wrap & 4) && hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END$1;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR$1;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR$1;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR$1;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH$1))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if ((state.wrap & 4) && _out) {\n    strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH$1) && ret === Z_OK$1) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n};\n\n\nconst inflateEnd = (strm) => {\n\n  if (inflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  let state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK$1;\n};\n\n\nconst inflateGetHeader = (strm, head) => {\n\n  /* check state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR$1; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK$1;\n};\n\n\nconst inflateSetDictionary = (strm, dictionary) => {\n  const dictLength = dictionary.length;\n\n  let state;\n  let dictid;\n  let ret;\n\n  /* check state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32_1(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR$1;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR$1;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK$1;\n};\n\n\nvar inflateReset_1 = inflateReset;\nvar inflateReset2_1 = inflateReset2;\nvar inflateResetKeep_1 = inflateResetKeep;\nvar inflateInit_1 = inflateInit;\nvar inflateInit2_1 = inflateInit2;\nvar inflate_2$1 = inflate$2;\nvar inflateEnd_1 = inflateEnd;\nvar inflateGetHeader_1 = inflateGetHeader;\nvar inflateSetDictionary_1 = inflateSetDictionary;\nvar inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.inflateCodesUsed = inflateCodesUsed;\nmodule.exports.inflateCopy = inflateCopy;\nmodule.exports.inflateGetDictionary = inflateGetDictionary;\nmodule.exports.inflateMark = inflateMark;\nmodule.exports.inflatePrime = inflatePrime;\nmodule.exports.inflateSync = inflateSync;\nmodule.exports.inflateSyncPoint = inflateSyncPoint;\nmodule.exports.inflateUndermine = inflateUndermine;\nmodule.exports.inflateValidate = inflateValidate;\n*/\n\nvar inflate_1$2 = {\n\tinflateReset: inflateReset_1,\n\tinflateReset2: inflateReset2_1,\n\tinflateResetKeep: inflateResetKeep_1,\n\tinflateInit: inflateInit_1,\n\tinflateInit2: inflateInit2_1,\n\tinflate: inflate_2$1,\n\tinflateEnd: inflateEnd_1,\n\tinflateGetHeader: inflateGetHeader_1,\n\tinflateSetDictionary: inflateSetDictionary_1,\n\tinflateInfo: inflateInfo\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nvar gzheader = GZheader;\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_FINISH,\n  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR\n} = constants$2;\n\n/* ===========================================================================*/\n\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate$1(options) {\n  this.options = common.assign({\n    chunkSize: 1024 * 64,\n    windowBits: 15,\n    to: ''\n  }, options || {});\n\n  const opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new zstream();\n  this.strm.avail_out = 0;\n\n  let status  = inflate_1$2.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(messages[status]);\n  }\n\n  this.header = new gzheader();\n\n  inflate_1$2.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = inflate_1$2.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== Z_OK) {\n        throw new Error(messages[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer): input data\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE\n *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,\n *   `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. If end of stream detected,\n * [[Inflate#onEnd]] will be called.\n *\n * `flush_mode` is not needed for normal operation, because end of stream\n * detected automatically. You may try to use it for advanced things, but\n * this functionality was not tested.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate$1.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  const dictionary = this.options.dictionary;\n  let status, _flush_mode, last_avail_out;\n\n  if (this.ended) return false;\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = inflate_1$2.inflate(strm, _flush_mode);\n\n    if (status === Z_NEED_DICT && dictionary) {\n      status = inflate_1$2.inflateSetDictionary(strm, dictionary);\n\n      if (status === Z_OK) {\n        status = inflate_1$2.inflate(strm, _flush_mode);\n      } else if (status === Z_DATA_ERROR) {\n        // Replace code with more verbose\n        status = Z_NEED_DICT;\n      }\n    }\n\n    // Skip snyc markers if more data follows and not raw mode\n    while (strm.avail_in > 0 &&\n           status === Z_STREAM_END &&\n           strm.state.wrap > 0 &&\n           data[strm.next_in] !== 0)\n    {\n      inflate_1$2.inflateReset(strm);\n      status = inflate_1$2.inflate(strm, _flush_mode);\n    }\n\n    switch (status) {\n      case Z_STREAM_ERROR:\n      case Z_DATA_ERROR:\n      case Z_NEED_DICT:\n      case Z_MEM_ERROR:\n        this.onEnd(status);\n        this.ended = true;\n        return false;\n    }\n\n    // Remember real `avail_out` value, because we may patch out buffer content\n    // to align utf8 strings boundaries.\n    last_avail_out = strm.avail_out;\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === Z_STREAM_END) {\n\n        if (this.options.to === 'string') {\n\n          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          let tail = strm.next_out - next_out_utf8;\n          let utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail & realign counters\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));\n        }\n      }\n    }\n\n    // Must repeat iteration if out buffer is full\n    if (status === Z_OK && last_avail_out === 0) continue;\n\n    // Finalize if end of stream reached.\n    if (status === Z_STREAM_END) {\n      status = inflate_1$2.inflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return true;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|String): output data. When string output requested,\n *   each chunk will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate$1.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate$1.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = common.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako');\n * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));\n * let output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err) {\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate$1(input, options) {\n  const inflator = new Inflate$1(options);\n\n  inflator.push(input);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) throw inflator.msg || messages[inflator.err];\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw$1(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate$1(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nvar Inflate_1$1 = Inflate$1;\nvar inflate_2 = inflate$1;\nvar inflateRaw_1$1 = inflateRaw$1;\nvar ungzip$1 = inflate$1;\nvar constants = constants$2;\n\nvar inflate_1$1 = {\n\tInflate: Inflate_1$1,\n\tinflate: inflate_2,\n\tinflateRaw: inflateRaw_1$1,\n\tungzip: ungzip$1,\n\tconstants: constants\n};\n\nconst { Deflate, deflate, deflateRaw, gzip } = deflate_1$1;\n\nconst { Inflate, inflate, inflateRaw, ungzip } = inflate_1$1;\n\n\n\nvar Deflate_1 = Deflate;\nvar deflate_1 = deflate;\nvar deflateRaw_1 = deflateRaw;\nvar gzip_1 = gzip;\nvar Inflate_1 = Inflate;\nvar inflate_1 = inflate;\nvar inflateRaw_1 = inflateRaw;\nvar ungzip_1 = ungzip;\nvar constants_1 = constants$2;\n\nvar pako = {\n\tDeflate: Deflate_1,\n\tdeflate: deflate_1,\n\tdeflateRaw: deflateRaw_1,\n\tgzip: gzip_1,\n\tInflate: Inflate_1,\n\tinflate: inflate_1,\n\tinflateRaw: inflateRaw_1,\n\tungzip: ungzip_1,\n\tconstants: constants_1\n};\n\nexport { Deflate_1 as Deflate, Inflate_1 as Inflate, constants_1 as constants, pako as default, deflate_1 as deflate, deflateRaw_1 as deflateRaw, gzip_1 as gzip, inflate_1 as inflate, inflateRaw_1 as inflateRaw, ungzip_1 as ungzip };\n","\"use strict\";\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.hasMultiEffects = exports.readVectorMask = exports.booleanOperations = exports.readBezierKnot = exports.infoHandlersMap = exports.infoHandlers = void 0;\r\nvar base64_js_1 = require(\"base64-js\");\r\nvar effectsHelpers_1 = require(\"./effectsHelpers\");\r\nvar helpers_1 = require(\"./helpers\");\r\nvar psdReader_1 = require(\"./psdReader\");\r\nvar psdWriter_1 = require(\"./psdWriter\");\r\nvar descriptor_1 = require(\"./descriptor\");\r\nvar engineData_1 = require(\"./engineData\");\r\nvar text_1 = require(\"./text\");\r\nvar engineData2_1 = require(\"./engineData2\");\r\nvar fromAtoZ = 'abcdefghijklmnopqrstuvwxyz';\r\nexports.infoHandlers = [];\r\nexports.infoHandlersMap = {};\r\nfunction addHandler(key, has, read, write) {\r\n    var handler = { key: key, has: has, read: read, write: write };\r\n    exports.infoHandlers.push(handler);\r\n    exports.infoHandlersMap[handler.key] = handler;\r\n}\r\nfunction addHandlerAlias(key, target) {\r\n    exports.infoHandlersMap[key] = exports.infoHandlersMap[target];\r\n}\r\nfunction hasKey(key) {\r\n    return function (target) { return target[key] !== undefined; };\r\n}\r\nfunction readLength64(reader) {\r\n    if ((0, psdReader_1.readUint32)(reader))\r\n        throw new Error(\"Resource size above 4 GB limit at \".concat(reader.offset.toString(16)));\r\n    return (0, psdReader_1.readUint32)(reader);\r\n}\r\nfunction writeLength64(writer, length) {\r\n    (0, psdWriter_1.writeUint32)(writer, 0);\r\n    (0, psdWriter_1.writeUint32)(writer, length);\r\n}\r\naddHandler('TySh', hasKey('text'), function (reader, target, leftBytes) {\r\n    if ((0, psdReader_1.readInt16)(reader) !== 1)\r\n        throw new Error(\"Invalid TySh version\");\r\n    var transform = [];\r\n    for (var i = 0; i < 6; i++)\r\n        transform.push((0, psdReader_1.readFloat64)(reader));\r\n    if ((0, psdReader_1.readInt16)(reader) !== 50)\r\n        throw new Error(\"Invalid TySh text version\");\r\n    var text = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n    // console.log(require('util').inspect(text, false, 99, false), 'utf8');\r\n    if ((0, psdReader_1.readInt16)(reader) !== 1)\r\n        throw new Error(\"Invalid TySh warp version\");\r\n    var warp = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n    // console.log(require('util').inspect(warp, false, 99, false), 'utf8');\r\n    target.text = {\r\n        transform: transform,\r\n        left: (0, psdReader_1.readFloat32)(reader),\r\n        top: (0, psdReader_1.readFloat32)(reader),\r\n        right: (0, psdReader_1.readFloat32)(reader),\r\n        bottom: (0, psdReader_1.readFloat32)(reader),\r\n        text: text['Txt '].replace(/\\r/g, '\\n'),\r\n        index: text.TextIndex || 0,\r\n        gridding: descriptor_1.textGridding.decode(text.textGridding),\r\n        antiAlias: descriptor_1.Annt.decode(text.AntA),\r\n        orientation: descriptor_1.Ornt.decode(text.Ornt),\r\n        warp: {\r\n            style: descriptor_1.warpStyle.decode(warp.warpStyle),\r\n            value: warp.warpValue || 0,\r\n            perspective: warp.warpPerspective || 0,\r\n            perspectiveOther: warp.warpPerspectiveOther || 0,\r\n            rotate: descriptor_1.Ornt.decode(warp.warpRotate),\r\n        },\r\n    };\r\n    if (text.bounds)\r\n        target.text.bounds = (0, descriptor_1.descBoundsToBounds)(text.bounds);\r\n    if (text.boundingBox)\r\n        target.text.boundingBox = (0, descriptor_1.descBoundsToBounds)(text.boundingBox);\r\n    if (text.EngineData) {\r\n        var engineData = (0, engineData_1.parseEngineData)(text.EngineData);\r\n        var textData = (0, text_1.decodeEngineData)(engineData);\r\n        // console.log(require('util').inspect(engineData, false, 99, false), 'utf8');\r\n        // require('fs').writeFileSync(`layer-${target.name}.txt`, require('util').inspect(engineData, false, 99, false), 'utf8');\r\n        // const before = parseEngineData(text.EngineData);\r\n        // const after = encodeEngineData(engineData);\r\n        // require('fs').writeFileSync('before.txt', require('util').inspect(before, false, 99, false), 'utf8');\r\n        // require('fs').writeFileSync('after.txt', require('util').inspect(after, false, 99, false), 'utf8');\r\n        // console.log(require('util').inspect(parseEngineData(text.EngineData), false, 99, true));\r\n        target.text = __assign(__assign({}, target.text), textData);\r\n        // console.log(require('util').inspect(target.text, false, 99, true));\r\n    }\r\n    (0, psdReader_1.skipBytes)(reader, leftBytes());\r\n}, function (writer, target) {\r\n    var text = target.text;\r\n    var warp = text.warp || {};\r\n    var transform = text.transform || [1, 0, 0, 1, 0, 0];\r\n    var textDescriptor = __assign(__assign(__assign({ 'Txt ': (text.text || '').replace(/\\r?\\n/g, '\\r'), textGridding: descriptor_1.textGridding.encode(text.gridding), Ornt: descriptor_1.Ornt.encode(text.orientation), AntA: descriptor_1.Annt.encode(text.antiAlias) }, (text.bounds ? { bounds: (0, descriptor_1.boundsToDescBounds)(text.bounds) } : {})), (text.boundingBox ? { boundingBox: (0, descriptor_1.boundsToDescBounds)(text.boundingBox) } : {})), { TextIndex: text.index || 0, EngineData: (0, engineData_1.serializeEngineData)((0, text_1.encodeEngineData)(text)) });\r\n    (0, psdWriter_1.writeInt16)(writer, 1); // version\r\n    for (var i = 0; i < 6; i++) {\r\n        (0, psdWriter_1.writeFloat64)(writer, transform[i]);\r\n    }\r\n    (0, psdWriter_1.writeInt16)(writer, 50); // text version\r\n    (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'TxLr', textDescriptor, 'text');\r\n    (0, psdWriter_1.writeInt16)(writer, 1); // warp version\r\n    (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'warp', encodeWarp(warp));\r\n    (0, psdWriter_1.writeFloat32)(writer, text.left);\r\n    (0, psdWriter_1.writeFloat32)(writer, text.top);\r\n    (0, psdWriter_1.writeFloat32)(writer, text.right);\r\n    (0, psdWriter_1.writeFloat32)(writer, text.bottom);\r\n    // writeZeros(writer, 2);\r\n});\r\n// vector fills\r\naddHandler('SoCo', function (target) { return target.vectorFill !== undefined && target.vectorStroke === undefined &&\r\n    target.vectorFill.type === 'color'; }, function (reader, target) {\r\n    var descriptor = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n    target.vectorFill = (0, descriptor_1.parseVectorContent)(descriptor);\r\n}, function (writer, target) {\r\n    var descriptor = (0, descriptor_1.serializeVectorContent)(target.vectorFill).descriptor;\r\n    (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'null', descriptor);\r\n});\r\naddHandler('GdFl', function (target) { return target.vectorFill !== undefined && target.vectorStroke === undefined &&\r\n    (target.vectorFill.type === 'solid' || target.vectorFill.type === 'noise'); }, function (reader, target, left) {\r\n    var descriptor = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n    target.vectorFill = (0, descriptor_1.parseVectorContent)(descriptor);\r\n    (0, psdReader_1.skipBytes)(reader, left());\r\n}, function (writer, target) {\r\n    var descriptor = (0, descriptor_1.serializeVectorContent)(target.vectorFill).descriptor;\r\n    (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'null', descriptor);\r\n});\r\naddHandler('PtFl', function (target) { return target.vectorFill !== undefined && target.vectorStroke === undefined &&\r\n    target.vectorFill.type === 'pattern'; }, function (reader, target) {\r\n    var descriptor = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n    target.vectorFill = (0, descriptor_1.parseVectorContent)(descriptor);\r\n}, function (writer, target) {\r\n    var descriptor = (0, descriptor_1.serializeVectorContent)(target.vectorFill).descriptor;\r\n    (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'null', descriptor);\r\n});\r\naddHandler('vscg', function (target) { return target.vectorFill !== undefined && target.vectorStroke !== undefined; }, function (reader, target, left) {\r\n    (0, psdReader_1.readSignature)(reader); // key\r\n    var desc = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n    target.vectorFill = (0, descriptor_1.parseVectorContent)(desc);\r\n    (0, psdReader_1.skipBytes)(reader, left());\r\n}, function (writer, target) {\r\n    var _a = (0, descriptor_1.serializeVectorContent)(target.vectorFill), descriptor = _a.descriptor, key = _a.key;\r\n    (0, psdWriter_1.writeSignature)(writer, key);\r\n    (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'null', descriptor);\r\n});\r\nfunction readBezierKnot(reader, width, height) {\r\n    var y0 = (0, psdReader_1.readFixedPointPath32)(reader) * height;\r\n    var x0 = (0, psdReader_1.readFixedPointPath32)(reader) * width;\r\n    var y1 = (0, psdReader_1.readFixedPointPath32)(reader) * height;\r\n    var x1 = (0, psdReader_1.readFixedPointPath32)(reader) * width;\r\n    var y2 = (0, psdReader_1.readFixedPointPath32)(reader) * height;\r\n    var x2 = (0, psdReader_1.readFixedPointPath32)(reader) * width;\r\n    return [x0, y0, x1, y1, x2, y2];\r\n}\r\nexports.readBezierKnot = readBezierKnot;\r\nfunction writeBezierKnot(writer, points, width, height) {\r\n    (0, psdWriter_1.writeFixedPointPath32)(writer, points[1] / height); // y0\r\n    (0, psdWriter_1.writeFixedPointPath32)(writer, points[0] / width); // x0\r\n    (0, psdWriter_1.writeFixedPointPath32)(writer, points[3] / height); // y1\r\n    (0, psdWriter_1.writeFixedPointPath32)(writer, points[2] / width); // x1\r\n    (0, psdWriter_1.writeFixedPointPath32)(writer, points[5] / height); // y2\r\n    (0, psdWriter_1.writeFixedPointPath32)(writer, points[4] / width); // x2\r\n}\r\nexports.booleanOperations = ['exclude', 'combine', 'subtract', 'intersect'];\r\nfunction readVectorMask(reader, vectorMask, width, height, size) {\r\n    var end = reader.offset + size;\r\n    var paths = vectorMask.paths;\r\n    var path = undefined;\r\n    while ((end - reader.offset) >= 26) {\r\n        var selector = (0, psdReader_1.readUint16)(reader);\r\n        switch (selector) {\r\n            case 0: // Closed subpath length record\r\n            case 3: { // Open subpath length record\r\n                (0, psdReader_1.readUint16)(reader); // count\r\n                var boolOp = (0, psdReader_1.readInt16)(reader);\r\n                var flags = (0, psdReader_1.readUint16)(reader); // bit 1 always 1 ?\r\n                (0, psdReader_1.skipBytes)(reader, 18);\r\n                path = {\r\n                    open: selector === 3,\r\n                    knots: [],\r\n                    fillRule: flags === 2 ? 'non-zero' : 'even-odd',\r\n                };\r\n                if (boolOp !== -1)\r\n                    path.operation = exports.booleanOperations[boolOp];\r\n                paths.push(path);\r\n                break;\r\n            }\r\n            case 1: // Closed subpath Bezier knot, linked\r\n            case 2: // Closed subpath Bezier knot, unlinked\r\n            case 4: // Open subpath Bezier knot, linked\r\n            case 5: // Open subpath Bezier knot, unlinked\r\n                path.knots.push({ linked: (selector === 1 || selector === 4), points: readBezierKnot(reader, width, height) });\r\n                break;\r\n            case 6: // Path fill rule record\r\n                (0, psdReader_1.skipBytes)(reader, 24);\r\n                break;\r\n            case 7: { // Clipboard record\r\n                // TODO: check if these need to be multiplied by document size\r\n                var top_1 = (0, psdReader_1.readFixedPointPath32)(reader);\r\n                var left = (0, psdReader_1.readFixedPointPath32)(reader);\r\n                var bottom = (0, psdReader_1.readFixedPointPath32)(reader);\r\n                var right = (0, psdReader_1.readFixedPointPath32)(reader);\r\n                var resolution = (0, psdReader_1.readFixedPointPath32)(reader);\r\n                (0, psdReader_1.skipBytes)(reader, 4);\r\n                vectorMask.clipboard = { top: top_1, left: left, bottom: bottom, right: right, resolution: resolution };\r\n                break;\r\n            }\r\n            case 8: // Initial fill rule record\r\n                vectorMask.fillStartsWithAllPixels = !!(0, psdReader_1.readUint16)(reader);\r\n                (0, psdReader_1.skipBytes)(reader, 22);\r\n                break;\r\n            default: throw new Error('Invalid vmsk section');\r\n        }\r\n    }\r\n    return paths;\r\n}\r\nexports.readVectorMask = readVectorMask;\r\naddHandler('vmsk', hasKey('vectorMask'), function (reader, target, left, _a) {\r\n    var width = _a.width, height = _a.height;\r\n    if ((0, psdReader_1.readUint32)(reader) !== 3)\r\n        throw new Error('Invalid vmsk version');\r\n    target.vectorMask = { paths: [] };\r\n    var vectorMask = target.vectorMask;\r\n    var flags = (0, psdReader_1.readUint32)(reader);\r\n    vectorMask.invert = (flags & 1) !== 0;\r\n    vectorMask.notLink = (flags & 2) !== 0;\r\n    vectorMask.disable = (flags & 4) !== 0;\r\n    readVectorMask(reader, vectorMask, width, height, left());\r\n    // drawBezierPaths(vectorMask.paths, width, height, 'out.png');\r\n    (0, psdReader_1.skipBytes)(reader, left());\r\n}, function (writer, target, _a) {\r\n    var width = _a.width, height = _a.height;\r\n    var vectorMask = target.vectorMask;\r\n    var flags = (vectorMask.invert ? 1 : 0) |\r\n        (vectorMask.notLink ? 2 : 0) |\r\n        (vectorMask.disable ? 4 : 0);\r\n    (0, psdWriter_1.writeUint32)(writer, 3); // version\r\n    (0, psdWriter_1.writeUint32)(writer, flags);\r\n    // initial entry\r\n    (0, psdWriter_1.writeUint16)(writer, 6);\r\n    (0, psdWriter_1.writeZeros)(writer, 24);\r\n    var clipboard = vectorMask.clipboard;\r\n    if (clipboard) {\r\n        (0, psdWriter_1.writeUint16)(writer, 7);\r\n        (0, psdWriter_1.writeFixedPointPath32)(writer, clipboard.top);\r\n        (0, psdWriter_1.writeFixedPointPath32)(writer, clipboard.left);\r\n        (0, psdWriter_1.writeFixedPointPath32)(writer, clipboard.bottom);\r\n        (0, psdWriter_1.writeFixedPointPath32)(writer, clipboard.right);\r\n        (0, psdWriter_1.writeFixedPointPath32)(writer, clipboard.resolution);\r\n        (0, psdWriter_1.writeZeros)(writer, 4);\r\n    }\r\n    if (vectorMask.fillStartsWithAllPixels !== undefined) {\r\n        (0, psdWriter_1.writeUint16)(writer, 8);\r\n        (0, psdWriter_1.writeUint16)(writer, vectorMask.fillStartsWithAllPixels ? 1 : 0);\r\n        (0, psdWriter_1.writeZeros)(writer, 22);\r\n    }\r\n    for (var _i = 0, _b = vectorMask.paths; _i < _b.length; _i++) {\r\n        var path = _b[_i];\r\n        (0, psdWriter_1.writeUint16)(writer, path.open ? 3 : 0);\r\n        (0, psdWriter_1.writeUint16)(writer, path.knots.length);\r\n        (0, psdWriter_1.writeUint16)(writer, path.operation ? exports.booleanOperations.indexOf(path.operation) : -1); // -1 for undefined\r\n        (0, psdWriter_1.writeUint16)(writer, path.fillRule === 'non-zero' ? 2 : 1);\r\n        (0, psdWriter_1.writeZeros)(writer, 18); // TODO: these are sometimes non-zero\r\n        var linkedKnot = path.open ? 4 : 1;\r\n        var unlinkedKnot = path.open ? 5 : 2;\r\n        for (var _c = 0, _d = path.knots; _c < _d.length; _c++) {\r\n            var _e = _d[_c], linked = _e.linked, points = _e.points;\r\n            (0, psdWriter_1.writeUint16)(writer, linked ? linkedKnot : unlinkedKnot);\r\n            writeBezierKnot(writer, points, width, height);\r\n        }\r\n    }\r\n});\r\n// TODO: need to write vmsk if has outline ?\r\naddHandlerAlias('vsms', 'vmsk');\r\n// addHandlerAlias('vmsk', 'vsms');\r\naddHandler('vowv', // something with vectors?\r\nhasKey('vowv'), function (reader, target) {\r\n    target.vowv = (0, psdReader_1.readUint32)(reader); // always 2 ????\r\n}, function (writer, target) {\r\n    (0, psdWriter_1.writeUint32)(writer, target.vowv);\r\n});\r\naddHandler('vogk', hasKey('vectorOrigination'), function (reader, target, left) {\r\n    if ((0, psdReader_1.readInt32)(reader) !== 1)\r\n        throw new Error(\"Invalid vogk version\");\r\n    var desc = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n    // console.log(require('util').inspect(desc, false, 99, true));\r\n    target.vectorOrigination = { keyDescriptorList: [] };\r\n    for (var _i = 0, _a = desc.keyDescriptorList; _i < _a.length; _i++) {\r\n        var i = _a[_i];\r\n        var item = {};\r\n        if (i.keyShapeInvalidated != null)\r\n            item.keyShapeInvalidated = i.keyShapeInvalidated;\r\n        if (i.keyOriginType != null)\r\n            item.keyOriginType = i.keyOriginType;\r\n        if (i.keyOriginResolution != null)\r\n            item.keyOriginResolution = i.keyOriginResolution;\r\n        if (i.keyOriginShapeBBox) {\r\n            item.keyOriginShapeBoundingBox = {\r\n                top: (0, descriptor_1.parseUnitsOrNumber)(i.keyOriginShapeBBox['Top ']),\r\n                left: (0, descriptor_1.parseUnitsOrNumber)(i.keyOriginShapeBBox.Left),\r\n                bottom: (0, descriptor_1.parseUnitsOrNumber)(i.keyOriginShapeBBox.Btom),\r\n                right: (0, descriptor_1.parseUnitsOrNumber)(i.keyOriginShapeBBox.Rght),\r\n            };\r\n        }\r\n        var rectRadii = i.keyOriginRRectRadii;\r\n        if (rectRadii) {\r\n            item.keyOriginRRectRadii = {\r\n                topRight: (0, descriptor_1.parseUnits)(rectRadii.topRight),\r\n                topLeft: (0, descriptor_1.parseUnits)(rectRadii.topLeft),\r\n                bottomLeft: (0, descriptor_1.parseUnits)(rectRadii.bottomLeft),\r\n                bottomRight: (0, descriptor_1.parseUnits)(rectRadii.bottomRight),\r\n            };\r\n        }\r\n        var corners = i.keyOriginBoxCorners;\r\n        if (corners) {\r\n            item.keyOriginBoxCorners = [\r\n                { x: corners.rectangleCornerA.Hrzn, y: corners.rectangleCornerA.Vrtc },\r\n                { x: corners.rectangleCornerB.Hrzn, y: corners.rectangleCornerB.Vrtc },\r\n                { x: corners.rectangleCornerC.Hrzn, y: corners.rectangleCornerC.Vrtc },\r\n                { x: corners.rectangleCornerD.Hrzn, y: corners.rectangleCornerD.Vrtc },\r\n            ];\r\n        }\r\n        var trnf = i.Trnf;\r\n        if (trnf) {\r\n            item.transform = [trnf.xx, trnf.xy, trnf.xy, trnf.yy, trnf.tx, trnf.ty];\r\n        }\r\n        target.vectorOrigination.keyDescriptorList.push(item);\r\n    }\r\n    (0, psdReader_1.skipBytes)(reader, left());\r\n}, function (writer, target) {\r\n    target;\r\n    var orig = target.vectorOrigination;\r\n    var desc = { keyDescriptorList: [] };\r\n    for (var i = 0; i < orig.keyDescriptorList.length; i++) {\r\n        var item = orig.keyDescriptorList[i];\r\n        desc.keyDescriptorList.push({}); // we're adding keyOriginIndex at the end\r\n        var out = desc.keyDescriptorList[desc.keyDescriptorList.length - 1];\r\n        if (item.keyOriginType != null)\r\n            out.keyOriginType = item.keyOriginType;\r\n        if (item.keyOriginResolution != null)\r\n            out.keyOriginResolution = item.keyOriginResolution;\r\n        var radii = item.keyOriginRRectRadii;\r\n        if (radii) {\r\n            out.keyOriginRRectRadii = {\r\n                unitValueQuadVersion: 1,\r\n                topRight: (0, descriptor_1.unitsValue)(radii.topRight, 'topRight'),\r\n                topLeft: (0, descriptor_1.unitsValue)(radii.topLeft, 'topLeft'),\r\n                bottomLeft: (0, descriptor_1.unitsValue)(radii.bottomLeft, 'bottomLeft'),\r\n                bottomRight: (0, descriptor_1.unitsValue)(radii.bottomRight, 'bottomRight'),\r\n            };\r\n        }\r\n        var box = item.keyOriginShapeBoundingBox;\r\n        if (box) {\r\n            out.keyOriginShapeBBox = {\r\n                unitValueQuadVersion: 1,\r\n                'Top ': (0, descriptor_1.unitsValue)(box.top, 'top'),\r\n                Left: (0, descriptor_1.unitsValue)(box.left, 'left'),\r\n                Btom: (0, descriptor_1.unitsValue)(box.bottom, 'bottom'),\r\n                Rght: (0, descriptor_1.unitsValue)(box.right, 'right'),\r\n            };\r\n        }\r\n        var corners = item.keyOriginBoxCorners;\r\n        if (corners && corners.length === 4) {\r\n            out.keyOriginBoxCorners = {\r\n                rectangleCornerA: { Hrzn: corners[0].x, Vrtc: corners[0].y },\r\n                rectangleCornerB: { Hrzn: corners[1].x, Vrtc: corners[1].y },\r\n                rectangleCornerC: { Hrzn: corners[2].x, Vrtc: corners[2].y },\r\n                rectangleCornerD: { Hrzn: corners[3].x, Vrtc: corners[3].y },\r\n            };\r\n        }\r\n        var transform = item.transform;\r\n        if (transform && transform.length === 6) {\r\n            out.Trnf = {\r\n                xx: transform[0],\r\n                xy: transform[1],\r\n                yx: transform[2],\r\n                yy: transform[3],\r\n                tx: transform[4],\r\n                ty: transform[5],\r\n            };\r\n        }\r\n        if (item.keyShapeInvalidated != null)\r\n            out.keyShapeInvalidated = item.keyShapeInvalidated;\r\n        out.keyOriginIndex = i;\r\n    }\r\n    (0, psdWriter_1.writeInt32)(writer, 1); // version\r\n    (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'null', desc);\r\n});\r\naddHandler('lmfx', function (target) { return target.effects !== undefined && hasMultiEffects(target.effects); }, function (reader, target, left) {\r\n    var version = (0, psdReader_1.readUint32)(reader);\r\n    if (version !== 0)\r\n        throw new Error('Invalid lmfx version');\r\n    var desc = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n    // console.log('READ', require('util').inspect(desc, false, 99, true));\r\n    // discard if read in 'lrFX' or 'lfx2' section\r\n    target.effects = (0, descriptor_1.parseEffects)(desc, !!reader.logMissingFeatures);\r\n    (0, psdReader_1.skipBytes)(reader, left());\r\n}, function (writer, target, _, options) {\r\n    var desc = (0, descriptor_1.serializeEffects)(target.effects, !!options.logMissingFeatures, true);\r\n    // console.log('WRITE', require('util').inspect(desc, false, 99, true));\r\n    (0, psdWriter_1.writeUint32)(writer, 0); // version\r\n    (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'null', desc);\r\n});\r\naddHandler('lrFX', hasKey('effects'), function (reader, target, left) {\r\n    if (!target.effects)\r\n        target.effects = (0, effectsHelpers_1.readEffects)(reader);\r\n    (0, psdReader_1.skipBytes)(reader, left());\r\n}, function (writer, target) {\r\n    (0, effectsHelpers_1.writeEffects)(writer, target.effects);\r\n});\r\naddHandler('luni', hasKey('name'), function (reader, target, left) {\r\n    if (left() > 4) {\r\n        var length_1 = (0, psdReader_1.readUint32)(reader);\r\n        if (left() >= (length_1 * 2)) {\r\n            target.name = (0, psdReader_1.readUnicodeStringWithLength)(reader, length_1);\r\n        }\r\n        else {\r\n            if (reader.logDevFeatures)\r\n                reader.log('name in luni section is too long');\r\n        }\r\n    }\r\n    else {\r\n        if (reader.logDevFeatures)\r\n            reader.log('empty luni section');\r\n    }\r\n    (0, psdReader_1.skipBytes)(reader, left());\r\n}, function (writer, target) {\r\n    (0, psdWriter_1.writeUnicodeString)(writer, target.name);\r\n    // writeUint16(writer, 0); // padding (but not extending string length)\r\n});\r\naddHandler('lnsr', hasKey('nameSource'), function (reader, target) { return target.nameSource = (0, psdReader_1.readSignature)(reader); }, function (writer, target) { return (0, psdWriter_1.writeSignature)(writer, target.nameSource); });\r\naddHandler('lyid', hasKey('id'), function (reader, target) {\r\n    target.id = (0, psdReader_1.readUint32)(reader);\r\n}, function (writer, target, _psd, options) {\r\n    var id = target.id;\r\n    while (options.layerIds.has(id))\r\n        id += 100; // make sure we don't have duplicate layer ids\r\n    (0, psdWriter_1.writeUint32)(writer, id);\r\n    options.layerIds.add(id);\r\n    options.layerToId.set(target, id);\r\n});\r\naddHandler('lsct', hasKey('sectionDivider'), function (reader, target, left) {\r\n    target.sectionDivider = { type: (0, psdReader_1.readUint32)(reader) };\r\n    if (left()) {\r\n        (0, psdReader_1.checkSignature)(reader, '8BIM');\r\n        target.sectionDivider.key = (0, psdReader_1.readSignature)(reader);\r\n    }\r\n    if (left()) {\r\n        target.sectionDivider.subType = (0, psdReader_1.readUint32)(reader);\r\n    }\r\n}, function (writer, target) {\r\n    (0, psdWriter_1.writeUint32)(writer, target.sectionDivider.type);\r\n    if (target.sectionDivider.key) {\r\n        (0, psdWriter_1.writeSignature)(writer, '8BIM');\r\n        (0, psdWriter_1.writeSignature)(writer, target.sectionDivider.key);\r\n        if (target.sectionDivider.subType !== undefined) {\r\n            (0, psdWriter_1.writeUint32)(writer, target.sectionDivider.subType);\r\n        }\r\n    }\r\n});\r\n// it seems lsdk is used when there's a layer is nested more than 6 levels, but I don't know why?\r\n// maybe some limitation of old version of PS?\r\naddHandlerAlias('lsdk', 'lsct');\r\naddHandler('clbl', hasKey('blendClippendElements'), function (reader, target) {\r\n    target.blendClippendElements = !!(0, psdReader_1.readUint8)(reader);\r\n    (0, psdReader_1.skipBytes)(reader, 3);\r\n}, function (writer, target) {\r\n    (0, psdWriter_1.writeUint8)(writer, target.blendClippendElements ? 1 : 0);\r\n    (0, psdWriter_1.writeZeros)(writer, 3);\r\n});\r\naddHandler('infx', hasKey('blendInteriorElements'), function (reader, target) {\r\n    target.blendInteriorElements = !!(0, psdReader_1.readUint8)(reader);\r\n    (0, psdReader_1.skipBytes)(reader, 3);\r\n}, function (writer, target) {\r\n    (0, psdWriter_1.writeUint8)(writer, target.blendInteriorElements ? 1 : 0);\r\n    (0, psdWriter_1.writeZeros)(writer, 3);\r\n});\r\naddHandler('knko', hasKey('knockout'), function (reader, target) {\r\n    target.knockout = !!(0, psdReader_1.readUint8)(reader);\r\n    (0, psdReader_1.skipBytes)(reader, 3);\r\n}, function (writer, target) {\r\n    (0, psdWriter_1.writeUint8)(writer, target.knockout ? 1 : 0);\r\n    (0, psdWriter_1.writeZeros)(writer, 3);\r\n});\r\naddHandler('lmgm', hasKey('layerMaskAsGlobalMask'), function (reader, target) {\r\n    target.layerMaskAsGlobalMask = !!(0, psdReader_1.readUint8)(reader);\r\n    (0, psdReader_1.skipBytes)(reader, 3);\r\n}, function (writer, target) {\r\n    (0, psdWriter_1.writeUint8)(writer, target.layerMaskAsGlobalMask ? 1 : 0);\r\n    (0, psdWriter_1.writeZeros)(writer, 3);\r\n});\r\naddHandler('lspf', hasKey('protected'), function (reader, target) {\r\n    var flags = (0, psdReader_1.readUint32)(reader);\r\n    target.protected = {\r\n        transparency: (flags & 0x01) !== 0,\r\n        composite: (flags & 0x02) !== 0,\r\n        position: (flags & 0x04) !== 0,\r\n    };\r\n    if (flags & 0x08)\r\n        target.protected.artboards = true;\r\n}, function (writer, target) {\r\n    var flags = (target.protected.transparency ? 0x01 : 0) |\r\n        (target.protected.composite ? 0x02 : 0) |\r\n        (target.protected.position ? 0x04 : 0) |\r\n        (target.protected.artboards ? 0x08 : 0);\r\n    (0, psdWriter_1.writeUint32)(writer, flags);\r\n});\r\naddHandler('lclr', hasKey('layerColor'), function (reader, target) {\r\n    var color = (0, psdReader_1.readUint16)(reader);\r\n    (0, psdReader_1.skipBytes)(reader, 6);\r\n    target.layerColor = helpers_1.layerColors[color];\r\n}, function (writer, target) {\r\n    var index = helpers_1.layerColors.indexOf(target.layerColor);\r\n    (0, psdWriter_1.writeUint16)(writer, index === -1 ? 0 : index);\r\n    (0, psdWriter_1.writeZeros)(writer, 6);\r\n});\r\naddHandler('shmd', // Metadata setting\r\nfunction (// Metadata setting\r\ntarget) { return target.timestamp !== undefined || target.animationFrames !== undefined || target.animationFrameFlags !== undefined || target.timeline !== undefined || target.comps !== undefined; }, function (reader, target, left) {\r\n    var count = (0, psdReader_1.readUint32)(reader);\r\n    var _loop_1 = function (i) {\r\n        (0, psdReader_1.checkSignature)(reader, '8BIM');\r\n        var key = (0, psdReader_1.readSignature)(reader);\r\n        (0, psdReader_1.readUint8)(reader); // copy\r\n        (0, psdReader_1.skipBytes)(reader, 3);\r\n        (0, psdReader_1.readSection)(reader, 1, function (left) {\r\n            if (key === 'cust') {\r\n                var desc = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n                // console.log('cust', target.name, require('util').inspect(desc, false, 99, true));\r\n                if (desc.layerTime !== undefined)\r\n                    target.timestamp = desc.layerTime;\r\n            }\r\n            else if (key === 'mlst') {\r\n                var desc = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n                // console.log('mlst', target.name, require('util').inspect(desc, false, 99, true));\r\n                target.animationFrames = [];\r\n                for (var i_1 = 0; i_1 < desc.LaSt.length; i_1++) {\r\n                    var f = desc.LaSt[i_1];\r\n                    var frame = { frames: f.FrLs };\r\n                    if (f.enab !== undefined)\r\n                        frame.enable = f.enab;\r\n                    if (f.Ofst)\r\n                        frame.offset = (0, descriptor_1.horzVrtcToXY)(f.Ofst);\r\n                    if (f.FXRf)\r\n                        frame.referencePoint = (0, descriptor_1.horzVrtcToXY)(f.FXRf);\r\n                    if (f.Lefx)\r\n                        frame.effects = (0, descriptor_1.parseEffects)(f.Lefx, !!reader.logMissingFeatures);\r\n                    if (f.blendOptions && f.blendOptions.Opct)\r\n                        frame.opacity = (0, descriptor_1.parsePercent)(f.blendOptions.Opct);\r\n                    target.animationFrames.push(frame);\r\n                }\r\n            }\r\n            else if (key === 'mdyn') {\r\n                // frame flags\r\n                (0, psdReader_1.readUint16)(reader); // unknown\r\n                var propagate = (0, psdReader_1.readUint8)(reader);\r\n                var flags = (0, psdReader_1.readUint8)(reader);\r\n                target.animationFrameFlags = {\r\n                    propagateFrameOne: !propagate,\r\n                    unifyLayerPosition: (flags & 1) !== 0,\r\n                    unifyLayerStyle: (flags & 2) !== 0,\r\n                    unifyLayerVisibility: (flags & 4) !== 0,\r\n                };\r\n            }\r\n            else if (key === 'tmln') {\r\n                var desc = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n                var timeScope = desc.timeScope;\r\n                // console.log('tmln', target.name, target.id, require('util').inspect(desc, false, 99, true));\r\n                var timeline = {\r\n                    start: (0, descriptor_1.frac)(timeScope.Strt),\r\n                    duration: (0, descriptor_1.frac)(timeScope.duration),\r\n                    inTime: (0, descriptor_1.frac)(timeScope.inTime),\r\n                    outTime: (0, descriptor_1.frac)(timeScope.outTime),\r\n                    autoScope: desc.autoScope,\r\n                    audioLevel: desc.audioLevel,\r\n                };\r\n                if (desc.trackList) {\r\n                    timeline.tracks = (0, descriptor_1.parseTrackList)(desc.trackList, !!reader.logMissingFeatures);\r\n                }\r\n                target.timeline = timeline;\r\n                // console.log('tmln:result', target.name, target.id, require('util').inspect(timeline, false, 99, true));\r\n            }\r\n            else if (key === 'cmls') {\r\n                var desc = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n                // console.log('cmls', require('util').inspect(desc, false, 99, true));\r\n                target.comps = {\r\n                    settings: [],\r\n                };\r\n                if (desc.origFXRefPoint)\r\n                    target.comps.originalEffectsReferencePoint = { x: desc.origFXRefPoint.Hrzn, y: desc.origFXRefPoint.Vrtc };\r\n                for (var _i = 0, _a = desc.layerSettings; _i < _a.length; _i++) {\r\n                    var item = _a[_i];\r\n                    target.comps.settings.push({ compList: item.compList });\r\n                    var t = target.comps.settings[target.comps.settings.length - 1];\r\n                    if ('enab' in item)\r\n                        t.enabled = item.enab;\r\n                    if (item.Ofst)\r\n                        t.offset = { x: item.Ofst.Hrzn, y: item.Ofst.Vrtc };\r\n                    if (item.FXRefPoint)\r\n                        t.effectsReferencePoint = { x: item.FXRefPoint.Hrzn, y: item.FXRefPoint.Vrtc };\r\n                }\r\n            }\r\n            else if (key === 'extn') {\r\n                var desc = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n                // console.log(require('util').inspect(desc, false, 99, true));\r\n                desc; // TODO: save this\r\n                reader.logMissingFeatures && reader.log('Unhandled \"shmd\" section key', key);\r\n            }\r\n            else {\r\n                reader.logMissingFeatures && reader.log('Unhandled \"shmd\" section key', key);\r\n            }\r\n            (0, psdReader_1.skipBytes)(reader, left());\r\n        });\r\n    };\r\n    for (var i = 0; i < count; i++) {\r\n        _loop_1(i);\r\n    }\r\n    (0, psdReader_1.skipBytes)(reader, left());\r\n}, function (writer, target, _, options) {\r\n    var animationFrames = target.animationFrames, animationFrameFlags = target.animationFrameFlags, timestamp = target.timestamp, timeline = target.timeline, comps = target.comps;\r\n    var count = 0;\r\n    if (animationFrames)\r\n        count++;\r\n    if (animationFrameFlags)\r\n        count++;\r\n    if (timeline)\r\n        count++;\r\n    if (timestamp !== undefined)\r\n        count++;\r\n    if (comps)\r\n        count++;\r\n    (0, psdWriter_1.writeUint32)(writer, count);\r\n    if (animationFrames) {\r\n        (0, psdWriter_1.writeSignature)(writer, '8BIM');\r\n        (0, psdWriter_1.writeSignature)(writer, 'mlst');\r\n        (0, psdWriter_1.writeUint8)(writer, 0); // copy (always false)\r\n        (0, psdWriter_1.writeZeros)(writer, 3);\r\n        (0, psdWriter_1.writeSection)(writer, 2, function () {\r\n            var _a;\r\n            var desc = {\r\n                LaID: (_a = target.id) !== null && _a !== void 0 ? _a : 0,\r\n                LaSt: [],\r\n            };\r\n            for (var i = 0; i < animationFrames.length; i++) {\r\n                var f = animationFrames[i];\r\n                var frame = {};\r\n                if (f.enable !== undefined)\r\n                    frame.enab = f.enable;\r\n                frame.FrLs = f.frames;\r\n                if (f.offset)\r\n                    frame.Ofst = (0, descriptor_1.xyToHorzVrtc)(f.offset);\r\n                if (f.referencePoint)\r\n                    frame.FXRf = (0, descriptor_1.xyToHorzVrtc)(f.referencePoint);\r\n                if (f.effects)\r\n                    frame.Lefx = (0, descriptor_1.serializeEffects)(f.effects, false, false);\r\n                if (f.opacity !== undefined)\r\n                    frame.blendOptions = { Opct: (0, descriptor_1.unitsPercent)(f.opacity) };\r\n                desc.LaSt.push(frame);\r\n            }\r\n            (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'null', desc);\r\n        }, true);\r\n    }\r\n    if (animationFrameFlags) {\r\n        (0, psdWriter_1.writeSignature)(writer, '8BIM');\r\n        (0, psdWriter_1.writeSignature)(writer, 'mdyn');\r\n        (0, psdWriter_1.writeUint8)(writer, 0); // copy (always false)\r\n        (0, psdWriter_1.writeZeros)(writer, 3);\r\n        (0, psdWriter_1.writeSection)(writer, 2, function () {\r\n            (0, psdWriter_1.writeUint16)(writer, 0); // unknown\r\n            (0, psdWriter_1.writeUint8)(writer, animationFrameFlags.propagateFrameOne ? 0x0 : 0xf);\r\n            (0, psdWriter_1.writeUint8)(writer, (animationFrameFlags.unifyLayerPosition ? 1 : 0) |\r\n                (animationFrameFlags.unifyLayerStyle ? 2 : 0) |\r\n                (animationFrameFlags.unifyLayerVisibility ? 4 : 0));\r\n        });\r\n    }\r\n    if (timeline) {\r\n        (0, psdWriter_1.writeSignature)(writer, '8BIM');\r\n        (0, psdWriter_1.writeSignature)(writer, 'tmln');\r\n        (0, psdWriter_1.writeUint8)(writer, 0); // copy (always false)\r\n        (0, psdWriter_1.writeZeros)(writer, 3);\r\n        (0, psdWriter_1.writeSection)(writer, 2, function () {\r\n            var desc = {\r\n                Vrsn: 1,\r\n                timeScope: {\r\n                    Vrsn: 1,\r\n                    Strt: timeline.start,\r\n                    duration: timeline.duration,\r\n                    inTime: timeline.inTime,\r\n                    outTime: timeline.outTime,\r\n                },\r\n                autoScope: timeline.autoScope,\r\n                audioLevel: timeline.audioLevel,\r\n            };\r\n            if (timeline.tracks) {\r\n                desc.trackList = (0, descriptor_1.serializeTrackList)(timeline.tracks);\r\n            }\r\n            var id = options.layerToId.get(target) || target.id;\r\n            if (!id)\r\n                throw new Error('You need to provide layer.id value whan writing document with animations');\r\n            desc.LyrI = id;\r\n            // console.log('WRITE:tmln', target.name, target.id, require('util').inspect(desc, false, 99, true));\r\n            (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'null', desc, 'anim');\r\n        }, true);\r\n    }\r\n    if (timestamp !== undefined) {\r\n        (0, psdWriter_1.writeSignature)(writer, '8BIM');\r\n        (0, psdWriter_1.writeSignature)(writer, 'cust');\r\n        (0, psdWriter_1.writeUint8)(writer, 0); // copy (always false)\r\n        (0, psdWriter_1.writeZeros)(writer, 3);\r\n        (0, psdWriter_1.writeSection)(writer, 2, function () {\r\n            var desc = {\r\n                layerTime: timestamp,\r\n            };\r\n            (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'metadata', desc);\r\n        }, true);\r\n    }\r\n    if (comps) {\r\n        (0, psdWriter_1.writeSignature)(writer, '8BIM');\r\n        (0, psdWriter_1.writeSignature)(writer, 'cmls');\r\n        (0, psdWriter_1.writeUint8)(writer, 0); // copy (always false)\r\n        (0, psdWriter_1.writeZeros)(writer, 3);\r\n        (0, psdWriter_1.writeSection)(writer, 2, function () {\r\n            var id = options.layerToId.get(target) || target.id;\r\n            if (!id)\r\n                throw new Error('You need to provide layer.id value whan writing document with layer comps');\r\n            var desc = {};\r\n            if (comps.originalEffectsReferencePoint) {\r\n                desc.origFXRefPoint = { Hrzn: comps.originalEffectsReferencePoint.x, Vrtc: comps.originalEffectsReferencePoint.y };\r\n            }\r\n            desc.LyrI = id;\r\n            desc.layerSettings = [];\r\n            for (var _i = 0, _a = comps.settings; _i < _a.length; _i++) {\r\n                var item = _a[_i];\r\n                var t = {};\r\n                if (item.enabled !== undefined)\r\n                    t.enab = item.enabled;\r\n                if (item.offset)\r\n                    t.Ofst = { Hrzn: item.offset.x, Vrtc: item.offset.y };\r\n                if (item.effectsReferencePoint)\r\n                    t.FXRefPoint = { Hrzn: item.effectsReferencePoint.x, Vrtc: item.effectsReferencePoint.y };\r\n                t.compList = item.compList;\r\n                desc.layerSettings.push(t);\r\n            }\r\n            // console.log('cmls', require('util').inspect(desc, false, 99, true));\r\n            (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'null', desc);\r\n        }, true);\r\n    }\r\n});\r\naddHandler('vstk', hasKey('vectorStroke'), function (reader, target, left) {\r\n    var desc = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n    // console.log(require('util').inspect(desc, false, 99, true));\r\n    target.vectorStroke = {\r\n        strokeEnabled: desc.strokeEnabled,\r\n        fillEnabled: desc.fillEnabled,\r\n        lineWidth: (0, descriptor_1.parseUnits)(desc.strokeStyleLineWidth),\r\n        lineDashOffset: (0, descriptor_1.parseUnits)(desc.strokeStyleLineDashOffset),\r\n        miterLimit: desc.strokeStyleMiterLimit,\r\n        lineCapType: descriptor_1.strokeStyleLineCapType.decode(desc.strokeStyleLineCapType),\r\n        lineJoinType: descriptor_1.strokeStyleLineJoinType.decode(desc.strokeStyleLineJoinType),\r\n        lineAlignment: descriptor_1.strokeStyleLineAlignment.decode(desc.strokeStyleLineAlignment),\r\n        scaleLock: desc.strokeStyleScaleLock,\r\n        strokeAdjust: desc.strokeStyleStrokeAdjust,\r\n        lineDashSet: desc.strokeStyleLineDashSet.map(descriptor_1.parseUnits),\r\n        blendMode: descriptor_1.BlnM.decode(desc.strokeStyleBlendMode),\r\n        opacity: (0, descriptor_1.parsePercent)(desc.strokeStyleOpacity),\r\n        content: (0, descriptor_1.parseVectorContent)(desc.strokeStyleContent),\r\n        resolution: desc.strokeStyleResolution,\r\n    };\r\n    (0, psdReader_1.skipBytes)(reader, left());\r\n}, function (writer, target) {\r\n    var _a, _b, _c;\r\n    var stroke = target.vectorStroke;\r\n    var desc = {\r\n        strokeStyleVersion: 2,\r\n        strokeEnabled: !!stroke.strokeEnabled,\r\n        fillEnabled: !!stroke.fillEnabled,\r\n        strokeStyleLineWidth: stroke.lineWidth || { value: 3, units: 'Points' },\r\n        strokeStyleLineDashOffset: stroke.lineDashOffset || { value: 0, units: 'Points' },\r\n        strokeStyleMiterLimit: (_a = stroke.miterLimit) !== null && _a !== void 0 ? _a : 100,\r\n        strokeStyleLineCapType: descriptor_1.strokeStyleLineCapType.encode(stroke.lineCapType),\r\n        strokeStyleLineJoinType: descriptor_1.strokeStyleLineJoinType.encode(stroke.lineJoinType),\r\n        strokeStyleLineAlignment: descriptor_1.strokeStyleLineAlignment.encode(stroke.lineAlignment),\r\n        strokeStyleScaleLock: !!stroke.scaleLock,\r\n        strokeStyleStrokeAdjust: !!stroke.strokeAdjust,\r\n        strokeStyleLineDashSet: stroke.lineDashSet || [],\r\n        strokeStyleBlendMode: descriptor_1.BlnM.encode(stroke.blendMode),\r\n        strokeStyleOpacity: (0, descriptor_1.unitsPercent)((_b = stroke.opacity) !== null && _b !== void 0 ? _b : 1),\r\n        strokeStyleContent: (0, descriptor_1.serializeVectorContent)(stroke.content || { type: 'color', color: { r: 0, g: 0, b: 0 } }).descriptor,\r\n        strokeStyleResolution: (_c = stroke.resolution) !== null && _c !== void 0 ? _c : 72,\r\n    };\r\n    (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'strokeStyle', desc);\r\n});\r\naddHandler('artb', // per-layer arboard info\r\nhasKey('artboard'), function (reader, target, left) {\r\n    var desc = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n    var rect = desc.artboardRect;\r\n    target.artboard = {\r\n        rect: { top: rect['Top '], left: rect.Left, bottom: rect.Btom, right: rect.Rght },\r\n        guideIndices: desc.guideIndeces,\r\n        presetName: desc.artboardPresetName,\r\n        color: (0, descriptor_1.parseColor)(desc['Clr ']),\r\n        backgroundType: desc.artboardBackgroundType,\r\n    };\r\n    (0, psdReader_1.skipBytes)(reader, left());\r\n}, function (writer, target) {\r\n    var _a;\r\n    var artboard = target.artboard;\r\n    var rect = artboard.rect;\r\n    var desc = {\r\n        artboardRect: { 'Top ': rect.top, Left: rect.left, Btom: rect.bottom, Rght: rect.right },\r\n        guideIndeces: artboard.guideIndices || [],\r\n        artboardPresetName: artboard.presetName || '',\r\n        'Clr ': (0, descriptor_1.serializeColor)(artboard.color),\r\n        artboardBackgroundType: (_a = artboard.backgroundType) !== null && _a !== void 0 ? _a : 1,\r\n    };\r\n    (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'artboard', desc);\r\n});\r\naddHandler('sn2P', hasKey('usingAlignedRendering'), function (reader, target) { return target.usingAlignedRendering = !!(0, psdReader_1.readUint32)(reader); }, function (writer, target) { return (0, psdWriter_1.writeUint32)(writer, target.usingAlignedRendering ? 1 : 0); });\r\nvar placedLayerTypes = ['unknown', 'vector', 'raster', 'image stack'];\r\nfunction parseWarp(warp) {\r\n    var _a, _b, _c, _d, _e, _f;\r\n    var result = __assign(__assign({ style: descriptor_1.warpStyle.decode(warp.warpStyle) }, (warp.warpValues ? { values: warp.warpValues } : { value: warp.warpValue || 0 })), { perspective: warp.warpPerspective || 0, perspectiveOther: warp.warpPerspectiveOther || 0, rotate: descriptor_1.Ornt.decode(warp.warpRotate), bounds: warp.bounds && {\r\n            top: (0, descriptor_1.parseUnitsOrNumber)(warp.bounds['Top ']),\r\n            left: (0, descriptor_1.parseUnitsOrNumber)(warp.bounds.Left),\r\n            bottom: (0, descriptor_1.parseUnitsOrNumber)(warp.bounds.Btom),\r\n            right: (0, descriptor_1.parseUnitsOrNumber)(warp.bounds.Rght),\r\n        }, uOrder: warp.uOrder, vOrder: warp.vOrder });\r\n    if (warp.deformNumRows != null || warp.deformNumCols != null) {\r\n        result.deformNumRows = warp.deformNumRows;\r\n        result.deformNumCols = warp.deformNumCols;\r\n    }\r\n    var envelopeWarp = warp.customEnvelopeWarp;\r\n    if (envelopeWarp) {\r\n        result.customEnvelopeWarp = {\r\n            meshPoints: [],\r\n        };\r\n        var xs = ((_a = envelopeWarp.meshPoints.find(function (i) { return i.type === 'Hrzn'; })) === null || _a === void 0 ? void 0 : _a.values) || [];\r\n        var ys = ((_b = envelopeWarp.meshPoints.find(function (i) { return i.type === 'Vrtc'; })) === null || _b === void 0 ? void 0 : _b.values) || [];\r\n        for (var i = 0; i < xs.length; i++) {\r\n            result.customEnvelopeWarp.meshPoints.push({ x: xs[i], y: ys[i] });\r\n        }\r\n        if (envelopeWarp.quiltSliceX || envelopeWarp.quiltSliceY) {\r\n            result.customEnvelopeWarp.quiltSliceX = ((_d = (_c = envelopeWarp.quiltSliceX) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d.values) || [];\r\n            result.customEnvelopeWarp.quiltSliceY = ((_f = (_e = envelopeWarp.quiltSliceY) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.values) || [];\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction isQuiltWarp(warp) {\r\n    var _a, _b;\r\n    return warp.deformNumCols != null || warp.deformNumRows != null ||\r\n        ((_a = warp.customEnvelopeWarp) === null || _a === void 0 ? void 0 : _a.quiltSliceX) || ((_b = warp.customEnvelopeWarp) === null || _b === void 0 ? void 0 : _b.quiltSliceY);\r\n}\r\nfunction encodeWarp(warp) {\r\n    var bounds = warp.bounds;\r\n    var desc = __assign(__assign({ warpStyle: descriptor_1.warpStyle.encode(warp.style) }, (warp.values ? { warpValues: warp.values } : { warpValue: warp.value || 0 })), { warpPerspective: warp.perspective || 0, warpPerspectiveOther: warp.perspectiveOther || 0, warpRotate: descriptor_1.Ornt.encode(warp.rotate), bounds: /*1 ? { // testing\r\n            _classID: 'classFloatRect',\r\n            'Top ': bounds && bounds.top && bounds.top.value || 0,\r\n            Left: bounds && bounds.left && bounds.left.value || 0,\r\n            Btom: bounds && bounds.bottom && bounds.bottom.value || 0,\r\n            Rght: bounds && bounds.right && bounds.right.value || 0,\r\n        } :*/ {\r\n            'Top ': (0, descriptor_1.unitsValue)(bounds && bounds.top || { units: 'Pixels', value: 0 }, 'bounds.top'),\r\n            Left: (0, descriptor_1.unitsValue)(bounds && bounds.left || { units: 'Pixels', value: 0 }, 'bounds.left'),\r\n            Btom: (0, descriptor_1.unitsValue)(bounds && bounds.bottom || { units: 'Pixels', value: 0 }, 'bounds.bottom'),\r\n            Rght: (0, descriptor_1.unitsValue)(bounds && bounds.right || { units: 'Pixels', value: 0 }, 'bounds.right'),\r\n        }, uOrder: warp.uOrder || 0, vOrder: warp.vOrder || 0 });\r\n    var isQuilt = isQuiltWarp(warp);\r\n    if (isQuilt) {\r\n        var desc2 = desc;\r\n        desc2.deformNumRows = warp.deformNumRows || 0;\r\n        desc2.deformNumCols = warp.deformNumCols || 0;\r\n    }\r\n    var customEnvelopeWarp = warp.customEnvelopeWarp;\r\n    if (customEnvelopeWarp) {\r\n        var meshPoints = customEnvelopeWarp.meshPoints || [];\r\n        if (isQuilt) {\r\n            var desc2 = desc;\r\n            desc2.customEnvelopeWarp = {\r\n                _name: '',\r\n                _classID: 'customEnvelopeWarp',\r\n                quiltSliceX: [{\r\n                        type: 'quiltSliceX',\r\n                        values: customEnvelopeWarp.quiltSliceX || [],\r\n                    }],\r\n                quiltSliceY: [{\r\n                        type: 'quiltSliceY',\r\n                        values: customEnvelopeWarp.quiltSliceY || [],\r\n                    }],\r\n                meshPoints: [\r\n                    { type: 'Hrzn', values: meshPoints.map(function (p) { return p.x; }) },\r\n                    { type: 'Vrtc', values: meshPoints.map(function (p) { return p.y; }) },\r\n                ],\r\n            };\r\n        }\r\n        else {\r\n            desc.customEnvelopeWarp = {\r\n                _name: '',\r\n                _classID: 'customEnvelopeWarp',\r\n                meshPoints: [\r\n                    { type: 'Hrzn', values: meshPoints.map(function (p) { return p.x; }) },\r\n                    { type: 'Vrtc', values: meshPoints.map(function (p) { return p.y; }) },\r\n                ],\r\n            };\r\n        }\r\n    }\r\n    return desc;\r\n}\r\naddHandler('PlLd', hasKey('placedLayer'), function (reader, target, left) {\r\n    if ((0, psdReader_1.readSignature)(reader) !== 'plcL')\r\n        throw new Error(\"Invalid PlLd signature\");\r\n    if ((0, psdReader_1.readInt32)(reader) !== 3)\r\n        throw new Error(\"Invalid PlLd version\");\r\n    var id = (0, psdReader_1.readPascalString)(reader, 1);\r\n    var pageNumber = (0, psdReader_1.readInt32)(reader);\r\n    var totalPages = (0, psdReader_1.readInt32)(reader); // TODO: check how this works ?\r\n    (0, psdReader_1.readInt32)(reader); // anitAliasPolicy 16\r\n    var placedLayerType = (0, psdReader_1.readInt32)(reader); // 0 = unknown, 1 = vector, 2 = raster, 3 = image stack\r\n    if (!placedLayerTypes[placedLayerType])\r\n        throw new Error('Invalid PlLd type');\r\n    var transform = [];\r\n    for (var i = 0; i < 8; i++)\r\n        transform.push((0, psdReader_1.readFloat64)(reader)); // x, y of 4 corners of the transform\r\n    var warpVersion = (0, psdReader_1.readInt32)(reader);\r\n    if (warpVersion !== 0)\r\n        throw new Error(\"Invalid Warp version \".concat(warpVersion));\r\n    var warp = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n    target.placedLayer = target.placedLayer || {\r\n        id: id,\r\n        type: placedLayerTypes[placedLayerType],\r\n        pageNumber: pageNumber,\r\n        totalPages: totalPages,\r\n        transform: transform,\r\n        warp: parseWarp(warp),\r\n    };\r\n    // console.log('PlLd warp', require('util').inspect(warp, false, 99, true));\r\n    // console.log('PlLd', require('util').inspect(target.placedLayer, false, 99, true));\r\n    (0, psdReader_1.skipBytes)(reader, left());\r\n}, function (writer, target) {\r\n    var placed = target.placedLayer;\r\n    (0, psdWriter_1.writeSignature)(writer, 'plcL');\r\n    (0, psdWriter_1.writeInt32)(writer, 3); // version\r\n    if (!placed.id || typeof placed.id !== 'string' || !/^[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$/.test(placed.id)) {\r\n        throw new Error('Placed layer ID must be in a GUID format (example: 20953ddb-9391-11ec-b4f1-c15674f50bc4)');\r\n    }\r\n    (0, psdWriter_1.writePascalString)(writer, placed.id, 1);\r\n    (0, psdWriter_1.writeInt32)(writer, 1); // pageNumber\r\n    (0, psdWriter_1.writeInt32)(writer, 1); // totalPages\r\n    (0, psdWriter_1.writeInt32)(writer, 16); // anitAliasPolicy\r\n    if (placedLayerTypes.indexOf(placed.type) === -1)\r\n        throw new Error('Invalid placedLayer type');\r\n    (0, psdWriter_1.writeInt32)(writer, placedLayerTypes.indexOf(placed.type));\r\n    for (var i = 0; i < 8; i++)\r\n        (0, psdWriter_1.writeFloat64)(writer, placed.transform[i]);\r\n    (0, psdWriter_1.writeInt32)(writer, 0); // warp version\r\n    var warp = getWarpFromPlacedLayer(placed);\r\n    var isQuilt = isQuiltWarp(warp);\r\n    var type = isQuilt ? 'quiltWarp' : 'warp';\r\n    (0, descriptor_1.writeVersionAndDescriptor)(writer, '', type, encodeWarp(warp), type);\r\n});\r\nfunction uint8ToFloat32(array) {\r\n    return new Float32Array(array.buffer.slice(array.byteOffset), 0, array.byteLength / 4);\r\n}\r\nfunction uint8ToUint32(array) {\r\n    return new Uint32Array(array.buffer.slice(array.byteOffset), 0, array.byteLength / 4);\r\n}\r\nfunction toUint8(array) {\r\n    return new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\r\n}\r\nfunction arrayToPoints(array) {\r\n    var points = [];\r\n    for (var i = 0; i < array.length; i += 2) {\r\n        points.push({ x: array[i], y: array[i + 1] });\r\n    }\r\n    return points;\r\n}\r\nfunction pointsToArray(points) {\r\n    var array = [];\r\n    for (var i = 0; i < points.length; i++) {\r\n        array.push(points[i].x, points[i].y);\r\n    }\r\n    return array;\r\n}\r\nfunction uint8ToPoints(array) {\r\n    return arrayToPoints(uint8ToFloat32(array));\r\n}\r\nfunction hrznVrtcToPoint(desc) {\r\n    return {\r\n        x: (0, descriptor_1.parseUnits)(desc.Hrzn),\r\n        y: (0, descriptor_1.parseUnits)(desc.Vrtc),\r\n    };\r\n}\r\nfunction pointToHrznVrtc(point) {\r\n    return {\r\n        _name: '',\r\n        _classID: 'Pnt ',\r\n        Hrzn: (0, descriptor_1.unitsValue)(point.x, 'x'),\r\n        Vrtc: (0, descriptor_1.unitsValue)(point.y, 'y'),\r\n    };\r\n}\r\nfunction parseFilterFXItem(f, options) {\r\n    var base = {\r\n        name: f['Nm  '],\r\n        opacity: (0, descriptor_1.parsePercent)(f.blendOptions.Opct),\r\n        blendMode: descriptor_1.BlnM.decode(f.blendOptions['Md  ']),\r\n        enabled: f.enab,\r\n        hasOptions: f.hasoptions,\r\n        foregroundColor: (0, descriptor_1.parseColor)(f.FrgC),\r\n        backgroundColor: (0, descriptor_1.parseColor)(f.BckC),\r\n    };\r\n    if ('Fltr' in f) {\r\n        switch (f.Fltr._classID) {\r\n            case 'boxblur': return __assign(__assign({}, base), { type: 'box blur', filter: {\r\n                    radius: (0, descriptor_1.parseUnits)(f.Fltr['Rds ']),\r\n                } });\r\n            case 'GsnB': return __assign(__assign({}, base), { type: 'gaussian blur', filter: {\r\n                    radius: (0, descriptor_1.parseUnits)(f.Fltr['Rds ']),\r\n                } });\r\n            case 'MtnB': return __assign(__assign({}, base), { type: 'motion blur', filter: {\r\n                    angle: f.Fltr.Angl,\r\n                    distance: (0, descriptor_1.parseUnits)(f.Fltr.Dstn),\r\n                } });\r\n            case 'RdlB': return __assign(__assign({}, base), { type: 'radial blur', filter: {\r\n                    amount: f.Fltr.Amnt,\r\n                    method: descriptor_1.BlrM.decode(f.Fltr.BlrM),\r\n                    quality: descriptor_1.BlrQ.decode(f.Fltr.BlrQ),\r\n                } });\r\n            case 'shapeBlur': return __assign(__assign({}, base), { type: 'shape blur', filter: {\r\n                    radius: (0, descriptor_1.parseUnits)(f.Fltr['Rds ']),\r\n                    customShape: { name: f.Fltr.customShape['Nm  '], id: f.Fltr.customShape.Idnt },\r\n                } });\r\n            case 'SmrB': return __assign(__assign({}, base), { type: 'smart blur', filter: {\r\n                    radius: f.Fltr['Rds '],\r\n                    threshold: f.Fltr.Thsh,\r\n                    quality: descriptor_1.SmBQ.decode(f.Fltr.SmBQ),\r\n                    mode: descriptor_1.SmBM.decode(f.Fltr.SmBM),\r\n                } });\r\n            case 'surfaceBlur': return __assign(__assign({}, base), { type: 'surface blur', filter: {\r\n                    radius: (0, descriptor_1.parseUnits)(f.Fltr['Rds ']),\r\n                    threshold: f.Fltr.Thsh,\r\n                } });\r\n            case 'Dspl': return __assign(__assign({}, base), { type: 'displace', filter: {\r\n                    horizontalScale: f.Fltr.HrzS,\r\n                    verticalScale: f.Fltr.VrtS,\r\n                    displacementMap: descriptor_1.DspM.decode(f.Fltr.DspM),\r\n                    undefinedAreas: descriptor_1.UndA.decode(f.Fltr.UndA),\r\n                    displacementFile: {\r\n                        signature: f.Fltr.DspF.sig,\r\n                        path: f.Fltr.DspF.path, // TODO: this is decoded incorrectly ???\r\n                    },\r\n                } });\r\n            case 'Pnch': return __assign(__assign({}, base), { type: 'pinch', filter: {\r\n                    amount: f.Fltr.Amnt,\r\n                } });\r\n            case 'Plr ': return __assign(__assign({}, base), { type: 'polar coordinates', filter: {\r\n                    conversion: descriptor_1.Cnvr.decode(f.Fltr.Cnvr),\r\n                } });\r\n            case 'Rple': return __assign(__assign({}, base), { type: 'ripple', filter: {\r\n                    amount: f.Fltr.Amnt,\r\n                    size: descriptor_1.RplS.decode(f.Fltr.RplS),\r\n                } });\r\n            case 'Shr ': return __assign(__assign({}, base), { type: 'shear', filter: {\r\n                    shearPoints: f.Fltr.ShrP.map(function (p) { return ({ x: p.Hrzn, y: p.Vrtc }); }),\r\n                    shearStart: f.Fltr.ShrS,\r\n                    shearEnd: f.Fltr.ShrE,\r\n                    undefinedAreas: descriptor_1.UndA.decode(f.Fltr.UndA),\r\n                } });\r\n            case 'Sphr': return __assign(__assign({}, base), { type: 'spherize', filter: {\r\n                    amount: f.Fltr.Amnt,\r\n                    mode: descriptor_1.SphM.decode(f.Fltr.SphM),\r\n                } });\r\n            case 'Twrl': return __assign(__assign({}, base), { type: 'twirl', filter: {\r\n                    angle: f.Fltr.Angl,\r\n                } });\r\n            case 'Wave': return __assign(__assign({}, base), { type: 'wave', filter: {\r\n                    numberOfGenerators: f.Fltr.NmbG,\r\n                    type: descriptor_1.Wvtp.decode(f.Fltr.Wvtp),\r\n                    wavelength: { min: f.Fltr.WLMn, max: f.Fltr.WLMx },\r\n                    amplitude: { min: f.Fltr.AmMn, max: f.Fltr.AmMx },\r\n                    scale: { x: f.Fltr.SclH, y: f.Fltr.SclV },\r\n                    randomSeed: f.Fltr.RndS,\r\n                    undefinedAreas: descriptor_1.UndA.decode(f.Fltr.UndA),\r\n                } });\r\n            case 'ZgZg': return __assign(__assign({}, base), { type: 'zigzag', filter: {\r\n                    amount: f.Fltr.Amnt,\r\n                    ridges: f.Fltr.NmbR,\r\n                    style: descriptor_1.ZZTy.decode(f.Fltr.ZZTy),\r\n                } });\r\n            case 'AdNs': return __assign(__assign({}, base), { type: 'add noise', filter: {\r\n                    amount: (0, descriptor_1.parsePercent)(f.Fltr.Nose),\r\n                    distribution: descriptor_1.Dstr.decode(f.Fltr.Dstr),\r\n                    monochromatic: f.Fltr.Mnch,\r\n                    randomSeed: f.Fltr.FlRs,\r\n                } });\r\n            case 'DstS': return __assign(__assign({}, base), { type: 'dust and scratches', filter: {\r\n                    radius: f.Fltr['Rds '],\r\n                    threshold: f.Fltr.Thsh,\r\n                } });\r\n            case 'Mdn ': return __assign(__assign({}, base), { type: 'median', filter: {\r\n                    radius: (0, descriptor_1.parseUnits)(f.Fltr['Rds ']),\r\n                } });\r\n            case 'denoise': return __assign(__assign({}, base), { type: 'reduce noise', filter: {\r\n                    preset: f.Fltr.preset,\r\n                    removeJpegArtifact: f.Fltr.removeJPEGArtifact,\r\n                    reduceColorNoise: (0, descriptor_1.parsePercent)(f.Fltr.ClNs),\r\n                    sharpenDetails: (0, descriptor_1.parsePercent)(f.Fltr.Shrp),\r\n                    channelDenoise: f.Fltr.channelDenoise.map(function (c) { return (__assign({ channels: c.Chnl.map(descriptor_1.Chnl.decode), amount: c.Amnt }, (c.EdgF ? { preserveDetails: c.EdgF } : {}))); }),\r\n                } });\r\n            case 'ClrH': return __assign(__assign({}, base), { type: 'color halftone', filter: {\r\n                    radius: f.Fltr['Rds '],\r\n                    angle1: f.Fltr.Ang1,\r\n                    angle2: f.Fltr.Ang2,\r\n                    angle3: f.Fltr.Ang3,\r\n                    angle4: f.Fltr.Ang4,\r\n                } });\r\n            case 'Crst': return __assign(__assign({}, base), { type: 'crystallize', filter: {\r\n                    cellSize: f.Fltr.ClSz,\r\n                    randomSeed: f.Fltr.FlRs,\r\n                } });\r\n            case 'Mztn': return __assign(__assign({}, base), { type: 'mezzotint', filter: {\r\n                    type: descriptor_1.MztT.decode(f.Fltr.MztT),\r\n                    randomSeed: f.Fltr.FlRs,\r\n                } });\r\n            case 'Msc ': return __assign(__assign({}, base), { type: 'mosaic', filter: {\r\n                    cellSize: (0, descriptor_1.parseUnits)(f.Fltr.ClSz),\r\n                } });\r\n            case 'Pntl': return __assign(__assign({}, base), { type: 'pointillize', filter: {\r\n                    cellSize: f.Fltr.ClSz,\r\n                    randomSeed: f.Fltr.FlRs,\r\n                } });\r\n            case 'Clds': return __assign(__assign({}, base), { type: 'clouds', filter: {\r\n                    randomSeed: f.Fltr.FlRs,\r\n                } });\r\n            case 'DfrC': return __assign(__assign({}, base), { type: 'difference clouds', filter: {\r\n                    randomSeed: f.Fltr.FlRs,\r\n                } });\r\n            case 'Fbrs': return __assign(__assign({}, base), { type: 'fibers', filter: {\r\n                    variance: f.Fltr.Vrnc,\r\n                    strength: f.Fltr.Strg,\r\n                    randomSeed: f.Fltr.RndS,\r\n                } });\r\n            case 'LnsF': return __assign(__assign({}, base), { type: 'lens flare', filter: {\r\n                    brightness: f.Fltr.Brgh,\r\n                    position: { x: f.Fltr.FlrC.Hrzn, y: f.Fltr.FlrC.Vrtc },\r\n                    lensType: descriptor_1.Lns.decode(f.Fltr['Lns ']),\r\n                } });\r\n            case 'smartSharpen': return __assign(__assign({}, base), { type: 'smart sharpen', filter: {\r\n                    amount: (0, descriptor_1.parsePercent)(f.Fltr.Amnt),\r\n                    radius: (0, descriptor_1.parseUnits)(f.Fltr['Rds ']),\r\n                    threshold: f.Fltr.Thsh,\r\n                    angle: f.Fltr.Angl,\r\n                    moreAccurate: f.Fltr.moreAccurate,\r\n                    blur: descriptor_1.blurType.decode(f.Fltr.blur),\r\n                    preset: f.Fltr.preset,\r\n                    shadow: {\r\n                        fadeAmount: (0, descriptor_1.parsePercent)(f.Fltr.sdwM.Amnt),\r\n                        tonalWidth: (0, descriptor_1.parsePercent)(f.Fltr.sdwM.Wdth),\r\n                        radius: f.Fltr.sdwM['Rds '],\r\n                    },\r\n                    highlight: {\r\n                        fadeAmount: (0, descriptor_1.parsePercent)(f.Fltr.hglM.Amnt),\r\n                        tonalWidth: (0, descriptor_1.parsePercent)(f.Fltr.hglM.Wdth),\r\n                        radius: f.Fltr.hglM['Rds '],\r\n                    },\r\n                } });\r\n            case 'UnsM': return __assign(__assign({}, base), { type: 'unsharp mask', filter: {\r\n                    amount: (0, descriptor_1.parsePercent)(f.Fltr.Amnt),\r\n                    radius: (0, descriptor_1.parseUnits)(f.Fltr['Rds ']),\r\n                    threshold: f.Fltr.Thsh,\r\n                } });\r\n            case 'Dfs ': return __assign(__assign({}, base), { type: 'diffuse', filter: {\r\n                    mode: descriptor_1.DfsM.decode(f.Fltr['Md  ']),\r\n                    randomSeed: f.Fltr.FlRs,\r\n                } });\r\n            case 'Embs': return __assign(__assign({}, base), { type: 'emboss', filter: {\r\n                    angle: f.Fltr.Angl,\r\n                    height: f.Fltr.Hght,\r\n                    amount: f.Fltr.Amnt,\r\n                } });\r\n            case 'Extr': return __assign(__assign({}, base), { type: 'extrude', filter: {\r\n                    type: descriptor_1.ExtT.decode(f.Fltr.ExtT),\r\n                    size: f.Fltr.ExtS,\r\n                    depth: f.Fltr.ExtD,\r\n                    depthMode: descriptor_1.ExtR.decode(f.Fltr.ExtR),\r\n                    randomSeed: f.Fltr.FlRs,\r\n                    solidFrontFaces: f.Fltr.ExtF,\r\n                    maskIncompleteBlocks: f.Fltr.ExtM,\r\n                } });\r\n            case 'Tls ': return __assign(__assign({}, base), { type: 'tiles', filter: {\r\n                    numberOfTiles: f.Fltr.TlNm,\r\n                    maximumOffset: f.Fltr.TlOf,\r\n                    fillEmptyAreaWith: descriptor_1.FlCl.decode(f.Fltr.FlCl),\r\n                    randomSeed: f.Fltr.FlRs,\r\n                } });\r\n            case 'TrcC': return __assign(__assign({}, base), { type: 'trace contour', filter: {\r\n                    level: f.Fltr['Lvl '],\r\n                    edge: descriptor_1.CntE.decode(f.Fltr['Edg ']),\r\n                } });\r\n            case 'Wnd ': return __assign(__assign({}, base), { type: 'wind', filter: {\r\n                    method: descriptor_1.WndM.decode(f.Fltr.WndM),\r\n                    direction: descriptor_1.Drct.decode(f.Fltr.Drct),\r\n                } });\r\n            case 'Dntr': return __assign(__assign({}, base), { type: 'de-interlace', filter: {\r\n                    eliminate: descriptor_1.IntE.decode(f.Fltr.IntE),\r\n                    newFieldsBy: descriptor_1.IntC.decode(f.Fltr.IntC),\r\n                } });\r\n            case 'Cstm': return __assign(__assign({}, base), { type: 'custom', filter: {\r\n                    scale: f.Fltr['Scl '],\r\n                    offset: f.Fltr.Ofst,\r\n                    matrix: f.Fltr.Mtrx,\r\n                } });\r\n            case 'HghP': return __assign(__assign({}, base), { type: 'high pass', filter: {\r\n                    radius: (0, descriptor_1.parseUnits)(f.Fltr['Rds ']),\r\n                } });\r\n            case 'Mxm ': return __assign(__assign({}, base), { type: 'maximum', filter: {\r\n                    radius: (0, descriptor_1.parseUnits)(f.Fltr['Rds ']),\r\n                } });\r\n            case 'Mnm ': return __assign(__assign({}, base), { type: 'minimum', filter: {\r\n                    radius: (0, descriptor_1.parseUnits)(f.Fltr['Rds ']),\r\n                } });\r\n            case 'Ofst': return __assign(__assign({}, base), { type: 'offset', filter: {\r\n                    horizontal: f.Fltr.Hrzn,\r\n                    vertical: f.Fltr.Vrtc,\r\n                    undefinedAreas: descriptor_1.FlMd.decode(f.Fltr['Fl  ']),\r\n                } });\r\n            case 'rigidTransform': return __assign(__assign({}, base), { type: 'puppet', filter: {\r\n                    rigidType: f.Fltr.rigidType,\r\n                    bounds: [\r\n                        { x: f.Fltr.PuX0, y: f.Fltr.PuY0, },\r\n                        { x: f.Fltr.PuX1, y: f.Fltr.PuY1, },\r\n                        { x: f.Fltr.PuX2, y: f.Fltr.PuY2, },\r\n                        { x: f.Fltr.PuX3, y: f.Fltr.PuY3, },\r\n                    ],\r\n                    puppetShapeList: f.Fltr.puppetShapeList.map(function (p) { return ({\r\n                        rigidType: p.rigidType,\r\n                        // TODO: VrsM\r\n                        // TODO: VrsN\r\n                        originalVertexArray: uint8ToPoints(p.originalVertexArray),\r\n                        deformedVertexArray: uint8ToPoints(p.deformedVertexArray),\r\n                        indexArray: Array.from(uint8ToUint32(p.indexArray)),\r\n                        pinOffsets: arrayToPoints(p.pinOffsets),\r\n                        posFinalPins: arrayToPoints(p.posFinalPins),\r\n                        pinVertexIndices: p.pinVertexIndices,\r\n                        selectedPin: p.selectedPin,\r\n                        pinPosition: arrayToPoints(p.PinP),\r\n                        pinRotation: p.PnRt,\r\n                        pinOverlay: p.PnOv,\r\n                        pinDepth: p.PnDp,\r\n                        meshQuality: p.meshQuality,\r\n                        meshExpansion: p.meshExpansion,\r\n                        meshRigidity: p.meshRigidity,\r\n                        imageResolution: p.imageResolution,\r\n                        meshBoundaryPath: {\r\n                            pathComponents: p.meshBoundaryPath.pathComponents.map(function (c) { return ({\r\n                                shapeOperation: c.shapeOperation.split('.')[1],\r\n                                paths: c.SbpL.map(function (t) { return ({\r\n                                    closed: t.Clsp,\r\n                                    points: t['Pts '].map(function (pt) { return ({\r\n                                        anchor: hrznVrtcToPoint(pt.Anch),\r\n                                        forward: hrznVrtcToPoint(pt['Fwd ']),\r\n                                        backward: hrznVrtcToPoint(pt['Bwd ']),\r\n                                        smooth: pt.Smoo,\r\n                                    }); }),\r\n                                }); }),\r\n                            }); }),\r\n                        },\r\n                    }); }),\r\n                } });\r\n            case 'PbPl': {\r\n                var parameters = [];\r\n                var Flrt = f.Fltr;\r\n                for (var i = 0; i < fromAtoZ.length; i++) {\r\n                    if (!Flrt[\"PN\".concat(fromAtoZ[i], \"a\")])\r\n                        break;\r\n                    for (var j = 0; j < fromAtoZ.length; j++) {\r\n                        if (!Flrt[\"PN\".concat(fromAtoZ[i]).concat(fromAtoZ[j])])\r\n                            break;\r\n                        parameters.push({\r\n                            name: Flrt[\"PN\".concat(fromAtoZ[i]).concat(fromAtoZ[j])],\r\n                            value: Flrt[\"PF\".concat(fromAtoZ[i]).concat(fromAtoZ[j])]\r\n                        });\r\n                    }\r\n                }\r\n                return __assign(__assign({}, base), { type: 'oil paint plugin', filter: {\r\n                        name: f.Fltr.KnNm,\r\n                        gpu: f.Fltr.GpuY,\r\n                        lighting: f.Fltr.LIWy,\r\n                        parameters: parameters,\r\n                    } });\r\n            }\r\n            // case 2089: return {\r\n            // \t...base,\r\n            // \ttype: 'adaptive wide angle',\r\n            // \tparams: {\r\n            // \t\tcorrection: prjM.decode(f.Fltr.prjM),\r\n            // \t\tfocalLength: f.Fltr.focL,\r\n            // \t\tcropFactor: f.Fltr.CrpF,\r\n            // \t\timageScale: f.Fltr.imgS,\r\n            // \t\timageX: f.Fltr.imgX,\r\n            // \t\timageY: f.Fltr.imgY,\r\n            // \t},\r\n            // };\r\n            case 'HsbP': return __assign(__assign({}, base), { type: 'hsb/hsl', filter: {\r\n                    inputMode: descriptor_1.ClrS.decode(f.Fltr.Inpt),\r\n                    rowOrder: descriptor_1.ClrS.decode(f.Fltr.Otpt),\r\n                } });\r\n            case 'oilPaint': return __assign(__assign({}, base), { type: 'oil paint', filter: {\r\n                    lightingOn: f.Fltr.lightingOn,\r\n                    stylization: f.Fltr.stylization,\r\n                    cleanliness: f.Fltr.cleanliness,\r\n                    brushScale: f.Fltr.brushScale,\r\n                    microBrush: f.Fltr.microBrush,\r\n                    lightDirection: f.Fltr.LghD,\r\n                    specularity: f.Fltr.specularity,\r\n                } });\r\n            case 'LqFy':\r\n                {\r\n                    return __assign(__assign({}, base), { type: 'liquify', filter: {\r\n                            liquifyMesh: f.Fltr.LqMe,\r\n                        } });\r\n                }\r\n                ;\r\n            case 'perspectiveWarpTransform':\r\n                {\r\n                    return __assign(__assign({}, base), { type: 'perspective warp', filter: {\r\n                            vertices: f.Fltr.vertices.map(hrznVrtcToPoint),\r\n                            warpedVertices: f.Fltr.warpedVertices.map(hrznVrtcToPoint),\r\n                            quads: f.Fltr.quads.map(function (q) { return q.indices; }),\r\n                        } });\r\n                }\r\n                ;\r\n            case 'Crvs':\r\n                {\r\n                    return __assign(__assign({}, base), { type: 'curves', filter: __assign({ presetKind: descriptor_1.presetKindType.decode(f.Fltr.presetKind) }, (f.Fltr.Adjs ? {\r\n                            adjustments: f.Fltr.Adjs.map(function (a) {\r\n                                var channels = a.Chnl.map(descriptor_1.Chnl.decode);\r\n                                if (a['Crv ']) {\r\n                                    return {\r\n                                        channels: channels,\r\n                                        curve: a['Crv '].map(function (c) {\r\n                                            var point = { x: c.Hrzn, y: c.Vrtc };\r\n                                            if (c.Cnty)\r\n                                                point.curved = true;\r\n                                            return point;\r\n                                        }),\r\n                                    };\r\n                                }\r\n                                else if (a.Mpng) {\r\n                                    return { channels: channels, values: a.Mpng };\r\n                                }\r\n                                else {\r\n                                    throw new Error(\"Unknown curve adjustment\");\r\n                                }\r\n                            })\r\n                        } : {})) });\r\n                }\r\n                ;\r\n            case 'BrgC':\r\n                {\r\n                    return __assign(__assign({}, base), { type: 'brightness/contrast', filter: {\r\n                            brightness: f.Fltr.Brgh,\r\n                            contrast: f.Fltr.Cntr,\r\n                            useLegacy: !!f.Fltr.useLegacy,\r\n                        } });\r\n                }\r\n                ;\r\n            default:\r\n                if (options.throwForMissingFeatures) {\r\n                    // console.log('FILTER', require('util').inspect(f, false, 99, true));\r\n                    throw new Error(\"Unknown filter classId: \".concat(f.Fltr._classID));\r\n                }\r\n                return undefined;\r\n        }\r\n    }\r\n    else {\r\n        switch (f.filterID) {\r\n            case 1098281575: return __assign(__assign({}, base), { type: 'average' });\r\n            case 1114403360: return __assign(__assign({}, base), { type: 'blur' });\r\n            case 1114403405: return __assign(__assign({}, base), { type: 'blur more' });\r\n            case 1148416099: return __assign(__assign({}, base), { type: 'despeckle' });\r\n            case 1180922912: return __assign(__assign({}, base), { type: 'facet' });\r\n            case 1181902701: return __assign(__assign({}, base), { type: 'fragment' });\r\n            case 1399353968: return __assign(__assign({}, base), { type: 'sharpen' });\r\n            case 1399353925: return __assign(__assign({}, base), { type: 'sharpen edges' });\r\n            case 1399353933: return __assign(__assign({}, base), { type: 'sharpen more' });\r\n            case 1181639749: return __assign(__assign({}, base), { type: 'find edges' });\r\n            case 1399616122: return __assign(__assign({}, base), { type: 'solarize' });\r\n            case 1314149187: return __assign(__assign({}, base), { type: 'ntsc colors' });\r\n            case 1231976050: return __assign(__assign({}, base), { type: 'invert' });\r\n            default:\r\n                if (options.throwForMissingFeatures) {\r\n                    // console.log('FILTER', require('util').inspect(f, false, 99, true));\r\n                    throw new Error(\"Unknown filterID: \".concat(f.filterID));\r\n                }\r\n        }\r\n    }\r\n}\r\nfunction parseFilterFX(desc, options) {\r\n    return {\r\n        enabled: desc.enab,\r\n        validAtPosition: desc.validAtPosition,\r\n        maskEnabled: desc.filterMaskEnable,\r\n        maskLinked: desc.filterMaskLinked,\r\n        maskExtendWithWhite: desc.filterMaskExtendWithWhite,\r\n        list: desc.filterFXList.map(function (x) { return parseFilterFXItem(x, options); }).filter(function (x) { return !!x; }),\r\n    };\r\n}\r\nfunction uvRadius(t) {\r\n    return (0, descriptor_1.unitsValue)(t.radius, 'radius');\r\n}\r\nfunction serializeFilterFXItem(f) {\r\n    var base = {\r\n        _name: '',\r\n        _classID: 'filterFX',\r\n        'Nm  ': f.name,\r\n        blendOptions: {\r\n            _name: '',\r\n            _classID: 'blendOptions',\r\n            Opct: (0, descriptor_1.unitsPercentF)(f.opacity),\r\n            'Md  ': descriptor_1.BlnM.encode(f.blendMode),\r\n        },\r\n        enab: f.enabled,\r\n        hasoptions: f.hasOptions,\r\n        FrgC: (0, descriptor_1.serializeColor)(f.foregroundColor),\r\n        BckC: (0, descriptor_1.serializeColor)(f.backgroundColor),\r\n    };\r\n    switch (f.type) {\r\n        case 'average': return __assign(__assign({}, base), { filterID: 1098281575 });\r\n        case 'blur': return __assign(__assign({}, base), { filterID: 1114403360 });\r\n        case 'blur more': return __assign(__assign({}, base), { filterID: 1114403405 });\r\n        case 'box blur': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Box Blur',\r\n                _classID: 'boxblur',\r\n                'Rds ': uvRadius(f.filter),\r\n            }, filterID: 697 });\r\n        case 'gaussian blur': return __assign(__assign({}, base), { Fltr: {\r\n                // _name: '高斯模糊', // Testing\r\n                _name: 'Gaussian Blur',\r\n                _classID: 'GsnB',\r\n                'Rds ': uvRadius(f.filter),\r\n            }, filterID: 1198747202 });\r\n        case 'motion blur': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Motion Blur',\r\n                _classID: 'MtnB',\r\n                Angl: f.filter.angle,\r\n                Dstn: (0, descriptor_1.unitsValue)(f.filter.distance, 'distance'),\r\n            }, filterID: 1299476034 });\r\n        case 'radial blur': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Radial Blur',\r\n                _classID: 'RdlB',\r\n                Amnt: f.filter.amount,\r\n                BlrM: descriptor_1.BlrM.encode(f.filter.method),\r\n                BlrQ: descriptor_1.BlrQ.encode(f.filter.quality),\r\n            }, filterID: 1382313026 });\r\n        case 'shape blur': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Shape Blur',\r\n                _classID: 'shapeBlur',\r\n                'Rds ': uvRadius(f.filter),\r\n                customShape: {\r\n                    _name: '',\r\n                    _classID: 'customShape',\r\n                    'Nm  ': f.filter.customShape.name,\r\n                    Idnt: f.filter.customShape.id,\r\n                }\r\n            }, filterID: 702 });\r\n        case 'smart blur': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Smart Blur',\r\n                _classID: 'SmrB',\r\n                'Rds ': f.filter.radius,\r\n                Thsh: f.filter.threshold,\r\n                SmBQ: descriptor_1.SmBQ.encode(f.filter.quality),\r\n                SmBM: descriptor_1.SmBM.encode(f.filter.mode),\r\n            }, filterID: 1399681602 });\r\n        case 'surface blur': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Surface Blur',\r\n                _classID: 'surfaceBlur',\r\n                'Rds ': uvRadius(f.filter),\r\n                Thsh: f.filter.threshold,\r\n            }, filterID: 701 });\r\n        case 'displace': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Displace',\r\n                _classID: 'Dspl',\r\n                HrzS: f.filter.horizontalScale,\r\n                VrtS: f.filter.verticalScale,\r\n                DspM: descriptor_1.DspM.encode(f.filter.displacementMap),\r\n                UndA: descriptor_1.UndA.encode(f.filter.undefinedAreas),\r\n                DspF: {\r\n                    sig: f.filter.displacementFile.signature,\r\n                    path: f.filter.displacementFile.path,\r\n                },\r\n            }, filterID: 1148416108 });\r\n        case 'pinch': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Pinch',\r\n                _classID: 'Pnch',\r\n                Amnt: f.filter.amount,\r\n            }, filterID: 1349411688 });\r\n        case 'polar coordinates': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Polar Coordinates',\r\n                _classID: 'Plr ',\r\n                Cnvr: descriptor_1.Cnvr.encode(f.filter.conversion),\r\n            }, filterID: 1349284384 });\r\n        case 'ripple': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Ripple',\r\n                _classID: 'Rple',\r\n                Amnt: f.filter.amount,\r\n                RplS: descriptor_1.RplS.encode(f.filter.size),\r\n            }, filterID: 1383099493 });\r\n        case 'shear': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Shear',\r\n                _classID: 'Shr ',\r\n                ShrP: f.filter.shearPoints.map(function (p) { return ({ _name: '', _classID: 'Pnt ', Hrzn: p.x, Vrtc: p.y }); }),\r\n                UndA: descriptor_1.UndA.encode(f.filter.undefinedAreas),\r\n                ShrS: f.filter.shearStart,\r\n                ShrE: f.filter.shearEnd,\r\n            }, filterID: 1399353888 });\r\n        case 'spherize': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Spherize',\r\n                _classID: 'Sphr',\r\n                Amnt: f.filter.amount,\r\n                SphM: descriptor_1.SphM.encode(f.filter.mode),\r\n            }, filterID: 1399875698 });\r\n        case 'twirl': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Twirl',\r\n                _classID: 'Twrl',\r\n                Angl: f.filter.angle,\r\n            }, filterID: 1417114220 });\r\n        case 'wave': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Wave',\r\n                _classID: 'Wave',\r\n                Wvtp: descriptor_1.Wvtp.encode(f.filter.type),\r\n                NmbG: f.filter.numberOfGenerators,\r\n                WLMn: f.filter.wavelength.min,\r\n                WLMx: f.filter.wavelength.max,\r\n                AmMn: f.filter.amplitude.min,\r\n                AmMx: f.filter.amplitude.max,\r\n                SclH: f.filter.scale.x,\r\n                SclV: f.filter.scale.y,\r\n                UndA: descriptor_1.UndA.encode(f.filter.undefinedAreas),\r\n                RndS: f.filter.randomSeed,\r\n            }, filterID: 1466005093 });\r\n        case 'zigzag': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'ZigZag',\r\n                _classID: 'ZgZg',\r\n                Amnt: f.filter.amount,\r\n                NmbR: f.filter.ridges,\r\n                ZZTy: descriptor_1.ZZTy.encode(f.filter.style),\r\n            }, filterID: 1516722791 });\r\n        case 'add noise': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Add Noise',\r\n                _classID: 'AdNs',\r\n                Dstr: descriptor_1.Dstr.encode(f.filter.distribution),\r\n                Nose: (0, descriptor_1.unitsPercentF)(f.filter.amount),\r\n                Mnch: f.filter.monochromatic,\r\n                FlRs: f.filter.randomSeed,\r\n            }, filterID: 1097092723 });\r\n        case 'despeckle': return __assign(__assign({}, base), { filterID: 1148416099 });\r\n        case 'dust and scratches': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Dust & Scratches',\r\n                _classID: 'DstS',\r\n                'Rds ': f.filter.radius,\r\n                Thsh: f.filter.threshold,\r\n            }, filterID: 1148417107 });\r\n        case 'median': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Median',\r\n                _classID: 'Mdn ',\r\n                'Rds ': uvRadius(f.filter),\r\n            }, filterID: 1298427424 });\r\n        case 'reduce noise': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Reduce Noise',\r\n                _classID: 'denoise',\r\n                ClNs: (0, descriptor_1.unitsPercentF)(f.filter.reduceColorNoise),\r\n                Shrp: (0, descriptor_1.unitsPercentF)(f.filter.sharpenDetails),\r\n                removeJPEGArtifact: f.filter.removeJpegArtifact,\r\n                channelDenoise: f.filter.channelDenoise.map(function (c) { return (__assign({ _name: '', _classID: 'channelDenoiseParams', Chnl: c.channels.map(function (i) { return descriptor_1.Chnl.encode(i); }), Amnt: c.amount }, (c.preserveDetails ? { EdgF: c.preserveDetails } : {}))); }),\r\n                preset: f.filter.preset,\r\n            }, filterID: 633 });\r\n        case 'color halftone': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Color Halftone',\r\n                _classID: 'ClrH',\r\n                'Rds ': f.filter.radius,\r\n                Ang1: f.filter.angle1,\r\n                Ang2: f.filter.angle2,\r\n                Ang3: f.filter.angle3,\r\n                Ang4: f.filter.angle4,\r\n            }, filterID: 1131180616 });\r\n        case 'crystallize': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Crystallize',\r\n                _classID: 'Crst',\r\n                ClSz: f.filter.cellSize,\r\n                FlRs: f.filter.randomSeed,\r\n            }, filterID: 1131574132 });\r\n        case 'facet': return __assign(__assign({}, base), { filterID: 1180922912 });\r\n        case 'fragment': return __assign(__assign({}, base), { filterID: 1181902701 });\r\n        case 'mezzotint': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Mezzotint',\r\n                _classID: 'Mztn',\r\n                MztT: descriptor_1.MztT.encode(f.filter.type),\r\n                FlRs: f.filter.randomSeed,\r\n            }, filterID: 1299870830 });\r\n        case 'mosaic': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Mosaic',\r\n                _classID: 'Msc ',\r\n                ClSz: (0, descriptor_1.unitsValue)(f.filter.cellSize, 'cellSize'),\r\n            }, filterID: 1299407648 });\r\n        case 'pointillize': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Pointillize',\r\n                _classID: 'Pntl',\r\n                ClSz: f.filter.cellSize,\r\n                FlRs: f.filter.randomSeed,\r\n            }, filterID: 1349416044 });\r\n        case 'clouds': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Clouds',\r\n                _classID: 'Clds',\r\n                FlRs: f.filter.randomSeed,\r\n            }, filterID: 1131177075 });\r\n        case 'difference clouds': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Difference Clouds',\r\n                _classID: 'DfrC',\r\n                FlRs: f.filter.randomSeed,\r\n            }, filterID: 1147564611 });\r\n        case 'fibers': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Fibers',\r\n                _classID: 'Fbrs',\r\n                Vrnc: f.filter.variance,\r\n                Strg: f.filter.strength,\r\n                RndS: f.filter.randomSeed,\r\n            }, filterID: 1180856947 });\r\n        case 'lens flare': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Lens Flare',\r\n                _classID: 'LnsF',\r\n                Brgh: f.filter.brightness,\r\n                FlrC: {\r\n                    _name: '',\r\n                    _classID: 'Pnt ',\r\n                    Hrzn: f.filter.position.x,\r\n                    Vrtc: f.filter.position.y,\r\n                },\r\n                'Lns ': descriptor_1.Lns.encode(f.filter.lensType),\r\n            }, filterID: 1282306886 });\r\n        case 'sharpen': return __assign(__assign({}, base), { filterID: 1399353968 });\r\n        case 'sharpen edges': return __assign(__assign({}, base), { filterID: 1399353925 });\r\n        case 'sharpen more': return __assign(__assign({}, base), { filterID: 1399353933 });\r\n        case 'smart sharpen': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Smart Sharpen',\r\n                _classID: 'smartSharpen',\r\n                Amnt: (0, descriptor_1.unitsPercentF)(f.filter.amount),\r\n                'Rds ': uvRadius(f.filter),\r\n                Thsh: f.filter.threshold,\r\n                Angl: f.filter.angle,\r\n                moreAccurate: f.filter.moreAccurate,\r\n                blur: descriptor_1.blurType.encode(f.filter.blur),\r\n                preset: f.filter.preset,\r\n                sdwM: {\r\n                    _name: 'Parameters',\r\n                    _classID: 'adaptCorrectTones',\r\n                    Amnt: (0, descriptor_1.unitsPercentF)(f.filter.shadow.fadeAmount),\r\n                    Wdth: (0, descriptor_1.unitsPercentF)(f.filter.shadow.tonalWidth),\r\n                    'Rds ': f.filter.shadow.radius,\r\n                },\r\n                hglM: {\r\n                    _name: 'Parameters',\r\n                    _classID: 'adaptCorrectTones',\r\n                    Amnt: (0, descriptor_1.unitsPercentF)(f.filter.highlight.fadeAmount),\r\n                    Wdth: (0, descriptor_1.unitsPercentF)(f.filter.highlight.tonalWidth),\r\n                    'Rds ': f.filter.highlight.radius,\r\n                },\r\n            }, filterID: 698 });\r\n        case 'unsharp mask': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Unsharp Mask',\r\n                _classID: 'UnsM',\r\n                Amnt: (0, descriptor_1.unitsPercentF)(f.filter.amount),\r\n                'Rds ': uvRadius(f.filter),\r\n                Thsh: f.filter.threshold,\r\n            }, filterID: 1433301837 });\r\n        case 'diffuse': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Diffuse',\r\n                _classID: 'Dfs ',\r\n                'Md  ': descriptor_1.DfsM.encode(f.filter.mode),\r\n                FlRs: f.filter.randomSeed,\r\n            }, filterID: 1147564832 });\r\n        case 'emboss': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Emboss',\r\n                _classID: 'Embs',\r\n                Angl: f.filter.angle,\r\n                Hght: f.filter.height,\r\n                Amnt: f.filter.amount,\r\n            }, filterID: 1164796531 });\r\n        case 'extrude': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Extrude',\r\n                _classID: 'Extr',\r\n                ExtS: f.filter.size,\r\n                ExtD: f.filter.depth,\r\n                ExtF: f.filter.solidFrontFaces,\r\n                ExtM: f.filter.maskIncompleteBlocks,\r\n                ExtT: descriptor_1.ExtT.encode(f.filter.type),\r\n                ExtR: descriptor_1.ExtR.encode(f.filter.depthMode),\r\n                FlRs: f.filter.randomSeed,\r\n            }, filterID: 1165522034 });\r\n        case 'find edges': return __assign(__assign({}, base), { filterID: 1181639749 });\r\n        case 'solarize': return __assign(__assign({}, base), { filterID: 1399616122 });\r\n        case 'tiles': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Tiles',\r\n                _classID: 'Tls ',\r\n                TlNm: f.filter.numberOfTiles,\r\n                TlOf: f.filter.maximumOffset,\r\n                FlCl: descriptor_1.FlCl.encode(f.filter.fillEmptyAreaWith),\r\n                FlRs: f.filter.randomSeed,\r\n            }, filterID: 1416393504 });\r\n        case 'trace contour': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Trace Contour',\r\n                _classID: 'TrcC',\r\n                'Lvl ': f.filter.level,\r\n                'Edg ': descriptor_1.CntE.encode(f.filter.edge),\r\n            }, filterID: 1416782659 });\r\n        case 'wind': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Wind',\r\n                _classID: 'Wnd ',\r\n                WndM: descriptor_1.WndM.encode(f.filter.method),\r\n                Drct: descriptor_1.Drct.encode(f.filter.direction),\r\n            }, filterID: 1466852384 });\r\n        case 'de-interlace': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'De-Interlace',\r\n                _classID: 'Dntr',\r\n                IntE: descriptor_1.IntE.encode(f.filter.eliminate),\r\n                IntC: descriptor_1.IntC.encode(f.filter.newFieldsBy),\r\n            }, filterID: 1148089458 });\r\n        case 'ntsc colors': return __assign(__assign({}, base), { filterID: 1314149187 });\r\n        case 'invert': return __assign(__assign({}, base), { filterID: 1231976050 });\r\n        case 'custom': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Custom',\r\n                _classID: 'Cstm',\r\n                'Scl ': f.filter.scale,\r\n                Ofst: f.filter.offset,\r\n                Mtrx: f.filter.matrix,\r\n            }, filterID: 1131639917 });\r\n        case 'high pass': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'High Pass',\r\n                _classID: 'HghP',\r\n                'Rds ': uvRadius(f.filter),\r\n            }, filterID: 1214736464 });\r\n        case 'maximum': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Maximum',\r\n                _classID: 'Mxm ',\r\n                'Rds ': uvRadius(f.filter),\r\n            }, filterID: 1299737888 });\r\n        case 'minimum': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Minimum',\r\n                _classID: 'Mnm ',\r\n                'Rds ': uvRadius(f.filter),\r\n            }, filterID: 1299082528 });\r\n        case 'offset': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Offset',\r\n                _classID: 'Ofst',\r\n                Hrzn: f.filter.horizontal,\r\n                Vrtc: f.filter.vertical,\r\n                'Fl  ': descriptor_1.FlMd.encode(f.filter.undefinedAreas),\r\n            }, filterID: 1332114292 });\r\n        case 'puppet': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Rigid Transform',\r\n                _classID: 'rigidTransform',\r\n                'null': ['Ordn.Trgt'],\r\n                rigidType: f.filter.rigidType,\r\n                puppetShapeList: f.filter.puppetShapeList.map(function (p) { return ({\r\n                    _name: '',\r\n                    _classID: 'puppetShape',\r\n                    rigidType: p.rigidType,\r\n                    VrsM: 1,\r\n                    VrsN: 0,\r\n                    originalVertexArray: toUint8(new Float32Array(pointsToArray(p.originalVertexArray))),\r\n                    deformedVertexArray: toUint8(new Float32Array(pointsToArray(p.deformedVertexArray))),\r\n                    indexArray: toUint8(new Uint32Array(p.indexArray)),\r\n                    pinOffsets: pointsToArray(p.pinOffsets),\r\n                    posFinalPins: pointsToArray(p.posFinalPins),\r\n                    pinVertexIndices: p.pinVertexIndices,\r\n                    PinP: pointsToArray(p.pinPosition),\r\n                    PnRt: p.pinRotation,\r\n                    PnOv: p.pinOverlay,\r\n                    PnDp: p.pinDepth,\r\n                    meshQuality: p.meshQuality,\r\n                    meshExpansion: p.meshExpansion,\r\n                    meshRigidity: p.meshRigidity,\r\n                    imageResolution: p.imageResolution,\r\n                    meshBoundaryPath: {\r\n                        _name: '',\r\n                        _classID: 'pathClass',\r\n                        pathComponents: p.meshBoundaryPath.pathComponents.map(function (c) { return ({\r\n                            _name: '',\r\n                            _classID: 'PaCm',\r\n                            shapeOperation: \"shapeOperation.\".concat(c.shapeOperation),\r\n                            SbpL: c.paths.map(function (path) { return ({\r\n                                _name: '',\r\n                                _classID: 'Sbpl',\r\n                                Clsp: path.closed,\r\n                                'Pts ': path.points.map(function (pt) { return ({\r\n                                    _name: '',\r\n                                    _classID: 'Pthp',\r\n                                    Anch: pointToHrznVrtc(pt.anchor),\r\n                                    'Fwd ': pointToHrznVrtc(pt.forward),\r\n                                    'Bwd ': pointToHrznVrtc(pt.backward),\r\n                                    Smoo: pt.smooth,\r\n                                }); }),\r\n                            }); }),\r\n                        }); }),\r\n                    },\r\n                    selectedPin: p.selectedPin,\r\n                }); }),\r\n                PuX0: f.filter.bounds[0].x,\r\n                PuX1: f.filter.bounds[1].x,\r\n                PuX2: f.filter.bounds[2].x,\r\n                PuX3: f.filter.bounds[3].x,\r\n                PuY0: f.filter.bounds[0].y,\r\n                PuY1: f.filter.bounds[1].y,\r\n                PuY2: f.filter.bounds[2].y,\r\n                PuY3: f.filter.bounds[3].y,\r\n            }, filterID: 991 });\r\n        case 'oil paint plugin': {\r\n            var params = {};\r\n            for (var i = 0; i < f.filter.parameters.length; i++) {\r\n                var _a = f.filter.parameters[i], name_1 = _a.name, value = _a.value;\r\n                var suffix = \"\".concat(fromAtoZ[Math.floor(i / fromAtoZ.length)]).concat(fromAtoZ[i % fromAtoZ.length]);\r\n                params[\"PN\".concat(suffix)] = name_1;\r\n                params[\"PT\".concat(suffix)] = 0;\r\n                params[\"PF\".concat(suffix)] = value;\r\n            }\r\n            return __assign(__assign({}, base), { Fltr: __assign({ _name: 'Oil Paint Plugin', _classID: 'PbPl', KnNm: f.filter.name, GpuY: f.filter.gpu, LIWy: f.filter.lighting, FPth: '1' }, params), filterID: 1348620396 });\r\n        }\r\n        case 'oil paint': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Oil Paint',\r\n                _classID: 'oilPaint',\r\n                lightingOn: f.filter.lightingOn,\r\n                stylization: f.filter.stylization,\r\n                cleanliness: f.filter.cleanliness,\r\n                brushScale: f.filter.brushScale,\r\n                microBrush: f.filter.microBrush,\r\n                LghD: f.filter.lightDirection,\r\n                specularity: f.filter.specularity,\r\n            }, filterID: 1122 });\r\n        case 'liquify': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Liquify',\r\n                _classID: 'LqFy',\r\n                LqMe: f.filter.liquifyMesh,\r\n            }, filterID: 1282492025 });\r\n        case 'perspective warp': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Perspective Warp',\r\n                _classID: 'perspectiveWarpTransform',\r\n                vertices: f.filter.vertices.map(pointToHrznVrtc),\r\n                warpedVertices: f.filter.warpedVertices.map(pointToHrznVrtc),\r\n                quads: f.filter.quads.map(function (indices) { return ({ indices: indices }); }),\r\n            }, filterID: 442 });\r\n        case 'curves': return __assign(__assign({}, base), { Fltr: __assign({ _name: 'Curves', _classID: 'Crvs', presetKind: descriptor_1.presetKindType.encode(f.filter.presetKind) }, (f.filter.adjustments ? {\r\n                Adjs: f.filter.adjustments.map(function (a) { return 'curve' in a ? {\r\n                    _name: '',\r\n                    _classID: 'CrvA',\r\n                    Chnl: a.channels.map(descriptor_1.Chnl.encode),\r\n                    'Crv ': a.curve.map(function (c) { return (__assign({ _name: '', _classID: 'Pnt ', Hrzn: c.x, Vrtc: c.y }, (c.curved ? { Cnty: true } : {}))); }),\r\n                } : {\r\n                    _name: '',\r\n                    _classID: 'CrvA',\r\n                    Chnl: a.channels.map(descriptor_1.Chnl.encode),\r\n                    Mpng: a.values,\r\n                }; })\r\n            } : {})), filterID: 1131574899 });\r\n        case 'brightness/contrast': return __assign(__assign({}, base), { Fltr: {\r\n                _name: 'Brightness/Contrast',\r\n                _classID: 'BrgC',\r\n                Brgh: f.filter.brightness,\r\n                Cntr: f.filter.contrast,\r\n                useLegacy: !!f.filter.useLegacy,\r\n            }, filterID: 1114793795 });\r\n        // case 'hsb/hsl': return {\r\n        // TODO: ...\r\n        // };\r\n        default: throw new Error(\"Unknow filter type: \".concat(f.type));\r\n    }\r\n}\r\n// let t: any;\r\nfunction getWarpFromPlacedLayer(placed) {\r\n    if (placed.warp)\r\n        return placed.warp;\r\n    if (!placed.width || !placed.height)\r\n        throw new Error('You must provide width and height of the linked image in placedLayer');\r\n    var w = placed.width;\r\n    var h = placed.height;\r\n    var x0 = 0, x1 = w / 3, x2 = w * 2 / 3, x3 = w;\r\n    var y0 = 0, y1 = h / 3, y2 = h * 2 / 3, y3 = h;\r\n    return {\r\n        style: 'custom',\r\n        value: 0,\r\n        perspective: 0,\r\n        perspectiveOther: 0,\r\n        rotate: 'horizontal',\r\n        bounds: {\r\n            top: { value: 0, units: 'Pixels' },\r\n            left: { value: 0, units: 'Pixels' },\r\n            bottom: { value: h, units: 'Pixels' },\r\n            right: { value: w, units: 'Pixels' },\r\n        },\r\n        uOrder: 4,\r\n        vOrder: 4,\r\n        customEnvelopeWarp: {\r\n            meshPoints: [\r\n                { x: x0, y: y0 }, { x: x1, y: y0 }, { x: x2, y: y0 }, { x: x3, y: y0 },\r\n                { x: x0, y: y1 }, { x: x1, y: y1 }, { x: x2, y: y1 }, { x: x3, y: y1 },\r\n                { x: x0, y: y2 }, { x: x1, y: y2 }, { x: x2, y: y2 }, { x: x3, y: y2 },\r\n                { x: x0, y: y3 }, { x: x1, y: y3 }, { x: x2, y: y3 }, { x: x3, y: y3 },\r\n            ],\r\n        },\r\n    };\r\n}\r\naddHandler('SoLd', hasKey('placedLayer'), function (reader, target, left) {\r\n    if ((0, psdReader_1.readSignature)(reader) !== 'soLD')\r\n        throw new Error(\"Invalid SoLd type\");\r\n    var version = (0, psdReader_1.readInt32)(reader);\r\n    if (version !== 4 && version !== 5)\r\n        throw new Error(\"Invalid SoLd version\");\r\n    var desc = (0, descriptor_1.readVersionAndDescriptor)(reader, true);\r\n    // console.log('SoLd', require('util').inspect(desc, false, 99, true));\r\n    // console.log('SoLd.warp', require('util').inspect(desc.warp, false, 99, true));\r\n    // console.log('SoLd.quiltWarp', require('util').inspect(desc.quiltWarp, false, 99, true));\r\n    // desc.filterFX!.filterFXList[0].Fltr.puppetShapeList[0].meshBoundaryPath.pathComponents[0].SbpL[0]['Pts '] = [];\r\n    // console.log('read', require('util').inspect(desc.filterFX, false, 99, true));\r\n    // console.log('filterFXList[0]', require('util').inspect((desc as any).filterFX.filterFXList[0], false, 99, true));\r\n    // t = desc;\r\n    target.placedLayer = {\r\n        id: desc.Idnt,\r\n        placed: desc.placed,\r\n        type: placedLayerTypes[desc.Type],\r\n        pageNumber: desc.PgNm,\r\n        totalPages: desc.totalPages,\r\n        frameStep: (0, descriptor_1.frac)(desc.frameStep),\r\n        duration: (0, descriptor_1.frac)(desc.duration),\r\n        frameCount: desc.frameCount,\r\n        transform: desc.Trnf,\r\n        width: desc['Sz  '].Wdth,\r\n        height: desc['Sz  '].Hght,\r\n        resolution: (0, descriptor_1.parseUnits)(desc.Rslt),\r\n        warp: parseWarp((desc.quiltWarp || desc.warp)),\r\n    };\r\n    if (desc.nonAffineTransform && desc.nonAffineTransform.some(function (x, i) { return x !== desc.Trnf[i]; })) {\r\n        target.placedLayer.nonAffineTransform = desc.nonAffineTransform;\r\n    }\r\n    if (desc.Crop)\r\n        target.placedLayer.crop = desc.Crop;\r\n    if (desc.comp)\r\n        target.placedLayer.comp = desc.comp;\r\n    if (desc.compInfo) {\r\n        target.placedLayer.compInfo = {\r\n            compID: desc.compInfo.compID,\r\n            originalCompID: desc.compInfo.originalCompID,\r\n        };\r\n    }\r\n    if (desc.filterFX)\r\n        target.placedLayer.filter = parseFilterFX(desc.filterFX, reader);\r\n    // console.log('filter', require('util').inspect(target.placedLayer.filter, false, 99, true));\r\n    (0, psdReader_1.skipBytes)(reader, left()); // HACK\r\n}, function (writer, target) {\r\n    var _a, _b;\r\n    (0, psdWriter_1.writeSignature)(writer, 'soLD');\r\n    (0, psdWriter_1.writeInt32)(writer, 4); // version\r\n    var placed = target.placedLayer;\r\n    if (!placed.id || typeof placed.id !== 'string' || !/^[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$/.test(placed.id)) {\r\n        throw new Error('Placed layer ID must be in a GUID format (example: 20953ddb-9391-11ec-b4f1-c15674f50bc4)');\r\n    }\r\n    var desc = __assign(__assign({ Idnt: placed.id, placed: (_a = placed.placed) !== null && _a !== void 0 ? _a : placed.id, PgNm: placed.pageNumber || 1, totalPages: placed.totalPages || 1 }, (placed.crop ? { Crop: placed.crop } : {})), { frameStep: placed.frameStep || { numerator: 0, denominator: 600 }, duration: placed.duration || { numerator: 0, denominator: 600 }, frameCount: placed.frameCount || 0, Annt: 16, Type: placedLayerTypes.indexOf(placed.type), Trnf: placed.transform, nonAffineTransform: (_b = placed.nonAffineTransform) !== null && _b !== void 0 ? _b : placed.transform, \r\n        // quiltWarp: {} as any,\r\n        warp: encodeWarp(getWarpFromPlacedLayer(placed)), 'Sz  ': {\r\n            _name: '',\r\n            _classID: 'Pnt ',\r\n            Wdth: placed.width || 0,\r\n            Hght: placed.height || 0, // TODO: find size ?\r\n        }, Rslt: placed.resolution ? (0, descriptor_1.unitsValue)(placed.resolution, 'resolution') : { units: 'Density', value: 72 } });\r\n    if (placed.filter) {\r\n        desc.filterFX = {\r\n            _name: '',\r\n            _classID: 'filterFXStyle',\r\n            enab: placed.filter.enabled,\r\n            validAtPosition: placed.filter.validAtPosition,\r\n            filterMaskEnable: placed.filter.maskEnabled,\r\n            filterMaskLinked: placed.filter.maskLinked,\r\n            filterMaskExtendWithWhite: placed.filter.maskExtendWithWhite,\r\n            filterFXList: placed.filter.list.map(function (f) { return serializeFilterFXItem(f); }),\r\n        };\r\n    }\r\n    // TODO:\r\n    // desc.comp = -1;\r\n    // desc.compInfo = { _name: '', _classID: 'null', compID: -1, originalCompID: -1 } as any;\r\n    // desc.ClMg = {\r\n    // \t_name: '',\r\n    // \t_classID: 'ClMg',\r\n    // \tplacedLayerOCIOConversion: 'placedLayerOCIOConversion.placedLayerOCIOConvertEmbedded'\r\n    // } as any;\r\n    // if (JSON.stringify(t) !== JSON.stringify(desc)) {\r\n    // \tconsole.log('read', require('util').inspect(t, false, 99, true));\r\n    // \tconsole.log('write', require('util').inspect(desc, false, 99, true));\r\n    // \tconsole.error('DIFFERENT');\r\n    // \t// throw new Error('DIFFERENT');\r\n    // }\r\n    if (placed.warp && isQuiltWarp(placed.warp)) {\r\n        var quiltWarp = encodeWarp(placed.warp);\r\n        desc.quiltWarp = quiltWarp;\r\n        desc.warp = {\r\n            warpStyle: 'warpStyle.warpNone',\r\n            warpValue: quiltWarp.warpValue,\r\n            warpPerspective: quiltWarp.warpPerspective,\r\n            warpPerspectiveOther: quiltWarp.warpPerspectiveOther,\r\n            warpRotate: quiltWarp.warpRotate,\r\n            bounds: quiltWarp.bounds,\r\n            uOrder: quiltWarp.uOrder,\r\n            vOrder: quiltWarp.vOrder,\r\n        };\r\n    }\r\n    else {\r\n        delete desc.quiltWarp;\r\n    }\r\n    if (placed.comp)\r\n        desc.comp = placed.comp;\r\n    if (placed.compInfo)\r\n        desc.compInfo = placed.compInfo;\r\n    (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'null', desc, desc.quiltWarp ? 'quiltWarp' : 'warp');\r\n});\r\naddHandlerAlias('SoLE', 'SoLd');\r\naddHandler('fxrp', hasKey('referencePoint'), function (reader, target) {\r\n    target.referencePoint = {\r\n        x: (0, psdReader_1.readFloat64)(reader),\r\n        y: (0, psdReader_1.readFloat64)(reader),\r\n    };\r\n}, function (writer, target) {\r\n    (0, psdWriter_1.writeFloat64)(writer, target.referencePoint.x);\r\n    (0, psdWriter_1.writeFloat64)(writer, target.referencePoint.y);\r\n});\r\naddHandler('Lr16', function () { return false; }, function (reader, _target, _left, psd, imageResources) {\r\n    (0, psdReader_1.readLayerInfo)(reader, psd, imageResources);\r\n}, function (_writer, _target) {\r\n});\r\naddHandler('Lr32', function () { return false; }, function (reader, _target, _left, psd, imageResources) {\r\n    (0, psdReader_1.readLayerInfo)(reader, psd, imageResources);\r\n}, function (_writer, _target) {\r\n});\r\naddHandler('LMsk', hasKey('userMask'), function (reader, target) {\r\n    target.userMask = {\r\n        colorSpace: (0, psdReader_1.readColor)(reader),\r\n        opacity: (0, psdReader_1.readUint16)(reader) / 0xff,\r\n    };\r\n    var flag = (0, psdReader_1.readUint8)(reader);\r\n    if (flag !== 128)\r\n        throw new Error('Invalid flag value');\r\n    (0, psdReader_1.skipBytes)(reader, 1);\r\n}, function (writer, target) {\r\n    var userMask = target.userMask;\r\n    (0, psdWriter_1.writeColor)(writer, userMask.colorSpace);\r\n    (0, psdWriter_1.writeUint16)(writer, (0, helpers_1.clamp)(userMask.opacity, 0, 1) * 0xff);\r\n    (0, psdWriter_1.writeUint8)(writer, 128);\r\n    (0, psdWriter_1.writeZeros)(writer, 1);\r\n});\r\nif (helpers_1.MOCK_HANDLERS) {\r\n    addHandler('Patt', function (target) { return target._Patt !== undefined; }, function (reader, target, left) {\r\n        // console.log('additional info: Patt');\r\n        target._Patt = (0, psdReader_1.readBytes)(reader, left());\r\n    }, function (writer, target) { return false && (0, psdWriter_1.writeBytes)(writer, target._Patt); });\r\n}\r\nelse {\r\n    addHandler('Patt', // TODO: handle also Pat2 & Pat3\r\n    function (// TODO: handle also Pat2 & Pat3\r\n    target) { return !target; }, function (reader, target, left) {\r\n        if (!left())\r\n            return;\r\n        (0, psdReader_1.skipBytes)(reader, left());\r\n        return; // not supported yet\r\n        target;\r\n        psdReader_1.readPattern;\r\n        // if (!target.patterns) target.patterns = [];\r\n        // target.patterns.push(readPattern(reader));\r\n        // skipBytes(reader, left());\r\n    }, function (_writer, _target) {\r\n    });\r\n}\r\n/*\r\ninterface CAIDesc {\r\n    enab: boolean;\r\n    generationalGuid: string;\r\n}\r\n\r\naddHandler(\r\n    'CAI ', // content credentials ? something to do with generative tech\r\n    () => false,\r\n    (reader, _target, left) => {\r\n        const version = readUint32(reader); // 3\r\n        const desc = readVersionAndDescriptor(reader) as CAIDesc;\r\n        console.log('CAI', require('util').inspect(desc, false, 99, true));\r\n        console.log('CAI', { version });\r\n        console.log('CAI left', readBytes(reader, left())); // 8 bytes left, all zeroes\r\n    },\r\n    (_writer, _target) => {\r\n    },\r\n);\r\n*/\r\nif (helpers_1.MOCK_HANDLERS) {\r\n    addHandler('CAI ', function (target) { return target._CAI_ !== undefined; }, function (reader, target, left) {\r\n        target._CAI_ = (0, psdReader_1.readBytes)(reader, left());\r\n    }, function (writer, target) {\r\n        (0, psdWriter_1.writeBytes)(writer, target._CAI_);\r\n    });\r\n}\r\nif (helpers_1.MOCK_HANDLERS) {\r\n    addHandler('OCIO', // generative tech?\r\n    function (// generative tech?\r\n    target) { return target._OCIO !== undefined; }, function (reader, target, left) {\r\n        target._OCIO = (0, psdReader_1.readBytes)(reader, left());\r\n    }, function (writer, target) {\r\n        (0, psdWriter_1.writeBytes)(writer, target._OCIO);\r\n    });\r\n}\r\n// interface GenIDesc {\r\n// \tisUsingGenTech: number;\r\n// }\r\nif (helpers_1.MOCK_HANDLERS) {\r\n    addHandler('GenI', // generative tech\r\n    function (// generative tech\r\n    target) { return target._GenI !== undefined; }, function (reader, target, left) {\r\n        target._GenI = (0, psdReader_1.readBytes)(reader, left());\r\n        // const desc = readVersionAndDescriptor(reader) as GenIDesc;\r\n        // console.log('GenI', require('util').inspect(desc, false, 99, true));\r\n    }, function (writer, target) {\r\n        (0, psdWriter_1.writeBytes)(writer, target._GenI);\r\n    });\r\n}\r\nfunction readRect(reader) {\r\n    var top = (0, psdReader_1.readInt32)(reader);\r\n    var left = (0, psdReader_1.readInt32)(reader);\r\n    var bottom = (0, psdReader_1.readInt32)(reader);\r\n    var right = (0, psdReader_1.readInt32)(reader);\r\n    return { top: top, left: left, bottom: bottom, right: right };\r\n}\r\nfunction writeRect(writer, rect) {\r\n    (0, psdWriter_1.writeInt32)(writer, rect.top);\r\n    (0, psdWriter_1.writeInt32)(writer, rect.left);\r\n    (0, psdWriter_1.writeInt32)(writer, rect.bottom);\r\n    (0, psdWriter_1.writeInt32)(writer, rect.right);\r\n}\r\naddHandler('Anno', function (target) { return target.annotations !== undefined; }, function (reader, target, left) {\r\n    var major = (0, psdReader_1.readUint16)(reader);\r\n    var minor = (0, psdReader_1.readUint16)(reader);\r\n    if (major !== 2 || minor !== 1)\r\n        throw new Error('Invalid Anno version');\r\n    var count = (0, psdReader_1.readUint32)(reader);\r\n    var annotations = [];\r\n    for (var i = 0; i < count; i++) {\r\n        /*const length =*/ (0, psdReader_1.readUint32)(reader);\r\n        var type = (0, psdReader_1.readSignature)(reader);\r\n        var open_1 = !!(0, psdReader_1.readUint8)(reader);\r\n        /*const flags =*/ (0, psdReader_1.readUint8)(reader); // always 28\r\n        /*const optionalBlocks =*/ (0, psdReader_1.readUint16)(reader);\r\n        var iconLocation = readRect(reader);\r\n        var popupLocation = readRect(reader);\r\n        var color = (0, psdReader_1.readColor)(reader);\r\n        var author = (0, psdReader_1.readPascalString)(reader, 2);\r\n        var name_2 = (0, psdReader_1.readPascalString)(reader, 2);\r\n        var date = (0, psdReader_1.readPascalString)(reader, 2);\r\n        /*const contentLength =*/ (0, psdReader_1.readUint32)(reader);\r\n        /*const dataType =*/ (0, psdReader_1.readSignature)(reader);\r\n        var dataLength = (0, psdReader_1.readUint32)(reader);\r\n        var data = void 0;\r\n        if (type === 'txtA') {\r\n            if (dataLength >= 2 && (0, psdReader_1.readUint16)(reader) === 0xfeff) {\r\n                data = (0, psdReader_1.readUnicodeStringWithLength)(reader, (dataLength - 2) / 2);\r\n            }\r\n            else {\r\n                reader.offset -= 2;\r\n                data = (0, psdReader_1.readAsciiString)(reader, dataLength);\r\n            }\r\n            data = data.replace(/\\r/g, '\\n');\r\n        }\r\n        else if (type === 'sndA') {\r\n            data = (0, psdReader_1.readBytes)(reader, dataLength);\r\n        }\r\n        else {\r\n            throw new Error('Unknown annotation type');\r\n        }\r\n        annotations.push({\r\n            type: type === 'txtA' ? 'text' : 'sound',\r\n            open: open_1,\r\n            iconLocation: iconLocation,\r\n            popupLocation: popupLocation,\r\n            color: color,\r\n            author: author,\r\n            name: name_2,\r\n            date: date,\r\n            data: data,\r\n        });\r\n    }\r\n    target.annotations = annotations;\r\n    (0, psdReader_1.skipBytes)(reader, left());\r\n}, function (writer, target) {\r\n    var annotations = target.annotations;\r\n    (0, psdWriter_1.writeUint16)(writer, 2);\r\n    (0, psdWriter_1.writeUint16)(writer, 1);\r\n    (0, psdWriter_1.writeUint32)(writer, annotations.length);\r\n    for (var _i = 0, annotations_1 = annotations; _i < annotations_1.length; _i++) {\r\n        var annotation = annotations_1[_i];\r\n        var sound = annotation.type === 'sound';\r\n        if (sound && !(annotation.data instanceof Uint8Array))\r\n            throw new Error('Sound annotation data should be Uint8Array');\r\n        if (!sound && typeof annotation.data !== 'string')\r\n            throw new Error('Text annotation data should be string');\r\n        var lengthOffset = writer.offset;\r\n        (0, psdWriter_1.writeUint32)(writer, 0); // length\r\n        (0, psdWriter_1.writeSignature)(writer, sound ? 'sndA' : 'txtA');\r\n        (0, psdWriter_1.writeUint8)(writer, annotation.open ? 1 : 0);\r\n        (0, psdWriter_1.writeUint8)(writer, 28);\r\n        (0, psdWriter_1.writeUint16)(writer, 1);\r\n        writeRect(writer, annotation.iconLocation);\r\n        writeRect(writer, annotation.popupLocation);\r\n        (0, psdWriter_1.writeColor)(writer, annotation.color);\r\n        (0, psdWriter_1.writePascalString)(writer, annotation.author || '', 2);\r\n        (0, psdWriter_1.writePascalString)(writer, annotation.name || '', 2);\r\n        (0, psdWriter_1.writePascalString)(writer, annotation.date || '', 2);\r\n        var contentOffset = writer.offset;\r\n        (0, psdWriter_1.writeUint32)(writer, 0); // content length\r\n        (0, psdWriter_1.writeSignature)(writer, sound ? 'sndM' : 'txtC');\r\n        (0, psdWriter_1.writeUint32)(writer, 0); // data length\r\n        var dataOffset = writer.offset;\r\n        if (sound) {\r\n            (0, psdWriter_1.writeBytes)(writer, annotation.data);\r\n        }\r\n        else {\r\n            (0, psdWriter_1.writeUint16)(writer, 0xfeff); // unicode string indicator\r\n            var text = annotation.data.replace(/\\n/g, '\\r');\r\n            for (var i = 0; i < text.length; i++)\r\n                (0, psdWriter_1.writeUint16)(writer, text.charCodeAt(i));\r\n        }\r\n        writer.view.setUint32(lengthOffset, writer.offset - lengthOffset, false);\r\n        writer.view.setUint32(contentOffset, writer.offset - contentOffset, false);\r\n        writer.view.setUint32(dataOffset - 4, writer.offset - dataOffset, false);\r\n    }\r\n});\r\nfunction createLnkHandler(tag) {\r\n    addHandler(tag, function (target) {\r\n        var psd = target;\r\n        if (!psd.linkedFiles || !psd.linkedFiles.length)\r\n            return false;\r\n        if (tag === 'lnkE' && !psd.linkedFiles.some(function (f) { return f.linkedFile; }))\r\n            return false;\r\n        return true;\r\n    }, function (reader, target, left, _psd) {\r\n        var psd = target;\r\n        psd.linkedFiles = psd.linkedFiles || [];\r\n        while (left() > 8) {\r\n            var size = readLength64(reader);\r\n            var startOffset = reader.offset;\r\n            var type = (0, psdReader_1.readSignature)(reader);\r\n            // liFD - linked file data\r\n            // liFE - linked file external\r\n            // liFA - linked file alias\r\n            var version = (0, psdReader_1.readInt32)(reader);\r\n            var id = (0, psdReader_1.readPascalString)(reader, 1);\r\n            var name_3 = (0, psdReader_1.readUnicodeString)(reader);\r\n            var fileType = (0, psdReader_1.readSignature)(reader).trim(); // '    ' if empty\r\n            var fileCreator = (0, psdReader_1.readSignature)(reader).trim(); // '    ' or '\\0\\0\\0\\0' if empty\r\n            var dataSize = readLength64(reader);\r\n            var hasFileOpenDescriptor = (0, psdReader_1.readUint8)(reader);\r\n            var fileOpenDescriptor = hasFileOpenDescriptor ? (0, descriptor_1.readVersionAndDescriptor)(reader) : undefined;\r\n            var linkedFileDescriptor = type === 'liFE' ? (0, descriptor_1.readVersionAndDescriptor)(reader) : undefined;\r\n            var file = { id: id, name: name_3 };\r\n            if (fileType)\r\n                file.type = fileType;\r\n            if (fileCreator)\r\n                file.creator = fileCreator;\r\n            if (fileOpenDescriptor) {\r\n                file.descriptor = {\r\n                    compInfo: {\r\n                        compID: fileOpenDescriptor.compInfo.compID,\r\n                        originalCompID: fileOpenDescriptor.compInfo.originalCompID,\r\n                    }\r\n                };\r\n            }\r\n            if (type === 'liFE' && version > 3) {\r\n                var year = (0, psdReader_1.readInt32)(reader);\r\n                var month = (0, psdReader_1.readUint8)(reader);\r\n                var day = (0, psdReader_1.readUint8)(reader);\r\n                var hour = (0, psdReader_1.readUint8)(reader);\r\n                var minute = (0, psdReader_1.readUint8)(reader);\r\n                var seconds = (0, psdReader_1.readFloat64)(reader);\r\n                var wholeSeconds = Math.floor(seconds);\r\n                var ms = (seconds - wholeSeconds) * 1000;\r\n                file.time = (new Date(Date.UTC(year, month, day, hour, minute, wholeSeconds, ms))).toISOString();\r\n            }\r\n            var fileSize = type === 'liFE' ? readLength64(reader) : 0;\r\n            if (type === 'liFA')\r\n                (0, psdReader_1.skipBytes)(reader, 8);\r\n            if (type === 'liFD')\r\n                file.data = (0, psdReader_1.readBytes)(reader, dataSize); // seems to be a typo in docs\r\n            if (version >= 5)\r\n                file.childDocumentID = (0, psdReader_1.readUnicodeString)(reader);\r\n            if (version >= 6)\r\n                file.assetModTime = (0, psdReader_1.readFloat64)(reader);\r\n            if (version >= 7)\r\n                file.assetLockedState = (0, psdReader_1.readUint8)(reader);\r\n            if (type === 'liFE' && version === 2)\r\n                file.data = (0, psdReader_1.readBytes)(reader, fileSize);\r\n            if (reader.skipLinkedFilesData)\r\n                file.data = undefined;\r\n            if (tag === 'lnkE') {\r\n                file.linkedFile = {\r\n                    fileSize: fileSize,\r\n                    name: (linkedFileDescriptor === null || linkedFileDescriptor === void 0 ? void 0 : linkedFileDescriptor['Nm  ']) || '',\r\n                    fullPath: (linkedFileDescriptor === null || linkedFileDescriptor === void 0 ? void 0 : linkedFileDescriptor.fullPath) || '',\r\n                    originalPath: (linkedFileDescriptor === null || linkedFileDescriptor === void 0 ? void 0 : linkedFileDescriptor.originalPath) || '',\r\n                    relativePath: (linkedFileDescriptor === null || linkedFileDescriptor === void 0 ? void 0 : linkedFileDescriptor.relPath) || '',\r\n                };\r\n            }\r\n            psd.linkedFiles.push(file);\r\n            while (size % 4)\r\n                size++;\r\n            reader.offset = startOffset + size;\r\n        }\r\n        (0, psdReader_1.skipBytes)(reader, left()); // ?\r\n    }, function (writer, target) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\r\n        var psd = target;\r\n        for (var _i = 0, _k = psd.linkedFiles; _i < _k.length; _i++) {\r\n            var file = _k[_i];\r\n            if ((tag === 'lnkE') !== !!file.linkedFile)\r\n                continue;\r\n            var version = 2;\r\n            if (file.assetLockedState != null)\r\n                version = 7;\r\n            else if (file.assetModTime != null)\r\n                version = 6;\r\n            else if (file.childDocumentID != null)\r\n                version = 5;\r\n            else if (tag == 'lnkE')\r\n                version = 3;\r\n            writeLength64(writer, 0);\r\n            var sizeOffset = writer.offset;\r\n            (0, psdWriter_1.writeSignature)(writer, (tag === 'lnkE') ? 'liFE' : (file.data ? 'liFD' : 'liFA'));\r\n            (0, psdWriter_1.writeInt32)(writer, version);\r\n            if (!file.id || typeof file.id !== 'string' || !/^[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$/.test(file.id)) {\r\n                throw new Error('Linked file ID must be in a GUID format (example: 20953ddb-9391-11ec-b4f1-c15674f50bc4)');\r\n            }\r\n            (0, psdWriter_1.writePascalString)(writer, file.id, 1);\r\n            (0, psdWriter_1.writeUnicodeStringWithPadding)(writer, file.name || '');\r\n            (0, psdWriter_1.writeSignature)(writer, file.type ? \"\".concat(file.type, \"    \").substring(0, 4) : '    ');\r\n            (0, psdWriter_1.writeSignature)(writer, file.creator ? \"\".concat(file.creator, \"    \").substring(0, 4) : '\\0\\0\\0\\0');\r\n            writeLength64(writer, file.data ? file.data.byteLength : 0);\r\n            if (file.descriptor && file.descriptor.compInfo) {\r\n                var desc = {\r\n                    compInfo: {\r\n                        compID: file.descriptor.compInfo.compID,\r\n                        originalCompID: file.descriptor.compInfo.originalCompID,\r\n                    },\r\n                };\r\n                (0, psdWriter_1.writeUint8)(writer, 1);\r\n                (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'null', desc);\r\n            }\r\n            else {\r\n                (0, psdWriter_1.writeUint8)(writer, 0);\r\n            }\r\n            if (tag === 'lnkE') {\r\n                var desc = {\r\n                    descVersion: 2,\r\n                    'Nm  ': (_b = (_a = file.linkedFile) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : '',\r\n                    fullPath: (_d = (_c = file.linkedFile) === null || _c === void 0 ? void 0 : _c.fullPath) !== null && _d !== void 0 ? _d : '',\r\n                    originalPath: (_f = (_e = file.linkedFile) === null || _e === void 0 ? void 0 : _e.originalPath) !== null && _f !== void 0 ? _f : '',\r\n                    relPath: (_h = (_g = file.linkedFile) === null || _g === void 0 ? void 0 : _g.relativePath) !== null && _h !== void 0 ? _h : '',\r\n                };\r\n                (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'ExternalFileLink', desc);\r\n                var time = file.time ? new Date(file.time) : new Date();\r\n                (0, psdWriter_1.writeInt32)(writer, time.getUTCFullYear());\r\n                (0, psdWriter_1.writeUint8)(writer, time.getUTCMonth());\r\n                (0, psdWriter_1.writeUint8)(writer, time.getUTCDate());\r\n                (0, psdWriter_1.writeUint8)(writer, time.getUTCHours());\r\n                (0, psdWriter_1.writeUint8)(writer, time.getUTCMinutes());\r\n                (0, psdWriter_1.writeFloat64)(writer, time.getUTCSeconds() + time.getUTCMilliseconds() / 1000);\r\n            }\r\n            if (file.data) {\r\n                (0, psdWriter_1.writeBytes)(writer, file.data);\r\n            }\r\n            else {\r\n                writeLength64(writer, ((_j = file.linkedFile) === null || _j === void 0 ? void 0 : _j.fileSize) || 0);\r\n            }\r\n            if (version >= 5)\r\n                (0, psdWriter_1.writeUnicodeStringWithPadding)(writer, file.childDocumentID || '');\r\n            if (version >= 6)\r\n                (0, psdWriter_1.writeFloat64)(writer, file.assetModTime || 0);\r\n            if (version >= 7)\r\n                (0, psdWriter_1.writeUint8)(writer, file.assetLockedState || 0);\r\n            var size = writer.offset - sizeOffset;\r\n            writer.view.setUint32(sizeOffset - 4, size, false); // write size\r\n            while (size % 4) {\r\n                size++;\r\n                (0, psdWriter_1.writeUint8)(writer, 0);\r\n            }\r\n        }\r\n    });\r\n}\r\ncreateLnkHandler('lnk2');\r\ncreateLnkHandler('lnkE');\r\naddHandlerAlias('lnkD', 'lnk2');\r\naddHandlerAlias('lnk3', 'lnk2');\r\naddHandler('pths', hasKey('pathList'), function (reader, target) {\r\n    var desc = (0, descriptor_1.readVersionAndDescriptor)(reader, true);\r\n    // console.log(require('util').inspect(desc, false, 99, true));\r\n    // if (options.throwForMissingFeatures && desc?.pathList?.length) throw new Error('non-empty pathList in `pths`');\r\n    desc;\r\n    target.pathList = []; // TODO: read paths\r\n}, function (writer, _target) {\r\n    var desc = {\r\n        pathList: [], // TODO: write paths\r\n    };\r\n    (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'pathsDataClass', desc);\r\n});\r\naddHandler('lyvr', hasKey('version'), function (reader, target) { return target.version = (0, psdReader_1.readUint32)(reader); }, function (writer, target) { return (0, psdWriter_1.writeUint32)(writer, target.version); });\r\naddHandler('lfxs', function () { return false; }, // TODO: not sure when we actually need to write this section\r\n// NOTE: this might be insufficient\r\n// target => target.effects !== undefined && (\r\n// \t!!target.effects.dropShadow?.some(e => e.choke) ||\r\n// \t!!target.effects.innerShadow?.some(e => e.choke) ||\r\n// \t!!target.effects.outerGlow?.choke ||\r\n// \t!!target.effects.innerGlow?.choke\r\n// ),\r\nfunction (reader, target, left) {\r\n    var version = (0, psdReader_1.readUint32)(reader);\r\n    if (version !== 0)\r\n        throw new Error(\"Invalid lfxs version\");\r\n    var desc = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n    target.effects = (0, descriptor_1.parseEffects)(desc, !!reader.logMissingFeatures);\r\n    (0, psdReader_1.skipBytes)(reader, left());\r\n}, function (writer, target, _, options) {\r\n    var desc = (0, descriptor_1.serializeEffects)(target.effects, !!options.logMissingFeatures, true);\r\n    (0, psdWriter_1.writeUint32)(writer, 0); // version\r\n    (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'null', desc);\r\n});\r\nfunction adjustmentType(type) {\r\n    return function (target) { return !!target.adjustment && target.adjustment.type === type; };\r\n}\r\naddHandler('brit', adjustmentType('brightness/contrast'), function (reader, target, left) {\r\n    if (!target.adjustment) { // ignore if got one from CgEd block\r\n        target.adjustment = {\r\n            type: 'brightness/contrast',\r\n            brightness: (0, psdReader_1.readInt16)(reader),\r\n            contrast: (0, psdReader_1.readInt16)(reader),\r\n            meanValue: (0, psdReader_1.readInt16)(reader),\r\n            labColorOnly: !!(0, psdReader_1.readUint8)(reader),\r\n            useLegacy: true,\r\n        };\r\n    }\r\n    (0, psdReader_1.skipBytes)(reader, left());\r\n}, function (writer, target) {\r\n    var _a;\r\n    var info = target.adjustment;\r\n    (0, psdWriter_1.writeInt16)(writer, info.brightness || 0);\r\n    (0, psdWriter_1.writeInt16)(writer, info.contrast || 0);\r\n    (0, psdWriter_1.writeInt16)(writer, (_a = info.meanValue) !== null && _a !== void 0 ? _a : 127);\r\n    (0, psdWriter_1.writeUint8)(writer, info.labColorOnly ? 1 : 0);\r\n    (0, psdWriter_1.writeZeros)(writer, 1);\r\n});\r\nfunction readLevelsChannel(reader) {\r\n    var shadowInput = (0, psdReader_1.readInt16)(reader);\r\n    var highlightInput = (0, psdReader_1.readInt16)(reader);\r\n    var shadowOutput = (0, psdReader_1.readInt16)(reader);\r\n    var highlightOutput = (0, psdReader_1.readInt16)(reader);\r\n    var midtoneInput = (0, psdReader_1.readInt16)(reader) / 100;\r\n    return { shadowInput: shadowInput, highlightInput: highlightInput, shadowOutput: shadowOutput, highlightOutput: highlightOutput, midtoneInput: midtoneInput };\r\n}\r\nfunction writeLevelsChannel(writer, channel) {\r\n    (0, psdWriter_1.writeInt16)(writer, channel.shadowInput);\r\n    (0, psdWriter_1.writeInt16)(writer, channel.highlightInput);\r\n    (0, psdWriter_1.writeInt16)(writer, channel.shadowOutput);\r\n    (0, psdWriter_1.writeInt16)(writer, channel.highlightOutput);\r\n    (0, psdWriter_1.writeInt16)(writer, Math.round(channel.midtoneInput * 100));\r\n}\r\naddHandler('levl', adjustmentType('levels'), function (reader, target, left) {\r\n    if ((0, psdReader_1.readUint16)(reader) !== 2)\r\n        throw new Error('Invalid levl version');\r\n    target.adjustment = __assign(__assign({}, target.adjustment), { type: 'levels', rgb: readLevelsChannel(reader), red: readLevelsChannel(reader), green: readLevelsChannel(reader), blue: readLevelsChannel(reader) });\r\n    (0, psdReader_1.skipBytes)(reader, left());\r\n}, function (writer, target) {\r\n    var info = target.adjustment;\r\n    var defaultChannel = {\r\n        shadowInput: 0,\r\n        highlightInput: 255,\r\n        shadowOutput: 0,\r\n        highlightOutput: 255,\r\n        midtoneInput: 1,\r\n    };\r\n    (0, psdWriter_1.writeUint16)(writer, 2); // version\r\n    writeLevelsChannel(writer, info.rgb || defaultChannel);\r\n    writeLevelsChannel(writer, info.red || defaultChannel);\r\n    writeLevelsChannel(writer, info.blue || defaultChannel);\r\n    writeLevelsChannel(writer, info.green || defaultChannel);\r\n    for (var i = 0; i < 59; i++)\r\n        writeLevelsChannel(writer, defaultChannel);\r\n});\r\nfunction readCurveChannel(reader) {\r\n    var nodes = (0, psdReader_1.readUint16)(reader);\r\n    var channel = [];\r\n    for (var j = 0; j < nodes; j++) {\r\n        var output = (0, psdReader_1.readInt16)(reader);\r\n        var input = (0, psdReader_1.readInt16)(reader);\r\n        channel.push({ input: input, output: output });\r\n    }\r\n    return channel;\r\n}\r\nfunction writeCurveChannel(writer, channel) {\r\n    (0, psdWriter_1.writeUint16)(writer, channel.length);\r\n    for (var _i = 0, channel_1 = channel; _i < channel_1.length; _i++) {\r\n        var n = channel_1[_i];\r\n        (0, psdWriter_1.writeUint16)(writer, n.output);\r\n        (0, psdWriter_1.writeUint16)(writer, n.input);\r\n    }\r\n}\r\naddHandler('curv', adjustmentType('curves'), function (reader, target, left) {\r\n    (0, psdReader_1.readUint8)(reader);\r\n    if ((0, psdReader_1.readUint16)(reader) !== 1)\r\n        throw new Error('Invalid curv version');\r\n    (0, psdReader_1.readUint16)(reader);\r\n    var channels = (0, psdReader_1.readUint16)(reader);\r\n    var info = { type: 'curves' };\r\n    if (channels & 1)\r\n        info.rgb = readCurveChannel(reader);\r\n    if (channels & 2)\r\n        info.red = readCurveChannel(reader);\r\n    if (channels & 4)\r\n        info.green = readCurveChannel(reader);\r\n    if (channels & 8)\r\n        info.blue = readCurveChannel(reader);\r\n    target.adjustment = __assign(__assign({}, target.adjustment), info);\r\n    // ignoring, duplicate information\r\n    // checkSignature(reader, 'Crv ');\r\n    // const cVersion = readUint16(reader);\r\n    // readUint16(reader);\r\n    // const channelCount = readUint16(reader);\r\n    // for (let i = 0; i < channelCount; i++) {\r\n    // \tconst index = readUint16(reader);\r\n    // \tconst nodes = readUint16(reader);\r\n    // \tfor (let j = 0; j < nodes; j++) {\r\n    // \t\tconst output = readInt16(reader);\r\n    // \t\tconst input = readInt16(reader);\r\n    // \t}\r\n    // }\r\n    (0, psdReader_1.skipBytes)(reader, left());\r\n}, function (writer, target) {\r\n    var info = target.adjustment;\r\n    var rgb = info.rgb, red = info.red, green = info.green, blue = info.blue;\r\n    var channels = 0;\r\n    var channelCount = 0;\r\n    if (rgb && rgb.length) {\r\n        channels |= 1;\r\n        channelCount++;\r\n    }\r\n    if (red && red.length) {\r\n        channels |= 2;\r\n        channelCount++;\r\n    }\r\n    if (green && green.length) {\r\n        channels |= 4;\r\n        channelCount++;\r\n    }\r\n    if (blue && blue.length) {\r\n        channels |= 8;\r\n        channelCount++;\r\n    }\r\n    (0, psdWriter_1.writeUint8)(writer, 0);\r\n    (0, psdWriter_1.writeUint16)(writer, 1); // version\r\n    (0, psdWriter_1.writeUint16)(writer, 0);\r\n    (0, psdWriter_1.writeUint16)(writer, channels);\r\n    if (rgb && rgb.length)\r\n        writeCurveChannel(writer, rgb);\r\n    if (red && red.length)\r\n        writeCurveChannel(writer, red);\r\n    if (green && green.length)\r\n        writeCurveChannel(writer, green);\r\n    if (blue && blue.length)\r\n        writeCurveChannel(writer, blue);\r\n    (0, psdWriter_1.writeSignature)(writer, 'Crv ');\r\n    (0, psdWriter_1.writeUint16)(writer, 4); // version\r\n    (0, psdWriter_1.writeUint16)(writer, 0);\r\n    (0, psdWriter_1.writeUint16)(writer, channelCount);\r\n    if (rgb && rgb.length) {\r\n        (0, psdWriter_1.writeUint16)(writer, 0);\r\n        writeCurveChannel(writer, rgb);\r\n    }\r\n    if (red && red.length) {\r\n        (0, psdWriter_1.writeUint16)(writer, 1);\r\n        writeCurveChannel(writer, red);\r\n    }\r\n    if (green && green.length) {\r\n        (0, psdWriter_1.writeUint16)(writer, 2);\r\n        writeCurveChannel(writer, green);\r\n    }\r\n    if (blue && blue.length) {\r\n        (0, psdWriter_1.writeUint16)(writer, 3);\r\n        writeCurveChannel(writer, blue);\r\n    }\r\n    (0, psdWriter_1.writeZeros)(writer, 2);\r\n});\r\naddHandler('expA', adjustmentType('exposure'), function (reader, target, left) {\r\n    if ((0, psdReader_1.readUint16)(reader) !== 1)\r\n        throw new Error('Invalid expA version');\r\n    target.adjustment = __assign(__assign({}, target.adjustment), { type: 'exposure', exposure: (0, psdReader_1.readFloat32)(reader), offset: (0, psdReader_1.readFloat32)(reader), gamma: (0, psdReader_1.readFloat32)(reader) });\r\n    (0, psdReader_1.skipBytes)(reader, left());\r\n}, function (writer, target) {\r\n    var info = target.adjustment;\r\n    (0, psdWriter_1.writeUint16)(writer, 1); // version\r\n    (0, psdWriter_1.writeFloat32)(writer, info.exposure);\r\n    (0, psdWriter_1.writeFloat32)(writer, info.offset);\r\n    (0, psdWriter_1.writeFloat32)(writer, info.gamma);\r\n    (0, psdWriter_1.writeZeros)(writer, 2);\r\n});\r\naddHandler('vibA', adjustmentType('vibrance'), function (reader, target, left) {\r\n    var desc = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n    target.adjustment = { type: 'vibrance' };\r\n    if (desc.vibrance !== undefined)\r\n        target.adjustment.vibrance = desc.vibrance;\r\n    if (desc.Strt !== undefined)\r\n        target.adjustment.saturation = desc.Strt;\r\n    (0, psdReader_1.skipBytes)(reader, left());\r\n}, function (writer, target) {\r\n    var info = target.adjustment;\r\n    var desc = {};\r\n    if (info.vibrance !== undefined)\r\n        desc.vibrance = info.vibrance;\r\n    if (info.saturation !== undefined)\r\n        desc.Strt = info.saturation;\r\n    (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'null', desc);\r\n});\r\nfunction readHueChannel(reader) {\r\n    return {\r\n        a: (0, psdReader_1.readInt16)(reader),\r\n        b: (0, psdReader_1.readInt16)(reader),\r\n        c: (0, psdReader_1.readInt16)(reader),\r\n        d: (0, psdReader_1.readInt16)(reader),\r\n        hue: (0, psdReader_1.readInt16)(reader),\r\n        saturation: (0, psdReader_1.readInt16)(reader),\r\n        lightness: (0, psdReader_1.readInt16)(reader),\r\n    };\r\n}\r\nfunction writeHueChannel(writer, channel) {\r\n    var c = channel || {};\r\n    (0, psdWriter_1.writeInt16)(writer, c.a || 0);\r\n    (0, psdWriter_1.writeInt16)(writer, c.b || 0);\r\n    (0, psdWriter_1.writeInt16)(writer, c.c || 0);\r\n    (0, psdWriter_1.writeInt16)(writer, c.d || 0);\r\n    (0, psdWriter_1.writeInt16)(writer, c.hue || 0);\r\n    (0, psdWriter_1.writeInt16)(writer, c.saturation || 0);\r\n    (0, psdWriter_1.writeInt16)(writer, c.lightness || 0);\r\n}\r\naddHandler('hue2', adjustmentType('hue/saturation'), function (reader, target, left) {\r\n    if ((0, psdReader_1.readUint16)(reader) !== 2)\r\n        throw new Error('Invalid hue2 version');\r\n    target.adjustment = __assign(__assign({}, target.adjustment), { type: 'hue/saturation', master: readHueChannel(reader), reds: readHueChannel(reader), yellows: readHueChannel(reader), greens: readHueChannel(reader), cyans: readHueChannel(reader), blues: readHueChannel(reader), magentas: readHueChannel(reader) });\r\n    (0, psdReader_1.skipBytes)(reader, left());\r\n}, function (writer, target) {\r\n    var info = target.adjustment;\r\n    (0, psdWriter_1.writeUint16)(writer, 2); // version\r\n    writeHueChannel(writer, info.master);\r\n    writeHueChannel(writer, info.reds);\r\n    writeHueChannel(writer, info.yellows);\r\n    writeHueChannel(writer, info.greens);\r\n    writeHueChannel(writer, info.cyans);\r\n    writeHueChannel(writer, info.blues);\r\n    writeHueChannel(writer, info.magentas);\r\n});\r\nfunction readColorBalance(reader) {\r\n    return {\r\n        cyanRed: (0, psdReader_1.readInt16)(reader),\r\n        magentaGreen: (0, psdReader_1.readInt16)(reader),\r\n        yellowBlue: (0, psdReader_1.readInt16)(reader),\r\n    };\r\n}\r\nfunction writeColorBalance(writer, value) {\r\n    (0, psdWriter_1.writeInt16)(writer, value.cyanRed || 0);\r\n    (0, psdWriter_1.writeInt16)(writer, value.magentaGreen || 0);\r\n    (0, psdWriter_1.writeInt16)(writer, value.yellowBlue || 0);\r\n}\r\naddHandler('blnc', adjustmentType('color balance'), function (reader, target, left) {\r\n    target.adjustment = {\r\n        type: 'color balance',\r\n        shadows: readColorBalance(reader),\r\n        midtones: readColorBalance(reader),\r\n        highlights: readColorBalance(reader),\r\n        preserveLuminosity: !!(0, psdReader_1.readUint8)(reader),\r\n    };\r\n    (0, psdReader_1.skipBytes)(reader, left());\r\n}, function (writer, target) {\r\n    var info = target.adjustment;\r\n    writeColorBalance(writer, info.shadows || {});\r\n    writeColorBalance(writer, info.midtones || {});\r\n    writeColorBalance(writer, info.highlights || {});\r\n    (0, psdWriter_1.writeUint8)(writer, info.preserveLuminosity ? 1 : 0);\r\n    (0, psdWriter_1.writeZeros)(writer, 1);\r\n});\r\naddHandler('blwh', adjustmentType('black & white'), function (reader, target, left) {\r\n    var desc = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n    target.adjustment = {\r\n        type: 'black & white',\r\n        reds: desc['Rd  '],\r\n        yellows: desc.Yllw,\r\n        greens: desc['Grn '],\r\n        cyans: desc['Cyn '],\r\n        blues: desc['Bl  '],\r\n        magentas: desc.Mgnt,\r\n        useTint: !!desc.useTint,\r\n        presetKind: desc.bwPresetKind,\r\n        presetFileName: desc.blackAndWhitePresetFileName,\r\n    };\r\n    if (desc.tintColor !== undefined)\r\n        target.adjustment.tintColor = (0, descriptor_1.parseColor)(desc.tintColor);\r\n    (0, psdReader_1.skipBytes)(reader, left());\r\n}, function (writer, target) {\r\n    var info = target.adjustment;\r\n    var desc = {\r\n        'Rd  ': info.reds || 0,\r\n        Yllw: info.yellows || 0,\r\n        'Grn ': info.greens || 0,\r\n        'Cyn ': info.cyans || 0,\r\n        'Bl  ': info.blues || 0,\r\n        Mgnt: info.magentas || 0,\r\n        useTint: !!info.useTint,\r\n        tintColor: (0, descriptor_1.serializeColor)(info.tintColor),\r\n        bwPresetKind: info.presetKind || 0,\r\n        blackAndWhitePresetFileName: info.presetFileName || '',\r\n    };\r\n    (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'null', desc);\r\n});\r\naddHandler('phfl', adjustmentType('photo filter'), function (reader, target, left) {\r\n    var version = (0, psdReader_1.readUint16)(reader);\r\n    if (version !== 2 && version !== 3)\r\n        throw new Error('Invalid phfl version');\r\n    var color;\r\n    if (version === 2) {\r\n        color = (0, psdReader_1.readColor)(reader);\r\n    }\r\n    else { // version 3\r\n        // TODO: test this, this is probably wrong\r\n        color = {\r\n            l: (0, psdReader_1.readInt32)(reader) / 100,\r\n            a: (0, psdReader_1.readInt32)(reader) / 100,\r\n            b: (0, psdReader_1.readInt32)(reader) / 100,\r\n        };\r\n    }\r\n    target.adjustment = {\r\n        type: 'photo filter',\r\n        color: color,\r\n        density: (0, psdReader_1.readUint32)(reader) / 100,\r\n        preserveLuminosity: !!(0, psdReader_1.readUint8)(reader),\r\n    };\r\n    (0, psdReader_1.skipBytes)(reader, left());\r\n}, function (writer, target) {\r\n    var info = target.adjustment;\r\n    (0, psdWriter_1.writeUint16)(writer, 2); // version\r\n    (0, psdWriter_1.writeColor)(writer, info.color || { l: 0, a: 0, b: 0 });\r\n    (0, psdWriter_1.writeUint32)(writer, (info.density || 0) * 100);\r\n    (0, psdWriter_1.writeUint8)(writer, info.preserveLuminosity ? 1 : 0);\r\n    (0, psdWriter_1.writeZeros)(writer, 3);\r\n});\r\nfunction readMixrChannel(reader) {\r\n    var red = (0, psdReader_1.readInt16)(reader);\r\n    var green = (0, psdReader_1.readInt16)(reader);\r\n    var blue = (0, psdReader_1.readInt16)(reader);\r\n    (0, psdReader_1.skipBytes)(reader, 2);\r\n    var constant = (0, psdReader_1.readInt16)(reader);\r\n    return { red: red, green: green, blue: blue, constant: constant };\r\n}\r\nfunction writeMixrChannel(writer, channel) {\r\n    var c = channel || {};\r\n    (0, psdWriter_1.writeInt16)(writer, c.red);\r\n    (0, psdWriter_1.writeInt16)(writer, c.green);\r\n    (0, psdWriter_1.writeInt16)(writer, c.blue);\r\n    (0, psdWriter_1.writeZeros)(writer, 2);\r\n    (0, psdWriter_1.writeInt16)(writer, c.constant);\r\n}\r\naddHandler('mixr', adjustmentType('channel mixer'), function (reader, target, left) {\r\n    if ((0, psdReader_1.readUint16)(reader) !== 1)\r\n        throw new Error('Invalid mixr version');\r\n    var adjustment = target.adjustment = __assign(__assign({}, target.adjustment), { type: 'channel mixer', monochrome: !!(0, psdReader_1.readUint16)(reader) });\r\n    if (!adjustment.monochrome) {\r\n        adjustment.red = readMixrChannel(reader);\r\n        adjustment.green = readMixrChannel(reader);\r\n        adjustment.blue = readMixrChannel(reader);\r\n    }\r\n    adjustment.gray = readMixrChannel(reader);\r\n    (0, psdReader_1.skipBytes)(reader, left());\r\n}, function (writer, target) {\r\n    var info = target.adjustment;\r\n    (0, psdWriter_1.writeUint16)(writer, 1); // version\r\n    (0, psdWriter_1.writeUint16)(writer, info.monochrome ? 1 : 0);\r\n    if (info.monochrome) {\r\n        writeMixrChannel(writer, info.gray);\r\n        (0, psdWriter_1.writeZeros)(writer, 3 * 5 * 2);\r\n    }\r\n    else {\r\n        writeMixrChannel(writer, info.red);\r\n        writeMixrChannel(writer, info.green);\r\n        writeMixrChannel(writer, info.blue);\r\n        writeMixrChannel(writer, info.gray);\r\n    }\r\n});\r\nvar colorLookupType = (0, helpers_1.createEnum)('colorLookupType', '3DLUT', {\r\n    '3dlut': '3DLUT',\r\n    abstractProfile: 'abstractProfile',\r\n    deviceLinkProfile: 'deviceLinkProfile',\r\n});\r\nvar LUTFormatType = (0, helpers_1.createEnum)('LUTFormatType', 'look', {\r\n    look: 'LUTFormatLOOK',\r\n    cube: 'LUTFormatCUBE',\r\n    '3dl': 'LUTFormat3DL',\r\n});\r\nvar colorLookupOrder = (0, helpers_1.createEnum)('colorLookupOrder', 'rgb', {\r\n    rgb: 'rgbOrder',\r\n    bgr: 'bgrOrder',\r\n});\r\naddHandler('clrL', adjustmentType('color lookup'), function (reader, target, left) {\r\n    if ((0, psdReader_1.readUint16)(reader) !== 1)\r\n        throw new Error('Invalid clrL version');\r\n    var desc = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n    target.adjustment = { type: 'color lookup' };\r\n    var info = target.adjustment;\r\n    if (desc.lookupType !== undefined)\r\n        info.lookupType = colorLookupType.decode(desc.lookupType);\r\n    if (desc['Nm  '] !== undefined)\r\n        info.name = desc['Nm  '];\r\n    if (desc.Dthr !== undefined)\r\n        info.dither = desc.Dthr;\r\n    if (desc.profile !== undefined)\r\n        info.profile = desc.profile;\r\n    if (desc.LUTFormat !== undefined)\r\n        info.lutFormat = LUTFormatType.decode(desc.LUTFormat);\r\n    if (desc.dataOrder !== undefined)\r\n        info.dataOrder = colorLookupOrder.decode(desc.dataOrder);\r\n    if (desc.tableOrder !== undefined)\r\n        info.tableOrder = colorLookupOrder.decode(desc.tableOrder);\r\n    if (desc.LUT3DFileData !== undefined)\r\n        info.lut3DFileData = desc.LUT3DFileData;\r\n    if (desc.LUT3DFileName !== undefined)\r\n        info.lut3DFileName = desc.LUT3DFileName;\r\n    (0, psdReader_1.skipBytes)(reader, left());\r\n}, function (writer, target) {\r\n    var info = target.adjustment;\r\n    var desc = {};\r\n    if (info.lookupType !== undefined)\r\n        desc.lookupType = colorLookupType.encode(info.lookupType);\r\n    if (info.name !== undefined)\r\n        desc['Nm  '] = info.name;\r\n    if (info.dither !== undefined)\r\n        desc.Dthr = info.dither;\r\n    if (info.profile !== undefined)\r\n        desc.profile = info.profile;\r\n    if (info.lutFormat !== undefined)\r\n        desc.LUTFormat = LUTFormatType.encode(info.lutFormat);\r\n    if (info.dataOrder !== undefined)\r\n        desc.dataOrder = colorLookupOrder.encode(info.dataOrder);\r\n    if (info.tableOrder !== undefined)\r\n        desc.tableOrder = colorLookupOrder.encode(info.tableOrder);\r\n    if (info.lut3DFileData !== undefined)\r\n        desc.LUT3DFileData = info.lut3DFileData;\r\n    if (info.lut3DFileName !== undefined)\r\n        desc.LUT3DFileName = info.lut3DFileName;\r\n    (0, psdWriter_1.writeUint16)(writer, 1); // version\r\n    (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'null', desc);\r\n});\r\naddHandler('nvrt', adjustmentType('invert'), function (reader, target, left) {\r\n    target.adjustment = { type: 'invert' };\r\n    (0, psdReader_1.skipBytes)(reader, left());\r\n}, function () {\r\n    // nothing to write here\r\n});\r\naddHandler('post', adjustmentType('posterize'), function (reader, target, left) {\r\n    target.adjustment = {\r\n        type: 'posterize',\r\n        levels: (0, psdReader_1.readUint16)(reader),\r\n    };\r\n    (0, psdReader_1.skipBytes)(reader, left());\r\n}, function (writer, target) {\r\n    var _a;\r\n    var info = target.adjustment;\r\n    (0, psdWriter_1.writeUint16)(writer, (_a = info.levels) !== null && _a !== void 0 ? _a : 4);\r\n    (0, psdWriter_1.writeZeros)(writer, 2);\r\n});\r\naddHandler('thrs', adjustmentType('threshold'), function (reader, target, left) {\r\n    target.adjustment = {\r\n        type: 'threshold',\r\n        level: (0, psdReader_1.readUint16)(reader),\r\n    };\r\n    (0, psdReader_1.skipBytes)(reader, left());\r\n}, function (writer, target) {\r\n    var _a;\r\n    var info = target.adjustment;\r\n    (0, psdWriter_1.writeUint16)(writer, (_a = info.level) !== null && _a !== void 0 ? _a : 128);\r\n    (0, psdWriter_1.writeZeros)(writer, 2);\r\n});\r\nvar grdmColorModels = ['', '', '', 'rgb', 'hsb', '', 'lab'];\r\naddHandler('grdm', adjustmentType('gradient map'), function (reader, target, left) {\r\n    var version = (0, psdReader_1.readUint16)(reader);\r\n    if (version !== 1 && version !== 3)\r\n        throw new Error('Invalid grdm version');\r\n    var info = {\r\n        type: 'gradient map',\r\n        gradientType: 'solid',\r\n    };\r\n    info.reverse = !!(0, psdReader_1.readUint8)(reader);\r\n    info.dither = !!(0, psdReader_1.readUint8)(reader);\r\n    var hasMethod = !!(0, psdReader_1.readUint8)(reader);\r\n    reader.offset--;\r\n    if (hasMethod) {\r\n        var method = (0, psdReader_1.readSignature)(reader);\r\n        info.method = descriptor_1.gradientInterpolationMethodType.decode(method);\r\n    }\r\n    info.name = (0, psdReader_1.readUnicodeString)(reader);\r\n    info.colorStops = [];\r\n    info.opacityStops = [];\r\n    var stopsCount = (0, psdReader_1.readUint16)(reader);\r\n    for (var i = 0; i < stopsCount; i++) {\r\n        info.colorStops.push({\r\n            location: (0, psdReader_1.readUint32)(reader),\r\n            midpoint: (0, psdReader_1.readUint32)(reader) / 100,\r\n            color: (0, psdReader_1.readColor)(reader),\r\n        });\r\n        (0, psdReader_1.skipBytes)(reader, 2);\r\n    }\r\n    var opacityStopsCount = (0, psdReader_1.readUint16)(reader);\r\n    for (var i = 0; i < opacityStopsCount; i++) {\r\n        info.opacityStops.push({\r\n            location: (0, psdReader_1.readUint32)(reader),\r\n            midpoint: (0, psdReader_1.readUint32)(reader) / 100,\r\n            opacity: (0, psdReader_1.readUint16)(reader) / 0xff,\r\n        });\r\n    }\r\n    var expansionCount = (0, psdReader_1.readUint16)(reader);\r\n    if (expansionCount !== 2)\r\n        throw new Error('Invalid grdm expansion count');\r\n    var interpolation = (0, psdReader_1.readUint16)(reader);\r\n    info.smoothness = interpolation / 4096;\r\n    var length = (0, psdReader_1.readUint16)(reader);\r\n    if (length !== 32)\r\n        throw new Error('Invalid grdm length');\r\n    info.gradientType = (0, psdReader_1.readUint16)(reader) ? 'noise' : 'solid';\r\n    info.randomSeed = (0, psdReader_1.readUint32)(reader);\r\n    info.addTransparency = !!(0, psdReader_1.readUint16)(reader);\r\n    info.restrictColors = !!(0, psdReader_1.readUint16)(reader);\r\n    info.roughness = (0, psdReader_1.readUint32)(reader) / 4096;\r\n    info.colorModel = (grdmColorModels[(0, psdReader_1.readUint16)(reader)] || 'rgb');\r\n    info.min = [\r\n        (0, psdReader_1.readUint16)(reader) / 0x8000,\r\n        (0, psdReader_1.readUint16)(reader) / 0x8000,\r\n        (0, psdReader_1.readUint16)(reader) / 0x8000,\r\n        (0, psdReader_1.readUint16)(reader) / 0x8000,\r\n    ];\r\n    info.max = [\r\n        (0, psdReader_1.readUint16)(reader) / 0x8000,\r\n        (0, psdReader_1.readUint16)(reader) / 0x8000,\r\n        (0, psdReader_1.readUint16)(reader) / 0x8000,\r\n        (0, psdReader_1.readUint16)(reader) / 0x8000,\r\n    ];\r\n    (0, psdReader_1.skipBytes)(reader, left());\r\n    for (var _i = 0, _a = info.colorStops; _i < _a.length; _i++) {\r\n        var s = _a[_i];\r\n        s.location /= interpolation;\r\n    }\r\n    for (var _b = 0, _c = info.opacityStops; _b < _c.length; _b++) {\r\n        var s = _c[_b];\r\n        s.location /= interpolation;\r\n    }\r\n    target.adjustment = info;\r\n}, function (writer, target) {\r\n    var _a, _b, _c;\r\n    var info = target.adjustment;\r\n    (0, psdWriter_1.writeUint16)(writer, info.method !== undefined ? 3 : 1); // version\r\n    (0, psdWriter_1.writeUint8)(writer, info.reverse ? 1 : 0);\r\n    (0, psdWriter_1.writeUint8)(writer, info.dither ? 1 : 0);\r\n    if (info.method !== undefined) {\r\n        (0, psdWriter_1.writeSignature)(writer, descriptor_1.gradientInterpolationMethodType.encode(info.method));\r\n    }\r\n    (0, psdWriter_1.writeUnicodeStringWithPadding)(writer, info.name || '');\r\n    (0, psdWriter_1.writeUint16)(writer, info.colorStops && info.colorStops.length || 0);\r\n    var interpolation = Math.round(((_a = info.smoothness) !== null && _a !== void 0 ? _a : 1) * 4096);\r\n    for (var _i = 0, _d = info.colorStops || []; _i < _d.length; _i++) {\r\n        var s = _d[_i];\r\n        (0, psdWriter_1.writeUint32)(writer, Math.round(s.location * interpolation));\r\n        (0, psdWriter_1.writeUint32)(writer, Math.round(s.midpoint * 100));\r\n        (0, psdWriter_1.writeColor)(writer, s.color);\r\n        (0, psdWriter_1.writeZeros)(writer, 2);\r\n    }\r\n    (0, psdWriter_1.writeUint16)(writer, info.opacityStops && info.opacityStops.length || 0);\r\n    for (var _e = 0, _f = info.opacityStops || []; _e < _f.length; _e++) {\r\n        var s = _f[_e];\r\n        (0, psdWriter_1.writeUint32)(writer, Math.round(s.location * interpolation));\r\n        (0, psdWriter_1.writeUint32)(writer, Math.round(s.midpoint * 100));\r\n        (0, psdWriter_1.writeUint16)(writer, Math.round(s.opacity * 0xff));\r\n    }\r\n    (0, psdWriter_1.writeUint16)(writer, 2); // expansion count\r\n    (0, psdWriter_1.writeUint16)(writer, interpolation);\r\n    (0, psdWriter_1.writeUint16)(writer, 32); // length\r\n    (0, psdWriter_1.writeUint16)(writer, info.gradientType === 'noise' ? 1 : 0);\r\n    (0, psdWriter_1.writeUint32)(writer, info.randomSeed || 0);\r\n    (0, psdWriter_1.writeUint16)(writer, info.addTransparency ? 1 : 0);\r\n    (0, psdWriter_1.writeUint16)(writer, info.restrictColors ? 1 : 0);\r\n    (0, psdWriter_1.writeUint32)(writer, Math.round(((_b = info.roughness) !== null && _b !== void 0 ? _b : 1) * 4096));\r\n    var colorModel = grdmColorModels.indexOf((_c = info.colorModel) !== null && _c !== void 0 ? _c : 'rgb');\r\n    (0, psdWriter_1.writeUint16)(writer, colorModel === -1 ? 3 : colorModel);\r\n    for (var i = 0; i < 4; i++)\r\n        (0, psdWriter_1.writeUint16)(writer, Math.round((info.min && info.min[i] || 0) * 0x8000));\r\n    for (var i = 0; i < 4; i++)\r\n        (0, psdWriter_1.writeUint16)(writer, Math.round((info.max && info.max[i] || 0) * 0x8000));\r\n    (0, psdWriter_1.writeZeros)(writer, 4);\r\n});\r\nfunction readSelectiveColors(reader) {\r\n    return {\r\n        c: (0, psdReader_1.readInt16)(reader),\r\n        m: (0, psdReader_1.readInt16)(reader),\r\n        y: (0, psdReader_1.readInt16)(reader),\r\n        k: (0, psdReader_1.readInt16)(reader),\r\n    };\r\n}\r\nfunction writeSelectiveColors(writer, cmyk) {\r\n    var c = cmyk || {};\r\n    (0, psdWriter_1.writeInt16)(writer, c.c);\r\n    (0, psdWriter_1.writeInt16)(writer, c.m);\r\n    (0, psdWriter_1.writeInt16)(writer, c.y);\r\n    (0, psdWriter_1.writeInt16)(writer, c.k);\r\n}\r\naddHandler('selc', adjustmentType('selective color'), function (reader, target) {\r\n    if ((0, psdReader_1.readUint16)(reader) !== 1)\r\n        throw new Error('Invalid selc version');\r\n    var mode = (0, psdReader_1.readUint16)(reader) ? 'absolute' : 'relative';\r\n    (0, psdReader_1.skipBytes)(reader, 8);\r\n    target.adjustment = {\r\n        type: 'selective color',\r\n        mode: mode,\r\n        reds: readSelectiveColors(reader),\r\n        yellows: readSelectiveColors(reader),\r\n        greens: readSelectiveColors(reader),\r\n        cyans: readSelectiveColors(reader),\r\n        blues: readSelectiveColors(reader),\r\n        magentas: readSelectiveColors(reader),\r\n        whites: readSelectiveColors(reader),\r\n        neutrals: readSelectiveColors(reader),\r\n        blacks: readSelectiveColors(reader),\r\n    };\r\n}, function (writer, target) {\r\n    var info = target.adjustment;\r\n    (0, psdWriter_1.writeUint16)(writer, 1); // version\r\n    (0, psdWriter_1.writeUint16)(writer, info.mode === 'absolute' ? 1 : 0);\r\n    (0, psdWriter_1.writeZeros)(writer, 8);\r\n    writeSelectiveColors(writer, info.reds);\r\n    writeSelectiveColors(writer, info.yellows);\r\n    writeSelectiveColors(writer, info.greens);\r\n    writeSelectiveColors(writer, info.cyans);\r\n    writeSelectiveColors(writer, info.blues);\r\n    writeSelectiveColors(writer, info.magentas);\r\n    writeSelectiveColors(writer, info.whites);\r\n    writeSelectiveColors(writer, info.neutrals);\r\n    writeSelectiveColors(writer, info.blacks);\r\n});\r\naddHandler('CgEd', function (target) {\r\n    var a = target.adjustment;\r\n    if (!a)\r\n        return false;\r\n    return (a.type === 'brightness/contrast' && !a.useLegacy) ||\r\n        ((a.type === 'levels' || a.type === 'curves' || a.type === 'exposure' || a.type === 'channel mixer' ||\r\n            a.type === 'hue/saturation') && a.presetFileName !== undefined);\r\n}, function (reader, target, left) {\r\n    var desc = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n    if (desc.Vrsn !== 1)\r\n        throw new Error('Invalid CgEd version');\r\n    // this section can specify preset file name for other adjustment types\r\n    if ('presetFileName' in desc) {\r\n        target.adjustment = __assign(__assign({}, target.adjustment), { presetKind: desc.presetKind, presetFileName: desc.presetFileName });\r\n    }\r\n    else if ('curvesPresetFileName' in desc) {\r\n        target.adjustment = __assign(__assign({}, target.adjustment), { presetKind: desc.curvesPresetKind, presetFileName: desc.curvesPresetFileName });\r\n    }\r\n    else if ('mixerPresetFileName' in desc) {\r\n        target.adjustment = __assign(__assign({}, target.adjustment), { presetKind: desc.mixerPresetKind, presetFileName: desc.mixerPresetFileName });\r\n    }\r\n    else {\r\n        target.adjustment = {\r\n            type: 'brightness/contrast',\r\n            brightness: desc.Brgh,\r\n            contrast: desc.Cntr,\r\n            meanValue: desc.means,\r\n            useLegacy: !!desc.useLegacy,\r\n            labColorOnly: !!desc['Lab '],\r\n            auto: !!desc.Auto,\r\n        };\r\n    }\r\n    (0, psdReader_1.skipBytes)(reader, left());\r\n}, function (writer, target) {\r\n    var _a, _b, _c, _d;\r\n    var info = target.adjustment;\r\n    if (info.type === 'levels' || info.type === 'exposure' || info.type === 'hue/saturation') {\r\n        var desc = {\r\n            Vrsn: 1,\r\n            presetKind: (_a = info.presetKind) !== null && _a !== void 0 ? _a : 1,\r\n            presetFileName: info.presetFileName || '',\r\n        };\r\n        (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'null', desc);\r\n    }\r\n    else if (info.type === 'curves') {\r\n        var desc = {\r\n            Vrsn: 1,\r\n            curvesPresetKind: (_b = info.presetKind) !== null && _b !== void 0 ? _b : 1,\r\n            curvesPresetFileName: info.presetFileName || '',\r\n        };\r\n        (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'null', desc);\r\n    }\r\n    else if (info.type === 'channel mixer') {\r\n        var desc = {\r\n            Vrsn: 1,\r\n            mixerPresetKind: (_c = info.presetKind) !== null && _c !== void 0 ? _c : 1,\r\n            mixerPresetFileName: info.presetFileName || '',\r\n        };\r\n        (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'null', desc);\r\n    }\r\n    else if (info.type === 'brightness/contrast') {\r\n        var desc = {\r\n            Vrsn: 1,\r\n            Brgh: info.brightness || 0,\r\n            Cntr: info.contrast || 0,\r\n            means: (_d = info.meanValue) !== null && _d !== void 0 ? _d : 127,\r\n            'Lab ': !!info.labColorOnly,\r\n            useLegacy: !!info.useLegacy,\r\n            Auto: !!info.auto,\r\n        };\r\n        (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'null', desc);\r\n    }\r\n    else {\r\n        throw new Error('Unhandled CgEd case');\r\n    }\r\n});\r\nfunction getTextLayersSortedByIndex(psd) {\r\n    var layers = [];\r\n    function collect(layer) {\r\n        var _a;\r\n        if (layer.children) {\r\n            for (var _i = 0, _b = layer.children; _i < _b.length; _i++) {\r\n                var child = _b[_i];\r\n                if (((_a = child.text) === null || _a === void 0 ? void 0 : _a.index) !== undefined) {\r\n                    layers[child.text.index] = child;\r\n                }\r\n                collect(child);\r\n            }\r\n        }\r\n    }\r\n    collect(psd);\r\n    return layers;\r\n}\r\naddHandler('Txt2', hasKey('engineData'), function (reader, target, left, psd) {\r\n    var data = (0, psdReader_1.readBytes)(reader, left());\r\n    target.engineData = (0, base64_js_1.fromByteArray)(data);\r\n    var layersByIndex = getTextLayersSortedByIndex(psd);\r\n    var engineData = (0, engineData_1.parseEngineData)(data);\r\n    var engineData2 = (0, engineData2_1.decodeEngineData2)(engineData);\r\n    var TextFrameSet = engineData2.ResourceDict.TextFrameSet;\r\n    if (TextFrameSet) {\r\n        for (var i = 0; i < TextFrameSet.length; i++) {\r\n            var layer = layersByIndex[i];\r\n            if (TextFrameSet[i].path && (layer === null || layer === void 0 ? void 0 : layer.text)) {\r\n                layer.text.textPath = TextFrameSet[i].path;\r\n            }\r\n        }\r\n    }\r\n    // console.log(require('util').inspect(engineData, false, 99, true));\r\n    // require('fs').writeFileSync('test_data.bin', data);\r\n    // require('fs').writeFileSync('test_data.txt', require('util').inspect(engineData, false, 99, false), 'utf8');\r\n    // require('fs').writeFileSync('test_data.json', JSON.stringify(engineData2, null, 2), 'utf8');\r\n}, function (writer, target) {\r\n    var buffer = (0, base64_js_1.toByteArray)(target.engineData);\r\n    (0, psdWriter_1.writeBytes)(writer, buffer);\r\n});\r\naddHandler('FEid', hasKey('filterEffectsMasks'), function (reader, target, leftBytes) {\r\n    var version = (0, psdReader_1.readInt32)(reader);\r\n    if (version < 1 || version > 3)\r\n        throw new Error(\"Invalid filterEffects version \".concat(version));\r\n    target.filterEffectsMasks = [];\r\n    while (leftBytes() > 8) {\r\n        if ((0, psdReader_1.readUint32)(reader))\r\n            throw new Error('filterEffects: 64 bit length is not supported');\r\n        var length_2 = (0, psdReader_1.readUint32)(reader);\r\n        var end = reader.offset + length_2;\r\n        var id = (0, psdReader_1.readPascalString)(reader, 1);\r\n        var effectVersion = (0, psdReader_1.readInt32)(reader);\r\n        if (effectVersion !== 1)\r\n            throw new Error(\"Invalid filterEffect version \".concat(effectVersion));\r\n        if ((0, psdReader_1.readUint32)(reader))\r\n            throw new Error('filterEffect: 64 bit length is not supported');\r\n        /*const effectLength =*/ (0, psdReader_1.readUint32)(reader);\r\n        // const endOfEffect = reader.offset + effectLength;\r\n        var top_2 = (0, psdReader_1.readInt32)(reader);\r\n        var left = (0, psdReader_1.readInt32)(reader);\r\n        var bottom = (0, psdReader_1.readInt32)(reader);\r\n        var right = (0, psdReader_1.readInt32)(reader);\r\n        var depth = (0, psdReader_1.readInt32)(reader);\r\n        var maxChannels = (0, psdReader_1.readInt32)(reader);\r\n        var channels = [];\r\n        // 0 -> R, 1 -> G, 2 -> B, 25 -> A\r\n        for (var i = 0; i < (maxChannels + 2); i++) { // channels + user mask + sheet mask\r\n            var exists = (0, psdReader_1.readInt32)(reader);\r\n            if (exists) {\r\n                if ((0, psdReader_1.readUint32)(reader))\r\n                    throw new Error('filterEffect: 64 bit length is not supported');\r\n                var channelLength = (0, psdReader_1.readUint32)(reader);\r\n                if (!channelLength)\r\n                    throw new Error('filterEffect: Empty channel');\r\n                var compressionMode = (0, psdReader_1.readUint16)(reader);\r\n                var data = (0, psdReader_1.readBytes)(reader, channelLength - 2);\r\n                channels.push({ compressionMode: compressionMode, data: data });\r\n            }\r\n            else {\r\n                channels.push(undefined);\r\n            }\r\n        }\r\n        target.filterEffectsMasks.push({ id: id, top: top_2, left: left, bottom: bottom, right: right, depth: depth, channels: channels });\r\n        if (reader.offset < end && (0, psdReader_1.readUint8)(reader)) {\r\n            var top_3 = (0, psdReader_1.readInt32)(reader);\r\n            var left_1 = (0, psdReader_1.readInt32)(reader);\r\n            var bottom_1 = (0, psdReader_1.readInt32)(reader);\r\n            var right_1 = (0, psdReader_1.readInt32)(reader);\r\n            if ((0, psdReader_1.readUint32)(reader))\r\n                throw new Error('filterEffect: 64 bit length is not supported');\r\n            var extraLength = (0, psdReader_1.readUint32)(reader);\r\n            var compressionMode = (0, psdReader_1.readUint16)(reader);\r\n            var data = (0, psdReader_1.readBytes)(reader, extraLength - 2);\r\n            target.filterEffectsMasks[target.filterEffectsMasks.length - 1].extra = { top: top_3, left: left_1, bottom: bottom_1, right: right_1, compressionMode: compressionMode, data: data };\r\n        }\r\n        reader.offset = end;\r\n        var len = length_2;\r\n        while (len % 4) {\r\n            reader.offset++;\r\n            len++;\r\n        }\r\n    }\r\n}, function (writer, target) {\r\n    var _a;\r\n    (0, psdWriter_1.writeInt32)(writer, 3); // version\r\n    for (var _i = 0, _b = target.filterEffectsMasks; _i < _b.length; _i++) {\r\n        var mask = _b[_i];\r\n        (0, psdWriter_1.writeUint32)(writer, 0);\r\n        (0, psdWriter_1.writeUint32)(writer, 0);\r\n        var lengthOffset = writer.offset;\r\n        (0, psdWriter_1.writePascalString)(writer, mask.id, 1);\r\n        (0, psdWriter_1.writeInt32)(writer, 1); // version\r\n        (0, psdWriter_1.writeUint32)(writer, 0);\r\n        (0, psdWriter_1.writeUint32)(writer, 0);\r\n        var length2Offset = writer.offset;\r\n        (0, psdWriter_1.writeInt32)(writer, mask.top);\r\n        (0, psdWriter_1.writeInt32)(writer, mask.left);\r\n        (0, psdWriter_1.writeInt32)(writer, mask.bottom);\r\n        (0, psdWriter_1.writeInt32)(writer, mask.right);\r\n        (0, psdWriter_1.writeInt32)(writer, mask.depth);\r\n        var maxChannels = Math.max(0, mask.channels.length - 2);\r\n        (0, psdWriter_1.writeInt32)(writer, maxChannels);\r\n        for (var i = 0; i < (maxChannels + 2); i++) {\r\n            var channel = mask.channels[i];\r\n            (0, psdWriter_1.writeInt32)(writer, channel ? 1 : 0);\r\n            if (channel) {\r\n                (0, psdWriter_1.writeUint32)(writer, 0);\r\n                (0, psdWriter_1.writeUint32)(writer, channel.data.length + 2);\r\n                (0, psdWriter_1.writeUint16)(writer, channel.compressionMode);\r\n                (0, psdWriter_1.writeBytes)(writer, channel.data);\r\n            }\r\n        }\r\n        writer.view.setUint32(length2Offset - 4, writer.offset - length2Offset, false);\r\n        var extra = (_a = target.filterEffectsMasks[target.filterEffectsMasks.length - 1]) === null || _a === void 0 ? void 0 : _a.extra;\r\n        if (extra) {\r\n            (0, psdWriter_1.writeUint8)(writer, 1);\r\n            (0, psdWriter_1.writeInt32)(writer, extra.top);\r\n            (0, psdWriter_1.writeInt32)(writer, extra.left);\r\n            (0, psdWriter_1.writeInt32)(writer, extra.bottom);\r\n            (0, psdWriter_1.writeInt32)(writer, extra.right);\r\n            (0, psdWriter_1.writeUint32)(writer, 0);\r\n            (0, psdWriter_1.writeUint32)(writer, extra.data.byteLength + 2);\r\n            (0, psdWriter_1.writeUint16)(writer, extra.compressionMode);\r\n            (0, psdWriter_1.writeBytes)(writer, extra.data);\r\n        }\r\n        var length_3 = writer.offset - lengthOffset;\r\n        writer.view.setUint32(lengthOffset - 4, length_3, false);\r\n        while (length_3 % 4) {\r\n            (0, psdWriter_1.writeZeros)(writer, 1);\r\n            length_3++;\r\n        }\r\n    }\r\n});\r\naddHandlerAlias('FXid', 'FEid');\r\naddHandler('FMsk', hasKey('filterMask'), function (reader, target) {\r\n    target.filterMask = {\r\n        colorSpace: (0, psdReader_1.readColor)(reader),\r\n        opacity: (0, psdReader_1.readUint16)(reader) / 0xff,\r\n    };\r\n}, function (writer, target) {\r\n    var _a;\r\n    (0, psdWriter_1.writeColor)(writer, target.filterMask.colorSpace);\r\n    (0, psdWriter_1.writeUint16)(writer, (0, helpers_1.clamp)((_a = target.filterMask.opacity) !== null && _a !== void 0 ? _a : 1, 0, 1) * 0xff);\r\n});\r\naddHandler('artd', // document-wide artboard info\r\nfunction (// document-wide artboard info\r\ntarget) { return target.artboards !== undefined; }, function (reader, target, left) {\r\n    var desc = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n    target.artboards = {\r\n        count: desc['Cnt '],\r\n        autoExpandOffset: { horizontal: desc.autoExpandOffset.Hrzn, vertical: desc.autoExpandOffset.Vrtc },\r\n        origin: { horizontal: desc.origin.Hrzn, vertical: desc.origin.Vrtc },\r\n        autoExpandEnabled: desc.autoExpandEnabled,\r\n        autoNestEnabled: desc.autoNestEnabled,\r\n        autoPositionEnabled: desc.autoPositionEnabled,\r\n        shrinkwrapOnSaveEnabled: !!desc.shrinkwrapOnSaveEnabled,\r\n        docDefaultNewArtboardBackgroundColor: (0, descriptor_1.parseColor)(desc.docDefaultNewArtboardBackgroundColor),\r\n        docDefaultNewArtboardBackgroundType: desc.docDefaultNewArtboardBackgroundType,\r\n    };\r\n    (0, psdReader_1.skipBytes)(reader, left());\r\n}, function (writer, target) {\r\n    var _a, _b, _c, _d, _e;\r\n    var artb = target.artboards;\r\n    var desc = {\r\n        'Cnt ': artb.count,\r\n        autoExpandOffset: artb.autoExpandOffset ? { Hrzn: artb.autoExpandOffset.horizontal, Vrtc: artb.autoExpandOffset.vertical } : { Hrzn: 0, Vrtc: 0 },\r\n        origin: artb.origin ? { Hrzn: artb.origin.horizontal, Vrtc: artb.origin.vertical } : { Hrzn: 0, Vrtc: 0 },\r\n        autoExpandEnabled: (_a = artb.autoExpandEnabled) !== null && _a !== void 0 ? _a : true,\r\n        autoNestEnabled: (_b = artb.autoNestEnabled) !== null && _b !== void 0 ? _b : true,\r\n        autoPositionEnabled: (_c = artb.autoPositionEnabled) !== null && _c !== void 0 ? _c : true,\r\n        shrinkwrapOnSaveEnabled: (_d = artb.shrinkwrapOnSaveEnabled) !== null && _d !== void 0 ? _d : true,\r\n        docDefaultNewArtboardBackgroundColor: (0, descriptor_1.serializeColor)(artb.docDefaultNewArtboardBackgroundColor),\r\n        docDefaultNewArtboardBackgroundType: (_e = artb.docDefaultNewArtboardBackgroundType) !== null && _e !== void 0 ? _e : 1,\r\n    };\r\n    (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'null', desc, 'artd');\r\n});\r\nfunction hasMultiEffects(effects) {\r\n    return Object.keys(effects).map(function (key) { return effects[key]; }).some(function (v) { return Array.isArray(v) && v.length > 1; });\r\n}\r\nexports.hasMultiEffects = hasMultiEffects;\r\naddHandler('lfx2', function (target) { return target.effects !== undefined && !hasMultiEffects(target.effects); }, function (reader, target, left) {\r\n    var version = (0, psdReader_1.readUint32)(reader);\r\n    if (version !== 0)\r\n        throw new Error(\"Invalid lfx2 version\");\r\n    var desc = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n    // console.log('READ', require('util').inspect(desc, false, 99, true));\r\n    // TODO: don't discard if we got it from lmfx\r\n    // discard if read in 'lrFX' section\r\n    target.effects = (0, descriptor_1.parseEffects)(desc, !!reader.logMissingFeatures);\r\n    (0, psdReader_1.skipBytes)(reader, left());\r\n}, function (writer, target, _, options) {\r\n    var desc = (0, descriptor_1.serializeEffects)(target.effects, !!options.logMissingFeatures, true);\r\n    // console.log('WRITE', require('util').inspect(desc, false, 99, true));\r\n    (0, psdWriter_1.writeUint32)(writer, 0); // version\r\n    (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'null', desc);\r\n});\r\naddHandler('cinf', hasKey('compositorUsed'), function (reader, target, left) {\r\n    var desc = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n    // console.log(require('util').inspect(desc, false, 99, true));\r\n    function enumValue(desc) {\r\n        return desc.split('.')[1];\r\n    }\r\n    target.compositorUsed = {\r\n        description: desc.description,\r\n        reason: desc.reason,\r\n        engine: enumValue(desc.Engn),\r\n    };\r\n    if (desc.Vrsn)\r\n        target.compositorUsed.version = desc.Vrsn;\r\n    if (desc.psVersion)\r\n        target.compositorUsed.photoshopVersion = desc.psVersion;\r\n    if (desc.enableCompCore)\r\n        target.compositorUsed.enableCompCore = enumValue(desc.enableCompCore);\r\n    if (desc.enableCompCoreGPU)\r\n        target.compositorUsed.enableCompCoreGPU = enumValue(desc.enableCompCoreGPU);\r\n    if (desc.enableCompCoreThreads)\r\n        target.compositorUsed.enableCompCoreThreads = enumValue(desc.enableCompCoreThreads);\r\n    if (desc.compCoreSupport)\r\n        target.compositorUsed.compCoreSupport = enumValue(desc.compCoreSupport);\r\n    if (desc.compCoreGPUSupport)\r\n        target.compositorUsed.compCoreGPUSupport = enumValue(desc.compCoreGPUSupport);\r\n    (0, psdReader_1.skipBytes)(reader, left());\r\n}, function (writer, target) {\r\n    var cinf = target.compositorUsed;\r\n    var desc = {\r\n        Vrsn: cinf.version || { major: 1, minor: 0, fix: 0 },\r\n    };\r\n    if (cinf.photoshopVersion)\r\n        desc.psVersion = cinf.photoshopVersion;\r\n    desc.description = cinf.description;\r\n    desc.reason = cinf.reason;\r\n    desc.Engn = \"Engn.\".concat(cinf.engine);\r\n    if (cinf.enableCompCore)\r\n        desc.enableCompCore = \"enable.\".concat(cinf.enableCompCore);\r\n    if (cinf.enableCompCoreGPU)\r\n        desc.enableCompCoreGPU = \"enable.\".concat(cinf.enableCompCoreGPU);\r\n    if (cinf.enableCompCoreThreads)\r\n        desc.enableCompCoreThreads = \"enable.\".concat(cinf.enableCompCoreThreads);\r\n    if (cinf.compCoreSupport)\r\n        desc.compCoreSupport = \"reason.\".concat(cinf.compCoreSupport);\r\n    if (cinf.compCoreGPUSupport)\r\n        desc.compCoreGPUSupport = \"reason.\".concat(cinf.compCoreGPUSupport);\r\n    (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'null', desc);\r\n});\r\n// extension settings ?, ignore it\r\naddHandler('extn', function (target) { return target._extn !== undefined; }, function (reader, target) {\r\n    var desc = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n    // console.log(require('util').inspect(desc, false, 99, true));\r\n    if (helpers_1.MOCK_HANDLERS)\r\n        target._extn = desc;\r\n}, function (writer, target) {\r\n    // TODO: need to add correct types for desc fields (resources/src.psd)\r\n    if (helpers_1.MOCK_HANDLERS)\r\n        (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'null', target._extn);\r\n});\r\naddHandler('iOpa', hasKey('fillOpacity'), function (reader, target) {\r\n    target.fillOpacity = (0, psdReader_1.readUint8)(reader) / 0xff;\r\n    (0, psdReader_1.skipBytes)(reader, 3);\r\n}, function (writer, target) {\r\n    (0, psdWriter_1.writeUint8)(writer, target.fillOpacity * 0xff);\r\n    (0, psdWriter_1.writeZeros)(writer, 3);\r\n});\r\naddHandler('brst', hasKey('channelBlendingRestrictions'), function (reader, target, left) {\r\n    target.channelBlendingRestrictions = [];\r\n    while (left() > 4) {\r\n        target.channelBlendingRestrictions.push((0, psdReader_1.readInt32)(reader));\r\n    }\r\n}, function (writer, target) {\r\n    for (var _i = 0, _a = target.channelBlendingRestrictions; _i < _a.length; _i++) {\r\n        var channel = _a[_i];\r\n        (0, psdWriter_1.writeInt32)(writer, channel);\r\n    }\r\n});\r\naddHandler('tsly', hasKey('transparencyShapesLayer'), function (reader, target) {\r\n    target.transparencyShapesLayer = !!(0, psdReader_1.readUint8)(reader);\r\n    (0, psdReader_1.skipBytes)(reader, 3);\r\n}, function (writer, target) {\r\n    (0, psdWriter_1.writeUint8)(writer, target.transparencyShapesLayer ? 1 : 0);\r\n    (0, psdWriter_1.writeZeros)(writer, 3);\r\n});\r\n//# sourceMappingURL=additionalInfo.js.map","import { fromByteArray, toByteArray } from 'base64-js';\nimport { readEffects, writeEffects } from './effectsHelpers';\nimport { clamp, createEnum, layerColors, MOCK_HANDLERS } from './helpers';\nimport { LayerAdditionalInfo, BezierPath, Psd, BrightnessAdjustment, ExposureAdjustment, VibranceAdjustment, ColorBalanceAdjustment, BlackAndWhiteAdjustment, PhotoFilterAdjustment, ChannelMixerChannel, ChannelMixerAdjustment, PosterizeAdjustment, ThresholdAdjustment, GradientMapAdjustment, CMYK, SelectiveColorAdjustment, ColorLookupAdjustment, LevelsAdjustmentChannel, LevelsAdjustment, CurvesAdjustment, CurvesAdjustmentChannel, HueSaturationAdjustment, HueSaturationAdjustmentChannel, PresetInfo, Color, ColorBalanceValues, WriteOptions, LinkedFile, PlacedLayerType, Warp, KeyDescriptorItem, BooleanOperation, LayerEffectsInfo, Annotation, LayerVectorMask, AnimationFrame, Timeline, PlacedLayerFilter, UnitsValue, Filter, PlacedLayer, ReadOptions, Layer } from './psd';\nimport { PsdReader, readSignature, readUnicodeString, skipBytes, readUint32, readUint8, readFloat64, readUint16, readBytes, readInt16, checkSignature, readFloat32, readFixedPointPath32, readSection, readColor, readInt32, readPascalString, readUnicodeStringWithLength, readAsciiString, readPattern, readLayerInfo } from './psdReader';\nimport { PsdWriter, writeZeros, writeSignature, writeBytes, writeUint32, writeUint16, writeFloat64, writeUint8, writeInt16, writeFloat32, writeFixedPointPath32, writeUnicodeString, writeSection, writeUnicodeStringWithPadding, writeColor, writePascalString, writeInt32 } from './psdWriter';\nimport { Annt, BlnM, DescriptorColor, DescriptorUnitsValue, parsePercent, parseUnits, parseUnitsOrNumber, QuiltWarpDescriptor, strokeStyleLineAlignment, strokeStyleLineCapType, strokeStyleLineJoinType, TextDescriptor, textGridding, unitsPercent, unitsValue, WarpDescriptor, warpStyle, writeVersionAndDescriptor, readVersionAndDescriptor, StrokeDescriptor, Ornt, horzVrtcToXY, LmfxDescriptor, Lfx2Descriptor, FrameListDescriptor, TimelineDescriptor, FrameDescriptor, xyToHorzVrtc, serializeEffects, parseEffects, parseColor, serializeColor, serializeVectorContent, parseVectorContent, parseTrackList, serializeTrackList, FractionDescriptor, BlrM, BlrQ, SmBQ, SmBM, DspM, UndA, Cnvr, RplS, SphM, Wvtp, ZZTy, Dstr, Chnl, MztT, Lns, blurType, DfsM, ExtT, ExtR, FlCl, CntE, WndM, Drct, IntE, IntC, FlMd, unitsPercentF, frac, ClrS, descBoundsToBounds, boundsToDescBounds, presetKindType, gradientInterpolationMethodType } from './descriptor';\nimport { serializeEngineData, parseEngineData } from './engineData';\nimport { encodeEngineData, decodeEngineData } from './text';\nimport { decodeEngineData2 } from './engineData2';\nimport type { InternalImageResources } from './imageResources';\n\nexport interface ExtendedWriteOptions extends WriteOptions {\n\tlayerIds: Set<number>;\n\tlayerToId: Map<any, number>;\n}\n\ntype HasMethod = (target: LayerAdditionalInfo) => boolean;\ntype ReadMethod = (reader: PsdReader, target: LayerAdditionalInfo, left: () => number, psd: Psd, imageResources: InternalImageResources) => void;\ntype WriteMethod = (writer: PsdWriter, target: LayerAdditionalInfo, psd: Psd, options: ExtendedWriteOptions) => void;\n\nexport interface InfoHandler {\n\tkey: string;\n\thas: HasMethod;\n\tread: ReadMethod;\n\twrite: WriteMethod;\n}\n\nconst fromAtoZ = 'abcdefghijklmnopqrstuvwxyz';\nexport const infoHandlers: InfoHandler[] = [];\nexport const infoHandlersMap: { [key: string]: InfoHandler; } = {};\n\nfunction addHandler(key: string, has: HasMethod, read: ReadMethod, write: WriteMethod) {\n\tconst handler: InfoHandler = { key, has, read, write };\n\tinfoHandlers.push(handler);\n\tinfoHandlersMap[handler.key] = handler;\n}\n\nfunction addHandlerAlias(key: string, target: string) {\n\tinfoHandlersMap[key] = infoHandlersMap[target];\n}\n\nfunction hasKey(key: keyof LayerAdditionalInfo) {\n\treturn (target: LayerAdditionalInfo) => target[key] !== undefined;\n}\n\nfunction readLength64(reader: PsdReader) {\n\tif (readUint32(reader)) throw new Error(`Resource size above 4 GB limit at ${reader.offset.toString(16)}`);\n\treturn readUint32(reader);\n}\n\nfunction writeLength64(writer: PsdWriter, length: number) {\n\twriteUint32(writer, 0);\n\twriteUint32(writer, length);\n}\n\naddHandler(\n\t'TySh',\n\thasKey('text'),\n\t(reader, target, leftBytes) => {\n\t\tif (readInt16(reader) !== 1) throw new Error(`Invalid TySh version`);\n\n\t\tconst transform: number[] = [];\n\t\tfor (let i = 0; i < 6; i++) transform.push(readFloat64(reader));\n\n\t\tif (readInt16(reader) !== 50) throw new Error(`Invalid TySh text version`);\n\t\tconst text: TextDescriptor = readVersionAndDescriptor(reader);\n\t\t// console.log(require('util').inspect(text, false, 99, false), 'utf8');\n\n\t\tif (readInt16(reader) !== 1) throw new Error(`Invalid TySh warp version`);\n\t\tconst warp: WarpDescriptor = readVersionAndDescriptor(reader);\n\t\t// console.log(require('util').inspect(warp, false, 99, false), 'utf8');\n\n\t\ttarget.text = {\n\t\t\ttransform,\n\t\t\tleft: readFloat32(reader),\n\t\t\ttop: readFloat32(reader),\n\t\t\tright: readFloat32(reader),\n\t\t\tbottom: readFloat32(reader),\n\t\t\ttext: text['Txt '].replace(/\\r/g, '\\n'),\n\t\t\tindex: text.TextIndex || 0,\n\t\t\tgridding: textGridding.decode(text.textGridding),\n\t\t\tantiAlias: Annt.decode(text.AntA),\n\t\t\torientation: Ornt.decode(text.Ornt),\n\t\t\twarp: {\n\t\t\t\tstyle: warpStyle.decode(warp.warpStyle),\n\t\t\t\tvalue: warp.warpValue || 0,\n\t\t\t\tperspective: warp.warpPerspective || 0,\n\t\t\t\tperspectiveOther: warp.warpPerspectiveOther || 0,\n\t\t\t\trotate: Ornt.decode(warp.warpRotate),\n\t\t\t},\n\t\t};\n\n\t\tif (text.bounds) target.text.bounds = descBoundsToBounds(text.bounds);\n\t\tif (text.boundingBox) target.text.boundingBox = descBoundsToBounds(text.boundingBox);\n\n\t\tif (text.EngineData) {\n\t\t\tconst engineData = parseEngineData(text.EngineData);\n\t\t\tconst textData = decodeEngineData(engineData);\n\t\t\t// console.log(require('util').inspect(engineData, false, 99, false), 'utf8');\n\n\t\t\t// require('fs').writeFileSync(`layer-${target.name}.txt`, require('util').inspect(engineData, false, 99, false), 'utf8');\n\t\t\t// const before = parseEngineData(text.EngineData);\n\t\t\t// const after = encodeEngineData(engineData);\n\t\t\t// require('fs').writeFileSync('before.txt', require('util').inspect(before, false, 99, false), 'utf8');\n\t\t\t// require('fs').writeFileSync('after.txt', require('util').inspect(after, false, 99, false), 'utf8');\n\n\t\t\t// console.log(require('util').inspect(parseEngineData(text.EngineData), false, 99, true));\n\t\t\ttarget.text = { ...target.text, ...textData };\n\t\t\t// console.log(require('util').inspect(target.text, false, 99, true));\n\t\t}\n\n\t\tskipBytes(reader, leftBytes());\n\t},\n\t(writer, target) => {\n\t\tconst text = target.text!;\n\t\tconst warp = text.warp || {};\n\t\tconst transform = text.transform || [1, 0, 0, 1, 0, 0];\n\n\t\tconst textDescriptor: TextDescriptor = {\n\t\t\t'Txt ': (text.text || '').replace(/\\r?\\n/g, '\\r'),\n\t\t\ttextGridding: textGridding.encode(text.gridding),\n\t\t\tOrnt: Ornt.encode(text.orientation),\n\t\t\tAntA: Annt.encode(text.antiAlias),\n\t\t\t...(text.bounds ? { bounds: boundsToDescBounds(text.bounds) } : {}),\n\t\t\t...(text.boundingBox ? { boundingBox: boundsToDescBounds(text.boundingBox) } : {}),\n\t\t\tTextIndex: text.index || 0,\n\t\t\tEngineData: serializeEngineData(encodeEngineData(text)),\n\t\t};\n\n\t\twriteInt16(writer, 1); // version\n\n\t\tfor (let i = 0; i < 6; i++) {\n\t\t\twriteFloat64(writer, transform[i]);\n\t\t}\n\n\t\twriteInt16(writer, 50); // text version\n\t\twriteVersionAndDescriptor(writer, '', 'TxLr', textDescriptor, 'text');\n\n\t\twriteInt16(writer, 1); // warp version\n\t\twriteVersionAndDescriptor(writer, '', 'warp', encodeWarp(warp));\n\n\t\twriteFloat32(writer, text.left!);\n\t\twriteFloat32(writer, text.top!);\n\t\twriteFloat32(writer, text.right!);\n\t\twriteFloat32(writer, text.bottom!);\n\n\t\t// writeZeros(writer, 2);\n\t},\n);\n\n// vector fills\n\naddHandler(\n\t'SoCo',\n\ttarget => target.vectorFill !== undefined && target.vectorStroke === undefined &&\n\t\ttarget.vectorFill.type === 'color',\n\t(reader, target) => {\n\t\tconst descriptor = readVersionAndDescriptor(reader);\n\t\ttarget.vectorFill = parseVectorContent(descriptor);\n\t},\n\t(writer, target) => {\n\t\tconst { descriptor } = serializeVectorContent(target.vectorFill!);\n\t\twriteVersionAndDescriptor(writer, '', 'null', descriptor);\n\t},\n);\n\naddHandler(\n\t'GdFl',\n\ttarget => target.vectorFill !== undefined && target.vectorStroke === undefined &&\n\t\t(target.vectorFill.type === 'solid' || target.vectorFill.type === 'noise'),\n\t(reader, target, left) => {\n\t\tconst descriptor = readVersionAndDescriptor(reader);\n\t\ttarget.vectorFill = parseVectorContent(descriptor);\n\t\tskipBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\tconst { descriptor } = serializeVectorContent(target.vectorFill!);\n\t\twriteVersionAndDescriptor(writer, '', 'null', descriptor);\n\t},\n);\n\naddHandler(\n\t'PtFl',\n\ttarget => target.vectorFill !== undefined && target.vectorStroke === undefined &&\n\t\ttarget.vectorFill.type === 'pattern',\n\t(reader, target) => {\n\t\tconst descriptor = readVersionAndDescriptor(reader);\n\t\ttarget.vectorFill = parseVectorContent(descriptor);\n\t},\n\t(writer, target) => {\n\t\tconst { descriptor } = serializeVectorContent(target.vectorFill!);\n\t\twriteVersionAndDescriptor(writer, '', 'null', descriptor);\n\t},\n);\n\naddHandler(\n\t'vscg',\n\ttarget => target.vectorFill !== undefined && target.vectorStroke !== undefined,\n\t(reader, target, left) => {\n\t\treadSignature(reader); // key\n\t\tconst desc = readVersionAndDescriptor(reader);\n\t\ttarget.vectorFill = parseVectorContent(desc);\n\t\tskipBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\tconst { descriptor, key } = serializeVectorContent(target.vectorFill!);\n\t\twriteSignature(writer, key);\n\t\twriteVersionAndDescriptor(writer, '', 'null', descriptor);\n\t},\n);\n\nexport function readBezierKnot(reader: PsdReader, width: number, height: number) {\n\tconst y0 = readFixedPointPath32(reader) * height;\n\tconst x0 = readFixedPointPath32(reader) * width;\n\tconst y1 = readFixedPointPath32(reader) * height;\n\tconst x1 = readFixedPointPath32(reader) * width;\n\tconst y2 = readFixedPointPath32(reader) * height;\n\tconst x2 = readFixedPointPath32(reader) * width;\n\treturn [x0, y0, x1, y1, x2, y2];\n}\n\nfunction writeBezierKnot(writer: PsdWriter, points: number[], width: number, height: number) {\n\twriteFixedPointPath32(writer, points[1] / height); // y0\n\twriteFixedPointPath32(writer, points[0] / width); // x0\n\twriteFixedPointPath32(writer, points[3] / height); // y1\n\twriteFixedPointPath32(writer, points[2] / width); // x1\n\twriteFixedPointPath32(writer, points[5] / height); // y2\n\twriteFixedPointPath32(writer, points[4] / width); // x2\n}\n\nexport const booleanOperations: BooleanOperation[] = ['exclude', 'combine', 'subtract', 'intersect'];\n\nexport function readVectorMask(reader: PsdReader, vectorMask: LayerVectorMask, width: number, height: number, size: number) {\n\tconst end = reader.offset + size;\n\tconst paths = vectorMask.paths;\n\tlet path: BezierPath | undefined = undefined;\n\n\twhile ((end - reader.offset) >= 26) {\n\t\tconst selector = readUint16(reader);\n\n\t\tswitch (selector) {\n\t\t\tcase 0: // Closed subpath length record\n\t\t\tcase 3: { // Open subpath length record\n\t\t\t\treadUint16(reader); // count\n\t\t\t\tconst boolOp = readInt16(reader);\n\t\t\t\tconst flags = readUint16(reader); // bit 1 always 1 ?\n\t\t\t\tskipBytes(reader, 18);\n\t\t\t\tpath = {\n\t\t\t\t\topen: selector === 3,\n\t\t\t\t\tknots: [],\n\t\t\t\t\tfillRule: flags === 2 ? 'non-zero' : 'even-odd',\n\t\t\t\t};\n\t\t\t\tif (boolOp !== -1) path.operation = booleanOperations[boolOp];\n\t\t\t\tpaths.push(path);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 1: // Closed subpath Bezier knot, linked\n\t\t\tcase 2: // Closed subpath Bezier knot, unlinked\n\t\t\tcase 4: // Open subpath Bezier knot, linked\n\t\t\tcase 5: // Open subpath Bezier knot, unlinked\n\t\t\t\tpath!.knots.push({ linked: (selector === 1 || selector === 4), points: readBezierKnot(reader, width, height) });\n\t\t\t\tbreak;\n\t\t\tcase 6: // Path fill rule record\n\t\t\t\tskipBytes(reader, 24);\n\t\t\t\tbreak;\n\t\t\tcase 7: { // Clipboard record\n\t\t\t\t// TODO: check if these need to be multiplied by document size\n\t\t\t\tconst top = readFixedPointPath32(reader);\n\t\t\t\tconst left = readFixedPointPath32(reader);\n\t\t\t\tconst bottom = readFixedPointPath32(reader);\n\t\t\t\tconst right = readFixedPointPath32(reader);\n\t\t\t\tconst resolution = readFixedPointPath32(reader);\n\t\t\t\tskipBytes(reader, 4);\n\t\t\t\tvectorMask.clipboard = { top, left, bottom, right, resolution };\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 8: // Initial fill rule record\n\t\t\t\tvectorMask.fillStartsWithAllPixels = !!readUint16(reader);\n\t\t\t\tskipBytes(reader, 22);\n\t\t\t\tbreak;\n\t\t\tdefault: throw new Error('Invalid vmsk section');\n\t\t}\n\t}\n\n\treturn paths;\n}\n\naddHandler(\n\t'vmsk',\n\thasKey('vectorMask'),\n\t(reader, target, left, { width, height }) => {\n\t\tif (readUint32(reader) !== 3) throw new Error('Invalid vmsk version');\n\n\t\ttarget.vectorMask = { paths: [] };\n\t\tconst vectorMask = target.vectorMask;\n\n\t\tconst flags = readUint32(reader);\n\t\tvectorMask.invert = (flags & 1) !== 0;\n\t\tvectorMask.notLink = (flags & 2) !== 0;\n\t\tvectorMask.disable = (flags & 4) !== 0;\n\n\t\treadVectorMask(reader, vectorMask, width, height, left());\n\n\t\t// drawBezierPaths(vectorMask.paths, width, height, 'out.png');\n\n\t\tskipBytes(reader, left());\n\t},\n\t(writer, target, { width, height }) => {\n\t\tconst vectorMask = target.vectorMask!;\n\t\tconst flags =\n\t\t\t(vectorMask.invert ? 1 : 0) |\n\t\t\t(vectorMask.notLink ? 2 : 0) |\n\t\t\t(vectorMask.disable ? 4 : 0);\n\n\t\twriteUint32(writer, 3); // version\n\t\twriteUint32(writer, flags);\n\n\t\t// initial entry\n\t\twriteUint16(writer, 6);\n\t\twriteZeros(writer, 24);\n\n\t\tconst clipboard = vectorMask.clipboard;\n\t\tif (clipboard) {\n\t\t\twriteUint16(writer, 7);\n\t\t\twriteFixedPointPath32(writer, clipboard.top);\n\t\t\twriteFixedPointPath32(writer, clipboard.left);\n\t\t\twriteFixedPointPath32(writer, clipboard.bottom);\n\t\t\twriteFixedPointPath32(writer, clipboard.right);\n\t\t\twriteFixedPointPath32(writer, clipboard.resolution);\n\t\t\twriteZeros(writer, 4);\n\t\t}\n\n\t\tif (vectorMask.fillStartsWithAllPixels !== undefined) {\n\t\t\twriteUint16(writer, 8);\n\t\t\twriteUint16(writer, vectorMask.fillStartsWithAllPixels ? 1 : 0);\n\t\t\twriteZeros(writer, 22);\n\t\t}\n\n\t\tfor (const path of vectorMask.paths) {\n\t\t\twriteUint16(writer, path.open ? 3 : 0);\n\t\t\twriteUint16(writer, path.knots.length);\n\t\t\twriteUint16(writer, path.operation ? booleanOperations.indexOf(path.operation) : -1); // -1 for undefined\n\t\t\twriteUint16(writer, path.fillRule === 'non-zero' ? 2 : 1);\n\t\t\twriteZeros(writer, 18); // TODO: these are sometimes non-zero\n\n\t\t\tconst linkedKnot = path.open ? 4 : 1;\n\t\t\tconst unlinkedKnot = path.open ? 5 : 2;\n\n\t\t\tfor (const { linked, points } of path.knots) {\n\t\t\t\twriteUint16(writer, linked ? linkedKnot : unlinkedKnot);\n\t\t\t\twriteBezierKnot(writer, points, width, height);\n\t\t\t}\n\t\t}\n\t},\n);\n\n// TODO: need to write vmsk if has outline ?\naddHandlerAlias('vsms', 'vmsk');\n// addHandlerAlias('vmsk', 'vsms');\n\naddHandler(\n\t'vowv', // something with vectors?\n\thasKey('vowv'),\n\t(reader, target) => {\n\t\ttarget.vowv = readUint32(reader); // always 2 ????\n\t},\n\t(writer, target) => {\n\t\twriteUint32(writer, target.vowv!);\n\t},\n);\n\ninterface VogkDescriptor {\n\tkeyDescriptorList: {\n\t\tkeyShapeInvalidated?: boolean;\n\t\tkeyOriginType?: number;\n\t\tkeyOriginResolution?: number;\n\t\tkeyOriginRRectRadii?: {\n\t\t\tunitValueQuadVersion: number;\n\t\t\ttopRight: DescriptorUnitsValue;\n\t\t\ttopLeft: DescriptorUnitsValue;\n\t\t\tbottomLeft: DescriptorUnitsValue;\n\t\t\tbottomRight: DescriptorUnitsValue;\n\t\t};\n\t\tkeyOriginShapeBBox?: {\n\t\t\tunitValueQuadVersion: number;\n\t\t\t'Top ': DescriptorUnitsValue | number;\n\t\t\tLeft: DescriptorUnitsValue | number;\n\t\t\tBtom: DescriptorUnitsValue | number;\n\t\t\tRght: DescriptorUnitsValue | number;\n\t\t};\n\t\tkeyOriginBoxCorners?: {\n\t\t\trectangleCornerA: { Hrzn: number; Vrtc: number; };\n\t\t\trectangleCornerB: { Hrzn: number; Vrtc: number; };\n\t\t\trectangleCornerC: { Hrzn: number; Vrtc: number; };\n\t\t\trectangleCornerD: { Hrzn: number; Vrtc: number; };\n\t\t};\n\t\tTrnf?: { xx: number; xy: number; yx: number; yy: number; tx: number; ty: number; },\n\t\tkeyOriginIndex: number;\n\t}[];\n}\n\naddHandler(\n\t'vogk',\n\thasKey('vectorOrigination'),\n\t(reader, target, left) => {\n\t\tif (readInt32(reader) !== 1) throw new Error(`Invalid vogk version`);\n\t\tconst desc = readVersionAndDescriptor(reader) as VogkDescriptor;\n\t\t// console.log(require('util').inspect(desc, false, 99, true));\n\n\t\ttarget.vectorOrigination = { keyDescriptorList: [] };\n\n\t\tfor (const i of desc.keyDescriptorList) {\n\t\t\tconst item: KeyDescriptorItem = {};\n\n\t\t\tif (i.keyShapeInvalidated != null) item.keyShapeInvalidated = i.keyShapeInvalidated;\n\t\t\tif (i.keyOriginType != null) item.keyOriginType = i.keyOriginType;\n\t\t\tif (i.keyOriginResolution != null) item.keyOriginResolution = i.keyOriginResolution;\n\t\t\tif (i.keyOriginShapeBBox) {\n\t\t\t\titem.keyOriginShapeBoundingBox = {\n\t\t\t\t\ttop: parseUnitsOrNumber(i.keyOriginShapeBBox['Top ']),\n\t\t\t\t\tleft: parseUnitsOrNumber(i.keyOriginShapeBBox.Left),\n\t\t\t\t\tbottom: parseUnitsOrNumber(i.keyOriginShapeBBox.Btom),\n\t\t\t\t\tright: parseUnitsOrNumber(i.keyOriginShapeBBox.Rght),\n\t\t\t\t};\n\t\t\t}\n\t\t\tconst rectRadii = i.keyOriginRRectRadii;\n\t\t\tif (rectRadii) {\n\t\t\t\titem.keyOriginRRectRadii = {\n\t\t\t\t\ttopRight: parseUnits(rectRadii.topRight),\n\t\t\t\t\ttopLeft: parseUnits(rectRadii.topLeft),\n\t\t\t\t\tbottomLeft: parseUnits(rectRadii.bottomLeft),\n\t\t\t\t\tbottomRight: parseUnits(rectRadii.bottomRight),\n\t\t\t\t};\n\t\t\t}\n\t\t\tconst corners = i.keyOriginBoxCorners;\n\t\t\tif (corners) {\n\t\t\t\titem.keyOriginBoxCorners = [\n\t\t\t\t\t{ x: corners.rectangleCornerA.Hrzn, y: corners.rectangleCornerA.Vrtc },\n\t\t\t\t\t{ x: corners.rectangleCornerB.Hrzn, y: corners.rectangleCornerB.Vrtc },\n\t\t\t\t\t{ x: corners.rectangleCornerC.Hrzn, y: corners.rectangleCornerC.Vrtc },\n\t\t\t\t\t{ x: corners.rectangleCornerD.Hrzn, y: corners.rectangleCornerD.Vrtc },\n\t\t\t\t];\n\t\t\t}\n\t\t\tconst trnf = i.Trnf;\n\t\t\tif (trnf) {\n\t\t\t\titem.transform = [trnf.xx, trnf.xy, trnf.xy, trnf.yy, trnf.tx, trnf.ty];\n\t\t\t}\n\n\t\t\ttarget.vectorOrigination.keyDescriptorList.push(item);\n\t\t}\n\n\t\tskipBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\ttarget;\n\t\tconst orig = target.vectorOrigination!;\n\t\tconst desc: VogkDescriptor = { keyDescriptorList: [] };\n\n\t\tfor (let i = 0; i < orig.keyDescriptorList.length; i++) {\n\t\t\tconst item = orig.keyDescriptorList[i];\n\n\t\t\tdesc.keyDescriptorList.push({} as any); // we're adding keyOriginIndex at the end\n\n\t\t\tconst out = desc.keyDescriptorList[desc.keyDescriptorList.length - 1];\n\n\t\t\tif (item.keyOriginType != null) out.keyOriginType = item.keyOriginType;\n\t\t\tif (item.keyOriginResolution != null) out.keyOriginResolution = item.keyOriginResolution;\n\n\t\t\tconst radii = item.keyOriginRRectRadii;\n\t\t\tif (radii) {\n\t\t\t\tout.keyOriginRRectRadii = {\n\t\t\t\t\tunitValueQuadVersion: 1,\n\t\t\t\t\ttopRight: unitsValue(radii.topRight, 'topRight'),\n\t\t\t\t\ttopLeft: unitsValue(radii.topLeft, 'topLeft'),\n\t\t\t\t\tbottomLeft: unitsValue(radii.bottomLeft, 'bottomLeft'),\n\t\t\t\t\tbottomRight: unitsValue(radii.bottomRight, 'bottomRight'),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst box = item.keyOriginShapeBoundingBox;\n\t\t\tif (box) {\n\t\t\t\tout.keyOriginShapeBBox = {\n\t\t\t\t\tunitValueQuadVersion: 1,\n\t\t\t\t\t'Top ': unitsValue(box.top, 'top'),\n\t\t\t\t\tLeft: unitsValue(box.left, 'left'),\n\t\t\t\t\tBtom: unitsValue(box.bottom, 'bottom'),\n\t\t\t\t\tRght: unitsValue(box.right, 'right'),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst corners = item.keyOriginBoxCorners;\n\t\t\tif (corners && corners.length === 4) {\n\t\t\t\tout.keyOriginBoxCorners = {\n\t\t\t\t\trectangleCornerA: { Hrzn: corners[0].x, Vrtc: corners[0].y },\n\t\t\t\t\trectangleCornerB: { Hrzn: corners[1].x, Vrtc: corners[1].y },\n\t\t\t\t\trectangleCornerC: { Hrzn: corners[2].x, Vrtc: corners[2].y },\n\t\t\t\t\trectangleCornerD: { Hrzn: corners[3].x, Vrtc: corners[3].y },\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst transform = item.transform;\n\t\t\tif (transform && transform.length === 6) {\n\t\t\t\tout.Trnf = {\n\t\t\t\t\txx: transform[0],\n\t\t\t\t\txy: transform[1],\n\t\t\t\t\tyx: transform[2],\n\t\t\t\t\tyy: transform[3],\n\t\t\t\t\ttx: transform[4],\n\t\t\t\t\tty: transform[5],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (item.keyShapeInvalidated != null) out.keyShapeInvalidated = item.keyShapeInvalidated;\n\t\t\tout.keyOriginIndex = i;\n\t\t}\n\n\t\twriteInt32(writer, 1); // version\n\t\twriteVersionAndDescriptor(writer, '', 'null', desc);\n\t}\n);\n\naddHandler(\n\t'lmfx',\n\ttarget => target.effects !== undefined && hasMultiEffects(target.effects),\n\t(reader, target, left) => {\n\t\tconst version = readUint32(reader);\n\t\tif (version !== 0) throw new Error('Invalid lmfx version');\n\n\t\tconst desc: LmfxDescriptor = readVersionAndDescriptor(reader);\n\t\t// console.log('READ', require('util').inspect(desc, false, 99, true));\n\n\t\t// discard if read in 'lrFX' or 'lfx2' section\n\t\ttarget.effects = parseEffects(desc, !!reader.logMissingFeatures);\n\n\t\tskipBytes(reader, left());\n\t},\n\t(writer, target, _, options) => {\n\t\tconst desc = serializeEffects(target.effects!, !!options.logMissingFeatures, true);\n\t\t// console.log('WRITE', require('util').inspect(desc, false, 99, true));\n\n\t\twriteUint32(writer, 0); // version\n\t\twriteVersionAndDescriptor(writer, '', 'null', desc);\n\t},\n);\n\naddHandler(\n\t'lrFX',\n\thasKey('effects'),\n\t(reader, target, left) => {\n\t\tif (!target.effects) target.effects = readEffects(reader);\n\n\t\tskipBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\twriteEffects(writer, target.effects!);\n\t},\n);\n\naddHandler(\n\t'luni',\n\thasKey('name'),\n\t(reader, target, left) => {\n\t\tif (left() > 4) {\n\t\t\tconst length = readUint32(reader);\n\n\t\t\tif (left() >= (length * 2)) {\n\t\t\t\ttarget.name = readUnicodeStringWithLength(reader, length);\n\t\t\t} else {\n\t\t\t\tif (reader.logDevFeatures) reader.log('name in luni section is too long');\n\t\t\t}\n\t\t} else {\n\t\t\tif (reader.logDevFeatures) reader.log('empty luni section');\n\t\t}\n\n\t\tskipBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\twriteUnicodeString(writer, target.name!);\n\t\t// writeUint16(writer, 0); // padding (but not extending string length)\n\t},\n);\n\naddHandler(\n\t'lnsr',\n\thasKey('nameSource'),\n\t(reader, target) => target.nameSource = readSignature(reader),\n\t(writer, target) => writeSignature(writer, target.nameSource!),\n);\n\naddHandler(\n\t'lyid',\n\thasKey('id'),\n\t(reader, target) => {\n\t\ttarget.id = readUint32(reader);\n\t},\n\t(writer, target, _psd, options) => {\n\t\tlet id = target.id!;\n\t\twhile (options.layerIds.has(id)) id += 100; // make sure we don't have duplicate layer ids\n\t\twriteUint32(writer, id);\n\t\toptions.layerIds.add(id);\n\t\toptions.layerToId.set(target, id);\n\t},\n);\n\naddHandler(\n\t'lsct',\n\thasKey('sectionDivider'),\n\t(reader, target, left) => {\n\t\ttarget.sectionDivider = { type: readUint32(reader) };\n\n\t\tif (left()) {\n\t\t\tcheckSignature(reader, '8BIM');\n\t\t\ttarget.sectionDivider.key = readSignature(reader);\n\t\t}\n\n\t\tif (left()) {\n\t\t\ttarget.sectionDivider.subType = readUint32(reader);\n\t\t}\n\t},\n\t(writer, target) => {\n\t\twriteUint32(writer, target.sectionDivider!.type);\n\n\t\tif (target.sectionDivider!.key) {\n\t\t\twriteSignature(writer, '8BIM');\n\t\t\twriteSignature(writer, target.sectionDivider!.key);\n\n\t\t\tif (target.sectionDivider!.subType !== undefined) {\n\t\t\t\twriteUint32(writer, target.sectionDivider!.subType);\n\t\t\t}\n\t\t}\n\t},\n);\n\n// it seems lsdk is used when there's a layer is nested more than 6 levels, but I don't know why?\n// maybe some limitation of old version of PS?\naddHandlerAlias('lsdk', 'lsct');\n\naddHandler(\n\t'clbl',\n\thasKey('blendClippendElements'),\n\t(reader, target) => {\n\t\ttarget.blendClippendElements = !!readUint8(reader);\n\t\tskipBytes(reader, 3);\n\t},\n\t(writer, target) => {\n\t\twriteUint8(writer, target.blendClippendElements ? 1 : 0);\n\t\twriteZeros(writer, 3);\n\t},\n);\n\naddHandler(\n\t'infx',\n\thasKey('blendInteriorElements'),\n\t(reader, target) => {\n\t\ttarget.blendInteriorElements = !!readUint8(reader);\n\t\tskipBytes(reader, 3);\n\t},\n\t(writer, target) => {\n\t\twriteUint8(writer, target.blendInteriorElements ? 1 : 0);\n\t\twriteZeros(writer, 3);\n\t},\n);\n\naddHandler(\n\t'knko',\n\thasKey('knockout'),\n\t(reader, target) => {\n\t\ttarget.knockout = !!readUint8(reader);\n\t\tskipBytes(reader, 3);\n\t},\n\t(writer, target) => {\n\t\twriteUint8(writer, target.knockout ? 1 : 0);\n\t\twriteZeros(writer, 3);\n\t},\n);\n\naddHandler(\n\t'lmgm',\n\thasKey('layerMaskAsGlobalMask'),\n\t(reader, target) => {\n\t\ttarget.layerMaskAsGlobalMask = !!readUint8(reader);\n\t\tskipBytes(reader, 3);\n\t},\n\t(writer, target) => {\n\t\twriteUint8(writer, target.layerMaskAsGlobalMask ? 1 : 0);\n\t\twriteZeros(writer, 3);\n\t},\n);\n\naddHandler(\n\t'lspf',\n\thasKey('protected'),\n\t(reader, target) => {\n\t\tconst flags = readUint32(reader);\n\t\ttarget.protected = {\n\t\t\ttransparency: (flags & 0x01) !== 0,\n\t\t\tcomposite: (flags & 0x02) !== 0,\n\t\t\tposition: (flags & 0x04) !== 0,\n\t\t};\n\n\t\tif (flags & 0x08) target.protected.artboards = true;\n\t},\n\t(writer, target) => {\n\t\tconst flags =\n\t\t\t(target.protected!.transparency ? 0x01 : 0) |\n\t\t\t(target.protected!.composite ? 0x02 : 0) |\n\t\t\t(target.protected!.position ? 0x04 : 0) |\n\t\t\t(target.protected!.artboards ? 0x08 : 0);\n\n\t\twriteUint32(writer, flags);\n\t},\n);\n\naddHandler(\n\t'lclr',\n\thasKey('layerColor'),\n\t(reader, target) => {\n\t\tconst color = readUint16(reader);\n\t\tskipBytes(reader, 6);\n\t\ttarget.layerColor = layerColors[color];\n\t},\n\t(writer, target) => {\n\t\tconst index = layerColors.indexOf(target.layerColor!);\n\t\twriteUint16(writer, index === -1 ? 0 : index);\n\t\twriteZeros(writer, 6);\n\t},\n);\n\ninterface CustomDescriptor {\n\tlayerTime?: number;\n}\n\ninterface CmlsDescriptor {\n\torigFXRefPoint?: { Hrzn: number; Vrtc: number; };\n\tLyrI: number;\n\tlayerSettings: {\n\t\tenab?: boolean;\n\t\tOfst?: { Hrzn: number; Vrtc: number; };\n\t\tFXRefPoint?: { Hrzn: number; Vrtc: number; };\n\t\tcompList: number[];\n\t}[];\n}\n\naddHandler(\n\t'shmd', // Metadata setting\n\ttarget => target.timestamp !== undefined || target.animationFrames !== undefined || target.animationFrameFlags !== undefined || target.timeline !== undefined || target.comps !== undefined,\n\t(reader, target, left) => {\n\t\tconst count = readUint32(reader);\n\n\t\tfor (let i = 0; i < count; i++) {\n\t\t\tcheckSignature(reader, '8BIM');\n\t\t\tconst key = readSignature(reader);\n\t\t\treadUint8(reader); // copy\n\t\t\tskipBytes(reader, 3);\n\n\t\t\treadSection(reader, 1, left => {\n\t\t\t\tif (key === 'cust') {\n\t\t\t\t\tconst desc = readVersionAndDescriptor(reader) as CustomDescriptor;\n\t\t\t\t\t// console.log('cust', target.name, require('util').inspect(desc, false, 99, true));\n\t\t\t\t\tif (desc.layerTime !== undefined) target.timestamp = desc.layerTime;\n\t\t\t\t} else if (key === 'mlst') {\n\t\t\t\t\tconst desc = readVersionAndDescriptor(reader) as FrameListDescriptor;\n\t\t\t\t\t// console.log('mlst', target.name, require('util').inspect(desc, false, 99, true));\n\n\t\t\t\t\ttarget.animationFrames = [];\n\n\t\t\t\t\tfor (let i = 0; i < desc.LaSt.length; i++) {\n\t\t\t\t\t\tconst f = desc.LaSt[i];\n\t\t\t\t\t\tconst frame: AnimationFrame = { frames: f.FrLs };\n\t\t\t\t\t\tif (f.enab !== undefined) frame.enable = f.enab;\n\t\t\t\t\t\tif (f.Ofst) frame.offset = horzVrtcToXY(f.Ofst);\n\t\t\t\t\t\tif (f.FXRf) frame.referencePoint = horzVrtcToXY(f.FXRf);\n\t\t\t\t\t\tif (f.Lefx) frame.effects = parseEffects(f.Lefx, !!reader.logMissingFeatures);\n\t\t\t\t\t\tif (f.blendOptions && f.blendOptions.Opct) frame.opacity = parsePercent(f.blendOptions.Opct);\n\t\t\t\t\t\ttarget.animationFrames.push(frame);\n\t\t\t\t\t}\n\t\t\t\t} else if (key === 'mdyn') {\n\t\t\t\t\t// frame flags\n\t\t\t\t\treadUint16(reader); // unknown\n\t\t\t\t\tconst propagate = readUint8(reader);\n\t\t\t\t\tconst flags = readUint8(reader);\n\n\t\t\t\t\ttarget.animationFrameFlags = {\n\t\t\t\t\t\tpropagateFrameOne: !propagate,\n\t\t\t\t\t\tunifyLayerPosition: (flags & 1) !== 0,\n\t\t\t\t\t\tunifyLayerStyle: (flags & 2) !== 0,\n\t\t\t\t\t\tunifyLayerVisibility: (flags & 4) !== 0,\n\t\t\t\t\t};\n\t\t\t\t} else if (key === 'tmln') {\n\t\t\t\t\tconst desc = readVersionAndDescriptor(reader) as TimelineDescriptor;\n\t\t\t\t\tconst timeScope = desc.timeScope;\n\t\t\t\t\t// console.log('tmln', target.name, target.id, require('util').inspect(desc, false, 99, true));\n\n\t\t\t\t\tconst timeline: Timeline = {\n\t\t\t\t\t\tstart: frac(timeScope.Strt),\n\t\t\t\t\t\tduration: frac(timeScope.duration),\n\t\t\t\t\t\tinTime: frac(timeScope.inTime),\n\t\t\t\t\t\toutTime: frac(timeScope.outTime),\n\t\t\t\t\t\tautoScope: desc.autoScope,\n\t\t\t\t\t\taudioLevel: desc.audioLevel,\n\t\t\t\t\t};\n\n\t\t\t\t\tif (desc.trackList) {\n\t\t\t\t\t\ttimeline.tracks = parseTrackList(desc.trackList, !!reader.logMissingFeatures);\n\t\t\t\t\t}\n\n\t\t\t\t\ttarget.timeline = timeline;\n\t\t\t\t\t// console.log('tmln:result', target.name, target.id, require('util').inspect(timeline, false, 99, true));\n\t\t\t\t} else if (key === 'cmls') {\n\t\t\t\t\tconst desc = readVersionAndDescriptor(reader) as CmlsDescriptor;\n\t\t\t\t\t// console.log('cmls', require('util').inspect(desc, false, 99, true));\n\n\t\t\t\t\ttarget.comps = {\n\t\t\t\t\t\tsettings: [],\n\t\t\t\t\t};\n\n\t\t\t\t\tif (desc.origFXRefPoint) target.comps.originalEffectsReferencePoint = { x: desc.origFXRefPoint.Hrzn, y: desc.origFXRefPoint.Vrtc };\n\n\t\t\t\t\tfor (const item of desc.layerSettings) {\n\t\t\t\t\t\ttarget.comps.settings.push({ compList: item.compList });\n\t\t\t\t\t\tconst t = target.comps.settings[target.comps.settings.length - 1];\n\t\t\t\t\t\tif ('enab' in item) t.enabled = item.enab;\n\t\t\t\t\t\tif (item.Ofst) t.offset = { x: item.Ofst.Hrzn, y: item.Ofst.Vrtc };\n\t\t\t\t\t\tif (item.FXRefPoint) t.effectsReferencePoint = { x: item.FXRefPoint.Hrzn, y: item.FXRefPoint.Vrtc };\n\t\t\t\t\t}\n\t\t\t\t} else if (key === 'extn') {\n\t\t\t\t\tinterface ExtnDescriptor {\n\t\t\t\t\t\tgeneratorSettings: {\n\t\t\t\t\t\t\texportAs: {\n\t\t\t\t\t\t\t\texportOption: string;\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tlayerTime: number;\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tconst desc = readVersionAndDescriptor(reader) as ExtnDescriptor;\n\t\t\t\t\t// console.log(require('util').inspect(desc, false, 99, true));\n\t\t\t\t\tdesc; // TODO: save this\n\t\t\t\t\treader.logMissingFeatures && reader.log('Unhandled \"shmd\" section key', key);\n\t\t\t\t} else {\n\t\t\t\t\treader.logMissingFeatures && reader.log('Unhandled \"shmd\" section key', key);\n\t\t\t\t}\n\n\t\t\t\tskipBytes(reader, left());\n\t\t\t});\n\t\t}\n\n\t\tskipBytes(reader, left());\n\t},\n\t(writer, target, _, options) => {\n\t\tconst { animationFrames, animationFrameFlags, timestamp, timeline, comps } = target;\n\n\t\tlet count = 0;\n\t\tif (animationFrames) count++;\n\t\tif (animationFrameFlags) count++;\n\t\tif (timeline) count++;\n\t\tif (timestamp !== undefined) count++;\n\t\tif (comps) count++;\n\t\twriteUint32(writer, count);\n\n\t\tif (animationFrames) {\n\t\t\twriteSignature(writer, '8BIM');\n\t\t\twriteSignature(writer, 'mlst');\n\t\t\twriteUint8(writer, 0); // copy (always false)\n\t\t\twriteZeros(writer, 3);\n\t\t\twriteSection(writer, 2, () => {\n\t\t\t\tconst desc: FrameListDescriptor = {\n\t\t\t\t\tLaID: target.id ?? 0,\n\t\t\t\t\tLaSt: [],\n\t\t\t\t};\n\n\t\t\t\tfor (let i = 0; i < animationFrames.length; i++) {\n\t\t\t\t\tconst f = animationFrames[i];\n\t\t\t\t\tconst frame: FrameDescriptor = {} as any;\n\t\t\t\t\tif (f.enable !== undefined) frame.enab = f.enable;\n\t\t\t\t\tframe.FrLs = f.frames;\n\t\t\t\t\tif (f.offset) frame.Ofst = xyToHorzVrtc(f.offset);\n\t\t\t\t\tif (f.referencePoint) frame.FXRf = xyToHorzVrtc(f.referencePoint);\n\t\t\t\t\tif (f.effects) frame.Lefx = serializeEffects(f.effects, false, false);\n\t\t\t\t\tif (f.opacity !== undefined) frame.blendOptions = { Opct: unitsPercent(f.opacity) };\n\t\t\t\t\tdesc.LaSt.push(frame);\n\t\t\t\t}\n\n\t\t\t\twriteVersionAndDescriptor(writer, '', 'null', desc);\n\t\t\t}, true);\n\t\t}\n\n\t\tif (animationFrameFlags) {\n\t\t\twriteSignature(writer, '8BIM');\n\t\t\twriteSignature(writer, 'mdyn');\n\t\t\twriteUint8(writer, 0); // copy (always false)\n\t\t\twriteZeros(writer, 3);\n\t\t\twriteSection(writer, 2, () => {\n\t\t\t\twriteUint16(writer, 0); // unknown\n\t\t\t\twriteUint8(writer, animationFrameFlags.propagateFrameOne ? 0x0 : 0xf);\n\t\t\t\twriteUint8(writer,\n\t\t\t\t\t(animationFrameFlags.unifyLayerPosition ? 1 : 0) |\n\t\t\t\t\t(animationFrameFlags.unifyLayerStyle ? 2 : 0) |\n\t\t\t\t\t(animationFrameFlags.unifyLayerVisibility ? 4 : 0));\n\t\t\t});\n\t\t}\n\n\t\tif (timeline) {\n\t\t\twriteSignature(writer, '8BIM');\n\t\t\twriteSignature(writer, 'tmln');\n\t\t\twriteUint8(writer, 0); // copy (always false)\n\t\t\twriteZeros(writer, 3);\n\t\t\twriteSection(writer, 2, () => {\n\t\t\t\tconst desc: TimelineDescriptor = {\n\t\t\t\t\tVrsn: 1,\n\t\t\t\t\ttimeScope: {\n\t\t\t\t\t\tVrsn: 1,\n\t\t\t\t\t\tStrt: timeline.start,\n\t\t\t\t\t\tduration: timeline.duration,\n\t\t\t\t\t\tinTime: timeline.inTime,\n\t\t\t\t\t\toutTime: timeline.outTime,\n\t\t\t\t\t},\n\t\t\t\t\tautoScope: timeline.autoScope,\n\t\t\t\t\taudioLevel: timeline.audioLevel,\n\t\t\t\t} as any;\n\n\t\t\t\tif (timeline.tracks) {\n\t\t\t\t\tdesc.trackList = serializeTrackList(timeline.tracks);\n\t\t\t\t}\n\n\t\t\t\tconst id = options.layerToId.get(target) || target.id;\n\t\t\t\tif (!id) throw new Error('You need to provide layer.id value whan writing document with animations');\n\t\t\t\tdesc.LyrI = id;\n\n\t\t\t\t// console.log('WRITE:tmln', target.name, target.id, require('util').inspect(desc, false, 99, true));\n\t\t\t\twriteVersionAndDescriptor(writer, '', 'null', desc, 'anim');\n\t\t\t}, true);\n\t\t}\n\n\t\tif (timestamp !== undefined) {\n\t\t\twriteSignature(writer, '8BIM');\n\t\t\twriteSignature(writer, 'cust');\n\t\t\twriteUint8(writer, 0); // copy (always false)\n\t\t\twriteZeros(writer, 3);\n\t\t\twriteSection(writer, 2, () => {\n\t\t\t\tconst desc: CustomDescriptor = {\n\t\t\t\t\tlayerTime: timestamp,\n\t\t\t\t};\n\t\t\t\twriteVersionAndDescriptor(writer, '', 'metadata', desc);\n\t\t\t}, true);\n\t\t}\n\n\t\tif (comps) {\n\t\t\twriteSignature(writer, '8BIM');\n\t\t\twriteSignature(writer, 'cmls');\n\t\t\twriteUint8(writer, 0); // copy (always false)\n\t\t\twriteZeros(writer, 3);\n\t\t\twriteSection(writer, 2, () => {\n\t\t\t\tconst id = options.layerToId.get(target) || target.id;\n\t\t\t\tif (!id) throw new Error('You need to provide layer.id value whan writing document with layer comps');\n\n\t\t\t\tconst desc: CmlsDescriptor = {} as any;\n\n\t\t\t\tif (comps.originalEffectsReferencePoint) {\n\t\t\t\t\tdesc.origFXRefPoint = { Hrzn: comps.originalEffectsReferencePoint.x, Vrtc: comps.originalEffectsReferencePoint.y };\n\t\t\t\t}\n\n\t\t\t\tdesc.LyrI = id;\n\t\t\t\tdesc.layerSettings = [];\n\n\t\t\t\tfor (const item of comps.settings) {\n\t\t\t\t\tconst t: CmlsDescriptor['layerSettings'][0] = {} as any;\n\t\t\t\t\tif (item.enabled !== undefined) t.enab = item.enabled;\n\t\t\t\t\tif (item.offset) t.Ofst = { Hrzn: item.offset.x, Vrtc: item.offset.y };\n\t\t\t\t\tif (item.effectsReferencePoint) t.FXRefPoint = { Hrzn: item.effectsReferencePoint.x, Vrtc: item.effectsReferencePoint.y };\n\t\t\t\t\tt.compList = item.compList;\n\t\t\t\t\tdesc.layerSettings.push(t);\n\t\t\t\t}\n\n\t\t\t\t// console.log('cmls', require('util').inspect(desc, false, 99, true));\n\t\t\t\twriteVersionAndDescriptor(writer, '', 'null', desc);\n\t\t\t}, true);\n\t\t}\n\t},\n);\n\naddHandler(\n\t'vstk',\n\thasKey('vectorStroke'),\n\t(reader, target, left) => {\n\t\tconst desc = readVersionAndDescriptor(reader) as StrokeDescriptor;\n\t\t// console.log(require('util').inspect(desc, false, 99, true));\n\n\t\ttarget.vectorStroke = {\n\t\t\tstrokeEnabled: desc.strokeEnabled,\n\t\t\tfillEnabled: desc.fillEnabled,\n\t\t\tlineWidth: parseUnits(desc.strokeStyleLineWidth),\n\t\t\tlineDashOffset: parseUnits(desc.strokeStyleLineDashOffset),\n\t\t\tmiterLimit: desc.strokeStyleMiterLimit,\n\t\t\tlineCapType: strokeStyleLineCapType.decode(desc.strokeStyleLineCapType),\n\t\t\tlineJoinType: strokeStyleLineJoinType.decode(desc.strokeStyleLineJoinType),\n\t\t\tlineAlignment: strokeStyleLineAlignment.decode(desc.strokeStyleLineAlignment),\n\t\t\tscaleLock: desc.strokeStyleScaleLock,\n\t\t\tstrokeAdjust: desc.strokeStyleStrokeAdjust,\n\t\t\tlineDashSet: desc.strokeStyleLineDashSet.map(parseUnits),\n\t\t\tblendMode: BlnM.decode(desc.strokeStyleBlendMode),\n\t\t\topacity: parsePercent(desc.strokeStyleOpacity),\n\t\t\tcontent: parseVectorContent(desc.strokeStyleContent),\n\t\t\tresolution: desc.strokeStyleResolution,\n\t\t};\n\n\t\tskipBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\tconst stroke = target.vectorStroke!;\n\t\tconst desc: StrokeDescriptor = {\n\t\t\tstrokeStyleVersion: 2,\n\t\t\tstrokeEnabled: !!stroke.strokeEnabled,\n\t\t\tfillEnabled: !!stroke.fillEnabled,\n\t\t\tstrokeStyleLineWidth: stroke.lineWidth || { value: 3, units: 'Points' },\n\t\t\tstrokeStyleLineDashOffset: stroke.lineDashOffset || { value: 0, units: 'Points' },\n\t\t\tstrokeStyleMiterLimit: stroke.miterLimit ?? 100,\n\t\t\tstrokeStyleLineCapType: strokeStyleLineCapType.encode(stroke.lineCapType),\n\t\t\tstrokeStyleLineJoinType: strokeStyleLineJoinType.encode(stroke.lineJoinType),\n\t\t\tstrokeStyleLineAlignment: strokeStyleLineAlignment.encode(stroke.lineAlignment),\n\t\t\tstrokeStyleScaleLock: !!stroke.scaleLock,\n\t\t\tstrokeStyleStrokeAdjust: !!stroke.strokeAdjust,\n\t\t\tstrokeStyleLineDashSet: stroke.lineDashSet || [],\n\t\t\tstrokeStyleBlendMode: BlnM.encode(stroke.blendMode),\n\t\t\tstrokeStyleOpacity: unitsPercent(stroke.opacity ?? 1),\n\t\t\tstrokeStyleContent: serializeVectorContent(\n\t\t\t\tstroke.content || { type: 'color', color: { r: 0, g: 0, b: 0 } }).descriptor,\n\t\t\tstrokeStyleResolution: stroke.resolution ?? 72,\n\t\t};\n\n\t\twriteVersionAndDescriptor(writer, '', 'strokeStyle', desc);\n\t},\n);\n\ninterface ArtbDescriptor {\n\tartboardRect: { 'Top ': number; Left: number; Btom: number; Rght: number; };\n\tguideIndeces: any[];\n\tartboardPresetName: string;\n\t'Clr ': DescriptorColor;\n\tartboardBackgroundType: number;\n}\n\naddHandler(\n\t'artb', // per-layer arboard info\n\thasKey('artboard'),\n\t(reader, target, left) => {\n\t\tconst desc = readVersionAndDescriptor(reader) as ArtbDescriptor;\n\t\tconst rect = desc.artboardRect;\n\t\ttarget.artboard = {\n\t\t\trect: { top: rect['Top '], left: rect.Left, bottom: rect.Btom, right: rect.Rght },\n\t\t\tguideIndices: desc.guideIndeces,\n\t\t\tpresetName: desc.artboardPresetName,\n\t\t\tcolor: parseColor(desc['Clr ']),\n\t\t\tbackgroundType: desc.artboardBackgroundType,\n\t\t};\n\n\t\tskipBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\tconst artboard = target.artboard!;\n\t\tconst rect = artboard.rect;\n\t\tconst desc: ArtbDescriptor = {\n\t\t\tartboardRect: { 'Top ': rect.top, Left: rect.left, Btom: rect.bottom, Rght: rect.right },\n\t\t\tguideIndeces: artboard.guideIndices || [],\n\t\t\tartboardPresetName: artboard.presetName || '',\n\t\t\t'Clr ': serializeColor(artboard.color),\n\t\t\tartboardBackgroundType: artboard.backgroundType ?? 1,\n\t\t};\n\n\t\twriteVersionAndDescriptor(writer, '', 'artboard', desc);\n\t},\n);\n\naddHandler(\n\t'sn2P',\n\thasKey('usingAlignedRendering'),\n\t(reader, target) => target.usingAlignedRendering = !!readUint32(reader),\n\t(writer, target) => writeUint32(writer, target.usingAlignedRendering ? 1 : 0),\n);\n\nconst placedLayerTypes: PlacedLayerType[] = ['unknown', 'vector', 'raster', 'image stack'];\n\nfunction parseWarp(warp: WarpDescriptor & QuiltWarpDescriptor): Warp {\n\tconst result: Warp = {\n\t\tstyle: warpStyle.decode(warp.warpStyle),\n\t\t...(warp.warpValues ? { values: warp.warpValues } : { value: warp.warpValue || 0 }),\n\t\tperspective: warp.warpPerspective || 0,\n\t\tperspectiveOther: warp.warpPerspectiveOther || 0,\n\t\trotate: Ornt.decode(warp.warpRotate),\n\t\tbounds: warp.bounds && {\n\t\t\ttop: parseUnitsOrNumber(warp.bounds['Top ']),\n\t\t\tleft: parseUnitsOrNumber(warp.bounds.Left),\n\t\t\tbottom: parseUnitsOrNumber(warp.bounds.Btom),\n\t\t\tright: parseUnitsOrNumber(warp.bounds.Rght),\n\t\t},\n\t\tuOrder: warp.uOrder,\n\t\tvOrder: warp.vOrder,\n\t};\n\n\tif (warp.deformNumRows != null || warp.deformNumCols != null) {\n\t\tresult.deformNumRows = warp.deformNumRows;\n\t\tresult.deformNumCols = warp.deformNumCols;\n\t}\n\n\tconst envelopeWarp = warp.customEnvelopeWarp;\n\tif (envelopeWarp) {\n\t\tresult.customEnvelopeWarp = {\n\t\t\tmeshPoints: [],\n\t\t};\n\n\t\tconst xs = envelopeWarp.meshPoints.find(i => i.type === 'Hrzn')?.values || [];\n\t\tconst ys = envelopeWarp.meshPoints.find(i => i.type === 'Vrtc')?.values || [];\n\n\t\tfor (let i = 0; i < xs.length; i++) {\n\t\t\tresult.customEnvelopeWarp!.meshPoints.push({ x: xs[i], y: ys[i] });\n\t\t}\n\n\t\tif (envelopeWarp.quiltSliceX || envelopeWarp.quiltSliceY) {\n\t\t\tresult.customEnvelopeWarp.quiltSliceX = envelopeWarp.quiltSliceX?.[0]?.values || [];\n\t\t\tresult.customEnvelopeWarp.quiltSliceY = envelopeWarp.quiltSliceY?.[0]?.values || [];\n\t\t}\n\t}\n\n\treturn result;\n}\n\nfunction isQuiltWarp(warp: Warp) {\n\treturn warp.deformNumCols != null || warp.deformNumRows != null ||\n\t\twarp.customEnvelopeWarp?.quiltSliceX || warp.customEnvelopeWarp?.quiltSliceY;\n}\n\nfunction encodeWarp(warp: Warp): WarpDescriptor {\n\tconst bounds = warp.bounds;\n\tconst desc: WarpDescriptor = {\n\t\twarpStyle: warpStyle.encode(warp.style),\n\t\t...(warp.values ? { warpValues: warp.values } : { warpValue: warp.value || 0 }),\n\t\twarpPerspective: warp.perspective || 0,\n\t\twarpPerspectiveOther: warp.perspectiveOther || 0,\n\t\twarpRotate: Ornt.encode(warp.rotate),\n\t\tbounds: /*1 ? { // testing\n\t\t\t_classID: 'classFloatRect',\n\t\t\t'Top ': bounds && bounds.top && bounds.top.value || 0,\n\t\t\tLeft: bounds && bounds.left && bounds.left.value || 0,\n\t\t\tBtom: bounds && bounds.bottom && bounds.bottom.value || 0,\n\t\t\tRght: bounds && bounds.right && bounds.right.value || 0,\n\t\t} :*/ {\n\t\t\t'Top ': unitsValue(bounds && bounds.top || { units: 'Pixels', value: 0 }, 'bounds.top'),\n\t\t\tLeft: unitsValue(bounds && bounds.left || { units: 'Pixels', value: 0 }, 'bounds.left'),\n\t\t\tBtom: unitsValue(bounds && bounds.bottom || { units: 'Pixels', value: 0 }, 'bounds.bottom'),\n\t\t\tRght: unitsValue(bounds && bounds.right || { units: 'Pixels', value: 0 }, 'bounds.right'),\n\t\t},\n\t\tuOrder: warp.uOrder || 0,\n\t\tvOrder: warp.vOrder || 0,\n\t};\n\n\tconst isQuilt = isQuiltWarp(warp);\n\n\tif (isQuilt) {\n\t\tconst desc2 = desc as QuiltWarpDescriptor;\n\t\tdesc2.deformNumRows = warp.deformNumRows || 0;\n\t\tdesc2.deformNumCols = warp.deformNumCols || 0;\n\t}\n\n\tconst customEnvelopeWarp = warp.customEnvelopeWarp;\n\tif (customEnvelopeWarp) {\n\t\tconst meshPoints = customEnvelopeWarp.meshPoints || [];\n\n\t\tif (isQuilt) {\n\t\t\tconst desc2 = desc as QuiltWarpDescriptor;\n\t\t\tdesc2.customEnvelopeWarp = {\n\t\t\t\t_name: '',\n\t\t\t\t_classID: 'customEnvelopeWarp',\n\t\t\t\tquiltSliceX: [{\n\t\t\t\t\ttype: 'quiltSliceX',\n\t\t\t\t\tvalues: customEnvelopeWarp.quiltSliceX || [],\n\t\t\t\t}],\n\t\t\t\tquiltSliceY: [{\n\t\t\t\t\ttype: 'quiltSliceY',\n\t\t\t\t\tvalues: customEnvelopeWarp.quiltSliceY || [],\n\t\t\t\t}],\n\t\t\t\tmeshPoints: [\n\t\t\t\t\t{ type: 'Hrzn', values: meshPoints.map(p => p.x) },\n\t\t\t\t\t{ type: 'Vrtc', values: meshPoints.map(p => p.y) },\n\t\t\t\t],\n\t\t\t};\n\t\t} else {\n\t\t\tdesc.customEnvelopeWarp = {\n\t\t\t\t_name: '',\n\t\t\t\t_classID: 'customEnvelopeWarp',\n\t\t\t\tmeshPoints: [\n\t\t\t\t\t{ type: 'Hrzn', values: meshPoints.map(p => p.x) },\n\t\t\t\t\t{ type: 'Vrtc', values: meshPoints.map(p => p.y) },\n\t\t\t\t],\n\t\t\t};\n\t\t}\n\t}\n\n\treturn desc;\n}\n\naddHandler(\n\t'PlLd',\n\thasKey('placedLayer'),\n\t(reader, target, left) => {\n\t\tif (readSignature(reader) !== 'plcL') throw new Error(`Invalid PlLd signature`);\n\t\tif (readInt32(reader) !== 3) throw new Error(`Invalid PlLd version`);\n\t\tconst id = readPascalString(reader, 1);\n\t\tconst pageNumber = readInt32(reader);\n\t\tconst totalPages = readInt32(reader); // TODO: check how this works ?\n\t\treadInt32(reader); // anitAliasPolicy 16\n\t\tconst placedLayerType = readInt32(reader); // 0 = unknown, 1 = vector, 2 = raster, 3 = image stack\n\t\tif (!placedLayerTypes[placedLayerType]) throw new Error('Invalid PlLd type');\n\t\tconst transform: number[] = [];\n\t\tfor (let i = 0; i < 8; i++) transform.push(readFloat64(reader)); // x, y of 4 corners of the transform\n\t\tconst warpVersion = readInt32(reader);\n\t\tif (warpVersion !== 0) throw new Error(`Invalid Warp version ${warpVersion}`);\n\t\tconst warp: WarpDescriptor & QuiltWarpDescriptor = readVersionAndDescriptor(reader);\n\n\t\ttarget.placedLayer = target.placedLayer || { // skip if SoLd already set it\n\t\t\tid,\n\t\t\ttype: placedLayerTypes[placedLayerType],\n\t\t\tpageNumber,\n\t\t\ttotalPages,\n\t\t\ttransform,\n\t\t\twarp: parseWarp(warp),\n\t\t};\n\n\t\t// console.log('PlLd warp', require('util').inspect(warp, false, 99, true));\n\t\t// console.log('PlLd', require('util').inspect(target.placedLayer, false, 99, true));\n\n\t\tskipBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\tconst placed = target.placedLayer!;\n\t\twriteSignature(writer, 'plcL');\n\t\twriteInt32(writer, 3); // version\n\t\tif (!placed.id || typeof placed.id !== 'string' || !/^[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$/.test(placed.id)) {\n\t\t\tthrow new Error('Placed layer ID must be in a GUID format (example: 20953ddb-9391-11ec-b4f1-c15674f50bc4)');\n\t\t}\n\t\twritePascalString(writer, placed.id, 1);\n\t\twriteInt32(writer, 1); // pageNumber\n\t\twriteInt32(writer, 1); // totalPages\n\t\twriteInt32(writer, 16); // anitAliasPolicy\n\t\tif (placedLayerTypes.indexOf(placed.type) === -1) throw new Error('Invalid placedLayer type');\n\t\twriteInt32(writer, placedLayerTypes.indexOf(placed.type));\n\t\tfor (let i = 0; i < 8; i++) writeFloat64(writer, placed.transform[i]);\n\t\twriteInt32(writer, 0); // warp version\n\t\tconst warp = getWarpFromPlacedLayer(placed);\n\t\tconst isQuilt = isQuiltWarp(warp);\n\t\tconst type = isQuilt ? 'quiltWarp' : 'warp';\n\t\twriteVersionAndDescriptor(writer, '', type, encodeWarp(warp), type);\n\t},\n);\n\ninterface HrznVrtcDescriptor {\n\t_name: '';\n\t_classID: 'Pnt ';\n\tHrzn: DescriptorUnitsValue;\n\tVrtc: DescriptorUnitsValue;\n}\n/*\ninterface K3DLight {\n\t'Nm  ': string;\n\t'Rd  ': number;\n\t'Grn ': number;\n\t'Bl  ': number;\n\thots: number;\n\tFlOf: number;\n\tshdw: number;\n\tattn: boolean;\n\tattt: number;\n\tatta: number;\n\tattb: number;\n\tattc: number;\n\torad: number;\n\tirad: number;\n\tmult: number;\n\tType: number;\n\tison: boolean;\n\tssml: number;\n\tafon: boolean;\n\tafpw: number;\n\tkey3DMatrix: {\n\t\tkey3DMatrixData: Uint8Array;\n\t},\n\t'X   ': number;\n\t'Y   ': number;\n\t'Z   ': number;\n\ttarx: number;\n\ttary: number;\n\ttarz: number;\n\tkey3DPosition: {\n\t\tkey3DXPos: number;\n\t\tkey3DYPos: number;\n\t\tkey3DZPos: number;\n\t\tkey3DXAngle: number;\n\t\tkey3DYAngle: number;\n\t\tkey3DZAngle: number;\n\t};\n}\n*/\n\ntype SoLdDescriptorFilterItem = {\n\t_name: '',\n\t_classID: 'filterFX',\n\t'Nm  ': string;\n\tblendOptions: {\n\t\t_name: '';\n\t\t_classID: 'blendOptions';\n\t\tOpct: DescriptorUnitsValue;\n\t\t'Md  ': string; // blend mode\n\t};\n\tenab: boolean;\n\thasoptions: boolean;\n\tFrgC: DescriptorColor;\n\tBckC: DescriptorColor;\n} & ({\n\tfilterID: 1098281575; // average\n} | {\n\tfilterID: 1114403360; // blur\n} | {\n\tfilterID: 1114403405; // blur more\n} | {\n\tfilterID: 697;\n\tFltr: {\n\t\t_name: 'Box Blur';\n\t\t_classID: 'boxblur';\n\t\t'Rds ': DescriptorUnitsValue;\n\t};\n} | {\n\tfilterID: 1198747202;\n\tFltr: {\n\t\t_name: 'Gaussian Blur' | '高斯模糊';\n\t\t_classID: 'GsnB';\n\t\t'Rds ': DescriptorUnitsValue;\n\t};\n} | {\n\tfilterID: 1299476034;\n\tFltr: {\n\t\t_name: 'Motion Blur';\n\t\t_classID: 'MtnB';\n\t\tAngl: number;\n\t\tDstn: DescriptorUnitsValue;\n\t};\n} | {\n\tfilterID: 1382313026;\n\tFltr: {\n\t\t_name: 'Radial Blur';\n\t\t_classID: 'RdlB';\n\t\tAmnt: number;\n\t\tBlrM: string;\n\t\tBlrQ: string;\n\t};\n} | {\n\tfilterID: 702;\n\tFltr: {\n\t\t_name: 'Shape Blur';\n\t\t_classID: 'shapeBlur';\n\t\t'Rds ': DescriptorUnitsValue;\n\t\tcustomShape: {\n\t\t\t_name: '';\n\t\t\t_classID: 'customShape';\n\t\t\t'Nm  ': string;\n\t\t\tIdnt: string;\n\t\t};\n\t};\n} | {\n\tfilterID: 1399681602;\n\tFltr: {\n\t\t_name: 'Smart Blur';\n\t\t_classID: 'SmrB';\n\t\t'Rds ': number;\n\t\tThsh: number;\n\t\tSmBQ: string;\n\t\tSmBM: string;\n\t};\n} | {\n\tfilterID: 701;\n\tFltr: {\n\t\t_name: 'Surface Blur';\n\t\t_classID: 'surfaceBlur';\n\t\t'Rds ': DescriptorUnitsValue;\n\t\tThsh: number;\n\t};\n} | {\n\tfilterID: 1148416108;\n\tFltr: {\n\t\t_name: 'Displace';\n\t\t_classID: 'Dspl';\n\t\tHrzS: number;\n\t\tVrtS: number;\n\t\tDspM: string;\n\t\tUndA: string;\n\t\tDspF: {\n\t\t\tsig: string;\n\t\t\tpath: string;\n\t\t};\n\t};\n} | {\n\tfilterID: 1349411688;\n\tFltr: {\n\t\t_name: 'Pinch';\n\t\t_classID: 'Pnch';\n\t\tAmnt: number;\n\t};\n} | {\n\tfilterID: 1349284384;\n\tFltr: {\n\t\t_name: 'Polar Coordinates';\n\t\t_classID: 'Plr ';\n\t\tCnvr: string;\n\t};\n} | {\n\tfilterID: 1383099493;\n\tFltr: {\n\t\t_name: 'Ripple';\n\t\t_classID: 'Rple';\n\t\tAmnt: number;\n\t\tRplS: string;\n\t};\n} | {\n\tfilterID: 1399353888;\n\tFltr: {\n\t\t_name: 'Shear';\n\t\t_classID: 'Shr ';\n\t\tShrP: { _name: '', _classID: 'Pnt ', Hrzn: number; Vrtc: number; }[];\n\t\tUndA: string;\n\t\tShrS: number;\n\t\tShrE: number;\n\t};\n} | {\n\tfilterID: 1399875698;\n\tFltr: {\n\t\t_name: 'Spherize';\n\t\t_classID: 'Sphr';\n\t\tAmnt: number;\n\t\tSphM: string;\n\t};\n} | {\n\tfilterID: 1417114220;\n\tFltr: {\n\t\t_name: 'Twirl';\n\t\t_classID: 'Twrl';\n\t\tAngl: number;\n\t};\n} | {\n\tfilterID: 1466005093;\n\tFltr: {\n\t\t_name: 'Wave';\n\t\t_classID: 'Wave';\n\t\tWvtp: string;\n\t\tNmbG: number;\n\t\tWLMn: number;\n\t\tWLMx: number;\n\t\tAmMn: number;\n\t\tAmMx: number;\n\t\tSclH: number;\n\t\tSclV: number;\n\t\tUndA: string;\n\t\tRndS: number;\n\t};\n} | {\n\tfilterID: 1516722791;\n\tFltr: {\n\t\t_name: 'ZigZag';\n\t\t_classID: 'ZgZg';\n\t\tAmnt: number;\n\t\tNmbR: number;\n\t\tZZTy: string;\n\t};\n} | {\n\tfilterID: 1097092723;\n\tFltr: {\n\t\t_name: 'Add Noise';\n\t\t_classID: 'AdNs';\n\t\tDstr: string;\n\t\tNose: DescriptorUnitsValue;\n\t\tMnch: boolean;\n\t\tFlRs: number;\n\t};\n} | {\n\tfilterID: 1148416099;\n} | {\n\tfilterID: 1148417107;\n\tFltr: {\n\t\t_name: 'Dust & Scratches';\n\t\t_classID: 'DstS';\n\t\t'Rds ': number;\n\t\tThsh: number;\n\t};\n} | {\n\tfilterID: 1298427424;\n\tFltr: {\n\t\t_name: 'Median';\n\t\t_classID: 'Mdn ';\n\t\t'Rds ': DescriptorUnitsValue;\n\t};\n} | {\n\tfilterID: 633;\n\tFltr: {\n\t\t_name: 'Reduce Noise';\n\t\t_classID: 'denoise';\n\t\tClNs: DescriptorUnitsValue; // percent\n\t\tShrp: DescriptorUnitsValue; // percent\n\t\tremoveJPEGArtifact: boolean;\n\t\tchannelDenoise: {\n\t\t\t_name: '';\n\t\t\t_classID: 'channelDenoiseParams';\n\t\t\tChnl: string[];\n\t\t\tAmnt: number;\n\t\t\tEdgF?: number;\n\t\t}[];\n\t\tpreset: string;\n\t};\n} | {\n\tfilterID: 1131180616;\n\tFltr: {\n\t\t_name: 'Color Halftone';\n\t\t_classID: 'ClrH';\n\t\t'Rds ': number;\n\t\tAng1: number;\n\t\tAng2: number;\n\t\tAng3: number;\n\t\tAng4: number;\n\t};\n} | {\n\tfilterID: 1131574132;\n\tFltr: {\n\t\t_name: 'Crystallize';\n\t\t_classID: 'Crst';\n\t\tClSz: number;\n\t\tFlRs: number;\n\t};\n} | {\n\tfilterID: 1180922912;\n} | {\n\tfilterID: 1181902701;\n} | {\n\tfilterID: 1299870830;\n\tFltr: {\n\t\t_name: 'Mezzotint';\n\t\t_classID: 'Mztn';\n\t\tMztT: string;\n\t\tFlRs: number;\n\t};\n} | {\n\tfilterID: 1299407648;\n\tFltr: {\n\t\t_name: 'Mosaic';\n\t\t_classID: 'Msc ';\n\t\tClSz: DescriptorUnitsValue;\n\t};\n} | {\n\tfilterID: 1349416044;\n\tFltr: {\n\t\t_name: 'Pointillize';\n\t\t_classID: 'Pntl';\n\t\tClSz: number;\n\t\tFlRs: number;\n\t};\n} | {\n\tfilterID: 1131177075;\n\tFltr: {\n\t\t_name: 'Clouds';\n\t\t_classID: 'Clds';\n\t\tFlRs: number;\n\t};\n} | {\n\tfilterID: 1147564611;\n\tFltr: {\n\t\t_name: 'Difference Clouds',\n\t\t_classID: 'DfrC',\n\t\tFlRs: number;\n\t};\n} | {\n\tfilterID: 1180856947;\n\tFltr: {\n\t\t_name: 'Fibers';\n\t\t_classID: 'Fbrs';\n\t\tVrnc: number;\n\t\tStrg: number;\n\t\tRndS: number;\n\t};\n} | {\n\tfilterID: 1282306886;\n\tFltr: {\n\t\t_name: 'Lens Flare';\n\t\t_classID: 'LnsF';\n\t\tBrgh: number;\n\t\tFlrC: { _name: ''; _classID: 'Pnt '; Hrzn: number; Vrtc: number; };\n\t\t'Lns ': string;\n\t};\n} /*| {\n\tfilterID: 587;\n\tFltr: {\n\t\tk3DLights: K3DLight[];\n\t\tkey3DCurrentCameraPosition: {\n\t\t\tkey3DXPos: number;\n\t\t\tkey3DYPos: number;\n\t\t\tkey3DZPos: number;\n\t\t\tkey3DXAngle: number;\n\t\t\tkey3DYAngle: number;\n\t\t\tkey3DZAngle: number;\n\t\t},\n\t\tGlos: number;\n\t\tMtrl: number;\n\t\tExps: number;\n\t\tAmbB: number;\n\t\tAmbC: DescriptorColor;\n\t\tBmpA: number;\n\t\tBmpC: string[];\n\t\tWdth: number;\n\t\tHght: number;\n\t};\n}*/ | {\n\tfilterID: 1399353968 | 1399353925 | 1399353933;\n} | {\n\tfilterID: 698;\n\tFltr: {\n\t\t_name: 'Smart Sharpen';\n\t\t_classID: 'smartSharpen';\n\t\tAmnt: DescriptorUnitsValue; // %\n\t\t'Rds ': DescriptorUnitsValue;\n\t\tThsh: number;\n\t\tAngl: number;\n\t\tmoreAccurate: boolean;\n\t\tblur: string;\n\t\tpreset: string;\n\t\tsdwM: {\n\t\t\t_name: 'Parameters',\n\t\t\t_classID: 'adaptCorrectTones',\n\t\t\tAmnt: DescriptorUnitsValue; // %\n\t\t\tWdth: DescriptorUnitsValue; // %\n\t\t\t'Rds ': number;\n\t\t};\n\t\thglM: {\n\t\t\t_name: 'Parameters',\n\t\t\t_classID: 'adaptCorrectTones',\n\t\t\tAmnt: DescriptorUnitsValue; // %\n\t\t\tWdth: DescriptorUnitsValue; // %\n\t\t\t'Rds ': number;\n\t\t};\n\t};\n} | {\n\tfilterID: 1433301837;\n\tFltr: {\n\t\t_name: 'Unsharp Mask';\n\t\t_classID: 'UnsM';\n\t\tAmnt: DescriptorUnitsValue; // %\n\t\t'Rds ': DescriptorUnitsValue;\n\t\tThsh: number;\n\t};\n} | {\n\tfilterID: 1147564832;\n\tFltr: {\n\t\t_name: 'Diffuse';\n\t\t_classID: 'Dfs ';\n\t\t'Md  ': string;\n\t\tFlRs: number;\n\t};\n} | {\n\tfilterID: 1164796531;\n\tFltr: {\n\t\t_name: 'Emboss';\n\t\t_classID: 'Embs';\n\t\tAngl: number;\n\t\tHght: number;\n\t\tAmnt: number;\n\t};\n} | {\n\tfilterID: 1165522034;\n\tFltr: {\n\t\t_name: 'Extrude';\n\t\t_classID: 'Extr';\n\t\tExtS: number;\n\t\tExtD: number;\n\t\tExtF: boolean;\n\t\tExtM: boolean;\n\t\tExtT: string;\n\t\tExtR: string;\n\t\tFlRs: number;\n\t};\n} | {\n\tfilterID: 1181639749 | 1399616122;\n} | {\n\tfilterID: 1416393504;\n\tFltr: {\n\t\t_name: 'Tiles';\n\t\t_classID: 'Tls ';\n\t\tTlNm: number;\n\t\tTlOf: number;\n\t\tFlCl: string;\n\t\tFlRs: number;\n\t};\n} | {\n\tfilterID: 1416782659;\n\tFltr: {\n\t\t_name: 'Trace Contour';\n\t\t_classID: 'TrcC';\n\t\t'Lvl ': number;\n\t\t'Edg ': string;\n\t};\n} | {\n\tfilterID: 1466852384;\n\tFltr: {\n\t\t_name: 'Wind';\n\t\t_classID: 'Wnd ';\n\t\tWndM: string;\n\t\tDrct: string;\n\t};\n} | {\n\tfilterID: 1148089458;\n\tFltr: {\n\t\t_name: 'De-Interlace';\n\t\t_classID: 'Dntr';\n\t\tIntE: string;\n\t\tIntC: string;\n\t};\n} | {\n\tfilterID: 1314149187;\n} | {\n\tfilterID: 1131639917;\n\tFltr: {\n\t\t_name: 'Custom';\n\t\t_classID: 'Cstm';\n\t\t'Scl ': number;\n\t\tOfst: number;\n\t\tMtrx: number[];\n\t};\n} | {\n\tfilterID: 1214736464;\n\tFltr: {\n\t\t_name: 'High Pass';\n\t\t_classID: 'HghP';\n\t\t'Rds ': DescriptorUnitsValue;\n\t};\n} | {\n\tfilterID: 1299737888;\n\tFltr: {\n\t\t_name: 'Maximum';\n\t\t_classID: 'Mxm ';\n\t\t'Rds ': DescriptorUnitsValue;\n\t};\n} | {\n\tfilterID: 1299082528;\n\tFltr: {\n\t\t_name: 'Minimum';\n\t\t_classID: 'Mnm ';\n\t\t'Rds ': DescriptorUnitsValue;\n\t};\n} | {\n\tfilterID: 1332114292;\n\tFltr: {\n\t\t_name: 'Offset';\n\t\t_classID: 'Ofst';\n\t\tHrzn: number;\n\t\tVrtc: number;\n\t\t'Fl  ': string;\n\t};\n} | {\n\tfilterID: 991 | 943; // TODO: why 2 different IDs? do we need to handle them separately?\n\tFltr: {\n\t\t_name: 'Rigid Transform';\n\t\t_classID: 'rigidTransform';\n\t\t'null': string[]; // [Ordn.Trgt]\n\t\trigidType: boolean;\n\t\tpuppetShapeList?: {\n\t\t\t_name: '';\n\t\t\t_classID: 'puppetShape';\n\t\t\trigidType: boolean;\n\t\t\tVrsM: number;\n\t\t\tVrsN: number;\n\t\t\toriginalVertexArray: Uint8Array;\n\t\t\tdeformedVertexArray: Uint8Array;\n\t\t\tindexArray: Uint8Array;\n\t\t\tpinOffsets: number[];\n\t\t\tposFinalPins: number[];\n\t\t\tpinVertexIndices: number[];\n\t\t\tPinP: number[];\n\t\t\tPnRt: number[];\n\t\t\tPnOv: boolean[];\n\t\t\tPnDp: number[];\n\t\t\tmeshQuality: number;\n\t\t\tmeshExpansion: number;\n\t\t\tmeshRigidity: number;\n\t\t\timageResolution: number;\n\t\t\tmeshBoundaryPath: {\n\t\t\t\t_name: '';\n\t\t\t\t_classID: 'pathClass';\n\t\t\t\tpathComponents: {\n\t\t\t\t\t_name: '';\n\t\t\t\t\t_classID: 'PaCm';\n\t\t\t\t\tshapeOperation: string; // shapeOperation.xor\n\t\t\t\t\tSbpL: {\n\t\t\t\t\t\t_name: '';\n\t\t\t\t\t\t_classID: 'Sbpl';\n\t\t\t\t\t\tClsp: boolean;\n\t\t\t\t\t\t'Pts ': {\n\t\t\t\t\t\t\t_name: '';\n\t\t\t\t\t\t\t_classID: 'Pthp';\n\t\t\t\t\t\t\tAnch: HrznVrtcDescriptor;\n\t\t\t\t\t\t\t'Fwd ': HrznVrtcDescriptor;\n\t\t\t\t\t\t\t'Bwd ': HrznVrtcDescriptor;\n\t\t\t\t\t\t\tSmoo: boolean;\n\t\t\t\t\t\t}[];\n\t\t\t\t\t}[];\n\t\t\t\t}[];\n\t\t\t};\n\t\t\tselectedPin: number[];\n\t\t}[];\n\t\tPuX0: number;\n\t\tPuX1: number;\n\t\tPuX2: number;\n\t\tPuX3: number;\n\t\tPuY0: number;\n\t\tPuY1: number;\n\t\tPuY2: number;\n\t\tPuY3: number;\n\t}\n} | {\n\tfilterID: 1348620396;\n\tFltr: {\n\t\t_name: 'Oil Paint Plugin';\n\t\t_classID: 'PbPl';\n\t\tKnNm: string;\n\t\tGpuY: boolean;\n\t\tLIWy: boolean;\n\t\tFPth: string;\n\t\t// PNaa: string;\n\t\t// PTaa: number;\n\t\t// PFaa: number;\n\t\t// PNab: string;\n\t\t// PTab: number;\n\t\t// PFab: number;\n\t\t// ...\n\t};\n} /*| {\n\tfilterID: 1282294642;\n\tFltr: {\n\t\t_name: 'Lens Correction',\n\t\t_classID: 'LnCr',\n\t\tLnAg: boolean;\n\t\tLnAc: boolean;\n\t\tLnAv: boolean;\n\t\tLnAs: boolean;\n\t\tLnIp: boolean;\n\t\tLnFo: number;\n\t\tLnPr: string;\n\t\tLnIa: number;\n\t\tLnI0: number;\n\t\tLnI1: number;\n\t\tLnI2: number;\n\t\tLnI3: number;\n\t\tLnRa: number;\n\t\tLnVp: number;\n\t\tLnHp: number;\n\t\tLnSi: number;\n\t\tLnFt: number;\n\t\tLnSb: number;\n\t\tLnSt: number;\n\t\tLnRc: number;\n\t\tLnGm: number;\n\t\tLnBy: number;\n\t\tLnNa: number;\n\t\tLnIh: number;\n\t\tLnIv: number;\n\t\tLnIs: DescriptorColor;\n\t\tLnNm: boolean;\n\t};\n}*//* | {\n\tfilterID: 2089;\n\tFltr: {\n\t\t_name: 'Adaptive Wide Angle';\n\t\t_classID: '22C3EEBF-A978-4ca9-91DF-E4F0CCEE5ACE';\n\t\tactV: number;\n\t\tcnsD?: Uint8Array;\n\t\tprjM: string;\n\t\tregM: string;\n\t\tfocL: number;\n\t\tPhyF: number;\n\t\tCrpF: number;\n\t\timgS: number;\n\t\timgX: number;\n\t\timgY: number;\n\t};\n}*//* | {\n\tfilterID: 1195730531;\n\tFltr: {\n\t\t\t_name: 'Filter Gallery';\n\t\t\t_classID: 'GEfc';\n\t\t} & ({\n\t\t\tGEfk: string;\n\t\t\tPncl: number;\n\t\t\tStrP: number;\n\t\t\tPprB: number;\n\t\t} | ...);\n\t};\n}*/ | {\n\tfilterID: 1215521360;\n\tFltr: {\n\t\t_name: 'HSB/HSL',\n\t\t_classID: 'HsbP',\n\t\tInpt: string;\n\t\tOtpt: string;\n\t};\n} | {\n\tfilterID: 1122;\n\tFltr: {\n\t\t_name: 'Oil Paint';\n\t\t_classID: 'oilPaint';\n\t\tlightingOn: boolean;\n\t\tstylization: number;\n\t\tcleanliness: number;\n\t\tbrushScale: number;\n\t\tmicroBrush: number;\n\t\tLghD: number;\n\t\tspecularity: number;\n\t};\n} | {\n\tfilterID: 1282492025;\n\tFltr: {\n\t\t_name: 'Liquify';\n\t\t_classID: 'LqFy';\n\t\tLqMe: Uint8Array;\n\t};\n} | {\n\tfilterID: 442;\n\tFltr: {\n\t\t_name: 'Perspective Warp';\n\t\t_classID: 'perspectiveWarpTransform';\n\t\tquads: { indices: number[]; }[];\n\t\tvertices: HrznVrtcDescriptor[];\n\t\twarpedVertices: HrznVrtcDescriptor[];\n\t};\n} | {\n\tfilterID: 1131574899;\n\tFltr: {\n\t\t_name: 'Curves';\n\t\t_classID: 'Crvs';\n\t\tpresetKind: string; // 'presetKindType.presetKindCustom';\n\t\tAdjs?: {\n\t\t\t_name: '';\n\t\t\t_classID: 'CrvA';\n\t\t\tChnl: string[]; // 'Chnl.Cmps' | 'Chnl.Rd  ' | 'Chnl.Grn ' | 'Chnl.Bl  '\n\t\t\t'Crv '?: FilterCurvesCurvePoint[];\n\t\t\tMpng?: number[];\n\t\t}[];\n\t};\n} | {\n\tfilterID: 1231976050;\n} | {\n\tfilterID: 1114793795;\n\tFltr: {\n\t\t_name: 'Brightness/Contrast';\n\t\t_classID: 'BrgC';\n\t\tBrgh: number;\n\t\tCntr: number;\n\t\tuseLegacy: boolean;\n\t};\n});\n\ninterface FilterCurvesCurvePoint {\n\t_name: '';\n\t_classID: 'Pnt ';\n\tHrzn: 0;\n\tVrtc: 0;\n\tCnty?: boolean;\n}\n\ninterface SoLdDescriptorFilter {\n\t_name: '',\n\t_classID: 'filterFXStyle',\n\tenab: boolean,\n\tvalidAtPosition: boolean,\n\tfilterMaskEnable: boolean,\n\tfilterMaskLinked: boolean,\n\tfilterMaskExtendWithWhite: boolean,\n\tfilterFXList: SoLdDescriptorFilterItem[];\n}\n\nfunction uint8ToFloat32(array: Uint8Array) {\n\treturn new Float32Array(array.buffer.slice(array.byteOffset), 0, array.byteLength / 4);\n}\n\nfunction uint8ToUint32(array: Uint8Array) {\n\treturn new Uint32Array(array.buffer.slice(array.byteOffset), 0, array.byteLength / 4);\n}\n\nfunction toUint8(array: Uint32Array | Float32Array) {\n\treturn new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\n}\n\nfunction arrayToPoints(array: number[] | Uint32Array | Float32Array) {\n\tconst points: { x: number; y: number }[] = [];\n\n\tfor (let i = 0; i < array.length; i += 2) {\n\t\tpoints.push({ x: array[i], y: array[i + 1] });\n\t}\n\n\treturn points;\n}\n\nfunction pointsToArray(points: { x: number; y: number }[]) {\n\tconst array: number[] = [];\n\tfor (let i = 0; i < points.length; i++) {\n\t\tarray.push(points[i].x, points[i].y);\n\t}\n\treturn array;\n}\n\nfunction uint8ToPoints(array: Uint8Array) {\n\treturn arrayToPoints(uint8ToFloat32(array));\n}\n\nfunction hrznVrtcToPoint(desc: HrznVrtcDescriptor) {\n\treturn {\n\t\tx: parseUnits(desc.Hrzn),\n\t\ty: parseUnits(desc.Vrtc),\n\t};\n}\n\nfunction pointToHrznVrtc(point: { x: UnitsValue; y: UnitsValue; }): HrznVrtcDescriptor {\n\treturn {\n\t\t_name: '',\n\t\t_classID: 'Pnt ',\n\t\tHrzn: unitsValue(point.x, 'x'),\n\t\tVrtc: unitsValue(point.y, 'y'),\n\t};\n}\n\nfunction parseFilterFXItem(f: SoLdDescriptorFilterItem, options: ReadOptions): Filter | undefined {\n\tconst base: Omit<Filter, 'type' | 'filter'> = {\n\t\tname: f['Nm  '],\n\t\topacity: parsePercent(f.blendOptions.Opct),\n\t\tblendMode: BlnM.decode(f.blendOptions['Md  ']),\n\t\tenabled: f.enab,\n\t\thasOptions: f.hasoptions,\n\t\tforegroundColor: parseColor(f.FrgC),\n\t\tbackgroundColor: parseColor(f.BckC),\n\t};\n\n\tif ('Fltr' in f) {\n\t\tswitch (f.Fltr._classID) {\n\t\t\tcase 'boxblur': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'box blur',\n\t\t\t\tfilter: {\n\t\t\t\t\tradius: parseUnits(f.Fltr['Rds ']),\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'GsnB': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'gaussian blur',\n\t\t\t\tfilter: {\n\t\t\t\t\tradius: parseUnits(f.Fltr['Rds ']),\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'MtnB': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'motion blur',\n\t\t\t\tfilter: {\n\t\t\t\t\tangle: f.Fltr.Angl,\n\t\t\t\t\tdistance: parseUnits(f.Fltr.Dstn),\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'RdlB': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'radial blur',\n\t\t\t\tfilter: {\n\t\t\t\t\tamount: f.Fltr.Amnt,\n\t\t\t\t\tmethod: BlrM.decode(f.Fltr.BlrM),\n\t\t\t\t\tquality: BlrQ.decode(f.Fltr.BlrQ),\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'shapeBlur': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'shape blur',\n\t\t\t\tfilter: {\n\t\t\t\t\tradius: parseUnits(f.Fltr['Rds ']),\n\t\t\t\t\tcustomShape: { name: f.Fltr.customShape['Nm  '], id: f.Fltr.customShape.Idnt },\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'SmrB': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'smart blur',\n\t\t\t\tfilter: {\n\t\t\t\t\tradius: f.Fltr['Rds '],\n\t\t\t\t\tthreshold: f.Fltr.Thsh,\n\t\t\t\t\tquality: SmBQ.decode(f.Fltr.SmBQ),\n\t\t\t\t\tmode: SmBM.decode(f.Fltr.SmBM),\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'surfaceBlur': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'surface blur',\n\t\t\t\tfilter: {\n\t\t\t\t\tradius: parseUnits(f.Fltr['Rds ']),\n\t\t\t\t\tthreshold: f.Fltr.Thsh,\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'Dspl': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'displace',\n\t\t\t\tfilter: {\n\t\t\t\t\thorizontalScale: f.Fltr.HrzS,\n\t\t\t\t\tverticalScale: f.Fltr.VrtS,\n\t\t\t\t\tdisplacementMap: DspM.decode(f.Fltr.DspM),\n\t\t\t\t\tundefinedAreas: UndA.decode(f.Fltr.UndA),\n\t\t\t\t\tdisplacementFile: {\n\t\t\t\t\t\tsignature: f.Fltr.DspF.sig,\n\t\t\t\t\t\tpath: f.Fltr.DspF.path, // TODO: this is decoded incorrectly ???\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'Pnch': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'pinch',\n\t\t\t\tfilter: {\n\t\t\t\t\tamount: f.Fltr.Amnt,\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'Plr ': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'polar coordinates',\n\t\t\t\tfilter: {\n\t\t\t\t\tconversion: Cnvr.decode(f.Fltr.Cnvr),\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'Rple': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'ripple',\n\t\t\t\tfilter: {\n\t\t\t\t\tamount: f.Fltr.Amnt,\n\t\t\t\t\tsize: RplS.decode(f.Fltr.RplS),\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'Shr ': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'shear',\n\t\t\t\tfilter: {\n\t\t\t\t\tshearPoints: f.Fltr.ShrP.map(p => ({ x: p.Hrzn, y: p.Vrtc })),\n\t\t\t\t\tshearStart: f.Fltr.ShrS,\n\t\t\t\t\tshearEnd: f.Fltr.ShrE,\n\t\t\t\t\tundefinedAreas: UndA.decode(f.Fltr.UndA),\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'Sphr': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'spherize',\n\t\t\t\tfilter: {\n\t\t\t\t\tamount: f.Fltr.Amnt,\n\t\t\t\t\tmode: SphM.decode(f.Fltr.SphM),\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'Twrl': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'twirl',\n\t\t\t\tfilter: {\n\t\t\t\t\tangle: f.Fltr.Angl,\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'Wave': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'wave',\n\t\t\t\tfilter: {\n\t\t\t\t\tnumberOfGenerators: f.Fltr.NmbG,\n\t\t\t\t\ttype: Wvtp.decode(f.Fltr.Wvtp),\n\t\t\t\t\twavelength: { min: f.Fltr.WLMn, max: f.Fltr.WLMx },\n\t\t\t\t\tamplitude: { min: f.Fltr.AmMn, max: f.Fltr.AmMx },\n\t\t\t\t\tscale: { x: f.Fltr.SclH, y: f.Fltr.SclV },\n\t\t\t\t\trandomSeed: f.Fltr.RndS,\n\t\t\t\t\tundefinedAreas: UndA.decode(f.Fltr.UndA),\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'ZgZg': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'zigzag',\n\t\t\t\tfilter: {\n\t\t\t\t\tamount: f.Fltr.Amnt,\n\t\t\t\t\tridges: f.Fltr.NmbR,\n\t\t\t\t\tstyle: ZZTy.decode(f.Fltr.ZZTy),\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'AdNs': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'add noise',\n\t\t\t\tfilter: {\n\t\t\t\t\tamount: parsePercent(f.Fltr.Nose),\n\t\t\t\t\tdistribution: Dstr.decode(f.Fltr.Dstr),\n\t\t\t\t\tmonochromatic: f.Fltr.Mnch,\n\t\t\t\t\trandomSeed: f.Fltr.FlRs,\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'DstS': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'dust and scratches',\n\t\t\t\tfilter: {\n\t\t\t\t\tradius: f.Fltr['Rds '],\n\t\t\t\t\tthreshold: f.Fltr.Thsh,\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'Mdn ': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'median',\n\t\t\t\tfilter: {\n\t\t\t\t\tradius: parseUnits(f.Fltr['Rds ']),\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'denoise': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'reduce noise',\n\t\t\t\tfilter: {\n\t\t\t\t\tpreset: f.Fltr.preset,\n\t\t\t\t\tremoveJpegArtifact: f.Fltr.removeJPEGArtifact,\n\t\t\t\t\treduceColorNoise: parsePercent(f.Fltr.ClNs),\n\t\t\t\t\tsharpenDetails: parsePercent(f.Fltr.Shrp),\n\t\t\t\t\tchannelDenoise: f.Fltr.channelDenoise.map(c => ({\n\t\t\t\t\t\tchannels: c.Chnl.map(Chnl.decode),\n\t\t\t\t\t\tamount: c.Amnt,\n\t\t\t\t\t\t...(c.EdgF ? { preserveDetails: c.EdgF } : {}),\n\t\t\t\t\t})),\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'ClrH': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'color halftone',\n\t\t\t\tfilter: {\n\t\t\t\t\tradius: f.Fltr['Rds '],\n\t\t\t\t\tangle1: f.Fltr.Ang1,\n\t\t\t\t\tangle2: f.Fltr.Ang2,\n\t\t\t\t\tangle3: f.Fltr.Ang3,\n\t\t\t\t\tangle4: f.Fltr.Ang4,\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'Crst': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'crystallize',\n\t\t\t\tfilter: {\n\t\t\t\t\tcellSize: f.Fltr.ClSz,\n\t\t\t\t\trandomSeed: f.Fltr.FlRs,\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'Mztn': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'mezzotint',\n\t\t\t\tfilter: {\n\t\t\t\t\ttype: MztT.decode(f.Fltr.MztT),\n\t\t\t\t\trandomSeed: f.Fltr.FlRs,\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'Msc ': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'mosaic',\n\t\t\t\tfilter: {\n\t\t\t\t\tcellSize: parseUnits(f.Fltr.ClSz),\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'Pntl': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'pointillize',\n\t\t\t\tfilter: {\n\t\t\t\t\tcellSize: f.Fltr.ClSz,\n\t\t\t\t\trandomSeed: f.Fltr.FlRs,\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'Clds': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'clouds',\n\t\t\t\tfilter: {\n\t\t\t\t\trandomSeed: f.Fltr.FlRs,\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'DfrC': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'difference clouds',\n\t\t\t\tfilter: {\n\t\t\t\t\trandomSeed: f.Fltr.FlRs,\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'Fbrs': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'fibers',\n\t\t\t\tfilter: {\n\t\t\t\t\tvariance: f.Fltr.Vrnc,\n\t\t\t\t\tstrength: f.Fltr.Strg,\n\t\t\t\t\trandomSeed: f.Fltr.RndS,\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'LnsF': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'lens flare',\n\t\t\t\tfilter: {\n\t\t\t\t\tbrightness: f.Fltr.Brgh,\n\t\t\t\t\tposition: { x: f.Fltr.FlrC.Hrzn, y: f.Fltr.FlrC.Vrtc },\n\t\t\t\t\tlensType: Lns.decode(f.Fltr['Lns ']),\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'smartSharpen': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'smart sharpen',\n\t\t\t\tfilter: {\n\t\t\t\t\tamount: parsePercent(f.Fltr.Amnt),\n\t\t\t\t\tradius: parseUnits(f.Fltr['Rds ']),\n\t\t\t\t\tthreshold: f.Fltr.Thsh,\n\t\t\t\t\tangle: f.Fltr.Angl,\n\t\t\t\t\tmoreAccurate: f.Fltr.moreAccurate,\n\t\t\t\t\tblur: blurType.decode(f.Fltr.blur),\n\t\t\t\t\tpreset: f.Fltr.preset,\n\t\t\t\t\tshadow: {\n\t\t\t\t\t\tfadeAmount: parsePercent(f.Fltr.sdwM.Amnt),\n\t\t\t\t\t\ttonalWidth: parsePercent(f.Fltr.sdwM.Wdth),\n\t\t\t\t\t\tradius: f.Fltr.sdwM['Rds '],\n\t\t\t\t\t},\n\t\t\t\t\thighlight: {\n\t\t\t\t\t\tfadeAmount: parsePercent(f.Fltr.hglM.Amnt),\n\t\t\t\t\t\ttonalWidth: parsePercent(f.Fltr.hglM.Wdth),\n\t\t\t\t\t\tradius: f.Fltr.hglM['Rds '],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'UnsM': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'unsharp mask',\n\t\t\t\tfilter: {\n\t\t\t\t\tamount: parsePercent(f.Fltr.Amnt),\n\t\t\t\t\tradius: parseUnits(f.Fltr['Rds ']),\n\t\t\t\t\tthreshold: f.Fltr.Thsh,\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'Dfs ': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'diffuse',\n\t\t\t\tfilter: {\n\t\t\t\t\tmode: DfsM.decode(f.Fltr['Md  ']),\n\t\t\t\t\trandomSeed: f.Fltr.FlRs,\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'Embs': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'emboss',\n\t\t\t\tfilter: {\n\t\t\t\t\tangle: f.Fltr.Angl,\n\t\t\t\t\theight: f.Fltr.Hght,\n\t\t\t\t\tamount: f.Fltr.Amnt,\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'Extr': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'extrude',\n\t\t\t\tfilter: {\n\t\t\t\t\ttype: ExtT.decode(f.Fltr.ExtT),\n\t\t\t\t\tsize: f.Fltr.ExtS,\n\t\t\t\t\tdepth: f.Fltr.ExtD,\n\t\t\t\t\tdepthMode: ExtR.decode(f.Fltr.ExtR),\n\t\t\t\t\trandomSeed: f.Fltr.FlRs,\n\t\t\t\t\tsolidFrontFaces: f.Fltr.ExtF,\n\t\t\t\t\tmaskIncompleteBlocks: f.Fltr.ExtM,\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'Tls ': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'tiles',\n\t\t\t\tfilter: {\n\t\t\t\t\tnumberOfTiles: f.Fltr.TlNm,\n\t\t\t\t\tmaximumOffset: f.Fltr.TlOf,\n\t\t\t\t\tfillEmptyAreaWith: FlCl.decode(f.Fltr.FlCl),\n\t\t\t\t\trandomSeed: f.Fltr.FlRs,\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'TrcC': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'trace contour',\n\t\t\t\tfilter: {\n\t\t\t\t\tlevel: f.Fltr['Lvl '],\n\t\t\t\t\tedge: CntE.decode(f.Fltr['Edg ']),\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'Wnd ': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'wind',\n\t\t\t\tfilter: {\n\t\t\t\t\tmethod: WndM.decode(f.Fltr.WndM),\n\t\t\t\t\tdirection: Drct.decode(f.Fltr.Drct),\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'Dntr': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'de-interlace',\n\t\t\t\tfilter: {\n\t\t\t\t\teliminate: IntE.decode(f.Fltr.IntE),\n\t\t\t\t\tnewFieldsBy: IntC.decode(f.Fltr.IntC),\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'Cstm': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'custom',\n\t\t\t\tfilter: {\n\t\t\t\t\tscale: f.Fltr['Scl '],\n\t\t\t\t\toffset: f.Fltr.Ofst,\n\t\t\t\t\tmatrix: f.Fltr.Mtrx,\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'HghP': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'high pass',\n\t\t\t\tfilter: {\n\t\t\t\t\tradius: parseUnits(f.Fltr['Rds ']),\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'Mxm ': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'maximum',\n\t\t\t\tfilter: {\n\t\t\t\t\tradius: parseUnits(f.Fltr['Rds ']),\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'Mnm ': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'minimum',\n\t\t\t\tfilter: {\n\t\t\t\t\tradius: parseUnits(f.Fltr['Rds ']),\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'Ofst': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'offset',\n\t\t\t\tfilter: {\n\t\t\t\t\thorizontal: f.Fltr.Hrzn,\n\t\t\t\t\tvertical: f.Fltr.Vrtc,\n\t\t\t\t\tundefinedAreas: FlMd.decode(f.Fltr['Fl  ']),\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'rigidTransform': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'puppet',\n\t\t\t\tfilter: {\n\t\t\t\t\trigidType: f.Fltr.rigidType,\n\t\t\t\t\tbounds: [\n\t\t\t\t\t\t{ x: f.Fltr.PuX0, y: f.Fltr.PuY0, },\n\t\t\t\t\t\t{ x: f.Fltr.PuX1, y: f.Fltr.PuY1, },\n\t\t\t\t\t\t{ x: f.Fltr.PuX2, y: f.Fltr.PuY2, },\n\t\t\t\t\t\t{ x: f.Fltr.PuX3, y: f.Fltr.PuY3, },\n\t\t\t\t\t],\n\t\t\t\t\tpuppetShapeList: f.Fltr.puppetShapeList!.map(p => ({\n\t\t\t\t\t\trigidType: p.rigidType,\n\t\t\t\t\t\t// TODO: VrsM\n\t\t\t\t\t\t// TODO: VrsN\n\t\t\t\t\t\toriginalVertexArray: uint8ToPoints(p.originalVertexArray),\n\t\t\t\t\t\tdeformedVertexArray: uint8ToPoints(p.deformedVertexArray),\n\t\t\t\t\t\tindexArray: Array.from(uint8ToUint32(p.indexArray)),\n\t\t\t\t\t\tpinOffsets: arrayToPoints(p.pinOffsets),\n\t\t\t\t\t\tposFinalPins: arrayToPoints(p.posFinalPins),\n\t\t\t\t\t\tpinVertexIndices: p.pinVertexIndices,\n\t\t\t\t\t\tselectedPin: p.selectedPin,\n\t\t\t\t\t\tpinPosition: arrayToPoints(p.PinP),\n\t\t\t\t\t\tpinRotation: p.PnRt,\n\t\t\t\t\t\tpinOverlay: p.PnOv,\n\t\t\t\t\t\tpinDepth: p.PnDp,\n\t\t\t\t\t\tmeshQuality: p.meshQuality,\n\t\t\t\t\t\tmeshExpansion: p.meshExpansion,\n\t\t\t\t\t\tmeshRigidity: p.meshRigidity,\n\t\t\t\t\t\timageResolution: p.imageResolution,\n\t\t\t\t\t\tmeshBoundaryPath: {\n\t\t\t\t\t\t\tpathComponents: p.meshBoundaryPath.pathComponents.map(c => ({\n\t\t\t\t\t\t\t\tshapeOperation: c.shapeOperation.split('.')[1],\n\t\t\t\t\t\t\t\tpaths: c.SbpL.map(t => ({\n\t\t\t\t\t\t\t\t\tclosed: t.Clsp,\n\t\t\t\t\t\t\t\t\tpoints: t['Pts '].map(pt => ({\n\t\t\t\t\t\t\t\t\t\tanchor: hrznVrtcToPoint(pt.Anch),\n\t\t\t\t\t\t\t\t\t\tforward: hrznVrtcToPoint(pt['Fwd ']),\n\t\t\t\t\t\t\t\t\t\tbackward: hrznVrtcToPoint(pt['Bwd ']),\n\t\t\t\t\t\t\t\t\t\tsmooth: pt.Smoo,\n\t\t\t\t\t\t\t\t\t})),\n\t\t\t\t\t\t\t\t})),\n\t\t\t\t\t\t\t})),\n\t\t\t\t\t\t},\n\t\t\t\t\t})),\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'PbPl': {\n\t\t\t\tconst parameters: { name: string; value: number; }[] = [];\n\t\t\t\tconst Flrt = f.Fltr as any;\n\n\t\t\t\tfor (let i = 0; i < fromAtoZ.length; i++) {\n\t\t\t\t\tif (!Flrt[`PN${fromAtoZ[i]}a`]) break;\n\n\t\t\t\t\tfor (let j = 0; j < fromAtoZ.length; j++) {\n\t\t\t\t\t\tif (!Flrt[`PN${fromAtoZ[i]}${fromAtoZ[j]}`]) break;\n\n\t\t\t\t\t\tparameters.push({\n\t\t\t\t\t\t\tname: Flrt[`PN${fromAtoZ[i]}${fromAtoZ[j]}`],\n\t\t\t\t\t\t\tvalue: Flrt[`PF${fromAtoZ[i]}${fromAtoZ[j]}`]\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...base,\n\t\t\t\t\ttype: 'oil paint plugin',\n\t\t\t\t\tfilter: {\n\t\t\t\t\t\tname: f.Fltr.KnNm,\n\t\t\t\t\t\tgpu: f.Fltr.GpuY,\n\t\t\t\t\t\tlighting: f.Fltr.LIWy,\n\t\t\t\t\t\tparameters,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t}\n\t\t\t// case 2089: return {\n\t\t\t// \t...base,\n\t\t\t// \ttype: 'adaptive wide angle',\n\t\t\t// \tparams: {\n\t\t\t// \t\tcorrection: prjM.decode(f.Fltr.prjM),\n\t\t\t// \t\tfocalLength: f.Fltr.focL,\n\t\t\t// \t\tcropFactor: f.Fltr.CrpF,\n\t\t\t// \t\timageScale: f.Fltr.imgS,\n\t\t\t// \t\timageX: f.Fltr.imgX,\n\t\t\t// \t\timageY: f.Fltr.imgY,\n\t\t\t// \t},\n\t\t\t// };\n\t\t\tcase 'HsbP': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'hsb/hsl',\n\t\t\t\tfilter: {\n\t\t\t\t\tinputMode: ClrS.decode(f.Fltr.Inpt) as any,\n\t\t\t\t\trowOrder: ClrS.decode(f.Fltr.Otpt) as any,\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'oilPaint': return {\n\t\t\t\t...base,\n\t\t\t\ttype: 'oil paint',\n\t\t\t\tfilter: {\n\t\t\t\t\tlightingOn: f.Fltr.lightingOn,\n\t\t\t\t\tstylization: f.Fltr.stylization,\n\t\t\t\t\tcleanliness: f.Fltr.cleanliness,\n\t\t\t\t\tbrushScale: f.Fltr.brushScale,\n\t\t\t\t\tmicroBrush: f.Fltr.microBrush,\n\t\t\t\t\tlightDirection: f.Fltr.LghD,\n\t\t\t\t\tspecularity: f.Fltr.specularity,\n\t\t\t\t},\n\t\t\t};\n\t\t\tcase 'LqFy': {\n\t\t\t\treturn {\n\t\t\t\t\t...base,\n\t\t\t\t\ttype: 'liquify',\n\t\t\t\t\tfilter: {\n\t\t\t\t\t\tliquifyMesh: f.Fltr.LqMe,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t};\n\t\t\tcase 'perspectiveWarpTransform': {\n\t\t\t\treturn {\n\t\t\t\t\t...base,\n\t\t\t\t\ttype: 'perspective warp',\n\t\t\t\t\tfilter: {\n\t\t\t\t\t\tvertices: f.Fltr.vertices.map(hrznVrtcToPoint),\n\t\t\t\t\t\twarpedVertices: f.Fltr.warpedVertices.map(hrznVrtcToPoint),\n\t\t\t\t\t\tquads: f.Fltr.quads.map(q => q.indices),\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t};\n\t\t\tcase 'Crvs': {\n\t\t\t\treturn {\n\t\t\t\t\t...base,\n\t\t\t\t\ttype: 'curves',\n\t\t\t\t\tfilter: {\n\t\t\t\t\t\tpresetKind: presetKindType.decode(f.Fltr.presetKind),\n\t\t\t\t\t\t...(f.Fltr.Adjs ? {\n\t\t\t\t\t\t\tadjustments: f.Fltr.Adjs.map(a => {\n\t\t\t\t\t\t\t\tconst channels = a.Chnl.map(Chnl.decode);\n\t\t\t\t\t\t\t\tif (a['Crv ']) {\n\t\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\tchannels,\n\t\t\t\t\t\t\t\t\t\tcurve: a['Crv '].map(c => {\n\t\t\t\t\t\t\t\t\t\t\tconst point: { x: number; y: number; curved?: boolean; } = { x: c.Hrzn, y: c.Vrtc };\n\t\t\t\t\t\t\t\t\t\t\tif (c.Cnty) point.curved = true;\n\t\t\t\t\t\t\t\t\t\t\treturn point;\n\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t} else if (a.Mpng) {\n\t\t\t\t\t\t\t\t\treturn { channels, values: a.Mpng };\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tthrow new Error(`Unknown curve adjustment`);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t} : {}),\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t};\n\t\t\tcase 'BrgC': {\n\t\t\t\treturn {\n\t\t\t\t\t...base,\n\t\t\t\t\ttype: 'brightness/contrast',\n\t\t\t\t\tfilter: {\n\t\t\t\t\t\tbrightness: f.Fltr.Brgh,\n\t\t\t\t\t\tcontrast: f.Fltr.Cntr,\n\t\t\t\t\t\tuseLegacy: !!f.Fltr.useLegacy,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t};\n\t\t\tdefault:\n\t\t\t\tif (options.throwForMissingFeatures) {\n\t\t\t\t\t// console.log('FILTER', require('util').inspect(f, false, 99, true));\n\t\t\t\t\tthrow new Error(`Unknown filter classId: ${(f as any).Fltr._classID}`);\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t}\n\t} else {\n\t\tswitch (f.filterID) {\n\t\t\tcase 1098281575: return { ...base, type: 'average' };\n\t\t\tcase 1114403360: return { ...base, type: 'blur' };\n\t\t\tcase 1114403405: return { ...base, type: 'blur more' };\n\t\t\tcase 1148416099: return { ...base, type: 'despeckle' };\n\t\t\tcase 1180922912: return { ...base, type: 'facet' };\n\t\t\tcase 1181902701: return { ...base, type: 'fragment' };\n\t\t\tcase 1399353968: return { ...base, type: 'sharpen' };\n\t\t\tcase 1399353925: return { ...base, type: 'sharpen edges' };\n\t\t\tcase 1399353933: return { ...base, type: 'sharpen more' };\n\t\t\tcase 1181639749: return { ...base, type: 'find edges' };\n\t\t\tcase 1399616122: return { ...base, type: 'solarize' };\n\t\t\tcase 1314149187: return { ...base, type: 'ntsc colors' };\n\t\t\tcase 1231976050: return { ...base, type: 'invert' }\n\t\t\tdefault:\n\t\t\t\tif (options.throwForMissingFeatures) {\n\t\t\t\t\t// console.log('FILTER', require('util').inspect(f, false, 99, true));\n\t\t\t\t\tthrow new Error(`Unknown filterID: ${(f as any).filterID}`);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\nfunction parseFilterFX(desc: SoLdDescriptorFilter, options: ReadOptions): PlacedLayerFilter {\n\treturn {\n\t\tenabled: desc.enab,\n\t\tvalidAtPosition: desc.validAtPosition,\n\t\tmaskEnabled: desc.filterMaskEnable,\n\t\tmaskLinked: desc.filterMaskLinked,\n\t\tmaskExtendWithWhite: desc.filterMaskExtendWithWhite,\n\t\tlist: desc.filterFXList.map(x => parseFilterFXItem(x, options)).filter((x): x is Filter => !!x),\n\t};\n}\n\nfunction uvRadius(t: { radius: UnitsValue; }) {\n\treturn unitsValue(t.radius, 'radius');\n}\n\nfunction serializeFilterFXItem(f: Filter): SoLdDescriptorFilterItem {\n\tconst base: Omit<SoLdDescriptorFilterItem, 'filterID' | 'filter'> = {\n\t\t_name: '',\n\t\t_classID: 'filterFX',\n\t\t'Nm  ': f.name,\n\t\tblendOptions: {\n\t\t\t_name: '',\n\t\t\t_classID: 'blendOptions',\n\t\t\tOpct: unitsPercentF(f.opacity),\n\t\t\t'Md  ': BlnM.encode(f.blendMode),\n\t\t},\n\t\tenab: f.enabled,\n\t\thasoptions: f.hasOptions,\n\t\tFrgC: serializeColor(f.foregroundColor),\n\t\tBckC: serializeColor(f.backgroundColor),\n\t};\n\n\tswitch (f.type) {\n\t\tcase 'average': return { ...base, filterID: 1098281575 };\n\t\tcase 'blur': return { ...base, filterID: 1114403360 };\n\t\tcase 'blur more': return { ...base, filterID: 1114403405 };\n\t\tcase 'box blur': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Box Blur',\n\t\t\t\t_classID: 'boxblur',\n\t\t\t\t'Rds ': uvRadius(f.filter),\n\t\t\t},\n\t\t\tfilterID: 697,\n\t\t};\n\t\tcase 'gaussian blur': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t// _name: '高斯模糊', // Testing\n\t\t\t\t_name: 'Gaussian Blur',\n\t\t\t\t_classID: 'GsnB',\n\t\t\t\t'Rds ': uvRadius(f.filter),\n\t\t\t},\n\t\t\tfilterID: 1198747202,\n\t\t};\n\t\tcase 'motion blur': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Motion Blur',\n\t\t\t\t_classID: 'MtnB',\n\t\t\t\tAngl: f.filter.angle,\n\t\t\t\tDstn: unitsValue(f.filter.distance, 'distance'),\n\t\t\t},\n\t\t\tfilterID: 1299476034,\n\t\t};\n\t\tcase 'radial blur': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Radial Blur',\n\t\t\t\t_classID: 'RdlB',\n\t\t\t\tAmnt: f.filter.amount,\n\t\t\t\tBlrM: BlrM.encode(f.filter.method),\n\t\t\t\tBlrQ: BlrQ.encode(f.filter.quality),\n\t\t\t},\n\t\t\tfilterID: 1382313026,\n\t\t};\n\t\tcase 'shape blur': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Shape Blur',\n\t\t\t\t_classID: 'shapeBlur',\n\t\t\t\t'Rds ': uvRadius(f.filter),\n\t\t\t\tcustomShape: {\n\t\t\t\t\t_name: '',\n\t\t\t\t\t_classID: 'customShape',\n\t\t\t\t\t'Nm  ': f.filter.customShape.name,\n\t\t\t\t\tIdnt: f.filter.customShape.id,\n\t\t\t\t}\n\t\t\t},\n\t\t\tfilterID: 702,\n\t\t};\n\t\tcase 'smart blur': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Smart Blur',\n\t\t\t\t_classID: 'SmrB',\n\t\t\t\t'Rds ': f.filter.radius,\n\t\t\t\tThsh: f.filter.threshold,\n\t\t\t\tSmBQ: SmBQ.encode(f.filter.quality),\n\t\t\t\tSmBM: SmBM.encode(f.filter.mode),\n\t\t\t},\n\t\t\tfilterID: 1399681602,\n\t\t};\n\t\tcase 'surface blur': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Surface Blur',\n\t\t\t\t_classID: 'surfaceBlur',\n\t\t\t\t'Rds ': uvRadius(f.filter),\n\t\t\t\tThsh: f.filter.threshold,\n\t\t\t},\n\t\t\tfilterID: 701,\n\t\t};\n\t\tcase 'displace': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Displace',\n\t\t\t\t_classID: 'Dspl',\n\t\t\t\tHrzS: f.filter.horizontalScale,\n\t\t\t\tVrtS: f.filter.verticalScale,\n\t\t\t\tDspM: DspM.encode(f.filter.displacementMap),\n\t\t\t\tUndA: UndA.encode(f.filter.undefinedAreas),\n\t\t\t\tDspF: {\n\t\t\t\t\tsig: f.filter.displacementFile.signature,\n\t\t\t\t\tpath: f.filter.displacementFile.path,\n\t\t\t\t},\n\t\t\t},\n\t\t\tfilterID: 1148416108,\n\t\t};\n\t\tcase 'pinch': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Pinch',\n\t\t\t\t_classID: 'Pnch',\n\t\t\t\tAmnt: f.filter.amount,\n\t\t\t},\n\t\t\tfilterID: 1349411688,\n\t\t};\n\t\tcase 'polar coordinates': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Polar Coordinates',\n\t\t\t\t_classID: 'Plr ',\n\t\t\t\tCnvr: Cnvr.encode(f.filter.conversion),\n\t\t\t},\n\t\t\tfilterID: 1349284384,\n\t\t};\n\t\tcase 'ripple': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Ripple',\n\t\t\t\t_classID: 'Rple',\n\t\t\t\tAmnt: f.filter.amount,\n\t\t\t\tRplS: RplS.encode(f.filter.size),\n\t\t\t},\n\t\t\tfilterID: 1383099493,\n\t\t};\n\t\tcase 'shear': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Shear',\n\t\t\t\t_classID: 'Shr ',\n\t\t\t\tShrP: f.filter.shearPoints.map(p => ({ _name: '', _classID: 'Pnt ', Hrzn: p.x, Vrtc: p.y })),\n\t\t\t\tUndA: UndA.encode(f.filter.undefinedAreas),\n\t\t\t\tShrS: f.filter.shearStart,\n\t\t\t\tShrE: f.filter.shearEnd,\n\t\t\t},\n\t\t\tfilterID: 1399353888,\n\t\t};\n\t\tcase 'spherize': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Spherize',\n\t\t\t\t_classID: 'Sphr',\n\t\t\t\tAmnt: f.filter.amount,\n\t\t\t\tSphM: SphM.encode(f.filter.mode),\n\t\t\t},\n\t\t\tfilterID: 1399875698,\n\t\t};\n\t\tcase 'twirl': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Twirl',\n\t\t\t\t_classID: 'Twrl',\n\t\t\t\tAngl: f.filter.angle,\n\t\t\t},\n\t\t\tfilterID: 1417114220,\n\t\t};\n\t\tcase 'wave': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Wave',\n\t\t\t\t_classID: 'Wave',\n\t\t\t\tWvtp: Wvtp.encode(f.filter.type),\n\t\t\t\tNmbG: f.filter.numberOfGenerators,\n\t\t\t\tWLMn: f.filter.wavelength.min,\n\t\t\t\tWLMx: f.filter.wavelength.max,\n\t\t\t\tAmMn: f.filter.amplitude.min,\n\t\t\t\tAmMx: f.filter.amplitude.max,\n\t\t\t\tSclH: f.filter.scale.x,\n\t\t\t\tSclV: f.filter.scale.y,\n\t\t\t\tUndA: UndA.encode(f.filter.undefinedAreas),\n\t\t\t\tRndS: f.filter.randomSeed,\n\t\t\t},\n\t\t\tfilterID: 1466005093,\n\t\t};\n\t\tcase 'zigzag': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'ZigZag',\n\t\t\t\t_classID: 'ZgZg',\n\t\t\t\tAmnt: f.filter.amount,\n\t\t\t\tNmbR: f.filter.ridges,\n\t\t\t\tZZTy: ZZTy.encode(f.filter.style),\n\t\t\t},\n\t\t\tfilterID: 1516722791,\n\t\t};\n\t\tcase 'add noise': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Add Noise',\n\t\t\t\t_classID: 'AdNs',\n\t\t\t\tDstr: Dstr.encode(f.filter.distribution),\n\t\t\t\tNose: unitsPercentF(f.filter.amount),\n\t\t\t\tMnch: f.filter.monochromatic,\n\t\t\t\tFlRs: f.filter.randomSeed,\n\t\t\t},\n\t\t\tfilterID: 1097092723,\n\t\t};\n\t\tcase 'despeckle': return { ...base, filterID: 1148416099 };\n\t\tcase 'dust and scratches': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Dust & Scratches',\n\t\t\t\t_classID: 'DstS',\n\t\t\t\t'Rds ': f.filter.radius,\n\t\t\t\tThsh: f.filter.threshold,\n\t\t\t},\n\t\t\tfilterID: 1148417107,\n\t\t};\n\t\tcase 'median': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Median',\n\t\t\t\t_classID: 'Mdn ',\n\t\t\t\t'Rds ': uvRadius(f.filter),\n\t\t\t},\n\t\t\tfilterID: 1298427424,\n\t\t};\n\t\tcase 'reduce noise': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Reduce Noise',\n\t\t\t\t_classID: 'denoise',\n\t\t\t\tClNs: unitsPercentF(f.filter.reduceColorNoise),\n\t\t\t\tShrp: unitsPercentF(f.filter.sharpenDetails),\n\t\t\t\tremoveJPEGArtifact: f.filter.removeJpegArtifact,\n\t\t\t\tchannelDenoise: f.filter.channelDenoise.map(c => ({\n\t\t\t\t\t_name: '',\n\t\t\t\t\t_classID: 'channelDenoiseParams',\n\t\t\t\t\tChnl: c.channels.map(i => Chnl.encode(i)),\n\t\t\t\t\tAmnt: c.amount,\n\t\t\t\t\t...(c.preserveDetails ? { EdgF: c.preserveDetails } : {}),\n\t\t\t\t})),\n\t\t\t\tpreset: f.filter.preset,\n\t\t\t},\n\t\t\tfilterID: 633,\n\t\t};\n\t\tcase 'color halftone': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Color Halftone',\n\t\t\t\t_classID: 'ClrH',\n\t\t\t\t'Rds ': f.filter.radius,\n\t\t\t\tAng1: f.filter.angle1,\n\t\t\t\tAng2: f.filter.angle2,\n\t\t\t\tAng3: f.filter.angle3,\n\t\t\t\tAng4: f.filter.angle4,\n\t\t\t},\n\t\t\tfilterID: 1131180616,\n\t\t};\n\t\tcase 'crystallize': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Crystallize',\n\t\t\t\t_classID: 'Crst',\n\t\t\t\tClSz: f.filter.cellSize,\n\t\t\t\tFlRs: f.filter.randomSeed,\n\t\t\t},\n\t\t\tfilterID: 1131574132,\n\t\t};\n\t\tcase 'facet': return { ...base, filterID: 1180922912 };\n\t\tcase 'fragment': return { ...base, filterID: 1181902701 };\n\t\tcase 'mezzotint': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Mezzotint',\n\t\t\t\t_classID: 'Mztn',\n\t\t\t\tMztT: MztT.encode(f.filter.type),\n\t\t\t\tFlRs: f.filter.randomSeed,\n\t\t\t},\n\t\t\tfilterID: 1299870830,\n\t\t};\n\t\tcase 'mosaic': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Mosaic',\n\t\t\t\t_classID: 'Msc ',\n\t\t\t\tClSz: unitsValue(f.filter.cellSize, 'cellSize'),\n\t\t\t},\n\t\t\tfilterID: 1299407648,\n\t\t};\n\t\tcase 'pointillize': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Pointillize',\n\t\t\t\t_classID: 'Pntl',\n\t\t\t\tClSz: f.filter.cellSize,\n\t\t\t\tFlRs: f.filter.randomSeed,\n\t\t\t},\n\t\t\tfilterID: 1349416044,\n\t\t};\n\t\tcase 'clouds': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Clouds',\n\t\t\t\t_classID: 'Clds',\n\t\t\t\tFlRs: f.filter.randomSeed,\n\t\t\t},\n\t\t\tfilterID: 1131177075,\n\t\t};\n\t\tcase 'difference clouds': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Difference Clouds',\n\t\t\t\t_classID: 'DfrC',\n\t\t\t\tFlRs: f.filter.randomSeed,\n\t\t\t},\n\t\t\tfilterID: 1147564611,\n\t\t};\n\t\tcase 'fibers': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Fibers',\n\t\t\t\t_classID: 'Fbrs',\n\t\t\t\tVrnc: f.filter.variance,\n\t\t\t\tStrg: f.filter.strength,\n\t\t\t\tRndS: f.filter.randomSeed,\n\t\t\t},\n\t\t\tfilterID: 1180856947,\n\t\t};\n\t\tcase 'lens flare': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Lens Flare',\n\t\t\t\t_classID: 'LnsF',\n\t\t\t\tBrgh: f.filter.brightness,\n\t\t\t\tFlrC: {\n\t\t\t\t\t_name: '',\n\t\t\t\t\t_classID: 'Pnt ',\n\t\t\t\t\tHrzn: f.filter.position.x,\n\t\t\t\t\tVrtc: f.filter.position.y,\n\t\t\t\t},\n\t\t\t\t'Lns ': Lns.encode(f.filter.lensType),\n\t\t\t},\n\t\t\tfilterID: 1282306886,\n\t\t};\n\t\tcase 'sharpen': return { ...base, filterID: 1399353968 };\n\t\tcase 'sharpen edges': return { ...base, filterID: 1399353925 };\n\t\tcase 'sharpen more': return { ...base, filterID: 1399353933 };\n\t\tcase 'smart sharpen': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Smart Sharpen',\n\t\t\t\t_classID: 'smartSharpen',\n\t\t\t\tAmnt: unitsPercentF(f.filter.amount),\n\t\t\t\t'Rds ': uvRadius(f.filter),\n\t\t\t\tThsh: f.filter.threshold,\n\t\t\t\tAngl: f.filter.angle,\n\t\t\t\tmoreAccurate: f.filter.moreAccurate,\n\t\t\t\tblur: blurType.encode(f.filter.blur),\n\t\t\t\tpreset: f.filter.preset,\n\t\t\t\tsdwM: {\n\t\t\t\t\t_name: 'Parameters',\n\t\t\t\t\t_classID: 'adaptCorrectTones',\n\t\t\t\t\tAmnt: unitsPercentF(f.filter.shadow.fadeAmount),\n\t\t\t\t\tWdth: unitsPercentF(f.filter.shadow.tonalWidth),\n\t\t\t\t\t'Rds ': f.filter.shadow.radius,\n\t\t\t\t},\n\t\t\t\thglM: {\n\t\t\t\t\t_name: 'Parameters',\n\t\t\t\t\t_classID: 'adaptCorrectTones',\n\t\t\t\t\tAmnt: unitsPercentF(f.filter.highlight.fadeAmount),\n\t\t\t\t\tWdth: unitsPercentF(f.filter.highlight.tonalWidth),\n\t\t\t\t\t'Rds ': f.filter.highlight.radius,\n\t\t\t\t},\n\t\t\t},\n\t\t\tfilterID: 698,\n\t\t};\n\t\tcase 'unsharp mask': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Unsharp Mask',\n\t\t\t\t_classID: 'UnsM',\n\t\t\t\tAmnt: unitsPercentF(f.filter.amount),\n\t\t\t\t'Rds ': uvRadius(f.filter),\n\t\t\t\tThsh: f.filter.threshold,\n\t\t\t},\n\t\t\tfilterID: 1433301837,\n\t\t};\n\t\tcase 'diffuse': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Diffuse',\n\t\t\t\t_classID: 'Dfs ',\n\t\t\t\t'Md  ': DfsM.encode(f.filter.mode),\n\t\t\t\tFlRs: f.filter.randomSeed,\n\t\t\t},\n\t\t\tfilterID: 1147564832,\n\t\t};\n\t\tcase 'emboss': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Emboss',\n\t\t\t\t_classID: 'Embs',\n\t\t\t\tAngl: f.filter.angle,\n\t\t\t\tHght: f.filter.height,\n\t\t\t\tAmnt: f.filter.amount,\n\t\t\t},\n\t\t\tfilterID: 1164796531,\n\t\t};\n\t\tcase 'extrude': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Extrude',\n\t\t\t\t_classID: 'Extr',\n\t\t\t\tExtS: f.filter.size,\n\t\t\t\tExtD: f.filter.depth,\n\t\t\t\tExtF: f.filter.solidFrontFaces,\n\t\t\t\tExtM: f.filter.maskIncompleteBlocks,\n\t\t\t\tExtT: ExtT.encode(f.filter.type),\n\t\t\t\tExtR: ExtR.encode(f.filter.depthMode),\n\t\t\t\tFlRs: f.filter.randomSeed,\n\t\t\t},\n\t\t\tfilterID: 1165522034,\n\t\t};\n\t\tcase 'find edges': return { ...base, filterID: 1181639749 };\n\t\tcase 'solarize': return { ...base, filterID: 1399616122 };\n\t\tcase 'tiles': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Tiles',\n\t\t\t\t_classID: 'Tls ',\n\t\t\t\tTlNm: f.filter.numberOfTiles,\n\t\t\t\tTlOf: f.filter.maximumOffset,\n\t\t\t\tFlCl: FlCl.encode(f.filter.fillEmptyAreaWith),\n\t\t\t\tFlRs: f.filter.randomSeed,\n\t\t\t},\n\t\t\tfilterID: 1416393504,\n\t\t};\n\t\tcase 'trace contour': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Trace Contour',\n\t\t\t\t_classID: 'TrcC',\n\t\t\t\t'Lvl ': f.filter.level,\n\t\t\t\t'Edg ': CntE.encode(f.filter.edge),\n\t\t\t},\n\t\t\tfilterID: 1416782659,\n\t\t};\n\t\tcase 'wind': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Wind',\n\t\t\t\t_classID: 'Wnd ',\n\t\t\t\tWndM: WndM.encode(f.filter.method),\n\t\t\t\tDrct: Drct.encode(f.filter.direction),\n\t\t\t},\n\t\t\tfilterID: 1466852384,\n\t\t};\n\t\tcase 'de-interlace': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'De-Interlace',\n\t\t\t\t_classID: 'Dntr',\n\t\t\t\tIntE: IntE.encode(f.filter.eliminate),\n\t\t\t\tIntC: IntC.encode(f.filter.newFieldsBy),\n\t\t\t},\n\t\t\tfilterID: 1148089458,\n\t\t};\n\t\tcase 'ntsc colors': return { ...base, filterID: 1314149187 };\n\t\tcase 'invert': return { ...base, filterID: 1231976050 };\n\t\tcase 'custom': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Custom',\n\t\t\t\t_classID: 'Cstm',\n\t\t\t\t'Scl ': f.filter.scale,\n\t\t\t\tOfst: f.filter.offset,\n\t\t\t\tMtrx: f.filter.matrix,\n\t\t\t},\n\t\t\tfilterID: 1131639917,\n\t\t};\n\t\tcase 'high pass': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'High Pass',\n\t\t\t\t_classID: 'HghP',\n\t\t\t\t'Rds ': uvRadius(f.filter),\n\t\t\t},\n\t\t\tfilterID: 1214736464,\n\t\t};\n\t\tcase 'maximum': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Maximum',\n\t\t\t\t_classID: 'Mxm ',\n\t\t\t\t'Rds ': uvRadius(f.filter),\n\t\t\t},\n\t\t\tfilterID: 1299737888,\n\t\t};\n\t\tcase 'minimum': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Minimum',\n\t\t\t\t_classID: 'Mnm ',\n\t\t\t\t'Rds ': uvRadius(f.filter),\n\t\t\t},\n\t\t\tfilterID: 1299082528,\n\t\t};\n\t\tcase 'offset': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Offset',\n\t\t\t\t_classID: 'Ofst',\n\t\t\t\tHrzn: f.filter.horizontal,\n\t\t\t\tVrtc: f.filter.vertical,\n\t\t\t\t'Fl  ': FlMd.encode(f.filter.undefinedAreas),\n\t\t\t},\n\t\t\tfilterID: 1332114292,\n\t\t};\n\t\tcase 'puppet': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Rigid Transform',\n\t\t\t\t_classID: 'rigidTransform',\n\t\t\t\t'null': ['Ordn.Trgt'], // TODO: ???\n\t\t\t\trigidType: f.filter.rigidType,\n\t\t\t\tpuppetShapeList: f.filter.puppetShapeList.map(p => ({\n\t\t\t\t\t_name: '',\n\t\t\t\t\t_classID: 'puppetShape',\n\t\t\t\t\trigidType: p.rigidType,\n\t\t\t\t\tVrsM: 1, // TODO: ???\n\t\t\t\t\tVrsN: 0, // TODO: ???\n\t\t\t\t\toriginalVertexArray: toUint8(new Float32Array(pointsToArray(p.originalVertexArray))),\n\t\t\t\t\tdeformedVertexArray: toUint8(new Float32Array(pointsToArray(p.deformedVertexArray))),\n\t\t\t\t\tindexArray: toUint8(new Uint32Array(p.indexArray)),\n\t\t\t\t\tpinOffsets: pointsToArray(p.pinOffsets),\n\t\t\t\t\tposFinalPins: pointsToArray(p.posFinalPins),\n\t\t\t\t\tpinVertexIndices: p.pinVertexIndices,\n\t\t\t\t\tPinP: pointsToArray(p.pinPosition),\n\t\t\t\t\tPnRt: p.pinRotation,\n\t\t\t\t\tPnOv: p.pinOverlay,\n\t\t\t\t\tPnDp: p.pinDepth,\n\t\t\t\t\tmeshQuality: p.meshQuality,\n\t\t\t\t\tmeshExpansion: p.meshExpansion,\n\t\t\t\t\tmeshRigidity: p.meshRigidity,\n\t\t\t\t\timageResolution: p.imageResolution,\n\t\t\t\t\tmeshBoundaryPath: {\n\t\t\t\t\t\t_name: '',\n\t\t\t\t\t\t_classID: 'pathClass',\n\t\t\t\t\t\tpathComponents: p.meshBoundaryPath.pathComponents.map(c => ({\n\t\t\t\t\t\t\t_name: '',\n\t\t\t\t\t\t\t_classID: 'PaCm',\n\t\t\t\t\t\t\tshapeOperation: `shapeOperation.${c.shapeOperation}`,\n\t\t\t\t\t\t\tSbpL: c.paths.map(path => ({\n\t\t\t\t\t\t\t\t_name: '',\n\t\t\t\t\t\t\t\t_classID: 'Sbpl',\n\t\t\t\t\t\t\t\tClsp: path.closed,\n\t\t\t\t\t\t\t\t'Pts ': path.points.map(pt => ({\n\t\t\t\t\t\t\t\t\t_name: '',\n\t\t\t\t\t\t\t\t\t_classID: 'Pthp',\n\t\t\t\t\t\t\t\t\tAnch: pointToHrznVrtc(pt.anchor),\n\t\t\t\t\t\t\t\t\t'Fwd ': pointToHrznVrtc(pt.forward),\n\t\t\t\t\t\t\t\t\t'Bwd ': pointToHrznVrtc(pt.backward),\n\t\t\t\t\t\t\t\t\tSmoo: pt.smooth,\n\t\t\t\t\t\t\t\t})),\n\t\t\t\t\t\t\t})),\n\t\t\t\t\t\t})),\n\t\t\t\t\t},\n\t\t\t\t\tselectedPin: p.selectedPin,\n\t\t\t\t})),\n\t\t\t\tPuX0: f.filter.bounds[0].x,\n\t\t\t\tPuX1: f.filter.bounds[1].x,\n\t\t\t\tPuX2: f.filter.bounds[2].x,\n\t\t\t\tPuX3: f.filter.bounds[3].x,\n\t\t\t\tPuY0: f.filter.bounds[0].y,\n\t\t\t\tPuY1: f.filter.bounds[1].y,\n\t\t\t\tPuY2: f.filter.bounds[2].y,\n\t\t\t\tPuY3: f.filter.bounds[3].y,\n\t\t\t},\n\t\t\tfilterID: 991,\n\t\t};\n\t\tcase 'oil paint plugin': {\n\t\t\tconst params: any = {};\n\n\t\t\tfor (let i = 0; i < f.filter.parameters.length; i++) {\n\t\t\t\tconst { name, value } = f.filter.parameters[i];\n\t\t\t\tconst suffix = `${fromAtoZ[Math.floor(i / fromAtoZ.length)]}${fromAtoZ[i % fromAtoZ.length]}`;\n\t\t\t\tparams[`PN${suffix}`] = name;\n\t\t\t\tparams[`PT${suffix}`] = 0;\n\t\t\t\tparams[`PF${suffix}`] = value;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...base,\n\t\t\t\tFltr: {\n\t\t\t\t\t_name: 'Oil Paint Plugin',\n\t\t\t\t\t_classID: 'PbPl',\n\t\t\t\t\tKnNm: f.filter.name,\n\t\t\t\t\tGpuY: f.filter.gpu,\n\t\t\t\t\tLIWy: f.filter.lighting,\n\t\t\t\t\tFPth: '1',\n\t\t\t\t\t...params,\n\t\t\t\t},\n\t\t\t\tfilterID: 1348620396,\n\t\t\t};\n\t\t}\n\t\tcase 'oil paint': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Oil Paint',\n\t\t\t\t_classID: 'oilPaint',\n\t\t\t\tlightingOn: f.filter.lightingOn,\n\t\t\t\tstylization: f.filter.stylization,\n\t\t\t\tcleanliness: f.filter.cleanliness,\n\t\t\t\tbrushScale: f.filter.brushScale,\n\t\t\t\tmicroBrush: f.filter.microBrush,\n\t\t\t\tLghD: f.filter.lightDirection,\n\t\t\t\tspecularity: f.filter.specularity,\n\t\t\t},\n\t\t\tfilterID: 1122,\n\t\t};\n\t\tcase 'liquify': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Liquify',\n\t\t\t\t_classID: 'LqFy',\n\t\t\t\tLqMe: f.filter.liquifyMesh,\n\t\t\t},\n\t\t\tfilterID: 1282492025,\n\t\t};\n\t\tcase 'perspective warp': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Perspective Warp',\n\t\t\t\t_classID: 'perspectiveWarpTransform',\n\t\t\t\tvertices: f.filter.vertices.map(pointToHrznVrtc),\n\t\t\t\twarpedVertices: f.filter.warpedVertices.map(pointToHrznVrtc),\n\t\t\t\tquads: f.filter.quads.map(indices => ({ indices })),\n\t\t\t},\n\t\t\tfilterID: 442,\n\t\t};\n\t\tcase 'curves': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Curves',\n\t\t\t\t_classID: 'Crvs',\n\t\t\t\tpresetKind: presetKindType.encode(f.filter.presetKind),\n\t\t\t\t...(f.filter.adjustments ? {\n\t\t\t\t\tAdjs: f.filter.adjustments.map(a => 'curve' in a ? {\n\t\t\t\t\t\t_name: '',\n\t\t\t\t\t\t_classID: 'CrvA',\n\t\t\t\t\t\tChnl: a.channels.map(Chnl.encode),\n\t\t\t\t\t\t'Crv ': a.curve.map(c => ({\n\t\t\t\t\t\t\t_name: '',\n\t\t\t\t\t\t\t_classID: 'Pnt ',\n\t\t\t\t\t\t\tHrzn: c.x,\n\t\t\t\t\t\t\tVrtc: c.y,\n\t\t\t\t\t\t\t...(c.curved ? { Cnty: true } : {}),\n\t\t\t\t\t\t}) as FilterCurvesCurvePoint),\n\t\t\t\t\t} : {\n\t\t\t\t\t\t_name: '',\n\t\t\t\t\t\t_classID: 'CrvA',\n\t\t\t\t\t\tChnl: a.channels.map(Chnl.encode),\n\t\t\t\t\t\tMpng: a.values,\n\t\t\t\t\t})\n\t\t\t\t} : {}),\n\t\t\t},\n\t\t\tfilterID: 1131574899,\n\t\t};\n\t\tcase 'brightness/contrast': return {\n\t\t\t...base,\n\t\t\tFltr: {\n\t\t\t\t_name: 'Brightness/Contrast',\n\t\t\t\t_classID: 'BrgC',\n\t\t\t\tBrgh: f.filter.brightness,\n\t\t\t\tCntr: f.filter.contrast,\n\t\t\t\tuseLegacy: !!f.filter.useLegacy,\n\t\t\t},\n\t\t\tfilterID: 1114793795,\n\t\t};\n\t\t// case 'hsb/hsl': return {\n\t\t// TODO: ...\n\t\t// };\n\t\tdefault: throw new Error(`Unknow filter type: ${(f as any).type}`);\n\t}\n}\n\ninterface SoLdDescriptor {\n\tIdnt: string;\n\tplaced: string;\n\tPgNm: number;\n\ttotalPages: number;\n\tCrop?: number;\n\tframeStep: FractionDescriptor;\n\tduration: FractionDescriptor;\n\tframeCount: number;\n\tAnnt: number;\n\tType: number;\n\tTrnf: number[];\n\tnonAffineTransform: number[];\n\tquiltWarp?: QuiltWarpDescriptor;\n\twarp: WarpDescriptor;\n\t'Sz  ': { _name: '', _classID: 'Pnt ', Wdth: number; Hght: number; };\n\tRslt: DescriptorUnitsValue;\n\tfilterFX?: SoLdDescriptorFilter;\n\tcomp?: number; // TODO: support this ?\n\tcompInfo?: { compID: number; originalCompID: number; }; // TODO: support this ?\n\tImpr?: {}; // ???\n\tClMg?: { // TODO: support this ?\n\t\t_name: '';\n\t\t_classID: 'ClMg';\n\t\tplacedLayerOCIOConversion: string; // 'placedLayerOCIOConversion.placedLayerOCIOConvertEmbedded'\n\t};\n}\n\n// let t: any;\n\nfunction getWarpFromPlacedLayer(placed: PlacedLayer): Warp {\n\tif (placed.warp) return placed.warp;\n\n\tif (!placed.width || !placed.height) throw new Error('You must provide width and height of the linked image in placedLayer');\n\n\tconst w = placed.width;\n\tconst h = placed.height;\n\tconst x0 = 0, x1 = w / 3, x2 = w * 2 / 3, x3 = w;\n\tconst y0 = 0, y1 = h / 3, y2 = h * 2 / 3, y3 = h;\n\n\treturn {\n\t\tstyle: 'custom',\n\t\tvalue: 0,\n\t\tperspective: 0,\n\t\tperspectiveOther: 0,\n\t\trotate: 'horizontal',\n\t\tbounds: {\n\t\t\ttop: { value: 0, units: 'Pixels' },\n\t\t\tleft: { value: 0, units: 'Pixels' },\n\t\t\tbottom: { value: h, units: 'Pixels' },\n\t\t\tright: { value: w, units: 'Pixels' },\n\t\t},\n\t\tuOrder: 4,\n\t\tvOrder: 4,\n\t\tcustomEnvelopeWarp: {\n\t\t\tmeshPoints: [\n\t\t\t\t{ x: x0, y: y0 }, { x: x1, y: y0 }, { x: x2, y: y0 }, { x: x3, y: y0 },\n\t\t\t\t{ x: x0, y: y1 }, { x: x1, y: y1 }, { x: x2, y: y1 }, { x: x3, y: y1 },\n\t\t\t\t{ x: x0, y: y2 }, { x: x1, y: y2 }, { x: x2, y: y2 }, { x: x3, y: y2 },\n\t\t\t\t{ x: x0, y: y3 }, { x: x1, y: y3 }, { x: x2, y: y3 }, { x: x3, y: y3 },\n\t\t\t],\n\t\t},\n\t};\n}\n\naddHandler(\n\t'SoLd',\n\thasKey('placedLayer'),\n\t(reader, target, left) => {\n\t\tif (readSignature(reader) !== 'soLD') throw new Error(`Invalid SoLd type`);\n\t\tconst version = readInt32(reader);\n\t\tif (version !== 4 && version !== 5) throw new Error(`Invalid SoLd version`);\n\t\tconst desc: SoLdDescriptor = readVersionAndDescriptor(reader, true);\n\t\t// console.log('SoLd', require('util').inspect(desc, false, 99, true));\n\t\t// console.log('SoLd.warp', require('util').inspect(desc.warp, false, 99, true));\n\t\t// console.log('SoLd.quiltWarp', require('util').inspect(desc.quiltWarp, false, 99, true));\n\t\t// desc.filterFX!.filterFXList[0].Fltr.puppetShapeList[0].meshBoundaryPath.pathComponents[0].SbpL[0]['Pts '] = [];\n\t\t// console.log('read', require('util').inspect(desc.filterFX, false, 99, true));\n\t\t// console.log('filterFXList[0]', require('util').inspect((desc as any).filterFX.filterFXList[0], false, 99, true));\n\t\t// t = desc;\n\n\t\ttarget.placedLayer = {\n\t\t\tid: desc.Idnt,\n\t\t\tplaced: desc.placed,\n\t\t\ttype: placedLayerTypes[desc.Type],\n\t\t\tpageNumber: desc.PgNm,\n\t\t\ttotalPages: desc.totalPages,\n\t\t\tframeStep: frac(desc.frameStep),\n\t\t\tduration: frac(desc.duration),\n\t\t\tframeCount: desc.frameCount,\n\t\t\ttransform: desc.Trnf,\n\t\t\twidth: desc['Sz  '].Wdth,\n\t\t\theight: desc['Sz  '].Hght,\n\t\t\tresolution: parseUnits(desc.Rslt),\n\t\t\twarp: parseWarp((desc.quiltWarp || desc.warp) as any),\n\t\t};\n\n\t\tif (desc.nonAffineTransform && desc.nonAffineTransform.some((x, i) => x !== desc.Trnf[i])) {\n\t\t\ttarget.placedLayer.nonAffineTransform = desc.nonAffineTransform;\n\t\t}\n\n\t\tif (desc.Crop) target.placedLayer.crop = desc.Crop;\n\t\tif (desc.comp) target.placedLayer.comp = desc.comp;\n\t\tif (desc.compInfo) {\n\t\t\ttarget.placedLayer.compInfo = {\n\t\t\t\tcompID: desc.compInfo.compID,\n\t\t\t\toriginalCompID: desc.compInfo.originalCompID,\n\t\t\t};\n\t\t}\n\t\tif (desc.filterFX) target.placedLayer.filter = parseFilterFX(desc.filterFX, reader);\n\n\t\t// console.log('filter', require('util').inspect(target.placedLayer.filter, false, 99, true));\n\n\t\tskipBytes(reader, left()); // HACK\n\t},\n\t(writer, target) => {\n\t\twriteSignature(writer, 'soLD');\n\t\twriteInt32(writer, 4); // version\n\n\t\tconst placed = target.placedLayer!;\n\n\t\tif (!placed.id || typeof placed.id !== 'string' || !/^[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$/.test(placed.id)) {\n\t\t\tthrow new Error('Placed layer ID must be in a GUID format (example: 20953ddb-9391-11ec-b4f1-c15674f50bc4)');\n\t\t}\n\n\t\tconst desc: SoLdDescriptor = {\n\t\t\tIdnt: placed.id,\n\t\t\tplaced: placed.placed ?? placed.id,\n\t\t\tPgNm: placed.pageNumber || 1,\n\t\t\ttotalPages: placed.totalPages || 1,\n\t\t\t...(placed.crop ? { Crop: placed.crop } : {}),\n\t\t\tframeStep: placed.frameStep || { numerator: 0, denominator: 600 },\n\t\t\tduration: placed.duration || { numerator: 0, denominator: 600 },\n\t\t\tframeCount: placed.frameCount || 0,\n\t\t\tAnnt: 16,\n\t\t\tType: placedLayerTypes.indexOf(placed.type),\n\t\t\tTrnf: placed.transform,\n\t\t\tnonAffineTransform: placed.nonAffineTransform ?? placed.transform,\n\t\t\t// quiltWarp: {} as any,\n\t\t\twarp: encodeWarp(getWarpFromPlacedLayer(placed)),\n\t\t\t'Sz  ': {\n\t\t\t\t_name: '',\n\t\t\t\t_classID: 'Pnt ',\n\t\t\t\tWdth: placed.width || 0, // TODO: find size ?\n\t\t\t\tHght: placed.height || 0, // TODO: find size ?\n\t\t\t},\n\t\t\tRslt: placed.resolution ? unitsValue(placed.resolution, 'resolution') : { units: 'Density', value: 72 },\n\t\t};\n\n\t\tif (placed.filter) {\n\t\t\tdesc.filterFX = {\n\t\t\t\t_name: '',\n\t\t\t\t_classID: 'filterFXStyle',\n\t\t\t\tenab: placed.filter.enabled,\n\t\t\t\tvalidAtPosition: placed.filter.validAtPosition,\n\t\t\t\tfilterMaskEnable: placed.filter.maskEnabled,\n\t\t\t\tfilterMaskLinked: placed.filter.maskLinked,\n\t\t\t\tfilterMaskExtendWithWhite: placed.filter.maskExtendWithWhite,\n\t\t\t\tfilterFXList: placed.filter.list.map(f => serializeFilterFXItem(f)),\n\t\t\t};\n\t\t}\n\n\t\t// TODO:\n\t\t// desc.comp = -1;\n\t\t// desc.compInfo = { _name: '', _classID: 'null', compID: -1, originalCompID: -1 } as any;\n\t\t// desc.ClMg = {\n\t\t// \t_name: '',\n\t\t// \t_classID: 'ClMg',\n\t\t// \tplacedLayerOCIOConversion: 'placedLayerOCIOConversion.placedLayerOCIOConvertEmbedded'\n\t\t// } as any;\n\n\t\t// if (JSON.stringify(t) !== JSON.stringify(desc)) {\n\t\t// \tconsole.log('read', require('util').inspect(t, false, 99, true));\n\t\t// \tconsole.log('write', require('util').inspect(desc, false, 99, true));\n\t\t// \tconsole.error('DIFFERENT');\n\t\t// \t// throw new Error('DIFFERENT');\n\t\t// }\n\n\t\tif (placed.warp && isQuiltWarp(placed.warp)) {\n\t\t\tconst quiltWarp = encodeWarp(placed.warp) as QuiltWarpDescriptor;\n\t\t\tdesc.quiltWarp = quiltWarp;\n\t\t\tdesc.warp = {\n\t\t\t\twarpStyle: 'warpStyle.warpNone',\n\t\t\t\twarpValue: quiltWarp.warpValue,\n\t\t\t\twarpPerspective: quiltWarp.warpPerspective,\n\t\t\t\twarpPerspectiveOther: quiltWarp.warpPerspectiveOther,\n\t\t\t\twarpRotate: quiltWarp.warpRotate,\n\t\t\t\tbounds: quiltWarp.bounds,\n\t\t\t\tuOrder: quiltWarp.uOrder,\n\t\t\t\tvOrder: quiltWarp.vOrder,\n\t\t\t};\n\t\t} else {\n\t\t\tdelete desc.quiltWarp;\n\t\t}\n\n\t\tif (placed.comp) desc.comp = placed.comp;\n\t\tif (placed.compInfo) desc.compInfo = placed.compInfo;\n\n\t\twriteVersionAndDescriptor(writer, '', 'null', desc, desc.quiltWarp ? 'quiltWarp' : 'warp');\n\t},\n);\n\naddHandlerAlias('SoLE', 'SoLd');\n\naddHandler(\n\t'fxrp',\n\thasKey('referencePoint'),\n\t(reader, target) => {\n\t\ttarget.referencePoint = {\n\t\t\tx: readFloat64(reader),\n\t\t\ty: readFloat64(reader),\n\t\t};\n\t},\n\t(writer, target) => {\n\t\twriteFloat64(writer, target.referencePoint!.x);\n\t\twriteFloat64(writer, target.referencePoint!.y);\n\t},\n);\n\naddHandler(\n\t'Lr16',\n\t() => false,\n\t(reader, _target, _left, psd, imageResources) => {\n\t\treadLayerInfo(reader, psd, imageResources);\n\t},\n\t(_writer, _target) => {\n\t},\n);\n\naddHandler(\n\t'Lr32',\n\t() => false,\n\t(reader, _target, _left, psd, imageResources) => {\n\t\treadLayerInfo(reader, psd, imageResources);\n\t},\n\t(_writer, _target) => {\n\t},\n);\n\naddHandler(\n\t'LMsk',\n\thasKey('userMask'),\n\t(reader, target) => {\n\t\ttarget.userMask = {\n\t\t\tcolorSpace: readColor(reader),\n\t\t\topacity: readUint16(reader) / 0xff,\n\t\t};\n\t\tconst flag = readUint8(reader);\n\t\tif (flag !== 128) throw new Error('Invalid flag value');\n\t\tskipBytes(reader, 1);\n\t},\n\t(writer, target) => {\n\t\tconst userMask = target.userMask!;\n\t\twriteColor(writer, userMask.colorSpace);\n\t\twriteUint16(writer, clamp(userMask.opacity, 0, 1) * 0xff);\n\t\twriteUint8(writer, 128);\n\t\twriteZeros(writer, 1);\n\t},\n);\n\nif (MOCK_HANDLERS) {\n\taddHandler(\n\t\t'Patt',\n\t\ttarget => (target as any)._Patt !== undefined,\n\t\t(reader, target, left) => {\n\t\t\t// console.log('additional info: Patt');\n\t\t\t(target as any)._Patt = readBytes(reader, left());\n\t\t},\n\t\t(writer, target) => false && writeBytes(writer, (target as any)._Patt),\n\t);\n} else {\n\taddHandler(\n\t\t'Patt', // TODO: handle also Pat2 & Pat3\n\t\ttarget => !target,\n\t\t(reader, target, left) => {\n\t\t\tif (!left()) return;\n\n\t\t\tskipBytes(reader, left()); return; // not supported yet\n\t\t\ttarget; readPattern;\n\n\t\t\t// if (!target.patterns) target.patterns = [];\n\t\t\t// target.patterns.push(readPattern(reader));\n\t\t\t// skipBytes(reader, left());\n\t\t},\n\t\t(_writer, _target) => {\n\t\t},\n\t);\n}\n\n/*\ninterface CAIDesc {\n\tenab: boolean;\n\tgenerationalGuid: string;\n}\n\naddHandler(\n\t'CAI ', // content credentials ? something to do with generative tech\n\t() => false,\n\t(reader, _target, left) => {\n\t\tconst version = readUint32(reader); // 3\n\t\tconst desc = readVersionAndDescriptor(reader) as CAIDesc;\n\t\tconsole.log('CAI', require('util').inspect(desc, false, 99, true));\n\t\tconsole.log('CAI', { version });\n\t\tconsole.log('CAI left', readBytes(reader, left())); // 8 bytes left, all zeroes\n\t},\n\t(_writer, _target) => {\n\t},\n);\n*/\n\nif (MOCK_HANDLERS) {\n\taddHandler(\n\t\t'CAI ',\n\t\ttarget => (target as any)._CAI_ !== undefined,\n\t\t(reader, target, left) => {\n\t\t\t(target as any)._CAI_ = readBytes(reader, left());\n\t\t},\n\t\t(writer, target) => {\n\t\t\twriteBytes(writer, (target as any)._CAI_);\n\t\t},\n\t);\n}\n\nif (MOCK_HANDLERS) {\n\taddHandler(\n\t\t'OCIO', // generative tech?\n\t\ttarget => (target as any)._OCIO !== undefined,\n\t\t(reader, target, left) => {\n\t\t\t(target as any)._OCIO = readBytes(reader, left());\n\t\t},\n\t\t(writer, target) => {\n\t\t\twriteBytes(writer, (target as any)._OCIO);\n\t\t},\n\t);\n}\n\n// interface GenIDesc {\n// \tisUsingGenTech: number;\n// }\n\nif (MOCK_HANDLERS) {\n\taddHandler(\n\t\t'GenI', // generative tech\n\t\ttarget => (target as any)._GenI !== undefined,\n\t\t(reader, target, left) => {\n\t\t\t(target as any)._GenI = readBytes(reader, left());\n\t\t\t// const desc = readVersionAndDescriptor(reader) as GenIDesc;\n\t\t\t// console.log('GenI', require('util').inspect(desc, false, 99, true));\n\t\t},\n\t\t(writer, target) => {\n\t\t\twriteBytes(writer, (target as any)._GenI);\n\t\t},\n\t);\n}\n\nfunction readRect(reader: PsdReader) {\n\tconst top = readInt32(reader);\n\tconst left = readInt32(reader);\n\tconst bottom = readInt32(reader);\n\tconst right = readInt32(reader);\n\treturn { top, left, bottom, right };\n}\n\nfunction writeRect(writer: PsdWriter, rect: { left: number; top: number; right: number; bottom: number }) {\n\twriteInt32(writer, rect.top);\n\twriteInt32(writer, rect.left);\n\twriteInt32(writer, rect.bottom);\n\twriteInt32(writer, rect.right);\n}\n\naddHandler(\n\t'Anno',\n\ttarget => (target as Psd).annotations !== undefined,\n\t(reader, target, left) => {\n\t\tconst major = readUint16(reader);\n\t\tconst minor = readUint16(reader);\n\t\tif (major !== 2 || minor !== 1) throw new Error('Invalid Anno version');\n\t\tconst count = readUint32(reader);\n\t\tconst annotations: Annotation[] = [];\n\n\t\tfor (let i = 0; i < count; i++) {\n\t\t\t/*const length =*/ readUint32(reader);\n\t\t\tconst type = readSignature(reader);\n\t\t\tconst open = !!readUint8(reader);\n\t\t\t/*const flags =*/ readUint8(reader); // always 28\n\t\t\t/*const optionalBlocks =*/ readUint16(reader);\n\t\t\tconst iconLocation = readRect(reader);\n\t\t\tconst popupLocation = readRect(reader);\n\t\t\tconst color = readColor(reader);\n\t\t\tconst author = readPascalString(reader, 2);\n\t\t\tconst name = readPascalString(reader, 2);\n\t\t\tconst date = readPascalString(reader, 2);\n\t\t\t/*const contentLength =*/ readUint32(reader);\n\t\t\t/*const dataType =*/ readSignature(reader);\n\t\t\tconst dataLength = readUint32(reader);\n\t\t\tlet data: string | Uint8Array;\n\n\t\t\tif (type === 'txtA') {\n\t\t\t\tif (dataLength >= 2 && readUint16(reader) === 0xfeff) {\n\t\t\t\t\tdata = readUnicodeStringWithLength(reader, (dataLength - 2) / 2);\n\t\t\t\t} else {\n\t\t\t\t\treader.offset -= 2;\n\t\t\t\t\tdata = readAsciiString(reader, dataLength);\n\t\t\t\t}\n\n\t\t\t\tdata = data.replace(/\\r/g, '\\n');\n\t\t\t} else if (type === 'sndA') {\n\t\t\t\tdata = readBytes(reader, dataLength);\n\t\t\t} else {\n\t\t\t\tthrow new Error('Unknown annotation type');\n\t\t\t}\n\n\t\t\tannotations.push({\n\t\t\t\ttype: type === 'txtA' ? 'text' : 'sound', open, iconLocation, popupLocation, color, author, name, date, data,\n\t\t\t});\n\t\t}\n\n\t\t(target as Psd).annotations = annotations;\n\t\tskipBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\tconst annotations = (target as Psd).annotations!;\n\n\t\twriteUint16(writer, 2);\n\t\twriteUint16(writer, 1);\n\t\twriteUint32(writer, annotations.length);\n\n\t\tfor (const annotation of annotations) {\n\t\t\tconst sound = annotation.type === 'sound';\n\n\t\t\tif (sound && !(annotation.data instanceof Uint8Array)) throw new Error('Sound annotation data should be Uint8Array');\n\t\t\tif (!sound && typeof annotation.data !== 'string') throw new Error('Text annotation data should be string');\n\n\t\t\tconst lengthOffset = writer.offset;\n\t\t\twriteUint32(writer, 0); // length\n\t\t\twriteSignature(writer, sound ? 'sndA' : 'txtA');\n\t\t\twriteUint8(writer, annotation.open ? 1 : 0);\n\t\t\twriteUint8(writer, 28);\n\t\t\twriteUint16(writer, 1);\n\t\t\twriteRect(writer, annotation.iconLocation);\n\t\t\twriteRect(writer, annotation.popupLocation);\n\t\t\twriteColor(writer, annotation.color);\n\t\t\twritePascalString(writer, annotation.author || '', 2);\n\t\t\twritePascalString(writer, annotation.name || '', 2);\n\t\t\twritePascalString(writer, annotation.date || '', 2);\n\t\t\tconst contentOffset = writer.offset;\n\t\t\twriteUint32(writer, 0); // content length\n\t\t\twriteSignature(writer, sound ? 'sndM' : 'txtC');\n\t\t\twriteUint32(writer, 0); // data length\n\t\t\tconst dataOffset = writer.offset;\n\n\t\t\tif (sound) {\n\t\t\t\twriteBytes(writer, annotation.data as Uint8Array);\n\t\t\t} else {\n\t\t\t\twriteUint16(writer, 0xfeff); // unicode string indicator\n\t\t\t\tconst text = (annotation.data as string).replace(/\\n/g, '\\r');\n\t\t\t\tfor (let i = 0; i < text.length; i++) writeUint16(writer, text.charCodeAt(i));\n\t\t\t}\n\n\t\t\twriter.view.setUint32(lengthOffset, writer.offset - lengthOffset, false);\n\t\t\twriter.view.setUint32(contentOffset, writer.offset - contentOffset, false);\n\t\t\twriter.view.setUint32(dataOffset - 4, writer.offset - dataOffset, false);\n\t\t}\n\t}\n);\n\ninterface FileOpenDescriptor {\n\tcompInfo: { compID: number; originalCompID: number; };\n}\n\ninterface LinkedFileDescriptor {\n\tdescVersion: 2;\n\t'Nm  ': string;\n\tfullPath: string;\n\toriginalPath: string;\n\trelPath: string;\n}\n\nfunction createLnkHandler(tag: string) {\n\taddHandler(\n\t\ttag,\n\t\t(target: any) => {\n\t\t\tconst psd = target as Psd;\n\t\t\tif (!psd.linkedFiles || !psd.linkedFiles.length) return false;\n\t\t\tif (tag === 'lnkE' && !psd.linkedFiles.some(f => f.linkedFile)) return false;\n\t\t\treturn true;\n\t\t},\n\t\t(reader, target, left, _psd) => {\n\t\t\tconst psd = target as Psd;\n\t\t\tpsd.linkedFiles = psd.linkedFiles || [];\n\n\t\t\twhile (left() > 8) {\n\t\t\t\tlet size = readLength64(reader);\n\t\t\t\tconst startOffset = reader.offset;\n\t\t\t\tconst type = readSignature(reader) as 'liFD' | 'liFE' | 'liFA';\n\t\t\t\t// liFD - linked file data\n\t\t\t\t// liFE - linked file external\n\t\t\t\t// liFA - linked file alias\n\t\t\t\tconst version = readInt32(reader);\n\t\t\t\tconst id = readPascalString(reader, 1);\n\t\t\t\tconst name = readUnicodeString(reader);\n\n\t\t\t\tconst fileType = readSignature(reader).trim(); // '    ' if empty\n\t\t\t\tconst fileCreator = readSignature(reader).trim(); // '    ' or '\\0\\0\\0\\0' if empty\n\t\t\t\tconst dataSize = readLength64(reader);\n\t\t\t\tconst hasFileOpenDescriptor = readUint8(reader);\n\t\t\t\tconst fileOpenDescriptor = hasFileOpenDescriptor ? readVersionAndDescriptor(reader) as FileOpenDescriptor : undefined;\n\t\t\t\tconst linkedFileDescriptor = type === 'liFE' ? readVersionAndDescriptor(reader) as LinkedFileDescriptor : undefined;\n\t\t\t\tconst file: LinkedFile = { id, name };\n\n\t\t\t\tif (fileType) file.type = fileType;\n\t\t\t\tif (fileCreator) file.creator = fileCreator;\n\n\t\t\t\tif (fileOpenDescriptor) {\n\t\t\t\t\tfile.descriptor = {\n\t\t\t\t\t\tcompInfo: {\n\t\t\t\t\t\t\tcompID: fileOpenDescriptor.compInfo.compID,\n\t\t\t\t\t\t\toriginalCompID: fileOpenDescriptor.compInfo.originalCompID,\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (type === 'liFE' && version > 3) {\n\t\t\t\t\tconst year = readInt32(reader);\n\t\t\t\t\tconst month = readUint8(reader);\n\t\t\t\t\tconst day = readUint8(reader);\n\t\t\t\t\tconst hour = readUint8(reader);\n\t\t\t\t\tconst minute = readUint8(reader);\n\t\t\t\t\tconst seconds = readFloat64(reader);\n\t\t\t\t\tconst wholeSeconds = Math.floor(seconds);\n\t\t\t\t\tconst ms = (seconds - wholeSeconds) * 1000;\n\t\t\t\t\tfile.time = (new Date(Date.UTC(year, month, day, hour, minute, wholeSeconds, ms))).toISOString();\n\t\t\t\t}\n\n\t\t\t\tconst fileSize = type === 'liFE' ? readLength64(reader) : 0;\n\n\t\t\t\tif (type === 'liFA') skipBytes(reader, 8);\n\t\t\t\tif (type === 'liFD') file.data = readBytes(reader, dataSize); // seems to be a typo in docs\n\t\t\t\tif (version >= 5) file.childDocumentID = readUnicodeString(reader);\n\t\t\t\tif (version >= 6) file.assetModTime = readFloat64(reader);\n\t\t\t\tif (version >= 7) file.assetLockedState = readUint8(reader);\n\t\t\t\tif (type === 'liFE' && version === 2) file.data = readBytes(reader, fileSize);\n\n\t\t\t\tif (reader.skipLinkedFilesData) file.data = undefined;\n\n\t\t\t\tif (tag === 'lnkE') {\n\t\t\t\t\tfile.linkedFile = {\n\t\t\t\t\t\tfileSize,\n\t\t\t\t\t\tname: linkedFileDescriptor?.['Nm  '] || '',\n\t\t\t\t\t\tfullPath: linkedFileDescriptor?.fullPath || '',\n\t\t\t\t\t\toriginalPath: linkedFileDescriptor?.originalPath || '',\n\t\t\t\t\t\trelativePath: linkedFileDescriptor?.relPath || '',\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tpsd.linkedFiles.push(file);\n\n\t\t\t\twhile (size % 4) size++;\n\t\t\t\treader.offset = startOffset + size;\n\t\t\t}\n\n\t\t\tskipBytes(reader, left()); // ?\n\t\t},\n\t\t(writer, target) => {\n\t\t\tconst psd = target as Psd;\n\n\t\t\tfor (const file of psd.linkedFiles!) {\n\t\t\t\tif ((tag === 'lnkE') !== !!file.linkedFile) continue;\n\n\t\t\t\tlet version = 2;\n\n\t\t\t\tif (file.assetLockedState != null) version = 7;\n\t\t\t\telse if (file.assetModTime != null) version = 6;\n\t\t\t\telse if (file.childDocumentID != null) version = 5;\n\t\t\t\telse if (tag == 'lnkE') version = 3;\n\n\t\t\t\twriteLength64(writer, 0);\n\n\t\t\t\tconst sizeOffset = writer.offset;\n\t\t\t\twriteSignature(writer, (tag === 'lnkE') ? 'liFE' : (file.data ? 'liFD' : 'liFA'));\n\t\t\t\twriteInt32(writer, version);\n\t\t\t\tif (!file.id || typeof file.id !== 'string' || !/^[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$/.test(file.id)) {\n\t\t\t\t\tthrow new Error('Linked file ID must be in a GUID format (example: 20953ddb-9391-11ec-b4f1-c15674f50bc4)');\n\t\t\t\t}\n\t\t\t\twritePascalString(writer, file.id, 1);\n\t\t\t\twriteUnicodeStringWithPadding(writer, file.name || '');\n\t\t\t\twriteSignature(writer, file.type ? `${file.type}    `.substring(0, 4) : '    ');\n\t\t\t\twriteSignature(writer, file.creator ? `${file.creator}    `.substring(0, 4) : '\\0\\0\\0\\0');\n\t\t\t\twriteLength64(writer, file.data ? file.data.byteLength : 0);\n\n\t\t\t\tif (file.descriptor && file.descriptor.compInfo) {\n\t\t\t\t\tconst desc: FileOpenDescriptor = {\n\t\t\t\t\t\tcompInfo: {\n\t\t\t\t\t\t\tcompID: file.descriptor.compInfo.compID,\n\t\t\t\t\t\t\toriginalCompID: file.descriptor.compInfo.originalCompID,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\t\t\t\twriteUint8(writer, 1);\n\t\t\t\t\twriteVersionAndDescriptor(writer, '', 'null', desc);\n\t\t\t\t} else {\n\t\t\t\t\twriteUint8(writer, 0);\n\t\t\t\t}\n\n\t\t\t\tif (tag === 'lnkE') {\n\t\t\t\t\tconst desc: LinkedFileDescriptor = {\n\t\t\t\t\t\tdescVersion: 2,\n\t\t\t\t\t\t'Nm  ': file.linkedFile?.name ?? '',\n\t\t\t\t\t\tfullPath: file.linkedFile?.fullPath ?? '',\n\t\t\t\t\t\toriginalPath: file.linkedFile?.originalPath ?? '',\n\t\t\t\t\t\trelPath: file.linkedFile?.relativePath ?? '',\n\t\t\t\t\t};\n\n\t\t\t\t\twriteVersionAndDescriptor(writer, '', 'ExternalFileLink', desc);\n\n\t\t\t\t\tconst time = file.time ? new Date(file.time) : new Date();\n\t\t\t\t\twriteInt32(writer, time.getUTCFullYear());\n\t\t\t\t\twriteUint8(writer, time.getUTCMonth());\n\t\t\t\t\twriteUint8(writer, time.getUTCDate());\n\t\t\t\t\twriteUint8(writer, time.getUTCHours());\n\t\t\t\t\twriteUint8(writer, time.getUTCMinutes());\n\t\t\t\t\twriteFloat64(writer, time.getUTCSeconds() + time.getUTCMilliseconds() / 1000);\n\t\t\t\t}\n\n\t\t\t\tif (file.data) {\n\t\t\t\t\twriteBytes(writer, file.data);\n\t\t\t\t} else {\n\t\t\t\t\twriteLength64(writer, file.linkedFile?.fileSize || 0);\n\t\t\t\t}\n\n\t\t\t\tif (version >= 5) writeUnicodeStringWithPadding(writer, file.childDocumentID || '');\n\t\t\t\tif (version >= 6) writeFloat64(writer, file.assetModTime || 0);\n\t\t\t\tif (version >= 7) writeUint8(writer, file.assetLockedState || 0);\n\n\t\t\t\tlet size = writer.offset - sizeOffset;\n\t\t\t\twriter.view.setUint32(sizeOffset - 4, size, false); // write size\n\n\t\t\t\twhile (size % 4) {\n\t\t\t\t\tsize++;\n\t\t\t\t\twriteUint8(writer, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t);\n}\n\ncreateLnkHandler('lnk2');\ncreateLnkHandler('lnkE');\n\naddHandlerAlias('lnkD', 'lnk2');\naddHandlerAlias('lnk3', 'lnk2');\n\ninterface PthsDescriptor {\n\tpathList: {\n\t\t_classID: 'pathInfoClass';\n\t\tpathUnicodeName: string;\n\t\tpathSymmetryClass: {\n\t\t\t_classID: 'pathSymmetryClass';\n\t\t\tpathSymmetryMode: string; // 'pathSymmetryModeEnum.pathSymmetryModeBasicPath'\n\t\t};\n\t}[];\n}\n\naddHandler(\n\t'pths',\n\thasKey('pathList'),\n\t(reader, target) => {\n\t\tconst desc = readVersionAndDescriptor(reader, true) as PthsDescriptor;\n\t\t// console.log(require('util').inspect(desc, false, 99, true));\n\t\t// if (options.throwForMissingFeatures && desc?.pathList?.length) throw new Error('non-empty pathList in `pths`');\n\t\tdesc;\n\t\ttarget.pathList = []; // TODO: read paths\n\t},\n\t(writer, _target) => {\n\t\tconst desc: PthsDescriptor = {\n\t\t\tpathList: [], // TODO: write paths\n\t\t};\n\n\t\twriteVersionAndDescriptor(writer, '', 'pathsDataClass', desc);\n\t},\n);\n\naddHandler(\n\t'lyvr',\n\thasKey('version'),\n\t(reader, target) => target.version = readUint32(reader),\n\t(writer, target) => writeUint32(writer, target.version!),\n);\n\naddHandler(\n\t'lfxs',\n\t() => false, // TODO: not sure when we actually need to write this section\n\t// NOTE: this might be insufficient\n\t// target => target.effects !== undefined && (\n\t// \t!!target.effects.dropShadow?.some(e => e.choke) ||\n\t// \t!!target.effects.innerShadow?.some(e => e.choke) ||\n\t// \t!!target.effects.outerGlow?.choke ||\n\t// \t!!target.effects.innerGlow?.choke\n\t// ),\n\t(reader, target, left) => {\n\t\tconst version = readUint32(reader);\n\t\tif (version !== 0) throw new Error(`Invalid lfxs version`);\n\n\t\tconst desc: Lfx2Descriptor & LmfxDescriptor = readVersionAndDescriptor(reader);\n\t\ttarget.effects = parseEffects(desc, !!reader.logMissingFeatures);\n\n\t\tskipBytes(reader, left());\n\t},\n\t(writer, target, _, options) => {\n\t\tconst desc = serializeEffects(target.effects!, !!options.logMissingFeatures, true);\n\t\twriteUint32(writer, 0); // version\n\t\twriteVersionAndDescriptor(writer, '', 'null', desc);\n\t},\n);\n\nfunction adjustmentType(type: string) {\n\treturn (target: LayerAdditionalInfo) => !!target.adjustment && target.adjustment.type === type;\n}\n\naddHandler(\n\t'brit',\n\tadjustmentType('brightness/contrast'),\n\t(reader, target, left) => {\n\t\tif (!target.adjustment) { // ignore if got one from CgEd block\n\t\t\ttarget.adjustment = {\n\t\t\t\ttype: 'brightness/contrast',\n\t\t\t\tbrightness: readInt16(reader),\n\t\t\t\tcontrast: readInt16(reader),\n\t\t\t\tmeanValue: readInt16(reader),\n\t\t\t\tlabColorOnly: !!readUint8(reader),\n\t\t\t\tuseLegacy: true,\n\t\t\t};\n\t\t}\n\n\t\tskipBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\tconst info = target.adjustment as BrightnessAdjustment;\n\t\twriteInt16(writer, info.brightness || 0);\n\t\twriteInt16(writer, info.contrast || 0);\n\t\twriteInt16(writer, info.meanValue ?? 127);\n\t\twriteUint8(writer, info.labColorOnly ? 1 : 0);\n\t\twriteZeros(writer, 1);\n\t},\n);\n\nfunction readLevelsChannel(reader: PsdReader): LevelsAdjustmentChannel {\n\tconst shadowInput = readInt16(reader);\n\tconst highlightInput = readInt16(reader);\n\tconst shadowOutput = readInt16(reader);\n\tconst highlightOutput = readInt16(reader);\n\tconst midtoneInput = readInt16(reader) / 100;\n\treturn { shadowInput, highlightInput, shadowOutput, highlightOutput, midtoneInput };\n}\n\nfunction writeLevelsChannel(writer: PsdWriter, channel: LevelsAdjustmentChannel) {\n\twriteInt16(writer, channel.shadowInput);\n\twriteInt16(writer, channel.highlightInput);\n\twriteInt16(writer, channel.shadowOutput);\n\twriteInt16(writer, channel.highlightOutput);\n\twriteInt16(writer, Math.round(channel.midtoneInput * 100));\n}\n\naddHandler(\n\t'levl',\n\tadjustmentType('levels'),\n\t(reader, target, left) => {\n\t\tif (readUint16(reader) !== 2) throw new Error('Invalid levl version');\n\n\t\ttarget.adjustment = {\n\t\t\t...target.adjustment as PresetInfo,\n\t\t\ttype: 'levels',\n\t\t\trgb: readLevelsChannel(reader),\n\t\t\tred: readLevelsChannel(reader),\n\t\t\tgreen: readLevelsChannel(reader),\n\t\t\tblue: readLevelsChannel(reader),\n\t\t};\n\n\t\tskipBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\tconst info = target.adjustment as LevelsAdjustment;\n\t\tconst defaultChannel = {\n\t\t\tshadowInput: 0,\n\t\t\thighlightInput: 255,\n\t\t\tshadowOutput: 0,\n\t\t\thighlightOutput: 255,\n\t\t\tmidtoneInput: 1,\n\t\t};\n\n\t\twriteUint16(writer, 2); // version\n\t\twriteLevelsChannel(writer, info.rgb || defaultChannel);\n\t\twriteLevelsChannel(writer, info.red || defaultChannel);\n\t\twriteLevelsChannel(writer, info.blue || defaultChannel);\n\t\twriteLevelsChannel(writer, info.green || defaultChannel);\n\t\tfor (let i = 0; i < 59; i++) writeLevelsChannel(writer, defaultChannel);\n\t},\n);\n\nfunction readCurveChannel(reader: PsdReader) {\n\tconst nodes = readUint16(reader);\n\tconst channel: CurvesAdjustmentChannel = [];\n\n\tfor (let j = 0; j < nodes; j++) {\n\t\tconst output = readInt16(reader);\n\t\tconst input = readInt16(reader);\n\t\tchannel.push({ input, output });\n\t}\n\n\treturn channel;\n}\n\nfunction writeCurveChannel(writer: PsdWriter, channel: CurvesAdjustmentChannel) {\n\twriteUint16(writer, channel.length);\n\n\tfor (const n of channel) {\n\t\twriteUint16(writer, n.output);\n\t\twriteUint16(writer, n.input);\n\t}\n}\n\naddHandler(\n\t'curv',\n\tadjustmentType('curves'),\n\t(reader, target, left) => {\n\t\treadUint8(reader);\n\t\tif (readUint16(reader) !== 1) throw new Error('Invalid curv version');\n\t\treadUint16(reader);\n\t\tconst channels = readUint16(reader);\n\t\tconst info: CurvesAdjustment = { type: 'curves' };\n\n\t\tif (channels & 1) info.rgb = readCurveChannel(reader);\n\t\tif (channels & 2) info.red = readCurveChannel(reader);\n\t\tif (channels & 4) info.green = readCurveChannel(reader);\n\t\tif (channels & 8) info.blue = readCurveChannel(reader);\n\n\t\ttarget.adjustment = {\n\t\t\t...target.adjustment as PresetInfo,\n\t\t\t...info,\n\t\t};\n\n\t\t// ignoring, duplicate information\n\t\t// checkSignature(reader, 'Crv ');\n\n\t\t// const cVersion = readUint16(reader);\n\t\t// readUint16(reader);\n\t\t// const channelCount = readUint16(reader);\n\n\t\t// for (let i = 0; i < channelCount; i++) {\n\t\t// \tconst index = readUint16(reader);\n\t\t// \tconst nodes = readUint16(reader);\n\n\t\t// \tfor (let j = 0; j < nodes; j++) {\n\t\t// \t\tconst output = readInt16(reader);\n\t\t// \t\tconst input = readInt16(reader);\n\t\t// \t}\n\t\t// }\n\n\t\tskipBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\tconst info = target.adjustment as CurvesAdjustment;\n\t\tconst { rgb, red, green, blue } = info;\n\t\tlet channels = 0;\n\t\tlet channelCount = 0;\n\n\t\tif (rgb && rgb.length) { channels |= 1; channelCount++; }\n\t\tif (red && red.length) { channels |= 2; channelCount++; }\n\t\tif (green && green.length) { channels |= 4; channelCount++; }\n\t\tif (blue && blue.length) { channels |= 8; channelCount++; }\n\n\t\twriteUint8(writer, 0);\n\t\twriteUint16(writer, 1); // version\n\t\twriteUint16(writer, 0);\n\t\twriteUint16(writer, channels);\n\n\t\tif (rgb && rgb.length) writeCurveChannel(writer, rgb);\n\t\tif (red && red.length) writeCurveChannel(writer, red);\n\t\tif (green && green.length) writeCurveChannel(writer, green);\n\t\tif (blue && blue.length) writeCurveChannel(writer, blue);\n\n\t\twriteSignature(writer, 'Crv ');\n\t\twriteUint16(writer, 4); // version\n\t\twriteUint16(writer, 0);\n\t\twriteUint16(writer, channelCount);\n\n\t\tif (rgb && rgb.length) { writeUint16(writer, 0); writeCurveChannel(writer, rgb); }\n\t\tif (red && red.length) { writeUint16(writer, 1); writeCurveChannel(writer, red); }\n\t\tif (green && green.length) { writeUint16(writer, 2); writeCurveChannel(writer, green); }\n\t\tif (blue && blue.length) { writeUint16(writer, 3); writeCurveChannel(writer, blue); }\n\n\t\twriteZeros(writer, 2);\n\t},\n);\n\naddHandler(\n\t'expA',\n\tadjustmentType('exposure'),\n\t(reader, target, left) => {\n\t\tif (readUint16(reader) !== 1) throw new Error('Invalid expA version');\n\n\t\ttarget.adjustment = {\n\t\t\t...target.adjustment as PresetInfo,\n\t\t\ttype: 'exposure',\n\t\t\texposure: readFloat32(reader),\n\t\t\toffset: readFloat32(reader),\n\t\t\tgamma: readFloat32(reader),\n\t\t};\n\n\t\tskipBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\tconst info = target.adjustment as ExposureAdjustment;\n\t\twriteUint16(writer, 1); // version\n\t\twriteFloat32(writer, info.exposure!);\n\t\twriteFloat32(writer, info.offset!);\n\t\twriteFloat32(writer, info.gamma!);\n\t\twriteZeros(writer, 2);\n\t},\n);\n\ninterface VibranceDescriptor {\n\tvibrance?: number;\n\tStrt?: number;\n}\n\naddHandler(\n\t'vibA',\n\tadjustmentType('vibrance'),\n\t(reader, target, left) => {\n\t\tconst desc: VibranceDescriptor = readVersionAndDescriptor(reader);\n\t\ttarget.adjustment = { type: 'vibrance' };\n\t\tif (desc.vibrance !== undefined) target.adjustment.vibrance = desc.vibrance;\n\t\tif (desc.Strt !== undefined) target.adjustment.saturation = desc.Strt;\n\n\t\tskipBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\tconst info = target.adjustment as VibranceAdjustment;\n\t\tconst desc: VibranceDescriptor = {};\n\t\tif (info.vibrance !== undefined) desc.vibrance = info.vibrance;\n\t\tif (info.saturation !== undefined) desc.Strt = info.saturation;\n\n\t\twriteVersionAndDescriptor(writer, '', 'null', desc);\n\t},\n);\n\nfunction readHueChannel(reader: PsdReader): HueSaturationAdjustmentChannel {\n\treturn {\n\t\ta: readInt16(reader),\n\t\tb: readInt16(reader),\n\t\tc: readInt16(reader),\n\t\td: readInt16(reader),\n\t\thue: readInt16(reader),\n\t\tsaturation: readInt16(reader),\n\t\tlightness: readInt16(reader),\n\t};\n}\n\nfunction writeHueChannel(writer: PsdWriter, channel: HueSaturationAdjustmentChannel | undefined) {\n\tconst c = channel || {} as Partial<HueSaturationAdjustmentChannel>;\n\twriteInt16(writer, c.a || 0);\n\twriteInt16(writer, c.b || 0);\n\twriteInt16(writer, c.c || 0);\n\twriteInt16(writer, c.d || 0);\n\twriteInt16(writer, c.hue || 0);\n\twriteInt16(writer, c.saturation || 0);\n\twriteInt16(writer, c.lightness || 0);\n}\n\naddHandler(\n\t'hue2',\n\tadjustmentType('hue/saturation'),\n\t(reader, target, left) => {\n\t\tif (readUint16(reader) !== 2) throw new Error('Invalid hue2 version');\n\n\t\ttarget.adjustment = {\n\t\t\t...target.adjustment as PresetInfo,\n\t\t\ttype: 'hue/saturation',\n\t\t\tmaster: readHueChannel(reader),\n\t\t\treds: readHueChannel(reader),\n\t\t\tyellows: readHueChannel(reader),\n\t\t\tgreens: readHueChannel(reader),\n\t\t\tcyans: readHueChannel(reader),\n\t\t\tblues: readHueChannel(reader),\n\t\t\tmagentas: readHueChannel(reader),\n\t\t};\n\n\t\tskipBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\tconst info = target.adjustment as HueSaturationAdjustment;\n\n\t\twriteUint16(writer, 2); // version\n\t\twriteHueChannel(writer, info.master);\n\t\twriteHueChannel(writer, info.reds);\n\t\twriteHueChannel(writer, info.yellows);\n\t\twriteHueChannel(writer, info.greens);\n\t\twriteHueChannel(writer, info.cyans);\n\t\twriteHueChannel(writer, info.blues);\n\t\twriteHueChannel(writer, info.magentas);\n\t},\n);\n\nfunction readColorBalance(reader: PsdReader): ColorBalanceValues {\n\treturn {\n\t\tcyanRed: readInt16(reader),\n\t\tmagentaGreen: readInt16(reader),\n\t\tyellowBlue: readInt16(reader),\n\t};\n}\n\nfunction writeColorBalance(writer: PsdWriter, value: Partial<ColorBalanceValues>) {\n\twriteInt16(writer, value.cyanRed || 0);\n\twriteInt16(writer, value.magentaGreen || 0);\n\twriteInt16(writer, value.yellowBlue || 0);\n}\n\naddHandler(\n\t'blnc',\n\tadjustmentType('color balance'),\n\t(reader, target, left) => {\n\t\ttarget.adjustment = {\n\t\t\ttype: 'color balance',\n\t\t\tshadows: readColorBalance(reader),\n\t\t\tmidtones: readColorBalance(reader),\n\t\t\thighlights: readColorBalance(reader),\n\t\t\tpreserveLuminosity: !!readUint8(reader),\n\t\t};\n\n\t\tskipBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\tconst info = target.adjustment as ColorBalanceAdjustment;\n\t\twriteColorBalance(writer, info.shadows || {});\n\t\twriteColorBalance(writer, info.midtones || {});\n\t\twriteColorBalance(writer, info.highlights || {});\n\t\twriteUint8(writer, info.preserveLuminosity ? 1 : 0);\n\t\twriteZeros(writer, 1);\n\t},\n);\n\ninterface BlackAndWhiteDescriptor {\n\t'Rd  ': number;\n\tYllw: number;\n\t'Grn ': number;\n\t'Cyn ': number;\n\t'Bl  ': number;\n\tMgnt: number;\n\tuseTint: boolean;\n\ttintColor?: DescriptorColor;\n\tbwPresetKind: number;\n\tblackAndWhitePresetFileName: string;\n}\n\naddHandler(\n\t'blwh',\n\tadjustmentType('black & white'),\n\t(reader, target, left) => {\n\t\tconst desc: BlackAndWhiteDescriptor = readVersionAndDescriptor(reader);\n\t\ttarget.adjustment = {\n\t\t\ttype: 'black & white',\n\t\t\treds: desc['Rd  '],\n\t\t\tyellows: desc.Yllw,\n\t\t\tgreens: desc['Grn '],\n\t\t\tcyans: desc['Cyn '],\n\t\t\tblues: desc['Bl  '],\n\t\t\tmagentas: desc.Mgnt,\n\t\t\tuseTint: !!desc.useTint,\n\t\t\tpresetKind: desc.bwPresetKind,\n\t\t\tpresetFileName: desc.blackAndWhitePresetFileName,\n\t\t};\n\n\t\tif (desc.tintColor !== undefined) target.adjustment.tintColor = parseColor(desc.tintColor);\n\n\t\tskipBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\tconst info = target.adjustment as BlackAndWhiteAdjustment;\n\t\tconst desc: BlackAndWhiteDescriptor = {\n\t\t\t'Rd  ': info.reds || 0,\n\t\t\tYllw: info.yellows || 0,\n\t\t\t'Grn ': info.greens || 0,\n\t\t\t'Cyn ': info.cyans || 0,\n\t\t\t'Bl  ': info.blues || 0,\n\t\t\tMgnt: info.magentas || 0,\n\t\t\tuseTint: !!info.useTint,\n\t\t\ttintColor: serializeColor(info.tintColor),\n\t\t\tbwPresetKind: info.presetKind || 0,\n\t\t\tblackAndWhitePresetFileName: info.presetFileName || '',\n\t\t};\n\n\t\twriteVersionAndDescriptor(writer, '', 'null', desc);\n\t},\n);\n\naddHandler(\n\t'phfl',\n\tadjustmentType('photo filter'),\n\t(reader, target, left) => {\n\t\tconst version = readUint16(reader);\n\t\tif (version !== 2 && version !== 3) throw new Error('Invalid phfl version');\n\n\t\tlet color: Color;\n\n\t\tif (version === 2) {\n\t\t\tcolor = readColor(reader);\n\t\t} else { // version 3\n\t\t\t// TODO: test this, this is probably wrong\n\t\t\tcolor = {\n\t\t\t\tl: readInt32(reader) / 100,\n\t\t\t\ta: readInt32(reader) / 100,\n\t\t\t\tb: readInt32(reader) / 100,\n\t\t\t};\n\t\t}\n\n\t\ttarget.adjustment = {\n\t\t\ttype: 'photo filter',\n\t\t\tcolor,\n\t\t\tdensity: readUint32(reader) / 100,\n\t\t\tpreserveLuminosity: !!readUint8(reader),\n\t\t};\n\n\t\tskipBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\tconst info = target.adjustment as PhotoFilterAdjustment;\n\t\twriteUint16(writer, 2); // version\n\t\twriteColor(writer, info.color || { l: 0, a: 0, b: 0 });\n\t\twriteUint32(writer, (info.density || 0) * 100);\n\t\twriteUint8(writer, info.preserveLuminosity ? 1 : 0);\n\t\twriteZeros(writer, 3);\n\t},\n);\n\nfunction readMixrChannel(reader: PsdReader): ChannelMixerChannel {\n\tconst red = readInt16(reader);\n\tconst green = readInt16(reader);\n\tconst blue = readInt16(reader);\n\tskipBytes(reader, 2);\n\tconst constant = readInt16(reader);\n\treturn { red, green, blue, constant };\n}\n\nfunction writeMixrChannel(writer: PsdWriter, channel: ChannelMixerChannel | undefined) {\n\tconst c = channel || {} as Partial<ChannelMixerChannel>;\n\twriteInt16(writer, c.red!);\n\twriteInt16(writer, c.green!);\n\twriteInt16(writer, c.blue!);\n\twriteZeros(writer, 2);\n\twriteInt16(writer, c.constant!);\n}\n\naddHandler(\n\t'mixr',\n\tadjustmentType('channel mixer'),\n\t(reader, target, left) => {\n\t\tif (readUint16(reader) !== 1) throw new Error('Invalid mixr version');\n\n\t\tconst adjustment: ChannelMixerAdjustment = target.adjustment = {\n\t\t\t...target.adjustment as PresetInfo,\n\t\t\ttype: 'channel mixer',\n\t\t\tmonochrome: !!readUint16(reader),\n\t\t};\n\n\t\tif (!adjustment.monochrome) {\n\t\t\tadjustment.red = readMixrChannel(reader);\n\t\t\tadjustment.green = readMixrChannel(reader);\n\t\t\tadjustment.blue = readMixrChannel(reader);\n\t\t}\n\n\t\tadjustment.gray = readMixrChannel(reader);\n\n\t\tskipBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\tconst info = target.adjustment as ChannelMixerAdjustment;\n\t\twriteUint16(writer, 1); // version\n\t\twriteUint16(writer, info.monochrome ? 1 : 0);\n\n\t\tif (info.monochrome) {\n\t\t\twriteMixrChannel(writer, info.gray);\n\t\t\twriteZeros(writer, 3 * 5 * 2);\n\t\t} else {\n\t\t\twriteMixrChannel(writer, info.red);\n\t\t\twriteMixrChannel(writer, info.green);\n\t\t\twriteMixrChannel(writer, info.blue);\n\t\t\twriteMixrChannel(writer, info.gray);\n\t\t}\n\t},\n);\n\nconst colorLookupType = createEnum<'3dlut' | 'abstractProfile' | 'deviceLinkProfile'>('colorLookupType', '3DLUT', {\n\t'3dlut': '3DLUT',\n\tabstractProfile: 'abstractProfile',\n\tdeviceLinkProfile: 'deviceLinkProfile',\n});\n\nconst LUTFormatType = createEnum<'look' | 'cube' | '3dl'>('LUTFormatType', 'look', {\n\tlook: 'LUTFormatLOOK',\n\tcube: 'LUTFormatCUBE',\n\t'3dl': 'LUTFormat3DL',\n});\n\nconst colorLookupOrder = createEnum<'rgb' | 'bgr'>('colorLookupOrder', 'rgb', {\n\trgb: 'rgbOrder',\n\tbgr: 'bgrOrder',\n});\n\ninterface ColorLookupDescriptor {\n\tlookupType?: string;\n\t'Nm  '?: string;\n\tDthr?: boolean;\n\tprofile?: Uint8Array;\n\tLUTFormat?: string;\n\tdataOrder?: string;\n\ttableOrder?: string;\n\tLUT3DFileData?: Uint8Array;\n\tLUT3DFileName?: string;\n}\n\naddHandler(\n\t'clrL',\n\tadjustmentType('color lookup'),\n\t(reader, target, left) => {\n\t\tif (readUint16(reader) !== 1) throw new Error('Invalid clrL version');\n\n\t\tconst desc: ColorLookupDescriptor = readVersionAndDescriptor(reader);\n\t\ttarget.adjustment = { type: 'color lookup' };\n\t\tconst info = target.adjustment;\n\n\t\tif (desc.lookupType !== undefined) info.lookupType = colorLookupType.decode(desc.lookupType);\n\t\tif (desc['Nm  '] !== undefined) info.name = desc['Nm  '];\n\t\tif (desc.Dthr !== undefined) info.dither = desc.Dthr;\n\t\tif (desc.profile !== undefined) info.profile = desc.profile;\n\t\tif (desc.LUTFormat !== undefined) info.lutFormat = LUTFormatType.decode(desc.LUTFormat);\n\t\tif (desc.dataOrder !== undefined) info.dataOrder = colorLookupOrder.decode(desc.dataOrder);\n\t\tif (desc.tableOrder !== undefined) info.tableOrder = colorLookupOrder.decode(desc.tableOrder);\n\t\tif (desc.LUT3DFileData !== undefined) info.lut3DFileData = desc.LUT3DFileData;\n\t\tif (desc.LUT3DFileName !== undefined) info.lut3DFileName = desc.LUT3DFileName;\n\n\t\tskipBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\tconst info = target.adjustment as ColorLookupAdjustment;\n\t\tconst desc: ColorLookupDescriptor = {};\n\n\t\tif (info.lookupType !== undefined) desc.lookupType = colorLookupType.encode(info.lookupType);\n\t\tif (info.name !== undefined) desc['Nm  '] = info.name;\n\t\tif (info.dither !== undefined) desc.Dthr = info.dither;\n\t\tif (info.profile !== undefined) desc.profile = info.profile;\n\t\tif (info.lutFormat !== undefined) desc.LUTFormat = LUTFormatType.encode(info.lutFormat);\n\t\tif (info.dataOrder !== undefined) desc.dataOrder = colorLookupOrder.encode(info.dataOrder);\n\t\tif (info.tableOrder !== undefined) desc.tableOrder = colorLookupOrder.encode(info.tableOrder);\n\t\tif (info.lut3DFileData !== undefined) desc.LUT3DFileData = info.lut3DFileData;\n\t\tif (info.lut3DFileName !== undefined) desc.LUT3DFileName = info.lut3DFileName;\n\n\t\twriteUint16(writer, 1); // version\n\t\twriteVersionAndDescriptor(writer, '', 'null', desc);\n\t},\n);\n\naddHandler(\n\t'nvrt',\n\tadjustmentType('invert'),\n\t(reader, target, left) => {\n\t\ttarget.adjustment = { type: 'invert' };\n\t\tskipBytes(reader, left());\n\t},\n\t() => {\n\t\t// nothing to write here\n\t},\n);\n\naddHandler(\n\t'post',\n\tadjustmentType('posterize'),\n\t(reader, target, left) => {\n\t\ttarget.adjustment = {\n\t\t\ttype: 'posterize',\n\t\t\tlevels: readUint16(reader),\n\t\t};\n\t\tskipBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\tconst info = target.adjustment as PosterizeAdjustment;\n\t\twriteUint16(writer, info.levels ?? 4);\n\t\twriteZeros(writer, 2);\n\t},\n);\n\naddHandler(\n\t'thrs',\n\tadjustmentType('threshold'),\n\t(reader, target, left) => {\n\t\ttarget.adjustment = {\n\t\t\ttype: 'threshold',\n\t\t\tlevel: readUint16(reader),\n\t\t};\n\t\tskipBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\tconst info = target.adjustment as ThresholdAdjustment;\n\t\twriteUint16(writer, info.level ?? 128);\n\t\twriteZeros(writer, 2);\n\t},\n);\n\nconst grdmColorModels = ['', '', '', 'rgb', 'hsb', '', 'lab'];\n\naddHandler(\n\t'grdm',\n\tadjustmentType('gradient map'),\n\t(reader, target, left) => {\n\t\tconst version = readUint16(reader);\n\t\tif (version !== 1 && version !== 3) throw new Error('Invalid grdm version');\n\n\t\tconst info: GradientMapAdjustment = {\n\t\t\ttype: 'gradient map',\n\t\t\tgradientType: 'solid',\n\t\t};\n\n\t\tinfo.reverse = !!readUint8(reader);\n\t\tinfo.dither = !!readUint8(reader);\n\n\t\tconst hasMethod = !!readUint8(reader); reader.offset--;\n\t\tif (hasMethod) {\n\t\t\tconst method = readSignature(reader);\n\t\t\tinfo.method = gradientInterpolationMethodType.decode(method);\n\t\t}\n\n\t\tinfo.name = readUnicodeString(reader);\n\t\tinfo.colorStops = [];\n\t\tinfo.opacityStops = [];\n\n\t\tconst stopsCount = readUint16(reader);\n\n\t\tfor (let i = 0; i < stopsCount; i++) {\n\t\t\tinfo.colorStops.push({\n\t\t\t\tlocation: readUint32(reader),\n\t\t\t\tmidpoint: readUint32(reader) / 100,\n\t\t\t\tcolor: readColor(reader),\n\t\t\t});\n\t\t\tskipBytes(reader, 2);\n\t\t}\n\n\t\tconst opacityStopsCount = readUint16(reader);\n\n\t\tfor (let i = 0; i < opacityStopsCount; i++) {\n\t\t\tinfo.opacityStops.push({\n\t\t\t\tlocation: readUint32(reader),\n\t\t\t\tmidpoint: readUint32(reader) / 100,\n\t\t\t\topacity: readUint16(reader) / 0xff,\n\t\t\t});\n\t\t}\n\n\t\tconst expansionCount = readUint16(reader);\n\t\tif (expansionCount !== 2) throw new Error('Invalid grdm expansion count');\n\n\t\tconst interpolation = readUint16(reader);\n\t\tinfo.smoothness = interpolation / 4096;\n\n\t\tconst length = readUint16(reader);\n\t\tif (length !== 32) throw new Error('Invalid grdm length');\n\n\t\tinfo.gradientType = readUint16(reader) ? 'noise' : 'solid';\n\t\tinfo.randomSeed = readUint32(reader);\n\t\tinfo.addTransparency = !!readUint16(reader);\n\t\tinfo.restrictColors = !!readUint16(reader);\n\t\tinfo.roughness = readUint32(reader) / 4096;\n\t\tinfo.colorModel = (grdmColorModels[readUint16(reader)] || 'rgb') as 'rgb' | 'hsb' | 'lab';\n\n\t\tinfo.min = [\n\t\t\treadUint16(reader) / 0x8000,\n\t\t\treadUint16(reader) / 0x8000,\n\t\t\treadUint16(reader) / 0x8000,\n\t\t\treadUint16(reader) / 0x8000,\n\t\t];\n\n\t\tinfo.max = [\n\t\t\treadUint16(reader) / 0x8000,\n\t\t\treadUint16(reader) / 0x8000,\n\t\t\treadUint16(reader) / 0x8000,\n\t\t\treadUint16(reader) / 0x8000,\n\t\t];\n\n\t\tskipBytes(reader, left());\n\n\t\tfor (const s of info.colorStops) s.location /= interpolation;\n\t\tfor (const s of info.opacityStops) s.location /= interpolation;\n\n\t\ttarget.adjustment = info;\n\t},\n\t(writer, target) => {\n\t\tconst info = target.adjustment as GradientMapAdjustment;\n\t\twriteUint16(writer, info.method !== undefined ? 3 : 1); // version\n\t\twriteUint8(writer, info.reverse ? 1 : 0);\n\t\twriteUint8(writer, info.dither ? 1 : 0);\n\n\t\tif (info.method !== undefined) {\n\t\t\twriteSignature(writer, gradientInterpolationMethodType.encode(info.method));\n\t\t}\n\n\t\twriteUnicodeStringWithPadding(writer, info.name || '');\n\t\twriteUint16(writer, info.colorStops && info.colorStops.length || 0);\n\n\t\tconst interpolation = Math.round((info.smoothness ?? 1) * 4096);\n\n\t\tfor (const s of info.colorStops || []) {\n\t\t\twriteUint32(writer, Math.round(s.location * interpolation));\n\t\t\twriteUint32(writer, Math.round(s.midpoint * 100));\n\t\t\twriteColor(writer, s.color);\n\t\t\twriteZeros(writer, 2);\n\t\t}\n\n\t\twriteUint16(writer, info.opacityStops && info.opacityStops.length || 0);\n\n\t\tfor (const s of info.opacityStops || []) {\n\t\t\twriteUint32(writer, Math.round(s.location * interpolation));\n\t\t\twriteUint32(writer, Math.round(s.midpoint * 100));\n\t\t\twriteUint16(writer, Math.round(s.opacity * 0xff));\n\t\t}\n\n\t\twriteUint16(writer, 2); // expansion count\n\t\twriteUint16(writer, interpolation);\n\t\twriteUint16(writer, 32); // length\n\t\twriteUint16(writer, info.gradientType === 'noise' ? 1 : 0);\n\t\twriteUint32(writer, info.randomSeed || 0);\n\t\twriteUint16(writer, info.addTransparency ? 1 : 0);\n\t\twriteUint16(writer, info.restrictColors ? 1 : 0);\n\t\twriteUint32(writer, Math.round((info.roughness ?? 1) * 4096));\n\t\tconst colorModel = grdmColorModels.indexOf(info.colorModel ?? 'rgb');\n\t\twriteUint16(writer, colorModel === -1 ? 3 : colorModel);\n\n\t\tfor (let i = 0; i < 4; i++)\n\t\t\twriteUint16(writer, Math.round((info.min && info.min[i] || 0) * 0x8000));\n\n\t\tfor (let i = 0; i < 4; i++)\n\t\t\twriteUint16(writer, Math.round((info.max && info.max[i] || 0) * 0x8000));\n\n\t\twriteZeros(writer, 4);\n\t},\n);\n\nfunction readSelectiveColors(reader: PsdReader): CMYK {\n\treturn {\n\t\tc: readInt16(reader),\n\t\tm: readInt16(reader),\n\t\ty: readInt16(reader),\n\t\tk: readInt16(reader),\n\t};\n}\n\nfunction writeSelectiveColors(writer: PsdWriter, cmyk: CMYK | undefined) {\n\tconst c = cmyk || {} as Partial<CMYK>;\n\twriteInt16(writer, c.c!);\n\twriteInt16(writer, c.m!);\n\twriteInt16(writer, c.y!);\n\twriteInt16(writer, c.k!);\n}\n\naddHandler(\n\t'selc',\n\tadjustmentType('selective color'),\n\t(reader, target) => {\n\t\tif (readUint16(reader) !== 1) throw new Error('Invalid selc version');\n\n\t\tconst mode = readUint16(reader) ? 'absolute' : 'relative';\n\t\tskipBytes(reader, 8);\n\n\t\ttarget.adjustment = {\n\t\t\ttype: 'selective color',\n\t\t\tmode,\n\t\t\treds: readSelectiveColors(reader),\n\t\t\tyellows: readSelectiveColors(reader),\n\t\t\tgreens: readSelectiveColors(reader),\n\t\t\tcyans: readSelectiveColors(reader),\n\t\t\tblues: readSelectiveColors(reader),\n\t\t\tmagentas: readSelectiveColors(reader),\n\t\t\twhites: readSelectiveColors(reader),\n\t\t\tneutrals: readSelectiveColors(reader),\n\t\t\tblacks: readSelectiveColors(reader),\n\t\t};\n\t},\n\t(writer, target) => {\n\t\tconst info = target.adjustment as SelectiveColorAdjustment;\n\n\t\twriteUint16(writer, 1); // version\n\t\twriteUint16(writer, info.mode === 'absolute' ? 1 : 0);\n\t\twriteZeros(writer, 8);\n\t\twriteSelectiveColors(writer, info.reds);\n\t\twriteSelectiveColors(writer, info.yellows);\n\t\twriteSelectiveColors(writer, info.greens);\n\t\twriteSelectiveColors(writer, info.cyans);\n\t\twriteSelectiveColors(writer, info.blues);\n\t\twriteSelectiveColors(writer, info.magentas);\n\t\twriteSelectiveColors(writer, info.whites);\n\t\twriteSelectiveColors(writer, info.neutrals);\n\t\twriteSelectiveColors(writer, info.blacks);\n\t},\n);\n\ninterface BrightnessContrastDescriptor {\n\tVrsn: number;\n\tBrgh: number;\n\tCntr: number;\n\tmeans: number;\n\t'Lab ': boolean;\n\tuseLegacy: boolean;\n\tAuto: boolean;\n}\n\ninterface PresetDescriptor {\n\tVrsn: number;\n\tpresetKind: number;\n\tpresetFileName: string;\n}\n\ninterface CurvesPresetDescriptor {\n\tVrsn: number;\n\tcurvesPresetKind: number;\n\tcurvesPresetFileName: string;\n}\n\ninterface MixerPresetDescriptor {\n\tVrsn: number;\n\tmixerPresetKind: number;\n\tmixerPresetFileName: string;\n}\n\naddHandler(\n\t'CgEd',\n\ttarget => {\n\t\tconst a = target.adjustment;\n\n\t\tif (!a) return false;\n\n\t\treturn (a.type === 'brightness/contrast' && !a.useLegacy) ||\n\t\t\t((a.type === 'levels' || a.type === 'curves' || a.type === 'exposure' || a.type === 'channel mixer' ||\n\t\t\t\ta.type === 'hue/saturation') && a.presetFileName !== undefined);\n\t},\n\t(reader, target, left) => {\n\t\tconst desc = readVersionAndDescriptor(reader) as\n\t\t\tBrightnessContrastDescriptor | PresetDescriptor | CurvesPresetDescriptor | MixerPresetDescriptor;\n\t\tif (desc.Vrsn !== 1) throw new Error('Invalid CgEd version');\n\n\t\t// this section can specify preset file name for other adjustment types\n\t\tif ('presetFileName' in desc) {\n\t\t\ttarget.adjustment = {\n\t\t\t\t...target.adjustment as LevelsAdjustment | ExposureAdjustment | HueSaturationAdjustment,\n\t\t\t\tpresetKind: desc.presetKind,\n\t\t\t\tpresetFileName: desc.presetFileName,\n\t\t\t};\n\t\t} else if ('curvesPresetFileName' in desc) {\n\t\t\ttarget.adjustment = {\n\t\t\t\t...target.adjustment as CurvesAdjustment,\n\t\t\t\tpresetKind: desc.curvesPresetKind,\n\t\t\t\tpresetFileName: desc.curvesPresetFileName,\n\t\t\t};\n\t\t} else if ('mixerPresetFileName' in desc) {\n\t\t\ttarget.adjustment = {\n\t\t\t\t...target.adjustment as CurvesAdjustment,\n\t\t\t\tpresetKind: desc.mixerPresetKind,\n\t\t\t\tpresetFileName: desc.mixerPresetFileName,\n\t\t\t};\n\t\t} else {\n\t\t\ttarget.adjustment = {\n\t\t\t\ttype: 'brightness/contrast',\n\t\t\t\tbrightness: desc.Brgh,\n\t\t\t\tcontrast: desc.Cntr,\n\t\t\t\tmeanValue: desc.means,\n\t\t\t\tuseLegacy: !!desc.useLegacy,\n\t\t\t\tlabColorOnly: !!desc['Lab '],\n\t\t\t\tauto: !!desc.Auto,\n\t\t\t};\n\t\t}\n\n\t\tskipBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\tconst info = target.adjustment!;\n\n\t\tif (info.type === 'levels' || info.type === 'exposure' || info.type === 'hue/saturation') {\n\t\t\tconst desc: PresetDescriptor = {\n\t\t\t\tVrsn: 1,\n\t\t\t\tpresetKind: info.presetKind ?? 1,\n\t\t\t\tpresetFileName: info.presetFileName || '',\n\t\t\t};\n\t\t\twriteVersionAndDescriptor(writer, '', 'null', desc);\n\t\t} else if (info.type === 'curves') {\n\t\t\tconst desc: CurvesPresetDescriptor = {\n\t\t\t\tVrsn: 1,\n\t\t\t\tcurvesPresetKind: info.presetKind ?? 1,\n\t\t\t\tcurvesPresetFileName: info.presetFileName || '',\n\t\t\t};\n\t\t\twriteVersionAndDescriptor(writer, '', 'null', desc);\n\t\t} else if (info.type === 'channel mixer') {\n\t\t\tconst desc: MixerPresetDescriptor = {\n\t\t\t\tVrsn: 1,\n\t\t\t\tmixerPresetKind: info.presetKind ?? 1,\n\t\t\t\tmixerPresetFileName: info.presetFileName || '',\n\t\t\t};\n\t\t\twriteVersionAndDescriptor(writer, '', 'null', desc);\n\t\t} else if (info.type === 'brightness/contrast') {\n\t\t\tconst desc: BrightnessContrastDescriptor = {\n\t\t\t\tVrsn: 1,\n\t\t\t\tBrgh: info.brightness || 0,\n\t\t\t\tCntr: info.contrast || 0,\n\t\t\t\tmeans: info.meanValue ?? 127,\n\t\t\t\t'Lab ': !!info.labColorOnly,\n\t\t\t\tuseLegacy: !!info.useLegacy,\n\t\t\t\tAuto: !!info.auto,\n\t\t\t};\n\t\t\twriteVersionAndDescriptor(writer, '', 'null', desc);\n\t\t} else {\n\t\t\tthrow new Error('Unhandled CgEd case');\n\t\t}\n\t},\n);\n\nfunction getTextLayersSortedByIndex(psd: Psd) {\n\tconst layers: (Layer | undefined)[] = [];\n\n\tfunction collect(layer: Layer | Psd) {\n\t\tif (layer.children) {\n\t\t\tfor (const child of layer.children) {\n\t\t\t\tif (child.text?.index !== undefined) {\n\t\t\t\t\tlayers[child.text.index] = child;\n\t\t\t\t}\n\t\t\t\tcollect(child);\n\t\t\t}\n\t\t}\n\t}\n\n\tcollect(psd);\n\treturn layers;\n}\n\naddHandler(\n\t'Txt2',\n\thasKey('engineData'),\n\t(reader, target, left, psd) => {\n\t\tconst data = readBytes(reader, left());\n\t\ttarget.engineData = fromByteArray(data);\n\n\t\tconst layersByIndex = getTextLayersSortedByIndex(psd);\n\t\tconst engineData = parseEngineData(data);\n\t\tconst engineData2 = decodeEngineData2(engineData);\n\t\tconst TextFrameSet = engineData2.ResourceDict.TextFrameSet;\n\n\t\tif (TextFrameSet) {\n\t\t\tfor (let i = 0; i < TextFrameSet.length; i++) {\n\t\t\t\tconst layer = layersByIndex[i];\n\t\t\t\tif (TextFrameSet[i].path && layer?.text) {\n\t\t\t\t\tlayer.text.textPath = TextFrameSet[i].path;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// console.log(require('util').inspect(engineData, false, 99, true));\n\t\t// require('fs').writeFileSync('test_data.bin', data);\n\t\t// require('fs').writeFileSync('test_data.txt', require('util').inspect(engineData, false, 99, false), 'utf8');\n\t\t// require('fs').writeFileSync('test_data.json', JSON.stringify(engineData2, null, 2), 'utf8');\n\t},\n\t(writer, target) => {\n\t\tconst buffer = toByteArray(target.engineData!);\n\t\twriteBytes(writer, buffer);\n\t},\n);\n\naddHandler(\n\t'FEid',\n\thasKey('filterEffectsMasks'),\n\t(reader, target, leftBytes) => {\n\t\tconst version = readInt32(reader);\n\t\tif (version < 1 || version > 3) throw new Error(`Invalid filterEffects version ${version}`);\n\n\t\ttarget.filterEffectsMasks = [];\n\n\t\twhile (leftBytes() > 8) {\n\t\t\tif (readUint32(reader)) throw new Error('filterEffects: 64 bit length is not supported');\n\t\t\tconst length = readUint32(reader);\n\t\t\tconst end = reader.offset + length;\n\n\t\t\tconst id = readPascalString(reader, 1);\n\n\t\t\tconst effectVersion = readInt32(reader);\n\t\t\tif (effectVersion !== 1) throw new Error(`Invalid filterEffect version ${effectVersion}`);\n\n\t\t\tif (readUint32(reader)) throw new Error('filterEffect: 64 bit length is not supported');\n\t\t\t/*const effectLength =*/ readUint32(reader);\n\t\t\t// const endOfEffect = reader.offset + effectLength;\n\n\t\t\tconst top = readInt32(reader);\n\t\t\tconst left = readInt32(reader);\n\t\t\tconst bottom = readInt32(reader);\n\t\t\tconst right = readInt32(reader);\n\t\t\tconst depth = readInt32(reader);\n\t\t\tconst maxChannels = readInt32(reader);\n\t\t\tconst channels: ({ compressionMode: number; data: Uint8Array; } | undefined)[] = [];\n\n\t\t\t// 0 -> R, 1 -> G, 2 -> B, 25 -> A\n\t\t\tfor (let i = 0; i < (maxChannels + 2); i++) { // channels + user mask + sheet mask\n\t\t\t\tconst exists = readInt32(reader);\n\t\t\t\tif (exists) {\n\t\t\t\t\tif (readUint32(reader)) throw new Error('filterEffect: 64 bit length is not supported');\n\t\t\t\t\tconst channelLength = readUint32(reader);\n\t\t\t\t\tif (!channelLength) throw new Error('filterEffect: Empty channel');\n\t\t\t\t\tconst compressionMode = readUint16(reader);\n\t\t\t\t\tconst data = readBytes(reader, channelLength - 2);\n\t\t\t\t\tchannels.push({ compressionMode, data });\n\t\t\t\t} else {\n\t\t\t\t\tchannels.push(undefined);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttarget.filterEffectsMasks.push({ id, top, left, bottom, right, depth, channels });\n\n\t\t\tif (reader.offset < end && readUint8(reader)) {\n\t\t\t\tconst top = readInt32(reader);\n\t\t\t\tconst left = readInt32(reader);\n\t\t\t\tconst bottom = readInt32(reader);\n\t\t\t\tconst right = readInt32(reader);\n\t\t\t\tif (readUint32(reader)) throw new Error('filterEffect: 64 bit length is not supported');\n\t\t\t\tconst extraLength = readUint32(reader);\n\t\t\t\tconst compressionMode = readUint16(reader);\n\t\t\t\tconst data = readBytes(reader, extraLength - 2);\n\t\t\t\ttarget.filterEffectsMasks[target.filterEffectsMasks.length - 1].extra = { top, left, bottom, right, compressionMode, data };\n\t\t\t}\n\n\t\t\treader.offset = end;\n\t\t\tlet len = length;\n\t\t\twhile (len % 4) {\n\t\t\t\treader.offset++;\n\t\t\t\tlen++;\n\t\t\t}\n\t\t}\n\t},\n\t(writer, target) => {\n\t\twriteInt32(writer, 3); // version\n\n\t\tfor (const mask of target.filterEffectsMasks!) {\n\t\t\twriteUint32(writer, 0);\n\t\t\twriteUint32(writer, 0);\n\t\t\tconst lengthOffset = writer.offset;\n\n\t\t\twritePascalString(writer, mask.id, 1);\n\t\t\twriteInt32(writer, 1); // version\n\n\t\t\twriteUint32(writer, 0);\n\t\t\twriteUint32(writer, 0);\n\t\t\tconst length2Offset = writer.offset;\n\n\t\t\twriteInt32(writer, mask.top);\n\t\t\twriteInt32(writer, mask.left);\n\t\t\twriteInt32(writer, mask.bottom);\n\t\t\twriteInt32(writer, mask.right);\n\t\t\twriteInt32(writer, mask.depth);\n\t\t\tconst maxChannels = Math.max(0, mask.channels.length - 2);\n\t\t\twriteInt32(writer, maxChannels);\n\n\t\t\tfor (let i = 0; i < (maxChannels + 2); i++) {\n\t\t\t\tconst channel = mask.channels[i];\n\t\t\t\twriteInt32(writer, channel ? 1 : 0);\n\t\t\t\tif (channel) {\n\t\t\t\t\twriteUint32(writer, 0);\n\t\t\t\t\twriteUint32(writer, channel.data.length + 2);\n\t\t\t\t\twriteUint16(writer, channel.compressionMode);\n\t\t\t\t\twriteBytes(writer, channel.data);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriter.view.setUint32(length2Offset - 4, writer.offset - length2Offset, false);\n\n\t\t\tconst extra = target.filterEffectsMasks![target.filterEffectsMasks!.length - 1]?.extra;\n\t\t\tif (extra) {\n\t\t\t\twriteUint8(writer, 1);\n\t\t\t\twriteInt32(writer, extra.top);\n\t\t\t\twriteInt32(writer, extra.left);\n\t\t\t\twriteInt32(writer, extra.bottom);\n\t\t\t\twriteInt32(writer, extra.right);\n\t\t\t\twriteUint32(writer, 0);\n\t\t\t\twriteUint32(writer, extra.data.byteLength + 2);\n\t\t\t\twriteUint16(writer, extra.compressionMode);\n\t\t\t\twriteBytes(writer, extra.data);\n\t\t\t}\n\n\t\t\tlet length = writer.offset - lengthOffset;\n\t\t\twriter.view.setUint32(lengthOffset - 4, length, false);\n\n\t\t\twhile (length % 4) {\n\t\t\t\twriteZeros(writer, 1);\n\t\t\t\tlength++;\n\t\t\t}\n\t\t}\n\t},\n);\n\naddHandlerAlias('FXid', 'FEid');\n\naddHandler(\n\t'FMsk',\n\thasKey('filterMask'),\n\t(reader, target) => {\n\t\ttarget.filterMask = {\n\t\t\tcolorSpace: readColor(reader),\n\t\t\topacity: readUint16(reader) / 0xff,\n\t\t};\n\t},\n\t(writer, target) => {\n\t\twriteColor(writer, target.filterMask!.colorSpace);\n\t\twriteUint16(writer, clamp(target.filterMask!.opacity ?? 1, 0, 1) * 0xff);\n\t},\n);\n\ninterface ArtdDescriptor {\n\t'Cnt ': number;\n\tautoExpandOffset: { Hrzn: number; Vrtc: number; };\n\torigin: { Hrzn: number; Vrtc: number; };\n\tautoExpandEnabled: boolean;\n\tautoNestEnabled: boolean;\n\tautoPositionEnabled: boolean;\n\tshrinkwrapOnSaveEnabled?: boolean;\n\tdocDefaultNewArtboardBackgroundColor: DescriptorColor;\n\tdocDefaultNewArtboardBackgroundType: number;\n}\n\naddHandler(\n\t'artd', // document-wide artboard info\n\ttarget => (target as Psd).artboards !== undefined,\n\t(reader, target, left) => {\n\t\tconst desc = readVersionAndDescriptor(reader) as ArtdDescriptor;\n\t\t(target as Psd).artboards = {\n\t\t\tcount: desc['Cnt '],\n\t\t\tautoExpandOffset: { horizontal: desc.autoExpandOffset.Hrzn, vertical: desc.autoExpandOffset.Vrtc },\n\t\t\torigin: { horizontal: desc.origin.Hrzn, vertical: desc.origin.Vrtc },\n\t\t\tautoExpandEnabled: desc.autoExpandEnabled,\n\t\t\tautoNestEnabled: desc.autoNestEnabled,\n\t\t\tautoPositionEnabled: desc.autoPositionEnabled,\n\t\t\tshrinkwrapOnSaveEnabled: !!desc.shrinkwrapOnSaveEnabled,\n\t\t\tdocDefaultNewArtboardBackgroundColor: parseColor(desc.docDefaultNewArtboardBackgroundColor),\n\t\t\tdocDefaultNewArtboardBackgroundType: desc.docDefaultNewArtboardBackgroundType,\n\t\t};\n\n\t\tskipBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\tconst artb = (target as Psd).artboards!;\n\t\tconst desc: ArtdDescriptor = {\n\t\t\t'Cnt ': artb.count,\n\t\t\tautoExpandOffset: artb.autoExpandOffset ? { Hrzn: artb.autoExpandOffset.horizontal, Vrtc: artb.autoExpandOffset.vertical } : { Hrzn: 0, Vrtc: 0 },\n\t\t\torigin: artb.origin ? { Hrzn: artb.origin.horizontal, Vrtc: artb.origin.vertical } : { Hrzn: 0, Vrtc: 0 },\n\t\t\tautoExpandEnabled: artb.autoExpandEnabled ?? true,\n\t\t\tautoNestEnabled: artb.autoNestEnabled ?? true,\n\t\t\tautoPositionEnabled: artb.autoPositionEnabled ?? true,\n\t\t\tshrinkwrapOnSaveEnabled: artb.shrinkwrapOnSaveEnabled ?? true,\n\t\t\tdocDefaultNewArtboardBackgroundColor: serializeColor(artb.docDefaultNewArtboardBackgroundColor),\n\t\t\tdocDefaultNewArtboardBackgroundType: artb.docDefaultNewArtboardBackgroundType ?? 1,\n\t\t};\n\t\twriteVersionAndDescriptor(writer, '', 'null', desc, 'artd');\n\t},\n);\n\nexport function hasMultiEffects(effects: LayerEffectsInfo) {\n\treturn Object.keys(effects).map(key => (effects as any)[key]).some(v => Array.isArray(v) && v.length > 1);\n}\n\naddHandler(\n\t'lfx2',\n\ttarget => target.effects !== undefined && !hasMultiEffects(target.effects),\n\t(reader, target, left) => {\n\t\tconst version = readUint32(reader);\n\t\tif (version !== 0) throw new Error(`Invalid lfx2 version`);\n\n\t\tconst desc: Lfx2Descriptor & LmfxDescriptor = readVersionAndDescriptor(reader);\n\t\t// console.log('READ', require('util').inspect(desc, false, 99, true));\n\n\t\t// TODO: don't discard if we got it from lmfx\n\t\t// discard if read in 'lrFX' section\n\t\ttarget.effects = parseEffects(desc, !!reader.logMissingFeatures);\n\n\t\tskipBytes(reader, left());\n\t},\n\t(writer, target, _, options) => {\n\t\tconst desc = serializeEffects(target.effects!, !!options.logMissingFeatures, true);\n\t\t// console.log('WRITE', require('util').inspect(desc, false, 99, true));\n\n\t\twriteUint32(writer, 0); // version\n\t\twriteVersionAndDescriptor(writer, '', 'null', desc);\n\t},\n);\n\ninterface CinfDescriptor {\n\tVrsn: { major: number; minor: number; fix: number; };\n\tpsVersion?: { major: number; minor: number; fix: number; };\n\tdescription: string;\n\treason: string;\n\tEngn: string; // 'Engn.compCore';\n\tenableCompCore?: string; // 'enable.feature';\n\tenableCompCoreGPU?: string; // 'enable.feature';\n\tenableCompCoreThreads?: string; // 'enable.feature';\n\tcompCoreSupport?: string; // 'reason.supported';\n\tcompCoreGPUSupport?: string; // 'reason.featureDisabled';\n}\n\naddHandler(\n\t'cinf',\n\thasKey('compositorUsed'),\n\t(reader, target, left) => {\n\t\tconst desc = readVersionAndDescriptor(reader) as CinfDescriptor;\n\t\t// console.log(require('util').inspect(desc, false, 99, true));\n\n\t\tfunction enumValue(desc: string): string {\n\t\t\treturn desc.split('.')[1];\n\t\t}\n\n\t\ttarget.compositorUsed = {\n\t\t\tdescription: desc.description,\n\t\t\treason: desc.reason,\n\t\t\tengine: enumValue(desc.Engn)!,\n\t\t};\n\n\t\tif (desc.Vrsn) target.compositorUsed.version = desc.Vrsn;\n\t\tif (desc.psVersion) target.compositorUsed.photoshopVersion = desc.psVersion;\n\t\tif (desc.enableCompCore) target.compositorUsed.enableCompCore = enumValue(desc.enableCompCore);\n\t\tif (desc.enableCompCoreGPU) target.compositorUsed.enableCompCoreGPU = enumValue(desc.enableCompCoreGPU);\n\t\tif (desc.enableCompCoreThreads) target.compositorUsed.enableCompCoreThreads = enumValue(desc.enableCompCoreThreads);\n\t\tif (desc.compCoreSupport) target.compositorUsed.compCoreSupport = enumValue(desc.compCoreSupport);\n\t\tif (desc.compCoreGPUSupport) target.compositorUsed.compCoreGPUSupport = enumValue(desc.compCoreGPUSupport);\n\n\t\tskipBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\tconst cinf = target.compositorUsed!;\n\t\tconst desc: CinfDescriptor = {\n\t\t\tVrsn: cinf.version || { major: 1, minor: 0, fix: 0 },\n\t\t} as any;\n\n\t\tif (cinf.photoshopVersion) desc.psVersion = cinf.photoshopVersion;\n\t\tdesc.description = cinf.description;\n\t\tdesc.reason = cinf.reason;\n\t\tdesc.Engn = `Engn.${cinf.engine}`;\n\t\tif (cinf.enableCompCore) desc.enableCompCore = `enable.${cinf.enableCompCore}`;\n\t\tif (cinf.enableCompCoreGPU) desc.enableCompCoreGPU = `enable.${cinf.enableCompCoreGPU}`;\n\t\tif (cinf.enableCompCoreThreads) desc.enableCompCoreThreads = `enable.${cinf.enableCompCoreThreads}`;\n\t\tif (cinf.compCoreSupport) desc.compCoreSupport = `reason.${cinf.compCoreSupport}`;\n\t\tif (cinf.compCoreGPUSupport) desc.compCoreGPUSupport = `reason.${cinf.compCoreGPUSupport}`;\n\n\t\twriteVersionAndDescriptor(writer, '', 'null', desc);\n\t},\n);\n\ninterface ExtensionDesc {\n\tgeneratorSettings: {\n\t\tgenerator_45_assets: { json: string; };\n\t\tlayerTime: number;\n\t};\n}\n\n// extension settings ?, ignore it\naddHandler(\n\t'extn',\n\ttarget => (target as any)._extn !== undefined,\n\t(reader, target) => {\n\t\tconst desc: ExtensionDesc = readVersionAndDescriptor(reader);\n\t\t// console.log(require('util').inspect(desc, false, 99, true));\n\n\t\tif (MOCK_HANDLERS) (target as any)._extn = desc;\n\t},\n\t(writer, target) => {\n\t\t// TODO: need to add correct types for desc fields (resources/src.psd)\n\t\tif (MOCK_HANDLERS) writeVersionAndDescriptor(writer, '', 'null', (target as any)._extn);\n\t},\n);\n\naddHandler(\n\t'iOpa',\n\thasKey('fillOpacity'),\n\t(reader, target) => {\n\t\ttarget.fillOpacity = readUint8(reader) / 0xff;\n\t\tskipBytes(reader, 3);\n\t},\n\t(writer, target) => {\n\t\twriteUint8(writer, target.fillOpacity! * 0xff);\n\t\twriteZeros(writer, 3);\n\t},\n);\n\naddHandler(\n\t'brst',\n\thasKey('channelBlendingRestrictions'),\n\t(reader, target, left) => {\n\t\ttarget.channelBlendingRestrictions = [];\n\n\t\twhile (left() > 4) {\n\t\t\ttarget.channelBlendingRestrictions.push(readInt32(reader));\n\t\t}\n\t},\n\t(writer, target) => {\n\t\tfor (const channel of target.channelBlendingRestrictions!) {\n\t\t\twriteInt32(writer, channel);\n\t\t}\n\t},\n);\n\naddHandler(\n\t'tsly',\n\thasKey('transparencyShapesLayer'),\n\t(reader, target) => {\n\t\ttarget.transparencyShapesLayer = !!readUint8(reader);\n\t\tskipBytes(reader, 3);\n\t},\n\t(writer, target) => {\n\t\twriteUint8(writer, target.transparencyShapesLayer ? 1 : 0);\n\t\twriteZeros(writer, 3);\n\t},\n);\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.writeEffects = exports.readEffects = void 0;\r\nvar helpers_1 = require(\"./helpers\");\r\nvar psdReader_1 = require(\"./psdReader\");\r\nvar psdWriter_1 = require(\"./psdWriter\");\r\nvar bevelStyles = [\r\n    undefined, 'outer bevel', 'inner bevel', 'emboss', 'pillow emboss', 'stroke emboss'\r\n];\r\nfunction readBlendMode(reader) {\r\n    (0, psdReader_1.checkSignature)(reader, '8BIM');\r\n    return helpers_1.toBlendMode[(0, psdReader_1.readSignature)(reader)] || 'normal';\r\n}\r\nfunction writeBlendMode(writer, mode) {\r\n    (0, psdWriter_1.writeSignature)(writer, '8BIM');\r\n    (0, psdWriter_1.writeSignature)(writer, helpers_1.fromBlendMode[mode] || 'norm');\r\n}\r\nfunction readFixedPoint8(reader) {\r\n    return (0, psdReader_1.readUint8)(reader) / 0xff;\r\n}\r\nfunction writeFixedPoint8(writer, value) {\r\n    (0, psdWriter_1.writeUint8)(writer, Math.round(value * 0xff) | 0);\r\n}\r\nfunction readEffects(reader) {\r\n    var version = (0, psdReader_1.readUint16)(reader);\r\n    if (version !== 0)\r\n        throw new Error(\"Invalid effects layer version: \".concat(version));\r\n    var effectsCount = (0, psdReader_1.readUint16)(reader);\r\n    var effects = {};\r\n    for (var i = 0; i < effectsCount; i++) {\r\n        (0, psdReader_1.checkSignature)(reader, '8BIM');\r\n        var type = (0, psdReader_1.readSignature)(reader);\r\n        switch (type) {\r\n            case 'cmnS': { // common state (see See Effects layer, common state info)\r\n                var size = (0, psdReader_1.readUint32)(reader);\r\n                var version_1 = (0, psdReader_1.readUint32)(reader);\r\n                var visible = !!(0, psdReader_1.readUint8)(reader);\r\n                (0, psdReader_1.skipBytes)(reader, 2);\r\n                if (size !== 7 || version_1 !== 0 || !visible)\r\n                    throw new Error(\"Invalid effects common state\");\r\n                break;\r\n            }\r\n            case 'dsdw': // drop shadow (see See Effects layer, drop shadow and inner shadow info)\r\n            case 'isdw': { // inner shadow (see See Effects layer, drop shadow and inner shadow info)\r\n                var blockSize = (0, psdReader_1.readUint32)(reader);\r\n                var version_2 = (0, psdReader_1.readUint32)(reader);\r\n                if (blockSize !== 41 && blockSize !== 51)\r\n                    throw new Error(\"Invalid shadow size: \".concat(blockSize));\r\n                if (version_2 !== 0 && version_2 !== 2)\r\n                    throw new Error(\"Invalid shadow version: \".concat(version_2));\r\n                var size = (0, psdReader_1.readFixedPoint32)(reader);\r\n                (0, psdReader_1.readFixedPoint32)(reader); // intensity\r\n                var angle = (0, psdReader_1.readFixedPoint32)(reader);\r\n                var distance = (0, psdReader_1.readFixedPoint32)(reader);\r\n                var color = (0, psdReader_1.readColor)(reader);\r\n                var blendMode = readBlendMode(reader);\r\n                var enabled = !!(0, psdReader_1.readUint8)(reader);\r\n                var useGlobalLight = !!(0, psdReader_1.readUint8)(reader);\r\n                var opacity = readFixedPoint8(reader);\r\n                if (blockSize >= 51)\r\n                    (0, psdReader_1.readColor)(reader); // native color\r\n                var shadowInfo = {\r\n                    size: { units: 'Pixels', value: size },\r\n                    distance: { units: 'Pixels', value: distance },\r\n                    angle: angle,\r\n                    color: color,\r\n                    blendMode: blendMode,\r\n                    enabled: enabled,\r\n                    useGlobalLight: useGlobalLight,\r\n                    opacity: opacity\r\n                };\r\n                if (type === 'dsdw') {\r\n                    effects.dropShadow = [shadowInfo];\r\n                }\r\n                else {\r\n                    effects.innerShadow = [shadowInfo];\r\n                }\r\n                break;\r\n            }\r\n            case 'oglw': { // outer glow (see See Effects layer, outer glow info)\r\n                var blockSize = (0, psdReader_1.readUint32)(reader);\r\n                var version_3 = (0, psdReader_1.readUint32)(reader);\r\n                if (blockSize !== 32 && blockSize !== 42)\r\n                    throw new Error(\"Invalid outer glow size: \".concat(blockSize));\r\n                if (version_3 !== 0 && version_3 !== 2)\r\n                    throw new Error(\"Invalid outer glow version: \".concat(version_3));\r\n                var size = (0, psdReader_1.readFixedPoint32)(reader);\r\n                (0, psdReader_1.readFixedPoint32)(reader); // intensity\r\n                var color = (0, psdReader_1.readColor)(reader);\r\n                var blendMode = readBlendMode(reader);\r\n                var enabled = !!(0, psdReader_1.readUint8)(reader);\r\n                var opacity = readFixedPoint8(reader);\r\n                if (blockSize >= 42)\r\n                    (0, psdReader_1.readColor)(reader); // native color\r\n                effects.outerGlow = {\r\n                    size: { units: 'Pixels', value: size },\r\n                    color: color,\r\n                    blendMode: blendMode,\r\n                    enabled: enabled,\r\n                    opacity: opacity\r\n                };\r\n                break;\r\n            }\r\n            case 'iglw': { // inner glow (see See Effects layer, inner glow info)\r\n                var blockSize = (0, psdReader_1.readUint32)(reader);\r\n                var version_4 = (0, psdReader_1.readUint32)(reader);\r\n                if (blockSize !== 32 && blockSize !== 43)\r\n                    throw new Error(\"Invalid inner glow size: \".concat(blockSize));\r\n                if (version_4 !== 0 && version_4 !== 2)\r\n                    throw new Error(\"Invalid inner glow version: \".concat(version_4));\r\n                var size = (0, psdReader_1.readFixedPoint32)(reader);\r\n                (0, psdReader_1.readFixedPoint32)(reader); // intensity\r\n                var color = (0, psdReader_1.readColor)(reader);\r\n                var blendMode = readBlendMode(reader);\r\n                var enabled = !!(0, psdReader_1.readUint8)(reader);\r\n                var opacity = readFixedPoint8(reader);\r\n                if (blockSize >= 43) {\r\n                    (0, psdReader_1.readUint8)(reader); // inverted\r\n                    (0, psdReader_1.readColor)(reader); // native color\r\n                }\r\n                effects.innerGlow = {\r\n                    size: { units: 'Pixels', value: size },\r\n                    color: color,\r\n                    blendMode: blendMode,\r\n                    enabled: enabled,\r\n                    opacity: opacity\r\n                };\r\n                break;\r\n            }\r\n            case 'bevl': { // bevel (see See Effects layer, bevel info)\r\n                var blockSize = (0, psdReader_1.readUint32)(reader);\r\n                var version_5 = (0, psdReader_1.readUint32)(reader);\r\n                if (blockSize !== 58 && blockSize !== 78)\r\n                    throw new Error(\"Invalid bevel size: \".concat(blockSize));\r\n                if (version_5 !== 0 && version_5 !== 2)\r\n                    throw new Error(\"Invalid bevel version: \".concat(version_5));\r\n                var angle = (0, psdReader_1.readFixedPoint32)(reader);\r\n                var strength = (0, psdReader_1.readFixedPoint32)(reader);\r\n                var size = (0, psdReader_1.readFixedPoint32)(reader);\r\n                var highlightBlendMode = readBlendMode(reader);\r\n                var shadowBlendMode = readBlendMode(reader);\r\n                var highlightColor = (0, psdReader_1.readColor)(reader);\r\n                var shadowColor = (0, psdReader_1.readColor)(reader);\r\n                var style = bevelStyles[(0, psdReader_1.readUint8)(reader)] || 'inner bevel';\r\n                var highlightOpacity = readFixedPoint8(reader);\r\n                var shadowOpacity = readFixedPoint8(reader);\r\n                var enabled = !!(0, psdReader_1.readUint8)(reader);\r\n                var useGlobalLight = !!(0, psdReader_1.readUint8)(reader);\r\n                var direction = (0, psdReader_1.readUint8)(reader) ? 'down' : 'up';\r\n                if (blockSize >= 78) {\r\n                    (0, psdReader_1.readColor)(reader); // real highlight color\r\n                    (0, psdReader_1.readColor)(reader); // real shadow color\r\n                }\r\n                effects.bevel = {\r\n                    size: { units: 'Pixels', value: size },\r\n                    angle: angle,\r\n                    strength: strength,\r\n                    highlightBlendMode: highlightBlendMode,\r\n                    shadowBlendMode: shadowBlendMode,\r\n                    highlightColor: highlightColor,\r\n                    shadowColor: shadowColor,\r\n                    style: style,\r\n                    highlightOpacity: highlightOpacity,\r\n                    shadowOpacity: shadowOpacity,\r\n                    enabled: enabled,\r\n                    useGlobalLight: useGlobalLight,\r\n                    direction: direction,\r\n                };\r\n                break;\r\n            }\r\n            case 'sofi': { // solid fill (Photoshop 7.0) (see See Effects layer, solid fill (added in Photoshop 7.0))\r\n                var size = (0, psdReader_1.readUint32)(reader);\r\n                var version_6 = (0, psdReader_1.readUint32)(reader);\r\n                if (size !== 34)\r\n                    throw new Error(\"Invalid effects solid fill info size: \".concat(size));\r\n                if (version_6 !== 2)\r\n                    throw new Error(\"Invalid effects solid fill info version: \".concat(version_6));\r\n                var blendMode = readBlendMode(reader);\r\n                var color = (0, psdReader_1.readColor)(reader);\r\n                var opacity = readFixedPoint8(reader);\r\n                var enabled = !!(0, psdReader_1.readUint8)(reader);\r\n                (0, psdReader_1.readColor)(reader); // native color\r\n                effects.solidFill = [{ blendMode: blendMode, color: color, opacity: opacity, enabled: enabled }];\r\n                break;\r\n            }\r\n            default:\r\n                throw new Error(\"Invalid effect type: '\".concat(type, \"'\"));\r\n        }\r\n    }\r\n    return effects;\r\n}\r\nexports.readEffects = readEffects;\r\nfunction writeShadowInfo(writer, shadow) {\r\n    var _a;\r\n    (0, psdWriter_1.writeUint32)(writer, 51);\r\n    (0, psdWriter_1.writeUint32)(writer, 2);\r\n    (0, psdWriter_1.writeFixedPoint32)(writer, shadow.size && shadow.size.value || 0);\r\n    (0, psdWriter_1.writeFixedPoint32)(writer, 0); // intensity\r\n    (0, psdWriter_1.writeFixedPoint32)(writer, shadow.angle || 0);\r\n    (0, psdWriter_1.writeFixedPoint32)(writer, shadow.distance && shadow.distance.value || 0);\r\n    (0, psdWriter_1.writeColor)(writer, shadow.color);\r\n    writeBlendMode(writer, shadow.blendMode);\r\n    (0, psdWriter_1.writeUint8)(writer, shadow.enabled ? 1 : 0);\r\n    (0, psdWriter_1.writeUint8)(writer, shadow.useGlobalLight ? 1 : 0);\r\n    writeFixedPoint8(writer, (_a = shadow.opacity) !== null && _a !== void 0 ? _a : 1);\r\n    (0, psdWriter_1.writeColor)(writer, shadow.color); // native color\r\n}\r\nfunction writeEffects(writer, effects) {\r\n    var _a, _b, _c, _d, _e, _f;\r\n    var dropShadow = (_a = effects.dropShadow) === null || _a === void 0 ? void 0 : _a[0];\r\n    var innerShadow = (_b = effects.innerShadow) === null || _b === void 0 ? void 0 : _b[0];\r\n    var outerGlow = effects.outerGlow;\r\n    var innerGlow = effects.innerGlow;\r\n    var bevel = effects.bevel;\r\n    var solidFill = (_c = effects.solidFill) === null || _c === void 0 ? void 0 : _c[0];\r\n    var count = 1;\r\n    if (dropShadow)\r\n        count++;\r\n    if (innerShadow)\r\n        count++;\r\n    if (outerGlow)\r\n        count++;\r\n    if (innerGlow)\r\n        count++;\r\n    if (bevel)\r\n        count++;\r\n    if (solidFill)\r\n        count++;\r\n    (0, psdWriter_1.writeUint16)(writer, 0);\r\n    (0, psdWriter_1.writeUint16)(writer, count);\r\n    (0, psdWriter_1.writeSignature)(writer, '8BIM');\r\n    (0, psdWriter_1.writeSignature)(writer, 'cmnS');\r\n    (0, psdWriter_1.writeUint32)(writer, 7); // size\r\n    (0, psdWriter_1.writeUint32)(writer, 0); // version\r\n    (0, psdWriter_1.writeUint8)(writer, 1); // visible\r\n    (0, psdWriter_1.writeZeros)(writer, 2);\r\n    if (dropShadow) {\r\n        (0, psdWriter_1.writeSignature)(writer, '8BIM');\r\n        (0, psdWriter_1.writeSignature)(writer, 'dsdw');\r\n        writeShadowInfo(writer, dropShadow);\r\n    }\r\n    if (innerShadow) {\r\n        (0, psdWriter_1.writeSignature)(writer, '8BIM');\r\n        (0, psdWriter_1.writeSignature)(writer, 'isdw');\r\n        writeShadowInfo(writer, innerShadow);\r\n    }\r\n    if (outerGlow) {\r\n        (0, psdWriter_1.writeSignature)(writer, '8BIM');\r\n        (0, psdWriter_1.writeSignature)(writer, 'oglw');\r\n        (0, psdWriter_1.writeUint32)(writer, 42);\r\n        (0, psdWriter_1.writeUint32)(writer, 2);\r\n        (0, psdWriter_1.writeFixedPoint32)(writer, ((_d = outerGlow.size) === null || _d === void 0 ? void 0 : _d.value) || 0);\r\n        (0, psdWriter_1.writeFixedPoint32)(writer, 0); // intensity\r\n        (0, psdWriter_1.writeColor)(writer, outerGlow.color);\r\n        writeBlendMode(writer, outerGlow.blendMode);\r\n        (0, psdWriter_1.writeUint8)(writer, outerGlow.enabled ? 1 : 0);\r\n        writeFixedPoint8(writer, outerGlow.opacity || 0);\r\n        (0, psdWriter_1.writeColor)(writer, outerGlow.color);\r\n    }\r\n    if (innerGlow) {\r\n        (0, psdWriter_1.writeSignature)(writer, '8BIM');\r\n        (0, psdWriter_1.writeSignature)(writer, 'iglw');\r\n        (0, psdWriter_1.writeUint32)(writer, 43);\r\n        (0, psdWriter_1.writeUint32)(writer, 2);\r\n        (0, psdWriter_1.writeFixedPoint32)(writer, ((_e = innerGlow.size) === null || _e === void 0 ? void 0 : _e.value) || 0);\r\n        (0, psdWriter_1.writeFixedPoint32)(writer, 0); // intensity\r\n        (0, psdWriter_1.writeColor)(writer, innerGlow.color);\r\n        writeBlendMode(writer, innerGlow.blendMode);\r\n        (0, psdWriter_1.writeUint8)(writer, innerGlow.enabled ? 1 : 0);\r\n        writeFixedPoint8(writer, innerGlow.opacity || 0);\r\n        (0, psdWriter_1.writeUint8)(writer, 0); // inverted\r\n        (0, psdWriter_1.writeColor)(writer, innerGlow.color);\r\n    }\r\n    if (bevel) {\r\n        (0, psdWriter_1.writeSignature)(writer, '8BIM');\r\n        (0, psdWriter_1.writeSignature)(writer, 'bevl');\r\n        (0, psdWriter_1.writeUint32)(writer, 78);\r\n        (0, psdWriter_1.writeUint32)(writer, 2);\r\n        (0, psdWriter_1.writeFixedPoint32)(writer, bevel.angle || 0);\r\n        (0, psdWriter_1.writeFixedPoint32)(writer, bevel.strength || 0);\r\n        (0, psdWriter_1.writeFixedPoint32)(writer, ((_f = bevel.size) === null || _f === void 0 ? void 0 : _f.value) || 0);\r\n        writeBlendMode(writer, bevel.highlightBlendMode);\r\n        writeBlendMode(writer, bevel.shadowBlendMode);\r\n        (0, psdWriter_1.writeColor)(writer, bevel.highlightColor);\r\n        (0, psdWriter_1.writeColor)(writer, bevel.shadowColor);\r\n        var style = bevelStyles.indexOf(bevel.style);\r\n        (0, psdWriter_1.writeUint8)(writer, style <= 0 ? 1 : style);\r\n        writeFixedPoint8(writer, bevel.highlightOpacity || 0);\r\n        writeFixedPoint8(writer, bevel.shadowOpacity || 0);\r\n        (0, psdWriter_1.writeUint8)(writer, bevel.enabled ? 1 : 0);\r\n        (0, psdWriter_1.writeUint8)(writer, bevel.useGlobalLight ? 1 : 0);\r\n        (0, psdWriter_1.writeUint8)(writer, bevel.direction === 'down' ? 1 : 0);\r\n        (0, psdWriter_1.writeColor)(writer, bevel.highlightColor);\r\n        (0, psdWriter_1.writeColor)(writer, bevel.shadowColor);\r\n    }\r\n    if (solidFill) {\r\n        (0, psdWriter_1.writeSignature)(writer, '8BIM');\r\n        (0, psdWriter_1.writeSignature)(writer, 'sofi');\r\n        (0, psdWriter_1.writeUint32)(writer, 34);\r\n        (0, psdWriter_1.writeUint32)(writer, 2);\r\n        writeBlendMode(writer, solidFill.blendMode);\r\n        (0, psdWriter_1.writeColor)(writer, solidFill.color);\r\n        writeFixedPoint8(writer, solidFill.opacity || 0);\r\n        (0, psdWriter_1.writeUint8)(writer, solidFill.enabled ? 1 : 0);\r\n        (0, psdWriter_1.writeColor)(writer, solidFill.color);\r\n    }\r\n}\r\nexports.writeEffects = writeEffects;\r\n//# sourceMappingURL=effectsHelpers.js.map","import { LayerEffectsInfo, BevelStyle, LayerEffectShadow } from './psd';\nimport { toBlendMode, fromBlendMode } from './helpers';\nimport {\n\tPsdReader, checkSignature, readSignature, skipBytes, readUint16, readUint8,\n\treadUint32, readFixedPoint32, readColor\n} from './psdReader';\nimport {\n\tPsdWriter, writeSignature, writeUint16, writeZeros, writeFixedPoint32,\n\twriteUint8, writeUint32, writeColor\n} from './psdWriter';\n\nconst bevelStyles: BevelStyle[] = [\n\tundefined as any, 'outer bevel', 'inner bevel', 'emboss', 'pillow emboss', 'stroke emboss'\n];\n\nfunction readBlendMode(reader: PsdReader) {\n\tcheckSignature(reader, '8BIM');\n\treturn toBlendMode[readSignature(reader)] || 'normal';\n}\n\nfunction writeBlendMode(writer: PsdWriter, mode: string | undefined) {\n\twriteSignature(writer, '8BIM');\n\twriteSignature(writer, fromBlendMode[mode!] || 'norm');\n}\n\nfunction readFixedPoint8(reader: PsdReader) {\n\treturn readUint8(reader) / 0xff;\n}\n\nfunction writeFixedPoint8(writer: PsdWriter, value: number) {\n\twriteUint8(writer, Math.round(value * 0xff) | 0);\n}\n\nexport function readEffects(reader: PsdReader) {\n\tconst version = readUint16(reader);\n\tif (version !== 0) throw new Error(`Invalid effects layer version: ${version}`);\n\n\tconst effectsCount = readUint16(reader);\n\tconst effects: LayerEffectsInfo = <any>{};\n\n\tfor (let i = 0; i < effectsCount; i++) {\n\t\tcheckSignature(reader, '8BIM');\n\t\tconst type = readSignature(reader);\n\n\t\tswitch (type) {\n\t\t\tcase 'cmnS': { // common state (see See Effects layer, common state info)\n\t\t\t\tconst size = readUint32(reader);\n\t\t\t\tconst version = readUint32(reader);\n\t\t\t\tconst visible = !!readUint8(reader);\n\t\t\t\tskipBytes(reader, 2);\n\n\t\t\t\tif (size !== 7 || version !== 0 || !visible) throw new Error(`Invalid effects common state`);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'dsdw': // drop shadow (see See Effects layer, drop shadow and inner shadow info)\n\t\t\tcase 'isdw': { // inner shadow (see See Effects layer, drop shadow and inner shadow info)\n\t\t\t\tconst blockSize = readUint32(reader);\n\t\t\t\tconst version = readUint32(reader);\n\n\t\t\t\tif (blockSize !== 41 && blockSize !== 51) throw new Error(`Invalid shadow size: ${blockSize}`);\n\t\t\t\tif (version !== 0 && version !== 2) throw new Error(`Invalid shadow version: ${version}`);\n\n\t\t\t\tconst size = readFixedPoint32(reader);\n\t\t\t\treadFixedPoint32(reader); // intensity\n\t\t\t\tconst angle = readFixedPoint32(reader);\n\t\t\t\tconst distance = readFixedPoint32(reader);\n\t\t\t\tconst color = readColor(reader);\n\t\t\t\tconst blendMode = readBlendMode(reader);\n\t\t\t\tconst enabled = !!readUint8(reader);\n\t\t\t\tconst useGlobalLight = !!readUint8(reader);\n\t\t\t\tconst opacity = readFixedPoint8(reader);\n\t\t\t\tif (blockSize >= 51) readColor(reader); // native color\n\t\t\t\tconst shadowInfo: LayerEffectShadow = {\n\t\t\t\t\tsize: { units: 'Pixels', value: size },\n\t\t\t\t\tdistance: { units: 'Pixels', value: distance },\n\t\t\t\t\tangle, color, blendMode, enabled, useGlobalLight, opacity\n\t\t\t\t};\n\n\t\t\t\tif (type === 'dsdw') {\n\t\t\t\t\teffects.dropShadow = [shadowInfo];\n\t\t\t\t} else {\n\t\t\t\t\teffects.innerShadow = [shadowInfo];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'oglw': { // outer glow (see See Effects layer, outer glow info)\n\t\t\t\tconst blockSize = readUint32(reader);\n\t\t\t\tconst version = readUint32(reader);\n\n\t\t\t\tif (blockSize !== 32 && blockSize !== 42) throw new Error(`Invalid outer glow size: ${blockSize}`);\n\t\t\t\tif (version !== 0 && version !== 2) throw new Error(`Invalid outer glow version: ${version}`);\n\n\t\t\t\tconst size = readFixedPoint32(reader);\n\t\t\t\treadFixedPoint32(reader); // intensity\n\t\t\t\tconst color = readColor(reader);\n\t\t\t\tconst blendMode = readBlendMode(reader);\n\t\t\t\tconst enabled = !!readUint8(reader);\n\t\t\t\tconst opacity = readFixedPoint8(reader);\n\t\t\t\tif (blockSize >= 42) readColor(reader); // native color\n\n\t\t\t\teffects.outerGlow = {\n\t\t\t\t\tsize: { units: 'Pixels', value: size },\n\t\t\t\t\tcolor, blendMode, enabled, opacity\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'iglw': { // inner glow (see See Effects layer, inner glow info)\n\t\t\t\tconst blockSize = readUint32(reader);\n\t\t\t\tconst version = readUint32(reader);\n\n\t\t\t\tif (blockSize !== 32 && blockSize !== 43) throw new Error(`Invalid inner glow size: ${blockSize}`);\n\t\t\t\tif (version !== 0 && version !== 2) throw new Error(`Invalid inner glow version: ${version}`);\n\n\t\t\t\tconst size = readFixedPoint32(reader);\n\t\t\t\treadFixedPoint32(reader); // intensity\n\t\t\t\tconst color = readColor(reader);\n\t\t\t\tconst blendMode = readBlendMode(reader);\n\t\t\t\tconst enabled = !!readUint8(reader);\n\t\t\t\tconst opacity = readFixedPoint8(reader);\n\n\t\t\t\tif (blockSize >= 43) {\n\t\t\t\t\treadUint8(reader); // inverted\n\t\t\t\t\treadColor(reader); // native color\n\t\t\t\t}\n\n\t\t\t\teffects.innerGlow = {\n\t\t\t\t\tsize: { units: 'Pixels', value: size },\n\t\t\t\t\tcolor, blendMode, enabled, opacity\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'bevl': { // bevel (see See Effects layer, bevel info)\n\t\t\t\tconst blockSize = readUint32(reader);\n\t\t\t\tconst version = readUint32(reader);\n\n\t\t\t\tif (blockSize !== 58 && blockSize !== 78) throw new Error(`Invalid bevel size: ${blockSize}`);\n\t\t\t\tif (version !== 0 && version !== 2) throw new Error(`Invalid bevel version: ${version}`);\n\n\t\t\t\tconst angle = readFixedPoint32(reader);\n\t\t\t\tconst strength = readFixedPoint32(reader);\n\t\t\t\tconst size = readFixedPoint32(reader);\n\t\t\t\tconst highlightBlendMode = readBlendMode(reader);\n\t\t\t\tconst shadowBlendMode = readBlendMode(reader);\n\t\t\t\tconst highlightColor = readColor(reader);\n\t\t\t\tconst shadowColor = readColor(reader);\n\t\t\t\tconst style = bevelStyles[readUint8(reader)] || 'inner bevel';\n\t\t\t\tconst highlightOpacity = readFixedPoint8(reader);\n\t\t\t\tconst shadowOpacity = readFixedPoint8(reader);\n\t\t\t\tconst enabled = !!readUint8(reader);\n\t\t\t\tconst useGlobalLight = !!readUint8(reader);\n\t\t\t\tconst direction = readUint8(reader) ? 'down' : 'up';\n\n\t\t\t\tif (blockSize >= 78) {\n\t\t\t\t\treadColor(reader); // real highlight color\n\t\t\t\t\treadColor(reader); // real shadow color\n\t\t\t\t}\n\n\t\t\t\teffects.bevel = {\n\t\t\t\t\tsize: { units: 'Pixels', value: size },\n\t\t\t\t\tangle, strength, highlightBlendMode, shadowBlendMode, highlightColor, shadowColor,\n\t\t\t\t\tstyle, highlightOpacity, shadowOpacity, enabled, useGlobalLight, direction,\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'sofi': { // solid fill (Photoshop 7.0) (see See Effects layer, solid fill (added in Photoshop 7.0))\n\t\t\t\tconst size = readUint32(reader);\n\t\t\t\tconst version = readUint32(reader);\n\n\t\t\t\tif (size !== 34) throw new Error(`Invalid effects solid fill info size: ${size}`);\n\t\t\t\tif (version !== 2) throw new Error(`Invalid effects solid fill info version: ${version}`);\n\n\t\t\t\tconst blendMode = readBlendMode(reader);\n\t\t\t\tconst color = readColor(reader);\n\t\t\t\tconst opacity = readFixedPoint8(reader);\n\t\t\t\tconst enabled = !!readUint8(reader);\n\t\t\t\treadColor(reader); // native color\n\n\t\t\t\teffects.solidFill = [{ blendMode, color, opacity, enabled }];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid effect type: '${type}'`);\n\t\t}\n\t}\n\n\treturn effects;\n}\n\nfunction writeShadowInfo(writer: PsdWriter, shadow: LayerEffectShadow) {\n\twriteUint32(writer, 51);\n\twriteUint32(writer, 2);\n\twriteFixedPoint32(writer, shadow.size && shadow.size.value || 0);\n\twriteFixedPoint32(writer, 0); // intensity\n\twriteFixedPoint32(writer, shadow.angle || 0);\n\twriteFixedPoint32(writer, shadow.distance && shadow.distance.value || 0);\n\twriteColor(writer, shadow.color);\n\twriteBlendMode(writer, shadow.blendMode);\n\twriteUint8(writer, shadow.enabled ? 1 : 0);\n\twriteUint8(writer, shadow.useGlobalLight ? 1 : 0);\n\twriteFixedPoint8(writer, shadow.opacity ?? 1);\n\twriteColor(writer, shadow.color); // native color\n}\n\nexport function writeEffects(writer: PsdWriter, effects: LayerEffectsInfo) {\n\tconst dropShadow = effects.dropShadow?.[0];\n\tconst innerShadow = effects.innerShadow?.[0];\n\tconst outerGlow = effects.outerGlow;\n\tconst innerGlow = effects.innerGlow;\n\tconst bevel = effects.bevel;\n\tconst solidFill = effects.solidFill?.[0];\n\n\tlet count = 1;\n\tif (dropShadow) count++;\n\tif (innerShadow) count++;\n\tif (outerGlow) count++;\n\tif (innerGlow) count++;\n\tif (bevel) count++;\n\tif (solidFill) count++;\n\n\twriteUint16(writer, 0);\n\twriteUint16(writer, count);\n\n\twriteSignature(writer, '8BIM');\n\twriteSignature(writer, 'cmnS');\n\twriteUint32(writer, 7); // size\n\twriteUint32(writer, 0); // version\n\twriteUint8(writer, 1); // visible\n\twriteZeros(writer, 2);\n\n\tif (dropShadow) {\n\t\twriteSignature(writer, '8BIM');\n\t\twriteSignature(writer, 'dsdw');\n\t\twriteShadowInfo(writer, dropShadow);\n\t}\n\n\tif (innerShadow) {\n\t\twriteSignature(writer, '8BIM');\n\t\twriteSignature(writer, 'isdw');\n\t\twriteShadowInfo(writer, innerShadow);\n\t}\n\n\tif (outerGlow) {\n\t\twriteSignature(writer, '8BIM');\n\t\twriteSignature(writer, 'oglw');\n\t\twriteUint32(writer, 42);\n\t\twriteUint32(writer, 2);\n\t\twriteFixedPoint32(writer, outerGlow.size?.value || 0);\n\t\twriteFixedPoint32(writer, 0); // intensity\n\t\twriteColor(writer, outerGlow.color);\n\t\twriteBlendMode(writer, outerGlow.blendMode);\n\t\twriteUint8(writer, outerGlow.enabled ? 1 : 0);\n\t\twriteFixedPoint8(writer, outerGlow.opacity || 0);\n\t\twriteColor(writer, outerGlow.color);\n\t}\n\n\tif (innerGlow) {\n\t\twriteSignature(writer, '8BIM');\n\t\twriteSignature(writer, 'iglw');\n\t\twriteUint32(writer, 43);\n\t\twriteUint32(writer, 2);\n\t\twriteFixedPoint32(writer, innerGlow.size?.value || 0);\n\t\twriteFixedPoint32(writer, 0); // intensity\n\t\twriteColor(writer, innerGlow.color);\n\t\twriteBlendMode(writer, innerGlow.blendMode);\n\t\twriteUint8(writer, innerGlow.enabled ? 1 : 0);\n\t\twriteFixedPoint8(writer, innerGlow.opacity || 0);\n\t\twriteUint8(writer, 0); // inverted\n\t\twriteColor(writer, innerGlow.color);\n\t}\n\n\tif (bevel) {\n\t\twriteSignature(writer, '8BIM');\n\t\twriteSignature(writer, 'bevl');\n\t\twriteUint32(writer, 78);\n\t\twriteUint32(writer, 2);\n\t\twriteFixedPoint32(writer, bevel.angle || 0);\n\t\twriteFixedPoint32(writer, bevel.strength || 0);\n\t\twriteFixedPoint32(writer, bevel.size?.value || 0);\n\t\twriteBlendMode(writer, bevel.highlightBlendMode);\n\t\twriteBlendMode(writer, bevel.shadowBlendMode);\n\t\twriteColor(writer, bevel.highlightColor);\n\t\twriteColor(writer, bevel.shadowColor);\n\t\tconst style = bevelStyles.indexOf(bevel.style!);\n\t\twriteUint8(writer, style <= 0 ? 1 : style);\n\t\twriteFixedPoint8(writer, bevel.highlightOpacity || 0);\n\t\twriteFixedPoint8(writer, bevel.shadowOpacity || 0);\n\t\twriteUint8(writer, bevel.enabled ? 1 : 0);\n\t\twriteUint8(writer, bevel.useGlobalLight ? 1 : 0);\n\t\twriteUint8(writer, bevel.direction === 'down' ? 1 : 0);\n\t\twriteColor(writer, bevel.highlightColor);\n\t\twriteColor(writer, bevel.shadowColor);\n\t}\n\n\tif (solidFill) {\n\t\twriteSignature(writer, '8BIM');\n\t\twriteSignature(writer, 'sofi');\n\t\twriteUint32(writer, 34);\n\t\twriteUint32(writer, 2);\n\t\twriteBlendMode(writer, solidFill.blendMode);\n\t\twriteColor(writer, solidFill.color);\n\t\twriteFixedPoint8(writer, solidFill.opacity || 0);\n\t\twriteUint8(writer, solidFill.enabled ? 1 : 0);\n\t\twriteColor(writer, solidFill.color);\n\t}\n}\n","\"use strict\";\r\nvar __rest = (this && this.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.readPattern = exports.readColor = exports.readSection = exports.readDataRLE = exports.readDataZip = exports.createImageDataBitDepth = exports.readAdditionalLayerInfo = exports.readGlobalLayerMaskInfo = exports.readData = exports.readLayerInfo = exports.readPsd = exports.checkSignature = exports.skipBytes = exports.readAsciiString = exports.readUnicodeStringWithLengthLE = exports.readUnicodeStringWithLength = exports.readUnicodeString = exports.readPascalString = exports.validSignatureAt = exports.readSignature = exports.readBytes = exports.readFixedPointPath32 = exports.readFixedPoint32 = exports.readFloat64 = exports.readFloat32 = exports.readUint32 = exports.readInt32LE = exports.readInt32 = exports.readUint16LE = exports.readUint16 = exports.readInt16 = exports.peekUint8 = exports.readUint8 = exports.warnOrThrow = exports.createReader = exports.supportedColorModes = void 0;\r\nvar pako_1 = require(\"pako\");\r\nvar helpers_1 = require(\"./helpers\");\r\nvar additionalInfo_1 = require(\"./additionalInfo\");\r\nvar imageResources_1 = require(\"./imageResources\");\r\nexports.supportedColorModes = [0 /* ColorMode.Bitmap */, 1 /* ColorMode.Grayscale */, 3 /* ColorMode.RGB */, 2 /* ColorMode.Indexed */];\r\nvar colorModes = ['bitmap', 'grayscale', 'indexed', 'RGB', 'CMYK', 'multichannel', 'duotone', 'lab'];\r\nfunction setupGrayscale(data) {\r\n    var size = data.width * data.height * 4;\r\n    for (var i = 0; i < size; i += 4) {\r\n        data.data[i + 1] = data.data[i];\r\n        data.data[i + 2] = data.data[i];\r\n    }\r\n}\r\nfunction createReader(buffer, offset, length) {\r\n    var view = new DataView(buffer, offset, length);\r\n    return { view: view, offset: 0, strict: false, debug: false, large: false, globalAlpha: false, log: console.log };\r\n}\r\nexports.createReader = createReader;\r\nfunction warnOrThrow(reader, message) {\r\n    if (reader.strict)\r\n        throw new Error(message);\r\n    if (reader.debug)\r\n        reader.log(message);\r\n}\r\nexports.warnOrThrow = warnOrThrow;\r\nfunction readUint8(reader) {\r\n    reader.offset += 1;\r\n    return reader.view.getUint8(reader.offset - 1);\r\n}\r\nexports.readUint8 = readUint8;\r\nfunction peekUint8(reader) {\r\n    return reader.view.getUint8(reader.offset);\r\n}\r\nexports.peekUint8 = peekUint8;\r\nfunction readInt16(reader) {\r\n    reader.offset += 2;\r\n    return reader.view.getInt16(reader.offset - 2, false);\r\n}\r\nexports.readInt16 = readInt16;\r\nfunction readUint16(reader) {\r\n    reader.offset += 2;\r\n    return reader.view.getUint16(reader.offset - 2, false);\r\n}\r\nexports.readUint16 = readUint16;\r\nfunction readUint16LE(reader) {\r\n    reader.offset += 2;\r\n    return reader.view.getUint16(reader.offset - 2, true);\r\n}\r\nexports.readUint16LE = readUint16LE;\r\nfunction readInt32(reader) {\r\n    reader.offset += 4;\r\n    return reader.view.getInt32(reader.offset - 4, false);\r\n}\r\nexports.readInt32 = readInt32;\r\nfunction readInt32LE(reader) {\r\n    reader.offset += 4;\r\n    return reader.view.getInt32(reader.offset - 4, true);\r\n}\r\nexports.readInt32LE = readInt32LE;\r\nfunction readUint32(reader) {\r\n    reader.offset += 4;\r\n    return reader.view.getUint32(reader.offset - 4, false);\r\n}\r\nexports.readUint32 = readUint32;\r\nfunction readFloat32(reader) {\r\n    reader.offset += 4;\r\n    return reader.view.getFloat32(reader.offset - 4, false);\r\n}\r\nexports.readFloat32 = readFloat32;\r\nfunction readFloat64(reader) {\r\n    reader.offset += 8;\r\n    return reader.view.getFloat64(reader.offset - 8, false);\r\n}\r\nexports.readFloat64 = readFloat64;\r\n// 32-bit fixed-point number 16.16\r\nfunction readFixedPoint32(reader) {\r\n    return readInt32(reader) / (1 << 16);\r\n}\r\nexports.readFixedPoint32 = readFixedPoint32;\r\n// 32-bit fixed-point number 8.24\r\nfunction readFixedPointPath32(reader) {\r\n    return readInt32(reader) / (1 << 24);\r\n}\r\nexports.readFixedPointPath32 = readFixedPointPath32;\r\nfunction readBytes(reader, length) {\r\n    var start = reader.view.byteOffset + reader.offset;\r\n    reader.offset += length;\r\n    if ((start + length) > reader.view.buffer.byteLength) {\r\n        // fix for broken PSD files that are missing part of file at the end\r\n        warnOrThrow(reader, 'Reading bytes exceeding buffer length');\r\n        if (length > (100 * 1024 * 1024))\r\n            throw new Error('Reading past end of file'); // limit to 100MB\r\n        var result = new Uint8Array(length);\r\n        var len = Math.min(length, reader.view.byteLength - start);\r\n        if (len > 0)\r\n            result.set(new Uint8Array(reader.view.buffer, start, len));\r\n        return result;\r\n    }\r\n    else {\r\n        return new Uint8Array(reader.view.buffer, start, length);\r\n    }\r\n}\r\nexports.readBytes = readBytes;\r\nfunction readSignature(reader) {\r\n    return readShortString(reader, 4);\r\n}\r\nexports.readSignature = readSignature;\r\nfunction validSignatureAt(reader, offset) {\r\n    var sig = String.fromCharCode(reader.view.getUint8(offset))\r\n        + String.fromCharCode(reader.view.getUint8(offset + 1))\r\n        + String.fromCharCode(reader.view.getUint8(offset + 2))\r\n        + String.fromCharCode(reader.view.getUint8(offset + 3));\r\n    return sig == '8BIM' || sig == '8B64';\r\n}\r\nexports.validSignatureAt = validSignatureAt;\r\nfunction readPascalString(reader, padTo) {\r\n    var length = readUint8(reader);\r\n    var text = length ? readShortString(reader, length) : '';\r\n    while (++length % padTo) { // starts with length + 1 so we count the size byte too\r\n        reader.offset++;\r\n    }\r\n    return text;\r\n}\r\nexports.readPascalString = readPascalString;\r\nfunction readUnicodeString(reader) {\r\n    var length = readUint32(reader);\r\n    return readUnicodeStringWithLength(reader, length);\r\n}\r\nexports.readUnicodeString = readUnicodeString;\r\nfunction readUnicodeStringWithLength(reader, length) {\r\n    var text = '';\r\n    while (length--) {\r\n        var value = readUint16(reader);\r\n        if (value || length > 0) { // remove trailing \\0\r\n            text += String.fromCharCode(value);\r\n        }\r\n    }\r\n    return text;\r\n}\r\nexports.readUnicodeStringWithLength = readUnicodeStringWithLength;\r\nfunction readUnicodeStringWithLengthLE(reader, length) {\r\n    var text = '';\r\n    while (length--) {\r\n        var value = readUint16LE(reader);\r\n        if (value || length > 0) { // remove trailing \\0\r\n            text += String.fromCharCode(value);\r\n        }\r\n    }\r\n    return text;\r\n}\r\nexports.readUnicodeStringWithLengthLE = readUnicodeStringWithLengthLE;\r\nfunction readAsciiString(reader, length) {\r\n    var text = '';\r\n    while (length--) {\r\n        text += String.fromCharCode(readUint8(reader));\r\n    }\r\n    return text;\r\n}\r\nexports.readAsciiString = readAsciiString;\r\nfunction skipBytes(reader, count) {\r\n    reader.offset += count;\r\n}\r\nexports.skipBytes = skipBytes;\r\nfunction checkSignature(reader, a, b) {\r\n    var offset = reader.offset;\r\n    var signature = readSignature(reader);\r\n    if (signature !== a && signature !== b) {\r\n        throw new Error(\"Invalid signature: '\".concat(signature, \"' at 0x\").concat(offset.toString(16)));\r\n    }\r\n}\r\nexports.checkSignature = checkSignature;\r\nfunction readShortString(reader, length) {\r\n    var buffer = readBytes(reader, length);\r\n    var result = '';\r\n    for (var i = 0; i < buffer.length; i++) {\r\n        result += String.fromCharCode(buffer[i]);\r\n    }\r\n    return result;\r\n}\r\nfunction isValidSignature(sig) {\r\n    return sig === '8BIM' || sig === 'MeSa' || sig === 'AgHg' || sig === 'PHUT' || sig === 'DCSR';\r\n}\r\nfunction readPsd(reader, readOptions) {\r\n    var _a;\r\n    if (readOptions === void 0) { readOptions = {}; }\r\n    // header\r\n    checkSignature(reader, '8BPS');\r\n    var version = readUint16(reader);\r\n    if (version !== 1 && version !== 2)\r\n        throw new Error(\"Invalid PSD file version: \".concat(version));\r\n    skipBytes(reader, 6);\r\n    var channels = readUint16(reader);\r\n    var height = readUint32(reader);\r\n    var width = readUint32(reader);\r\n    var bitsPerChannel = readUint16(reader);\r\n    var colorMode = readUint16(reader);\r\n    var maxSize = version === 1 ? 30000 : 300000;\r\n    if (width > maxSize || height > maxSize)\r\n        throw new Error(\"Invalid size: \".concat(width, \"x\").concat(height));\r\n    if (channels > 16)\r\n        throw new Error(\"Invalid channel count: \".concat(channels));\r\n    if (![1, 8, 16, 32].includes(bitsPerChannel))\r\n        throw new Error(\"Invalid bitsPerChannel: \".concat(bitsPerChannel));\r\n    if (exports.supportedColorModes.indexOf(colorMode) === -1)\r\n        throw new Error(\"Color mode not supported: \".concat((_a = colorModes[colorMode]) !== null && _a !== void 0 ? _a : colorMode));\r\n    var psd = { width: width, height: height, channels: channels, bitsPerChannel: bitsPerChannel, colorMode: colorMode };\r\n    Object.assign(reader, readOptions);\r\n    reader.large = version === 2;\r\n    reader.globalAlpha = false;\r\n    var fixOffsets = [0, 1, -1, 2, -2, 3, -3, 4, -4];\r\n    // color mode data\r\n    readSection(reader, 1, function (left) {\r\n        if (!left())\r\n            return;\r\n        if (colorMode === 2 /* ColorMode.Indexed */) {\r\n            // should have 256 colors here saved as 8bit channels RGB\r\n            if (left() != 768)\r\n                throw new Error('Invalid color palette size');\r\n            psd.palette = [];\r\n            for (var i = 0; i < 256; i++)\r\n                psd.palette.push({ r: readUint8(reader), g: 0, b: 0 });\r\n            for (var i = 0; i < 256; i++)\r\n                psd.palette[i].g = readUint8(reader);\r\n            for (var i = 0; i < 256; i++)\r\n                psd.palette[i].b = readUint8(reader);\r\n        }\r\n        else {\r\n            // TODO: unknown format for duotone, also seems to have some data here for 32bit colors\r\n            // if (options.throwForMissingFeatures) throw new Error('Color mode data not supported');\r\n        }\r\n        skipBytes(reader, left());\r\n    });\r\n    // image resources\r\n    var imageResources = {};\r\n    readSection(reader, 1, function (left) {\r\n        var _loop_1 = function () {\r\n            var sigOffset = reader.offset;\r\n            var sig = '';\r\n            // attempt to fix broken document by realigning with the signature\r\n            for (var _i = 0, fixOffsets_1 = fixOffsets; _i < fixOffsets_1.length; _i++) {\r\n                var offset = fixOffsets_1[_i];\r\n                try {\r\n                    reader.offset = sigOffset + offset;\r\n                    sig = readSignature(reader);\r\n                }\r\n                catch (_a) { }\r\n                if (isValidSignature(sig))\r\n                    break;\r\n            }\r\n            if (!isValidSignature(sig)) {\r\n                throw new Error(\"Invalid signature: '\".concat(sig, \"' at 0x\").concat((sigOffset).toString(16)));\r\n            }\r\n            var id = readUint16(reader);\r\n            readPascalString(reader, 2); // name\r\n            readSection(reader, 2, function (left) {\r\n                var handler = imageResources_1.resourceHandlersMap[id];\r\n                var skip = id === 1036 && !!reader.skipThumbnail;\r\n                if (handler && !skip) {\r\n                    try {\r\n                        handler.read(reader, imageResources, left);\r\n                    }\r\n                    catch (e) {\r\n                        if (reader.throwForMissingFeatures)\r\n                            throw e;\r\n                        skipBytes(reader, left());\r\n                    }\r\n                }\r\n                else {\r\n                    // options.logMissingFeatures && console.log(`Unhandled image resource: ${id} (${left()})`);\r\n                    skipBytes(reader, left());\r\n                }\r\n            });\r\n        };\r\n        while (left() > 0) {\r\n            _loop_1();\r\n        }\r\n    });\r\n    var layersGroup = imageResources.layersGroup, layerGroupsEnabledId = imageResources.layerGroupsEnabledId, rest = __rest(imageResources, [\"layersGroup\", \"layerGroupsEnabledId\"]);\r\n    if (Object.keys(rest)) {\r\n        psd.imageResources = rest;\r\n    }\r\n    // layer and mask info\r\n    readSection(reader, 1, function (left) {\r\n        readSection(reader, 2, function (left) {\r\n            readLayerInfo(reader, psd, imageResources);\r\n            skipBytes(reader, left());\r\n        }, undefined, reader.large);\r\n        // SAI does not include this section\r\n        if (left() > 0) {\r\n            var globalLayerMaskInfo = readGlobalLayerMaskInfo(reader);\r\n            if (globalLayerMaskInfo)\r\n                psd.globalLayerMaskInfo = globalLayerMaskInfo;\r\n        }\r\n        else {\r\n            // revert back to end of section if exceeded section limits\r\n            // opt.logMissingFeatures && console.log('reverting to end of section');\r\n            skipBytes(reader, left());\r\n        }\r\n        while (left() > 0) {\r\n            // sometimes there are empty bytes here\r\n            while (left() && peekUint8(reader) === 0) {\r\n                // opt.logMissingFeatures && console.log('skipping 0 byte');\r\n                skipBytes(reader, 1);\r\n            }\r\n            if (left() >= 12) {\r\n                readAdditionalLayerInfo(reader, psd, psd, imageResources);\r\n            }\r\n            else {\r\n                // opt.logMissingFeatures && console.log('skipping leftover bytes', left());\r\n                skipBytes(reader, left());\r\n            }\r\n        }\r\n    }, undefined, reader.large);\r\n    var hasChildren = psd.children && psd.children.length;\r\n    var skipComposite = reader.skipCompositeImageData && (reader.skipLayerImageData || hasChildren);\r\n    if (!skipComposite) {\r\n        readImageData(reader, psd);\r\n    }\r\n    // TODO: show converted color mode instead of original PSD file color mode\r\n    //       but add option to preserve file color mode (need to return image data instead of canvas in that case)\r\n    // psd.colorMode = ColorMode.RGB; // we convert all color modes to RGB\r\n    return psd;\r\n}\r\nexports.readPsd = readPsd;\r\nfunction readLayerInfo(reader, psd, imageResources) {\r\n    var _a, _b;\r\n    var _c = imageResources.layersGroup, layersGroup = _c === void 0 ? [] : _c, _d = imageResources.layerGroupsEnabledId, layerGroupsEnabledId = _d === void 0 ? [] : _d;\r\n    var layerCount = readInt16(reader);\r\n    if (layerCount < 0) {\r\n        reader.globalAlpha = true;\r\n        layerCount = -layerCount;\r\n    }\r\n    var layers = [];\r\n    var layerChannels = [];\r\n    for (var i = 0; i < layerCount; i++) {\r\n        var _e = readLayerRecord(reader, psd, imageResources), layer = _e.layer, channels = _e.channels;\r\n        if (layersGroup[i] !== undefined)\r\n            layer.linkGroup = layersGroup[i];\r\n        if (layerGroupsEnabledId[i] !== undefined)\r\n            layer.linkGroupEnabled = !!layerGroupsEnabledId[i];\r\n        layers.push(layer);\r\n        layerChannels.push(channels);\r\n    }\r\n    if (!reader.skipLayerImageData) {\r\n        for (var i = 0; i < layerCount; i++) {\r\n            readLayerChannelImageData(reader, psd, layers[i], layerChannels[i]);\r\n        }\r\n    }\r\n    if (!psd.children)\r\n        psd.children = [];\r\n    var stack = [psd];\r\n    for (var i = layers.length - 1; i >= 0; i--) {\r\n        var l = layers[i];\r\n        var type = l.sectionDivider ? l.sectionDivider.type : 0 /* SectionDividerType.Other */;\r\n        if (type === 1 /* SectionDividerType.OpenFolder */ || type === 2 /* SectionDividerType.ClosedFolder */) {\r\n            l.opened = type === 1 /* SectionDividerType.OpenFolder */;\r\n            l.children = [];\r\n            if ((_a = l.sectionDivider) === null || _a === void 0 ? void 0 : _a.key) {\r\n                l.blendMode = (_b = helpers_1.toBlendMode[l.sectionDivider.key]) !== null && _b !== void 0 ? _b : l.blendMode;\r\n            }\r\n            stack[stack.length - 1].children.unshift(l);\r\n            stack.push(l);\r\n        }\r\n        else if (type === 3 /* SectionDividerType.BoundingSectionDivider */) {\r\n            stack.pop();\r\n            // this was workaround because I didn't know what `lsdk` section was, now it's probably not needed anymore\r\n            // } else if (l.name === '</Layer group>' && !l.sectionDivider && !l.top && !l.left && !l.bottom && !l.right) {\r\n            // \t// sometimes layer group terminator doesn't have sectionDivider, so we just guess here (PS bug ?)\r\n            // \tstack.pop();\r\n        }\r\n        else {\r\n            stack[stack.length - 1].children.unshift(l);\r\n        }\r\n    }\r\n}\r\nexports.readLayerInfo = readLayerInfo;\r\nfunction readLayerRecord(reader, psd, imageResources) {\r\n    var layer = {};\r\n    layer.top = readInt32(reader);\r\n    layer.left = readInt32(reader);\r\n    layer.bottom = readInt32(reader);\r\n    layer.right = readInt32(reader);\r\n    var channelCount = readUint16(reader);\r\n    var channels = [];\r\n    for (var i = 0; i < channelCount; i++) {\r\n        var id = readInt16(reader);\r\n        var length_1 = readUint32(reader);\r\n        if (reader.large) {\r\n            if (length_1 !== 0)\r\n                throw new Error('Sizes larger than 4GB are not supported');\r\n            length_1 = readUint32(reader);\r\n        }\r\n        channels.push({ id: id, length: length_1 });\r\n    }\r\n    checkSignature(reader, '8BIM');\r\n    var blendMode = readSignature(reader);\r\n    if (!helpers_1.toBlendMode[blendMode])\r\n        throw new Error(\"Invalid blend mode: '\".concat(blendMode, \"'\"));\r\n    layer.blendMode = helpers_1.toBlendMode[blendMode];\r\n    layer.opacity = readUint8(reader) / 0xff;\r\n    layer.clipping = readUint8(reader) === 1;\r\n    var flags = readUint8(reader);\r\n    layer.transparencyProtected = (flags & 0x01) !== 0;\r\n    layer.hidden = (flags & 0x02) !== 0;\r\n    if (flags & 0x20)\r\n        layer.effectsOpen = true;\r\n    // 0x04 - obsolete\r\n    // 0x08 - 1 for Photoshop 5.0 and later, tells if bit 4 has useful information\r\n    // 0x10 - pixel data irrelevant to appearance of document\r\n    // 0x20 - effects/filters panel is expanded\r\n    skipBytes(reader, 1);\r\n    readSection(reader, 1, function (left) {\r\n        readLayerMaskData(reader, layer);\r\n        var blendingRanges = readLayerBlendingRanges(reader);\r\n        if (blendingRanges)\r\n            layer.blendingRanges = blendingRanges;\r\n        layer.name = readPascalString(reader, 1); // should be padded to 4, but is not sometimes\r\n        // HACK: fix for sometimes layer.name string not being padded correctly, just skip until we get valid signature\r\n        while (left() > 4 && !validSignatureAt(reader, reader.offset))\r\n            reader.offset++;\r\n        while (left() >= 12)\r\n            readAdditionalLayerInfo(reader, layer, psd, imageResources);\r\n        skipBytes(reader, left());\r\n    });\r\n    return { layer: layer, channels: channels };\r\n}\r\nfunction readLayerMaskData(reader, layer) {\r\n    return readSection(reader, 1, function (left) {\r\n        if (!left())\r\n            return undefined;\r\n        var mask = {};\r\n        layer.mask = mask;\r\n        mask.top = readInt32(reader);\r\n        mask.left = readInt32(reader);\r\n        mask.bottom = readInt32(reader);\r\n        mask.right = readInt32(reader);\r\n        mask.defaultColor = readUint8(reader);\r\n        var flags = readUint8(reader);\r\n        mask.positionRelativeToLayer = (flags & 1 /* LayerMaskFlags.PositionRelativeToLayer */) !== 0;\r\n        mask.disabled = (flags & 2 /* LayerMaskFlags.LayerMaskDisabled */) !== 0;\r\n        mask.fromVectorData = (flags & 8 /* LayerMaskFlags.LayerMaskFromRenderingOtherData */) !== 0;\r\n        if (left() >= 18) {\r\n            var realMask = {};\r\n            layer.realMask = realMask;\r\n            var realFlags = readUint8(reader);\r\n            realMask.positionRelativeToLayer = (realFlags & 1 /* LayerMaskFlags.PositionRelativeToLayer */) !== 0;\r\n            realMask.disabled = (realFlags & 2 /* LayerMaskFlags.LayerMaskDisabled */) !== 0;\r\n            realMask.fromVectorData = (realFlags & 8 /* LayerMaskFlags.LayerMaskFromRenderingOtherData */) !== 0;\r\n            realMask.defaultColor = readUint8(reader); // Real user mask background. 0 or 255.\r\n            realMask.top = readInt32(reader);\r\n            realMask.left = readInt32(reader);\r\n            realMask.bottom = readInt32(reader);\r\n            realMask.right = readInt32(reader);\r\n        }\r\n        if (flags & 16 /* LayerMaskFlags.MaskHasParametersAppliedToIt */) {\r\n            var params = readUint8(reader);\r\n            if (params & 1 /* MaskParams.UserMaskDensity */)\r\n                mask.userMaskDensity = readUint8(reader) / 0xff;\r\n            if (params & 2 /* MaskParams.UserMaskFeather */)\r\n                mask.userMaskFeather = readFloat64(reader);\r\n            if (params & 4 /* MaskParams.VectorMaskDensity */)\r\n                mask.vectorMaskDensity = readUint8(reader) / 0xff;\r\n            if (params & 8 /* MaskParams.VectorMaskFeather */)\r\n                mask.vectorMaskFeather = readFloat64(reader);\r\n        }\r\n        skipBytes(reader, left());\r\n    });\r\n}\r\nfunction readBlendingRange(reader) {\r\n    return [readUint8(reader), readUint8(reader), readUint8(reader), readUint8(reader)];\r\n}\r\nfunction readLayerBlendingRanges(reader) {\r\n    return readSection(reader, 1, function (left) {\r\n        var compositeGrayBlendSource = readBlendingRange(reader);\r\n        var compositeGraphBlendDestinationRange = readBlendingRange(reader);\r\n        var ranges = [];\r\n        while (left() > 0) {\r\n            var sourceRange = readBlendingRange(reader);\r\n            var destRange = readBlendingRange(reader);\r\n            ranges.push({ sourceRange: sourceRange, destRange: destRange });\r\n        }\r\n        return { compositeGrayBlendSource: compositeGrayBlendSource, compositeGraphBlendDestinationRange: compositeGraphBlendDestinationRange, ranges: ranges };\r\n    });\r\n}\r\nfunction readLayerChannelImageData(reader, psd, layer, channels) {\r\n    var _a, _b, _c, _d;\r\n    var layerWidth = (layer.right || 0) - (layer.left || 0);\r\n    var layerHeight = (layer.bottom || 0) - (layer.top || 0);\r\n    var cmyk = psd.colorMode === 4 /* ColorMode.CMYK */;\r\n    var imageData;\r\n    if (layerWidth && layerHeight) {\r\n        if (cmyk) {\r\n            if (psd.bitsPerChannel !== 8)\r\n                throw new Error('bitsPerChannel Not supproted');\r\n            imageData = { width: layerWidth, height: layerHeight, data: new Uint8ClampedArray(layerWidth * layerHeight * 5) };\r\n            for (var p = 4; p < imageData.data.byteLength; p += 5)\r\n                imageData.data[p] = 255;\r\n        }\r\n        else {\r\n            imageData = createImageDataBitDepth(layerWidth, layerHeight, (_a = psd.bitsPerChannel) !== null && _a !== void 0 ? _a : 8);\r\n            (0, helpers_1.resetImageData)(imageData);\r\n        }\r\n    }\r\n    if (helpers_1.RAW_IMAGE_DATA) {\r\n        layer.imageDataRaw = [];\r\n        layer.imageDataRawCompression = [];\r\n    }\r\n    for (var _i = 0, channels_1 = channels; _i < channels_1.length; _i++) {\r\n        var channel = channels_1[_i];\r\n        if (channel.length === 0)\r\n            continue;\r\n        if (channel.length < 2)\r\n            throw new Error('Invalid channel length');\r\n        var start = reader.offset;\r\n        var compression = readUint16(reader);\r\n        // try to fix broken files where there's 1 byte shift of channel\r\n        if (compression > 3) {\r\n            reader.offset -= 1;\r\n            compression = readUint16(reader);\r\n        }\r\n        // try to fix broken files where there's 1 byte shift of channel\r\n        if (compression > 3) {\r\n            reader.offset -= 3;\r\n            compression = readUint16(reader);\r\n        }\r\n        if (compression > 3)\r\n            throw new Error(\"Invalid compression: \".concat(compression));\r\n        if (channel.id === -2 /* ChannelID.UserMask */ || channel.id === -3 /* ChannelID.RealUserMask */) {\r\n            var mask = channel.id === -2 /* ChannelID.UserMask */ ? layer.mask : layer.realMask;\r\n            if (!mask)\r\n                throw new Error(\"Missing layer \".concat(channel.id === -2 /* ChannelID.UserMask */ ? 'mask' : 'real mask', \" data\"));\r\n            var maskWidth = (mask.right || 0) - (mask.left || 0);\r\n            var maskHeight = (mask.bottom || 0) - (mask.top || 0);\r\n            if (maskWidth < 0 || maskHeight < 0 || maskWidth > 30000 || maskHeight > 30000)\r\n                throw new Error('Invalid mask size');\r\n            if (maskWidth && maskHeight) {\r\n                var maskData = createImageDataBitDepth(maskWidth, maskHeight, (_b = psd.bitsPerChannel) !== null && _b !== void 0 ? _b : 8);\r\n                (0, helpers_1.resetImageData)(maskData);\r\n                var start_1 = reader.offset;\r\n                readData(reader, channel.length, maskData, compression, maskWidth, maskHeight, (_c = psd.bitsPerChannel) !== null && _c !== void 0 ? _c : 8, 0, reader.large, 4);\r\n                if (helpers_1.RAW_IMAGE_DATA) {\r\n                    if (channel.id === -2 /* ChannelID.UserMask */) {\r\n                        layer.maskDataRawCompression = compression;\r\n                        layer.maskDataRaw = new Uint8Array(reader.view.buffer, reader.view.byteOffset + start_1, reader.offset - start_1);\r\n                    }\r\n                    else {\r\n                        layer.realMaskDataRawCompression = compression;\r\n                        layer.realMaskDataRaw = new Uint8Array(reader.view.buffer, reader.view.byteOffset + start_1, reader.offset - start_1);\r\n                    }\r\n                }\r\n                setupGrayscale(maskData);\r\n                if (reader.useImageData) {\r\n                    mask.imageData = maskData;\r\n                }\r\n                else {\r\n                    mask.canvas = (0, helpers_1.imageDataToCanvas)(maskData);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var offset = (0, helpers_1.offsetForChannel)(channel.id, cmyk);\r\n            var targetData = imageData;\r\n            if (offset < 0) {\r\n                targetData = undefined;\r\n                if (reader.throwForMissingFeatures) {\r\n                    throw new Error(\"Channel not supported: \".concat(channel.id));\r\n                }\r\n            }\r\n            readData(reader, channel.length, targetData, compression, layerWidth, layerHeight, (_d = psd.bitsPerChannel) !== null && _d !== void 0 ? _d : 8, offset, reader.large, cmyk ? 5 : 4);\r\n            if (helpers_1.RAW_IMAGE_DATA) {\r\n                layer.imageDataRawCompression[channel.id] = compression;\r\n                layer.imageDataRaw[channel.id] = new Uint8Array(reader.view.buffer, reader.view.byteOffset + start + 2, channel.length - 2);\r\n            }\r\n            reader.offset = start + channel.length;\r\n            if (targetData && psd.colorMode === 1 /* ColorMode.Grayscale */) {\r\n                setupGrayscale(targetData);\r\n            }\r\n        }\r\n    }\r\n    if (imageData) {\r\n        if (cmyk) {\r\n            var cmykData = imageData;\r\n            imageData = (0, helpers_1.createImageData)(cmykData.width, cmykData.height);\r\n            cmykToRgb(cmykData, imageData, false);\r\n        }\r\n        if (reader.useImageData) {\r\n            layer.imageData = imageData;\r\n        }\r\n        else {\r\n            layer.canvas = (0, helpers_1.imageDataToCanvas)(imageData);\r\n        }\r\n    }\r\n}\r\nfunction readData(reader, length, data, compression, width, height, bitDepth, offset, large, step) {\r\n    if (compression === 0 /* Compression.RawData */) {\r\n        readDataRaw(reader, data, width, height, bitDepth, step, offset);\r\n    }\r\n    else if (compression === 1 /* Compression.RleCompressed */) {\r\n        readDataRLE(reader, data, width, height, bitDepth, step, [offset], large);\r\n    }\r\n    else if (compression === 2 /* Compression.ZipWithoutPrediction */) {\r\n        readDataZip(reader, length, data, width, height, bitDepth, step, offset, false);\r\n    }\r\n    else if (compression === 3 /* Compression.ZipWithPrediction */) {\r\n        readDataZip(reader, length, data, width, height, bitDepth, step, offset, true);\r\n    }\r\n    else {\r\n        throw new Error(\"Invalid Compression type: \".concat(compression));\r\n    }\r\n}\r\nexports.readData = readData;\r\nfunction readGlobalLayerMaskInfo(reader) {\r\n    return readSection(reader, 1, function (left) {\r\n        if (!left())\r\n            return undefined;\r\n        var overlayColorSpace = readUint16(reader);\r\n        var colorSpace1 = readUint16(reader);\r\n        var colorSpace2 = readUint16(reader);\r\n        var colorSpace3 = readUint16(reader);\r\n        var colorSpace4 = readUint16(reader);\r\n        var opacity = readUint16(reader) / 0xff;\r\n        var kind = readUint8(reader);\r\n        skipBytes(reader, left()); // 3 bytes of padding ?\r\n        return { overlayColorSpace: overlayColorSpace, colorSpace1: colorSpace1, colorSpace2: colorSpace2, colorSpace3: colorSpace3, colorSpace4: colorSpace4, opacity: opacity, kind: kind };\r\n    });\r\n}\r\nexports.readGlobalLayerMaskInfo = readGlobalLayerMaskInfo;\r\nfunction readAdditionalLayerInfo(reader, target, psd, imageResources) {\r\n    var sig = readSignature(reader);\r\n    if (sig !== '8BIM' && sig !== '8B64')\r\n        throw new Error(\"Invalid signature: '\".concat(sig, \"' at 0x\").concat((reader.offset - 4).toString(16)));\r\n    var key = readSignature(reader);\r\n    // `largeAdditionalInfoKeys` fallback, because some keys don't have 8B64 signature even when they are 64bit\r\n    var u64 = sig === '8B64' || (reader.large && helpers_1.largeAdditionalInfoKeys.indexOf(key) !== -1);\r\n    readSection(reader, 2, function (left) {\r\n        var handler = additionalInfo_1.infoHandlersMap[key];\r\n        if (handler) {\r\n            try {\r\n                handler.read(reader, target, left, psd, imageResources);\r\n            }\r\n            catch (e) {\r\n                if (reader.throwForMissingFeatures)\r\n                    throw e;\r\n            }\r\n        }\r\n        else {\r\n            reader.logMissingFeatures && reader.log(\"Unhandled additional info: \".concat(key));\r\n            skipBytes(reader, left());\r\n        }\r\n        if (left()) {\r\n            reader.logMissingFeatures && reader.log(\"Unread \".concat(left(), \" bytes left for additional info: \").concat(key));\r\n            skipBytes(reader, left());\r\n        }\r\n    }, false, u64);\r\n}\r\nexports.readAdditionalLayerInfo = readAdditionalLayerInfo;\r\nfunction createImageDataBitDepth(width, height, bitDepth, channels) {\r\n    if (channels === void 0) { channels = 4; }\r\n    if (bitDepth === 1 || bitDepth === 8) {\r\n        if (channels === 4) {\r\n            return (0, helpers_1.createImageData)(width, height);\r\n        }\r\n        else {\r\n            return { width: width, height: height, data: new Uint8ClampedArray(width * height * channels) };\r\n        }\r\n    }\r\n    else if (bitDepth === 16) {\r\n        return { width: width, height: height, data: new Uint16Array(width * height * channels) };\r\n    }\r\n    else if (bitDepth === 32) {\r\n        return { width: width, height: height, data: new Float32Array(width * height * channels) };\r\n    }\r\n    else {\r\n        throw new Error(\"Invalid bitDepth (\".concat(bitDepth, \")\"));\r\n    }\r\n}\r\nexports.createImageDataBitDepth = createImageDataBitDepth;\r\nfunction readImageData(reader, psd) {\r\n    var _a;\r\n    var compression = readUint16(reader);\r\n    var bitsPerChannel = (_a = psd.bitsPerChannel) !== null && _a !== void 0 ? _a : 8;\r\n    if (exports.supportedColorModes.indexOf(psd.colorMode) === -1)\r\n        throw new Error(\"Color mode not supported: \".concat(psd.colorMode));\r\n    if (compression !== 0 /* Compression.RawData */ && compression !== 1 /* Compression.RleCompressed */)\r\n        throw new Error(\"Compression type not supported: \".concat(compression));\r\n    var imageData = createImageDataBitDepth(psd.width, psd.height, bitsPerChannel);\r\n    (0, helpers_1.resetImageData)(imageData);\r\n    switch (psd.colorMode) {\r\n        case 0 /* ColorMode.Bitmap */: {\r\n            if (bitsPerChannel !== 1)\r\n                throw new Error('Invalid bitsPerChannel for bitmap color mode');\r\n            var bytes = void 0;\r\n            if (compression === 0 /* Compression.RawData */) {\r\n                bytes = readBytes(reader, Math.ceil(psd.width / 8) * psd.height);\r\n            }\r\n            else if (compression === 1 /* Compression.RleCompressed */) {\r\n                bytes = new Uint8Array(psd.width * psd.height);\r\n                readDataRLE(reader, { data: bytes, width: psd.width, height: psd.height }, psd.width, psd.height, 8, 1, [0], reader.large);\r\n            }\r\n            else {\r\n                throw new Error(\"Bitmap compression not supported: \".concat(compression));\r\n            }\r\n            (0, helpers_1.decodeBitmap)(bytes, imageData.data, psd.width, psd.height);\r\n            break;\r\n        }\r\n        case 3 /* ColorMode.RGB */:\r\n        case 1 /* ColorMode.Grayscale */: {\r\n            var channels = psd.colorMode === 1 /* ColorMode.Grayscale */ ? [0] : [0, 1, 2];\r\n            if (psd.channels && psd.channels > 3) {\r\n                for (var i = 3; i < psd.channels; i++) {\r\n                    // TODO: store these channels in additional image data\r\n                    channels.push(i);\r\n                }\r\n            }\r\n            else if (reader.globalAlpha) {\r\n                channels.push(3);\r\n            }\r\n            if (compression === 0 /* Compression.RawData */) {\r\n                for (var i = 0; i < channels.length; i++) {\r\n                    readDataRaw(reader, imageData, psd.width, psd.height, bitsPerChannel, 4, channels[i]);\r\n                }\r\n            }\r\n            else if (compression === 1 /* Compression.RleCompressed */) {\r\n                var start = reader.offset;\r\n                readDataRLE(reader, imageData, psd.width, psd.height, bitsPerChannel, 4, channels, reader.large);\r\n                if (helpers_1.RAW_IMAGE_DATA)\r\n                    psd.imageDataRaw = new Uint8Array(reader.view.buffer, reader.view.byteOffset + start, reader.offset - start);\r\n            }\r\n            if (psd.colorMode === 1 /* ColorMode.Grayscale */) {\r\n                setupGrayscale(imageData);\r\n            }\r\n            break;\r\n        }\r\n        case 2 /* ColorMode.Indexed */: {\r\n            if (bitsPerChannel !== 8)\r\n                throw new Error('bitsPerChannel Not supproted');\r\n            if (psd.channels !== 1)\r\n                throw new Error('Invalid channel count');\r\n            if (!psd.palette)\r\n                throw new Error('Missing color palette');\r\n            if (compression === 0 /* Compression.RawData */) {\r\n                throw new Error(\"Not implemented\");\r\n            }\r\n            else if (compression === 1 /* Compression.RleCompressed */) {\r\n                var indexedImageData = {\r\n                    width: imageData.width,\r\n                    height: imageData.height,\r\n                    data: new Uint8Array(imageData.width * imageData.height),\r\n                };\r\n                readDataRLE(reader, indexedImageData, psd.width, psd.height, bitsPerChannel, 1, [0], reader.large);\r\n                indexedToRgb(indexedImageData, imageData, psd.palette);\r\n            }\r\n            else {\r\n                throw new Error(\"Not implemented\");\r\n            }\r\n            break;\r\n        }\r\n        case 4 /* ColorMode.CMYK */: {\r\n            if (bitsPerChannel !== 8)\r\n                throw new Error('bitsPerChannel Not supproted');\r\n            if (psd.channels !== 4)\r\n                throw new Error(\"Invalid channel count\");\r\n            var channels = [0, 1, 2, 3];\r\n            if (reader.globalAlpha)\r\n                channels.push(4);\r\n            if (compression === 0 /* Compression.RawData */) {\r\n                throw new Error(\"Not implemented\");\r\n                // TODO: ...\r\n                // for (let i = 0; i < channels.length; i++) {\r\n                // \treadDataRaw(reader, imageData, channels[i], psd.width, psd.height);\r\n                // }\r\n            }\r\n            else if (compression === 1 /* Compression.RleCompressed */) {\r\n                var cmykImageData = {\r\n                    width: imageData.width,\r\n                    height: imageData.height,\r\n                    data: new Uint8Array(imageData.width * imageData.height * 5),\r\n                };\r\n                var start = reader.offset;\r\n                readDataRLE(reader, cmykImageData, psd.width, psd.height, bitsPerChannel, 5, channels, reader.large);\r\n                cmykToRgb(cmykImageData, imageData, true);\r\n                if (helpers_1.RAW_IMAGE_DATA)\r\n                    psd.imageDataRaw = new Uint8Array(reader.view.buffer, reader.view.byteOffset + start, reader.offset - start);\r\n            }\r\n            else {\r\n                throw new Error(\"Not implemented\");\r\n            }\r\n            break;\r\n        }\r\n        default: throw new Error(\"Color mode not supported: \".concat(psd.colorMode));\r\n    }\r\n    // remove weird white matte\r\n    if (reader.globalAlpha) {\r\n        if (psd.bitsPerChannel !== 8)\r\n            throw new Error('bitsPerChannel Not supproted');\r\n        var p = imageData.data;\r\n        var size = imageData.width * imageData.height * 4;\r\n        for (var i = 0; i < size; i += 4) {\r\n            var pa = p[i + 3];\r\n            if (pa != 0 && pa != 255) {\r\n                var a = pa / 255;\r\n                var ra = 1 / a;\r\n                var invA = 255 * (1 - ra);\r\n                p[i + 0] = p[i + 0] * ra + invA;\r\n                p[i + 1] = p[i + 1] * ra + invA;\r\n                p[i + 2] = p[i + 2] * ra + invA;\r\n            }\r\n        }\r\n    }\r\n    if (reader.useImageData) {\r\n        psd.imageData = imageData;\r\n    }\r\n    else {\r\n        psd.canvas = (0, helpers_1.imageDataToCanvas)(imageData);\r\n    }\r\n}\r\nfunction cmykToRgb(cmyk, rgb, reverseAlpha) {\r\n    var size = rgb.width * rgb.height * 4;\r\n    var srcData = cmyk.data;\r\n    var dstData = rgb.data;\r\n    for (var src = 0, dst = 0; dst < size; src += 5, dst += 4) {\r\n        var c = srcData[src];\r\n        var m = srcData[src + 1];\r\n        var y = srcData[src + 2];\r\n        var k = srcData[src + 3];\r\n        dstData[dst] = ((((c * k) | 0) / 255) | 0);\r\n        dstData[dst + 1] = ((((m * k) | 0) / 255) | 0);\r\n        dstData[dst + 2] = ((((y * k) | 0) / 255) | 0);\r\n        dstData[dst + 3] = reverseAlpha ? 255 - srcData[src + 4] : srcData[src + 4];\r\n    }\r\n    // for (let src = 0, dst = 0; dst < size; src += 5, dst += 4) {\r\n    // \tconst c = 1 - (srcData[src + 0] / 255);\r\n    // \tconst m = 1 - (srcData[src + 1] / 255);\r\n    // \tconst y = 1 - (srcData[src + 2] / 255);\r\n    // \t// const k = srcData[src + 3] / 255;\r\n    // \tdstData[dst + 0] = ((1 - c * 0.8) * 255) | 0;\r\n    // \tdstData[dst + 1] = ((1 - m * 0.8) * 255) | 0;\r\n    // \tdstData[dst + 2] = ((1 - y * 0.8) * 255) | 0;\r\n    // \tdstData[dst + 3] = reverseAlpha ? 255 - srcData[src + 4] : srcData[src + 4];\r\n    // }\r\n}\r\nfunction indexedToRgb(indexed, rgb, palette) {\r\n    var size = indexed.width * indexed.height;\r\n    var srcData = indexed.data;\r\n    var dstData = rgb.data;\r\n    for (var src = 0, dst = 0; src < size; src++, dst += 4) {\r\n        var c = palette[srcData[src]];\r\n        dstData[dst + 0] = c.r;\r\n        dstData[dst + 1] = c.g;\r\n        dstData[dst + 2] = c.b;\r\n        dstData[dst + 3] = 255;\r\n    }\r\n}\r\nfunction verifyCompatible(a, b) {\r\n    if ((a.byteLength / a.length) !== (b.byteLength / b.length)) {\r\n        throw new Error('Invalid array types');\r\n    }\r\n}\r\nfunction bytesToArray(bytes, bitDepth) {\r\n    if (bitDepth === 8) {\r\n        return bytes;\r\n    }\r\n    else if (bitDepth === 16) {\r\n        if (bytes.byteOffset % 2) {\r\n            var result = new Uint16Array(bytes.byteLength / 2);\r\n            new Uint8Array(result.buffer, result.byteOffset, result.byteLength).set(bytes);\r\n            return result;\r\n        }\r\n        else {\r\n            return new Uint16Array(bytes.buffer, bytes.byteOffset, bytes.byteLength / 2);\r\n        }\r\n    }\r\n    else if (bitDepth === 32) {\r\n        if (bytes.byteOffset % 4) {\r\n            var result = new Float32Array(bytes.byteLength / 4);\r\n            new Uint8Array(result.buffer, result.byteOffset, result.byteLength).set(bytes);\r\n            return result;\r\n        }\r\n        else {\r\n            return new Float32Array(bytes.buffer, bytes.byteOffset, bytes.byteLength / 4);\r\n        }\r\n    }\r\n    else {\r\n        throw new Error(\"Invalid bitDepth (\".concat(bitDepth, \")\"));\r\n    }\r\n}\r\nfunction copyChannelToPixelData(pixelData, channel, offset, step) {\r\n    verifyCompatible(pixelData.data, channel);\r\n    var size = pixelData.width * pixelData.height;\r\n    var data = pixelData.data;\r\n    for (var i = 0, p = offset | 0; i < size; i++, p = (p + step) | 0) {\r\n        data[p] = channel[i];\r\n    }\r\n}\r\nfunction readDataRaw(reader, pixelData, width, height, bitDepth, step, offset) {\r\n    var buffer = readBytes(reader, width * height * Math.floor(bitDepth / 8));\r\n    if (bitDepth == 32) {\r\n        for (var i = 0; i < buffer.byteLength; i += 4) {\r\n            var a = buffer[i + 0];\r\n            var b = buffer[i + 1];\r\n            var c = buffer[i + 2];\r\n            var d = buffer[i + 3];\r\n            buffer[i + 0] = d;\r\n            buffer[i + 1] = c;\r\n            buffer[i + 2] = b;\r\n            buffer[i + 3] = a;\r\n        }\r\n    }\r\n    var array = bytesToArray(buffer, bitDepth);\r\n    if (pixelData && offset < step) {\r\n        copyChannelToPixelData(pixelData, array, offset, step);\r\n    }\r\n}\r\nfunction decodePredicted(data, width, height, mod) {\r\n    for (var y = 0; y < height; y++) {\r\n        var offset = y * width;\r\n        for (var x = 1, o = offset + 1; x < width; x++, o++) {\r\n            data[o] = (data[o - 1] + data[o]) % mod;\r\n        }\r\n    }\r\n}\r\nfunction readDataZip(reader, length, pixelData, width, height, bitDepth, step, offset, prediction) {\r\n    var compressed = readBytes(reader, length);\r\n    var decompressed = (0, pako_1.inflate)(compressed);\r\n    if (pixelData && offset < step) {\r\n        var array = bytesToArray(decompressed, bitDepth);\r\n        if (bitDepth === 8) {\r\n            if (prediction)\r\n                decodePredicted(decompressed, width, height, 0x100);\r\n            copyChannelToPixelData(pixelData, decompressed, offset, step);\r\n        }\r\n        else if (bitDepth === 16) {\r\n            if (prediction)\r\n                decodePredicted(array, width, height, 0x10000);\r\n            copyChannelToPixelData(pixelData, array, offset, step);\r\n        }\r\n        else if (bitDepth === 32) {\r\n            if (prediction)\r\n                decodePredicted(decompressed, width * 4, height, 0x100);\r\n            var di = offset;\r\n            var dst = new Uint32Array(pixelData.data.buffer, pixelData.data.byteOffset, pixelData.data.length);\r\n            for (var y = 0; y < height; y++) {\r\n                var a = width * 4 * y;\r\n                for (var x = 0; x < width; x++, a++, di += step) {\r\n                    var b = a + width;\r\n                    var c = b + width;\r\n                    var d = c + width;\r\n                    dst[di] = ((decompressed[a] << 24) | (decompressed[b] << 16) | (decompressed[c] << 8) | decompressed[d]) >>> 0;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            throw new Error('Invalid bitDepth');\r\n        }\r\n    }\r\n}\r\nexports.readDataZip = readDataZip;\r\nfunction readDataRLE(reader, pixelData, width, height, bitDepth, step, offsets, large) {\r\n    var data = pixelData && pixelData.data;\r\n    var lengths;\r\n    if (large) {\r\n        lengths = new Uint32Array(offsets.length * height);\r\n        for (var o = 0, li = 0; o < offsets.length; o++) {\r\n            for (var y = 0; y < height; y++, li++) {\r\n                lengths[li] = readUint32(reader);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        lengths = new Uint16Array(offsets.length * height);\r\n        for (var o = 0, li = 0; o < offsets.length; o++) {\r\n            for (var y = 0; y < height; y++, li++) {\r\n                lengths[li] = readUint16(reader);\r\n            }\r\n        }\r\n    }\r\n    if (bitDepth !== 1 && bitDepth !== 8)\r\n        throw new Error(\"Invalid bit depth (\".concat(bitDepth, \")\"));\r\n    var extraLimit = (step - 1) | 0; // 3 for rgb, 4 for cmyk\r\n    for (var c = 0, li = 0; c < offsets.length; c++) {\r\n        var offset = offsets[c] | 0;\r\n        var extra = c > extraLimit || offset > extraLimit;\r\n        if (!data || extra) {\r\n            for (var y = 0; y < height; y++, li++) {\r\n                skipBytes(reader, lengths[li]);\r\n            }\r\n        }\r\n        else {\r\n            for (var y = 0, p = offset | 0; y < height; y++, li++) {\r\n                var length_2 = lengths[li];\r\n                var buffer = readBytes(reader, length_2);\r\n                for (var i = 0, x = 0; i < length_2; i++) {\r\n                    var header = buffer[i];\r\n                    if (header > 128) {\r\n                        var value = buffer[++i];\r\n                        header = (256 - header) | 0;\r\n                        for (var j = 0; j <= header && x < width; j = (j + 1) | 0, x = (x + 1) | 0) {\r\n                            data[p] = value;\r\n                            p = (p + step) | 0;\r\n                        }\r\n                    }\r\n                    else if (header < 128) {\r\n                        for (var j = 0; j <= header && x < width; j = (j + 1) | 0, x = (x + 1) | 0) {\r\n                            data[p] = buffer[++i];\r\n                            p = (p + step) | 0;\r\n                        }\r\n                    }\r\n                    else {\r\n                        // ignore 128\r\n                    }\r\n                    // This showed up on some images from non-photoshop programs, ignoring it seems to work just fine.\r\n                    // if (i >= length) throw new Error(`Invalid RLE data: exceeded buffer size ${i}/${length}`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.readDataRLE = readDataRLE;\r\nfunction readSection(reader, round, func, skipEmpty, eightBytes) {\r\n    if (skipEmpty === void 0) { skipEmpty = true; }\r\n    if (eightBytes === void 0) { eightBytes = false; }\r\n    var length = readUint32(reader);\r\n    if (eightBytes) {\r\n        if (length !== 0)\r\n            throw new Error('Sizes larger than 4GB are not supported');\r\n        length = readUint32(reader);\r\n    }\r\n    if (length <= 0 && skipEmpty)\r\n        return undefined;\r\n    var end = reader.offset + length;\r\n    if (end > reader.view.byteLength)\r\n        throw new Error('Section exceeds file size');\r\n    var result = func(function () { return end - reader.offset; });\r\n    if (reader.offset !== end) {\r\n        if (reader.offset > end) {\r\n            warnOrThrow(reader, 'Exceeded section limits');\r\n        }\r\n        else {\r\n            warnOrThrow(reader, \"Unread section data\"); // : ${end - reader.offset} bytes at 0x${reader.offset.toString(16)}`);\r\n        }\r\n    }\r\n    while (end % round)\r\n        end++;\r\n    reader.offset = end;\r\n    return result;\r\n}\r\nexports.readSection = readSection;\r\nfunction readColor(reader) {\r\n    var colorSpace = readUint16(reader);\r\n    switch (colorSpace) {\r\n        case 0 /* ColorSpace.RGB */: {\r\n            var r = readUint16(reader) / 257;\r\n            var g = readUint16(reader) / 257;\r\n            var b = readUint16(reader) / 257;\r\n            skipBytes(reader, 2);\r\n            return { r: r, g: g, b: b };\r\n        }\r\n        case 1 /* ColorSpace.HSB */: {\r\n            var h = readUint16(reader) / 0xffff;\r\n            var s = readUint16(reader) / 0xffff;\r\n            var b = readUint16(reader) / 0xffff;\r\n            skipBytes(reader, 2);\r\n            return { h: h, s: s, b: b };\r\n        }\r\n        case 2 /* ColorSpace.CMYK */: {\r\n            var c = readUint16(reader) / 257;\r\n            var m = readUint16(reader) / 257;\r\n            var y = readUint16(reader) / 257;\r\n            var k = readUint16(reader) / 257;\r\n            return { c: c, m: m, y: y, k: k };\r\n        }\r\n        case 7 /* ColorSpace.Lab */: {\r\n            var l = readInt16(reader) / 10000;\r\n            var ta = readInt16(reader);\r\n            var tb = readInt16(reader);\r\n            var a = ta < 0 ? (ta / 12800) : (ta / 12700);\r\n            var b = tb < 0 ? (tb / 12800) : (tb / 12700);\r\n            skipBytes(reader, 2);\r\n            return { l: l, a: a, b: b };\r\n        }\r\n        case 8 /* ColorSpace.Grayscale */: {\r\n            var k = readUint16(reader) * 255 / 10000;\r\n            skipBytes(reader, 6);\r\n            return { k: k };\r\n        }\r\n        default:\r\n            throw new Error('Invalid color space');\r\n    }\r\n}\r\nexports.readColor = readColor;\r\nfunction readPattern(reader) {\r\n    readUint32(reader); // length\r\n    var version = readUint32(reader);\r\n    if (version !== 1)\r\n        throw new Error(\"Invalid pattern version: \".concat(version));\r\n    var colorMode = readUint32(reader);\r\n    var x = readInt16(reader);\r\n    var y = readInt16(reader);\r\n    // we only support RGB and grayscale for now\r\n    if (colorMode !== 3 /* ColorMode.RGB */ && colorMode !== 1 /* ColorMode.Grayscale */ && colorMode !== 2 /* ColorMode.Indexed */) {\r\n        throw new Error(\"Unsupported pattern color mode: \".concat(colorMode));\r\n    }\r\n    var name = readUnicodeString(reader);\r\n    var id = readPascalString(reader, 1);\r\n    var palette = [];\r\n    if (colorMode === 2 /* ColorMode.Indexed */) {\r\n        for (var i = 0; i < 256; i++) {\r\n            palette.push({\r\n                r: readUint8(reader),\r\n                g: readUint8(reader),\r\n                b: readUint8(reader),\r\n            });\r\n        }\r\n        skipBytes(reader, 4); // no idea what this is\r\n    }\r\n    // virtual memory array list\r\n    var version2 = readUint32(reader);\r\n    if (version2 !== 3)\r\n        throw new Error(\"Invalid pattern VMAL version: \".concat(version2));\r\n    readUint32(reader); // length\r\n    var top = readUint32(reader);\r\n    var left = readUint32(reader);\r\n    var bottom = readUint32(reader);\r\n    var right = readUint32(reader);\r\n    var channelsCount = readUint32(reader);\r\n    var width = right - left;\r\n    var height = bottom - top;\r\n    var data = new Uint8Array(width * height * 4);\r\n    for (var i = 3; i < data.byteLength; i += 4) {\r\n        data[i] = 255;\r\n    }\r\n    for (var i = 0, ch = 0; i < (channelsCount + 2); i++) {\r\n        var has = readUint32(reader);\r\n        if (!has)\r\n            continue;\r\n        var length_3 = readUint32(reader);\r\n        var pixelDepth = readUint32(reader);\r\n        var ctop = readUint32(reader);\r\n        var cleft = readUint32(reader);\r\n        var cbottom = readUint32(reader);\r\n        var cright = readUint32(reader);\r\n        var pixelDepth2 = readUint16(reader);\r\n        var compressionMode = readUint8(reader); // 0 - raw, 1 - zip\r\n        var dataLength = length_3 - (4 + 16 + 2 + 1);\r\n        var cdata = readBytes(reader, dataLength);\r\n        if (pixelDepth !== 8 || pixelDepth2 !== 8) {\r\n            throw new Error('16bit pixel depth not supported for patterns');\r\n        }\r\n        var w = cright - cleft;\r\n        var h = cbottom - ctop;\r\n        var ox = cleft - left;\r\n        var oy = ctop - top;\r\n        if (compressionMode === 0) {\r\n            if (colorMode === 3 /* ColorMode.RGB */ && ch < 3) {\r\n                for (var y_1 = 0; y_1 < h; y_1++) {\r\n                    for (var x_1 = 0; x_1 < w; x_1++) {\r\n                        var src = x_1 + y_1 * w;\r\n                        var dst = (ox + x_1 + (y_1 + oy) * width) * 4;\r\n                        data[dst + ch] = cdata[src];\r\n                    }\r\n                }\r\n            }\r\n            if (colorMode === 1 /* ColorMode.Grayscale */ && ch < 1) {\r\n                for (var y_2 = 0; y_2 < h; y_2++) {\r\n                    for (var x_2 = 0; x_2 < w; x_2++) {\r\n                        var src = x_2 + y_2 * w;\r\n                        var dst = (ox + x_2 + (y_2 + oy) * width) * 4;\r\n                        var value = cdata[src];\r\n                        data[dst + 0] = value;\r\n                        data[dst + 1] = value;\r\n                        data[dst + 2] = value;\r\n                    }\r\n                }\r\n            }\r\n            if (colorMode === 2 /* ColorMode.Indexed */) {\r\n                // TODO:\r\n                throw new Error('Indexed pattern color mode not implemented');\r\n            }\r\n        }\r\n        else if (compressionMode === 1) {\r\n            // console.log({ colorMode });\r\n            // require('fs').writeFileSync('zip.bin', Buffer.from(cdata));\r\n            // const data = require('zlib').inflateRawSync(cdata);\r\n            // const data = require('zlib').unzipSync(cdata);\r\n            // console.log(data);\r\n            // throw new Error('Zip compression not supported for pattern');\r\n            // throw new Error('Unsupported pattern compression');\r\n            reader.log('Unsupported pattern compression');\r\n            name += ' (failed to decode)';\r\n        }\r\n        else {\r\n            throw new Error('Invalid pattern compression mode');\r\n        }\r\n        ch++;\r\n    }\r\n    // TODO: use canvas instead of data ?\r\n    return { id: id, name: name, x: x, y: y, bounds: { x: left, y: top, w: width, h: height }, data: data };\r\n}\r\nexports.readPattern = readPattern;\r\n//# sourceMappingURL=psdReader.js.map","import { inflate as inflateSync } from 'pako';\nimport { Psd, Layer, ColorMode, SectionDividerType, LayerAdditionalInfo, ReadOptions, LayerMaskData, Color, PatternInfo, GlobalLayerMaskInfo, RGB, PixelData, PixelArray } from './psd';\nimport { resetImageData, offsetForChannel, decodeBitmap, createImageData, toBlendMode, ChannelID, Compression, LayerMaskFlags, MaskParams, ColorSpace, RAW_IMAGE_DATA, largeAdditionalInfoKeys, imageDataToCanvas } from './helpers';\nimport { infoHandlersMap } from './additionalInfo';\nimport { InternalImageResources, resourceHandlersMap } from './imageResources';\n\ninterface ChannelInfo {\n\tid: ChannelID;\n\tlength: number;\n}\n\nexport const supportedColorModes = [ColorMode.Bitmap, ColorMode.Grayscale, ColorMode.RGB, ColorMode.Indexed];\nconst colorModes = ['bitmap', 'grayscale', 'indexed', 'RGB', 'CMYK', 'multichannel', 'duotone', 'lab'];\n\nfunction setupGrayscale(data: PixelData) {\n\tconst size = data.width * data.height * 4;\n\n\tfor (let i = 0; i < size; i += 4) {\n\t\tdata.data[i + 1] = data.data[i];\n\t\tdata.data[i + 2] = data.data[i];\n\t}\n}\n\nexport interface PsdReader extends ReadOptions {\n\toffset: number;\n\tview: DataView;\n\tlarge: boolean;\n\tglobalAlpha: boolean;\n\tlog(...args: any[]): void;\n}\n\nexport function createReader(buffer: ArrayBuffer, offset?: number, length?: number): PsdReader {\n\tconst view = new DataView(buffer, offset, length);\n\treturn { view, offset: 0, strict: false, debug: false, large: false, globalAlpha: false, log: console.log };\n}\n\nexport function warnOrThrow(reader: PsdReader, message: string) {\n\tif (reader.strict) throw new Error(message);\n\tif (reader.debug) reader.log(message);\n}\n\nexport function readUint8(reader: PsdReader) {\n\treader.offset += 1;\n\treturn reader.view.getUint8(reader.offset - 1);\n}\n\nexport function peekUint8(reader: PsdReader) {\n\treturn reader.view.getUint8(reader.offset);\n}\n\nexport function readInt16(reader: PsdReader) {\n\treader.offset += 2;\n\treturn reader.view.getInt16(reader.offset - 2, false);\n}\n\nexport function readUint16(reader: PsdReader) {\n\treader.offset += 2;\n\treturn reader.view.getUint16(reader.offset - 2, false);\n}\n\nexport function readUint16LE(reader: PsdReader) {\n\treader.offset += 2;\n\treturn reader.view.getUint16(reader.offset - 2, true);\n}\n\nexport function readInt32(reader: PsdReader) {\n\treader.offset += 4;\n\treturn reader.view.getInt32(reader.offset - 4, false);\n}\n\nexport function readInt32LE(reader: PsdReader) {\n\treader.offset += 4;\n\treturn reader.view.getInt32(reader.offset - 4, true);\n}\n\nexport function readUint32(reader: PsdReader) {\n\treader.offset += 4;\n\treturn reader.view.getUint32(reader.offset - 4, false);\n}\n\nexport function readFloat32(reader: PsdReader) {\n\treader.offset += 4;\n\treturn reader.view.getFloat32(reader.offset - 4, false);\n}\n\nexport function readFloat64(reader: PsdReader) {\n\treader.offset += 8;\n\treturn reader.view.getFloat64(reader.offset - 8, false);\n}\n\n// 32-bit fixed-point number 16.16\nexport function readFixedPoint32(reader: PsdReader): number {\n\treturn readInt32(reader) / (1 << 16);\n}\n\n// 32-bit fixed-point number 8.24\nexport function readFixedPointPath32(reader: PsdReader): number {\n\treturn readInt32(reader) / (1 << 24);\n}\n\nexport function readBytes(reader: PsdReader, length: number) {\n\tconst start = reader.view.byteOffset + reader.offset;\n\treader.offset += length;\n\n\tif ((start + length) > reader.view.buffer.byteLength) {\n\t\t// fix for broken PSD files that are missing part of file at the end\n\t\twarnOrThrow(reader, 'Reading bytes exceeding buffer length');\n\t\tif (length > (100 * 1024 * 1024)) throw new Error('Reading past end of file'); // limit to 100MB\n\t\tconst result = new Uint8Array(length);\n\t\tconst len = Math.min(length, reader.view.byteLength - start);\n\t\tif (len > 0) result.set(new Uint8Array(reader.view.buffer, start, len));\n\t\treturn result;\n\t} else {\n\t\treturn new Uint8Array(reader.view.buffer, start, length);\n\t}\n}\n\nexport function readSignature(reader: PsdReader) {\n\treturn readShortString(reader, 4);\n}\n\nexport function validSignatureAt(reader: PsdReader, offset: number) {\n\tconst sig = String.fromCharCode(reader.view.getUint8(offset))\n\t\t+ String.fromCharCode(reader.view.getUint8(offset + 1))\n\t\t+ String.fromCharCode(reader.view.getUint8(offset + 2))\n\t\t+ String.fromCharCode(reader.view.getUint8(offset + 3));\n\treturn sig == '8BIM' || sig == '8B64';\n}\n\nexport function readPascalString(reader: PsdReader, padTo: number) {\n\tlet length = readUint8(reader);\n\tconst text = length ? readShortString(reader, length) : '';\n\n\twhile (++length % padTo) { // starts with length + 1 so we count the size byte too\n\t\treader.offset++;\n\t}\n\n\treturn text;\n}\n\nexport function readUnicodeString(reader: PsdReader) {\n\tconst length = readUint32(reader);\n\treturn readUnicodeStringWithLength(reader, length);\n}\n\nexport function readUnicodeStringWithLength(reader: PsdReader, length: number) {\n\tlet text = '';\n\n\twhile (length--) {\n\t\tconst value = readUint16(reader);\n\n\t\tif (value || length > 0) { // remove trailing \\0\n\t\t\ttext += String.fromCharCode(value);\n\t\t}\n\t}\n\n\treturn text;\n}\n\nexport function readUnicodeStringWithLengthLE(reader: PsdReader, length: number) {\n\tlet text = '';\n\n\twhile (length--) {\n\t\tconst value = readUint16LE(reader);\n\n\t\tif (value || length > 0) { // remove trailing \\0\n\t\t\ttext += String.fromCharCode(value);\n\t\t}\n\t}\n\n\treturn text;\n}\n\nexport function readAsciiString(reader: PsdReader, length: number) {\n\tlet text = '';\n\n\twhile (length--) {\n\t\ttext += String.fromCharCode(readUint8(reader));\n\t}\n\n\treturn text;\n}\n\nexport function skipBytes(reader: PsdReader, count: number) {\n\treader.offset += count;\n}\n\nexport function checkSignature(reader: PsdReader, a: string, b?: string) {\n\tconst offset = reader.offset;\n\tconst signature = readSignature(reader);\n\n\tif (signature !== a && signature !== b) {\n\t\tthrow new Error(`Invalid signature: '${signature}' at 0x${offset.toString(16)}`);\n\t}\n}\n\nfunction readShortString(reader: PsdReader, length: number) {\n\tconst buffer = readBytes(reader, length);\n\tlet result = '';\n\n\tfor (let i = 0; i < buffer.length; i++) {\n\t\tresult += String.fromCharCode(buffer[i]);\n\t}\n\n\treturn result;\n}\n\nfunction isValidSignature(sig: string) {\n\treturn sig === '8BIM' || sig === 'MeSa' || sig === 'AgHg' || sig === 'PHUT' || sig === 'DCSR';\n}\n\nexport function readPsd(reader: PsdReader, readOptions: ReadOptions = {}) {\n\t// header\n\tcheckSignature(reader, '8BPS');\n\tconst version = readUint16(reader);\n\tif (version !== 1 && version !== 2) throw new Error(`Invalid PSD file version: ${version}`);\n\n\tskipBytes(reader, 6);\n\tconst channels = readUint16(reader);\n\tconst height = readUint32(reader);\n\tconst width = readUint32(reader);\n\tconst bitsPerChannel = readUint16(reader);\n\tconst colorMode = readUint16(reader);\n\tconst maxSize = version === 1 ? 30000 : 300000;\n\n\tif (width > maxSize || height > maxSize) throw new Error(`Invalid size: ${width}x${height}`);\n\tif (channels > 16) throw new Error(`Invalid channel count: ${channels}`);\n\tif (![1, 8, 16, 32].includes(bitsPerChannel)) throw new Error(`Invalid bitsPerChannel: ${bitsPerChannel}`);\n\tif (supportedColorModes.indexOf(colorMode) === -1) throw new Error(`Color mode not supported: ${colorModes[colorMode] ?? colorMode}`);\n\n\tconst psd: Psd = { width, height, channels, bitsPerChannel, colorMode };\n\n\tObject.assign(reader, readOptions);\n\treader.large = version === 2;\n\treader.globalAlpha = false;\n\n\tconst fixOffsets = [0, 1, -1, 2, -2, 3, -3, 4, -4];\n\n\t// color mode data\n\treadSection(reader, 1, left => {\n\t\tif (!left()) return;\n\n\t\tif (colorMode === ColorMode.Indexed) {\n\t\t\t// should have 256 colors here saved as 8bit channels RGB\n\t\t\tif (left() != 768) throw new Error('Invalid color palette size');\n\n\t\t\tpsd.palette = [];\n\t\t\tfor (let i = 0; i < 256; i++) psd.palette.push({ r: readUint8(reader), g: 0, b: 0 });\n\t\t\tfor (let i = 0; i < 256; i++) psd.palette[i].g = readUint8(reader);\n\t\t\tfor (let i = 0; i < 256; i++) psd.palette[i].b = readUint8(reader);\n\t\t} else {\n\t\t\t// TODO: unknown format for duotone, also seems to have some data here for 32bit colors\n\t\t\t// if (options.throwForMissingFeatures) throw new Error('Color mode data not supported');\n\t\t}\n\n\t\tskipBytes(reader, left());\n\t});\n\n\t// image resources\n\n\tconst imageResources: InternalImageResources = {};\n\n\treadSection(reader, 1, left => {\n\t\twhile (left() > 0) {\n\t\t\tconst sigOffset = reader.offset;\n\t\t\tlet sig = '';\n\n\t\t\t// attempt to fix broken document by realigning with the signature\n\t\t\tfor (const offset of fixOffsets) {\n\t\t\t\ttry {\n\t\t\t\t\treader.offset = sigOffset + offset;\n\t\t\t\t\tsig = readSignature(reader);\n\t\t\t\t} catch { }\n\t\t\t\tif (isValidSignature(sig)) break;\n\t\t\t}\n\n\t\t\tif (!isValidSignature(sig)) {\n\t\t\t\tthrow new Error(`Invalid signature: '${sig}' at 0x${(sigOffset).toString(16)}`);\n\t\t\t}\n\n\t\t\tconst id = readUint16(reader);\n\t\t\treadPascalString(reader, 2); // name\n\n\t\t\treadSection(reader, 2, left => {\n\t\t\t\tconst handler = resourceHandlersMap[id];\n\t\t\t\tconst skip = id === 1036 && !!reader.skipThumbnail;\n\n\t\t\t\tif (handler && !skip) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\thandler.read(reader, imageResources, left);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tif (reader.throwForMissingFeatures) throw e;\n\t\t\t\t\t\tskipBytes(reader, left());\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// options.logMissingFeatures && console.log(`Unhandled image resource: ${id} (${left()})`);\n\t\t\t\t\tskipBytes(reader, left());\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\n\tconst { layersGroup, layerGroupsEnabledId, ...rest } = imageResources;\n\n\tif (Object.keys(rest)) {\n\t\tpsd.imageResources = rest;\n\t}\n\n\t// layer and mask info\n\treadSection(reader, 1, left => {\n\t\treadSection(reader, 2, left => {\n\t\t\treadLayerInfo(reader, psd, imageResources);\n\t\t\tskipBytes(reader, left());\n\t\t}, undefined, reader.large);\n\n\t\t// SAI does not include this section\n\t\tif (left() > 0) {\n\t\t\tconst globalLayerMaskInfo = readGlobalLayerMaskInfo(reader);\n\t\t\tif (globalLayerMaskInfo) psd.globalLayerMaskInfo = globalLayerMaskInfo;\n\t\t} else {\n\t\t\t// revert back to end of section if exceeded section limits\n\t\t\t// opt.logMissingFeatures && console.log('reverting to end of section');\n\t\t\tskipBytes(reader, left());\n\t\t}\n\n\t\twhile (left() > 0) {\n\t\t\t// sometimes there are empty bytes here\n\t\t\twhile (left() && peekUint8(reader) === 0) {\n\t\t\t\t// opt.logMissingFeatures && console.log('skipping 0 byte');\n\t\t\t\tskipBytes(reader, 1);\n\t\t\t}\n\n\t\t\tif (left() >= 12) {\n\t\t\t\treadAdditionalLayerInfo(reader, psd, psd, imageResources);\n\t\t\t} else {\n\t\t\t\t// opt.logMissingFeatures && console.log('skipping leftover bytes', left());\n\t\t\t\tskipBytes(reader, left());\n\t\t\t}\n\t\t}\n\t}, undefined, reader.large);\n\n\tconst hasChildren = psd.children && psd.children.length;\n\tconst skipComposite = reader.skipCompositeImageData && (reader.skipLayerImageData || hasChildren);\n\n\tif (!skipComposite) {\n\t\treadImageData(reader, psd);\n\t}\n\n\t// TODO: show converted color mode instead of original PSD file color mode\n\t//       but add option to preserve file color mode (need to return image data instead of canvas in that case)\n\t// psd.colorMode = ColorMode.RGB; // we convert all color modes to RGB\n\n\treturn psd;\n}\n\nexport function readLayerInfo(reader: PsdReader, psd: Psd, imageResources: InternalImageResources) {\n\tconst { layersGroup = [], layerGroupsEnabledId = [] } = imageResources;\n\n\tlet layerCount = readInt16(reader);\n\n\tif (layerCount < 0) {\n\t\treader.globalAlpha = true;\n\t\tlayerCount = -layerCount;\n\t}\n\n\tconst layers: Layer[] = [];\n\tconst layerChannels: ChannelInfo[][] = [];\n\n\tfor (let i = 0; i < layerCount; i++) {\n\t\tconst { layer, channels } = readLayerRecord(reader, psd, imageResources);\n\t\tif (layersGroup[i] !== undefined) layer.linkGroup = layersGroup[i];\n\t\tif (layerGroupsEnabledId[i] !== undefined) layer.linkGroupEnabled = !!layerGroupsEnabledId[i];\n\t\tlayers.push(layer);\n\t\tlayerChannels.push(channels);\n\t}\n\n\tif (!reader.skipLayerImageData) {\n\t\tfor (let i = 0; i < layerCount; i++) {\n\t\t\treadLayerChannelImageData(reader, psd, layers[i], layerChannels[i]);\n\t\t}\n\t}\n\n\tif (!psd.children) psd.children = [];\n\n\tconst stack: (Layer | Psd)[] = [psd];\n\n\tfor (let i = layers.length - 1; i >= 0; i--) {\n\t\tconst l = layers[i];\n\t\tconst type = l.sectionDivider ? l.sectionDivider.type : SectionDividerType.Other;\n\n\t\tif (type === SectionDividerType.OpenFolder || type === SectionDividerType.ClosedFolder) {\n\t\t\tl.opened = type === SectionDividerType.OpenFolder;\n\t\t\tl.children = [];\n\n\t\t\tif (l.sectionDivider?.key) {\n\t\t\t\tl.blendMode = toBlendMode[l.sectionDivider.key] ?? l.blendMode;\n\t\t\t}\n\n\t\t\tstack[stack.length - 1].children!.unshift(l);\n\t\t\tstack.push(l);\n\t\t} else if (type === SectionDividerType.BoundingSectionDivider) {\n\t\t\tstack.pop();\n\t\t\t// this was workaround because I didn't know what `lsdk` section was, now it's probably not needed anymore\n\t\t\t// } else if (l.name === '</Layer group>' && !l.sectionDivider && !l.top && !l.left && !l.bottom && !l.right) {\n\t\t\t// \t// sometimes layer group terminator doesn't have sectionDivider, so we just guess here (PS bug ?)\n\t\t\t// \tstack.pop();\n\t\t} else {\n\t\t\tstack[stack.length - 1].children!.unshift(l);\n\t\t}\n\t}\n}\n\nfunction readLayerRecord(reader: PsdReader, psd: Psd, imageResources: InternalImageResources) {\n\tconst layer: Layer = {};\n\tlayer.top = readInt32(reader);\n\tlayer.left = readInt32(reader);\n\tlayer.bottom = readInt32(reader);\n\tlayer.right = readInt32(reader);\n\n\tconst channelCount = readUint16(reader);\n\tconst channels: ChannelInfo[] = [];\n\n\tfor (let i = 0; i < channelCount; i++) {\n\t\tlet id = readInt16(reader) as ChannelID;\n\t\tlet length = readUint32(reader);\n\n\t\tif (reader.large) {\n\t\t\tif (length !== 0) throw new Error('Sizes larger than 4GB are not supported');\n\t\t\tlength = readUint32(reader);\n\t\t}\n\n\t\tchannels.push({ id, length });\n\t}\n\n\tcheckSignature(reader, '8BIM');\n\tconst blendMode = readSignature(reader);\n\tif (!toBlendMode[blendMode]) throw new Error(`Invalid blend mode: '${blendMode}'`);\n\tlayer.blendMode = toBlendMode[blendMode];\n\n\tlayer.opacity = readUint8(reader) / 0xff;\n\tlayer.clipping = readUint8(reader) === 1;\n\n\tconst flags = readUint8(reader);\n\tlayer.transparencyProtected = (flags & 0x01) !== 0;\n\tlayer.hidden = (flags & 0x02) !== 0;\n\tif (flags & 0x20) layer.effectsOpen = true;\n\t// 0x04 - obsolete\n\t// 0x08 - 1 for Photoshop 5.0 and later, tells if bit 4 has useful information\n\t// 0x10 - pixel data irrelevant to appearance of document\n\t// 0x20 - effects/filters panel is expanded\n\n\tskipBytes(reader, 1);\n\n\treadSection(reader, 1, left => {\n\t\treadLayerMaskData(reader, layer);\n\n\t\tconst blendingRanges = readLayerBlendingRanges(reader);\n\t\tif (blendingRanges) layer.blendingRanges = blendingRanges;\n\t\tlayer.name = readPascalString(reader, 1); // should be padded to 4, but is not sometimes\n\n\t\t// HACK: fix for sometimes layer.name string not being padded correctly, just skip until we get valid signature\n\t\twhile (left() > 4 && !validSignatureAt(reader, reader.offset)) reader.offset++;\n\n\t\twhile (left() >= 12) readAdditionalLayerInfo(reader, layer, psd, imageResources);\n\n\t\tskipBytes(reader, left());\n\t});\n\n\treturn { layer, channels };\n}\n\nfunction readLayerMaskData(reader: PsdReader, layer: Layer) {\n\treturn readSection<LayerMaskData | undefined>(reader, 1, left => {\n\t\tif (!left()) return undefined;\n\n\t\tconst mask: LayerMaskData = {};\n\t\tlayer.mask = mask;\n\n\t\tmask.top = readInt32(reader);\n\t\tmask.left = readInt32(reader);\n\t\tmask.bottom = readInt32(reader);\n\t\tmask.right = readInt32(reader);\n\t\tmask.defaultColor = readUint8(reader);\n\n\t\tconst flags = readUint8(reader);\n\t\tmask.positionRelativeToLayer = (flags & LayerMaskFlags.PositionRelativeToLayer) !== 0;\n\t\tmask.disabled = (flags & LayerMaskFlags.LayerMaskDisabled) !== 0;\n\t\tmask.fromVectorData = (flags & LayerMaskFlags.LayerMaskFromRenderingOtherData) !== 0;\n\n\t\tif (left() >= 18) {\n\t\t\tconst realMask: LayerMaskData = {};\n\t\t\tlayer.realMask = realMask;\n\n\t\t\tconst realFlags = readUint8(reader);\n\t\t\trealMask.positionRelativeToLayer = (realFlags & LayerMaskFlags.PositionRelativeToLayer) !== 0;\n\t\t\trealMask.disabled = (realFlags & LayerMaskFlags.LayerMaskDisabled) !== 0;\n\t\t\trealMask.fromVectorData = (realFlags & LayerMaskFlags.LayerMaskFromRenderingOtherData) !== 0;\n\n\t\t\trealMask.defaultColor = readUint8(reader); // Real user mask background. 0 or 255.\n\t\t\trealMask.top = readInt32(reader);\n\t\t\trealMask.left = readInt32(reader);\n\t\t\trealMask.bottom = readInt32(reader);\n\t\t\trealMask.right = readInt32(reader);\n\t\t}\n\n\t\tif (flags & LayerMaskFlags.MaskHasParametersAppliedToIt) {\n\t\t\tconst params = readUint8(reader);\n\t\t\tif (params & MaskParams.UserMaskDensity) mask.userMaskDensity = readUint8(reader) / 0xff;\n\t\t\tif (params & MaskParams.UserMaskFeather) mask.userMaskFeather = readFloat64(reader);\n\t\t\tif (params & MaskParams.VectorMaskDensity) mask.vectorMaskDensity = readUint8(reader) / 0xff;\n\t\t\tif (params & MaskParams.VectorMaskFeather) mask.vectorMaskFeather = readFloat64(reader);\n\t\t}\n\n\t\tskipBytes(reader, left());\n\t});\n}\n\nfunction readBlendingRange(reader: PsdReader) {\n\treturn [readUint8(reader), readUint8(reader), readUint8(reader), readUint8(reader)];\n}\n\nfunction readLayerBlendingRanges(reader: PsdReader) {\n\treturn readSection(reader, 1, left => {\n\t\tconst compositeGrayBlendSource = readBlendingRange(reader);\n\t\tconst compositeGraphBlendDestinationRange = readBlendingRange(reader);\n\t\tconst ranges: { sourceRange: number[]; destRange: number[]; }[] = [];\n\n\t\twhile (left() > 0) {\n\t\t\tconst sourceRange = readBlendingRange(reader);\n\t\t\tconst destRange = readBlendingRange(reader);\n\t\t\tranges.push({ sourceRange, destRange });\n\t\t}\n\n\t\treturn { compositeGrayBlendSource, compositeGraphBlendDestinationRange, ranges };\n\t});\n}\n\nfunction readLayerChannelImageData(reader: PsdReader, psd: Psd, layer: Layer, channels: ChannelInfo[]) {\n\tconst layerWidth = (layer.right || 0) - (layer.left || 0);\n\tconst layerHeight = (layer.bottom || 0) - (layer.top || 0);\n\tconst cmyk = psd.colorMode === ColorMode.CMYK;\n\n\tlet imageData: PixelData | undefined;\n\n\tif (layerWidth && layerHeight) {\n\t\tif (cmyk) {\n\t\t\tif (psd.bitsPerChannel !== 8) throw new Error('bitsPerChannel Not supproted');\n\t\t\timageData = { width: layerWidth, height: layerHeight, data: new Uint8ClampedArray(layerWidth * layerHeight * 5) } as any as ImageData;\n\t\t\tfor (let p = 4; p < imageData.data.byteLength; p += 5) imageData.data[p] = 255;\n\t\t} else {\n\t\t\timageData = createImageDataBitDepth(layerWidth, layerHeight, psd.bitsPerChannel ?? 8);\n\t\t\tresetImageData(imageData);\n\t\t}\n\t}\n\n\tif (RAW_IMAGE_DATA) {\n\t\t(layer as any).imageDataRaw = [];\n\t\t(layer as any).imageDataRawCompression = [];\n\t}\n\n\tfor (const channel of channels) {\n\t\tif (channel.length === 0) continue;\n\t\tif (channel.length < 2) throw new Error('Invalid channel length');\n\n\t\tconst start = reader.offset;\n\n\t\tlet compression = readUint16(reader) as Compression;\n\n\t\t// try to fix broken files where there's 1 byte shift of channel\n\t\tif (compression > 3) {\n\t\t\treader.offset -= 1;\n\t\t\tcompression = readUint16(reader) as Compression;\n\t\t}\n\n\t\t// try to fix broken files where there's 1 byte shift of channel\n\t\tif (compression > 3) {\n\t\t\treader.offset -= 3;\n\t\t\tcompression = readUint16(reader) as Compression;\n\t\t}\n\n\t\tif (compression > 3) throw new Error(`Invalid compression: ${compression}`);\n\n\t\tif (channel.id === ChannelID.UserMask || channel.id === ChannelID.RealUserMask) {\n\t\t\tconst mask = channel.id === ChannelID.UserMask ? layer.mask : layer.realMask;\n\t\t\tif (!mask) throw new Error(`Missing layer ${channel.id === ChannelID.UserMask ? 'mask' : 'real mask'} data`);\n\n\t\t\tconst maskWidth = (mask.right || 0) - (mask.left || 0);\n\t\t\tconst maskHeight = (mask.bottom || 0) - (mask.top || 0);\n\t\t\tif (maskWidth < 0 || maskHeight < 0 || maskWidth > 30000 || maskHeight > 30000) throw new Error('Invalid mask size');\n\n\t\t\tif (maskWidth && maskHeight) {\n\t\t\t\tconst maskData = createImageDataBitDepth(maskWidth, maskHeight, psd.bitsPerChannel ?? 8);\n\t\t\t\tresetImageData(maskData);\n\n\t\t\t\tconst start = reader.offset;\n\t\t\t\treadData(reader, channel.length, maskData, compression, maskWidth, maskHeight, psd.bitsPerChannel ?? 8, 0, reader.large, 4);\n\n\t\t\t\tif (RAW_IMAGE_DATA) {\n\t\t\t\t\tif (channel.id === ChannelID.UserMask) {\n\t\t\t\t\t\t(layer as any).maskDataRawCompression = compression;\n\t\t\t\t\t\t(layer as any).maskDataRaw = new Uint8Array(reader.view.buffer, reader.view.byteOffset + start, reader.offset - start);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t(layer as any).realMaskDataRawCompression = compression;\n\t\t\t\t\t\t(layer as any).realMaskDataRaw = new Uint8Array(reader.view.buffer, reader.view.byteOffset + start, reader.offset - start);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsetupGrayscale(maskData);\n\n\t\t\t\tif (reader.useImageData) {\n\t\t\t\t\tmask.imageData = maskData;\n\t\t\t\t} else {\n\t\t\t\t\tmask.canvas = imageDataToCanvas(maskData);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst offset = offsetForChannel(channel.id, cmyk);\n\t\t\tlet targetData = imageData;\n\n\t\t\tif (offset < 0) {\n\t\t\t\ttargetData = undefined;\n\n\t\t\t\tif (reader.throwForMissingFeatures) {\n\t\t\t\t\tthrow new Error(`Channel not supported: ${channel.id}`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treadData(reader, channel.length, targetData, compression, layerWidth, layerHeight, psd.bitsPerChannel ?? 8, offset, reader.large, cmyk ? 5 : 4);\n\n\t\t\tif (RAW_IMAGE_DATA) {\n\t\t\t\t(layer as any).imageDataRawCompression[channel.id] = compression;\n\t\t\t\t(layer as any).imageDataRaw[channel.id] = new Uint8Array(reader.view.buffer, reader.view.byteOffset + start + 2, channel.length - 2);\n\t\t\t}\n\n\t\t\treader.offset = start + channel.length;\n\n\t\t\tif (targetData && psd.colorMode === ColorMode.Grayscale) {\n\t\t\t\tsetupGrayscale(targetData);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (imageData) {\n\t\tif (cmyk) {\n\t\t\tconst cmykData = imageData;\n\t\t\timageData = createImageData(cmykData.width, cmykData.height);\n\t\t\tcmykToRgb(cmykData, imageData, false);\n\t\t}\n\n\t\tif (reader.useImageData) {\n\t\t\tlayer.imageData = imageData;\n\t\t} else {\n\t\t\tlayer.canvas = imageDataToCanvas(imageData);\n\t\t}\n\t}\n}\n\nexport function readData(reader: PsdReader, length: number, data: PixelData | undefined, compression: Compression, width: number, height: number, bitDepth: number, offset: number, large: boolean, step: number) {\n\tif (compression === Compression.RawData) {\n\t\treadDataRaw(reader, data, width, height, bitDepth, step, offset);\n\t} else if (compression === Compression.RleCompressed) {\n\t\treadDataRLE(reader, data, width, height, bitDepth, step, [offset], large);\n\t} else if (compression === Compression.ZipWithoutPrediction) {\n\t\treadDataZip(reader, length, data, width, height, bitDepth, step, offset, false);\n\t} else if (compression === Compression.ZipWithPrediction) {\n\t\treadDataZip(reader, length, data, width, height, bitDepth, step, offset, true);\n\t} else {\n\t\tthrow new Error(`Invalid Compression type: ${compression}`);\n\t}\n}\n\nexport function readGlobalLayerMaskInfo(reader: PsdReader) {\n\treturn readSection<GlobalLayerMaskInfo | undefined>(reader, 1, left => {\n\t\tif (!left()) return undefined;\n\n\t\tconst overlayColorSpace = readUint16(reader);\n\t\tconst colorSpace1 = readUint16(reader);\n\t\tconst colorSpace2 = readUint16(reader);\n\t\tconst colorSpace3 = readUint16(reader);\n\t\tconst colorSpace4 = readUint16(reader);\n\t\tconst opacity = readUint16(reader) / 0xff;\n\t\tconst kind = readUint8(reader);\n\t\tskipBytes(reader, left()); // 3 bytes of padding ?\n\t\treturn { overlayColorSpace, colorSpace1, colorSpace2, colorSpace3, colorSpace4, opacity, kind };\n\t});\n}\n\nexport function readAdditionalLayerInfo(reader: PsdReader, target: LayerAdditionalInfo, psd: Psd, imageResources: InternalImageResources) {\n\tconst sig = readSignature(reader);\n\tif (sig !== '8BIM' && sig !== '8B64') throw new Error(`Invalid signature: '${sig}' at 0x${(reader.offset - 4).toString(16)}`);\n\tconst key = readSignature(reader);\n\n\t// `largeAdditionalInfoKeys` fallback, because some keys don't have 8B64 signature even when they are 64bit\n\tconst u64 = sig === '8B64' || (reader.large && largeAdditionalInfoKeys.indexOf(key) !== -1);\n\n\treadSection(reader, 2, left => {\n\t\tconst handler = infoHandlersMap[key];\n\n\t\tif (handler) {\n\t\t\ttry {\n\t\t\t\thandler.read(reader, target, left, psd, imageResources);\n\t\t\t} catch (e) {\n\t\t\t\tif (reader.throwForMissingFeatures) throw e;\n\t\t\t}\n\t\t} else {\n\t\t\treader.logMissingFeatures && reader.log(`Unhandled additional info: ${key}`);\n\t\t\tskipBytes(reader, left());\n\t\t}\n\n\t\tif (left()) {\n\t\t\treader.logMissingFeatures && reader.log(`Unread ${left()} bytes left for additional info: ${key}`);\n\t\t\tskipBytes(reader, left());\n\t\t}\n\t}, false, u64);\n}\n\nexport function createImageDataBitDepth(width: number, height: number, bitDepth: number, channels = 4): PixelData {\n\tif (bitDepth === 1 || bitDepth === 8) {\n\t\tif (channels === 4) {\n\t\t\treturn createImageData(width, height);\n\t\t} else {\n\t\t\treturn { width, height, data: new Uint8ClampedArray(width * height * channels) };\n\t\t}\n\t} else if (bitDepth === 16) {\n\t\treturn { width, height, data: new Uint16Array(width * height * channels) };\n\t} else if (bitDepth === 32) {\n\t\treturn { width, height, data: new Float32Array(width * height * channels) };\n\t} else {\n\t\tthrow new Error(`Invalid bitDepth (${bitDepth})`);\n\t}\n}\n\nfunction readImageData(reader: PsdReader, psd: Psd) {\n\tconst compression = readUint16(reader) as Compression;\n\tconst bitsPerChannel = psd.bitsPerChannel ?? 8;\n\n\tif (supportedColorModes.indexOf(psd.colorMode!) === -1)\n\t\tthrow new Error(`Color mode not supported: ${psd.colorMode}`);\n\n\tif (compression !== Compression.RawData && compression !== Compression.RleCompressed)\n\t\tthrow new Error(`Compression type not supported: ${compression}`);\n\n\tconst imageData = createImageDataBitDepth(psd.width, psd.height, bitsPerChannel);\n\tresetImageData(imageData);\n\n\tswitch (psd.colorMode) {\n\t\tcase ColorMode.Bitmap: {\n\t\t\tif (bitsPerChannel !== 1) throw new Error('Invalid bitsPerChannel for bitmap color mode');\n\n\t\t\tlet bytes: Uint8Array;\n\n\t\t\tif (compression === Compression.RawData) {\n\t\t\t\tbytes = readBytes(reader, Math.ceil(psd.width / 8) * psd.height);\n\t\t\t} else if (compression === Compression.RleCompressed) {\n\t\t\t\tbytes = new Uint8Array(psd.width * psd.height);\n\t\t\t\treadDataRLE(reader, { data: bytes, width: psd.width, height: psd.height }, psd.width, psd.height, 8, 1, [0], reader.large);\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Bitmap compression not supported: ${compression}`);\n\t\t\t}\n\n\t\t\tdecodeBitmap(bytes, imageData.data, psd.width, psd.height);\n\t\t\tbreak;\n\t\t}\n\t\tcase ColorMode.RGB:\n\t\tcase ColorMode.Grayscale: {\n\t\t\tconst channels = psd.colorMode === ColorMode.Grayscale ? [0] : [0, 1, 2];\n\n\t\t\tif (psd.channels && psd.channels > 3) {\n\t\t\t\tfor (let i = 3; i < psd.channels; i++) {\n\t\t\t\t\t// TODO: store these channels in additional image data\n\t\t\t\t\tchannels.push(i);\n\t\t\t\t}\n\t\t\t} else if (reader.globalAlpha) {\n\t\t\t\tchannels.push(3);\n\t\t\t}\n\n\t\t\tif (compression === Compression.RawData) {\n\t\t\t\tfor (let i = 0; i < channels.length; i++) {\n\t\t\t\t\treadDataRaw(reader, imageData, psd.width, psd.height, bitsPerChannel, 4, channels[i]);\n\t\t\t\t}\n\t\t\t} else if (compression === Compression.RleCompressed) {\n\t\t\t\tconst start = reader.offset;\n\t\t\t\treadDataRLE(reader, imageData, psd.width, psd.height, bitsPerChannel, 4, channels, reader.large);\n\t\t\t\tif (RAW_IMAGE_DATA) (psd as any).imageDataRaw = new Uint8Array(reader.view.buffer, reader.view.byteOffset + start, reader.offset - start);\n\t\t\t}\n\n\t\t\tif (psd.colorMode === ColorMode.Grayscale) {\n\t\t\t\tsetupGrayscale(imageData);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase ColorMode.Indexed: {\n\t\t\tif (bitsPerChannel !== 8) throw new Error('bitsPerChannel Not supproted');\n\t\t\tif (psd.channels !== 1) throw new Error('Invalid channel count');\n\t\t\tif (!psd.palette) throw new Error('Missing color palette');\n\n\t\t\tif (compression === Compression.RawData) {\n\t\t\t\tthrow new Error(`Not implemented`);\n\t\t\t} else if (compression === Compression.RleCompressed) {\n\t\t\t\tconst indexedImageData: PixelData = {\n\t\t\t\t\twidth: imageData.width,\n\t\t\t\t\theight: imageData.height,\n\t\t\t\t\tdata: new Uint8Array(imageData.width * imageData.height),\n\t\t\t\t};\n\t\t\t\treadDataRLE(reader, indexedImageData, psd.width, psd.height, bitsPerChannel, 1, [0], reader.large);\n\t\t\t\tindexedToRgb(indexedImageData, imageData, psd.palette);\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Not implemented`);\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\t\tcase ColorMode.CMYK: {\n\t\t\tif (bitsPerChannel !== 8) throw new Error('bitsPerChannel Not supproted');\n\t\t\tif (psd.channels !== 4) throw new Error(`Invalid channel count`);\n\n\t\t\tconst channels = [0, 1, 2, 3];\n\t\t\tif (reader.globalAlpha) channels.push(4);\n\n\t\t\tif (compression === Compression.RawData) {\n\t\t\t\tthrow new Error(`Not implemented`);\n\t\t\t\t// TODO: ...\n\t\t\t\t// for (let i = 0; i < channels.length; i++) {\n\t\t\t\t// \treadDataRaw(reader, imageData, channels[i], psd.width, psd.height);\n\t\t\t\t// }\n\t\t\t} else if (compression === Compression.RleCompressed) {\n\t\t\t\tconst cmykImageData: PixelData = {\n\t\t\t\t\twidth: imageData.width,\n\t\t\t\t\theight: imageData.height,\n\t\t\t\t\tdata: new Uint8Array(imageData.width * imageData.height * 5),\n\t\t\t\t};\n\n\t\t\t\tconst start = reader.offset;\n\t\t\t\treadDataRLE(reader, cmykImageData, psd.width, psd.height, bitsPerChannel, 5, channels, reader.large);\n\t\t\t\tcmykToRgb(cmykImageData, imageData, true);\n\n\t\t\t\tif (RAW_IMAGE_DATA) (psd as any).imageDataRaw = new Uint8Array(reader.view.buffer, reader.view.byteOffset + start, reader.offset - start);\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Not implemented`);\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\t\tdefault: throw new Error(`Color mode not supported: ${psd.colorMode}`);\n\t}\n\n\t// remove weird white matte\n\tif (reader.globalAlpha) {\n\t\tif (psd.bitsPerChannel !== 8) throw new Error('bitsPerChannel Not supproted');\n\t\tconst p = imageData.data;\n\t\tconst size = imageData.width * imageData.height * 4;\n\t\tfor (let i = 0; i < size; i += 4) {\n\t\t\tconst pa = p[i + 3];\n\t\t\tif (pa != 0 && pa != 255) {\n\t\t\t\tconst a = pa / 255;\n\t\t\t\tconst ra = 1 / a;\n\t\t\t\tconst invA = 255 * (1 - ra);\n\t\t\t\tp[i + 0] = p[i + 0] * ra + invA;\n\t\t\t\tp[i + 1] = p[i + 1] * ra + invA;\n\t\t\t\tp[i + 2] = p[i + 2] * ra + invA;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (reader.useImageData) {\n\t\tpsd.imageData = imageData;\n\t} else {\n\t\tpsd.canvas = imageDataToCanvas(imageData);\n\t}\n}\n\nfunction cmykToRgb(cmyk: PixelData, rgb: PixelData, reverseAlpha: boolean) {\n\tconst size = rgb.width * rgb.height * 4;\n\tconst srcData = cmyk.data;\n\tconst dstData = rgb.data;\n\n\tfor (let src = 0, dst = 0; dst < size; src += 5, dst += 4) {\n\t\tconst c = srcData[src];\n\t\tconst m = srcData[src + 1];\n\t\tconst y = srcData[src + 2];\n\t\tconst k = srcData[src + 3];\n\t\tdstData[dst] = ((((c * k) | 0) / 255) | 0);\n\t\tdstData[dst + 1] = ((((m * k) | 0) / 255) | 0);\n\t\tdstData[dst + 2] = ((((y * k) | 0) / 255) | 0);\n\t\tdstData[dst + 3] = reverseAlpha ? 255 - srcData[src + 4] : srcData[src + 4];\n\t}\n\n\t// for (let src = 0, dst = 0; dst < size; src += 5, dst += 4) {\n\t// \tconst c = 1 - (srcData[src + 0] / 255);\n\t// \tconst m = 1 - (srcData[src + 1] / 255);\n\t// \tconst y = 1 - (srcData[src + 2] / 255);\n\t// \t// const k = srcData[src + 3] / 255;\n\t// \tdstData[dst + 0] = ((1 - c * 0.8) * 255) | 0;\n\t// \tdstData[dst + 1] = ((1 - m * 0.8) * 255) | 0;\n\t// \tdstData[dst + 2] = ((1 - y * 0.8) * 255) | 0;\n\t// \tdstData[dst + 3] = reverseAlpha ? 255 - srcData[src + 4] : srcData[src + 4];\n\t// }\n}\n\nfunction indexedToRgb(indexed: PixelData, rgb: PixelData, palette: RGB[]) {\n\tconst size = indexed.width * indexed.height;\n\tconst srcData = indexed.data;\n\tconst dstData = rgb.data;\n\n\tfor (let src = 0, dst = 0; src < size; src++, dst += 4) {\n\t\tconst c = palette[srcData[src]];\n\t\tdstData[dst + 0] = c.r;\n\t\tdstData[dst + 1] = c.g;\n\t\tdstData[dst + 2] = c.b;\n\t\tdstData[dst + 3] = 255;\n\t}\n}\n\nfunction verifyCompatible(a: PixelArray, b: PixelArray) {\n\tif ((a.byteLength / a.length) !== (b.byteLength / b.length)) {\n\t\tthrow new Error('Invalid array types');\n\t}\n}\n\nfunction bytesToArray(bytes: Uint8Array, bitDepth: number) {\n\tif (bitDepth === 8) {\n\t\treturn bytes;\n\t} else if (bitDepth === 16) {\n\t\tif (bytes.byteOffset % 2) {\n\t\t\tconst result = new Uint16Array(bytes.byteLength / 2);\n\t\t\tnew Uint8Array(result.buffer, result.byteOffset, result.byteLength).set(bytes);\n\t\t\treturn result;\n\t\t} else {\n\t\t\treturn new Uint16Array(bytes.buffer, bytes.byteOffset, bytes.byteLength / 2);\n\t\t}\n\t} else if (bitDepth === 32) {\n\t\tif (bytes.byteOffset % 4) {\n\t\t\tconst result = new Float32Array(bytes.byteLength / 4);\n\t\t\tnew Uint8Array(result.buffer, result.byteOffset, result.byteLength).set(bytes);\n\t\t\treturn result;\n\t\t} else {\n\t\t\treturn new Float32Array(bytes.buffer, bytes.byteOffset, bytes.byteLength / 4);\n\t\t}\n\t} else {\n\t\tthrow new Error(`Invalid bitDepth (${bitDepth})`)\n\t}\n}\n\nfunction copyChannelToPixelData(pixelData: PixelData, channel: PixelArray, offset: number, step: number) {\n\tverifyCompatible(pixelData.data, channel);\n\tconst size = pixelData.width * pixelData.height;\n\tconst data = pixelData.data;\n\tfor (let i = 0, p = offset | 0; i < size; i++, p = (p + step) | 0) {\n\t\tdata[p] = channel[i];\n\t}\n}\n\nfunction readDataRaw(reader: PsdReader, pixelData: PixelData | undefined, width: number, height: number, bitDepth: number, step: number, offset: number) {\n\tconst buffer = readBytes(reader, width * height * Math.floor(bitDepth / 8));\n\n\tif (bitDepth == 32) {\n\t\tfor (let i = 0; i < buffer.byteLength; i += 4) {\n\t\t\tconst a = buffer[i + 0];\n\t\t\tconst b = buffer[i + 1];\n\t\t\tconst c = buffer[i + 2];\n\t\t\tconst d = buffer[i + 3];\n\t\t\tbuffer[i + 0] = d;\n\t\t\tbuffer[i + 1] = c;\n\t\t\tbuffer[i + 2] = b;\n\t\t\tbuffer[i + 3] = a;\n\t\t}\n\t}\n\n\tconst array = bytesToArray(buffer, bitDepth);\n\n\tif (pixelData && offset < step) {\n\t\tcopyChannelToPixelData(pixelData, array, offset, step);\n\t}\n}\n\nfunction decodePredicted(data: Uint8Array | Uint16Array, width: number, height: number, mod: number) {\n\tfor (let y = 0; y < height; y++) {\n\t\tconst offset = y * width;\n\n\t\tfor (let x = 1, o = offset + 1; x < width; x++, o++) {\n\t\t\tdata[o] = (data[o - 1] + data[o]) % mod;\n\t\t}\n\t}\n}\n\nexport function readDataZip(reader: PsdReader, length: number, pixelData: PixelData | undefined, width: number, height: number, bitDepth: number, step: number, offset: number, prediction: boolean) {\n\tconst compressed = readBytes(reader, length);\n\tconst decompressed = inflateSync(compressed);\n\n\tif (pixelData && offset < step) {\n\t\tconst array = bytesToArray(decompressed, bitDepth);\n\n\t\tif (bitDepth === 8) {\n\t\t\tif (prediction) decodePredicted(decompressed, width, height, 0x100);\n\t\t\tcopyChannelToPixelData(pixelData, decompressed, offset, step);\n\t\t} else if (bitDepth === 16) {\n\t\t\tif (prediction) decodePredicted(array as Uint16Array, width, height, 0x10000);\n\t\t\tcopyChannelToPixelData(pixelData, array, offset, step);\n\t\t} else if (bitDepth === 32) {\n\t\t\tif (prediction) decodePredicted(decompressed, width * 4, height, 0x100);\n\n\t\t\tlet di = offset;\n\t\t\tconst dst = new Uint32Array(pixelData.data.buffer, pixelData.data.byteOffset, pixelData.data.length);\n\n\t\t\tfor (let y = 0; y < height; y++) {\n\t\t\t\tlet a = width * 4 * y;\n\n\t\t\t\tfor (let x = 0; x < width; x++, a++, di += step) {\n\t\t\t\t\tconst b = a + width;\n\t\t\t\t\tconst c = b + width;\n\t\t\t\t\tconst d = c + width;\n\t\t\t\t\tdst[di] = ((decompressed[a] << 24) | (decompressed[b] << 16) | (decompressed[c] << 8) | decompressed[d]) >>> 0;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error('Invalid bitDepth');\n\t\t}\n\t}\n}\n\nexport function readDataRLE(reader: PsdReader, pixelData: PixelData | undefined, width: number, height: number, bitDepth: number, step: number, offsets: number[], large: boolean) {\n\tconst data = pixelData && pixelData.data;\n\tlet lengths: Uint16Array | Uint32Array;\n\n\tif (large) {\n\t\tlengths = new Uint32Array(offsets.length * height);\n\n\t\tfor (let o = 0, li = 0; o < offsets.length; o++) {\n\t\t\tfor (let y = 0; y < height; y++, li++) {\n\t\t\t\tlengths[li] = readUint32(reader);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tlengths = new Uint16Array(offsets.length * height);\n\n\t\tfor (let o = 0, li = 0; o < offsets.length; o++) {\n\t\t\tfor (let y = 0; y < height; y++, li++) {\n\t\t\t\tlengths[li] = readUint16(reader);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (bitDepth !== 1 && bitDepth !== 8) throw new Error(`Invalid bit depth (${bitDepth})`);\n\n\tconst extraLimit = (step - 1) | 0; // 3 for rgb, 4 for cmyk\n\n\tfor (let c = 0, li = 0; c < offsets.length; c++) {\n\t\tconst offset = offsets[c] | 0;\n\t\tconst extra = c > extraLimit || offset > extraLimit;\n\n\t\tif (!data || extra) {\n\t\t\tfor (let y = 0; y < height; y++, li++) {\n\t\t\t\tskipBytes(reader, lengths[li]);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (let y = 0, p = offset | 0; y < height; y++, li++) {\n\t\t\t\tconst length = lengths[li];\n\t\t\t\tconst buffer = readBytes(reader, length);\n\n\t\t\t\tfor (let i = 0, x = 0; i < length; i++) {\n\t\t\t\t\tlet header = buffer[i];\n\n\t\t\t\t\tif (header > 128) {\n\t\t\t\t\t\tconst value = buffer[++i];\n\t\t\t\t\t\theader = (256 - header) | 0;\n\n\t\t\t\t\t\tfor (let j = 0; j <= header && x < width; j = (j + 1) | 0, x = (x + 1) | 0) {\n\t\t\t\t\t\t\tdata[p] = value;\n\t\t\t\t\t\t\tp = (p + step) | 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (header < 128) {\n\t\t\t\t\t\tfor (let j = 0; j <= header && x < width; j = (j + 1) | 0, x = (x + 1) | 0) {\n\t\t\t\t\t\t\tdata[p] = buffer[++i];\n\t\t\t\t\t\t\tp = (p + step) | 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// ignore 128\n\t\t\t\t\t}\n\n\t\t\t\t\t// This showed up on some images from non-photoshop programs, ignoring it seems to work just fine.\n\t\t\t\t\t// if (i >= length) throw new Error(`Invalid RLE data: exceeded buffer size ${i}/${length}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport function readSection<T>(\n\treader: PsdReader, round: number, func: (left: () => number) => T, skipEmpty = true, eightBytes = false\n): T | undefined {\n\tlet length = readUint32(reader);\n\n\tif (eightBytes) {\n\t\tif (length !== 0) throw new Error('Sizes larger than 4GB are not supported');\n\t\tlength = readUint32(reader);\n\t}\n\n\tif (length <= 0 && skipEmpty) return undefined;\n\n\tlet end = reader.offset + length;\n\tif (end > reader.view.byteLength) throw new Error('Section exceeds file size');\n\n\tconst result = func(() => end - reader.offset);\n\n\tif (reader.offset !== end) {\n\t\tif (reader.offset > end) {\n\t\t\twarnOrThrow(reader, 'Exceeded section limits');\n\t\t} else {\n\t\t\twarnOrThrow(reader, `Unread section data`); // : ${end - reader.offset} bytes at 0x${reader.offset.toString(16)}`);\n\t\t}\n\t}\n\n\twhile (end % round) end++;\n\treader.offset = end;\n\n\treturn result;\n}\n\nexport function readColor(reader: PsdReader): Color {\n\tconst colorSpace = readUint16(reader) as ColorSpace;\n\n\tswitch (colorSpace) {\n\t\tcase ColorSpace.RGB: {\n\t\t\tconst r = readUint16(reader) / 257;\n\t\t\tconst g = readUint16(reader) / 257;\n\t\t\tconst b = readUint16(reader) / 257;\n\t\t\tskipBytes(reader, 2);\n\t\t\treturn { r, g, b };\n\t\t}\n\t\tcase ColorSpace.HSB: {\n\t\t\tconst h = readUint16(reader) / 0xffff;\n\t\t\tconst s = readUint16(reader) / 0xffff;\n\t\t\tconst b = readUint16(reader) / 0xffff;\n\t\t\tskipBytes(reader, 2);\n\t\t\treturn { h, s, b };\n\t\t}\n\t\tcase ColorSpace.CMYK: {\n\t\t\tconst c = readUint16(reader) / 257;\n\t\t\tconst m = readUint16(reader) / 257;\n\t\t\tconst y = readUint16(reader) / 257;\n\t\t\tconst k = readUint16(reader) / 257;\n\t\t\treturn { c, m, y, k };\n\t\t}\n\t\tcase ColorSpace.Lab: {\n\t\t\tconst l = readInt16(reader) / 10000;\n\t\t\tconst ta = readInt16(reader);\n\t\t\tconst tb = readInt16(reader);\n\t\t\tconst a = ta < 0 ? (ta / 12800) : (ta / 12700);\n\t\t\tconst b = tb < 0 ? (tb / 12800) : (tb / 12700);\n\t\t\tskipBytes(reader, 2);\n\t\t\treturn { l, a, b };\n\t\t}\n\t\tcase ColorSpace.Grayscale: {\n\t\t\tconst k = readUint16(reader) * 255 / 10000;\n\t\t\tskipBytes(reader, 6);\n\t\t\treturn { k };\n\t\t}\n\t\tdefault:\n\t\t\tthrow new Error('Invalid color space');\n\t}\n}\n\nexport function readPattern(reader: PsdReader): PatternInfo {\n\treadUint32(reader); // length\n\tconst version = readUint32(reader);\n\tif (version !== 1) throw new Error(`Invalid pattern version: ${version}`);\n\n\tconst colorMode = readUint32(reader) as ColorMode;\n\tconst x = readInt16(reader);\n\tconst y = readInt16(reader);\n\n\t// we only support RGB and grayscale for now\n\tif (colorMode !== ColorMode.RGB && colorMode !== ColorMode.Grayscale && colorMode !== ColorMode.Indexed) {\n\t\tthrow new Error(`Unsupported pattern color mode: ${colorMode}`);\n\t}\n\n\tlet name = readUnicodeString(reader);\n\tconst id = readPascalString(reader, 1);\n\tconst palette: RGB[] = [];\n\n\tif (colorMode === ColorMode.Indexed) {\n\t\tfor (let i = 0; i < 256; i++) {\n\t\t\tpalette.push({\n\t\t\t\tr: readUint8(reader),\n\t\t\t\tg: readUint8(reader),\n\t\t\t\tb: readUint8(reader),\n\t\t\t})\n\t\t}\n\n\t\tskipBytes(reader, 4); // no idea what this is\n\t}\n\n\t// virtual memory array list\n\tconst version2 = readUint32(reader);\n\tif (version2 !== 3) throw new Error(`Invalid pattern VMAL version: ${version2}`);\n\n\treadUint32(reader); // length\n\tconst top = readUint32(reader);\n\tconst left = readUint32(reader);\n\tconst bottom = readUint32(reader);\n\tconst right = readUint32(reader);\n\tconst channelsCount = readUint32(reader);\n\tconst width = right - left;\n\tconst height = bottom - top;\n\tconst data = new Uint8Array(width * height * 4);\n\n\tfor (let i = 3; i < data.byteLength; i += 4) {\n\t\tdata[i] = 255;\n\t}\n\n\tfor (let i = 0, ch = 0; i < (channelsCount + 2); i++) {\n\t\tconst has = readUint32(reader);\n\t\tif (!has) continue;\n\n\t\tconst length = readUint32(reader);\n\t\tconst pixelDepth = readUint32(reader);\n\t\tconst ctop = readUint32(reader);\n\t\tconst cleft = readUint32(reader);\n\t\tconst cbottom = readUint32(reader);\n\t\tconst cright = readUint32(reader);\n\t\tconst pixelDepth2 = readUint16(reader);\n\t\tconst compressionMode = readUint8(reader); // 0 - raw, 1 - zip\n\t\tconst dataLength = length - (4 + 16 + 2 + 1);\n\t\tconst cdata = readBytes(reader, dataLength);\n\n\t\tif (pixelDepth !== 8 || pixelDepth2 !== 8) {\n\t\t\tthrow new Error('16bit pixel depth not supported for patterns');\n\t\t}\n\n\t\tconst w = cright - cleft;\n\t\tconst h = cbottom - ctop;\n\t\tconst ox = cleft - left;\n\t\tconst oy = ctop - top;\n\n\t\tif (compressionMode === 0) {\n\t\t\tif (colorMode === ColorMode.RGB && ch < 3) {\n\t\t\t\tfor (let y = 0; y < h; y++) {\n\t\t\t\t\tfor (let x = 0; x < w; x++) {\n\t\t\t\t\t\tconst src = x + y * w;\n\t\t\t\t\t\tconst dst = (ox + x + (y + oy) * width) * 4;\n\t\t\t\t\t\tdata[dst + ch] = cdata[src];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (colorMode === ColorMode.Grayscale && ch < 1) {\n\t\t\t\tfor (let y = 0; y < h; y++) {\n\t\t\t\t\tfor (let x = 0; x < w; x++) {\n\t\t\t\t\t\tconst src = x + y * w;\n\t\t\t\t\t\tconst dst = (ox + x + (y + oy) * width) * 4;\n\t\t\t\t\t\tconst value = cdata[src];\n\t\t\t\t\t\tdata[dst + 0] = value;\n\t\t\t\t\t\tdata[dst + 1] = value;\n\t\t\t\t\t\tdata[dst + 2] = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (colorMode === ColorMode.Indexed) {\n\t\t\t\t// TODO:\n\t\t\t\tthrow new Error('Indexed pattern color mode not implemented');\n\t\t\t}\n\t\t} else if (compressionMode === 1) {\n\t\t\t// console.log({ colorMode });\n\t\t\t// require('fs').writeFileSync('zip.bin', Buffer.from(cdata));\n\t\t\t// const data = require('zlib').inflateRawSync(cdata);\n\t\t\t// const data = require('zlib').unzipSync(cdata);\n\t\t\t// console.log(data);\n\t\t\t// throw new Error('Zip compression not supported for pattern');\n\t\t\t// throw new Error('Unsupported pattern compression');\n\t\t\treader.log('Unsupported pattern compression');\n\t\t\tname += ' (failed to decode)';\n\t\t} else {\n\t\t\tthrow new Error('Invalid pattern compression mode');\n\t\t}\n\n\t\tch++;\n\t}\n\n\t// TODO: use canvas instead of data ?\n\n\treturn { id, name, x, y, bounds: { x: left, y: top, w: width, h: height }, data };\n}\n","\"use strict\";\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.resourceHandlersMap = exports.resourceHandlers = void 0;\r\nvar base64_js_1 = require(\"base64-js\");\r\nvar psdReader_1 = require(\"./psdReader\");\r\nvar psdWriter_1 = require(\"./psdWriter\");\r\nvar helpers_1 = require(\"./helpers\");\r\nvar utf8_1 = require(\"./utf8\");\r\nvar descriptor_1 = require(\"./descriptor\");\r\nexports.resourceHandlers = [];\r\nexports.resourceHandlersMap = {};\r\nfunction addHandler(key, has, read, write) {\r\n    var handler = { key: key, has: has, read: read, write: write };\r\n    exports.resourceHandlers.push(handler);\r\n    exports.resourceHandlersMap[handler.key] = handler;\r\n}\r\nvar LOG_MOCK_HANDLERS = false;\r\nvar RESOLUTION_UNITS = [undefined, 'PPI', 'PPCM'];\r\nvar MEASUREMENT_UNITS = [undefined, 'Inches', 'Centimeters', 'Points', 'Picas', 'Columns'];\r\nvar hex = '0123456789abcdef';\r\nfunction charToNibble(code) {\r\n    return code <= 57 ? code - 48 : code - 87;\r\n}\r\nfunction byteAt(value, index) {\r\n    return (charToNibble(value.charCodeAt(index)) << 4) | charToNibble(value.charCodeAt(index + 1));\r\n}\r\nfunction readUtf8String(reader, length) {\r\n    var buffer = (0, psdReader_1.readBytes)(reader, length);\r\n    return (0, utf8_1.decodeString)(buffer);\r\n}\r\nfunction writeUtf8String(writer, value) {\r\n    var buffer = (0, utf8_1.encodeString)(value);\r\n    (0, psdWriter_1.writeBytes)(writer, buffer);\r\n}\r\nfunction readEncodedString(reader) {\r\n    var length = (0, psdReader_1.readUint8)(reader);\r\n    var buffer = (0, psdReader_1.readBytes)(reader, length);\r\n    var notAscii = false;\r\n    for (var i = 0; i < buffer.byteLength; i++) {\r\n        if (buffer[i] & 0x80) {\r\n            notAscii = true;\r\n            break;\r\n        }\r\n    }\r\n    if (notAscii) {\r\n        var decoder = new TextDecoder('gbk');\r\n        return decoder.decode(buffer);\r\n    }\r\n    else {\r\n        return (0, utf8_1.decodeString)(buffer);\r\n    }\r\n}\r\nfunction writeEncodedString(writer, value) {\r\n    var ascii = '';\r\n    for (var i = 0, code = value.codePointAt(i++); code !== undefined; code = value.codePointAt(i++)) {\r\n        ascii += code > 0x7f ? '?' : String.fromCodePoint(code);\r\n    }\r\n    var buffer = (0, utf8_1.encodeString)(ascii);\r\n    (0, psdWriter_1.writeUint8)(writer, buffer.byteLength);\r\n    (0, psdWriter_1.writeBytes)(writer, buffer);\r\n}\r\nhelpers_1.MOCK_HANDLERS && addHandler(1028, // IPTC-NAA record\r\nfunction (// IPTC-NAA record\r\ntarget) { return target._ir1028 !== undefined; }, function (reader, target, left) {\r\n    LOG_MOCK_HANDLERS && console.log('image resource 1028', left());\r\n    target._ir1028 = (0, psdReader_1.readBytes)(reader, left());\r\n}, function (writer, target) {\r\n    (0, psdWriter_1.writeBytes)(writer, target._ir1028);\r\n});\r\naddHandler(1061, function (target) { return target.captionDigest !== undefined; }, function (reader, target) {\r\n    var captionDigest = '';\r\n    for (var i = 0; i < 16; i++) {\r\n        var byte = (0, psdReader_1.readUint8)(reader);\r\n        captionDigest += hex[byte >> 4];\r\n        captionDigest += hex[byte & 0xf];\r\n    }\r\n    target.captionDigest = captionDigest;\r\n}, function (writer, target) {\r\n    for (var i = 0; i < 16; i++) {\r\n        (0, psdWriter_1.writeUint8)(writer, byteAt(target.captionDigest, i * 2));\r\n    }\r\n});\r\naddHandler(1060, function (target) { return target.xmpMetadata !== undefined; }, function (reader, target, left) {\r\n    target.xmpMetadata = readUtf8String(reader, left());\r\n}, function (writer, target) {\r\n    writeUtf8String(writer, target.xmpMetadata);\r\n});\r\nvar Inte = (0, helpers_1.createEnum)('Inte', 'perceptual', {\r\n    'perceptual': 'Img ',\r\n    'saturation': 'Grp ',\r\n    'relative colorimetric': 'Clrm',\r\n    'absolute colorimetric': 'AClr',\r\n});\r\naddHandler(1082, function (target) { return target.printInformation !== undefined; }, function (reader, target) {\r\n    var _a, _b;\r\n    var desc = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n    target.printInformation = {\r\n        printerName: desc.printerName || '',\r\n        renderingIntent: Inte.decode((_a = desc.Inte) !== null && _a !== void 0 ? _a : 'Inte.Img '),\r\n    };\r\n    var info = target.printInformation;\r\n    if (desc.PstS !== undefined)\r\n        info.printerManagesColors = desc.PstS;\r\n    if (desc['Nm  '] !== undefined)\r\n        info.printerProfile = desc['Nm  '];\r\n    if (desc.MpBl !== undefined)\r\n        info.blackPointCompensation = desc.MpBl;\r\n    if (desc.printSixteenBit !== undefined)\r\n        info.printSixteenBit = desc.printSixteenBit;\r\n    if (desc.hardProof !== undefined)\r\n        info.hardProof = desc.hardProof;\r\n    if (desc.printProofSetup) {\r\n        if ('Bltn' in desc.printProofSetup) {\r\n            info.proofSetup = { builtin: desc.printProofSetup.Bltn.split('.')[1] };\r\n        }\r\n        else {\r\n            info.proofSetup = {\r\n                profile: desc.printProofSetup.profile,\r\n                renderingIntent: Inte.decode((_b = desc.printProofSetup.Inte) !== null && _b !== void 0 ? _b : 'Inte.Img '),\r\n                blackPointCompensation: !!desc.printProofSetup.MpBl,\r\n                paperWhite: !!desc.printProofSetup.paperWhite,\r\n            };\r\n        }\r\n    }\r\n}, function (writer, target) {\r\n    var _a, _b;\r\n    var info = target.printInformation;\r\n    var desc = {};\r\n    if (info.printerManagesColors) {\r\n        desc.PstS = true;\r\n    }\r\n    else {\r\n        if (info.hardProof !== undefined)\r\n            desc.hardProof = !!info.hardProof;\r\n        desc.ClrS = 'ClrS.RGBC'; // TODO: ???\r\n        desc['Nm  '] = (_a = info.printerProfile) !== null && _a !== void 0 ? _a : 'CIE RGB';\r\n    }\r\n    desc.Inte = Inte.encode(info.renderingIntent);\r\n    if (!info.printerManagesColors)\r\n        desc.MpBl = !!info.blackPointCompensation;\r\n    desc.printSixteenBit = !!info.printSixteenBit;\r\n    desc.printerName = info.printerName || '';\r\n    if (info.proofSetup && 'profile' in info.proofSetup) {\r\n        desc.printProofSetup = {\r\n            profile: info.proofSetup.profile || '',\r\n            Inte: Inte.encode(info.proofSetup.renderingIntent),\r\n            MpBl: !!info.proofSetup.blackPointCompensation,\r\n            paperWhite: !!info.proofSetup.paperWhite,\r\n        };\r\n    }\r\n    else {\r\n        desc.printProofSetup = {\r\n            Bltn: ((_b = info.proofSetup) === null || _b === void 0 ? void 0 : _b.builtin) ? \"builtinProof.\".concat(info.proofSetup.builtin) : 'builtinProof.proofCMYK',\r\n        };\r\n    }\r\n    (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'printOutput', desc);\r\n});\r\nhelpers_1.MOCK_HANDLERS && addHandler(1083, // Print style\r\nfunction (// Print style\r\ntarget) { return target._ir1083 !== undefined; }, function (reader, target, left) {\r\n    LOG_MOCK_HANDLERS && console.log('image resource 1083', left());\r\n    target._ir1083 = (0, psdReader_1.readBytes)(reader, left());\r\n    // TODO:\r\n    // const desc = readVersionAndDescriptor(reader);\r\n    // console.log('1083', require('util').inspect(desc, false, 99, true));\r\n}, function (writer, target) {\r\n    (0, psdWriter_1.writeBytes)(writer, target._ir1083);\r\n});\r\naddHandler(1005, function (target) { return target.resolutionInfo !== undefined; }, function (reader, target) {\r\n    var horizontalResolution = (0, psdReader_1.readFixedPoint32)(reader);\r\n    var horizontalResolutionUnit = (0, psdReader_1.readUint16)(reader);\r\n    var widthUnit = (0, psdReader_1.readUint16)(reader);\r\n    var verticalResolution = (0, psdReader_1.readFixedPoint32)(reader);\r\n    var verticalResolutionUnit = (0, psdReader_1.readUint16)(reader);\r\n    var heightUnit = (0, psdReader_1.readUint16)(reader);\r\n    target.resolutionInfo = {\r\n        horizontalResolution: horizontalResolution,\r\n        horizontalResolutionUnit: RESOLUTION_UNITS[horizontalResolutionUnit] || 'PPI',\r\n        widthUnit: MEASUREMENT_UNITS[widthUnit] || 'Inches',\r\n        verticalResolution: verticalResolution,\r\n        verticalResolutionUnit: RESOLUTION_UNITS[verticalResolutionUnit] || 'PPI',\r\n        heightUnit: MEASUREMENT_UNITS[heightUnit] || 'Inches',\r\n    };\r\n}, function (writer, target) {\r\n    var info = target.resolutionInfo;\r\n    (0, psdWriter_1.writeFixedPoint32)(writer, info.horizontalResolution || 0);\r\n    (0, psdWriter_1.writeUint16)(writer, Math.max(1, RESOLUTION_UNITS.indexOf(info.horizontalResolutionUnit)));\r\n    (0, psdWriter_1.writeUint16)(writer, Math.max(1, MEASUREMENT_UNITS.indexOf(info.widthUnit)));\r\n    (0, psdWriter_1.writeFixedPoint32)(writer, info.verticalResolution || 0);\r\n    (0, psdWriter_1.writeUint16)(writer, Math.max(1, RESOLUTION_UNITS.indexOf(info.verticalResolutionUnit)));\r\n    (0, psdWriter_1.writeUint16)(writer, Math.max(1, MEASUREMENT_UNITS.indexOf(info.heightUnit)));\r\n});\r\nvar printScaleStyles = ['centered', 'size to fit', 'user defined'];\r\naddHandler(1062, function (target) { return target.printScale !== undefined; }, function (reader, target) {\r\n    target.printScale = {\r\n        style: printScaleStyles[(0, psdReader_1.readInt16)(reader)],\r\n        x: (0, psdReader_1.readFloat32)(reader),\r\n        y: (0, psdReader_1.readFloat32)(reader),\r\n        scale: (0, psdReader_1.readFloat32)(reader),\r\n    };\r\n}, function (writer, target) {\r\n    var _a = target.printScale, style = _a.style, x = _a.x, y = _a.y, scale = _a.scale;\r\n    (0, psdWriter_1.writeInt16)(writer, Math.max(0, printScaleStyles.indexOf(style)));\r\n    (0, psdWriter_1.writeFloat32)(writer, x || 0);\r\n    (0, psdWriter_1.writeFloat32)(writer, y || 0);\r\n    (0, psdWriter_1.writeFloat32)(writer, scale || 0);\r\n});\r\naddHandler(1006, function (target) { return target.alphaChannelNames !== undefined; }, function (reader, target, left) {\r\n    if (!target.alphaChannelNames) { // skip if the unicode versions are already read\r\n        target.alphaChannelNames = [];\r\n        while (left() > 0) {\r\n            var value = readEncodedString(reader);\r\n            // const value = readPascalString(reader, 1);\r\n            target.alphaChannelNames.push(value);\r\n        }\r\n    }\r\n    else {\r\n        (0, psdReader_1.skipBytes)(reader, left());\r\n    }\r\n}, function (writer, target) {\r\n    for (var _i = 0, _a = target.alphaChannelNames; _i < _a.length; _i++) {\r\n        var name_1 = _a[_i];\r\n        writeEncodedString(writer, name_1);\r\n        // writePascalString(writer, name, 1);\r\n    }\r\n});\r\naddHandler(1045, function (target) { return target.alphaChannelNames !== undefined; }, function (reader, target, left) {\r\n    target.alphaChannelNames = [];\r\n    while (left() > 0) {\r\n        target.alphaChannelNames.push((0, psdReader_1.readUnicodeString)(reader));\r\n    }\r\n}, function (writer, target) {\r\n    for (var _i = 0, _a = target.alphaChannelNames; _i < _a.length; _i++) {\r\n        var name_2 = _a[_i];\r\n        (0, psdWriter_1.writeUnicodeStringWithPadding)(writer, name_2);\r\n    }\r\n});\r\nhelpers_1.MOCK_HANDLERS && addHandler(1077, function (target) { return target._ir1077 !== undefined; }, function (reader, target, left) {\r\n    LOG_MOCK_HANDLERS && console.log('image resource 1077', left());\r\n    target._ir1077 = (0, psdReader_1.readBytes)(reader, left());\r\n}, function (writer, target) {\r\n    (0, psdWriter_1.writeBytes)(writer, target._ir1077);\r\n});\r\naddHandler(1053, function (target) { return target.alphaIdentifiers !== undefined; }, function (reader, target, left) {\r\n    target.alphaIdentifiers = [];\r\n    while (left() >= 4) {\r\n        target.alphaIdentifiers.push((0, psdReader_1.readUint32)(reader));\r\n    }\r\n}, function (writer, target) {\r\n    for (var _i = 0, _a = target.alphaIdentifiers; _i < _a.length; _i++) {\r\n        var id = _a[_i];\r\n        (0, psdWriter_1.writeUint32)(writer, id);\r\n    }\r\n});\r\naddHandler(1010, function (target) { return target.backgroundColor !== undefined; }, function (reader, target) { return target.backgroundColor = (0, psdReader_1.readColor)(reader); }, function (writer, target) { return (0, psdWriter_1.writeColor)(writer, target.backgroundColor); });\r\naddHandler(1037, function (target) { return target.globalAngle !== undefined; }, function (reader, target) { return target.globalAngle = (0, psdReader_1.readInt32)(reader); }, function (writer, target) { return (0, psdWriter_1.writeInt32)(writer, target.globalAngle); });\r\naddHandler(1049, function (target) { return target.globalAltitude !== undefined; }, function (reader, target) { return target.globalAltitude = (0, psdReader_1.readUint32)(reader); }, function (writer, target) { return (0, psdWriter_1.writeUint32)(writer, target.globalAltitude); });\r\naddHandler(1011, function (target) { return target.printFlags !== undefined; }, function (reader, target) {\r\n    target.printFlags = {\r\n        labels: !!(0, psdReader_1.readUint8)(reader),\r\n        cropMarks: !!(0, psdReader_1.readUint8)(reader),\r\n        colorBars: !!(0, psdReader_1.readUint8)(reader),\r\n        registrationMarks: !!(0, psdReader_1.readUint8)(reader),\r\n        negative: !!(0, psdReader_1.readUint8)(reader),\r\n        flip: !!(0, psdReader_1.readUint8)(reader),\r\n        interpolate: !!(0, psdReader_1.readUint8)(reader),\r\n        caption: !!(0, psdReader_1.readUint8)(reader),\r\n        printFlags: !!(0, psdReader_1.readUint8)(reader),\r\n    };\r\n}, function (writer, target) {\r\n    var flags = target.printFlags;\r\n    (0, psdWriter_1.writeUint8)(writer, flags.labels ? 1 : 0);\r\n    (0, psdWriter_1.writeUint8)(writer, flags.cropMarks ? 1 : 0);\r\n    (0, psdWriter_1.writeUint8)(writer, flags.colorBars ? 1 : 0);\r\n    (0, psdWriter_1.writeUint8)(writer, flags.registrationMarks ? 1 : 0);\r\n    (0, psdWriter_1.writeUint8)(writer, flags.negative ? 1 : 0);\r\n    (0, psdWriter_1.writeUint8)(writer, flags.flip ? 1 : 0);\r\n    (0, psdWriter_1.writeUint8)(writer, flags.interpolate ? 1 : 0);\r\n    (0, psdWriter_1.writeUint8)(writer, flags.caption ? 1 : 0);\r\n    (0, psdWriter_1.writeUint8)(writer, flags.printFlags ? 1 : 0);\r\n});\r\nhelpers_1.MOCK_HANDLERS && addHandler(10000, // Print flags\r\nfunction (// Print flags\r\ntarget) { return target._ir10000 !== undefined; }, function (reader, target, left) {\r\n    LOG_MOCK_HANDLERS && console.log('image resource 10000', left());\r\n    target._ir10000 = (0, psdReader_1.readBytes)(reader, left());\r\n}, function (writer, target) {\r\n    (0, psdWriter_1.writeBytes)(writer, target._ir10000);\r\n});\r\nhelpers_1.MOCK_HANDLERS && addHandler(1013, // Color halftoning\r\nfunction (// Color halftoning\r\ntarget) { return target._ir1013 !== undefined; }, function (reader, target, left) {\r\n    LOG_MOCK_HANDLERS && console.log('image resource 1013', left());\r\n    target._ir1013 = (0, psdReader_1.readBytes)(reader, left());\r\n}, function (writer, target) {\r\n    (0, psdWriter_1.writeBytes)(writer, target._ir1013);\r\n});\r\nhelpers_1.MOCK_HANDLERS && addHandler(1016, // Color transfer functions\r\nfunction (// Color transfer functions\r\ntarget) { return target._ir1016 !== undefined; }, function (reader, target, left) {\r\n    LOG_MOCK_HANDLERS && console.log('image resource 1016', left());\r\n    target._ir1016 = (0, psdReader_1.readBytes)(reader, left());\r\n}, function (writer, target) {\r\n    (0, psdWriter_1.writeBytes)(writer, target._ir1016);\r\n});\r\naddHandler(1080, // Count Information\r\nfunction (// Count Information\r\ntarget) { return target.countInformation !== undefined; }, function (reader, target) {\r\n    var desc = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n    target.countInformation = desc.countGroupList.map(function (g) { return ({\r\n        color: { r: g['Rd  '], g: g['Grn '], b: g['Bl  '] },\r\n        name: g['Nm  '],\r\n        size: g['Rds '],\r\n        fontSize: g.fontSize,\r\n        visible: g.Vsbl,\r\n        points: g.countObjectList.map(function (p) { return ({ x: p['X   '], y: p['Y   '] }); }),\r\n    }); });\r\n}, function (writer, target) {\r\n    var desc = {\r\n        Vrsn: 1,\r\n        countGroupList: target.countInformation.map(function (g) { return ({\r\n            'Rd  ': g.color.r,\r\n            'Grn ': g.color.g,\r\n            'Bl  ': g.color.b,\r\n            'Nm  ': g.name,\r\n            'Rds ': g.size,\r\n            fontSize: g.fontSize,\r\n            Vsbl: g.visible,\r\n            countObjectList: g.points.map(function (p) { return ({ 'X   ': p.x, 'Y   ': p.y }); }),\r\n        }); }),\r\n    };\r\n    (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'Cnt ', desc);\r\n});\r\naddHandler(1024, function (target) { return target.layerState !== undefined; }, function (reader, target) { return target.layerState = (0, psdReader_1.readUint16)(reader); }, function (writer, target) { return (0, psdWriter_1.writeUint16)(writer, target.layerState); });\r\naddHandler(1026, function (target) { return target.layersGroup !== undefined; }, function (reader, target, left) {\r\n    target.layersGroup = [];\r\n    while (left() > 0) {\r\n        target.layersGroup.push((0, psdReader_1.readUint16)(reader));\r\n    }\r\n}, function (writer, target) {\r\n    for (var _i = 0, _a = target.layersGroup; _i < _a.length; _i++) {\r\n        var g = _a[_i];\r\n        (0, psdWriter_1.writeUint16)(writer, g);\r\n    }\r\n});\r\naddHandler(1072, function (target) { return target.layerGroupsEnabledId !== undefined; }, function (reader, target, left) {\r\n    target.layerGroupsEnabledId = [];\r\n    while (left() > 0) {\r\n        target.layerGroupsEnabledId.push((0, psdReader_1.readUint8)(reader));\r\n    }\r\n}, function (writer, target) {\r\n    for (var _i = 0, _a = target.layerGroupsEnabledId; _i < _a.length; _i++) {\r\n        var id = _a[_i];\r\n        (0, psdWriter_1.writeUint8)(writer, id);\r\n    }\r\n});\r\naddHandler(1069, function (target) { return target.layerSelectionIds !== undefined; }, function (reader, target) {\r\n    var count = (0, psdReader_1.readUint16)(reader);\r\n    target.layerSelectionIds = [];\r\n    while (count--) {\r\n        target.layerSelectionIds.push((0, psdReader_1.readUint32)(reader));\r\n    }\r\n}, function (writer, target) {\r\n    (0, psdWriter_1.writeUint16)(writer, target.layerSelectionIds.length);\r\n    for (var _i = 0, _a = target.layerSelectionIds; _i < _a.length; _i++) {\r\n        var id = _a[_i];\r\n        (0, psdWriter_1.writeUint32)(writer, id);\r\n    }\r\n});\r\naddHandler(1032, function (target) { return target.gridAndGuidesInformation !== undefined; }, function (reader, target) {\r\n    var version = (0, psdReader_1.readUint32)(reader);\r\n    var horizontal = (0, psdReader_1.readUint32)(reader);\r\n    var vertical = (0, psdReader_1.readUint32)(reader);\r\n    var count = (0, psdReader_1.readUint32)(reader);\r\n    if (version !== 1)\r\n        throw new Error(\"Invalid 1032 resource version: \".concat(version));\r\n    target.gridAndGuidesInformation = {\r\n        grid: { horizontal: horizontal, vertical: vertical },\r\n        guides: [],\r\n    };\r\n    for (var i = 0; i < count; i++) {\r\n        target.gridAndGuidesInformation.guides.push({\r\n            location: (0, psdReader_1.readUint32)(reader) / 32,\r\n            direction: (0, psdReader_1.readUint8)(reader) ? 'horizontal' : 'vertical'\r\n        });\r\n    }\r\n}, function (writer, target) {\r\n    var info = target.gridAndGuidesInformation;\r\n    var grid = info.grid || { horizontal: 18 * 32, vertical: 18 * 32 };\r\n    var guides = info.guides || [];\r\n    (0, psdWriter_1.writeUint32)(writer, 1);\r\n    (0, psdWriter_1.writeUint32)(writer, grid.horizontal);\r\n    (0, psdWriter_1.writeUint32)(writer, grid.vertical);\r\n    (0, psdWriter_1.writeUint32)(writer, guides.length);\r\n    for (var _i = 0, guides_1 = guides; _i < guides_1.length; _i++) {\r\n        var g = guides_1[_i];\r\n        (0, psdWriter_1.writeUint32)(writer, g.location * 32);\r\n        (0, psdWriter_1.writeUint8)(writer, g.direction === 'horizontal' ? 1 : 0);\r\n    }\r\n});\r\naddHandler(1065, // Layer Comps\r\nfunction (// Layer Comps\r\ntarget) { return target.layerComps !== undefined; }, function (reader, target) {\r\n    var desc = (0, descriptor_1.readVersionAndDescriptor)(reader, true);\r\n    // console.log('CompList', require('util').inspect(desc, false, 99, true));\r\n    target.layerComps = { list: [] };\r\n    for (var _i = 0, _a = desc.list; _i < _a.length; _i++) {\r\n        var item = _a[_i];\r\n        target.layerComps.list.push({\r\n            id: item.compID,\r\n            name: item['Nm  '],\r\n            capturedInfo: item.capturedInfo,\r\n        });\r\n        if ('comment' in item)\r\n            target.layerComps.list[target.layerComps.list.length - 1].comment = item.comment;\r\n    }\r\n    if ('lastAppliedComp' in desc)\r\n        target.layerComps.lastApplied = desc.lastAppliedComp;\r\n}, function (writer, target) {\r\n    var layerComps = target.layerComps;\r\n    var desc = { list: [] };\r\n    for (var _i = 0, _a = layerComps.list; _i < _a.length; _i++) {\r\n        var item = _a[_i];\r\n        var t = {};\r\n        t._classID = 'Comp';\r\n        t['Nm  '] = item.name;\r\n        if ('comment' in item)\r\n            t.comment = item.comment;\r\n        t.compID = item.id;\r\n        t.capturedInfo = item.capturedInfo;\r\n        desc.list.push(t);\r\n    }\r\n    if ('lastApplied' in layerComps)\r\n        desc.lastAppliedComp = layerComps.lastApplied;\r\n    // console.log('CompList', require('util').inspect(desc, false, 99, true));\r\n    (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'CompList', desc);\r\n});\r\nhelpers_1.MOCK_HANDLERS && addHandler(1092, // ???\r\nfunction (// ???\r\ntarget) { return target._ir1092 !== undefined; }, function (reader, target, left) {\r\n    LOG_MOCK_HANDLERS && console.log('image resource 1092', left());\r\n    // 16 bytes, seems to be 4 integers\r\n    target._ir1092 = (0, psdReader_1.readBytes)(reader, left());\r\n}, function (writer, target) {\r\n    (0, psdWriter_1.writeBytes)(writer, target._ir1092);\r\n});\r\n// 0 - normal, 7 - multiply, 8 - screen, 23 - difference\r\nvar onionSkinsBlendModes = [\r\n    'normal', undefined, undefined, undefined, undefined, undefined, undefined, 'multiply',\r\n    'screen', undefined, undefined, undefined, undefined, undefined, undefined, undefined,\r\n    undefined, undefined, undefined, undefined, undefined, undefined, undefined, 'difference',\r\n];\r\naddHandler(1078, // Onion Skins\r\nfunction (// Onion Skins\r\ntarget) { return target.onionSkins !== undefined; }, function (reader, target) {\r\n    var desc = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n    // console.log('1078', require('util').inspect(desc, false, 99, true));\r\n    target.onionSkins = {\r\n        enabled: desc.enab,\r\n        framesBefore: desc.numBefore,\r\n        framesAfter: desc.numAfter,\r\n        frameSpacing: desc.Spcn,\r\n        minOpacity: desc.minOpacity / 100,\r\n        maxOpacity: desc.maxOpacity / 100,\r\n        blendMode: onionSkinsBlendModes[desc.BlnM] || 'normal',\r\n    };\r\n}, function (writer, target) {\r\n    var onionSkins = target.onionSkins;\r\n    var desc = {\r\n        Vrsn: 1,\r\n        enab: onionSkins.enabled,\r\n        numBefore: onionSkins.framesBefore,\r\n        numAfter: onionSkins.framesAfter,\r\n        Spcn: onionSkins.frameSpacing,\r\n        minOpacity: (onionSkins.minOpacity * 100) | 0,\r\n        maxOpacity: (onionSkins.maxOpacity * 100) | 0,\r\n        BlnM: Math.max(0, onionSkinsBlendModes.indexOf(onionSkins.blendMode)),\r\n    };\r\n    (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'null', desc);\r\n});\r\naddHandler(1075, // Timeline Information\r\nfunction (// Timeline Information\r\ntarget) { return target.timelineInformation !== undefined; }, function (reader, target) {\r\n    var _a, _b;\r\n    var desc = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n    target.timelineInformation = {\r\n        enabled: desc.enab,\r\n        frameStep: (0, descriptor_1.frac)(desc.frameStep),\r\n        frameRate: desc.frameRate,\r\n        time: (0, descriptor_1.frac)(desc.time),\r\n        duration: (0, descriptor_1.frac)(desc.duration),\r\n        workInTime: (0, descriptor_1.frac)(desc.workInTime),\r\n        workOutTime: (0, descriptor_1.frac)(desc.workOutTime),\r\n        repeats: desc.LCnt,\r\n        hasMotion: desc.hasMotion,\r\n        globalTracks: (0, descriptor_1.parseTrackList)(desc.globalTrackList, !!reader.logMissingFeatures),\r\n    };\r\n    if ((_b = (_a = desc.audioClipGroupList) === null || _a === void 0 ? void 0 : _a.audioClipGroupList) === null || _b === void 0 ? void 0 : _b.length) {\r\n        target.timelineInformation.audioClipGroups = desc.audioClipGroupList.audioClipGroupList.map(function (g) { return ({\r\n            id: g.groupID,\r\n            muted: g.muted,\r\n            audioClips: g.audioClipList.map(function (_a) {\r\n                var clipID = _a.clipID, timeScope = _a.timeScope, muted = _a.muted, audioLevel = _a.audioLevel, frameReader = _a.frameReader;\r\n                return ({\r\n                    id: clipID,\r\n                    start: (0, descriptor_1.frac)(timeScope.Strt),\r\n                    duration: (0, descriptor_1.frac)(timeScope.duration),\r\n                    inTime: (0, descriptor_1.frac)(timeScope.inTime),\r\n                    outTime: (0, descriptor_1.frac)(timeScope.outTime),\r\n                    muted: muted,\r\n                    audioLevel: audioLevel,\r\n                    frameReader: {\r\n                        type: frameReader.frameReaderType,\r\n                        mediaDescriptor: frameReader.mediaDescriptor,\r\n                        link: {\r\n                            name: frameReader['Lnk ']['Nm  '],\r\n                            fullPath: frameReader['Lnk '].fullPath,\r\n                            relativePath: frameReader['Lnk '].relPath,\r\n                        },\r\n                    },\r\n                });\r\n            }),\r\n        }); });\r\n    }\r\n}, function (writer, target) {\r\n    var _a;\r\n    var timeline = target.timelineInformation;\r\n    var desc = {\r\n        Vrsn: 1,\r\n        enab: timeline.enabled,\r\n        frameStep: timeline.frameStep,\r\n        frameRate: timeline.frameRate,\r\n        time: timeline.time,\r\n        duration: timeline.duration,\r\n        workInTime: timeline.workInTime,\r\n        workOutTime: timeline.workOutTime,\r\n        LCnt: timeline.repeats,\r\n        globalTrackList: (0, descriptor_1.serializeTrackList)(timeline.globalTracks),\r\n        audioClipGroupList: {\r\n            audioClipGroupList: (_a = timeline.audioClipGroups) === null || _a === void 0 ? void 0 : _a.map(function (a) { return ({\r\n                groupID: a.id,\r\n                muted: a.muted,\r\n                audioClipList: a.audioClips.map(function (c) { return ({\r\n                    clipID: c.id,\r\n                    timeScope: {\r\n                        Vrsn: 1,\r\n                        Strt: c.start,\r\n                        duration: c.duration,\r\n                        inTime: c.inTime,\r\n                        outTime: c.outTime,\r\n                    },\r\n                    frameReader: {\r\n                        frameReaderType: c.frameReader.type,\r\n                        descVersion: 1,\r\n                        'Lnk ': {\r\n                            descVersion: 1,\r\n                            'Nm  ': c.frameReader.link.name,\r\n                            fullPath: c.frameReader.link.fullPath,\r\n                            relPath: c.frameReader.link.relativePath,\r\n                        },\r\n                        mediaDescriptor: c.frameReader.mediaDescriptor,\r\n                    },\r\n                    muted: c.muted,\r\n                    audioLevel: c.audioLevel,\r\n                }); }),\r\n            }); }),\r\n        },\r\n        hasMotion: timeline.hasMotion,\r\n    };\r\n    (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'null', desc, 'anim');\r\n});\r\naddHandler(1076, // Sheet Disclosure\r\nfunction (// Sheet Disclosure\r\ntarget) { return target.sheetDisclosure !== undefined; }, function (reader, target) {\r\n    var desc = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n    target.sheetDisclosure = {};\r\n    if (desc.sheetTimelineOptions) {\r\n        target.sheetDisclosure.sheetTimelineOptions = desc.sheetTimelineOptions.map(function (o) { return ({\r\n            sheetID: o.sheetID,\r\n            sheetDisclosed: o.sheetDisclosed,\r\n            lightsDisclosed: o.lightsDisclosed,\r\n            meshesDisclosed: o.meshesDisclosed,\r\n            materialsDisclosed: o.materialsDisclosed,\r\n        }); });\r\n    }\r\n}, function (writer, target) {\r\n    var disclosure = target.sheetDisclosure;\r\n    var desc = { Vrsn: 1 };\r\n    if (disclosure.sheetTimelineOptions) {\r\n        desc.sheetTimelineOptions = disclosure.sheetTimelineOptions.map(function (d) { return ({\r\n            Vrsn: 2,\r\n            sheetID: d.sheetID,\r\n            sheetDisclosed: d.sheetDisclosed,\r\n            lightsDisclosed: d.lightsDisclosed,\r\n            meshesDisclosed: d.meshesDisclosed,\r\n            materialsDisclosed: d.materialsDisclosed,\r\n        }); });\r\n    }\r\n    (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'null', desc);\r\n});\r\naddHandler(1054, // URL List\r\nfunction (// URL List\r\ntarget) { return target.urlsList !== undefined; }, function (reader, target) {\r\n    var count = (0, psdReader_1.readUint32)(reader);\r\n    target.urlsList = [];\r\n    for (var i = 0; i < count; i++) {\r\n        var long = (0, psdReader_1.readSignature)(reader);\r\n        if (long !== 'slic' && reader.throwForMissingFeatures)\r\n            throw new Error('Unknown long');\r\n        var id = (0, psdReader_1.readUint32)(reader);\r\n        var url = (0, psdReader_1.readUnicodeString)(reader);\r\n        target.urlsList.push({ id: id, url: url, ref: 'slice' });\r\n    }\r\n}, function (writer, target) {\r\n    var list = target.urlsList;\r\n    (0, psdWriter_1.writeUint32)(writer, list.length);\r\n    for (var i = 0; i < list.length; i++) {\r\n        (0, psdWriter_1.writeSignature)(writer, 'slic');\r\n        (0, psdWriter_1.writeUint32)(writer, list[i].id);\r\n        (0, psdWriter_1.writeUnicodeString)(writer, list[i].url);\r\n    }\r\n});\r\nfunction boundsToBounds(bounds) {\r\n    return { 'Top ': bounds.top, Left: bounds.left, Btom: bounds.bottom, Rght: bounds.right };\r\n}\r\nfunction boundsFromBounds(bounds) {\r\n    return { top: bounds['Top '], left: bounds.Left, bottom: bounds.Btom, right: bounds.Rght };\r\n}\r\nfunction clamped(array, index) {\r\n    return array[Math.max(0, Math.min(array.length - 1, index))];\r\n}\r\nvar sliceOrigins = ['autoGenerated', 'layer', 'userGenerated'];\r\nvar sliceTypes = ['noImage', 'image'];\r\nvar sliceAlignments = ['default'];\r\naddHandler(1050, // Slices\r\nfunction (// Slices\r\ntarget) { return target.slices ? target.slices.length : 0; }, function (reader, target) {\r\n    var version = (0, psdReader_1.readUint32)(reader);\r\n    if (version === 6) {\r\n        if (!target.slices)\r\n            target.slices = [];\r\n        var top_1 = (0, psdReader_1.readInt32)(reader);\r\n        var left = (0, psdReader_1.readInt32)(reader);\r\n        var bottom = (0, psdReader_1.readInt32)(reader);\r\n        var right = (0, psdReader_1.readInt32)(reader);\r\n        var groupName = (0, psdReader_1.readUnicodeString)(reader);\r\n        var count = (0, psdReader_1.readUint32)(reader);\r\n        target.slices.push({ bounds: { top: top_1, left: left, bottom: bottom, right: right }, groupName: groupName, slices: [] });\r\n        var slices_1 = target.slices[target.slices.length - 1].slices;\r\n        for (var i = 0; i < count; i++) {\r\n            var id = (0, psdReader_1.readUint32)(reader);\r\n            var groupId = (0, psdReader_1.readUint32)(reader);\r\n            var origin_1 = clamped(sliceOrigins, (0, psdReader_1.readUint32)(reader));\r\n            var associatedLayerId = origin_1 == 'layer' ? (0, psdReader_1.readUint32)(reader) : 0;\r\n            var name_3 = (0, psdReader_1.readUnicodeString)(reader);\r\n            var type = clamped(sliceTypes, (0, psdReader_1.readUint32)(reader));\r\n            var left_1 = (0, psdReader_1.readInt32)(reader);\r\n            var top_2 = (0, psdReader_1.readInt32)(reader);\r\n            var right_1 = (0, psdReader_1.readInt32)(reader);\r\n            var bottom_1 = (0, psdReader_1.readInt32)(reader);\r\n            var url = (0, psdReader_1.readUnicodeString)(reader);\r\n            var target_1 = (0, psdReader_1.readUnicodeString)(reader);\r\n            var message = (0, psdReader_1.readUnicodeString)(reader);\r\n            var altTag = (0, psdReader_1.readUnicodeString)(reader);\r\n            var cellTextIsHTML = !!(0, psdReader_1.readUint8)(reader);\r\n            var cellText = (0, psdReader_1.readUnicodeString)(reader);\r\n            var horizontalAlignment = clamped(sliceAlignments, (0, psdReader_1.readUint32)(reader));\r\n            var verticalAlignment = clamped(sliceAlignments, (0, psdReader_1.readUint32)(reader));\r\n            var a = (0, psdReader_1.readUint8)(reader);\r\n            var r = (0, psdReader_1.readUint8)(reader);\r\n            var g = (0, psdReader_1.readUint8)(reader);\r\n            var b = (0, psdReader_1.readUint8)(reader);\r\n            var backgroundColorType = ((a + r + g + b) === 0) ? 'none' : (a === 0 ? 'matte' : 'color');\r\n            slices_1.push({\r\n                id: id,\r\n                groupId: groupId,\r\n                origin: origin_1,\r\n                associatedLayerId: associatedLayerId,\r\n                name: name_3,\r\n                target: target_1,\r\n                message: message,\r\n                altTag: altTag,\r\n                cellTextIsHTML: cellTextIsHTML,\r\n                cellText: cellText,\r\n                horizontalAlignment: horizontalAlignment,\r\n                verticalAlignment: verticalAlignment,\r\n                type: type,\r\n                url: url,\r\n                bounds: { top: top_2, left: left_1, bottom: bottom_1, right: right_1 },\r\n                backgroundColorType: backgroundColorType,\r\n                backgroundColor: { r: r, g: g, b: b, a: a },\r\n            });\r\n        }\r\n        var desc = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n        desc.slices.forEach(function (d) {\r\n            var slice = slices_1.find(function (s) { return d.sliceID == s.id; });\r\n            if (slice) {\r\n                slice.topOutset = d.topOutset;\r\n                slice.leftOutset = d.leftOutset;\r\n                slice.bottomOutset = d.bottomOutset;\r\n                slice.rightOutset = d.rightOutset;\r\n            }\r\n        });\r\n    }\r\n    else if (version === 7 || version === 8) {\r\n        var desc = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n        if (!target.slices)\r\n            target.slices = [];\r\n        target.slices.push({\r\n            groupName: desc.baseName,\r\n            bounds: boundsFromBounds(desc.bounds),\r\n            slices: desc.slices.map(function (s) { return (__assign(__assign({}, (s['Nm  '] ? { name: s['Nm  '] } : {})), { id: s.sliceID, groupId: s.groupID, associatedLayerId: 0, origin: descriptor_1.ESliceOrigin.decode(s.origin), type: descriptor_1.ESliceType.decode(s.Type), bounds: boundsFromBounds(s.bounds), url: s.url, target: s.null, message: s.Msge, altTag: s.altTag, cellTextIsHTML: s.cellTextIsHTML, cellText: s.cellText, horizontalAlignment: descriptor_1.ESliceHorzAlign.decode(s.horzAlign), verticalAlignment: descriptor_1.ESliceVertAlign.decode(s.vertAlign), backgroundColorType: descriptor_1.ESliceBGColorType.decode(s.bgColorType), backgroundColor: s.bgColor ? { r: s.bgColor['Rd  '], g: s.bgColor['Grn '], b: s.bgColor['Bl  '], a: s.bgColor.alpha } : { r: 0, g: 0, b: 0, a: 0 }, topOutset: s.topOutset || 0, leftOutset: s.leftOutset || 0, bottomOutset: s.bottomOutset || 0, rightOutset: s.rightOutset || 0 })); }),\r\n        });\r\n    }\r\n    else {\r\n        throw new Error(\"Invalid slices version (\".concat(version, \")\"));\r\n    }\r\n}, function (writer, target, index) {\r\n    var _a = target.slices[index], bounds = _a.bounds, groupName = _a.groupName, slices = _a.slices;\r\n    (0, psdWriter_1.writeUint32)(writer, 6); // version\r\n    (0, psdWriter_1.writeInt32)(writer, bounds.top);\r\n    (0, psdWriter_1.writeInt32)(writer, bounds.left);\r\n    (0, psdWriter_1.writeInt32)(writer, bounds.bottom);\r\n    (0, psdWriter_1.writeInt32)(writer, bounds.right);\r\n    (0, psdWriter_1.writeUnicodeString)(writer, groupName);\r\n    (0, psdWriter_1.writeUint32)(writer, slices.length);\r\n    for (var i = 0; i < slices.length; i++) {\r\n        var slice = slices[i];\r\n        var _b = slice.backgroundColor, a = _b.a, r = _b.r, g = _b.g, b = _b.b;\r\n        if (slice.backgroundColorType === 'none') {\r\n            a = r = g = b = 0;\r\n        }\r\n        else if (slice.backgroundColorType === 'matte') {\r\n            a = 0;\r\n            r = g = b = 255;\r\n        }\r\n        (0, psdWriter_1.writeUint32)(writer, slice.id);\r\n        (0, psdWriter_1.writeUint32)(writer, slice.groupId);\r\n        (0, psdWriter_1.writeUint32)(writer, sliceOrigins.indexOf(slice.origin));\r\n        if (slice.origin === 'layer')\r\n            (0, psdWriter_1.writeUint32)(writer, slice.associatedLayerId);\r\n        (0, psdWriter_1.writeUnicodeString)(writer, slice.name || '');\r\n        (0, psdWriter_1.writeUint32)(writer, sliceTypes.indexOf(slice.type));\r\n        (0, psdWriter_1.writeInt32)(writer, slice.bounds.left);\r\n        (0, psdWriter_1.writeInt32)(writer, slice.bounds.top);\r\n        (0, psdWriter_1.writeInt32)(writer, slice.bounds.right);\r\n        (0, psdWriter_1.writeInt32)(writer, slice.bounds.bottom);\r\n        (0, psdWriter_1.writeUnicodeString)(writer, slice.url);\r\n        (0, psdWriter_1.writeUnicodeString)(writer, slice.target);\r\n        (0, psdWriter_1.writeUnicodeString)(writer, slice.message);\r\n        (0, psdWriter_1.writeUnicodeString)(writer, slice.altTag);\r\n        (0, psdWriter_1.writeUint8)(writer, slice.cellTextIsHTML ? 1 : 0);\r\n        (0, psdWriter_1.writeUnicodeString)(writer, slice.cellText);\r\n        (0, psdWriter_1.writeUint32)(writer, sliceAlignments.indexOf(slice.horizontalAlignment));\r\n        (0, psdWriter_1.writeUint32)(writer, sliceAlignments.indexOf(slice.verticalAlignment));\r\n        (0, psdWriter_1.writeUint8)(writer, a);\r\n        (0, psdWriter_1.writeUint8)(writer, r);\r\n        (0, psdWriter_1.writeUint8)(writer, g);\r\n        (0, psdWriter_1.writeUint8)(writer, b);\r\n    }\r\n    var desc = {\r\n        bounds: boundsToBounds(bounds),\r\n        slices: [],\r\n    };\r\n    slices.forEach(function (s) {\r\n        var slice = __assign(__assign({ sliceID: s.id, groupID: s.groupId, origin: descriptor_1.ESliceOrigin.encode(s.origin), Type: descriptor_1.ESliceType.encode(s.type), bounds: boundsToBounds(s.bounds) }, (s.name ? { 'Nm  ': s.name } : {})), { url: s.url, null: s.target, Msge: s.message, altTag: s.altTag, cellTextIsHTML: s.cellTextIsHTML, cellText: s.cellText, horzAlign: descriptor_1.ESliceHorzAlign.encode(s.horizontalAlignment), vertAlign: descriptor_1.ESliceVertAlign.encode(s.verticalAlignment), bgColorType: descriptor_1.ESliceBGColorType.encode(s.backgroundColorType) });\r\n        if (s.backgroundColorType === 'color') {\r\n            var _a = s.backgroundColor, r = _a.r, g = _a.g, b = _a.b, a = _a.a;\r\n            slice.bgColor = { 'Rd  ': r, 'Grn ': g, 'Bl  ': b, alpha: a };\r\n        }\r\n        slice.topOutset = s.topOutset || 0;\r\n        slice.leftOutset = s.leftOutset || 0;\r\n        slice.bottomOutset = s.bottomOutset || 0;\r\n        slice.rightOutset = s.rightOutset || 0;\r\n        desc.slices.push(slice);\r\n    });\r\n    (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'null', desc, 'slices');\r\n});\r\naddHandler(1064, function (target) { return target.pixelAspectRatio !== undefined; }, function (reader, target) {\r\n    if ((0, psdReader_1.readUint32)(reader) > 2)\r\n        throw new Error('Invalid pixelAspectRatio version');\r\n    target.pixelAspectRatio = { aspect: (0, psdReader_1.readFloat64)(reader) };\r\n}, function (writer, target) {\r\n    (0, psdWriter_1.writeUint32)(writer, 2); // version\r\n    (0, psdWriter_1.writeFloat64)(writer, target.pixelAspectRatio.aspect);\r\n});\r\naddHandler(1041, function (target) { return target.iccUntaggedProfile !== undefined; }, function (reader, target) {\r\n    target.iccUntaggedProfile = !!(0, psdReader_1.readUint8)(reader);\r\n}, function (writer, target) {\r\n    (0, psdWriter_1.writeUint8)(writer, target.iccUntaggedProfile ? 1 : 0);\r\n});\r\nhelpers_1.MOCK_HANDLERS && addHandler(1039, // ICC Profile\r\nfunction (// ICC Profile\r\ntarget) { return target._ir1039 !== undefined; }, function (reader, target, left) {\r\n    // TODO: this is raw bytes, just return as a byte array\r\n    LOG_MOCK_HANDLERS && console.log('image resource 1039', left());\r\n    target._ir1039 = (0, psdReader_1.readBytes)(reader, left());\r\n}, function (writer, target) {\r\n    (0, psdWriter_1.writeBytes)(writer, target._ir1039);\r\n});\r\naddHandler(1044, function (target) { return target.idsSeedNumber !== undefined; }, function (reader, target) { return target.idsSeedNumber = (0, psdReader_1.readUint32)(reader); }, function (writer, target) { return (0, psdWriter_1.writeUint32)(writer, target.idsSeedNumber); });\r\naddHandler(1036, function (target) { return target.thumbnail !== undefined || target.thumbnailRaw !== undefined; }, function (reader, target, left) {\r\n    var format = (0, psdReader_1.readUint32)(reader); // 1 = kJpegRGB, 0 = kRawRGB\r\n    var width = (0, psdReader_1.readUint32)(reader);\r\n    var height = (0, psdReader_1.readUint32)(reader);\r\n    (0, psdReader_1.readUint32)(reader); // widthBytes = (width * bits_per_pixel + 31) / 32 * 4.\r\n    (0, psdReader_1.readUint32)(reader); // totalSize = widthBytes * height * planes\r\n    (0, psdReader_1.readUint32)(reader); // sizeAfterCompression\r\n    var bitsPerPixel = (0, psdReader_1.readUint16)(reader); // 24\r\n    var planes = (0, psdReader_1.readUint16)(reader); // 1\r\n    if (format !== 1 || bitsPerPixel !== 24 || planes !== 1) {\r\n        reader.logMissingFeatures && reader.log(\"Invalid thumbnail data (format: \".concat(format, \", bitsPerPixel: \").concat(bitsPerPixel, \", planes: \").concat(planes, \")\"));\r\n        (0, psdReader_1.skipBytes)(reader, left());\r\n        return;\r\n    }\r\n    var size = left();\r\n    var data = (0, psdReader_1.readBytes)(reader, size);\r\n    if (reader.useRawThumbnail) {\r\n        target.thumbnailRaw = { width: width, height: height, data: data };\r\n    }\r\n    else if (data.byteLength) {\r\n        target.thumbnail = (0, helpers_1.createCanvasFromData)(data);\r\n    }\r\n}, function (writer, target) {\r\n    var _a;\r\n    var width = 0;\r\n    var height = 0;\r\n    var data = new Uint8Array(0);\r\n    if (target.thumbnailRaw) {\r\n        width = target.thumbnailRaw.width;\r\n        height = target.thumbnailRaw.height;\r\n        data = target.thumbnailRaw.data;\r\n    }\r\n    else {\r\n        try {\r\n            var dataUrl = (_a = target.thumbnail.toDataURL('image/jpeg', 1)) === null || _a === void 0 ? void 0 : _a.substring('data:image/jpeg;base64,'.length);\r\n            if (dataUrl) {\r\n                data = (0, base64_js_1.toByteArray)(dataUrl); // this sometimes fails for some reason, maybe some browser bugs\r\n                width = target.thumbnail.width;\r\n                height = target.thumbnail.height;\r\n            }\r\n        }\r\n        catch (_b) { }\r\n    }\r\n    var bitsPerPixel = 24;\r\n    var widthBytes = Math.floor((width * bitsPerPixel + 31) / 32) * 4;\r\n    var planes = 1;\r\n    var totalSize = widthBytes * height * planes;\r\n    var sizeAfterCompression = data.length;\r\n    (0, psdWriter_1.writeUint32)(writer, 1); // 1 = kJpegRGB\r\n    (0, psdWriter_1.writeUint32)(writer, width);\r\n    (0, psdWriter_1.writeUint32)(writer, height);\r\n    (0, psdWriter_1.writeUint32)(writer, widthBytes);\r\n    (0, psdWriter_1.writeUint32)(writer, totalSize);\r\n    (0, psdWriter_1.writeUint32)(writer, sizeAfterCompression);\r\n    (0, psdWriter_1.writeUint16)(writer, bitsPerPixel);\r\n    (0, psdWriter_1.writeUint16)(writer, planes);\r\n    (0, psdWriter_1.writeBytes)(writer, data);\r\n});\r\naddHandler(1057, function (target) { return target.versionInfo !== undefined; }, function (reader, target, left) {\r\n    var version = (0, psdReader_1.readUint32)(reader);\r\n    if (version !== 1)\r\n        throw new Error('Invalid versionInfo version');\r\n    target.versionInfo = {\r\n        hasRealMergedData: !!(0, psdReader_1.readUint8)(reader),\r\n        writerName: (0, psdReader_1.readUnicodeString)(reader),\r\n        readerName: (0, psdReader_1.readUnicodeString)(reader),\r\n        fileVersion: (0, psdReader_1.readUint32)(reader),\r\n    };\r\n    (0, psdReader_1.skipBytes)(reader, left());\r\n}, function (writer, target) {\r\n    var versionInfo = target.versionInfo;\r\n    (0, psdWriter_1.writeUint32)(writer, 1); // version\r\n    (0, psdWriter_1.writeUint8)(writer, versionInfo.hasRealMergedData ? 1 : 0);\r\n    (0, psdWriter_1.writeUnicodeString)(writer, versionInfo.writerName);\r\n    (0, psdWriter_1.writeUnicodeString)(writer, versionInfo.readerName);\r\n    (0, psdWriter_1.writeUint32)(writer, versionInfo.fileVersion);\r\n});\r\nhelpers_1.MOCK_HANDLERS && addHandler(1058, // EXIF data 1.\r\nfunction (// EXIF data 1.\r\ntarget) { return target._ir1058 !== undefined; }, function (reader, target, left) {\r\n    LOG_MOCK_HANDLERS && console.log('image resource 1058', left());\r\n    target._ir1058 = (0, psdReader_1.readBytes)(reader, left());\r\n}, function (writer, target) {\r\n    (0, psdWriter_1.writeBytes)(writer, target._ir1058);\r\n});\r\naddHandler(7000, function (target) { return target.imageReadyVariables !== undefined; }, function (reader, target, left) {\r\n    target.imageReadyVariables = readUtf8String(reader, left());\r\n}, function (writer, target) {\r\n    writeUtf8String(writer, target.imageReadyVariables);\r\n});\r\naddHandler(7001, function (target) { return target.imageReadyDataSets !== undefined; }, function (reader, target, left) {\r\n    target.imageReadyDataSets = readUtf8String(reader, left());\r\n}, function (writer, target) {\r\n    writeUtf8String(writer, target.imageReadyDataSets);\r\n});\r\naddHandler(1088, function (target) { return target.pathSelectionState !== undefined; }, function (reader, target, _left) {\r\n    var desc = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n    target.pathSelectionState = desc['null'];\r\n}, function (writer, target) {\r\n    var desc = { 'null': target.pathSelectionState };\r\n    (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'null', desc);\r\n});\r\nhelpers_1.MOCK_HANDLERS && addHandler(1025, function (target) { return target._ir1025 !== undefined; }, function (reader, target, left) {\r\n    LOG_MOCK_HANDLERS && console.log('image resource 1025', left());\r\n    target._ir1025 = (0, psdReader_1.readBytes)(reader, left());\r\n}, function (writer, target) {\r\n    (0, psdWriter_1.writeBytes)(writer, target._ir1025);\r\n});\r\nvar FrmD = (0, helpers_1.createEnum)('FrmD', '', {\r\n    auto: 'Auto',\r\n    none: 'None',\r\n    dispose: 'Disp',\r\n});\r\naddHandler(4000, // Plug-In resource(s)\r\nfunction (// Plug-In resource(s)\r\ntarget) { return target.animations !== undefined; }, function (reader, target, left) {\r\n    var key = (0, psdReader_1.readSignature)(reader);\r\n    if (key === 'mani') {\r\n        (0, psdReader_1.checkSignature)(reader, 'IRFR');\r\n        (0, psdReader_1.readSection)(reader, 1, function (left) {\r\n            var _loop_1 = function () {\r\n                (0, psdReader_1.checkSignature)(reader, '8BIM');\r\n                var key_1 = (0, psdReader_1.readSignature)(reader);\r\n                (0, psdReader_1.readSection)(reader, 1, function (left) {\r\n                    if (key_1 === 'AnDs') {\r\n                        var desc = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n                        target.animations = {\r\n                            // desc.AFSt ???\r\n                            frames: desc.FrIn.map(function (x) { return ({\r\n                                id: x.FrID,\r\n                                delay: (x.FrDl || 0) / 100,\r\n                                dispose: x.FrDs ? FrmD.decode(x.FrDs) : 'auto', // missing == auto\r\n                                // x.FrGA ???\r\n                            }); }),\r\n                            animations: desc.FSts.map(function (x) { return ({\r\n                                id: x.FsID,\r\n                                frames: x.FsFr,\r\n                                repeats: x.LCnt,\r\n                                activeFrame: x.AFrm || 0,\r\n                            }); }),\r\n                        };\r\n                        // console.log('#4000 AnDs', require('util').inspect(desc, false, 99, true));\r\n                        // console.log('#4000 AnDs:result', require('util').inspect(target.animations, false, 99, true));\r\n                    }\r\n                    else if (key_1 === 'Roll') {\r\n                        var bytes = (0, psdReader_1.readBytes)(reader, left());\r\n                        reader.logDevFeatures && reader.log('#4000 Roll', bytes);\r\n                    }\r\n                    else {\r\n                        reader.logMissingFeatures && reader.log('Unhandled subsection in #4000', key_1);\r\n                    }\r\n                });\r\n            };\r\n            while (left() > 0) {\r\n                _loop_1();\r\n            }\r\n        });\r\n    }\r\n    else if (key === 'mopt') {\r\n        var bytes = (0, psdReader_1.readBytes)(reader, left());\r\n        reader.logDevFeatures && reader.log('#4000 mopt', bytes);\r\n    }\r\n    else {\r\n        reader.logMissingFeatures && reader.log('Unhandled key in #4000:', key);\r\n    }\r\n}, function (writer, target) {\r\n    if (target.animations) {\r\n        (0, psdWriter_1.writeSignature)(writer, 'mani');\r\n        (0, psdWriter_1.writeSignature)(writer, 'IRFR');\r\n        (0, psdWriter_1.writeSection)(writer, 1, function () {\r\n            (0, psdWriter_1.writeSignature)(writer, '8BIM');\r\n            (0, psdWriter_1.writeSignature)(writer, 'AnDs');\r\n            (0, psdWriter_1.writeSection)(writer, 1, function () {\r\n                var desc = {\r\n                    // AFSt: 0, // ???\r\n                    FrIn: [],\r\n                    FSts: [],\r\n                };\r\n                for (var i = 0; i < target.animations.frames.length; i++) {\r\n                    var f = target.animations.frames[i];\r\n                    var frame = {\r\n                        FrID: f.id,\r\n                    };\r\n                    if (f.delay)\r\n                        frame.FrDl = (f.delay * 100) | 0;\r\n                    frame.FrDs = FrmD.encode(f.dispose);\r\n                    // if (i === 0) frame.FrGA = 30; // ???\r\n                    desc.FrIn.push(frame);\r\n                }\r\n                for (var i = 0; i < target.animations.animations.length; i++) {\r\n                    var a = target.animations.animations[i];\r\n                    var anim = {\r\n                        FsID: a.id,\r\n                        AFrm: a.activeFrame | 0,\r\n                        FsFr: a.frames,\r\n                        LCnt: a.repeats | 0,\r\n                    };\r\n                    desc.FSts.push(anim);\r\n                }\r\n                (0, descriptor_1.writeVersionAndDescriptor)(writer, '', 'null', desc);\r\n            });\r\n            // writeSignature(writer, '8BIM');\r\n            // writeSignature(writer, 'Roll');\r\n            // writeSection(writer, 1, () => {\r\n            // \twriteZeros(writer, 8);\r\n            // });\r\n        });\r\n    }\r\n});\r\n// TODO: Unfinished\r\nhelpers_1.MOCK_HANDLERS && addHandler(4001, // Plug-In resource(s)\r\nfunction (// Plug-In resource(s)\r\ntarget) { return target._ir4001 !== undefined; }, function (reader, target, left) {\r\n    if (helpers_1.MOCK_HANDLERS) {\r\n        LOG_MOCK_HANDLERS && console.log('image resource 4001', left());\r\n        target._ir4001 = (0, psdReader_1.readBytes)(reader, left());\r\n        return;\r\n    }\r\n    var key = (0, psdReader_1.readSignature)(reader);\r\n    if (key === 'mfri') {\r\n        var version = (0, psdReader_1.readUint32)(reader);\r\n        if (version !== 2)\r\n            throw new Error('Invalid mfri version');\r\n        var length_1 = (0, psdReader_1.readUint32)(reader);\r\n        var bytes = (0, psdReader_1.readBytes)(reader, length_1);\r\n        reader.logDevFeatures && reader.log('mfri', bytes);\r\n    }\r\n    else if (key === 'mset') {\r\n        var desc = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n        reader.logDevFeatures && reader.log('mset', desc);\r\n    }\r\n    else {\r\n        reader.logMissingFeatures && reader.log('Unhandled key in #4001', key);\r\n    }\r\n}, function (writer, target) {\r\n    (0, psdWriter_1.writeBytes)(writer, target._ir4001);\r\n});\r\n// TODO: Unfinished\r\nhelpers_1.MOCK_HANDLERS && addHandler(4002, // Plug-In resource(s)\r\nfunction (// Plug-In resource(s)\r\ntarget) { return target._ir4002 !== undefined; }, function (reader, target, left) {\r\n    LOG_MOCK_HANDLERS && console.log('image resource 4002', left());\r\n    target._ir4002 = (0, psdReader_1.readBytes)(reader, left());\r\n}, function (writer, target) {\r\n    (0, psdWriter_1.writeBytes)(writer, target._ir4002);\r\n});\r\n//# sourceMappingURL=imageResources.js.map","import { toByteArray } from 'base64-js';\nimport { BlendMode, ImageResources, RenderingIntent } from './psd';\nimport { PsdReader, readUnicodeString, readUint32, readUint16, readUint8, readFloat64, readBytes, skipBytes, readFloat32, readInt16, readFixedPoint32, readSignature, checkSignature, readSection, readColor, readInt32 } from './psdReader';\nimport { PsdWriter, writeUnicodeString, writeUint32, writeUint8, writeFloat64, writeUint16, writeBytes, writeInt16, writeFloat32, writeFixedPoint32, writeUnicodeStringWithPadding, writeColor, writeSignature, writeSection, writeInt32, } from './psdWriter';\nimport { createCanvasFromData, createEnum, MOCK_HANDLERS } from './helpers';\nimport { decodeString, encodeString } from './utf8';\nimport { ESliceBGColorType, ESliceHorzAlign, ESliceOrigin, ESliceType, ESliceVertAlign, frac, FractionDescriptor, parseTrackList, readVersionAndDescriptor, serializeTrackList, TimelineTrackDescriptor, TimeScopeDescriptor, writeVersionAndDescriptor } from './descriptor';\n\nexport interface InternalImageResources extends ImageResources {\n\tlayersGroup?: number[];\n\tlayerGroupsEnabledId?: number[];\n}\n\nexport interface ResourceHandler {\n\tkey: number;\n\thas: (target: InternalImageResources) => boolean | number;\n\tread: (reader: PsdReader, target: InternalImageResources, left: () => number) => void;\n\twrite: (writer: PsdWriter, target: InternalImageResources, index: number) => void;\n}\n\nexport const resourceHandlers: ResourceHandler[] = [];\nexport const resourceHandlersMap: { [key: number]: ResourceHandler } = {};\n\nfunction addHandler(\n\tkey: number,\n\thas: (target: InternalImageResources) => boolean | number,\n\tread: (reader: PsdReader, target: InternalImageResources, left: () => number) => void,\n\twrite: (writer: PsdWriter, target: InternalImageResources, index: number) => void,\n) {\n\tconst handler: ResourceHandler = { key, has, read, write };\n\tresourceHandlers.push(handler);\n\tresourceHandlersMap[handler.key] = handler;\n}\n\nconst LOG_MOCK_HANDLERS = false;\nconst RESOLUTION_UNITS = [undefined, 'PPI', 'PPCM'];\nconst MEASUREMENT_UNITS = [undefined, 'Inches', 'Centimeters', 'Points', 'Picas', 'Columns'];\nconst hex = '0123456789abcdef';\n\nfunction charToNibble(code: number) {\n\treturn code <= 57 ? code - 48 : code - 87;\n}\n\nfunction byteAt(value: string, index: number) {\n\treturn (charToNibble(value.charCodeAt(index)) << 4) | charToNibble(value.charCodeAt(index + 1));\n}\n\nfunction readUtf8String(reader: PsdReader, length: number) {\n\tconst buffer = readBytes(reader, length);\n\treturn decodeString(buffer);\n}\n\nfunction writeUtf8String(writer: PsdWriter, value: string) {\n\tconst buffer = encodeString(value);\n\twriteBytes(writer, buffer);\n}\n\nfunction readEncodedString(reader: PsdReader) {\n\tconst length = readUint8(reader);\n\tconst buffer = readBytes(reader, length);\n\n\tlet notAscii = false;\n\tfor (let i = 0; i < buffer.byteLength; i++) {\n\t\tif (buffer[i] & 0x80) {\n\t\t\tnotAscii = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (notAscii) {\n\t\tconst decoder = new TextDecoder('gbk');\n\t\treturn decoder.decode(buffer)\n\t} else {\n\t\treturn decodeString(buffer);\n\t}\n}\n\nfunction writeEncodedString(writer: PsdWriter, value: string) {\n\tlet ascii = '';\n\n\tfor (let i = 0, code = value.codePointAt(i++); code !== undefined; code = value.codePointAt(i++)) {\n\t\tascii += code > 0x7f ? '?' : String.fromCodePoint(code);\n\t}\n\n\tconst buffer = encodeString(ascii);\n\twriteUint8(writer, buffer.byteLength);\n\twriteBytes(writer, buffer);\n}\n\nMOCK_HANDLERS && addHandler(\n\t1028, // IPTC-NAA record\n\ttarget => (target as any)._ir1028 !== undefined,\n\t(reader, target, left) => {\n\t\tLOG_MOCK_HANDLERS && console.log('image resource 1028', left());\n\t\t(target as any)._ir1028 = readBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\twriteBytes(writer, (target as any)._ir1028);\n\t},\n);\n\naddHandler(\n\t1061,\n\ttarget => target.captionDigest !== undefined,\n\t(reader, target) => {\n\t\tlet captionDigest = '';\n\n\t\tfor (let i = 0; i < 16; i++) {\n\t\t\tconst byte = readUint8(reader);\n\t\t\tcaptionDigest += hex[byte >> 4];\n\t\t\tcaptionDigest += hex[byte & 0xf];\n\t\t}\n\n\t\ttarget.captionDigest = captionDigest;\n\t},\n\t(writer, target) => {\n\t\tfor (let i = 0; i < 16; i++) {\n\t\t\twriteUint8(writer, byteAt(target.captionDigest!, i * 2));\n\t\t}\n\t},\n);\n\naddHandler(\n\t1060,\n\ttarget => target.xmpMetadata !== undefined,\n\t(reader, target, left) => {\n\t\ttarget.xmpMetadata = readUtf8String(reader, left());\n\t},\n\t(writer, target) => {\n\t\twriteUtf8String(writer, target.xmpMetadata!);\n\t},\n);\n\nconst Inte = createEnum<RenderingIntent>('Inte', 'perceptual', {\n\t'perceptual': 'Img ',\n\t'saturation': 'Grp ',\n\t'relative colorimetric': 'Clrm',\n\t'absolute colorimetric': 'AClr',\n});\n\ninterface PrintInformationDescriptor {\n\t'Nm  '?: string;\n\tClrS?: string;\n\tPstS?: boolean;\n\tMpBl?: boolean;\n\tInte?: string;\n\thardProof?: boolean;\n\tprintSixteenBit?: boolean;\n\tprinterName?: string;\n\tprintProofSetup?: {\n\t\tBltn: string;\n\t} | {\n\t\tprofile: string;\n\t\tInte: string;\n\t\tMpBl: boolean;\n\t\tpaperWhite: boolean;\n\t};\n}\n\naddHandler(\n\t1082,\n\ttarget => target.printInformation !== undefined,\n\t(reader, target) => {\n\t\tconst desc: PrintInformationDescriptor = readVersionAndDescriptor(reader);\n\n\t\ttarget.printInformation = {\n\t\t\tprinterName: desc.printerName || '',\n\t\t\trenderingIntent: Inte.decode(desc.Inte ?? 'Inte.Img '),\n\t\t};\n\n\t\tconst info = target.printInformation;\n\n\t\tif (desc.PstS !== undefined) info.printerManagesColors = desc.PstS;\n\t\tif (desc['Nm  '] !== undefined) info.printerProfile = desc['Nm  '];\n\t\tif (desc.MpBl !== undefined) info.blackPointCompensation = desc.MpBl;\n\t\tif (desc.printSixteenBit !== undefined) info.printSixteenBit = desc.printSixteenBit;\n\t\tif (desc.hardProof !== undefined) info.hardProof = desc.hardProof;\n\t\tif (desc.printProofSetup) {\n\t\t\tif ('Bltn' in desc.printProofSetup) {\n\t\t\t\tinfo.proofSetup = { builtin: desc.printProofSetup.Bltn.split('.')[1] };\n\t\t\t} else {\n\t\t\t\tinfo.proofSetup = {\n\t\t\t\t\tprofile: desc.printProofSetup.profile,\n\t\t\t\t\trenderingIntent: Inte.decode(desc.printProofSetup.Inte ?? 'Inte.Img '),\n\t\t\t\t\tblackPointCompensation: !!desc.printProofSetup.MpBl,\n\t\t\t\t\tpaperWhite: !!desc.printProofSetup.paperWhite,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t},\n\t(writer, target) => {\n\t\tconst info = target.printInformation!;\n\t\tconst desc: PrintInformationDescriptor = {};\n\n\t\tif (info.printerManagesColors) {\n\t\t\tdesc.PstS = true;\n\t\t} else {\n\t\t\tif (info.hardProof !== undefined) desc.hardProof = !!info.hardProof;\n\t\t\tdesc.ClrS = 'ClrS.RGBC'; // TODO: ???\n\t\t\tdesc['Nm  '] = info.printerProfile ?? 'CIE RGB';\n\t\t}\n\n\t\tdesc.Inte = Inte.encode(info.renderingIntent);\n\n\t\tif (!info.printerManagesColors) desc.MpBl = !!info.blackPointCompensation;\n\n\t\tdesc.printSixteenBit = !!info.printSixteenBit;\n\t\tdesc.printerName = info.printerName || '';\n\n\t\tif (info.proofSetup && 'profile' in info.proofSetup) {\n\t\t\tdesc.printProofSetup = {\n\t\t\t\tprofile: info.proofSetup.profile || '',\n\t\t\t\tInte: Inte.encode(info.proofSetup.renderingIntent),\n\t\t\t\tMpBl: !!info.proofSetup.blackPointCompensation,\n\t\t\t\tpaperWhite: !!info.proofSetup.paperWhite,\n\t\t\t};\n\t\t} else {\n\t\t\tdesc.printProofSetup = {\n\t\t\t\tBltn: info.proofSetup?.builtin ? `builtinProof.${info.proofSetup.builtin}` : 'builtinProof.proofCMYK',\n\t\t\t};\n\t\t}\n\n\t\twriteVersionAndDescriptor(writer, '', 'printOutput', desc);\n\t},\n);\n\nMOCK_HANDLERS && addHandler(\n\t1083, // Print style\n\ttarget => (target as any)._ir1083 !== undefined,\n\t(reader, target, left) => {\n\t\tLOG_MOCK_HANDLERS && console.log('image resource 1083', left());\n\t\t(target as any)._ir1083 = readBytes(reader, left());\n\n\t\t// TODO:\n\t\t// const desc = readVersionAndDescriptor(reader);\n\t\t// console.log('1083', require('util').inspect(desc, false, 99, true));\n\t},\n\t(writer, target) => {\n\t\twriteBytes(writer, (target as any)._ir1083);\n\t},\n);\n\naddHandler(\n\t1005,\n\ttarget => target.resolutionInfo !== undefined,\n\t(reader, target) => {\n\t\tconst horizontalResolution = readFixedPoint32(reader);\n\t\tconst horizontalResolutionUnit = readUint16(reader);\n\t\tconst widthUnit = readUint16(reader);\n\t\tconst verticalResolution = readFixedPoint32(reader);\n\t\tconst verticalResolutionUnit = readUint16(reader);\n\t\tconst heightUnit = readUint16(reader);\n\n\t\ttarget.resolutionInfo = {\n\t\t\thorizontalResolution,\n\t\t\thorizontalResolutionUnit: RESOLUTION_UNITS[horizontalResolutionUnit] || 'PPI' as any,\n\t\t\twidthUnit: MEASUREMENT_UNITS[widthUnit] || 'Inches' as any,\n\t\t\tverticalResolution,\n\t\t\tverticalResolutionUnit: RESOLUTION_UNITS[verticalResolutionUnit] || 'PPI' as any,\n\t\t\theightUnit: MEASUREMENT_UNITS[heightUnit] || 'Inches' as any,\n\t\t};\n\t},\n\t(writer, target) => {\n\t\tconst info = target.resolutionInfo!;\n\n\t\twriteFixedPoint32(writer, info.horizontalResolution || 0);\n\t\twriteUint16(writer, Math.max(1, RESOLUTION_UNITS.indexOf(info.horizontalResolutionUnit)));\n\t\twriteUint16(writer, Math.max(1, MEASUREMENT_UNITS.indexOf(info.widthUnit)));\n\t\twriteFixedPoint32(writer, info.verticalResolution || 0);\n\t\twriteUint16(writer, Math.max(1, RESOLUTION_UNITS.indexOf(info.verticalResolutionUnit)));\n\t\twriteUint16(writer, Math.max(1, MEASUREMENT_UNITS.indexOf(info.heightUnit)));\n\t},\n);\n\nconst printScaleStyles = ['centered', 'size to fit', 'user defined'];\n\naddHandler(\n\t1062,\n\ttarget => target.printScale !== undefined,\n\t(reader, target) => {\n\t\ttarget.printScale = {\n\t\t\tstyle: printScaleStyles[readInt16(reader)] as any,\n\t\t\tx: readFloat32(reader),\n\t\t\ty: readFloat32(reader),\n\t\t\tscale: readFloat32(reader),\n\t\t};\n\t},\n\t(writer, target) => {\n\t\tconst { style, x, y, scale } = target.printScale!;\n\t\twriteInt16(writer, Math.max(0, printScaleStyles.indexOf(style!)));\n\t\twriteFloat32(writer, x || 0);\n\t\twriteFloat32(writer, y || 0);\n\t\twriteFloat32(writer, scale || 0);\n\t},\n);\n\naddHandler(\n\t1006,\n\ttarget => target.alphaChannelNames !== undefined,\n\t(reader, target, left) => {\n\t\tif (!target.alphaChannelNames) { // skip if the unicode versions are already read\n\t\t\ttarget.alphaChannelNames = [];\n\n\t\t\twhile (left() > 0) {\n\t\t\t\tconst value = readEncodedString(reader);\n\t\t\t\t// const value = readPascalString(reader, 1);\n\t\t\t\ttarget.alphaChannelNames.push(value);\n\t\t\t}\n\t\t} else {\n\t\t\tskipBytes(reader, left());\n\t\t}\n\t},\n\t(writer, target) => {\n\t\tfor (const name of target.alphaChannelNames!) {\n\t\t\twriteEncodedString(writer, name);\n\t\t\t// writePascalString(writer, name, 1);\n\t\t}\n\t},\n);\n\naddHandler(\n\t1045,\n\ttarget => target.alphaChannelNames !== undefined,\n\t(reader, target, left) => {\n\t\ttarget.alphaChannelNames = [];\n\n\t\twhile (left() > 0) {\n\t\t\ttarget.alphaChannelNames.push(readUnicodeString(reader));\n\t\t}\n\t},\n\t(writer, target) => {\n\t\tfor (const name of target.alphaChannelNames!) {\n\t\t\twriteUnicodeStringWithPadding(writer, name);\n\t\t}\n\t},\n);\n\nMOCK_HANDLERS && addHandler(\n\t1077,\n\ttarget => (target as any)._ir1077 !== undefined,\n\t(reader, target, left) => {\n\t\tLOG_MOCK_HANDLERS && console.log('image resource 1077', left());\n\t\t(target as any)._ir1077 = readBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\twriteBytes(writer, (target as any)._ir1077);\n\t},\n);\n\naddHandler(\n\t1053,\n\ttarget => target.alphaIdentifiers !== undefined,\n\t(reader, target, left) => {\n\t\ttarget.alphaIdentifiers = [];\n\n\t\twhile (left() >= 4) {\n\t\t\ttarget.alphaIdentifiers.push(readUint32(reader));\n\t\t}\n\t},\n\t(writer, target) => {\n\t\tfor (const id of target.alphaIdentifiers!) {\n\t\t\twriteUint32(writer, id);\n\t\t}\n\t},\n);\n\naddHandler(\n\t1010,\n\ttarget => target.backgroundColor !== undefined,\n\t(reader, target) => target.backgroundColor = readColor(reader),\n\t(writer, target) => writeColor(writer, target.backgroundColor!),\n);\n\naddHandler(\n\t1037,\n\ttarget => target.globalAngle !== undefined,\n\t(reader, target) => target.globalAngle = readInt32(reader),\n\t(writer, target) => writeInt32(writer, target.globalAngle!),\n);\n\naddHandler(\n\t1049,\n\ttarget => target.globalAltitude !== undefined,\n\t(reader, target) => target.globalAltitude = readUint32(reader),\n\t(writer, target) => writeUint32(writer, target.globalAltitude!),\n);\n\naddHandler(\n\t1011,\n\ttarget => target.printFlags !== undefined,\n\t(reader, target) => {\n\t\ttarget.printFlags = {\n\t\t\tlabels: !!readUint8(reader),\n\t\t\tcropMarks: !!readUint8(reader),\n\t\t\tcolorBars: !!readUint8(reader),\n\t\t\tregistrationMarks: !!readUint8(reader),\n\t\t\tnegative: !!readUint8(reader),\n\t\t\tflip: !!readUint8(reader),\n\t\t\tinterpolate: !!readUint8(reader),\n\t\t\tcaption: !!readUint8(reader),\n\t\t\tprintFlags: !!readUint8(reader),\n\t\t};\n\t},\n\t(writer, target) => {\n\t\tconst flags = target.printFlags!;\n\t\twriteUint8(writer, flags.labels ? 1 : 0);\n\t\twriteUint8(writer, flags.cropMarks ? 1 : 0);\n\t\twriteUint8(writer, flags.colorBars ? 1 : 0);\n\t\twriteUint8(writer, flags.registrationMarks ? 1 : 0);\n\t\twriteUint8(writer, flags.negative ? 1 : 0);\n\t\twriteUint8(writer, flags.flip ? 1 : 0);\n\t\twriteUint8(writer, flags.interpolate ? 1 : 0);\n\t\twriteUint8(writer, flags.caption ? 1 : 0);\n\t\twriteUint8(writer, flags.printFlags ? 1 : 0);\n\t},\n);\n\nMOCK_HANDLERS && addHandler(\n\t10000, // Print flags\n\ttarget => (target as any)._ir10000 !== undefined,\n\t(reader, target, left) => {\n\t\tLOG_MOCK_HANDLERS && console.log('image resource 10000', left());\n\t\t(target as any)._ir10000 = readBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\twriteBytes(writer, (target as any)._ir10000);\n\t},\n);\n\nMOCK_HANDLERS && addHandler(\n\t1013, // Color halftoning\n\ttarget => (target as any)._ir1013 !== undefined,\n\t(reader, target, left) => {\n\t\tLOG_MOCK_HANDLERS && console.log('image resource 1013', left());\n\t\t(target as any)._ir1013 = readBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\twriteBytes(writer, (target as any)._ir1013);\n\t},\n);\n\nMOCK_HANDLERS && addHandler(\n\t1016, // Color transfer functions\n\ttarget => (target as any)._ir1016 !== undefined,\n\t(reader, target, left) => {\n\t\tLOG_MOCK_HANDLERS && console.log('image resource 1016', left());\n\t\t(target as any)._ir1016 = readBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\twriteBytes(writer, (target as any)._ir1016);\n\t},\n);\n\ninterface CountInformationDesc {\n\tVrsn: 1;\n\tcountGroupList: {\n\t\t'Rd  ': number; // 0-255\n\t\t'Grn ': number;\n\t\t'Bl  ': number;\n\t\t'Nm  ': string;\n\t\t'Rds ': number; // Marker size\n\t\tfontSize: number;\n\t\tVsbl: boolean;\n\t\tcountObjectList: {\n\t\t\t'X   ': number;\n\t\t\t'Y   ': number;\n\t\t}[];\n\t}[];\n}\n\naddHandler(\n\t1080, // Count Information\n\ttarget => target.countInformation !== undefined,\n\t(reader, target) => {\n\t\tconst desc = readVersionAndDescriptor(reader) as CountInformationDesc;\n\t\ttarget.countInformation = desc.countGroupList.map(g => ({\n\t\t\tcolor: { r: g['Rd  '], g: g['Grn '], b: g['Bl  '] },\n\t\t\tname: g['Nm  '],\n\t\t\tsize: g['Rds '],\n\t\t\tfontSize: g.fontSize,\n\t\t\tvisible: g.Vsbl,\n\t\t\tpoints: g.countObjectList.map(p => ({ x: p['X   '], y: p['Y   '] })),\n\t\t}));\n\t},\n\t(writer, target) => {\n\t\tconst desc: CountInformationDesc = {\n\t\t\tVrsn: 1,\n\t\t\tcountGroupList: target.countInformation!.map(g => ({\n\t\t\t\t'Rd  ': g.color.r,\n\t\t\t\t'Grn ': g.color.g,\n\t\t\t\t'Bl  ': g.color.b,\n\t\t\t\t'Nm  ': g.name,\n\t\t\t\t'Rds ': g.size,\n\t\t\t\tfontSize: g.fontSize,\n\t\t\t\tVsbl: g.visible,\n\t\t\t\tcountObjectList: g.points.map(p => ({ 'X   ': p.x, 'Y   ': p.y })),\n\t\t\t})),\n\t\t};\n\t\twriteVersionAndDescriptor(writer, '', 'Cnt ', desc);\n\t},\n);\n\naddHandler(\n\t1024,\n\ttarget => target.layerState !== undefined,\n\t(reader, target) => target.layerState = readUint16(reader),\n\t(writer, target) => writeUint16(writer, target.layerState!),\n);\n\naddHandler(\n\t1026,\n\ttarget => target.layersGroup !== undefined,\n\t(reader, target, left) => {\n\t\ttarget.layersGroup = [];\n\n\t\twhile (left() > 0) {\n\t\t\ttarget.layersGroup.push(readUint16(reader));\n\t\t}\n\t},\n\t(writer, target) => {\n\t\tfor (const g of target.layersGroup!) {\n\t\t\twriteUint16(writer, g);\n\t\t}\n\t},\n);\n\naddHandler(\n\t1072,\n\ttarget => target.layerGroupsEnabledId !== undefined,\n\t(reader, target, left) => {\n\t\ttarget.layerGroupsEnabledId = [];\n\n\t\twhile (left() > 0) {\n\t\t\ttarget.layerGroupsEnabledId.push(readUint8(reader));\n\t\t}\n\t},\n\t(writer, target) => {\n\t\tfor (const id of target.layerGroupsEnabledId!) {\n\t\t\twriteUint8(writer, id);\n\t\t}\n\t},\n);\n\naddHandler(\n\t1069,\n\ttarget => target.layerSelectionIds !== undefined,\n\t(reader, target) => {\n\t\tlet count = readUint16(reader);\n\t\ttarget.layerSelectionIds = [];\n\n\t\twhile (count--) {\n\t\t\ttarget.layerSelectionIds.push(readUint32(reader));\n\t\t}\n\t},\n\t(writer, target) => {\n\t\twriteUint16(writer, target.layerSelectionIds!.length);\n\n\t\tfor (const id of target.layerSelectionIds!) {\n\t\t\twriteUint32(writer, id);\n\t\t}\n\t},\n);\n\naddHandler(\n\t1032,\n\ttarget => target.gridAndGuidesInformation !== undefined,\n\t(reader, target) => {\n\t\tconst version = readUint32(reader);\n\t\tconst horizontal = readUint32(reader);\n\t\tconst vertical = readUint32(reader);\n\t\tconst count = readUint32(reader);\n\n\t\tif (version !== 1) throw new Error(`Invalid 1032 resource version: ${version}`);\n\n\t\ttarget.gridAndGuidesInformation = {\n\t\t\tgrid: { horizontal, vertical },\n\t\t\tguides: [],\n\t\t};\n\n\t\tfor (let i = 0; i < count; i++) {\n\t\t\ttarget.gridAndGuidesInformation.guides!.push({\n\t\t\t\tlocation: readUint32(reader) / 32,\n\t\t\t\tdirection: readUint8(reader) ? 'horizontal' : 'vertical'\n\t\t\t});\n\t\t}\n\t},\n\t(writer, target) => {\n\t\tconst info = target.gridAndGuidesInformation!;\n\t\tconst grid = info.grid || { horizontal: 18 * 32, vertical: 18 * 32 };\n\t\tconst guides = info.guides || [];\n\n\t\twriteUint32(writer, 1);\n\t\twriteUint32(writer, grid.horizontal);\n\t\twriteUint32(writer, grid.vertical);\n\t\twriteUint32(writer, guides.length);\n\n\t\tfor (const g of guides) {\n\t\t\twriteUint32(writer, g.location * 32);\n\t\t\twriteUint8(writer, g.direction === 'horizontal' ? 1 : 0);\n\t\t}\n\t},\n);\n\ninterface LayerCompsDescriptor {\n\tlist: {\n\t\t_classID: 'Comp';\n\t\t'Nm  ': string;\n\t\tcompID: number;\n\t\tcapturedInfo: number;\n\t\tcomment?: string;\n\t}[];\n\tlastAppliedComp?: number;\n}\n\naddHandler(\n\t1065, // Layer Comps\n\ttarget => target.layerComps !== undefined,\n\t(reader, target) => {\n\t\tconst desc = readVersionAndDescriptor(reader, true) as LayerCompsDescriptor;\n\t\t// console.log('CompList', require('util').inspect(desc, false, 99, true));\n\n\t\ttarget.layerComps = { list: [] };\n\n\t\tfor (const item of desc.list) {\n\t\t\ttarget.layerComps.list.push({\n\t\t\t\tid: item.compID,\n\t\t\t\tname: item['Nm  '],\n\t\t\t\tcapturedInfo: item.capturedInfo,\n\t\t\t});\n\n\t\t\tif ('comment' in item) target.layerComps.list[target.layerComps.list.length - 1].comment = item.comment;\n\t\t}\n\n\t\tif ('lastAppliedComp' in desc) target.layerComps.lastApplied = desc.lastAppliedComp;\n\t},\n\t(writer, target) => {\n\t\tconst layerComps = target.layerComps!;\n\t\tconst desc: LayerCompsDescriptor = { list: [] };\n\n\t\tfor (const item of layerComps.list) {\n\t\t\tconst t: LayerCompsDescriptor['list'][0] = {} as any;\n\t\t\tt._classID = 'Comp';\n\t\t\tt['Nm  '] = item.name;\n\t\t\tif ('comment' in item) t.comment = item.comment;\n\t\t\tt.compID = item.id;\n\t\t\tt.capturedInfo = item.capturedInfo;\n\t\t\tdesc.list.push(t);\n\t\t}\n\n\t\tif ('lastApplied' in layerComps) desc.lastAppliedComp = layerComps.lastApplied;\n\n\t\t// console.log('CompList', require('util').inspect(desc, false, 99, true));\n\t\twriteVersionAndDescriptor(writer, '', 'CompList', desc);\n\t},\n);\n\nMOCK_HANDLERS && addHandler(\n\t1092, // ???\n\ttarget => (target as any)._ir1092 !== undefined,\n\t(reader, target, left) => {\n\t\tLOG_MOCK_HANDLERS && console.log('image resource 1092', left());\n\t\t// 16 bytes, seems to be 4 integers\n\t\t(target as any)._ir1092 = readBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\twriteBytes(writer, (target as any)._ir1092);\n\t},\n);\n\ninterface OnionSkinsDescriptor {\n\tVrsn: 1;\n\tenab: boolean;\n\tnumBefore: number;\n\tnumAfter: number;\n\tSpcn: number;\n\tminOpacity: number;\n\tmaxOpacity: number;\n\tBlnM: number;\n}\n\n// 0 - normal, 7 - multiply, 8 - screen, 23 - difference\nconst onionSkinsBlendModes: (BlendMode | undefined)[] = [\n\t'normal', undefined, undefined, undefined, undefined, undefined, undefined, 'multiply',\n\t'screen', undefined, undefined, undefined, undefined, undefined, undefined, undefined,\n\tundefined, undefined, undefined, undefined, undefined, undefined, undefined, 'difference',\n];\n\naddHandler(\n\t1078, // Onion Skins\n\ttarget => target.onionSkins !== undefined,\n\t(reader, target) => {\n\t\tconst desc = readVersionAndDescriptor(reader) as OnionSkinsDescriptor;\n\t\t// console.log('1078', require('util').inspect(desc, false, 99, true));\n\n\t\ttarget.onionSkins = {\n\t\t\tenabled: desc.enab,\n\t\t\tframesBefore: desc.numBefore,\n\t\t\tframesAfter: desc.numAfter,\n\t\t\tframeSpacing: desc.Spcn,\n\t\t\tminOpacity: desc.minOpacity / 100,\n\t\t\tmaxOpacity: desc.maxOpacity / 100,\n\t\t\tblendMode: onionSkinsBlendModes[desc.BlnM] || 'normal',\n\t\t};\n\t},\n\t(writer, target) => {\n\t\tconst onionSkins = target.onionSkins!;\n\t\tconst desc: OnionSkinsDescriptor = {\n\t\t\tVrsn: 1,\n\t\t\tenab: onionSkins.enabled,\n\t\t\tnumBefore: onionSkins.framesBefore,\n\t\t\tnumAfter: onionSkins.framesAfter,\n\t\t\tSpcn: onionSkins.frameSpacing,\n\t\t\tminOpacity: (onionSkins.minOpacity * 100) | 0,\n\t\t\tmaxOpacity: (onionSkins.maxOpacity * 100) | 0,\n\t\t\tBlnM: Math.max(0, onionSkinsBlendModes.indexOf(onionSkins.blendMode)),\n\t\t};\n\n\t\twriteVersionAndDescriptor(writer, '', 'null', desc);\n\t},\n);\n\ninterface TimelineAudioClipDescriptor {\n\tclipID: string;\n\ttimeScope: TimeScopeDescriptor;\n\tframeReader: {\n\t\tframeReaderType: number;\n\t\tdescVersion: 1;\n\t\t'Lnk ': {\n\t\t\tdescVersion: 1;\n\t\t\t'Nm  ': string;\n\t\t\tfullPath: string;\n\t\t\trelPath: string;\n\t\t},\n\t\tmediaDescriptor: string;\n\t},\n\tmuted: boolean;\n\taudioLevel: number;\n}\n\ninterface TimelineAudioClipGroupDescriptor {\n\tgroupID: string;\n\tmuted: boolean;\n\taudioClipList: TimelineAudioClipDescriptor[];\n}\n\ninterface TimelineInformationDescriptor {\n\tVrsn: 1;\n\tenab: boolean;\n\tframeStep: FractionDescriptor;\n\tframeRate: number;\n\ttime: FractionDescriptor;\n\tduration: FractionDescriptor;\n\tworkInTime: FractionDescriptor;\n\tworkOutTime: FractionDescriptor;\n\tLCnt: number;\n\tglobalTrackList: TimelineTrackDescriptor[];\n\taudioClipGroupList?: {\n\t\taudioClipGroupList?: TimelineAudioClipGroupDescriptor[];\n\t},\n\thasMotion: boolean;\n}\n\naddHandler(\n\t1075, // Timeline Information\n\ttarget => target.timelineInformation !== undefined,\n\t(reader, target) => {\n\t\tconst desc = readVersionAndDescriptor(reader) as TimelineInformationDescriptor;\n\n\t\ttarget.timelineInformation = {\n\t\t\tenabled: desc.enab,\n\t\t\tframeStep: frac(desc.frameStep),\n\t\t\tframeRate: desc.frameRate,\n\t\t\ttime: frac(desc.time),\n\t\t\tduration: frac(desc.duration),\n\t\t\tworkInTime: frac(desc.workInTime),\n\t\t\tworkOutTime: frac(desc.workOutTime),\n\t\t\trepeats: desc.LCnt,\n\t\t\thasMotion: desc.hasMotion,\n\t\t\tglobalTracks: parseTrackList(desc.globalTrackList, !!reader.logMissingFeatures),\n\t\t};\n\n\t\tif (desc.audioClipGroupList?.audioClipGroupList?.length) {\n\t\t\ttarget.timelineInformation.audioClipGroups = desc.audioClipGroupList.audioClipGroupList.map(g => ({\n\t\t\t\tid: g.groupID,\n\t\t\t\tmuted: g.muted,\n\t\t\t\taudioClips: g.audioClipList.map(({ clipID, timeScope, muted, audioLevel, frameReader }) => ({\n\t\t\t\t\tid: clipID,\n\t\t\t\t\tstart: frac(timeScope.Strt),\n\t\t\t\t\tduration: frac(timeScope.duration),\n\t\t\t\t\tinTime: frac(timeScope.inTime),\n\t\t\t\t\toutTime: frac(timeScope.outTime),\n\t\t\t\t\tmuted: muted,\n\t\t\t\t\taudioLevel: audioLevel,\n\t\t\t\t\tframeReader: {\n\t\t\t\t\t\ttype: frameReader.frameReaderType,\n\t\t\t\t\t\tmediaDescriptor: frameReader.mediaDescriptor,\n\t\t\t\t\t\tlink: {\n\t\t\t\t\t\t\tname: frameReader['Lnk ']['Nm  '],\n\t\t\t\t\t\t\tfullPath: frameReader['Lnk '].fullPath,\n\t\t\t\t\t\t\trelativePath: frameReader['Lnk '].relPath,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t})),\n\t\t\t}));\n\t\t}\n\t},\n\t(writer, target) => {\n\t\tconst timeline = target.timelineInformation!;\n\t\tconst desc: TimelineInformationDescriptor = {\n\t\t\tVrsn: 1,\n\t\t\tenab: timeline.enabled,\n\t\t\tframeStep: timeline.frameStep,\n\t\t\tframeRate: timeline.frameRate,\n\t\t\ttime: timeline.time,\n\t\t\tduration: timeline.duration,\n\t\t\tworkInTime: timeline.workInTime,\n\t\t\tworkOutTime: timeline.workOutTime,\n\t\t\tLCnt: timeline.repeats,\n\t\t\tglobalTrackList: serializeTrackList(timeline.globalTracks),\n\t\t\taudioClipGroupList: {\n\t\t\t\taudioClipGroupList: timeline.audioClipGroups?.map(a => ({\n\t\t\t\t\tgroupID: a.id,\n\t\t\t\t\tmuted: a.muted,\n\t\t\t\t\taudioClipList: a.audioClips.map<TimelineAudioClipDescriptor>(c => ({\n\t\t\t\t\t\tclipID: c.id,\n\t\t\t\t\t\ttimeScope: {\n\t\t\t\t\t\t\tVrsn: 1,\n\t\t\t\t\t\t\tStrt: c.start,\n\t\t\t\t\t\t\tduration: c.duration,\n\t\t\t\t\t\t\tinTime: c.inTime,\n\t\t\t\t\t\t\toutTime: c.outTime,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tframeReader: {\n\t\t\t\t\t\t\tframeReaderType: c.frameReader.type,\n\t\t\t\t\t\t\tdescVersion: 1,\n\t\t\t\t\t\t\t'Lnk ': {\n\t\t\t\t\t\t\t\tdescVersion: 1,\n\t\t\t\t\t\t\t\t'Nm  ': c.frameReader.link.name,\n\t\t\t\t\t\t\t\tfullPath: c.frameReader.link.fullPath,\n\t\t\t\t\t\t\t\trelPath: c.frameReader.link.relativePath,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmediaDescriptor: c.frameReader.mediaDescriptor,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmuted: c.muted,\n\t\t\t\t\t\taudioLevel: c.audioLevel,\n\t\t\t\t\t})),\n\t\t\t\t})),\n\t\t\t},\n\t\t\thasMotion: timeline.hasMotion,\n\t\t};\n\n\t\twriteVersionAndDescriptor(writer, '', 'null', desc, 'anim');\n\t},\n);\n\ninterface SheetDisclosureDescriptor {\n\tVrsn: 1;\n\tsheetTimelineOptions?: {\n\t\tVrsn: 2;\n\t\tsheetID: number;\n\t\tsheetDisclosed: boolean;\n\t\tlightsDisclosed: boolean;\n\t\tmeshesDisclosed: boolean;\n\t\tmaterialsDisclosed: boolean;\n\t}[];\n}\n\naddHandler(\n\t1076, // Sheet Disclosure\n\ttarget => target.sheetDisclosure !== undefined,\n\t(reader, target) => {\n\t\tconst desc = readVersionAndDescriptor(reader) as SheetDisclosureDescriptor;\n\n\t\ttarget.sheetDisclosure = {};\n\n\t\tif (desc.sheetTimelineOptions) {\n\t\t\ttarget.sheetDisclosure.sheetTimelineOptions = desc.sheetTimelineOptions.map(o => ({\n\t\t\t\tsheetID: o.sheetID,\n\t\t\t\tsheetDisclosed: o.sheetDisclosed,\n\t\t\t\tlightsDisclosed: o.lightsDisclosed,\n\t\t\t\tmeshesDisclosed: o.meshesDisclosed,\n\t\t\t\tmaterialsDisclosed: o.materialsDisclosed,\n\t\t\t}));\n\t\t}\n\t},\n\t(writer, target) => {\n\t\tconst disclosure = target.sheetDisclosure!;\n\t\tconst desc: SheetDisclosureDescriptor = { Vrsn: 1 };\n\n\t\tif (disclosure.sheetTimelineOptions) {\n\t\t\tdesc.sheetTimelineOptions = disclosure.sheetTimelineOptions.map(d => ({\n\t\t\t\tVrsn: 2,\n\t\t\t\tsheetID: d.sheetID,\n\t\t\t\tsheetDisclosed: d.sheetDisclosed,\n\t\t\t\tlightsDisclosed: d.lightsDisclosed,\n\t\t\t\tmeshesDisclosed: d.meshesDisclosed,\n\t\t\t\tmaterialsDisclosed: d.materialsDisclosed,\n\t\t\t}));\n\t\t}\n\n\t\twriteVersionAndDescriptor(writer, '', 'null', desc);\n\t},\n);\n\naddHandler(\n\t1054, // URL List\n\ttarget => target.urlsList !== undefined,\n\t(reader, target) => {\n\t\tconst count = readUint32(reader);\n\t\ttarget.urlsList = [];\n\n\t\tfor (let i = 0; i < count; i++) {\n\t\t\tconst long = readSignature(reader);\n\t\t\tif (long !== 'slic' && reader.throwForMissingFeatures) throw new Error('Unknown long');\n\t\t\tconst id = readUint32(reader);\n\t\t\tconst url = readUnicodeString(reader);\n\t\t\ttarget.urlsList.push({ id, url, ref: 'slice' });\n\t\t}\n\t},\n\t(writer, target) => {\n\t\tconst list = target.urlsList!;\n\t\twriteUint32(writer, list.length);\n\n\t\tfor (let i = 0; i < list.length; i++) {\n\t\t\twriteSignature(writer, 'slic');\n\t\t\twriteUint32(writer, list[i].id);\n\t\t\twriteUnicodeString(writer, list[i].url);\n\t\t}\n\t},\n);\n\ninterface BoundsDesc {\n\t'Top ': number;\n\tLeft: number;\n\tBtom: number;\n\tRght: number;\n}\n\ninterface SlicesSliceDesc {\n\tsliceID: number;\n\tgroupID: number;\n\torigin: string;\n\t'Nm  '?: string;\n\tType: string;\n\tbounds: BoundsDesc;\n\turl: string;\n\tnull: string;\n\tMsge: string;\n\taltTag: string;\n\tcellTextIsHTML: boolean;\n\tcellText: string;\n\thorzAlign: string;\n\tvertAlign: string;\n\tbgColorType: string;\n\tbgColor?: { 'Rd  ': number; 'Grn ': number; 'Bl  ': number; alpha: number; };\n\ttopOutset?: number;\n\tleftOutset?: number;\n\tbottomOutset?: number;\n\trightOutset?: number;\n}\n\ninterface SlicesDesc {\n\tbounds: BoundsDesc;\n\tslices: SlicesSliceDesc[];\n}\n\ninterface SlicesDesc7 extends SlicesDesc {\n\tbaseName: string;\n}\n\nfunction boundsToBounds(bounds: { left: number; top: number; right: number; bottom: number }): BoundsDesc {\n\treturn { 'Top ': bounds.top, Left: bounds.left, Btom: bounds.bottom, Rght: bounds.right };\n}\n\nfunction boundsFromBounds(bounds: BoundsDesc): { left: number; top: number; right: number; bottom: number } {\n\treturn { top: bounds['Top '], left: bounds.Left, bottom: bounds.Btom, right: bounds.Rght };\n}\n\nfunction clamped<T>(array: T[], index: number) {\n\treturn array[Math.max(0, Math.min(array.length - 1, index))];\n}\n\nconst sliceOrigins: ('userGenerated' | 'autoGenerated' | 'layer')[] = ['autoGenerated', 'layer', 'userGenerated'];\nconst sliceTypes: ('image' | 'noImage')[] = ['noImage', 'image'];\nconst sliceAlignments: ('default')[] = ['default'];\n\naddHandler(\n\t1050, // Slices\n\ttarget => target.slices ? target.slices.length : 0,\n\t(reader, target) => {\n\t\tconst version = readUint32(reader);\n\n\t\tif (version === 6) {\n\t\t\tif (!target.slices) target.slices = [];\n\n\t\t\tconst top = readInt32(reader);\n\t\t\tconst left = readInt32(reader);\n\t\t\tconst bottom = readInt32(reader);\n\t\t\tconst right = readInt32(reader);\n\t\t\tconst groupName = readUnicodeString(reader);\n\t\t\tconst count = readUint32(reader);\n\t\t\ttarget.slices.push({ bounds: { top, left, bottom, right }, groupName, slices: [] });\n\t\t\tconst slices = target.slices[target.slices.length - 1].slices;\n\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\tconst id = readUint32(reader);\n\t\t\t\tconst groupId = readUint32(reader);\n\t\t\t\tconst origin = clamped(sliceOrigins, readUint32(reader));\n\t\t\t\tconst associatedLayerId = origin == 'layer' ? readUint32(reader) : 0;\n\t\t\t\tconst name = readUnicodeString(reader);\n\t\t\t\tconst type = clamped(sliceTypes, readUint32(reader));\n\t\t\t\tconst left = readInt32(reader);\n\t\t\t\tconst top = readInt32(reader);\n\t\t\t\tconst right = readInt32(reader);\n\t\t\t\tconst bottom = readInt32(reader);\n\t\t\t\tconst url = readUnicodeString(reader);\n\t\t\t\tconst target = readUnicodeString(reader);\n\t\t\t\tconst message = readUnicodeString(reader);\n\t\t\t\tconst altTag = readUnicodeString(reader);\n\t\t\t\tconst cellTextIsHTML = !!readUint8(reader);\n\t\t\t\tconst cellText = readUnicodeString(reader);\n\t\t\t\tconst horizontalAlignment = clamped(sliceAlignments, readUint32(reader));\n\t\t\t\tconst verticalAlignment = clamped(sliceAlignments, readUint32(reader));\n\t\t\t\tconst a = readUint8(reader);\n\t\t\t\tconst r = readUint8(reader);\n\t\t\t\tconst g = readUint8(reader);\n\t\t\t\tconst b = readUint8(reader);\n\t\t\t\tconst backgroundColorType = ((a + r + g + b) === 0) ? 'none' : (a === 0 ? 'matte' : 'color');\n\t\t\t\tslices.push({\n\t\t\t\t\tid, groupId, origin, associatedLayerId, name, target, message, altTag, cellTextIsHTML, cellText,\n\t\t\t\t\thorizontalAlignment, verticalAlignment, type, url,\n\t\t\t\t\tbounds: { top, left, bottom, right },\n\t\t\t\t\tbackgroundColorType, backgroundColor: { r, g, b, a },\n\t\t\t\t});\n\t\t\t}\n\t\t\tconst desc = readVersionAndDescriptor(reader) as SlicesDesc;\n\t\t\tdesc.slices.forEach(d => {\n\t\t\t\tconst slice = slices.find(s => d.sliceID == s.id);\n\t\t\t\tif (slice) {\n\t\t\t\t\tslice.topOutset = d.topOutset;\n\t\t\t\t\tslice.leftOutset = d.leftOutset;\n\t\t\t\t\tslice.bottomOutset = d.bottomOutset;\n\t\t\t\t\tslice.rightOutset = d.rightOutset;\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (version === 7 || version === 8) {\n\t\t\tconst desc = readVersionAndDescriptor(reader) as SlicesDesc7;\n\n\t\t\tif (!target.slices) target.slices = [];\n\t\t\ttarget.slices.push({\n\t\t\t\tgroupName: desc.baseName,\n\t\t\t\tbounds: boundsFromBounds(desc.bounds),\n\t\t\t\tslices: desc.slices.map(s => ({\n\t\t\t\t\t...(s['Nm  '] ? { name: s['Nm  '] } : {}),\n\t\t\t\t\tid: s.sliceID,\n\t\t\t\t\tgroupId: s.groupID,\n\t\t\t\t\tassociatedLayerId: 0,\n\t\t\t\t\torigin: ESliceOrigin.decode(s.origin),\n\t\t\t\t\ttype: ESliceType.decode(s.Type),\n\t\t\t\t\tbounds: boundsFromBounds(s.bounds),\n\t\t\t\t\turl: s.url,\n\t\t\t\t\ttarget: s.null,\n\t\t\t\t\tmessage: s.Msge,\n\t\t\t\t\taltTag: s.altTag,\n\t\t\t\t\tcellTextIsHTML: s.cellTextIsHTML,\n\t\t\t\t\tcellText: s.cellText,\n\t\t\t\t\thorizontalAlignment: ESliceHorzAlign.decode(s.horzAlign),\n\t\t\t\t\tverticalAlignment: ESliceVertAlign.decode(s.vertAlign),\n\t\t\t\t\tbackgroundColorType: ESliceBGColorType.decode(s.bgColorType),\n\t\t\t\t\tbackgroundColor: s.bgColor ? { r: s.bgColor['Rd  '], g: s.bgColor['Grn '], b: s.bgColor['Bl  '], a: s.bgColor.alpha } : { r: 0, g: 0, b: 0, a: 0 },\n\t\t\t\t\ttopOutset: s.topOutset || 0,\n\t\t\t\t\tleftOutset: s.leftOutset || 0,\n\t\t\t\t\tbottomOutset: s.bottomOutset || 0,\n\t\t\t\t\trightOutset: s.rightOutset || 0,\n\t\t\t\t})),\n\t\t\t});\n\t\t} else {\n\t\t\tthrow new Error(`Invalid slices version (${version})`);\n\t\t}\n\t},\n\t(writer, target, index) => {\n\t\tconst { bounds, groupName, slices } = target.slices![index];\n\n\t\twriteUint32(writer, 6); // version\n\t\twriteInt32(writer, bounds.top);\n\t\twriteInt32(writer, bounds.left);\n\t\twriteInt32(writer, bounds.bottom);\n\t\twriteInt32(writer, bounds.right);\n\t\twriteUnicodeString(writer, groupName);\n\t\twriteUint32(writer, slices.length);\n\n\t\tfor (let i = 0; i < slices.length; i++) {\n\t\t\tconst slice = slices[i];\n\t\t\tlet { a, r, g, b } = slice.backgroundColor;\n\n\t\t\tif (slice.backgroundColorType === 'none') {\n\t\t\t\ta = r = g = b = 0;\n\t\t\t} else if (slice.backgroundColorType === 'matte') {\n\t\t\t\ta = 0;\n\t\t\t\tr = g = b = 255;\n\t\t\t}\n\n\t\t\twriteUint32(writer, slice.id);\n\t\t\twriteUint32(writer, slice.groupId);\n\t\t\twriteUint32(writer, sliceOrigins.indexOf(slice.origin));\n\t\t\tif (slice.origin === 'layer') writeUint32(writer, slice.associatedLayerId);\n\t\t\twriteUnicodeString(writer, slice.name || '');\n\t\t\twriteUint32(writer, sliceTypes.indexOf(slice.type));\n\t\t\twriteInt32(writer, slice.bounds.left);\n\t\t\twriteInt32(writer, slice.bounds.top);\n\t\t\twriteInt32(writer, slice.bounds.right);\n\t\t\twriteInt32(writer, slice.bounds.bottom);\n\t\t\twriteUnicodeString(writer, slice.url);\n\t\t\twriteUnicodeString(writer, slice.target);\n\t\t\twriteUnicodeString(writer, slice.message);\n\t\t\twriteUnicodeString(writer, slice.altTag);\n\t\t\twriteUint8(writer, slice.cellTextIsHTML ? 1 : 0);\n\t\t\twriteUnicodeString(writer, slice.cellText);\n\t\t\twriteUint32(writer, sliceAlignments.indexOf(slice.horizontalAlignment));\n\t\t\twriteUint32(writer, sliceAlignments.indexOf(slice.verticalAlignment));\n\t\t\twriteUint8(writer, a);\n\t\t\twriteUint8(writer, r);\n\t\t\twriteUint8(writer, g);\n\t\t\twriteUint8(writer, b);\n\t\t}\n\n\t\tconst desc: SlicesDesc = {\n\t\t\tbounds: boundsToBounds(bounds),\n\t\t\tslices: [],\n\t\t};\n\n\t\tslices.forEach(s => {\n\t\t\tconst slice: SlicesSliceDesc = {\n\t\t\t\tsliceID: s.id,\n\t\t\t\tgroupID: s.groupId,\n\t\t\t\torigin: ESliceOrigin.encode(s.origin),\n\t\t\t\tType: ESliceType.encode(s.type),\n\t\t\t\tbounds: boundsToBounds(s.bounds),\n\t\t\t\t...(s.name ? { 'Nm  ': s.name } : {}),\n\t\t\t\turl: s.url,\n\t\t\t\tnull: s.target,\n\t\t\t\tMsge: s.message,\n\t\t\t\taltTag: s.altTag,\n\t\t\t\tcellTextIsHTML: s.cellTextIsHTML,\n\t\t\t\tcellText: s.cellText,\n\t\t\t\thorzAlign: ESliceHorzAlign.encode(s.horizontalAlignment),\n\t\t\t\tvertAlign: ESliceVertAlign.encode(s.verticalAlignment),\n\t\t\t\tbgColorType: ESliceBGColorType.encode(s.backgroundColorType),\n\t\t\t};\n\n\t\t\tif (s.backgroundColorType === 'color') {\n\t\t\t\tconst { r, g, b, a } = s.backgroundColor;\n\t\t\t\tslice.bgColor = { 'Rd  ': r, 'Grn ': g, 'Bl  ': b, alpha: a };\n\t\t\t}\n\n\t\t\tslice.topOutset = s.topOutset || 0;\n\t\t\tslice.leftOutset = s.leftOutset || 0;\n\t\t\tslice.bottomOutset = s.bottomOutset || 0;\n\t\t\tslice.rightOutset = s.rightOutset || 0;\n\t\t\tdesc.slices.push(slice);\n\t\t});\n\n\t\twriteVersionAndDescriptor(writer, '', 'null', desc, 'slices');\n\t},\n);\n\naddHandler(\n\t1064,\n\ttarget => target.pixelAspectRatio !== undefined,\n\t(reader, target) => {\n\t\tif (readUint32(reader) > 2) throw new Error('Invalid pixelAspectRatio version');\n\t\ttarget.pixelAspectRatio = { aspect: readFloat64(reader) };\n\t},\n\t(writer, target) => {\n\t\twriteUint32(writer, 2); // version\n\t\twriteFloat64(writer, target.pixelAspectRatio!.aspect);\n\t},\n);\n\naddHandler(\n\t1041,\n\ttarget => target.iccUntaggedProfile !== undefined,\n\t(reader, target) => {\n\t\ttarget.iccUntaggedProfile = !!readUint8(reader);\n\t},\n\t(writer, target) => {\n\t\twriteUint8(writer, target.iccUntaggedProfile ? 1 : 0);\n\t},\n);\n\nMOCK_HANDLERS && addHandler(\n\t1039, // ICC Profile\n\ttarget => (target as any)._ir1039 !== undefined,\n\t(reader, target, left) => {\n\t\t// TODO: this is raw bytes, just return as a byte array\n\t\tLOG_MOCK_HANDLERS && console.log('image resource 1039', left());\n\t\t(target as any)._ir1039 = readBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\twriteBytes(writer, (target as any)._ir1039);\n\t},\n);\n\naddHandler(\n\t1044,\n\ttarget => target.idsSeedNumber !== undefined,\n\t(reader, target) => target.idsSeedNumber = readUint32(reader),\n\t(writer, target) => writeUint32(writer, target.idsSeedNumber!),\n);\n\naddHandler(\n\t1036,\n\ttarget => target.thumbnail !== undefined || target.thumbnailRaw !== undefined,\n\t(reader, target, left) => {\n\t\tconst format = readUint32(reader); // 1 = kJpegRGB, 0 = kRawRGB\n\t\tconst width = readUint32(reader);\n\t\tconst height = readUint32(reader);\n\t\treadUint32(reader); // widthBytes = (width * bits_per_pixel + 31) / 32 * 4.\n\t\treadUint32(reader); // totalSize = widthBytes * height * planes\n\t\treadUint32(reader); // sizeAfterCompression\n\t\tconst bitsPerPixel = readUint16(reader); // 24\n\t\tconst planes = readUint16(reader); // 1\n\n\t\tif (format !== 1 || bitsPerPixel !== 24 || planes !== 1) {\n\t\t\treader.logMissingFeatures && reader.log(`Invalid thumbnail data (format: ${format}, bitsPerPixel: ${bitsPerPixel}, planes: ${planes})`);\n\t\t\tskipBytes(reader, left());\n\t\t\treturn;\n\t\t}\n\n\t\tconst size = left();\n\t\tconst data = readBytes(reader, size);\n\n\t\tif (reader.useRawThumbnail) {\n\t\t\ttarget.thumbnailRaw = { width, height, data };\n\t\t} else if (data.byteLength) {\n\t\t\ttarget.thumbnail = createCanvasFromData(data);\n\t\t}\n\t},\n\t(writer, target) => {\n\t\tlet width = 0;\n\t\tlet height = 0;\n\t\tlet data = new Uint8Array(0);\n\n\t\tif (target.thumbnailRaw) {\n\t\t\twidth = target.thumbnailRaw.width;\n\t\t\theight = target.thumbnailRaw.height;\n\t\t\tdata = target.thumbnailRaw.data;\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tconst dataUrl = target.thumbnail!.toDataURL('image/jpeg', 1)?.substring('data:image/jpeg;base64,'.length);\n\n\t\t\t\tif (dataUrl) {\n\t\t\t\t\tdata = toByteArray(dataUrl); // this sometimes fails for some reason, maybe some browser bugs\n\t\t\t\t\twidth = target.thumbnail!.width;\n\t\t\t\t\theight = target.thumbnail!.height;\n\t\t\t\t}\n\t\t\t} catch { }\n\t\t}\n\n\t\tconst bitsPerPixel = 24;\n\t\tconst widthBytes = Math.floor((width * bitsPerPixel + 31) / 32) * 4;\n\t\tconst planes = 1;\n\t\tconst totalSize = widthBytes * height * planes;\n\t\tconst sizeAfterCompression = data.length;\n\n\t\twriteUint32(writer, 1); // 1 = kJpegRGB\n\t\twriteUint32(writer, width);\n\t\twriteUint32(writer, height);\n\t\twriteUint32(writer, widthBytes);\n\t\twriteUint32(writer, totalSize);\n\t\twriteUint32(writer, sizeAfterCompression);\n\t\twriteUint16(writer, bitsPerPixel);\n\t\twriteUint16(writer, planes);\n\t\twriteBytes(writer, data);\n\t},\n);\n\naddHandler(\n\t1057,\n\ttarget => target.versionInfo !== undefined,\n\t(reader, target, left) => {\n\t\tconst version = readUint32(reader);\n\t\tif (version !== 1) throw new Error('Invalid versionInfo version');\n\n\t\ttarget.versionInfo = {\n\t\t\thasRealMergedData: !!readUint8(reader),\n\t\t\twriterName: readUnicodeString(reader),\n\t\t\treaderName: readUnicodeString(reader),\n\t\t\tfileVersion: readUint32(reader),\n\t\t};\n\n\t\tskipBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\tconst versionInfo = target.versionInfo!;\n\t\twriteUint32(writer, 1); // version\n\t\twriteUint8(writer, versionInfo.hasRealMergedData ? 1 : 0);\n\t\twriteUnicodeString(writer, versionInfo.writerName);\n\t\twriteUnicodeString(writer, versionInfo.readerName);\n\t\twriteUint32(writer, versionInfo.fileVersion);\n\t},\n);\n\nMOCK_HANDLERS && addHandler(\n\t1058, // EXIF data 1.\n\ttarget => (target as any)._ir1058 !== undefined,\n\t(reader, target, left) => {\n\t\tLOG_MOCK_HANDLERS && console.log('image resource 1058', left());\n\t\t(target as any)._ir1058 = readBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\twriteBytes(writer, (target as any)._ir1058);\n\t},\n);\n\naddHandler(\n\t7000,\n\ttarget => target.imageReadyVariables !== undefined,\n\t(reader, target, left) => {\n\t\ttarget.imageReadyVariables = readUtf8String(reader, left());\n\t},\n\t(writer, target) => {\n\t\twriteUtf8String(writer, target.imageReadyVariables!);\n\t},\n);\n\naddHandler(\n\t7001,\n\ttarget => target.imageReadyDataSets !== undefined,\n\t(reader, target, left) => {\n\t\ttarget.imageReadyDataSets = readUtf8String(reader, left());\n\t},\n\t(writer, target) => {\n\t\twriteUtf8String(writer, target.imageReadyDataSets!);\n\t},\n);\n\ninterface Descriptor1088 {\n\t'null': string[];\n}\n\naddHandler(\n\t1088,\n\ttarget => target.pathSelectionState !== undefined,\n\t(reader, target, _left) => {\n\t\tconst desc: Descriptor1088 = readVersionAndDescriptor(reader);\n\t\ttarget.pathSelectionState = desc['null'];\n\t},\n\t(writer, target) => {\n\t\tconst desc: Descriptor1088 = { 'null': target.pathSelectionState! };\n\t\twriteVersionAndDescriptor(writer, '', 'null', desc);\n\t},\n);\n\nMOCK_HANDLERS && addHandler(\n\t1025,\n\ttarget => (target as any)._ir1025 !== undefined,\n\t(reader, target, left) => {\n\t\tLOG_MOCK_HANDLERS && console.log('image resource 1025', left());\n\t\t(target as any)._ir1025 = readBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\twriteBytes(writer, (target as any)._ir1025);\n\t},\n);\n\nconst FrmD = createEnum<'auto' | 'none' | 'dispose'>('FrmD', '', {\n\tauto: 'Auto',\n\tnone: 'None',\n\tdispose: 'Disp',\n});\n\ninterface AnimationFrameDescriptor {\n\tFrID: number;\n\tFrDl?: number;\n\tFrDs: string;\n\tFrGA?: number;\n}\n\ninterface AnimationDescriptor {\n\tFsID: number;\n\tAFrm?: number;\n\tFsFr: number[];\n\tLCnt: number;\n}\n\ninterface AnimationsDescriptor {\n\tAFSt?: number;\n\tFrIn: AnimationFrameDescriptor[];\n\tFSts: AnimationDescriptor[];\n}\n\naddHandler(\n\t4000, // Plug-In resource(s)\n\ttarget => target.animations !== undefined,\n\t(reader, target, left) => {\n\t\tconst key = readSignature(reader);\n\n\t\tif (key === 'mani') {\n\t\t\tcheckSignature(reader, 'IRFR');\n\t\t\treadSection(reader, 1, left => {\n\t\t\t\twhile (left() > 0) {\n\t\t\t\t\tcheckSignature(reader, '8BIM');\n\t\t\t\t\tconst key = readSignature(reader);\n\n\t\t\t\t\treadSection(reader, 1, left => {\n\t\t\t\t\t\tif (key === 'AnDs') {\n\t\t\t\t\t\t\tconst desc = readVersionAndDescriptor(reader) as AnimationsDescriptor;\n\t\t\t\t\t\t\ttarget.animations = {\n\t\t\t\t\t\t\t\t// desc.AFSt ???\n\t\t\t\t\t\t\t\tframes: desc.FrIn.map(x => ({\n\t\t\t\t\t\t\t\t\tid: x.FrID,\n\t\t\t\t\t\t\t\t\tdelay: (x.FrDl || 0) / 100,\n\t\t\t\t\t\t\t\t\tdispose: x.FrDs ? FrmD.decode(x.FrDs) : 'auto', // missing == auto\n\t\t\t\t\t\t\t\t\t// x.FrGA ???\n\t\t\t\t\t\t\t\t})),\n\t\t\t\t\t\t\t\tanimations: desc.FSts.map(x => ({\n\t\t\t\t\t\t\t\t\tid: x.FsID,\n\t\t\t\t\t\t\t\t\tframes: x.FsFr,\n\t\t\t\t\t\t\t\t\trepeats: x.LCnt,\n\t\t\t\t\t\t\t\t\tactiveFrame: x.AFrm || 0,\n\t\t\t\t\t\t\t\t})),\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// console.log('#4000 AnDs', require('util').inspect(desc, false, 99, true));\n\t\t\t\t\t\t\t// console.log('#4000 AnDs:result', require('util').inspect(target.animations, false, 99, true));\n\t\t\t\t\t\t} else if (key === 'Roll') {\n\t\t\t\t\t\t\tconst bytes = readBytes(reader, left());\n\t\t\t\t\t\t\treader.logDevFeatures && reader.log('#4000 Roll', bytes);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treader.logMissingFeatures && reader.log('Unhandled subsection in #4000', key);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (key === 'mopt') {\n\t\t\tconst bytes = readBytes(reader, left());\n\t\t\treader.logDevFeatures && reader.log('#4000 mopt', bytes);\n\t\t} else {\n\t\t\treader.logMissingFeatures && reader.log('Unhandled key in #4000:', key);\n\t\t}\n\t},\n\t(writer, target) => {\n\t\tif (target.animations) {\n\t\t\twriteSignature(writer, 'mani');\n\t\t\twriteSignature(writer, 'IRFR');\n\t\t\twriteSection(writer, 1, () => {\n\t\t\t\twriteSignature(writer, '8BIM');\n\t\t\t\twriteSignature(writer, 'AnDs');\n\t\t\t\twriteSection(writer, 1, () => {\n\t\t\t\t\tconst desc: AnimationsDescriptor = {\n\t\t\t\t\t\t// AFSt: 0, // ???\n\t\t\t\t\t\tFrIn: [],\n\t\t\t\t\t\tFSts: [],\n\t\t\t\t\t};\n\n\t\t\t\t\tfor (let i = 0; i < target.animations!.frames.length; i++) {\n\t\t\t\t\t\tconst f = target.animations!.frames[i];\n\t\t\t\t\t\tconst frame: AnimationFrameDescriptor = {\n\t\t\t\t\t\t\tFrID: f.id,\n\t\t\t\t\t\t} as any;\n\t\t\t\t\t\tif (f.delay) frame.FrDl = (f.delay * 100) | 0;\n\t\t\t\t\t\tframe.FrDs = FrmD.encode(f.dispose);\n\t\t\t\t\t\t// if (i === 0) frame.FrGA = 30; // ???\n\t\t\t\t\t\tdesc.FrIn.push(frame);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (let i = 0; i < target.animations!.animations.length; i++) {\n\t\t\t\t\t\tconst a = target.animations!.animations[i];\n\t\t\t\t\t\tconst anim: AnimationDescriptor = {\n\t\t\t\t\t\t\tFsID: a.id,\n\t\t\t\t\t\t\tAFrm: a.activeFrame! | 0,\n\t\t\t\t\t\t\tFsFr: a.frames,\n\t\t\t\t\t\t\tLCnt: a.repeats! | 0,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tdesc.FSts.push(anim);\n\t\t\t\t\t}\n\n\t\t\t\t\twriteVersionAndDescriptor(writer, '', 'null', desc);\n\t\t\t\t});\n\n\t\t\t\t// writeSignature(writer, '8BIM');\n\t\t\t\t// writeSignature(writer, 'Roll');\n\t\t\t\t// writeSection(writer, 1, () => {\n\t\t\t\t// \twriteZeros(writer, 8);\n\t\t\t\t// });\n\t\t\t});\n\t\t}\n\t},\n);\n\n// TODO: Unfinished\nMOCK_HANDLERS && addHandler(\n\t4001, // Plug-In resource(s)\n\ttarget => (target as any)._ir4001 !== undefined,\n\t(reader, target, left) => {\n\t\tif (MOCK_HANDLERS) {\n\t\t\tLOG_MOCK_HANDLERS && console.log('image resource 4001', left());\n\t\t\t(target as any)._ir4001 = readBytes(reader, left());\n\t\t\treturn;\n\t\t}\n\n\t\tconst key = readSignature(reader);\n\n\t\tif (key === 'mfri') {\n\t\t\tconst version = readUint32(reader);\n\t\t\tif (version !== 2) throw new Error('Invalid mfri version');\n\n\t\t\tconst length = readUint32(reader);\n\t\t\tconst bytes = readBytes(reader, length);\n\t\t\treader.logDevFeatures && reader.log('mfri', bytes);\n\t\t} else if (key === 'mset') {\n\t\t\tconst desc = readVersionAndDescriptor(reader);\n\t\t\treader.logDevFeatures && reader.log('mset', desc);\n\t\t} else {\n\t\t\treader.logMissingFeatures && reader.log('Unhandled key in #4001', key);\n\t\t}\n\t},\n\t(writer, target) => {\n\t\twriteBytes(writer, (target as any)._ir4001);\n\t},\n);\n\n// TODO: Unfinished\nMOCK_HANDLERS && addHandler(\n\t4002, // Plug-In resource(s)\n\ttarget => (target as any)._ir4002 !== undefined,\n\t(reader, target, left) => {\n\t\tLOG_MOCK_HANDLERS && console.log('image resource 4002', left());\n\t\t(target as any)._ir4002 = readBytes(reader, left());\n\t},\n\t(writer, target) => {\n\t\twriteBytes(writer, (target as any)._ir4002);\n\t},\n);\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.decodeString = exports.encodeString = exports.encodeStringTo = exports.stringLengthInBytes = void 0;\r\nfunction charLengthInBytes(code) {\r\n    if ((code & 0xffffff80) === 0) {\r\n        return 1;\r\n    }\r\n    else if ((code & 0xfffff800) === 0) {\r\n        return 2;\r\n    }\r\n    else if ((code & 0xffff0000) === 0) {\r\n        return 3;\r\n    }\r\n    else {\r\n        return 4;\r\n    }\r\n}\r\nfunction stringLengthInBytes(value) {\r\n    var result = 0;\r\n    for (var i = 0; i < value.length; i++) {\r\n        var code = value.charCodeAt(i);\r\n        // high surrogate\r\n        if (code >= 0xd800 && code <= 0xdbff) {\r\n            if ((i + 1) < value.length) {\r\n                var extra = value.charCodeAt(i + 1);\r\n                // low surrogate\r\n                if ((extra & 0xfc00) === 0xdc00) {\r\n                    i++;\r\n                    result += charLengthInBytes(((code & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            result += charLengthInBytes(code);\r\n        }\r\n    }\r\n    return result;\r\n}\r\nexports.stringLengthInBytes = stringLengthInBytes;\r\nfunction writeCharacter(buffer, offset, code) {\r\n    var length = charLengthInBytes(code);\r\n    switch (length) {\r\n        case 1:\r\n            buffer[offset] = code;\r\n            break;\r\n        case 2:\r\n            buffer[offset] = ((code >> 6) & 0x1f) | 0xc0;\r\n            buffer[offset + 1] = (code & 0x3f) | 0x80;\r\n            break;\r\n        case 3:\r\n            buffer[offset] = ((code >> 12) & 0x0f) | 0xe0;\r\n            buffer[offset + 1] = ((code >> 6) & 0x3f) | 0x80;\r\n            buffer[offset + 2] = (code & 0x3f) | 0x80;\r\n            break;\r\n        default:\r\n            buffer[offset] = ((code >> 18) & 0x07) | 0xf0;\r\n            buffer[offset + 1] = ((code >> 12) & 0x3f) | 0x80;\r\n            buffer[offset + 2] = ((code >> 6) & 0x3f) | 0x80;\r\n            buffer[offset + 3] = (code & 0x3f) | 0x80;\r\n            break;\r\n    }\r\n    return length;\r\n}\r\nfunction encodeStringTo(buffer, offset, value) {\r\n    for (var i = 0; i < value.length; i++) {\r\n        var code = value.charCodeAt(i);\r\n        // high surrogate\r\n        if (code >= 0xd800 && code <= 0xdbff) {\r\n            if ((i + 1) < value.length) {\r\n                var extra = value.charCodeAt(i + 1);\r\n                // low surrogate\r\n                if ((extra & 0xfc00) === 0xdc00) {\r\n                    i++;\r\n                    var fullCode = ((code & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\r\n                    offset += writeCharacter(buffer, offset, fullCode);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            offset += writeCharacter(buffer, offset, code);\r\n        }\r\n    }\r\n    return offset;\r\n}\r\nexports.encodeStringTo = encodeStringTo;\r\nfunction encodeString(value) {\r\n    if (value.length > 1000 && typeof TextEncoder !== 'undefined') {\r\n        return (new TextEncoder()).encode(value);\r\n    }\r\n    var buffer = new Uint8Array(stringLengthInBytes(value));\r\n    encodeStringTo(buffer, 0, value);\r\n    return buffer;\r\n}\r\nexports.encodeString = encodeString;\r\nfunction continuationByte(buffer, index) {\r\n    if (index >= buffer.length) {\r\n        throw Error('Invalid byte index');\r\n    }\r\n    var continuationByte = buffer[index];\r\n    if ((continuationByte & 0xC0) === 0x80) {\r\n        return continuationByte & 0x3F;\r\n    }\r\n    else {\r\n        throw Error('Invalid continuation byte');\r\n    }\r\n}\r\nfunction decodeString(value) {\r\n    if (value.byteLength > 1000 && typeof TextDecoder !== 'undefined') {\r\n        return (new TextDecoder()).decode(value);\r\n    }\r\n    var result = [];\r\n    for (var i = 0; i < value.length;) {\r\n        var byte1 = value[i++];\r\n        var code = void 0;\r\n        if ((byte1 & 0x80) === 0) {\r\n            code = byte1;\r\n        }\r\n        else if ((byte1 & 0xe0) === 0xc0) {\r\n            var byte2 = continuationByte(value, i++);\r\n            code = ((byte1 & 0x1f) << 6) | byte2;\r\n            if (code < 0x80) {\r\n                throw Error('Invalid continuation byte');\r\n            }\r\n        }\r\n        else if ((byte1 & 0xf0) === 0xe0) {\r\n            var byte2 = continuationByte(value, i++);\r\n            var byte3 = continuationByte(value, i++);\r\n            code = ((byte1 & 0x0f) << 12) | (byte2 << 6) | byte3;\r\n            if (code < 0x0800) {\r\n                throw Error('Invalid continuation byte');\r\n            }\r\n            if (code >= 0xd800 && code <= 0xdfff) {\r\n                throw Error(\"Lone surrogate U+\".concat(code.toString(16).toUpperCase(), \" is not a scalar value\"));\r\n            }\r\n        }\r\n        else if ((byte1 & 0xf8) === 0xf0) {\r\n            var byte2 = continuationByte(value, i++);\r\n            var byte3 = continuationByte(value, i++);\r\n            var byte4 = continuationByte(value, i++);\r\n            code = ((byte1 & 0x0f) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4;\r\n            if (code < 0x010000 || code > 0x10ffff) {\r\n                throw Error('Invalid continuation byte');\r\n            }\r\n        }\r\n        else {\r\n            throw Error('Invalid UTF-8 detected');\r\n        }\r\n        if (code > 0xffff) {\r\n            code -= 0x10000;\r\n            result.push(String.fromCharCode(code >>> 10 & 0x3ff | 0xd800));\r\n            code = 0xdc00 | code & 0x3ff;\r\n        }\r\n        result.push(String.fromCharCode(code));\r\n    }\r\n    return result.join('');\r\n}\r\nexports.decodeString = decodeString;\r\n//# sourceMappingURL=utf8.js.map","function charLengthInBytes(code: number): number {\r\n\tif ((code & 0xffffff80) === 0) {\r\n\t\treturn 1;\r\n\t} else if ((code & 0xfffff800) === 0) {\r\n\t\treturn 2;\r\n\t} else if ((code & 0xffff0000) === 0) {\r\n\t\treturn 3;\r\n\t} else {\r\n\t\treturn 4;\r\n\t}\r\n}\r\n\r\nexport function stringLengthInBytes(value: string): number {\r\n\tlet result = 0;\r\n\r\n\tfor (let i = 0; i < value.length; i++) {\r\n\t\tconst code = value.charCodeAt(i);\r\n\r\n\t\t// high surrogate\r\n\t\tif (code >= 0xd800 && code <= 0xdbff) {\r\n\t\t\tif ((i + 1) < value.length) {\r\n\t\t\t\tconst extra = value.charCodeAt(i + 1);\r\n\r\n\t\t\t\t// low surrogate\r\n\t\t\t\tif ((extra & 0xfc00) === 0xdc00) {\r\n\t\t\t\t\ti++;\r\n\t\t\t\t\tresult += charLengthInBytes(((code & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tresult += charLengthInBytes(code);\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\nfunction writeCharacter(buffer: Uint8Array | Buffer, offset: number, code: number): number {\r\n\tconst length = charLengthInBytes(code);\r\n\r\n\tswitch (length) {\r\n\t\tcase 1:\r\n\t\t\tbuffer[offset] = code;\r\n\t\t\tbreak;\r\n\t\tcase 2:\r\n\t\t\tbuffer[offset] = ((code >> 6) & 0x1f) | 0xc0;\r\n\t\t\tbuffer[offset + 1] = (code & 0x3f) | 0x80;\r\n\t\t\tbreak;\r\n\t\tcase 3:\r\n\t\t\tbuffer[offset] = ((code >> 12) & 0x0f) | 0xe0;\r\n\t\t\tbuffer[offset + 1] = ((code >> 6) & 0x3f) | 0x80;\r\n\t\t\tbuffer[offset + 2] = (code & 0x3f) | 0x80;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tbuffer[offset] = ((code >> 18) & 0x07) | 0xf0;\r\n\t\t\tbuffer[offset + 1] = ((code >> 12) & 0x3f) | 0x80;\r\n\t\t\tbuffer[offset + 2] = ((code >> 6) & 0x3f) | 0x80;\r\n\t\t\tbuffer[offset + 3] = (code & 0x3f) | 0x80;\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn length;\r\n}\r\n\r\nexport function encodeStringTo(buffer: Uint8Array | Buffer, offset: number, value: string): number {\r\n\tfor (let i = 0; i < value.length; i++) {\r\n\t\tconst code = value.charCodeAt(i);\r\n\r\n\t\t// high surrogate\r\n\t\tif (code >= 0xd800 && code <= 0xdbff) {\r\n\t\t\tif ((i + 1) < value.length) {\r\n\t\t\t\tconst extra = value.charCodeAt(i + 1);\r\n\r\n\t\t\t\t// low surrogate\r\n\t\t\t\tif ((extra & 0xfc00) === 0xdc00) {\r\n\t\t\t\t\ti++;\r\n\t\t\t\t\tconst fullCode = ((code & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\r\n\t\t\t\t\toffset += writeCharacter(buffer, offset, fullCode);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\toffset += writeCharacter(buffer, offset, code);\r\n\t\t}\r\n\t}\r\n\r\n\treturn offset;\r\n}\r\n\r\nexport function encodeString(value: string): Uint8Array {\r\n\tif (value.length > 1000 && typeof TextEncoder !== 'undefined') {\r\n\t\treturn (new TextEncoder()).encode(value);\r\n\t}\r\n\r\n\tconst buffer = new Uint8Array(stringLengthInBytes(value));\r\n\tencodeStringTo(buffer, 0, value);\r\n\treturn buffer;\r\n}\r\n\r\nfunction continuationByte(buffer: Uint8Array, index: number): number {\r\n\tif (index >= buffer.length) {\r\n\t\tthrow Error('Invalid byte index');\r\n\t}\r\n\r\n\tconst continuationByte = buffer[index];\r\n\r\n\tif ((continuationByte & 0xC0) === 0x80) {\r\n\t\treturn continuationByte & 0x3F;\r\n\t} else {\r\n\t\tthrow Error('Invalid continuation byte');\r\n\t}\r\n}\r\n\r\nexport function decodeString(value: Uint8Array): string {\r\n\tif (value.byteLength > 1000 && typeof TextDecoder !== 'undefined') {\r\n\t\treturn (new TextDecoder()).decode(value);\r\n\t}\r\n\r\n\tlet result: string[] = [];\r\n\r\n\tfor (let i = 0; i < value.length;) {\r\n\t\tconst byte1 = value[i++];\r\n\t\tlet code: number;\r\n\r\n\t\tif ((byte1 & 0x80) === 0) {\r\n\t\t\tcode = byte1;\r\n\t\t} else if ((byte1 & 0xe0) === 0xc0) {\r\n\t\t\tconst byte2 = continuationByte(value, i++);\r\n\t\t\tcode = ((byte1 & 0x1f) << 6) | byte2;\r\n\r\n\t\t\tif (code < 0x80) {\r\n\t\t\t\tthrow Error('Invalid continuation byte');\r\n\t\t\t}\r\n\t\t} else if ((byte1 & 0xf0) === 0xe0) {\r\n\t\t\tconst byte2 = continuationByte(value, i++);\r\n\t\t\tconst byte3 = continuationByte(value, i++);\r\n\t\t\tcode = ((byte1 & 0x0f) << 12) | (byte2 << 6) | byte3;\r\n\r\n\t\t\tif (code < 0x0800) {\r\n\t\t\t\tthrow Error('Invalid continuation byte');\r\n\t\t\t}\r\n\r\n\t\t\tif (code >= 0xd800 && code <= 0xdfff) {\r\n\t\t\t\tthrow Error(`Lone surrogate U+${code.toString(16).toUpperCase()} is not a scalar value`);\r\n\t\t\t}\r\n\t\t} else if ((byte1 & 0xf8) === 0xf0) {\r\n\t\t\tconst byte2 = continuationByte(value, i++);\r\n\t\t\tconst byte3 = continuationByte(value, i++);\r\n\t\t\tconst byte4 = continuationByte(value, i++);\r\n\t\t\tcode = ((byte1 & 0x0f) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4;\r\n\r\n\t\t\tif (code < 0x010000 || code > 0x10ffff) {\r\n\t\t\t\tthrow Error('Invalid continuation byte');\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow Error('Invalid UTF-8 detected');\r\n\t\t}\r\n\r\n\t\tif (code > 0xffff) {\r\n\t\t\tcode -= 0x10000;\r\n\t\t\tresult.push(String.fromCharCode(code >>> 10 & 0x3ff | 0xd800));\r\n\t\t\tcode = 0xdc00 | code & 0x3ff;\r\n\t\t}\r\n\r\n\t\tresult.push(String.fromCharCode(code));\r\n\t}\r\n\r\n\treturn result.join('');\r\n}\r\n","\"use strict\";\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __rest = (this && this.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ESliceOrigin = exports.ESliceVertAlign = exports.ESliceHorzAlign = exports.ESliceType = exports.FrFl = exports.FStl = exports.ClrS = exports.gradientInterpolationMethodType = exports.stdTrackID = exports.animInterpStyleEnum = exports.GrdT = exports.IGSr = exports.BETE = exports.BESs = exports.bvlT = exports.BESl = exports.BlnM = exports.warpStyle = exports.Annt = exports.Ornt = exports.textGridding = exports.frac = exports.unitsValue = exports.unitsPercentF = exports.unitsPercent = exports.unitsAngle = exports.parseUnitsToNumber = exports.parseUnitsOrNumber = exports.parseUnits = exports.parsePercentOrAngle = exports.parsePercent = exports.parseAngle = exports.serializeColor = exports.parseColor = exports.serializeVectorContent = exports.parseVectorContent = exports.serializeTrackList = exports.parseTrackList = exports.parseEffects = exports.serializeEffects = exports.boundsToDescBounds = exports.descBoundsToBounds = exports.xyToHorzVrtc = exports.horzVrtcToXY = exports.writeVersionAndDescriptor = exports.readVersionAndDescriptor = exports.writeDescriptorStructure = exports.readDescriptorStructure = exports.readAsciiStringOrClassId = exports.setLogErrors = void 0;\r\nexports.presetKindType = exports.prjM = exports.FlMd = exports.IntC = exports.IntE = exports.Drct = exports.WndM = exports.CntE = exports.FlCl = exports.ExtR = exports.ExtT = exports.DfsM = exports.blurType = exports.Lns = exports.MztT = exports.Chnl = exports.Dstr = exports.ZZTy = exports.Wvtp = exports.SphM = exports.RplS = exports.Cnvr = exports.UndA = exports.DspM = exports.SmBQ = exports.SmBM = exports.BlrQ = exports.BlrM = exports.strokeStyleLineAlignment = exports.strokeStyleLineJoinType = exports.strokeStyleLineCapType = exports.ESliceBGColorType = void 0;\r\nvar helpers_1 = require(\"./helpers\");\r\nvar psdReader_1 = require(\"./psdReader\");\r\nvar psdWriter_1 = require(\"./psdWriter\");\r\nfunction revMap(map) {\r\n    var result = {};\r\n    Object.keys(map).forEach(function (key) { return result[map[key]] = key; });\r\n    return result;\r\n}\r\nvar unitsMap = {\r\n    '#Ang': 'Angle',\r\n    '#Rsl': 'Density',\r\n    '#Rlt': 'Distance',\r\n    '#Nne': 'None',\r\n    '#Prc': 'Percent',\r\n    '#Pxl': 'Pixels',\r\n    '#Mlm': 'Millimeters',\r\n    '#Pnt': 'Points',\r\n    'RrPi': 'Picas',\r\n    'RrIn': 'Inches',\r\n    'RrCm': 'Centimeters',\r\n};\r\nvar unitsMapRev = revMap(unitsMap);\r\nvar logErrors = false;\r\nfunction setLogErrors(value) {\r\n    logErrors = value;\r\n}\r\nexports.setLogErrors = setLogErrors;\r\nfunction makeType(name, classID) {\r\n    return { name: name, classID: classID };\r\n}\r\nvar nullType = makeType('', 'null');\r\nvar USE_CHINESE = false; // Testing\r\nvar fieldToExtType = {\r\n    strokeStyleContent: makeType('', 'solidColorLayer'),\r\n    printProofSetup: makeType(USE_CHINESE ? '校样设置' : 'Proof Setup', 'proofSetup'),\r\n    Grad: makeType(USE_CHINESE ? '渐变' : 'Gradient', 'Grdn'),\r\n    Trnf: makeType(USE_CHINESE ? '变换' : 'Transform', 'Trnf'),\r\n    patternFill: makeType('', 'patternFill'),\r\n    ebbl: makeType('', 'ebbl'),\r\n    SoFi: makeType('', 'SoFi'),\r\n    GrFl: makeType('', 'GrFl'),\r\n    sdwC: makeType('', 'RGBC'),\r\n    hglC: makeType('', 'RGBC'),\r\n    'Clr ': makeType('', 'RGBC'),\r\n    'tintColor': makeType('', 'RGBC'),\r\n    Ofst: makeType('', 'Pnt '),\r\n    ChFX: makeType('', 'ChFX'),\r\n    MpgS: makeType('', 'ShpC'),\r\n    DrSh: makeType('', 'DrSh'),\r\n    IrSh: makeType('', 'IrSh'),\r\n    OrGl: makeType('', 'OrGl'),\r\n    IrGl: makeType('', 'IrGl'),\r\n    TrnS: makeType('', 'ShpC'),\r\n    Ptrn: makeType('', 'Ptrn'),\r\n    FrFX: makeType('', 'FrFX'),\r\n    phase: makeType('', 'Pnt '),\r\n    frameStep: nullType,\r\n    duration: nullType,\r\n    workInTime: nullType,\r\n    workOutTime: nullType,\r\n    audioClipGroupList: nullType,\r\n    bounds: makeType('', 'Rctn'),\r\n    customEnvelopeWarp: makeType('', 'customEnvelopeWarp'),\r\n    warp: makeType('', 'warp'),\r\n    'Sz  ': makeType('', 'Pnt '),\r\n    origin: makeType('', 'Pnt '),\r\n    autoExpandOffset: makeType('', 'Pnt '),\r\n    keyOriginShapeBBox: makeType('', 'unitRect'),\r\n    Vrsn: nullType,\r\n    psVersion: nullType,\r\n    docDefaultNewArtboardBackgroundColor: makeType('', 'RGBC'),\r\n    artboardRect: makeType('', 'classFloatRect'),\r\n    keyOriginRRectRadii: makeType('', 'radii'),\r\n    keyOriginBoxCorners: nullType,\r\n    rectangleCornerA: makeType('', 'Pnt '),\r\n    rectangleCornerB: makeType('', 'Pnt '),\r\n    rectangleCornerC: makeType('', 'Pnt '),\r\n    rectangleCornerD: makeType('', 'Pnt '),\r\n    compInfo: nullType,\r\n    quiltWarp: makeType('', 'quiltWarp'),\r\n    generatorSettings: nullType,\r\n    crema: nullType,\r\n    FrIn: nullType,\r\n    blendOptions: nullType,\r\n    FXRf: nullType,\r\n    Lefx: nullType,\r\n    time: nullType,\r\n    animKey: nullType,\r\n    timeScope: nullType,\r\n    inTime: nullType,\r\n    outTime: nullType,\r\n    sheetStyle: nullType,\r\n    translation: nullType,\r\n    Skew: nullType,\r\n    boundingBox: makeType('', 'boundingBox'),\r\n    'Lnk ': makeType('', 'ExternalFileLink'),\r\n    frameReader: makeType('', 'FrameReader'),\r\n    effectParams: makeType('', 'motionTrackEffectParams'),\r\n    Impr: makeType('None', 'none'),\r\n    Anch: makeType('', 'Pnt '),\r\n    'Fwd ': makeType('', 'Pnt '),\r\n    'Bwd ': makeType('', 'Pnt '),\r\n    FlrC: makeType('', 'Pnt '),\r\n    meshBoundaryPath: makeType('', 'pathClass'),\r\n    filterFX: makeType('', 'filterFXStyle'),\r\n    Fltr: makeType('', 'rigidTransform'),\r\n    FrgC: makeType('', 'RGBC'),\r\n    BckC: makeType('', 'RGBC'),\r\n    sdwM: makeType('Parameters', 'adaptCorrectTones'),\r\n    hglM: makeType('Parameters', 'adaptCorrectTones'),\r\n    customShape: makeType('', 'customShape'),\r\n    origFXRefPoint: nullType,\r\n    FXRefPoint: nullType,\r\n    ClMg: makeType('', 'ClMg'),\r\n};\r\nvar fieldToArrayExtType = {\r\n    'Crv ': makeType('', 'CrPt'),\r\n    Clrs: makeType('', 'Clrt'),\r\n    Trns: makeType('', 'TrnS'),\r\n    keyDescriptorList: nullType,\r\n    solidFillMulti: makeType('', 'SoFi'),\r\n    gradientFillMulti: makeType('', 'GrFl'),\r\n    dropShadowMulti: makeType('', 'DrSh'),\r\n    innerShadowMulti: makeType('', 'IrSh'),\r\n    frameFXMulti: makeType('', 'FrFX'),\r\n    FrIn: nullType,\r\n    FSts: nullType,\r\n    LaSt: nullType,\r\n    sheetTimelineOptions: nullType,\r\n    trackList: makeType('', 'animationTrack'),\r\n    globalTrackList: makeType('', 'animationTrack'),\r\n    keyList: nullType,\r\n    audioClipGroupList: nullType,\r\n    audioClipList: nullType,\r\n    countObjectList: makeType('', 'countObject'),\r\n    countGroupList: makeType('', 'countGroup'),\r\n    slices: makeType('', 'slice'),\r\n    'Pts ': makeType('', 'Pthp'),\r\n    SbpL: makeType('', 'SbpL'),\r\n    pathComponents: makeType('', 'PaCm'),\r\n    filterFXList: makeType('', 'filterFX'),\r\n    puppetShapeList: makeType('', 'puppetShape'),\r\n    channelDenoise: makeType('', 'channelDenoiseParams'),\r\n    ShrP: makeType('', 'Pnt '),\r\n    layerSettings: nullType,\r\n    list: nullType,\r\n    Adjs: makeType('', 'CrvA'),\r\n};\r\nvar typeToField = {\r\n    'TEXT': [\r\n        'Txt ', 'printerName', 'Nm  ', 'Idnt', 'blackAndWhitePresetFileName', 'LUT3DFileName',\r\n        'presetFileName', 'curvesPresetFileName', 'mixerPresetFileName', 'placed', 'description', 'reason',\r\n        'artboardPresetName', 'json', 'clipID', 'relPath', 'fullPath', 'mediaDescriptor', 'Msge',\r\n        'altTag', 'url', 'cellText', 'preset', 'KnNm', 'FPth', 'comment', 'originalPath',\r\n    ],\r\n    'tdta': [\r\n        'EngineData', 'LUT3DFileData', 'indexArray', 'originalVertexArray', 'deformedVertexArray',\r\n        'LqMe',\r\n    ],\r\n    'long': [\r\n        'TextIndex', 'RndS', 'Mdpn', 'Smth', 'Lctn', 'strokeStyleVersion', 'LaID', 'Vrsn', 'Cnt ',\r\n        'Brgh', 'Cntr', 'means', 'vibrance', 'Strt', 'bwPresetKind', 'comp', 'compID', 'originalCompID',\r\n        'curvesPresetKind', 'mixerPresetKind', 'uOrder', 'vOrder', 'PgNm', 'totalPages', 'Crop',\r\n        'numerator', 'denominator', 'frameCount', 'Annt', 'keyOriginType', 'unitValueQuadVersion',\r\n        'keyOriginIndex', 'major', 'minor', 'fix', 'docDefaultNewArtboardBackgroundType', 'artboardBackgroundType',\r\n        'numModifyingFX', 'deformNumRows', 'deformNumCols', 'FrID', 'FrDl', 'FsID', 'LCnt', 'AFrm', 'AFSt',\r\n        'numBefore', 'numAfter', 'Spcn', 'minOpacity', 'maxOpacity', 'BlnM', 'sheetID', 'gblA', 'globalAltitude',\r\n        'descVersion', 'frameReaderType', 'LyrI', 'zoomOrigin', 'fontSize', 'Rds ', 'sliceID',\r\n        'topOutset', 'leftOutset', 'bottomOutset', 'rightOutset', 'filterID', 'meshQuality',\r\n        'meshExpansion', 'meshRigidity', 'VrsM', 'VrsN', 'NmbG', 'WLMn', 'WLMx', 'AmMn', 'AmMx', 'SclH', 'SclV',\r\n        'Lvl ', 'TlNm', 'TlOf', 'FlRs', 'Thsh', 'ShrS', 'ShrE', 'FlRs', 'Vrnc', 'Strg', 'ExtS', 'ExtD',\r\n        'HrzS', 'VrtS', 'NmbR', 'EdgF', 'Ang1', 'Ang2', 'Ang3', 'Ang4', 'lastAppliedComp', 'capturedInfo',\r\n    ],\r\n    'enum': [\r\n        'textGridding', 'Ornt', 'warpStyle', 'warpRotate', 'Inte', 'Bltn', 'ClrS', 'BlrQ',\r\n        'bvlT', 'bvlS', 'bvlD', 'Md  ', 'glwS', 'GrdF', 'GlwT', 'RplS', 'BlrM', 'SmBM',\r\n        'strokeStyleLineCapType', 'strokeStyleLineJoinType', 'strokeStyleLineAlignment',\r\n        'strokeStyleBlendMode', 'PntT', 'Styl', 'lookupType', 'LUTFormat', 'dataOrder',\r\n        'tableOrder', 'enableCompCore', 'enableCompCoreGPU', 'compCoreSupport', 'compCoreGPUSupport', 'Engn',\r\n        'enableCompCoreThreads', 'gs99', 'FrDs', 'trackID', 'animInterpStyle', 'horzAlign',\r\n        'vertAlign', 'bgColorType', 'shapeOperation', 'UndA', 'Wvtp', 'Drct', 'WndM', 'Edg ', 'FlCl', 'IntE',\r\n        'IntC', 'Cnvr', 'Fl  ', 'Dstr', 'MztT', 'Lns ', 'ExtT', 'DspM', 'ExtR', 'ZZTy', 'SphM', 'SmBQ', 'placedLayerOCIOConversion', 'gradientsInterpolationMethod',\r\n    ],\r\n    'bool': [\r\n        'PstS', 'printSixteenBit', 'masterFXSwitch', 'enab', 'uglg', 'antialiasGloss',\r\n        'useShape', 'useTexture', 'uglg', 'antialiasGloss', 'useShape', 'Vsbl',\r\n        'useTexture', 'Algn', 'Rvrs', 'Dthr', 'Invr', 'VctC', 'ShTr', 'layerConceals',\r\n        'strokeEnabled', 'fillEnabled', 'strokeStyleScaleLock', 'strokeStyleStrokeAdjust',\r\n        'hardProof', 'MpBl', 'paperWhite', 'useLegacy', 'Auto', 'Lab ', 'useTint', 'keyShapeInvalidated',\r\n        'autoExpandEnabled', 'autoNestEnabled', 'autoPositionEnabled', 'shrinkwrapOnSaveEnabled',\r\n        'present', 'showInDialog', 'overprint', 'sheetDisclosed', 'lightsDisclosed', 'meshesDisclosed',\r\n        'materialsDisclosed', 'hasMotion', 'muted', 'Effc', 'selected', 'autoScope', 'fillCanvas',\r\n        'cellTextIsHTML', 'Smoo', 'Clsp', 'validAtPosition', 'rigidType', 'hasoptions', 'filterMaskEnable',\r\n        'filterMaskLinked', 'filterMaskExtendWithWhite', 'removeJPEGArtifact', 'Mnch', 'ExtF', 'ExtM',\r\n        'moreAccurate', 'GpuY', 'LIWy', 'Cnty',\r\n    ],\r\n    'doub': [\r\n        'warpValue', 'warpPerspective', 'warpPerspectiveOther', 'Intr', 'Wdth', 'Hght',\r\n        'strokeStyleMiterLimit', 'strokeStyleResolution', 'layerTime', 'keyOriginResolution',\r\n        'xx', 'xy', 'yx', 'yy', 'tx', 'ty', 'FrGA', 'frameRate', 'audioLevel', 'rotation',\r\n        'X   ', 'Y   ', 'redFloat', 'greenFloat', 'blueFloat', 'imageResolution',\r\n        'PuX0', 'PuX1', 'PuX2', 'PuX3', 'PuY0', 'PuY1', 'PuY2', 'PuY3'\r\n    ],\r\n    'UntF': [\r\n        'sdwO', 'hglO', 'lagl', 'Lald', 'srgR', 'blur', 'Sftn', 'Opct', 'Dstn', 'Angl',\r\n        'Ckmt', 'Nose', 'Inpr', 'ShdN', 'strokeStyleLineWidth', 'strokeStyleLineDashOffset',\r\n        'strokeStyleOpacity', 'H   ', 'Top ', 'Left', 'Btom', 'Rght', 'Rslt',\r\n        'topRight', 'topLeft', 'bottomLeft', 'bottomRight', 'ClNs', 'Shrp',\r\n    ],\r\n    'VlLs': [\r\n        'Crv ', 'Clrs', 'Mnm ', 'Mxm ', 'Trns', 'pathList', 'strokeStyleLineDashSet', 'FrLs', 'slices',\r\n        'LaSt', 'Trnf', 'nonAffineTransform', 'keyDescriptorList', 'guideIndeces', 'gradientFillMulti',\r\n        'solidFillMulti', 'frameFXMulti', 'innerShadowMulti', 'dropShadowMulti', 'FrIn', 'FSts', 'FsFr',\r\n        'sheetTimelineOptions', 'audioClipList', 'trackList', 'globalTrackList', 'keyList', 'audioClipList',\r\n        'warpValues', 'selectedPin', 'Pts ', 'SbpL', 'pathComponents', 'pinOffsets', 'posFinalPins',\r\n        'pinVertexIndices', 'PinP', 'PnRt', 'PnOv', 'PnDp', 'filterFXList', 'puppetShapeList', 'ShrP',\r\n        'channelDenoise', 'Mtrx', 'layerSettings', 'list', 'compList', 'Adjs',\r\n    ],\r\n    'ObAr': ['meshPoints', 'quiltSliceX', 'quiltSliceY'],\r\n    'obj ': ['null', 'Chnl'],\r\n    'Pth ': ['DspF'],\r\n};\r\nvar channels = [\r\n    'Rd  ', 'Grn ', 'Bl  ', 'Yllw', 'Ylw ', 'Cyn ', 'Mgnt', 'Blck', 'Gry ', 'Lmnc', 'A   ', 'B   ',\r\n];\r\nvar fieldToArrayType = {\r\n    'Mnm ': 'long',\r\n    'Mxm ': 'long',\r\n    FrLs: 'long',\r\n    strokeStyleLineDashSet: 'UntF',\r\n    Trnf: 'doub',\r\n    nonAffineTransform: 'doub',\r\n    keyDescriptorList: 'Objc',\r\n    gradientFillMulti: 'Objc',\r\n    solidFillMulti: 'Objc',\r\n    frameFXMulti: 'Objc',\r\n    innerShadowMulti: 'Objc',\r\n    dropShadowMulti: 'Objc',\r\n    LaSt: 'Objc',\r\n    FrIn: 'Objc',\r\n    FSts: 'Objc',\r\n    FsFr: 'long',\r\n    blendOptions: 'Objc',\r\n    sheetTimelineOptions: 'Objc',\r\n    keyList: 'Objc',\r\n    warpValues: 'doub',\r\n    selectedPin: 'long',\r\n    'Pts ': 'Objc',\r\n    SbpL: 'Objc',\r\n    pathComponents: 'Objc',\r\n    pinOffsets: 'doub',\r\n    posFinalPins: 'doub',\r\n    pinVertexIndices: 'long',\r\n    PinP: 'doub',\r\n    PnRt: 'long',\r\n    PnOv: 'bool',\r\n    PnDp: 'doub',\r\n    filterFXList: 'Objc',\r\n    puppetShapeList: 'Objc',\r\n    ShrP: 'Objc',\r\n    channelDenoise: 'Objc',\r\n    Mtrx: 'long',\r\n    compList: 'long',\r\n    Chnl: 'enum',\r\n};\r\nvar fieldToType = {};\r\nfor (var _i = 0, _a = Object.keys(typeToField); _i < _a.length; _i++) {\r\n    var type = _a[_i];\r\n    for (var _b = 0, _c = typeToField[type]; _b < _c.length; _b++) {\r\n        var field = _c[_b];\r\n        fieldToType[field] = type;\r\n    }\r\n}\r\nfor (var _d = 0, _e = Object.keys(fieldToExtType); _d < _e.length; _d++) {\r\n    var field = _e[_d];\r\n    if (!fieldToType[field])\r\n        fieldToType[field] = 'Objc';\r\n}\r\nfor (var _f = 0, _g = Object.keys(fieldToArrayExtType); _f < _g.length; _f++) {\r\n    var field = _g[_f];\r\n    fieldToArrayType[field] = 'Objc';\r\n}\r\nfunction getTypeByKey(key, value, root, parent) {\r\n    if (key === 'presetKind') {\r\n        return typeof value === 'string' ? 'enum' : 'long';\r\n    }\r\n    if (key === 'null' && root === 'slices') {\r\n        return 'TEXT';\r\n    }\r\n    else if (key === 'groupID') {\r\n        return root === 'slices' ? 'long' : 'TEXT';\r\n    }\r\n    else if (key === 'Sz  ') {\r\n        return ('Wdth' in value) ? 'Objc' : (('units' in value) ? 'UntF' : 'doub');\r\n    }\r\n    else if (key === 'Type') {\r\n        return typeof value === 'string' ? 'enum' : 'long';\r\n    }\r\n    else if (key === 'AntA') {\r\n        return typeof value === 'string' ? 'enum' : 'bool';\r\n    }\r\n    else if ((key === 'Hrzn' || key === 'Vrtc') && (parent.Type === 'keyType.Pstn' || parent._classID === 'Ofst')) {\r\n        return 'long';\r\n    }\r\n    else if (key === 'Hrzn' || key === 'Vrtc' || key === 'Top ' || key === 'Left' || key === 'Btom' || key === 'Rght') {\r\n        if (root === 'slices')\r\n            return 'long';\r\n        return typeof value === 'number' ? 'doub' : 'UntF';\r\n    }\r\n    else if (key === 'Vrsn') {\r\n        return typeof value === 'number' ? 'long' : 'Objc';\r\n    }\r\n    else if (key === 'Rd  ' || key === 'Grn ' || key === 'Bl  ') {\r\n        return root === 'artd' ? 'long' : 'doub';\r\n    }\r\n    else if (key === 'Trnf') {\r\n        return Array.isArray(value) ? 'VlLs' : 'Objc';\r\n    }\r\n    else {\r\n        return fieldToType[key];\r\n    }\r\n}\r\nfunction readAsciiStringOrClassId(reader) {\r\n    var length = (0, psdReader_1.readInt32)(reader);\r\n    return (0, psdReader_1.readAsciiString)(reader, length || 4);\r\n}\r\nexports.readAsciiStringOrClassId = readAsciiStringOrClassId;\r\nfunction writeAsciiStringOrClassId(writer, value) {\r\n    if (value.length === 4 && value !== 'warp' && value !== 'time' && value !== 'hold' && value !== 'list') {\r\n        // write classId\r\n        (0, psdWriter_1.writeInt32)(writer, 0);\r\n        (0, psdWriter_1.writeSignature)(writer, value);\r\n    }\r\n    else {\r\n        // write ascii string\r\n        (0, psdWriter_1.writeInt32)(writer, value.length);\r\n        for (var i = 0; i < value.length; i++) {\r\n            (0, psdWriter_1.writeUint8)(writer, value.charCodeAt(i));\r\n        }\r\n    }\r\n}\r\nfunction readDescriptorStructure(reader, includeClass) {\r\n    var struct = readClassStructure(reader);\r\n    var object = includeClass ? { _name: struct.name, _classID: struct.classID } : {};\r\n    // console.log('>> ', struct);\r\n    var itemsCount = (0, psdReader_1.readUint32)(reader);\r\n    for (var i = 0; i < itemsCount; i++) {\r\n        var key = readAsciiStringOrClassId(reader);\r\n        var type = (0, psdReader_1.readSignature)(reader);\r\n        // console.log(`> '${key}' '${type}'`);\r\n        var data = readOSType(reader, type, includeClass);\r\n        // if (!getTypeByKey(key, data)) console.log(`> '${key}' '${type}'`, data);\r\n        object[key] = data;\r\n    }\r\n    return object;\r\n}\r\nexports.readDescriptorStructure = readDescriptorStructure;\r\nfunction writeDescriptorStructure(writer, name, classId, value, root) {\r\n    if (logErrors && !classId)\r\n        console.log('Missing classId for: ', name, classId, value);\r\n    // write class structure\r\n    (0, psdWriter_1.writeUnicodeStringWithPadding)(writer, name);\r\n    writeAsciiStringOrClassId(writer, classId);\r\n    var keys = Object.keys(value);\r\n    var keyCount = keys.length;\r\n    if ('_name' in value)\r\n        keyCount--;\r\n    if ('_classID' in value)\r\n        keyCount--;\r\n    (0, psdWriter_1.writeUint32)(writer, keyCount);\r\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\r\n        var key = keys_1[_i];\r\n        if (key === '_name' || key === '_classID')\r\n            continue;\r\n        var type = getTypeByKey(key, value[key], root, value);\r\n        var extType = fieldToExtType[key];\r\n        if (key === 'bounds' && root === 'text') {\r\n            extType = makeType('', 'bounds');\r\n        }\r\n        else if (key === 'origin') {\r\n            type = root === 'slices' ? 'enum' : 'Objc';\r\n        }\r\n        else if ((key === 'Cyn ' || key === 'Mgnt' || key === 'Ylw ' || key === 'Blck') && value._classID === 'CMYC') {\r\n            type = 'doub';\r\n        }\r\n        else if (/^PN[a-z][a-z]$/.test(key)) {\r\n            type = 'TEXT';\r\n        }\r\n        else if (/^PT[a-z][a-z]$/.test(key)) {\r\n            type = 'long';\r\n        }\r\n        else if (/^PF[a-z][a-z]$/.test(key)) {\r\n            type = 'doub';\r\n        }\r\n        else if ((key === 'Rds ' || key === 'Thsh') && typeof value[key] === 'number' && value._classID === 'SmrB') {\r\n            type = 'doub';\r\n        }\r\n        else if (key === 'ClSz' || key === 'Rds ' || key === 'Amnt') {\r\n            type = typeof value[key] === 'number' ? 'long' : 'UntF';\r\n        }\r\n        else if ((key === 'sdwM' || key === 'hglM') && typeof value[key] === 'string') {\r\n            type = 'enum';\r\n        }\r\n        else if (key === 'blur' && typeof value[key] === 'string') {\r\n            type = 'enum';\r\n        }\r\n        else if (key === 'Hght' && typeof value[key] === 'number' && value._classID === 'Embs') {\r\n            type = 'long';\r\n        }\r\n        else if (key === 'Angl' && typeof value[key] === 'number' && (value._classID === 'Embs' || value._classID === 'smartSharpen' || value._classID === 'Twrl' || value._classID === 'MtnB')) {\r\n            type = 'long';\r\n        }\r\n        else if (key === 'Angl' && typeof value[key] === 'number') {\r\n            type = 'doub'; // ???\r\n        }\r\n        else if (key === 'bounds' && root === 'slices') {\r\n            type = 'Objc';\r\n            extType = makeType('', 'Rct1');\r\n        }\r\n        else if (key === 'Scl ') {\r\n            if (typeof value[key] === 'object' && 'Hrzn' in value[key]) {\r\n                type = 'Objc';\r\n                extType = nullType;\r\n            }\r\n            else if (typeof value[key] === 'number') {\r\n                type = 'long';\r\n            }\r\n            else {\r\n                type = 'UntF';\r\n            }\r\n        }\r\n        else if (key === 'audioClipGroupList' && keys.length === 1) {\r\n            type = 'VlLs';\r\n        }\r\n        else if ((key === 'Strt' || key === 'Brgh') && 'H   ' in value) {\r\n            type = 'doub';\r\n        }\r\n        else if (key === 'Wdth' && typeof value[key] === 'object') {\r\n            type = 'UntF';\r\n        }\r\n        else if (key === 'Ofst' && typeof value[key] === 'number') {\r\n            type = 'long';\r\n        }\r\n        else if (key === 'Strt' && typeof value[key] === 'object') {\r\n            type = 'Objc';\r\n            extType = nullType;\r\n        }\r\n        else if (channels.indexOf(key) !== -1) {\r\n            type = (classId === 'RGBC' && root !== 'artd') ? 'doub' : 'long';\r\n        }\r\n        else if (key === 'profile') {\r\n            type = classId === 'printOutput' ? 'TEXT' : 'tdta';\r\n        }\r\n        else if (key === 'strokeStyleContent') {\r\n            if (value[key]['Clr ']) {\r\n                extType = makeType('', 'solidColorLayer');\r\n            }\r\n            else if (value[key].Grad) {\r\n                extType = makeType('', 'gradientLayer');\r\n            }\r\n            else if (value[key].Ptrn) {\r\n                extType = makeType('', 'patternLayer');\r\n            }\r\n            else {\r\n                logErrors && console.log('Invalid strokeStyleContent value', value[key]);\r\n            }\r\n        }\r\n        else if (key === 'bounds' && root === 'quiltWarp') {\r\n            extType = makeType('', 'classFloatRect');\r\n        }\r\n        if (extType && extType.classID === 'RGBC') {\r\n            if ('H   ' in value[key])\r\n                extType = { classID: 'HSBC', name: '' };\r\n            // TODO: other color spaces\r\n        }\r\n        writeAsciiStringOrClassId(writer, key);\r\n        (0, psdWriter_1.writeSignature)(writer, type || 'long');\r\n        writeOSType(writer, type || 'long', value[key], key, extType, root);\r\n        if (logErrors && !type)\r\n            console.log(\"Missing descriptor field type for: '\".concat(key, \"' in\"), value);\r\n    }\r\n}\r\nexports.writeDescriptorStructure = writeDescriptorStructure;\r\nfunction readOSType(reader, type, includeClass) {\r\n    switch (type) {\r\n        case 'obj ': // Reference\r\n            return readReferenceStructure(reader);\r\n        case 'Objc': // Descriptor\r\n        case 'GlbO': // GlobalObject same as Descriptor\r\n            return readDescriptorStructure(reader, includeClass);\r\n        case 'VlLs': { // List\r\n            var length_1 = (0, psdReader_1.readInt32)(reader);\r\n            var items = [];\r\n            for (var i = 0; i < length_1; i++) {\r\n                var itemType = (0, psdReader_1.readSignature)(reader);\r\n                // console.log('  >', itemType);\r\n                items.push(readOSType(reader, itemType, includeClass));\r\n            }\r\n            return items;\r\n        }\r\n        case 'doub': // Double\r\n            return (0, psdReader_1.readFloat64)(reader);\r\n        case 'UntF': { // Unit double\r\n            var units = (0, psdReader_1.readSignature)(reader);\r\n            var value = (0, psdReader_1.readFloat64)(reader);\r\n            if (!unitsMap[units])\r\n                throw new Error(\"Invalid units: \".concat(units));\r\n            return { units: unitsMap[units], value: value };\r\n        }\r\n        case 'UnFl': { // Unit float\r\n            var units = (0, psdReader_1.readSignature)(reader);\r\n            var value = (0, psdReader_1.readFloat32)(reader);\r\n            if (!unitsMap[units])\r\n                throw new Error(\"Invalid units: \".concat(units));\r\n            return { units: unitsMap[units], value: value };\r\n        }\r\n        case 'TEXT': // String\r\n            return (0, psdReader_1.readUnicodeString)(reader);\r\n        case 'enum': { // Enumerated\r\n            var enumType = readAsciiStringOrClassId(reader);\r\n            var value = readAsciiStringOrClassId(reader);\r\n            return \"\".concat(enumType, \".\").concat(value);\r\n        }\r\n        case 'long': // Integer\r\n            return (0, psdReader_1.readInt32)(reader);\r\n        case 'comp': { // Large Integer\r\n            var low = (0, psdReader_1.readUint32)(reader);\r\n            var high = (0, psdReader_1.readUint32)(reader);\r\n            return { low: low, high: high };\r\n        }\r\n        case 'bool': // Boolean\r\n            return !!(0, psdReader_1.readUint8)(reader);\r\n        case 'type': // Class\r\n        case 'GlbC': // Class\r\n            return readClassStructure(reader);\r\n        case 'alis': { // Alias\r\n            var length_2 = (0, psdReader_1.readInt32)(reader);\r\n            return (0, psdReader_1.readAsciiString)(reader, length_2);\r\n        }\r\n        case 'tdta': { // Raw Data\r\n            var length_3 = (0, psdReader_1.readInt32)(reader);\r\n            return (0, psdReader_1.readBytes)(reader, length_3);\r\n        }\r\n        case 'ObAr': { // Object array\r\n            (0, psdReader_1.readInt32)(reader); // version: 16\r\n            (0, psdReader_1.readUnicodeString)(reader); // name: ''\r\n            readAsciiStringOrClassId(reader); // 'rationalPoint'\r\n            var length_4 = (0, psdReader_1.readInt32)(reader);\r\n            var items = [];\r\n            for (var i = 0; i < length_4; i++) {\r\n                var type1 = readAsciiStringOrClassId(reader); // type Hrzn | Vrtc\r\n                (0, psdReader_1.readSignature)(reader); // UnFl\r\n                (0, psdReader_1.readSignature)(reader); // units ? '#Pxl'\r\n                var valuesCount = (0, psdReader_1.readInt32)(reader);\r\n                var values = [];\r\n                for (var j = 0; j < valuesCount; j++) {\r\n                    values.push((0, psdReader_1.readFloat64)(reader));\r\n                }\r\n                items.push({ type: type1, values: values });\r\n            }\r\n            return items;\r\n        }\r\n        case 'Pth ': { // File path\r\n            /*const length =*/ (0, psdReader_1.readInt32)(reader); // total size of all fields below\r\n            var sig = (0, psdReader_1.readSignature)(reader);\r\n            /*const pathSize =*/ (0, psdReader_1.readInt32LE)(reader); // the same as length\r\n            var charsCount = (0, psdReader_1.readInt32LE)(reader);\r\n            var path = (0, psdReader_1.readUnicodeStringWithLengthLE)(reader, charsCount);\r\n            return { sig: sig, path: path };\r\n        }\r\n        default:\r\n            throw new Error(\"Invalid TySh descriptor OSType: \".concat(type, \" at \").concat(reader.offset.toString(16)));\r\n    }\r\n}\r\nvar ObArTypes = {\r\n    meshPoints: 'rationalPoint',\r\n    quiltSliceX: 'UntF',\r\n    quiltSliceY: 'UntF',\r\n};\r\nfunction writeOSType(writer, type, value, key, extType, root) {\r\n    switch (type) {\r\n        case 'obj ': // Reference\r\n            writeReferenceStructure(writer, key, value);\r\n            break;\r\n        case 'Objc': // Descriptor\r\n        case 'GlbO': { // GlobalObject same as Descriptor\r\n            if (typeof value !== 'object')\r\n                throw new Error(\"Invalid struct value: \".concat(JSON.stringify(value), \", key: \").concat(key));\r\n            if (!extType)\r\n                throw new Error(\"Missing ext type for: '\".concat(key, \"' (\").concat(JSON.stringify(value), \")\"));\r\n            var name_1 = value._name || extType.name;\r\n            var classID = value._classID || extType.classID;\r\n            writeDescriptorStructure(writer, name_1, classID, value, root);\r\n            break;\r\n        }\r\n        case 'VlLs': // List\r\n            if (!Array.isArray(value))\r\n                throw new Error(\"Invalid list value: \".concat(JSON.stringify(value), \", key: \").concat(key));\r\n            (0, psdWriter_1.writeInt32)(writer, value.length);\r\n            for (var i = 0; i < value.length; i++) {\r\n                var type_1 = fieldToArrayType[key];\r\n                (0, psdWriter_1.writeSignature)(writer, type_1 || 'long');\r\n                writeOSType(writer, type_1 || 'long', value[i], \"\".concat(key, \"[]\"), fieldToArrayExtType[key], root);\r\n                if (logErrors && !type_1)\r\n                    console.log(\"Missing descriptor array type for: '\".concat(key, \"' in\"), value);\r\n            }\r\n            break;\r\n        case 'doub': // Double\r\n            if (typeof value !== 'number')\r\n                throw new Error(\"Invalid number value: \".concat(JSON.stringify(value), \", key: \").concat(key));\r\n            (0, psdWriter_1.writeFloat64)(writer, value);\r\n            break;\r\n        case 'UntF': // Unit double\r\n            if (!unitsMapRev[value.units])\r\n                throw new Error(\"Invalid units: \".concat(value.units, \" in \").concat(key));\r\n            (0, psdWriter_1.writeSignature)(writer, unitsMapRev[value.units]);\r\n            (0, psdWriter_1.writeFloat64)(writer, value.value);\r\n            break;\r\n        case 'UnFl': // Unit float\r\n            if (!unitsMapRev[value.units])\r\n                throw new Error(\"Invalid units: \".concat(value.units, \" in \").concat(key));\r\n            (0, psdWriter_1.writeSignature)(writer, unitsMapRev[value.units]);\r\n            (0, psdWriter_1.writeFloat32)(writer, value.value);\r\n            break;\r\n        case 'TEXT': // String\r\n            (0, psdWriter_1.writeUnicodeStringWithPadding)(writer, value);\r\n            break;\r\n        case 'enum': { // Enumerated\r\n            if (typeof value !== 'string')\r\n                throw new Error(\"Invalid enum value: \".concat(JSON.stringify(value), \", key: \").concat(key));\r\n            var _a = value.split('.'), _type = _a[0], val = _a[1];\r\n            writeAsciiStringOrClassId(writer, _type);\r\n            writeAsciiStringOrClassId(writer, val);\r\n            break;\r\n        }\r\n        case 'long': // Integer\r\n            if (typeof value !== 'number')\r\n                throw new Error(\"Invalid integer value: \".concat(JSON.stringify(value), \", key: \").concat(key));\r\n            (0, psdWriter_1.writeInt32)(writer, value);\r\n            break;\r\n        // case 'comp': // Large Integer\r\n        // \twriteLargeInteger(reader);\r\n        case 'bool': // Boolean\r\n            if (typeof value !== 'boolean')\r\n                throw new Error(\"Invalid boolean value: \".concat(JSON.stringify(value), \", key: \").concat(key));\r\n            (0, psdWriter_1.writeUint8)(writer, value ? 1 : 0);\r\n            break;\r\n        // case 'type': // Class\r\n        // case 'GlbC': // Class\r\n        // \twriteClassStructure(reader);\r\n        // case 'alis': // Alias\r\n        // \twriteAliasStructure(reader);\r\n        case 'tdta': // Raw Data\r\n            (0, psdWriter_1.writeInt32)(writer, value.byteLength);\r\n            (0, psdWriter_1.writeBytes)(writer, value);\r\n            break;\r\n        case 'ObAr': { // Object array\r\n            (0, psdWriter_1.writeInt32)(writer, 16); // version\r\n            (0, psdWriter_1.writeUnicodeStringWithPadding)(writer, ''); // name\r\n            var type_2 = ObArTypes[key];\r\n            if (!type_2)\r\n                throw new Error(\"Not implemented ObArType for: \".concat(key));\r\n            writeAsciiStringOrClassId(writer, type_2);\r\n            (0, psdWriter_1.writeInt32)(writer, value.length);\r\n            for (var i = 0; i < value.length; i++) {\r\n                writeAsciiStringOrClassId(writer, value[i].type); // Hrzn | Vrtc\r\n                (0, psdWriter_1.writeSignature)(writer, 'UnFl');\r\n                (0, psdWriter_1.writeSignature)(writer, '#Pxl');\r\n                (0, psdWriter_1.writeInt32)(writer, value[i].values.length);\r\n                for (var j = 0; j < value[i].values.length; j++) {\r\n                    (0, psdWriter_1.writeFloat64)(writer, value[i].values[j]);\r\n                }\r\n            }\r\n            break;\r\n        }\r\n        case 'Pth ': { // File path\r\n            var length_5 = 4 + 4 + 4 + value.path.length * 2;\r\n            (0, psdWriter_1.writeInt32)(writer, length_5);\r\n            (0, psdWriter_1.writeSignature)(writer, value.sig);\r\n            (0, psdWriter_1.writeInt32LE)(writer, length_5);\r\n            (0, psdWriter_1.writeInt32LE)(writer, value.path.length);\r\n            (0, psdWriter_1.writeUnicodeStringWithoutLengthLE)(writer, value.path);\r\n            break;\r\n        }\r\n        default:\r\n            throw new Error(\"Not implemented descriptor OSType: \".concat(type));\r\n    }\r\n}\r\nfunction readReferenceStructure(reader) {\r\n    var itemsCount = (0, psdReader_1.readInt32)(reader);\r\n    var items = [];\r\n    for (var i = 0; i < itemsCount; i++) {\r\n        var type = (0, psdReader_1.readSignature)(reader);\r\n        switch (type) {\r\n            case 'prop': { // Property\r\n                readClassStructure(reader);\r\n                var keyID = readAsciiStringOrClassId(reader);\r\n                items.push(keyID);\r\n                break;\r\n            }\r\n            case 'Clss': // Class\r\n                items.push(readClassStructure(reader));\r\n                break;\r\n            case 'Enmr': { // Enumerated Reference\r\n                readClassStructure(reader);\r\n                var typeID = readAsciiStringOrClassId(reader);\r\n                var value = readAsciiStringOrClassId(reader);\r\n                items.push(\"\".concat(typeID, \".\").concat(value));\r\n                break;\r\n            }\r\n            case 'rele': { // Offset\r\n                // const { name, classID } =\r\n                readClassStructure(reader);\r\n                items.push((0, psdReader_1.readUint32)(reader));\r\n                break;\r\n            }\r\n            case 'Idnt': // Identifier\r\n                items.push((0, psdReader_1.readInt32)(reader));\r\n                break;\r\n            case 'indx': // Index\r\n                items.push((0, psdReader_1.readInt32)(reader));\r\n                break;\r\n            case 'name': { // Name\r\n                readClassStructure(reader);\r\n                items.push((0, psdReader_1.readUnicodeString)(reader));\r\n                break;\r\n            }\r\n            default:\r\n                throw new Error(\"Invalid descriptor reference type: \".concat(type));\r\n        }\r\n    }\r\n    return items;\r\n}\r\nfunction writeReferenceStructure(writer, _key, items) {\r\n    (0, psdWriter_1.writeInt32)(writer, items.length);\r\n    for (var i = 0; i < items.length; i++) {\r\n        var value = items[i];\r\n        var type = 'unknown';\r\n        if (typeof value === 'string') {\r\n            if (/^[a-z ]+\\.[a-z ]+$/i.test(value)) {\r\n                type = 'Enmr';\r\n            }\r\n            else {\r\n                type = 'name';\r\n            }\r\n        }\r\n        (0, psdWriter_1.writeSignature)(writer, type);\r\n        switch (type) {\r\n            // case 'prop': // Property\r\n            // case 'Clss': // Class\r\n            case 'Enmr': { // Enumerated Reference\r\n                var _a = value.split('.'), typeID = _a[0], enumValue = _a[1];\r\n                writeClassStructure(writer, '\\0', typeID);\r\n                writeAsciiStringOrClassId(writer, typeID);\r\n                writeAsciiStringOrClassId(writer, enumValue);\r\n                break;\r\n            }\r\n            // case 'rele': // Offset\r\n            // case 'Idnt': // Identifier\r\n            // case 'indx': // Index\r\n            case 'name': { // Name\r\n                writeClassStructure(writer, '\\0', 'Lyr ');\r\n                (0, psdWriter_1.writeUnicodeString)(writer, value + '\\0');\r\n                break;\r\n            }\r\n            default:\r\n                throw new Error(\"Invalid descriptor reference type: \".concat(type));\r\n        }\r\n    }\r\n    return items;\r\n}\r\nfunction readClassStructure(reader) {\r\n    var name = (0, psdReader_1.readUnicodeString)(reader);\r\n    var classID = readAsciiStringOrClassId(reader);\r\n    return { name: name, classID: classID };\r\n}\r\nfunction writeClassStructure(writer, name, classID) {\r\n    (0, psdWriter_1.writeUnicodeString)(writer, name);\r\n    writeAsciiStringOrClassId(writer, classID);\r\n}\r\nfunction readVersionAndDescriptor(reader, includeClass) {\r\n    if (includeClass === void 0) { includeClass = false; }\r\n    var version = (0, psdReader_1.readUint32)(reader);\r\n    if (version !== 16)\r\n        throw new Error(\"Invalid descriptor version: \".concat(version));\r\n    var desc = readDescriptorStructure(reader, includeClass);\r\n    // console.log(require('util').inspect(desc, false, 99, true));\r\n    return desc;\r\n}\r\nexports.readVersionAndDescriptor = readVersionAndDescriptor;\r\nfunction writeVersionAndDescriptor(writer, name, classID, descriptor, root) {\r\n    if (root === void 0) { root = ''; }\r\n    (0, psdWriter_1.writeUint32)(writer, 16); // version\r\n    writeDescriptorStructure(writer, name, classID, descriptor, root);\r\n}\r\nexports.writeVersionAndDescriptor = writeVersionAndDescriptor;\r\nfunction horzVrtcToXY(hv) {\r\n    return { x: hv.Hrzn, y: hv.Vrtc };\r\n}\r\nexports.horzVrtcToXY = horzVrtcToXY;\r\nfunction xyToHorzVrtc(xy) {\r\n    return { Hrzn: xy.x, Vrtc: xy.y };\r\n}\r\nexports.xyToHorzVrtc = xyToHorzVrtc;\r\nfunction descBoundsToBounds(desc) {\r\n    return {\r\n        top: parseUnits(desc['Top ']),\r\n        left: parseUnits(desc.Left),\r\n        right: parseUnits(desc.Rght),\r\n        bottom: parseUnits(desc.Btom),\r\n    };\r\n}\r\nexports.descBoundsToBounds = descBoundsToBounds;\r\nfunction boundsToDescBounds(bounds) {\r\n    var _a;\r\n    return _a = {\r\n            Left: unitsValue(bounds.left, 'bounds.left')\r\n        },\r\n        _a['Top '] = unitsValue(bounds.top, 'bounds.top'),\r\n        _a.Rght = unitsValue(bounds.right, 'bounds.right'),\r\n        _a.Btom = unitsValue(bounds.bottom, 'bounds.bottom'),\r\n        _a;\r\n}\r\nexports.boundsToDescBounds = boundsToDescBounds;\r\nfunction parseFxObject(fx) {\r\n    var stroke = {\r\n        enabled: !!fx.enab,\r\n        position: exports.FStl.decode(fx.Styl),\r\n        fillType: exports.FrFl.decode(fx.PntT),\r\n        blendMode: exports.BlnM.decode(fx['Md  ']),\r\n        opacity: parsePercent(fx.Opct),\r\n        size: parseUnits(fx['Sz  ']),\r\n    };\r\n    if (fx.present !== undefined)\r\n        stroke.present = fx.present;\r\n    if (fx.showInDialog !== undefined)\r\n        stroke.showInDialog = fx.showInDialog;\r\n    if (fx.overprint !== undefined)\r\n        stroke.overprint = fx.overprint;\r\n    if (fx['Clr '])\r\n        stroke.color = parseColor(fx['Clr ']);\r\n    if (fx.Grad)\r\n        stroke.gradient = parseGradientContent(fx);\r\n    if (fx.Ptrn)\r\n        stroke.pattern = parsePatternContent(fx);\r\n    return stroke;\r\n}\r\nfunction serializeFxObject(stroke) {\r\n    var FrFX = {};\r\n    FrFX.enab = !!stroke.enabled;\r\n    if (stroke.present !== undefined)\r\n        FrFX.present = !!stroke.present;\r\n    if (stroke.showInDialog !== undefined)\r\n        FrFX.showInDialog = !!stroke.showInDialog;\r\n    FrFX.Styl = exports.FStl.encode(stroke.position);\r\n    FrFX.PntT = exports.FrFl.encode(stroke.fillType);\r\n    FrFX['Md  '] = exports.BlnM.encode(stroke.blendMode);\r\n    FrFX.Opct = unitsPercent(stroke.opacity);\r\n    FrFX['Sz  '] = unitsValue(stroke.size, 'size');\r\n    if (stroke.color)\r\n        FrFX['Clr '] = serializeColor(stroke.color);\r\n    if (stroke.gradient)\r\n        FrFX = __assign(__assign({}, FrFX), serializeGradientContent(stroke.gradient));\r\n    if (stroke.pattern)\r\n        FrFX = __assign(__assign({}, FrFX), serializePatternContent(stroke.pattern));\r\n    if (stroke.overprint !== undefined)\r\n        FrFX.overprint = !!stroke.overprint;\r\n    return FrFX;\r\n}\r\nfunction serializeEffects(e, log, multi) {\r\n    var _a, _b, _c;\r\n    var info = multi ? {\r\n        'Scl ': unitsPercentF((_a = e.scale) !== null && _a !== void 0 ? _a : 1),\r\n        masterFXSwitch: !e.disabled,\r\n    } : {\r\n        masterFXSwitch: !e.disabled,\r\n        'Scl ': unitsPercentF((_b = e.scale) !== null && _b !== void 0 ? _b : 1),\r\n    };\r\n    var arrayKeys = ['dropShadow', 'innerShadow', 'solidFill', 'gradientOverlay', 'stroke'];\r\n    for (var _i = 0, arrayKeys_1 = arrayKeys; _i < arrayKeys_1.length; _i++) {\r\n        var key = arrayKeys_1[_i];\r\n        if (e[key] && !Array.isArray(e[key]))\r\n            throw new Error(\"\".concat(key, \" should be an array\"));\r\n    }\r\n    var useMulti = function (arr) { return !!arr && arr.length > 1 && multi; };\r\n    var useSingle = function (arr) { return !!arr && arr.length >= 1 && (!multi || arr.length === 1); };\r\n    if (useSingle(e.dropShadow))\r\n        info.DrSh = serializeEffectObject(e.dropShadow[0], 'dropShadow', log);\r\n    if (useMulti(e.dropShadow))\r\n        info.dropShadowMulti = e.dropShadow.map(function (i) { return serializeEffectObject(i, 'dropShadow', log); });\r\n    if (useSingle(e.innerShadow))\r\n        info.IrSh = serializeEffectObject(e.innerShadow[0], 'innerShadow', log);\r\n    if (useMulti(e.innerShadow))\r\n        info.innerShadowMulti = e.innerShadow.map(function (i) { return serializeEffectObject(i, 'innerShadow', log); });\r\n    if (e.outerGlow)\r\n        info.OrGl = serializeEffectObject(e.outerGlow, 'outerGlow', log);\r\n    if (useMulti(e.solidFill))\r\n        info.solidFillMulti = e.solidFill.map(function (i) { return serializeEffectObject(i, 'solidFill', log); });\r\n    if (useMulti(e.gradientOverlay))\r\n        info.gradientFillMulti = e.gradientOverlay.map(function (i) { return serializeEffectObject(i, 'gradientOverlay', log); });\r\n    if (useMulti(e.stroke))\r\n        info.frameFXMulti = e.stroke.map(function (i) { return serializeFxObject(i); });\r\n    if (e.innerGlow)\r\n        info.IrGl = serializeEffectObject(e.innerGlow, 'innerGlow', log);\r\n    if (e.bevel)\r\n        info.ebbl = serializeEffectObject(e.bevel, 'bevel', log);\r\n    if (useSingle(e.solidFill))\r\n        info.SoFi = serializeEffectObject(e.solidFill[0], 'solidFill', log);\r\n    if (e.patternOverlay)\r\n        info.patternFill = serializeEffectObject(e.patternOverlay, 'patternOverlay', log);\r\n    if (useSingle(e.gradientOverlay))\r\n        info.GrFl = serializeEffectObject(e.gradientOverlay[0], 'gradientOverlay', log);\r\n    if (e.satin)\r\n        info.ChFX = serializeEffectObject(e.satin, 'satin', log);\r\n    if (useSingle(e.stroke))\r\n        info.FrFX = serializeFxObject((_c = e.stroke) === null || _c === void 0 ? void 0 : _c[0]);\r\n    if (multi) {\r\n        info.numModifyingFX = 0;\r\n        for (var _d = 0, _e = Object.keys(e); _d < _e.length; _d++) {\r\n            var key = _e[_d];\r\n            var value = e[key];\r\n            if (Array.isArray(value)) {\r\n                for (var _f = 0, value_1 = value; _f < value_1.length; _f++) {\r\n                    var effect = value_1[_f];\r\n                    if (effect.enabled)\r\n                        info.numModifyingFX++;\r\n                }\r\n            }\r\n            else if (value.enabled) {\r\n                info.numModifyingFX++;\r\n            }\r\n        }\r\n    }\r\n    return info;\r\n}\r\nexports.serializeEffects = serializeEffects;\r\nfunction parseEffects(info, log) {\r\n    var effects = {};\r\n    var masterFXSwitch = info.masterFXSwitch, DrSh = info.DrSh, dropShadowMulti = info.dropShadowMulti, IrSh = info.IrSh, innerShadowMulti = info.innerShadowMulti, OrGl = info.OrGl, IrGl = info.IrGl, ebbl = info.ebbl, SoFi = info.SoFi, solidFillMulti = info.solidFillMulti, patternFill = info.patternFill, GrFl = info.GrFl, gradientFillMulti = info.gradientFillMulti, ChFX = info.ChFX, FrFX = info.FrFX, frameFXMulti = info.frameFXMulti, numModifyingFX = info.numModifyingFX, rest = __rest(info, [\"masterFXSwitch\", \"DrSh\", \"dropShadowMulti\", \"IrSh\", \"innerShadowMulti\", \"OrGl\", \"IrGl\", \"ebbl\", \"SoFi\", \"solidFillMulti\", \"patternFill\", \"GrFl\", \"gradientFillMulti\", \"ChFX\", \"FrFX\", \"frameFXMulti\", \"numModifyingFX\"]);\r\n    if (!masterFXSwitch)\r\n        effects.disabled = true;\r\n    if (info['Scl '])\r\n        effects.scale = parsePercent(info['Scl ']);\r\n    if (DrSh)\r\n        effects.dropShadow = [parseEffectObject(DrSh, log)];\r\n    if (dropShadowMulti)\r\n        effects.dropShadow = dropShadowMulti.map(function (i) { return parseEffectObject(i, log); });\r\n    if (IrSh)\r\n        effects.innerShadow = [parseEffectObject(IrSh, log)];\r\n    if (innerShadowMulti)\r\n        effects.innerShadow = innerShadowMulti.map(function (i) { return parseEffectObject(i, log); });\r\n    if (OrGl)\r\n        effects.outerGlow = parseEffectObject(OrGl, log);\r\n    if (IrGl)\r\n        effects.innerGlow = parseEffectObject(IrGl, log);\r\n    if (ebbl)\r\n        effects.bevel = parseEffectObject(ebbl, log);\r\n    if (SoFi)\r\n        effects.solidFill = [parseEffectObject(SoFi, log)];\r\n    if (solidFillMulti)\r\n        effects.solidFill = solidFillMulti.map(function (i) { return parseEffectObject(i, log); });\r\n    if (patternFill)\r\n        effects.patternOverlay = parseEffectObject(patternFill, log);\r\n    if (GrFl)\r\n        effects.gradientOverlay = [parseEffectObject(GrFl, log)];\r\n    if (gradientFillMulti)\r\n        effects.gradientOverlay = gradientFillMulti.map(function (i) { return parseEffectObject(i, log); });\r\n    if (ChFX)\r\n        effects.satin = parseEffectObject(ChFX, log);\r\n    if (FrFX)\r\n        effects.stroke = [parseFxObject(FrFX)];\r\n    if (frameFXMulti)\r\n        effects.stroke = frameFXMulti.map(function (i) { return parseFxObject(i); });\r\n    if (log && Object.keys(rest).length > 1)\r\n        console.log('Unhandled effect keys:', rest);\r\n    return effects;\r\n}\r\nexports.parseEffects = parseEffects;\r\nfunction parseKeyList(keyList, logMissingFeatures) {\r\n    var keys = [];\r\n    for (var j = 0; j < keyList.length; j++) {\r\n        var key = keyList[j];\r\n        var _a = key.time, denominator = _a.denominator, numerator = _a.numerator, selected = key.selected, animKey = key.animKey;\r\n        var time = { numerator: numerator, denominator: denominator };\r\n        var interpolation = exports.animInterpStyleEnum.decode(key.animInterpStyle);\r\n        switch (animKey.Type) {\r\n            case 'keyType.Opct':\r\n                keys.push({ interpolation: interpolation, time: time, selected: selected, type: 'opacity', value: parsePercent(animKey.Opct) });\r\n                break;\r\n            case 'keyType.Pstn':\r\n                keys.push({ interpolation: interpolation, time: time, selected: selected, type: 'position', x: animKey.Hrzn, y: animKey.Vrtc });\r\n                break;\r\n            case 'keyType.Trnf':\r\n                keys.push({\r\n                    interpolation: interpolation,\r\n                    time: time,\r\n                    selected: selected,\r\n                    type: 'transform',\r\n                    scale: horzVrtcToXY(animKey['Scl ']), skew: horzVrtcToXY(animKey.Skew), rotation: animKey.rotation, translation: horzVrtcToXY(animKey.translation)\r\n                });\r\n                break;\r\n            case 'keyType.sheetStyle': {\r\n                var key_1 = { interpolation: interpolation, time: time, selected: selected, type: 'style' };\r\n                if (animKey.sheetStyle.Lefx)\r\n                    key_1.style = parseEffects(animKey.sheetStyle.Lefx, logMissingFeatures);\r\n                keys.push(key_1);\r\n                break;\r\n            }\r\n            case 'keyType.globalLighting': {\r\n                keys.push({\r\n                    interpolation: interpolation,\r\n                    time: time,\r\n                    selected: selected,\r\n                    type: 'globalLighting',\r\n                    globalAngle: animKey.gblA, globalAltitude: animKey.globalAltitude\r\n                });\r\n                break;\r\n            }\r\n            default: throw new Error(\"Unsupported keyType value\");\r\n        }\r\n    }\r\n    return keys;\r\n}\r\nfunction serializeKeyList(keys) {\r\n    var keyList = [];\r\n    for (var j = 0; j < keys.length; j++) {\r\n        var key = keys[j];\r\n        var time = key.time, _a = key.selected, selected = _a === void 0 ? false : _a, interpolation = key.interpolation;\r\n        var animInterpStyle = exports.animInterpStyleEnum.encode(interpolation);\r\n        var animKey = void 0;\r\n        switch (key.type) {\r\n            case 'opacity':\r\n                animKey = { Type: 'keyType.Opct', Opct: unitsPercent(key.value) };\r\n                break;\r\n            case 'position':\r\n                animKey = { Type: 'keyType.Pstn', Hrzn: key.x, Vrtc: key.y };\r\n                break;\r\n            case 'transform':\r\n                animKey = { Type: 'keyType.Trnf', 'Scl ': xyToHorzVrtc(key.scale), Skew: xyToHorzVrtc(key.skew), rotation: key.rotation, translation: xyToHorzVrtc(key.translation) };\r\n                break;\r\n            case 'style':\r\n                animKey = { Type: 'keyType.sheetStyle', sheetStyle: { Vrsn: 1, blendOptions: {} } };\r\n                if (key.style)\r\n                    animKey.sheetStyle = { Vrsn: 1, Lefx: serializeEffects(key.style, false, false), blendOptions: {} };\r\n                break;\r\n            case 'globalLighting': {\r\n                animKey = { Type: 'keyType.globalLighting', gblA: key.globalAngle, globalAltitude: key.globalAltitude };\r\n                break;\r\n            }\r\n            default: throw new Error(\"Unsupported keyType value\");\r\n        }\r\n        keyList.push({ Vrsn: 1, animInterpStyle: animInterpStyle, time: time, animKey: animKey, selected: selected });\r\n    }\r\n    return keyList;\r\n}\r\nfunction parseTrackList(trackList, logMissingFeatures) {\r\n    var tracks = [];\r\n    for (var i = 0; i < trackList.length; i++) {\r\n        var tr = trackList[i];\r\n        var track = {\r\n            type: exports.stdTrackID.decode(tr.trackID),\r\n            enabled: tr.enab,\r\n            keys: parseKeyList(tr.keyList, logMissingFeatures),\r\n        };\r\n        if (tr.effectParams) {\r\n            track.effectParams = {\r\n                fillCanvas: tr.effectParams.fillCanvas,\r\n                zoomOrigin: tr.effectParams.zoomOrigin,\r\n                keys: parseKeyList(tr.effectParams.keyList, logMissingFeatures),\r\n            };\r\n        }\r\n        tracks.push(track);\r\n    }\r\n    return tracks;\r\n}\r\nexports.parseTrackList = parseTrackList;\r\nfunction serializeTrackList(tracks) {\r\n    var trackList = [];\r\n    for (var i = 0; i < tracks.length; i++) {\r\n        var t = tracks[i];\r\n        trackList.push(__assign(__assign({ trackID: exports.stdTrackID.encode(t.type), Vrsn: 1, enab: !!t.enabled, Effc: !!t.effectParams }, (t.effectParams ? {\r\n            effectParams: {\r\n                keyList: serializeKeyList(t.keys),\r\n                fillCanvas: t.effectParams.fillCanvas,\r\n                zoomOrigin: t.effectParams.zoomOrigin,\r\n            }\r\n        } : {})), { keyList: serializeKeyList(t.keys) }));\r\n    }\r\n    return trackList;\r\n}\r\nexports.serializeTrackList = serializeTrackList;\r\nfunction parseEffectObject(obj, reportErrors) {\r\n    var result = {};\r\n    for (var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++) {\r\n        var key = _a[_i];\r\n        var val = obj[key];\r\n        switch (key) {\r\n            case 'enab':\r\n                result.enabled = !!val;\r\n                break;\r\n            case 'uglg':\r\n                result.useGlobalLight = !!val;\r\n                break;\r\n            case 'AntA':\r\n                result.antialiased = !!val;\r\n                break;\r\n            case 'Algn':\r\n                result.align = !!val;\r\n                break;\r\n            case 'Dthr':\r\n                result.dither = !!val;\r\n                break;\r\n            case 'Invr':\r\n                result.invert = !!val;\r\n                break;\r\n            case 'Rvrs':\r\n                result.reverse = !!val;\r\n                break;\r\n            case 'Clr ':\r\n                result.color = parseColor(val);\r\n                break;\r\n            case 'hglC':\r\n                result.highlightColor = parseColor(val);\r\n                break;\r\n            case 'sdwC':\r\n                result.shadowColor = parseColor(val);\r\n                break;\r\n            case 'Styl':\r\n                result.position = exports.FStl.decode(val);\r\n                break;\r\n            case 'Md  ':\r\n                result.blendMode = exports.BlnM.decode(val);\r\n                break;\r\n            case 'hglM':\r\n                result.highlightBlendMode = exports.BlnM.decode(val);\r\n                break;\r\n            case 'sdwM':\r\n                result.shadowBlendMode = exports.BlnM.decode(val);\r\n                break;\r\n            case 'bvlS':\r\n                result.style = exports.BESl.decode(val);\r\n                break;\r\n            case 'bvlD':\r\n                result.direction = exports.BESs.decode(val);\r\n                break;\r\n            case 'bvlT':\r\n                result.technique = exports.bvlT.decode(val);\r\n                break;\r\n            case 'GlwT':\r\n                result.technique = exports.BETE.decode(val);\r\n                break;\r\n            case 'glwS':\r\n                result.source = exports.IGSr.decode(val);\r\n                break;\r\n            case 'Type':\r\n                result.type = exports.GrdT.decode(val);\r\n                break;\r\n            case 'gs99':\r\n                result.interpolationMethod = exports.gradientInterpolationMethodType.decode(val);\r\n                break;\r\n            case 'Opct':\r\n                result.opacity = parsePercent(val);\r\n                break;\r\n            case 'hglO':\r\n                result.highlightOpacity = parsePercent(val);\r\n                break;\r\n            case 'sdwO':\r\n                result.shadowOpacity = parsePercent(val);\r\n                break;\r\n            case 'lagl':\r\n                result.angle = parseAngle(val);\r\n                break;\r\n            case 'Angl':\r\n                result.angle = parseAngle(val);\r\n                break;\r\n            case 'Lald':\r\n                result.altitude = parseAngle(val);\r\n                break;\r\n            case 'Sftn':\r\n                result.soften = parseUnits(val);\r\n                break;\r\n            case 'srgR':\r\n                result.strength = parsePercent(val);\r\n                break;\r\n            case 'blur':\r\n                result.size = parseUnits(val);\r\n                break;\r\n            case 'Nose':\r\n                result.noise = parsePercent(val);\r\n                break;\r\n            case 'Inpr':\r\n                result.range = parsePercent(val);\r\n                break;\r\n            case 'Ckmt':\r\n                result.choke = parseUnits(val);\r\n                break;\r\n            case 'ShdN':\r\n                result.jitter = parsePercent(val);\r\n                break;\r\n            case 'Dstn':\r\n                result.distance = parseUnits(val);\r\n                break;\r\n            case 'Scl ':\r\n                result.scale = parsePercent(val);\r\n                break;\r\n            case 'Ptrn':\r\n                result.pattern = { name: val['Nm  '], id: val.Idnt };\r\n                break;\r\n            case 'phase':\r\n                result.phase = { x: val.Hrzn, y: val.Vrtc };\r\n                break;\r\n            case 'Ofst':\r\n                result.offset = { x: parsePercent(val.Hrzn), y: parsePercent(val.Vrtc) };\r\n                break;\r\n            case 'MpgS':\r\n            case 'TrnS':\r\n                result.contour = {\r\n                    name: val['Nm  '],\r\n                    curve: val['Crv '].map(function (p) { return ({ x: p.Hrzn, y: p.Vrtc }); }),\r\n                };\r\n                break;\r\n            case 'Grad':\r\n                result.gradient = parseGradient(val);\r\n                break;\r\n            case 'useTexture':\r\n            case 'useShape':\r\n            case 'layerConceals':\r\n            case 'present':\r\n            case 'showInDialog':\r\n            case 'antialiasGloss':\r\n                result[key] = val;\r\n                break;\r\n            case '_name':\r\n            case '_classID':\r\n                break;\r\n            default:\r\n                reportErrors && console.log(\"Invalid effect key: '\".concat(key, \"', value:\"), val);\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction serializeEffectObject(obj, objName, reportErrors) {\r\n    var result = {};\r\n    for (var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++) {\r\n        var objKey = _a[_i];\r\n        var key = objKey;\r\n        var val = obj[key];\r\n        switch (key) {\r\n            case 'enabled':\r\n                result.enab = !!val;\r\n                break;\r\n            case 'useGlobalLight':\r\n                result.uglg = !!val;\r\n                break;\r\n            case 'antialiased':\r\n                result.AntA = !!val;\r\n                break;\r\n            case 'align':\r\n                result.Algn = !!val;\r\n                break;\r\n            case 'dither':\r\n                result.Dthr = !!val;\r\n                break;\r\n            case 'invert':\r\n                result.Invr = !!val;\r\n                break;\r\n            case 'reverse':\r\n                result.Rvrs = !!val;\r\n                break;\r\n            case 'color':\r\n                result['Clr '] = serializeColor(val);\r\n                break;\r\n            case 'highlightColor':\r\n                result.hglC = serializeColor(val);\r\n                break;\r\n            case 'shadowColor':\r\n                result.sdwC = serializeColor(val);\r\n                break;\r\n            case 'position':\r\n                result.Styl = exports.FStl.encode(val);\r\n                break;\r\n            case 'blendMode':\r\n                result['Md  '] = exports.BlnM.encode(val);\r\n                break;\r\n            case 'highlightBlendMode':\r\n                result.hglM = exports.BlnM.encode(val);\r\n                break;\r\n            case 'shadowBlendMode':\r\n                result.sdwM = exports.BlnM.encode(val);\r\n                break;\r\n            case 'style':\r\n                result.bvlS = exports.BESl.encode(val);\r\n                break;\r\n            case 'direction':\r\n                result.bvlD = exports.BESs.encode(val);\r\n                break;\r\n            case 'technique':\r\n                if (objName === 'bevel') {\r\n                    result.bvlT = exports.bvlT.encode(val);\r\n                }\r\n                else {\r\n                    result.GlwT = exports.BETE.encode(val);\r\n                }\r\n                break;\r\n            case 'source':\r\n                result.glwS = exports.IGSr.encode(val);\r\n                break;\r\n            case 'type':\r\n                result.Type = exports.GrdT.encode(val);\r\n                break;\r\n            case 'interpolationMethod':\r\n                result.gs99 = exports.gradientInterpolationMethodType.encode(val);\r\n                break;\r\n            case 'opacity':\r\n                result.Opct = unitsPercent(val);\r\n                break;\r\n            case 'highlightOpacity':\r\n                result.hglO = unitsPercent(val);\r\n                break;\r\n            case 'shadowOpacity':\r\n                result.sdwO = unitsPercent(val);\r\n                break;\r\n            case 'angle':\r\n                if (objName === 'gradientOverlay' || objName === 'patternFill') {\r\n                    result.Angl = unitsAngle(val);\r\n                }\r\n                else {\r\n                    result.lagl = unitsAngle(val);\r\n                }\r\n                break;\r\n            case 'altitude':\r\n                result.Lald = unitsAngle(val);\r\n                break;\r\n            case 'soften':\r\n                result.Sftn = unitsValue(val, key);\r\n                break;\r\n            case 'strength':\r\n                result.srgR = unitsPercent(val);\r\n                break;\r\n            case 'size':\r\n                result.blur = unitsValue(val, key);\r\n                break;\r\n            case 'noise':\r\n                result.Nose = unitsPercent(val);\r\n                break;\r\n            case 'range':\r\n                result.Inpr = unitsPercent(val);\r\n                break;\r\n            case 'choke':\r\n                result.Ckmt = unitsValue(val, key);\r\n                break;\r\n            case 'jitter':\r\n                result.ShdN = unitsPercent(val);\r\n                break;\r\n            case 'distance':\r\n                result.Dstn = unitsValue(val, key);\r\n                break;\r\n            case 'scale':\r\n                result['Scl '] = unitsPercent(val);\r\n                break;\r\n            case 'pattern':\r\n                result.Ptrn = { 'Nm  ': val.name, Idnt: val.id };\r\n                break;\r\n            case 'phase':\r\n                result.phase = { Hrzn: val.x, Vrtc: val.y };\r\n                break;\r\n            case 'offset':\r\n                result.Ofst = { Hrzn: unitsPercent(val.x), Vrtc: unitsPercent(val.y) };\r\n                break;\r\n            case 'contour': {\r\n                result[objName === 'satin' ? 'MpgS' : 'TrnS'] = {\r\n                    'Nm  ': val.name,\r\n                    'Crv ': val.curve.map(function (p) { return ({ Hrzn: p.x, Vrtc: p.y }); }),\r\n                };\r\n                break;\r\n            }\r\n            case 'gradient':\r\n                result.Grad = serializeGradient(val);\r\n                break;\r\n            case 'useTexture':\r\n            case 'useShape':\r\n            case 'layerConceals':\r\n            case 'present':\r\n            case 'showInDialog':\r\n            case 'antialiasGloss':\r\n                result[key] = val;\r\n                break;\r\n            default:\r\n                reportErrors && console.log(\"Invalid effect key: '\".concat(key, \"', value:\"), val);\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction parseGradient(grad) {\r\n    if (grad.GrdF === 'GrdF.CstS') {\r\n        var samples_1 = grad.Intr || 4096;\r\n        return {\r\n            type: 'solid',\r\n            name: grad['Nm  '],\r\n            smoothness: grad.Intr / 4096,\r\n            colorStops: grad.Clrs.map(function (s) { return ({\r\n                color: parseColor(s['Clr ']),\r\n                location: s.Lctn / samples_1,\r\n                midpoint: s.Mdpn / 100,\r\n            }); }),\r\n            opacityStops: grad.Trns.map(function (s) { return ({\r\n                opacity: parsePercent(s.Opct),\r\n                location: s.Lctn / samples_1,\r\n                midpoint: s.Mdpn / 100,\r\n            }); }),\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            type: 'noise',\r\n            name: grad['Nm  '],\r\n            roughness: grad.Smth / 4096,\r\n            colorModel: exports.ClrS.decode(grad.ClrS),\r\n            randomSeed: grad.RndS,\r\n            restrictColors: !!grad.VctC,\r\n            addTransparency: !!grad.ShTr,\r\n            min: grad['Mnm '].map(function (x) { return x / 100; }),\r\n            max: grad['Mxm '].map(function (x) { return x / 100; }),\r\n        };\r\n    }\r\n}\r\nfunction serializeGradient(grad) {\r\n    var _a, _b;\r\n    if (grad.type === 'solid') {\r\n        var samples_2 = Math.round(((_a = grad.smoothness) !== null && _a !== void 0 ? _a : 1) * 4096);\r\n        return {\r\n            'Nm  ': grad.name || '',\r\n            GrdF: 'GrdF.CstS',\r\n            Intr: samples_2,\r\n            Clrs: grad.colorStops.map(function (s) {\r\n                var _a;\r\n                return ({\r\n                    'Clr ': serializeColor(s.color),\r\n                    Type: 'Clry.UsrS',\r\n                    Lctn: Math.round(s.location * samples_2),\r\n                    Mdpn: Math.round(((_a = s.midpoint) !== null && _a !== void 0 ? _a : 0.5) * 100),\r\n                });\r\n            }),\r\n            Trns: grad.opacityStops.map(function (s) {\r\n                var _a;\r\n                return ({\r\n                    Opct: unitsPercent(s.opacity),\r\n                    Lctn: Math.round(s.location * samples_2),\r\n                    Mdpn: Math.round(((_a = s.midpoint) !== null && _a !== void 0 ? _a : 0.5) * 100),\r\n                });\r\n            }),\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            GrdF: 'GrdF.ClNs',\r\n            'Nm  ': grad.name || '',\r\n            ShTr: !!grad.addTransparency,\r\n            VctC: !!grad.restrictColors,\r\n            ClrS: exports.ClrS.encode(grad.colorModel),\r\n            RndS: grad.randomSeed || 0,\r\n            Smth: Math.round(((_b = grad.roughness) !== null && _b !== void 0 ? _b : 1) * 4096),\r\n            'Mnm ': (grad.min || [0, 0, 0, 0]).map(function (x) { return x * 100; }),\r\n            'Mxm ': (grad.max || [1, 1, 1, 1]).map(function (x) { return x * 100; }),\r\n        };\r\n    }\r\n}\r\nfunction parseGradientContent(descriptor) {\r\n    var result = parseGradient(descriptor.Grad);\r\n    result.style = exports.GrdT.decode(descriptor.Type);\r\n    if (descriptor.Dthr !== undefined)\r\n        result.dither = descriptor.Dthr;\r\n    if (descriptor.gradientsInterpolationMethod !== undefined)\r\n        result.interpolationMethod = exports.gradientInterpolationMethodType.decode(descriptor.gradientsInterpolationMethod);\r\n    if (descriptor.Rvrs !== undefined)\r\n        result.reverse = descriptor.Rvrs;\r\n    if (descriptor.Angl !== undefined)\r\n        result.angle = parseAngle(descriptor.Angl);\r\n    if (descriptor['Scl '] !== undefined)\r\n        result.scale = parsePercent(descriptor['Scl ']);\r\n    if (descriptor.Algn !== undefined)\r\n        result.align = descriptor.Algn;\r\n    if (descriptor.Ofst !== undefined) {\r\n        result.offset = {\r\n            x: parsePercent(descriptor.Ofst.Hrzn),\r\n            y: parsePercent(descriptor.Ofst.Vrtc)\r\n        };\r\n    }\r\n    return result;\r\n}\r\nfunction parsePatternContent(descriptor) {\r\n    var result = {\r\n        name: descriptor.Ptrn['Nm  '],\r\n        id: descriptor.Ptrn.Idnt,\r\n    };\r\n    if (descriptor.Lnkd !== undefined)\r\n        result.linked = descriptor.Lnkd;\r\n    if (descriptor.phase !== undefined)\r\n        result.phase = { x: descriptor.phase.Hrzn, y: descriptor.phase.Vrtc };\r\n    return result;\r\n}\r\nfunction parseVectorContent(descriptor) {\r\n    if ('Grad' in descriptor) {\r\n        return parseGradientContent(descriptor);\r\n    }\r\n    else if ('Ptrn' in descriptor) {\r\n        return __assign({ type: 'pattern' }, parsePatternContent(descriptor));\r\n    }\r\n    else if ('Clr ' in descriptor) {\r\n        return { type: 'color', color: parseColor(descriptor['Clr ']) };\r\n    }\r\n    else {\r\n        throw new Error('Invalid vector content');\r\n    }\r\n}\r\nexports.parseVectorContent = parseVectorContent;\r\nfunction serializeGradientContent(content) {\r\n    var result = {};\r\n    if (content.dither !== undefined)\r\n        result.Dthr = content.dither;\r\n    if (content.interpolationMethod !== undefined)\r\n        result.gradientsInterpolationMethod = exports.gradientInterpolationMethodType.encode(content.interpolationMethod);\r\n    if (content.reverse !== undefined)\r\n        result.Rvrs = content.reverse;\r\n    if (content.angle !== undefined)\r\n        result.Angl = unitsAngle(content.angle);\r\n    result.Type = exports.GrdT.encode(content.style);\r\n    if (content.align !== undefined)\r\n        result.Algn = content.align;\r\n    if (content.scale !== undefined)\r\n        result['Scl '] = unitsPercent(content.scale);\r\n    if (content.offset) {\r\n        result.Ofst = {\r\n            Hrzn: unitsPercent(content.offset.x),\r\n            Vrtc: unitsPercent(content.offset.y),\r\n        };\r\n    }\r\n    result.Grad = serializeGradient(content);\r\n    return result;\r\n}\r\nfunction serializePatternContent(content) {\r\n    var result = {\r\n        Ptrn: {\r\n            'Nm  ': content.name || '',\r\n            Idnt: content.id || '',\r\n        }\r\n    };\r\n    if (content.linked !== undefined)\r\n        result.Lnkd = !!content.linked;\r\n    if (content.phase !== undefined)\r\n        result.phase = { Hrzn: content.phase.x, Vrtc: content.phase.y };\r\n    return result;\r\n}\r\nfunction serializeVectorContent(content) {\r\n    if (content.type === 'color') {\r\n        return { key: 'SoCo', descriptor: { 'Clr ': serializeColor(content.color) } };\r\n    }\r\n    else if (content.type === 'pattern') {\r\n        return { key: 'PtFl', descriptor: serializePatternContent(content) };\r\n    }\r\n    else {\r\n        return { key: 'GdFl', descriptor: serializeGradientContent(content) };\r\n    }\r\n}\r\nexports.serializeVectorContent = serializeVectorContent;\r\nfunction parseColor(color) {\r\n    if ('H   ' in color) {\r\n        return { h: parsePercentOrAngle(color['H   ']), s: color.Strt, b: color.Brgh };\r\n    }\r\n    else if ('Rd  ' in color) {\r\n        return { r: color['Rd  '], g: color['Grn '], b: color['Bl  '] };\r\n    }\r\n    else if ('Cyn ' in color) {\r\n        return { c: color['Cyn '], m: color.Mgnt, y: color['Ylw '], k: color.Blck };\r\n    }\r\n    else if ('Gry ' in color) {\r\n        return { k: color['Gry '] };\r\n    }\r\n    else if ('Lmnc' in color) {\r\n        return { l: color.Lmnc, a: color['A   '], b: color['B   '] };\r\n    }\r\n    else if ('redFloat' in color) {\r\n        return { fr: color.redFloat, fg: color.greenFloat, fb: color.blueFloat };\r\n    }\r\n    else {\r\n        throw new Error('Unsupported color descriptor');\r\n    }\r\n}\r\nexports.parseColor = parseColor;\r\nfunction serializeColor(color) {\r\n    if (!color) {\r\n        return { _name: '', _classID: 'RGBC', 'Rd  ': 0, 'Grn ': 0, 'Bl  ': 0 };\r\n    }\r\n    else if ('r' in color) {\r\n        return { _name: '', _classID: 'RGBC', 'Rd  ': color.r || 0, 'Grn ': color.g || 0, 'Bl  ': color.b || 0 };\r\n    }\r\n    else if ('fr' in color) {\r\n        return { _name: '', _classID: 'RGBC', redFloat: color.fr, greenFloat: color.fg, blueFloat: color.fb };\r\n    }\r\n    else if ('h' in color) {\r\n        return { _name: '', _classID: 'HSBC', 'H   ': unitsAngle(color.h * 360), Strt: color.s || 0, Brgh: color.b || 0 };\r\n    }\r\n    else if ('c' in color) {\r\n        return { _name: '', _classID: 'CMYC', 'Cyn ': color.c || 0, Mgnt: color.m || 0, 'Ylw ': color.y || 0, Blck: color.k || 0 };\r\n    }\r\n    else if ('l' in color) {\r\n        return { _name: '', _classID: 'LABC', Lmnc: color.l || 0, 'A   ': color.a || 0, 'B   ': color.b || 0 };\r\n    }\r\n    else if ('k' in color) {\r\n        return { _name: '', _classID: 'GRYC', 'Gry ': color.k };\r\n    }\r\n    else {\r\n        throw new Error('Invalid color value');\r\n    }\r\n}\r\nexports.serializeColor = serializeColor;\r\nfunction parseAngle(x) {\r\n    if (x === undefined)\r\n        return 0;\r\n    if (x.units !== 'Angle')\r\n        throw new Error(\"Invalid units: \".concat(x.units));\r\n    return x.value;\r\n}\r\nexports.parseAngle = parseAngle;\r\nfunction parsePercent(x) {\r\n    if (x === undefined)\r\n        return 1;\r\n    if (x.units !== 'Percent')\r\n        throw new Error(\"Invalid units: \".concat(x.units));\r\n    return x.value / 100;\r\n}\r\nexports.parsePercent = parsePercent;\r\nfunction parsePercentOrAngle(x) {\r\n    if (x === undefined)\r\n        return 1;\r\n    if (x.units === 'Percent')\r\n        return x.value / 100;\r\n    if (x.units === 'Angle')\r\n        return x.value / 360;\r\n    throw new Error(\"Invalid units: \".concat(x.units));\r\n}\r\nexports.parsePercentOrAngle = parsePercentOrAngle;\r\nfunction parseUnits(_a) {\r\n    var units = _a.units, value = _a.value;\r\n    if (units !== 'Pixels' && units !== 'Millimeters' && units !== 'Points' && units !== 'None' &&\r\n        units !== 'Picas' && units !== 'Inches' && units !== 'Centimeters' && units !== 'Density') {\r\n        throw new Error(\"Invalid units: \".concat(JSON.stringify({ units: units, value: value })));\r\n    }\r\n    return { value: value, units: units };\r\n}\r\nexports.parseUnits = parseUnits;\r\nfunction parseUnitsOrNumber(value, units) {\r\n    if (units === void 0) { units = 'Pixels'; }\r\n    if (typeof value === 'number')\r\n        return { value: value, units: units };\r\n    return parseUnits(value);\r\n}\r\nexports.parseUnitsOrNumber = parseUnitsOrNumber;\r\nfunction parseUnitsToNumber(_a, expectedUnits) {\r\n    var units = _a.units, value = _a.value;\r\n    if (units !== expectedUnits)\r\n        throw new Error(\"Invalid units: \".concat(JSON.stringify({ units: units, value: value })));\r\n    return value;\r\n}\r\nexports.parseUnitsToNumber = parseUnitsToNumber;\r\nfunction unitsAngle(value) {\r\n    return { units: 'Angle', value: value || 0 };\r\n}\r\nexports.unitsAngle = unitsAngle;\r\nfunction unitsPercent(value) {\r\n    return { units: 'Percent', value: Math.round((value || 0) * 100) };\r\n}\r\nexports.unitsPercent = unitsPercent;\r\nfunction unitsPercentF(value) {\r\n    return { units: 'Percent', value: (value || 0) * 100 };\r\n}\r\nexports.unitsPercentF = unitsPercentF;\r\nfunction unitsValue(x, key) {\r\n    if (x == null)\r\n        return { units: 'Pixels', value: 0 };\r\n    if (typeof x !== 'object')\r\n        throw new Error(\"Invalid value: \".concat(JSON.stringify(x), \" (key: \").concat(key, \") (should have value and units)\"));\r\n    var units = x.units, value = x.value;\r\n    if (typeof value !== 'number')\r\n        throw new Error(\"Invalid value in \".concat(JSON.stringify(x), \" (key: \").concat(key, \")\"));\r\n    if (units !== 'Pixels' && units !== 'Millimeters' && units !== 'Points' && units !== 'None' &&\r\n        units !== 'Picas' && units !== 'Inches' && units !== 'Centimeters' && units !== 'Density') {\r\n        throw new Error(\"Invalid units in \".concat(JSON.stringify(x), \" (key: \").concat(key, \")\"));\r\n    }\r\n    return { units: units, value: value };\r\n}\r\nexports.unitsValue = unitsValue;\r\nfunction frac(_a) {\r\n    var numerator = _a.numerator, denominator = _a.denominator;\r\n    return { numerator: numerator, denominator: denominator };\r\n}\r\nexports.frac = frac;\r\nexports.textGridding = (0, helpers_1.createEnum)('textGridding', 'none', {\r\n    none: 'None',\r\n    round: 'Rnd ',\r\n});\r\nexports.Ornt = (0, helpers_1.createEnum)('Ornt', 'horizontal', {\r\n    horizontal: 'Hrzn',\r\n    vertical: 'Vrtc',\r\n});\r\nexports.Annt = (0, helpers_1.createEnum)('Annt', 'sharp', {\r\n    none: 'Anno',\r\n    sharp: 'antiAliasSharp',\r\n    crisp: 'AnCr',\r\n    strong: 'AnSt',\r\n    smooth: 'AnSm',\r\n    platform: 'antiAliasPlatformGray',\r\n    platformLCD: 'antiAliasPlatformLCD',\r\n});\r\nexports.warpStyle = (0, helpers_1.createEnum)('warpStyle', 'none', {\r\n    none: 'warpNone',\r\n    arc: 'warpArc',\r\n    arcLower: 'warpArcLower',\r\n    arcUpper: 'warpArcUpper',\r\n    arch: 'warpArch',\r\n    bulge: 'warpBulge',\r\n    shellLower: 'warpShellLower',\r\n    shellUpper: 'warpShellUpper',\r\n    flag: 'warpFlag',\r\n    wave: 'warpWave',\r\n    fish: 'warpFish',\r\n    rise: 'warpRise',\r\n    fisheye: 'warpFisheye',\r\n    inflate: 'warpInflate',\r\n    squeeze: 'warpSqueeze',\r\n    twist: 'warpTwist',\r\n    cylinder: 'warpCylinder',\r\n    custom: 'warpCustom',\r\n});\r\nexports.BlnM = (0, helpers_1.createEnum)('BlnM', 'normal', {\r\n    'normal': 'Nrml',\r\n    'dissolve': 'Dslv',\r\n    'darken': 'Drkn',\r\n    'multiply': 'Mltp',\r\n    'color burn': 'CBrn',\r\n    'linear burn': 'linearBurn',\r\n    'darker color': 'darkerColor',\r\n    'lighten': 'Lghn',\r\n    'screen': 'Scrn',\r\n    'color dodge': 'CDdg',\r\n    'linear dodge': 'linearDodge',\r\n    'lighter color': 'lighterColor',\r\n    'overlay': 'Ovrl',\r\n    'soft light': 'SftL',\r\n    'hard light': 'HrdL',\r\n    'vivid light': 'vividLight',\r\n    'linear light': 'linearLight',\r\n    'pin light': 'pinLight',\r\n    'hard mix': 'hardMix',\r\n    'difference': 'Dfrn',\r\n    'exclusion': 'Xclu',\r\n    'subtract': 'blendSubtraction',\r\n    'divide': 'blendDivide',\r\n    'hue': 'H   ',\r\n    'saturation': 'Strt',\r\n    'color': 'Clr ',\r\n    'luminosity': 'Lmns',\r\n    // used in ABR\r\n    'linear height': 'linearHeight',\r\n    'height': 'Hght',\r\n    'subtraction': 'Sbtr', // 2nd version of subtract ?\r\n});\r\nexports.BESl = (0, helpers_1.createEnum)('BESl', 'inner bevel', {\r\n    'inner bevel': 'InrB',\r\n    'outer bevel': 'OtrB',\r\n    'emboss': 'Embs',\r\n    'pillow emboss': 'PlEb',\r\n    'stroke emboss': 'strokeEmboss',\r\n});\r\nexports.bvlT = (0, helpers_1.createEnum)('bvlT', 'smooth', {\r\n    'smooth': 'SfBL',\r\n    'chisel hard': 'PrBL',\r\n    'chisel soft': 'Slmt',\r\n});\r\nexports.BESs = (0, helpers_1.createEnum)('BESs', 'up', {\r\n    up: 'In  ',\r\n    down: 'Out ',\r\n});\r\nexports.BETE = (0, helpers_1.createEnum)('BETE', 'softer', {\r\n    softer: 'SfBL',\r\n    precise: 'PrBL',\r\n});\r\nexports.IGSr = (0, helpers_1.createEnum)('IGSr', 'edge', {\r\n    edge: 'SrcE',\r\n    center: 'SrcC',\r\n});\r\nexports.GrdT = (0, helpers_1.createEnum)('GrdT', 'linear', {\r\n    linear: 'Lnr ',\r\n    radial: 'Rdl ',\r\n    angle: 'Angl',\r\n    reflected: 'Rflc',\r\n    diamond: 'Dmnd',\r\n});\r\nexports.animInterpStyleEnum = (0, helpers_1.createEnum)('animInterpStyle', 'linear', {\r\n    linear: 'Lnr ',\r\n    hold: 'hold',\r\n});\r\nexports.stdTrackID = (0, helpers_1.createEnum)('stdTrackID', 'opacity', {\r\n    opacity: 'opacityTrack',\r\n    style: 'styleTrack',\r\n    sheetTransform: 'sheetTransformTrack',\r\n    sheetPosition: 'sheetPositionTrack',\r\n    globalLighting: 'globalLightingTrack',\r\n});\r\nexports.gradientInterpolationMethodType = (0, helpers_1.createEnum)('gradientInterpolationMethodType', 'perceptual', {\r\n    perceptual: 'Perc',\r\n    linear: 'Lnr ',\r\n    classic: 'Gcls',\r\n    smooth: 'Smoo',\r\n    // TODO: stripes\r\n});\r\nexports.ClrS = (0, helpers_1.createEnum)('ClrS', 'rgb', {\r\n    rgb: 'RGBC',\r\n    hsb: 'HSBl',\r\n    lab: 'LbCl',\r\n    hsl: 'HSLC',\r\n});\r\nexports.FStl = (0, helpers_1.createEnum)('FStl', 'outside', {\r\n    outside: 'OutF',\r\n    center: 'CtrF',\r\n    inside: 'InsF'\r\n});\r\nexports.FrFl = (0, helpers_1.createEnum)('FrFl', 'color', {\r\n    color: 'SClr',\r\n    gradient: 'GrFl',\r\n    pattern: 'Ptrn',\r\n});\r\nexports.ESliceType = (0, helpers_1.createEnum)('ESliceType', 'image', {\r\n    image: 'Img ',\r\n    noImage: 'noImage',\r\n});\r\nexports.ESliceHorzAlign = (0, helpers_1.createEnum)('ESliceHorzAlign', 'default', {\r\n    default: 'default',\r\n});\r\nexports.ESliceVertAlign = (0, helpers_1.createEnum)('ESliceVertAlign', 'default', {\r\n    default: 'default',\r\n});\r\nexports.ESliceOrigin = (0, helpers_1.createEnum)('ESliceOrigin', 'userGenerated', {\r\n    userGenerated: 'userGenerated',\r\n    autoGenerated: 'autoGenerated',\r\n    layer: 'layer',\r\n});\r\nexports.ESliceBGColorType = (0, helpers_1.createEnum)('ESliceBGColorType', 'none', {\r\n    none: 'None',\r\n    matte: 'matte',\r\n    color: 'Clr ',\r\n});\r\nexports.strokeStyleLineCapType = (0, helpers_1.createEnum)('strokeStyleLineCapType', 'butt', {\r\n    butt: 'strokeStyleButtCap',\r\n    round: 'strokeStyleRoundCap',\r\n    square: 'strokeStyleSquareCap',\r\n});\r\nexports.strokeStyleLineJoinType = (0, helpers_1.createEnum)('strokeStyleLineJoinType', 'miter', {\r\n    miter: 'strokeStyleMiterJoin',\r\n    round: 'strokeStyleRoundJoin',\r\n    bevel: 'strokeStyleBevelJoin',\r\n});\r\nexports.strokeStyleLineAlignment = (0, helpers_1.createEnum)('strokeStyleLineAlignment', 'inside', {\r\n    inside: 'strokeStyleAlignInside',\r\n    center: 'strokeStyleAlignCenter',\r\n    outside: 'strokeStyleAlignOutside',\r\n});\r\nexports.BlrM = (0, helpers_1.createEnum)('BlrM', 'ispinmage', {\r\n    spin: 'Spn ',\r\n    zoom: 'Zm  ',\r\n});\r\nexports.BlrQ = (0, helpers_1.createEnum)('BlrQ', 'good', {\r\n    draft: 'Drft',\r\n    good: 'Gd  ',\r\n    best: 'Bst ',\r\n});\r\nexports.SmBM = (0, helpers_1.createEnum)('SmBM', 'normal', {\r\n    normal: 'SBMN',\r\n    'edge only': 'SBME',\r\n    'overlay edge': 'SBMO',\r\n});\r\nexports.SmBQ = (0, helpers_1.createEnum)('SmBQ', 'medium', {\r\n    low: 'SBQL',\r\n    medium: 'SBQM',\r\n    high: 'SBQH',\r\n});\r\nexports.DspM = (0, helpers_1.createEnum)('DspM', 'stretch to fit', {\r\n    'stretch to fit': 'StrF',\r\n    'tile': 'Tile',\r\n});\r\nexports.UndA = (0, helpers_1.createEnum)('UndA', 'repeat edge pixels', {\r\n    'wrap around': 'WrpA',\r\n    'repeat edge pixels': 'RptE',\r\n});\r\nexports.Cnvr = (0, helpers_1.createEnum)('Cnvr', 'rectangular to polar', {\r\n    'rectangular to polar': 'RctP',\r\n    'polar to rectangular': 'PlrR',\r\n});\r\nexports.RplS = (0, helpers_1.createEnum)('RplS', 'medium', {\r\n    small: 'Sml ',\r\n    medium: 'Mdm ',\r\n    large: 'Lrg ',\r\n});\r\nexports.SphM = (0, helpers_1.createEnum)('SphM', 'normal', {\r\n    'normal': 'Nrml',\r\n    'horizontal only': 'HrzO',\r\n    'vertical only': 'VrtO',\r\n});\r\nexports.Wvtp = (0, helpers_1.createEnum)('Wvtp', 'sine', {\r\n    sine: 'WvSn',\r\n    triangle: 'WvTr',\r\n    square: 'WvSq',\r\n});\r\nexports.ZZTy = (0, helpers_1.createEnum)('ZZTy', 'pond ripples', {\r\n    'around center': 'ArnC',\r\n    'out from center': 'OtFr',\r\n    'pond ripples': 'PndR',\r\n});\r\nexports.Dstr = (0, helpers_1.createEnum)('Dstr', 'uniform', {\r\n    uniform: 'Unfr',\r\n    gaussian: 'Gsn ',\r\n});\r\nexports.Chnl = (0, helpers_1.createEnum)('Chnl', 'composite', {\r\n    red: 'Rd  ',\r\n    green: 'Grn ',\r\n    blue: 'Bl  ',\r\n    composite: 'Cmps',\r\n});\r\nexports.MztT = (0, helpers_1.createEnum)('MztT', 'fine dots', {\r\n    'fine dots': 'FnDt',\r\n    'medium dots': 'MdmD',\r\n    'grainy dots': 'GrnD',\r\n    'coarse dots': 'CrsD',\r\n    'short lines': 'ShrL',\r\n    'medium lines': 'MdmL',\r\n    'long lines': 'LngL',\r\n    'short strokes': 'ShSt',\r\n    'medium strokes': 'MdmS',\r\n    'long strokes': 'LngS',\r\n});\r\nexports.Lns = (0, helpers_1.createEnum)('Lns ', '50-300mm zoom', {\r\n    '50-300mm zoom': 'Zm  ',\r\n    '32mm prime': 'Nkn ',\r\n    '105mm prime': 'Nkn1',\r\n    'movie prime': 'PnVs',\r\n});\r\nexports.blurType = (0, helpers_1.createEnum)('blurType', 'gaussian blur', {\r\n    'gaussian blur': 'GsnB',\r\n    'lens blur': 'lensBlur',\r\n    'motion blur': 'MtnB',\r\n});\r\nexports.DfsM = (0, helpers_1.createEnum)('DfsM', 'normal', {\r\n    'normal': 'Nrml',\r\n    'darken only': 'DrkO',\r\n    'lighten only': 'LghO',\r\n    'anisotropic': 'anisotropic',\r\n});\r\nexports.ExtT = (0, helpers_1.createEnum)('ExtT', 'blocks', {\r\n    blocks: 'Blks',\r\n    pyramids: 'Pyrm',\r\n});\r\nexports.ExtR = (0, helpers_1.createEnum)('ExtR', 'random', {\r\n    random: 'Rndm',\r\n    'level-based': 'LvlB',\r\n});\r\nexports.FlCl = (0, helpers_1.createEnum)('FlCl', 'background color', {\r\n    'background color': 'FlBc',\r\n    'foreground color': 'FlFr',\r\n    'inverse image': 'FlIn',\r\n    'unaltered image': 'FlSm',\r\n});\r\nexports.CntE = (0, helpers_1.createEnum)('CntE', 'upper', {\r\n    lower: 'Lwr ',\r\n    upper: 'Upr ',\r\n});\r\nexports.WndM = (0, helpers_1.createEnum)('WndM', 'wind', {\r\n    wind: 'Wnd ',\r\n    blast: 'Blst',\r\n    stagger: 'Stgr',\r\n});\r\nexports.Drct = (0, helpers_1.createEnum)('Drct', 'from the right', {\r\n    left: 'Left',\r\n    right: 'Rght',\r\n});\r\nexports.IntE = (0, helpers_1.createEnum)('IntE', 'odd lines', {\r\n    'odd lines': 'ElmO',\r\n    'even lines': 'ElmE',\r\n});\r\nexports.IntC = (0, helpers_1.createEnum)('IntC', 'interpolation', {\r\n    duplication: 'CrtD',\r\n    interpolation: 'CrtI',\r\n});\r\nexports.FlMd = (0, helpers_1.createEnum)('FlMd', 'wrap around', {\r\n    'set to transparent': 'Bckg',\r\n    'repeat edge pixels': 'Rpt ',\r\n    'wrap around': 'Wrp ',\r\n});\r\nexports.prjM = (0, helpers_1.createEnum)('prjM', 'fisheye', {\r\n    'fisheye': 'fisP',\r\n    'perspective': 'perP',\r\n    'auto': 'auto',\r\n    'full spherical': 'fusP',\r\n});\r\nexports.presetKindType = (0, helpers_1.createEnum)('presetKindType', 'presetKindCustom', {\r\n    custom: 'presetKindCustom',\r\n    default: 'presetKindDefault',\r\n});\r\n//# sourceMappingURL=descriptor.js.map","import { createEnum } from './helpers';\r\nimport {\r\n\tAntiAlias, BevelDirection, BevelStyle, BevelTechnique, BlendMode, Color, EffectContour,\r\n\tEffectNoiseGradient, EffectPattern, EffectSolidGradient, ExtraGradientInfo, ExtraPatternInfo,\r\n\tGlowSource, GlowTechnique, GradientStyle, InterpolationMethod, LayerEffectBevel,\r\n\tLayerEffectGradientOverlay, LayerEffectInnerGlow, LayerEffectPatternOverlay,\r\n\tLayerEffectSatin, LayerEffectShadow, LayerEffectsInfo, LayerEffectSolidFill,\r\n\tLayerEffectsOuterGlow, LayerEffectStroke, LineAlignment, LineCapType, LineJoinType,\r\n\tOrientation, TextGridding, TimelineKey, TimelineKeyInterpolation, TimelineTrack, TimelineTrackType,\r\n\tUnits, UnitsBounds, UnitsValue, VectorContent, WarpStyle\r\n} from './psd';\r\nimport {\r\n\tPsdReader, readSignature, readUnicodeString, readUint32, readUint8, readFloat64,\r\n\treadBytes, readAsciiString, readInt32, readFloat32, readInt32LE, readUnicodeStringWithLengthLE\r\n} from './psdReader';\r\nimport {\r\n\tPsdWriter, writeSignature, writeBytes, writeUint32, writeFloat64, writeUint8,\r\n\twriteUnicodeStringWithPadding, writeInt32, writeFloat32, writeUnicodeString, writeInt32LE,\r\n\twriteUnicodeStringWithoutLengthLE\r\n} from './psdWriter';\r\n\r\ninterface Dict { [key: string]: string; }\r\ninterface NameClassID { name: string; classID: string; }\r\ninterface ExtTypeDict { [key: string]: NameClassID; }\r\n\r\nfunction revMap(map: Dict) {\r\n\tconst result: Dict = {};\r\n\tObject.keys(map).forEach(key => result[map[key]] = key);\r\n\treturn result;\r\n}\r\n\r\nconst unitsMap: Dict = {\r\n\t'#Ang': 'Angle',\r\n\t'#Rsl': 'Density',\r\n\t'#Rlt': 'Distance',\r\n\t'#Nne': 'None',\r\n\t'#Prc': 'Percent',\r\n\t'#Pxl': 'Pixels',\r\n\t'#Mlm': 'Millimeters',\r\n\t'#Pnt': 'Points',\r\n\t'RrPi': 'Picas',\r\n\t'RrIn': 'Inches',\r\n\t'RrCm': 'Centimeters',\r\n};\r\n\r\nconst unitsMapRev = revMap(unitsMap);\r\nlet logErrors = false;\r\n\r\nexport function setLogErrors(value: boolean) {\r\n\tlogErrors = value;\r\n}\r\n\r\nfunction makeType(name: string, classID: string) {\r\n\treturn { name, classID };\r\n}\r\n\r\nconst nullType = makeType('', 'null');\r\n\r\nconst USE_CHINESE = false; // Testing\r\n\r\nconst fieldToExtType: ExtTypeDict = {\r\n\tstrokeStyleContent: makeType('', 'solidColorLayer'),\r\n\tprintProofSetup: makeType(USE_CHINESE ? '校样设置' : 'Proof Setup', 'proofSetup'),\r\n\tGrad: makeType(USE_CHINESE ? '渐变' : 'Gradient', 'Grdn'),\r\n\tTrnf: makeType(USE_CHINESE ? '变换' : 'Transform', 'Trnf'),\r\n\tpatternFill: makeType('', 'patternFill'),\r\n\tebbl: makeType('', 'ebbl'),\r\n\tSoFi: makeType('', 'SoFi'),\r\n\tGrFl: makeType('', 'GrFl'),\r\n\tsdwC: makeType('', 'RGBC'),\r\n\thglC: makeType('', 'RGBC'),\r\n\t'Clr ': makeType('', 'RGBC'),\r\n\t'tintColor': makeType('', 'RGBC'),\r\n\tOfst: makeType('', 'Pnt '),\r\n\tChFX: makeType('', 'ChFX'),\r\n\tMpgS: makeType('', 'ShpC'),\r\n\tDrSh: makeType('', 'DrSh'),\r\n\tIrSh: makeType('', 'IrSh'),\r\n\tOrGl: makeType('', 'OrGl'),\r\n\tIrGl: makeType('', 'IrGl'),\r\n\tTrnS: makeType('', 'ShpC'),\r\n\tPtrn: makeType('', 'Ptrn'),\r\n\tFrFX: makeType('', 'FrFX'),\r\n\tphase: makeType('', 'Pnt '),\r\n\tframeStep: nullType,\r\n\tduration: nullType,\r\n\tworkInTime: nullType,\r\n\tworkOutTime: nullType,\r\n\taudioClipGroupList: nullType,\r\n\tbounds: makeType('', 'Rctn'),\r\n\tcustomEnvelopeWarp: makeType('', 'customEnvelopeWarp'),\r\n\twarp: makeType('', 'warp'),\r\n\t'Sz  ': makeType('', 'Pnt '),\r\n\torigin: makeType('', 'Pnt '),\r\n\tautoExpandOffset: makeType('', 'Pnt '),\r\n\tkeyOriginShapeBBox: makeType('', 'unitRect'),\r\n\tVrsn: nullType,\r\n\tpsVersion: nullType,\r\n\tdocDefaultNewArtboardBackgroundColor: makeType('', 'RGBC'),\r\n\tartboardRect: makeType('', 'classFloatRect'),\r\n\tkeyOriginRRectRadii: makeType('', 'radii'),\r\n\tkeyOriginBoxCorners: nullType,\r\n\trectangleCornerA: makeType('', 'Pnt '),\r\n\trectangleCornerB: makeType('', 'Pnt '),\r\n\trectangleCornerC: makeType('', 'Pnt '),\r\n\trectangleCornerD: makeType('', 'Pnt '),\r\n\tcompInfo: nullType,\r\n\tquiltWarp: makeType('', 'quiltWarp'),\r\n\tgeneratorSettings: nullType,\r\n\tcrema: nullType,\r\n\tFrIn: nullType,\r\n\tblendOptions: nullType,\r\n\tFXRf: nullType,\r\n\tLefx: nullType,\r\n\ttime: nullType,\r\n\tanimKey: nullType,\r\n\ttimeScope: nullType,\r\n\tinTime: nullType,\r\n\toutTime: nullType,\r\n\tsheetStyle: nullType,\r\n\ttranslation: nullType,\r\n\tSkew: nullType,\r\n\tboundingBox: makeType('', 'boundingBox'),\r\n\t'Lnk ': makeType('', 'ExternalFileLink'),\r\n\tframeReader: makeType('', 'FrameReader'),\r\n\teffectParams: makeType('', 'motionTrackEffectParams'),\r\n\tImpr: makeType('None', 'none'),\r\n\tAnch: makeType('', 'Pnt '),\r\n\t'Fwd ': makeType('', 'Pnt '),\r\n\t'Bwd ': makeType('', 'Pnt '),\r\n\tFlrC: makeType('', 'Pnt '),\r\n\tmeshBoundaryPath: makeType('', 'pathClass'),\r\n\tfilterFX: makeType('', 'filterFXStyle'),\r\n\tFltr: makeType('', 'rigidTransform'),\r\n\tFrgC: makeType('', 'RGBC'),\r\n\tBckC: makeType('', 'RGBC'),\r\n\tsdwM: makeType('Parameters', 'adaptCorrectTones'),\r\n\thglM: makeType('Parameters', 'adaptCorrectTones'),\r\n\tcustomShape: makeType('', 'customShape'),\r\n\torigFXRefPoint: nullType,\r\n\tFXRefPoint: nullType,\r\n\tClMg: makeType('', 'ClMg'),\r\n};\r\n\r\nconst fieldToArrayExtType: ExtTypeDict = {\r\n\t'Crv ': makeType('', 'CrPt'),\r\n\tClrs: makeType('', 'Clrt'),\r\n\tTrns: makeType('', 'TrnS'),\r\n\tkeyDescriptorList: nullType,\r\n\tsolidFillMulti: makeType('', 'SoFi'),\r\n\tgradientFillMulti: makeType('', 'GrFl'),\r\n\tdropShadowMulti: makeType('', 'DrSh'),\r\n\tinnerShadowMulti: makeType('', 'IrSh'),\r\n\tframeFXMulti: makeType('', 'FrFX'),\r\n\tFrIn: nullType,\r\n\tFSts: nullType,\r\n\tLaSt: nullType,\r\n\tsheetTimelineOptions: nullType,\r\n\ttrackList: makeType('', 'animationTrack'),\r\n\tglobalTrackList: makeType('', 'animationTrack'),\r\n\tkeyList: nullType,\r\n\taudioClipGroupList: nullType,\r\n\taudioClipList: nullType,\r\n\tcountObjectList: makeType('', 'countObject'),\r\n\tcountGroupList: makeType('', 'countGroup'),\r\n\tslices: makeType('', 'slice'),\r\n\t'Pts ': makeType('', 'Pthp'),\r\n\tSbpL: makeType('', 'SbpL'),\r\n\tpathComponents: makeType('', 'PaCm'),\r\n\tfilterFXList: makeType('', 'filterFX'),\r\n\tpuppetShapeList: makeType('', 'puppetShape'),\r\n\tchannelDenoise: makeType('', 'channelDenoiseParams'),\r\n\tShrP: makeType('', 'Pnt '),\r\n\tlayerSettings: nullType,\r\n\tlist: nullType,\r\n\tAdjs: makeType('', 'CrvA'),\r\n};\r\n\r\nconst typeToField: { [key: string]: string[]; } = {\r\n\t'TEXT': [\r\n\t\t'Txt ', 'printerName', 'Nm  ', 'Idnt', 'blackAndWhitePresetFileName', 'LUT3DFileName',\r\n\t\t'presetFileName', 'curvesPresetFileName', 'mixerPresetFileName', 'placed', 'description', 'reason',\r\n\t\t'artboardPresetName', 'json', 'clipID', 'relPath', 'fullPath', 'mediaDescriptor', 'Msge',\r\n\t\t'altTag', 'url', 'cellText', 'preset', 'KnNm', 'FPth', 'comment', 'originalPath',\r\n\t],\r\n\t'tdta': [\r\n\t\t'EngineData', 'LUT3DFileData', 'indexArray', 'originalVertexArray', 'deformedVertexArray',\r\n\t\t'LqMe',\r\n\t],\r\n\t'long': [\r\n\t\t'TextIndex', 'RndS', 'Mdpn', 'Smth', 'Lctn', 'strokeStyleVersion', 'LaID', 'Vrsn', 'Cnt ',\r\n\t\t'Brgh', 'Cntr', 'means', 'vibrance', 'Strt', 'bwPresetKind', 'comp', 'compID', 'originalCompID',\r\n\t\t'curvesPresetKind', 'mixerPresetKind', 'uOrder', 'vOrder', 'PgNm', 'totalPages', 'Crop',\r\n\t\t'numerator', 'denominator', 'frameCount', 'Annt', 'keyOriginType', 'unitValueQuadVersion',\r\n\t\t'keyOriginIndex', 'major', 'minor', 'fix', 'docDefaultNewArtboardBackgroundType', 'artboardBackgroundType',\r\n\t\t'numModifyingFX', 'deformNumRows', 'deformNumCols', 'FrID', 'FrDl', 'FsID', 'LCnt', 'AFrm', 'AFSt',\r\n\t\t'numBefore', 'numAfter', 'Spcn', 'minOpacity', 'maxOpacity', 'BlnM', 'sheetID', 'gblA', 'globalAltitude',\r\n\t\t'descVersion', 'frameReaderType', 'LyrI', 'zoomOrigin', 'fontSize', 'Rds ', 'sliceID',\r\n\t\t'topOutset', 'leftOutset', 'bottomOutset', 'rightOutset', 'filterID', 'meshQuality',\r\n\t\t'meshExpansion', 'meshRigidity', 'VrsM', 'VrsN', 'NmbG', 'WLMn', 'WLMx', 'AmMn', 'AmMx', 'SclH', 'SclV',\r\n\t\t'Lvl ', 'TlNm', 'TlOf', 'FlRs', 'Thsh', 'ShrS', 'ShrE', 'FlRs', 'Vrnc', 'Strg', 'ExtS', 'ExtD',\r\n\t\t'HrzS', 'VrtS', 'NmbR', 'EdgF', 'Ang1', 'Ang2', 'Ang3', 'Ang4', 'lastAppliedComp', 'capturedInfo',\r\n\t],\r\n\t'enum': [\r\n\t\t'textGridding', 'Ornt', 'warpStyle', 'warpRotate', 'Inte', 'Bltn', 'ClrS', 'BlrQ',\r\n\t\t'bvlT', 'bvlS', 'bvlD', 'Md  ', 'glwS', 'GrdF', 'GlwT', 'RplS', 'BlrM', 'SmBM',\r\n\t\t'strokeStyleLineCapType', 'strokeStyleLineJoinType', 'strokeStyleLineAlignment',\r\n\t\t'strokeStyleBlendMode', 'PntT', 'Styl', 'lookupType', 'LUTFormat', 'dataOrder',\r\n\t\t'tableOrder', 'enableCompCore', 'enableCompCoreGPU', 'compCoreSupport', 'compCoreGPUSupport', 'Engn',\r\n\t\t'enableCompCoreThreads', 'gs99', 'FrDs', 'trackID', 'animInterpStyle', 'horzAlign',\r\n\t\t'vertAlign', 'bgColorType', 'shapeOperation', 'UndA', 'Wvtp', 'Drct', 'WndM', 'Edg ', 'FlCl', 'IntE',\r\n\t\t'IntC', 'Cnvr', 'Fl  ', 'Dstr', 'MztT', 'Lns ', 'ExtT', 'DspM', 'ExtR', 'ZZTy', 'SphM', 'SmBQ', 'placedLayerOCIOConversion', 'gradientsInterpolationMethod',\r\n\t],\r\n\t'bool': [\r\n\t\t'PstS', 'printSixteenBit', 'masterFXSwitch', 'enab', 'uglg', 'antialiasGloss',\r\n\t\t'useShape', 'useTexture', 'uglg', 'antialiasGloss', 'useShape', 'Vsbl',\r\n\t\t'useTexture', 'Algn', 'Rvrs', 'Dthr', 'Invr', 'VctC', 'ShTr', 'layerConceals',\r\n\t\t'strokeEnabled', 'fillEnabled', 'strokeStyleScaleLock', 'strokeStyleStrokeAdjust',\r\n\t\t'hardProof', 'MpBl', 'paperWhite', 'useLegacy', 'Auto', 'Lab ', 'useTint', 'keyShapeInvalidated',\r\n\t\t'autoExpandEnabled', 'autoNestEnabled', 'autoPositionEnabled', 'shrinkwrapOnSaveEnabled',\r\n\t\t'present', 'showInDialog', 'overprint', 'sheetDisclosed', 'lightsDisclosed', 'meshesDisclosed',\r\n\t\t'materialsDisclosed', 'hasMotion', 'muted', 'Effc', 'selected', 'autoScope', 'fillCanvas',\r\n\t\t'cellTextIsHTML', 'Smoo', 'Clsp', 'validAtPosition', 'rigidType', 'hasoptions', 'filterMaskEnable',\r\n\t\t'filterMaskLinked', 'filterMaskExtendWithWhite', 'removeJPEGArtifact', 'Mnch', 'ExtF', 'ExtM',\r\n\t\t'moreAccurate', 'GpuY', 'LIWy', 'Cnty',\r\n\t],\r\n\t'doub': [\r\n\t\t'warpValue', 'warpPerspective', 'warpPerspectiveOther', 'Intr', 'Wdth', 'Hght',\r\n\t\t'strokeStyleMiterLimit', 'strokeStyleResolution', 'layerTime', 'keyOriginResolution',\r\n\t\t'xx', 'xy', 'yx', 'yy', 'tx', 'ty', 'FrGA', 'frameRate', 'audioLevel', 'rotation',\r\n\t\t'X   ', 'Y   ', 'redFloat', 'greenFloat', 'blueFloat', 'imageResolution',\r\n\t\t'PuX0', 'PuX1', 'PuX2', 'PuX3', 'PuY0', 'PuY1', 'PuY2', 'PuY3'\r\n\t],\r\n\t'UntF': [\r\n\t\t'sdwO', 'hglO', 'lagl', 'Lald', 'srgR', 'blur', 'Sftn', 'Opct', 'Dstn', 'Angl',\r\n\t\t'Ckmt', 'Nose', 'Inpr', 'ShdN', 'strokeStyleLineWidth', 'strokeStyleLineDashOffset',\r\n\t\t'strokeStyleOpacity', 'H   ', 'Top ', 'Left', 'Btom', 'Rght', 'Rslt',\r\n\t\t'topRight', 'topLeft', 'bottomLeft', 'bottomRight', 'ClNs', 'Shrp',\r\n\t],\r\n\t'VlLs': [\r\n\t\t'Crv ', 'Clrs', 'Mnm ', 'Mxm ', 'Trns', 'pathList', 'strokeStyleLineDashSet', 'FrLs', 'slices',\r\n\t\t'LaSt', 'Trnf', 'nonAffineTransform', 'keyDescriptorList', 'guideIndeces', 'gradientFillMulti',\r\n\t\t'solidFillMulti', 'frameFXMulti', 'innerShadowMulti', 'dropShadowMulti', 'FrIn', 'FSts', 'FsFr',\r\n\t\t'sheetTimelineOptions', 'audioClipList', 'trackList', 'globalTrackList', 'keyList', 'audioClipList',\r\n\t\t'warpValues', 'selectedPin', 'Pts ', 'SbpL', 'pathComponents', 'pinOffsets', 'posFinalPins',\r\n\t\t'pinVertexIndices', 'PinP', 'PnRt', 'PnOv', 'PnDp', 'filterFXList', 'puppetShapeList', 'ShrP',\r\n\t\t'channelDenoise', 'Mtrx', 'layerSettings', 'list', 'compList', 'Adjs',\r\n\t],\r\n\t'ObAr': ['meshPoints', 'quiltSliceX', 'quiltSliceY'],\r\n\t'obj ': ['null', 'Chnl'],\r\n\t'Pth ': ['DspF'],\r\n};\r\n\r\nconst channels = [\r\n\t'Rd  ', 'Grn ', 'Bl  ', 'Yllw', 'Ylw ', 'Cyn ', 'Mgnt', 'Blck', 'Gry ', 'Lmnc', 'A   ', 'B   ',\r\n];\r\n\r\nconst fieldToArrayType: Dict = {\r\n\t'Mnm ': 'long',\r\n\t'Mxm ': 'long',\r\n\tFrLs: 'long',\r\n\tstrokeStyleLineDashSet: 'UntF',\r\n\tTrnf: 'doub',\r\n\tnonAffineTransform: 'doub',\r\n\tkeyDescriptorList: 'Objc',\r\n\tgradientFillMulti: 'Objc',\r\n\tsolidFillMulti: 'Objc',\r\n\tframeFXMulti: 'Objc',\r\n\tinnerShadowMulti: 'Objc',\r\n\tdropShadowMulti: 'Objc',\r\n\tLaSt: 'Objc',\r\n\tFrIn: 'Objc',\r\n\tFSts: 'Objc',\r\n\tFsFr: 'long',\r\n\tblendOptions: 'Objc',\r\n\tsheetTimelineOptions: 'Objc',\r\n\tkeyList: 'Objc',\r\n\twarpValues: 'doub',\r\n\tselectedPin: 'long',\r\n\t'Pts ': 'Objc',\r\n\tSbpL: 'Objc',\r\n\tpathComponents: 'Objc',\r\n\tpinOffsets: 'doub',\r\n\tposFinalPins: 'doub',\r\n\tpinVertexIndices: 'long',\r\n\tPinP: 'doub',\r\n\tPnRt: 'long',\r\n\tPnOv: 'bool',\r\n\tPnDp: 'doub',\r\n\tfilterFXList: 'Objc',\r\n\tpuppetShapeList: 'Objc',\r\n\tShrP: 'Objc',\r\n\tchannelDenoise: 'Objc',\r\n\tMtrx: 'long',\r\n\tcompList: 'long',\r\n\tChnl: 'enum',\r\n};\r\n\r\nconst fieldToType: Dict = {};\r\n\r\nfor (const type of Object.keys(typeToField)) {\r\n\tfor (const field of typeToField[type]) {\r\n\t\tfieldToType[field] = type;\r\n\t}\r\n}\r\n\r\nfor (const field of Object.keys(fieldToExtType)) {\r\n\tif (!fieldToType[field]) fieldToType[field] = 'Objc';\r\n}\r\n\r\nfor (const field of Object.keys(fieldToArrayExtType)) {\r\n\tfieldToArrayType[field] = 'Objc';\r\n}\r\n\r\nfunction getTypeByKey(key: string, value: any, root: string, parent: any) {\r\n\tif (key === 'presetKind') {\r\n\t\treturn typeof value === 'string' ? 'enum' : 'long';\r\n\t} if (key === 'null' && root === 'slices') {\r\n\t\treturn 'TEXT';\r\n\t} else if (key === 'groupID') {\r\n\t\treturn root === 'slices' ? 'long' : 'TEXT';\r\n\t} else if (key === 'Sz  ') {\r\n\t\treturn ('Wdth' in value) ? 'Objc' : (('units' in value) ? 'UntF' : 'doub');\r\n\t} else if (key === 'Type') {\r\n\t\treturn typeof value === 'string' ? 'enum' : 'long';\r\n\t} else if (key === 'AntA') {\r\n\t\treturn typeof value === 'string' ? 'enum' : 'bool';\r\n\t} else if ((key === 'Hrzn' || key === 'Vrtc') && (parent.Type === 'keyType.Pstn' || parent._classID === 'Ofst')) {\r\n\t\treturn 'long';\r\n\t} else if (key === 'Hrzn' || key === 'Vrtc' || key === 'Top ' || key === 'Left' || key === 'Btom' || key === 'Rght') {\r\n\t\tif (root === 'slices') return 'long';\r\n\t\treturn typeof value === 'number' ? 'doub' : 'UntF';\r\n\t} else if (key === 'Vrsn') {\r\n\t\treturn typeof value === 'number' ? 'long' : 'Objc';\r\n\t} else if (key === 'Rd  ' || key === 'Grn ' || key === 'Bl  ') {\r\n\t\treturn root === 'artd' ? 'long' : 'doub';\r\n\t} else if (key === 'Trnf') {\r\n\t\treturn Array.isArray(value) ? 'VlLs' : 'Objc';\r\n\t} else {\r\n\t\treturn fieldToType[key];\r\n\t}\r\n}\r\n\r\nexport function readAsciiStringOrClassId(reader: PsdReader) {\r\n\tconst length = readInt32(reader);\r\n\treturn readAsciiString(reader, length || 4);\r\n}\r\n\r\nfunction writeAsciiStringOrClassId(writer: PsdWriter, value: string) {\r\n\tif (value.length === 4 && value !== 'warp' && value !== 'time' && value !== 'hold' && value !== 'list') {\r\n\t\t// write classId\r\n\t\twriteInt32(writer, 0);\r\n\t\twriteSignature(writer, value);\r\n\t} else {\r\n\t\t// write ascii string\r\n\t\twriteInt32(writer, value.length);\r\n\r\n\t\tfor (let i = 0; i < value.length; i++) {\r\n\t\t\twriteUint8(writer, value.charCodeAt(i));\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function readDescriptorStructure(reader: PsdReader, includeClass: boolean) {\r\n\tconst struct = readClassStructure(reader);\r\n\tconst object: any = includeClass ? { _name: struct.name, _classID: struct.classID } : {};\r\n\t// console.log('>> ', struct);\r\n\tconst itemsCount = readUint32(reader);\r\n\r\n\tfor (let i = 0; i < itemsCount; i++) {\r\n\t\tconst key = readAsciiStringOrClassId(reader);\r\n\t\tconst type = readSignature(reader);\r\n\t\t// console.log(`> '${key}' '${type}'`);\r\n\t\tconst data = readOSType(reader, type, includeClass);\r\n\t\t// if (!getTypeByKey(key, data)) console.log(`> '${key}' '${type}'`, data);\r\n\t\tobject[key] = data;\r\n\t}\r\n\r\n\treturn object;\r\n}\r\n\r\nexport function writeDescriptorStructure(writer: PsdWriter, name: string, classId: string, value: any, root: string) {\r\n\tif (logErrors && !classId) console.log('Missing classId for: ', name, classId, value);\r\n\r\n\t// write class structure\r\n\twriteUnicodeStringWithPadding(writer, name);\r\n\twriteAsciiStringOrClassId(writer, classId);\r\n\r\n\tconst keys = Object.keys(value);\r\n\tlet keyCount = keys.length;\r\n\tif ('_name' in value) keyCount--;\r\n\tif ('_classID' in value) keyCount--;\r\n\r\n\twriteUint32(writer, keyCount);\r\n\r\n\tfor (const key of keys) {\r\n\t\tif (key === '_name' || key === '_classID') continue;\r\n\r\n\t\tlet type = getTypeByKey(key, value[key], root, value);\r\n\t\tlet extType = fieldToExtType[key];\r\n\r\n\t\tif (key === 'bounds' && root === 'text') {\r\n\t\t\textType = makeType('', 'bounds');\r\n\t\t} else if (key === 'origin') {\r\n\t\t\ttype = root === 'slices' ? 'enum' : 'Objc';\r\n\t\t} else if ((key === 'Cyn ' || key === 'Mgnt' || key === 'Ylw ' || key === 'Blck') && value._classID === 'CMYC') {\r\n\t\t\ttype = 'doub';\r\n\t\t} else if (/^PN[a-z][a-z]$/.test(key)) {\r\n\t\t\ttype = 'TEXT';\r\n\t\t} else if (/^PT[a-z][a-z]$/.test(key)) {\r\n\t\t\ttype = 'long';\r\n\t\t} else if (/^PF[a-z][a-z]$/.test(key)) {\r\n\t\t\ttype = 'doub';\r\n\t\t} else if ((key === 'Rds ' || key === 'Thsh') && typeof value[key] === 'number' && value._classID === 'SmrB') {\r\n\t\t\ttype = 'doub';\r\n\t\t} else if (key === 'ClSz' || key === 'Rds ' || key === 'Amnt') {\r\n\t\t\ttype = typeof value[key] === 'number' ? 'long' : 'UntF';\r\n\t\t} else if ((key === 'sdwM' || key === 'hglM') && typeof value[key] === 'string') {\r\n\t\t\ttype = 'enum';\r\n\t\t} else if (key === 'blur' && typeof value[key] === 'string') {\r\n\t\t\ttype = 'enum';\r\n\t\t} else if (key === 'Hght' && typeof value[key] === 'number' && value._classID === 'Embs') {\r\n\t\t\ttype = 'long';\r\n\t\t} else if (key === 'Angl' && typeof value[key] === 'number' && (value._classID === 'Embs' || value._classID === 'smartSharpen' || value._classID === 'Twrl' || value._classID === 'MtnB')) {\r\n\t\t\ttype = 'long';\r\n\t\t} else if (key === 'Angl' && typeof value[key] === 'number') {\r\n\t\t\ttype = 'doub'; // ???\r\n\t\t} else if (key === 'bounds' && root === 'slices') {\r\n\t\t\ttype = 'Objc';\r\n\t\t\textType = makeType('', 'Rct1');\r\n\t\t} else if (key === 'Scl ') {\r\n\t\t\tif (typeof value[key] === 'object' && 'Hrzn' in value[key]) {\r\n\t\t\t\ttype = 'Objc';\r\n\t\t\t\textType = nullType;\r\n\t\t\t} else if (typeof value[key] === 'number') {\r\n\t\t\t\ttype = 'long';\r\n\t\t\t} else {\r\n\t\t\t\ttype = 'UntF';\r\n\t\t\t}\r\n\t\t} else if (key === 'audioClipGroupList' && keys.length === 1) {\r\n\t\t\ttype = 'VlLs';\r\n\t\t} else if ((key === 'Strt' || key === 'Brgh') && 'H   ' in value) {\r\n\t\t\ttype = 'doub';\r\n\t\t} else if (key === 'Wdth' && typeof value[key] === 'object') {\r\n\t\t\ttype = 'UntF';\r\n\t\t} else if (key === 'Ofst' && typeof value[key] === 'number') {\r\n\t\t\ttype = 'long';\r\n\t\t} else if (key === 'Strt' && typeof value[key] === 'object') {\r\n\t\t\ttype = 'Objc';\r\n\t\t\textType = nullType;\r\n\t\t} else if (channels.indexOf(key) !== -1) {\r\n\t\t\ttype = (classId === 'RGBC' && root !== 'artd') ? 'doub' : 'long';\r\n\t\t} else if (key === 'profile') {\r\n\t\t\ttype = classId === 'printOutput' ? 'TEXT' : 'tdta';\r\n\t\t} else if (key === 'strokeStyleContent') {\r\n\t\t\tif (value[key]['Clr ']) {\r\n\t\t\t\textType = makeType('', 'solidColorLayer');\r\n\t\t\t} else if (value[key].Grad) {\r\n\t\t\t\textType = makeType('', 'gradientLayer');\r\n\t\t\t} else if (value[key].Ptrn) {\r\n\t\t\t\textType = makeType('', 'patternLayer');\r\n\t\t\t} else {\r\n\t\t\t\tlogErrors && console.log('Invalid strokeStyleContent value', value[key]);\r\n\t\t\t}\r\n\t\t} else if (key === 'bounds' && root === 'quiltWarp') {\r\n\t\t\textType = makeType('', 'classFloatRect');\r\n\t\t}\r\n\r\n\t\tif (extType && extType.classID === 'RGBC') {\r\n\t\t\tif ('H   ' in value[key]) extType = { classID: 'HSBC', name: '' };\r\n\t\t\t// TODO: other color spaces\r\n\t\t}\r\n\r\n\t\twriteAsciiStringOrClassId(writer, key);\r\n\t\twriteSignature(writer, type || 'long');\r\n\t\twriteOSType(writer, type || 'long', value[key], key, extType, root);\r\n\t\tif (logErrors && !type) console.log(`Missing descriptor field type for: '${key}' in`, value);\r\n\t}\r\n}\r\n\r\nfunction readOSType(reader: PsdReader, type: string, includeClass: boolean) {\r\n\tswitch (type) {\r\n\t\tcase 'obj ': // Reference\r\n\t\t\treturn readReferenceStructure(reader);\r\n\t\tcase 'Objc': // Descriptor\r\n\t\tcase 'GlbO': // GlobalObject same as Descriptor\r\n\t\t\treturn readDescriptorStructure(reader, includeClass);\r\n\t\tcase 'VlLs': { // List\r\n\t\t\tconst length = readInt32(reader);\r\n\t\t\tconst items: any[] = [];\r\n\r\n\t\t\tfor (let i = 0; i < length; i++) {\r\n\t\t\t\tconst itemType = readSignature(reader);\r\n\t\t\t\t// console.log('  >', itemType);\r\n\t\t\t\titems.push(readOSType(reader, itemType, includeClass));\r\n\t\t\t}\r\n\r\n\t\t\treturn items;\r\n\t\t}\r\n\t\tcase 'doub': // Double\r\n\t\t\treturn readFloat64(reader);\r\n\t\tcase 'UntF': { // Unit double\r\n\t\t\tconst units = readSignature(reader);\r\n\t\t\tconst value = readFloat64(reader);\r\n\t\t\tif (!unitsMap[units]) throw new Error(`Invalid units: ${units}`);\r\n\t\t\treturn { units: unitsMap[units], value };\r\n\t\t}\r\n\t\tcase 'UnFl': { // Unit float\r\n\t\t\tconst units = readSignature(reader);\r\n\t\t\tconst value = readFloat32(reader);\r\n\t\t\tif (!unitsMap[units]) throw new Error(`Invalid units: ${units}`);\r\n\t\t\treturn { units: unitsMap[units], value };\r\n\t\t}\r\n\t\tcase 'TEXT': // String\r\n\t\t\treturn readUnicodeString(reader);\r\n\t\tcase 'enum': { // Enumerated\r\n\t\t\tconst enumType = readAsciiStringOrClassId(reader);\r\n\t\t\tconst value = readAsciiStringOrClassId(reader);\r\n\t\t\treturn `${enumType}.${value}`;\r\n\t\t}\r\n\t\tcase 'long': // Integer\r\n\t\t\treturn readInt32(reader);\r\n\t\tcase 'comp': { // Large Integer\r\n\t\t\tconst low = readUint32(reader);\r\n\t\t\tconst high = readUint32(reader);\r\n\t\t\treturn { low, high };\r\n\t\t}\r\n\t\tcase 'bool': // Boolean\r\n\t\t\treturn !!readUint8(reader);\r\n\t\tcase 'type': // Class\r\n\t\tcase 'GlbC': // Class\r\n\t\t\treturn readClassStructure(reader);\r\n\t\tcase 'alis': { // Alias\r\n\t\t\tconst length = readInt32(reader);\r\n\t\t\treturn readAsciiString(reader, length);\r\n\t\t}\r\n\t\tcase 'tdta': { // Raw Data\r\n\t\t\tconst length = readInt32(reader);\r\n\t\t\treturn readBytes(reader, length);\r\n\t\t}\r\n\t\tcase 'ObAr': { // Object array\r\n\t\t\treadInt32(reader); // version: 16\r\n\t\t\treadUnicodeString(reader); // name: ''\r\n\t\t\treadAsciiStringOrClassId(reader); // 'rationalPoint'\r\n\t\t\tconst length = readInt32(reader);\r\n\t\t\tconst items: any[] = [];\r\n\r\n\t\t\tfor (let i = 0; i < length; i++) {\r\n\t\t\t\tconst type1 = readAsciiStringOrClassId(reader); // type Hrzn | Vrtc\r\n\t\t\t\treadSignature(reader); // UnFl\r\n\r\n\t\t\t\treadSignature(reader); // units ? '#Pxl'\r\n\t\t\t\tconst valuesCount = readInt32(reader);\r\n\t\t\t\tconst values: number[] = [];\r\n\t\t\t\tfor (let j = 0; j < valuesCount; j++) {\r\n\t\t\t\t\tvalues.push(readFloat64(reader));\r\n\t\t\t\t}\r\n\r\n\t\t\t\titems.push({ type: type1, values });\r\n\t\t\t}\r\n\r\n\t\t\treturn items;\r\n\t\t}\r\n\t\tcase 'Pth ': { // File path\r\n\t\t\t/*const length =*/ readInt32(reader); // total size of all fields below\r\n\t\t\tconst sig = readSignature(reader);\r\n\t\t\t/*const pathSize =*/ readInt32LE(reader); // the same as length\r\n\t\t\tconst charsCount = readInt32LE(reader);\r\n\t\t\tconst path = readUnicodeStringWithLengthLE(reader, charsCount);\r\n\t\t\treturn { sig, path };\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Invalid TySh descriptor OSType: ${type} at ${reader.offset.toString(16)}`);\r\n\t}\r\n}\r\n\r\nconst ObArTypes: { [key: string]: string | undefined; } = {\r\n\tmeshPoints: 'rationalPoint',\r\n\tquiltSliceX: 'UntF',\r\n\tquiltSliceY: 'UntF',\r\n};\r\n\r\nfunction writeOSType(writer: PsdWriter, type: string, value: any, key: string, extType: NameClassID | undefined, root: string) {\r\n\tswitch (type) {\r\n\t\tcase 'obj ': // Reference\r\n\t\t\twriteReferenceStructure(writer, key, value);\r\n\t\t\tbreak;\r\n\t\tcase 'Objc': // Descriptor\r\n\t\tcase 'GlbO': { // GlobalObject same as Descriptor\r\n\t\t\tif (typeof value !== 'object') throw new Error(`Invalid struct value: ${JSON.stringify(value)}, key: ${key}`);\r\n\t\t\tif (!extType) throw new Error(`Missing ext type for: '${key}' (${JSON.stringify(value)})`);\r\n\t\t\tconst name = value._name || extType.name;\r\n\t\t\tconst classID = value._classID || extType.classID;\r\n\t\t\twriteDescriptorStructure(writer, name, classID, value, root);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'VlLs': // List\r\n\t\t\tif (!Array.isArray(value)) throw new Error(`Invalid list value: ${JSON.stringify(value)}, key: ${key}`);\r\n\t\t\twriteInt32(writer, value.length);\r\n\r\n\t\t\tfor (let i = 0; i < value.length; i++) {\r\n\t\t\t\tconst type = fieldToArrayType[key];\r\n\t\t\t\twriteSignature(writer, type || 'long');\r\n\t\t\t\twriteOSType(writer, type || 'long', value[i], `${key}[]`, fieldToArrayExtType[key], root);\r\n\t\t\t\tif (logErrors && !type) console.log(`Missing descriptor array type for: '${key}' in`, value);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase 'doub': // Double\r\n\t\t\tif (typeof value !== 'number') throw new Error(`Invalid number value: ${JSON.stringify(value)}, key: ${key}`);\r\n\t\t\twriteFloat64(writer, value);\r\n\t\t\tbreak;\r\n\t\tcase 'UntF': // Unit double\r\n\t\t\tif (!unitsMapRev[value.units]) throw new Error(`Invalid units: ${value.units} in ${key}`);\r\n\t\t\twriteSignature(writer, unitsMapRev[value.units]);\r\n\t\t\twriteFloat64(writer, value.value);\r\n\t\t\tbreak;\r\n\t\tcase 'UnFl': // Unit float\r\n\t\t\tif (!unitsMapRev[value.units]) throw new Error(`Invalid units: ${value.units} in ${key}`);\r\n\t\t\twriteSignature(writer, unitsMapRev[value.units]);\r\n\t\t\twriteFloat32(writer, value.value);\r\n\t\t\tbreak;\r\n\t\tcase 'TEXT': // String\r\n\t\t\twriteUnicodeStringWithPadding(writer, value);\r\n\t\t\tbreak;\r\n\t\tcase 'enum': { // Enumerated\r\n\t\t\tif (typeof value !== 'string') throw new Error(`Invalid enum value: ${JSON.stringify(value)}, key: ${key}`);\r\n\t\t\tconst [_type, val] = value.split('.');\r\n\t\t\twriteAsciiStringOrClassId(writer, _type);\r\n\t\t\twriteAsciiStringOrClassId(writer, val);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'long': // Integer\r\n\t\t\tif (typeof value !== 'number') throw new Error(`Invalid integer value: ${JSON.stringify(value)}, key: ${key}`);\r\n\t\t\twriteInt32(writer, value);\r\n\t\t\tbreak;\r\n\t\t// case 'comp': // Large Integer\r\n\t\t// \twriteLargeInteger(reader);\r\n\t\tcase 'bool': // Boolean\r\n\t\t\tif (typeof value !== 'boolean') throw new Error(`Invalid boolean value: ${JSON.stringify(value)}, key: ${key}`);\r\n\t\t\twriteUint8(writer, value ? 1 : 0);\r\n\t\t\tbreak;\r\n\t\t// case 'type': // Class\r\n\t\t// case 'GlbC': // Class\r\n\t\t// \twriteClassStructure(reader);\r\n\t\t// case 'alis': // Alias\r\n\t\t// \twriteAliasStructure(reader);\r\n\t\tcase 'tdta': // Raw Data\r\n\t\t\twriteInt32(writer, value.byteLength);\r\n\t\t\twriteBytes(writer, value);\r\n\t\t\tbreak;\r\n\t\tcase 'ObAr': { // Object array\r\n\t\t\twriteInt32(writer, 16); // version\r\n\t\t\twriteUnicodeStringWithPadding(writer, ''); // name\r\n\t\t\tconst type = ObArTypes[key];\r\n\t\t\tif (!type) throw new Error(`Not implemented ObArType for: ${key}`);\r\n\t\t\twriteAsciiStringOrClassId(writer, type);\r\n\t\t\twriteInt32(writer, value.length);\r\n\r\n\t\t\tfor (let i = 0; i < value.length; i++) {\r\n\t\t\t\twriteAsciiStringOrClassId(writer, value[i].type); // Hrzn | Vrtc\r\n\t\t\t\twriteSignature(writer, 'UnFl');\r\n\t\t\t\twriteSignature(writer, '#Pxl');\r\n\t\t\t\twriteInt32(writer, value[i].values.length);\r\n\r\n\t\t\t\tfor (let j = 0; j < value[i].values.length; j++) {\r\n\t\t\t\t\twriteFloat64(writer, value[i].values[j]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'Pth ': { // File path\r\n\t\t\tconst length = 4 + 4 + 4 + value.path.length * 2;\r\n\t\t\twriteInt32(writer, length);\r\n\t\t\twriteSignature(writer, value.sig);\r\n\t\t\twriteInt32LE(writer, length);\r\n\t\t\twriteInt32LE(writer, value.path.length);\r\n\t\t\twriteUnicodeStringWithoutLengthLE(writer, value.path);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Not implemented descriptor OSType: ${type}`);\r\n\t}\r\n}\r\n\r\nfunction readReferenceStructure(reader: PsdReader) {\r\n\tconst itemsCount = readInt32(reader);\r\n\tconst items: any[] = [];\r\n\r\n\tfor (let i = 0; i < itemsCount; i++) {\r\n\t\tconst type = readSignature(reader);\r\n\r\n\t\tswitch (type) {\r\n\t\t\tcase 'prop': { // Property\r\n\t\t\t\treadClassStructure(reader);\r\n\t\t\t\tconst keyID = readAsciiStringOrClassId(reader);\r\n\t\t\t\titems.push(keyID);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 'Clss': // Class\r\n\t\t\t\titems.push(readClassStructure(reader));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'Enmr': { // Enumerated Reference\r\n\t\t\t\treadClassStructure(reader);\r\n\t\t\t\tconst typeID = readAsciiStringOrClassId(reader);\r\n\t\t\t\tconst value = readAsciiStringOrClassId(reader);\r\n\t\t\t\titems.push(`${typeID}.${value}`);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 'rele': { // Offset\r\n\t\t\t\t// const { name, classID } =\r\n\t\t\t\treadClassStructure(reader);\r\n\t\t\t\titems.push(readUint32(reader));\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 'Idnt': // Identifier\r\n\t\t\t\titems.push(readInt32(reader));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'indx': // Index\r\n\t\t\t\titems.push(readInt32(reader));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'name': { // Name\r\n\t\t\t\treadClassStructure(reader);\r\n\t\t\t\titems.push(readUnicodeString(reader));\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid descriptor reference type: ${type}`);\r\n\t\t}\r\n\t}\r\n\r\n\treturn items;\r\n}\r\n\r\nfunction writeReferenceStructure(writer: PsdWriter, _key: string, items: any[]) {\r\n\twriteInt32(writer, items.length);\r\n\r\n\tfor (let i = 0; i < items.length; i++) {\r\n\t\tconst value = items[i];\r\n\t\tlet type = 'unknown';\r\n\r\n\t\tif (typeof value === 'string') {\r\n\t\t\tif (/^[a-z ]+\\.[a-z ]+$/i.test(value)) {\r\n\t\t\t\ttype = 'Enmr';\r\n\t\t\t} else {\r\n\t\t\t\ttype = 'name';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\twriteSignature(writer, type);\r\n\r\n\t\tswitch (type) {\r\n\t\t\t// case 'prop': // Property\r\n\t\t\t// case 'Clss': // Class\r\n\t\t\tcase 'Enmr': { // Enumerated Reference\r\n\t\t\t\tconst [typeID, enumValue] = value.split('.');\r\n\t\t\t\twriteClassStructure(writer, '\\0', typeID);\r\n\t\t\t\twriteAsciiStringOrClassId(writer, typeID);\r\n\t\t\t\twriteAsciiStringOrClassId(writer, enumValue);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t// case 'rele': // Offset\r\n\t\t\t// case 'Idnt': // Identifier\r\n\t\t\t// case 'indx': // Index\r\n\t\t\tcase 'name': { // Name\r\n\t\t\t\twriteClassStructure(writer, '\\0', 'Lyr ');\r\n\t\t\t\twriteUnicodeString(writer, value + '\\0');\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid descriptor reference type: ${type}`);\r\n\t\t}\r\n\t}\r\n\r\n\treturn items;\r\n}\r\n\r\nfunction readClassStructure(reader: PsdReader) {\r\n\tconst name = readUnicodeString(reader);\r\n\tconst classID = readAsciiStringOrClassId(reader);\r\n\treturn { name, classID };\r\n}\r\n\r\nfunction writeClassStructure(writer: PsdWriter, name: string, classID: string) {\r\n\twriteUnicodeString(writer, name);\r\n\twriteAsciiStringOrClassId(writer, classID);\r\n}\r\n\r\nexport function readVersionAndDescriptor(reader: PsdReader, includeClass = false) {\r\n\tconst version = readUint32(reader);\r\n\tif (version !== 16) throw new Error(`Invalid descriptor version: ${version}`);\r\n\tconst desc = readDescriptorStructure(reader, includeClass);\r\n\t// console.log(require('util').inspect(desc, false, 99, true));\r\n\treturn desc;\r\n}\r\n\r\nexport function writeVersionAndDescriptor(writer: PsdWriter, name: string, classID: string, descriptor: any, root = '') {\r\n\twriteUint32(writer, 16); // version\r\n\twriteDescriptorStructure(writer, name, classID, descriptor, root);\r\n}\r\n\r\nexport type DescriptorUnits = 'Angle' | 'Density' | 'Distance' | 'None' | 'Percent' | 'Pixels' |\r\n\t'Millimeters' | 'Points' | 'Picas' | 'Inches' | 'Centimeters';\r\n\r\nexport interface DescriptorUnitsValue {\r\n\tunits: DescriptorUnits;\r\n\tvalue: number;\r\n}\r\n\r\nexport type DescriptorColor = {\r\n\t_name: '';\r\n\t_classID: 'RGBC';\r\n\t'Rd  ': number;\r\n\t'Grn ': number;\r\n\t'Bl  ': number;\r\n} | {\r\n\t_name: '';\r\n\t_classID: 'HSBC'; // ???\r\n\t'H   ': DescriptorUnitsValue;\r\n\tStrt: number;\r\n\tBrgh: number;\r\n} | {\r\n\t_name: '';\r\n\t_classID: 'CMYC';\r\n\t'Cyn ': number;\r\n\tMgnt: number;\r\n\t'Ylw ': number;\r\n\tBlck: number;\r\n} | {\r\n\t_name: '';\r\n\t_classID: 'GRYC'; // ???\r\n\t'Gry ': number;\r\n} | {\r\n\t_name: '';\r\n\t_classID: 'LABC'; // ???\r\n\tLmnc: number;\r\n\t'A   ': number;\r\n\t'B   ': number;\r\n} | {\r\n\t_name: '';\r\n\t_classID: 'RGBC';\r\n\tredFloat: number;\r\n\tgreenFloat: number;\r\n\tblueFloat: number;\r\n};\r\n\r\nexport interface DesciptorPattern {\r\n\t'Nm  ': string;\r\n\tIdnt: string;\r\n}\r\n\r\nexport type DesciptorGradient = {\r\n\t'Nm  ': string;\r\n\tGrdF: 'GrdF.CstS';\r\n\tIntr: number;\r\n\tClrs: {\r\n\t\t'Clr ': DescriptorColor;\r\n\t\tType: 'Clry.UsrS';\r\n\t\tLctn: number;\r\n\t\tMdpn: number;\r\n\t}[];\r\n\tTrns: {\r\n\t\tOpct: DescriptorUnitsValue;\r\n\t\tLctn: number;\r\n\t\tMdpn: number;\r\n\t}[];\r\n} | {\r\n\tGrdF: 'GrdF.ClNs';\r\n\tSmth: number;\r\n\t'Nm  ': string;\r\n\tClrS: string;\r\n\tRndS: number;\r\n\tVctC?: boolean;\r\n\tShTr?: boolean;\r\n\t'Mnm ': number[];\r\n\t'Mxm ': number[];\r\n};\r\n\r\nexport interface DescriptorColorContent {\r\n\t'Clr ': DescriptorColor;\r\n}\r\n\r\nexport interface DescriptorGradientContent {\r\n\tDthr?: boolean;\r\n\tgradientsInterpolationMethod?: string; // 'gradientInterpolationMethodType.Smoo'\r\n\tAngl?: DescriptorUnitsValue;\r\n\tType: string;\r\n\tGrad: DesciptorGradient;\r\n\tRvrs?: boolean;\r\n\t'Scl '?: DescriptorUnitsValue;\r\n\tAlgn?: boolean;\r\n\tOfst?: { Hrzn: DescriptorUnitsValue; Vrtc: DescriptorUnitsValue; };\r\n}\r\n\r\nexport interface DescriptorPatternContent {\r\n\tPtrn: DesciptorPattern;\r\n\tLnkd?: boolean;\r\n\tphase?: { Hrzn: number; Vrtc: number; };\r\n}\r\n\r\nexport type DescriptorVectorContent = DescriptorColorContent | DescriptorGradientContent | DescriptorPatternContent;\r\n\r\nexport interface StrokeDescriptor {\r\n\tstrokeStyleVersion: number;\r\n\tstrokeEnabled: boolean;\r\n\tfillEnabled: boolean;\r\n\tstrokeStyleLineWidth: DescriptorUnitsValue;\r\n\tstrokeStyleLineDashOffset: DescriptorUnitsValue;\r\n\tstrokeStyleMiterLimit: number;\r\n\tstrokeStyleLineCapType: string;\r\n\tstrokeStyleLineJoinType: string;\r\n\tstrokeStyleLineAlignment: string;\r\n\tstrokeStyleScaleLock: boolean;\r\n\tstrokeStyleStrokeAdjust: boolean;\r\n\tstrokeStyleLineDashSet: DescriptorUnitsValue[];\r\n\tstrokeStyleBlendMode: string;\r\n\tstrokeStyleOpacity: DescriptorUnitsValue;\r\n\tstrokeStyleContent: DescriptorVectorContent;\r\n\tstrokeStyleResolution: number;\r\n}\r\n\r\nexport interface BoundsDescriptor {\r\n\tLeft: DescriptorUnitsValue;\r\n\t'Top ': DescriptorUnitsValue;\r\n\tRght: DescriptorUnitsValue;\r\n\tBtom: DescriptorUnitsValue;\r\n}\r\n\r\nexport interface TextDescriptor {\r\n\t'Txt ': string;\r\n\ttextGridding: string;\r\n\tOrnt: string;\r\n\tAntA: string;\r\n\tbounds?: BoundsDescriptor;\r\n\tboundingBox?: BoundsDescriptor;\r\n\tTextIndex: number;\r\n\tEngineData?: Uint8Array;\r\n}\r\n\r\nexport interface WarpDescriptor {\r\n\twarpStyle: string;\r\n\twarpValue?: number;\r\n\twarpValues?: number[]\r\n\twarpPerspective: number;\r\n\twarpPerspectiveOther: number;\r\n\twarpRotate: string;\r\n\tbounds?: {\r\n\t\t'Top ': DescriptorUnitsValue;\r\n\t\tLeft: DescriptorUnitsValue;\r\n\t\tBtom: DescriptorUnitsValue;\r\n\t\tRght: DescriptorUnitsValue;\r\n\t} | {\r\n\t\t_classID: 'classFloatRect',\r\n\t\t'Top ': number,\r\n\t\tLeft: number,\r\n\t\tBtom: number,\r\n\t\tRght: number,\r\n\t},\r\n\tuOrder: number;\r\n\tvOrder: number;\r\n\tcustomEnvelopeWarp?: {\r\n\t\t_name: '';\r\n\t\t_classID: 'customEnvelopeWarp';\r\n\t\tmeshPoints: {\r\n\t\t\ttype: 'Hrzn' | 'Vrtc';\r\n\t\t\tvalues: number[];\r\n\t\t}[];\r\n\t};\r\n}\r\n\r\nexport interface QuiltWarpDescriptor extends WarpDescriptor {\r\n\tdeformNumRows: number;\r\n\tdeformNumCols: number;\r\n\tcustomEnvelopeWarp: {\r\n\t\t_name: '';\r\n\t\t_classID: 'customEnvelopeWarp';\r\n\t\tquiltSliceX: {\r\n\t\t\ttype: 'quiltSliceX';\r\n\t\t\tvalues: number[];\r\n\t\t}[];\r\n\t\tquiltSliceY: {\r\n\t\t\ttype: 'quiltSliceY';\r\n\t\t\tvalues: number[];\r\n\t\t}[];\r\n\t\tmeshPoints: {\r\n\t\t\ttype: 'Hrzn' | 'Vrtc';\r\n\t\t\tvalues: number[];\r\n\t\t}[];\r\n\t};\r\n}\r\n\r\nexport interface FractionDescriptor {\r\n\tnumerator: number;\r\n\tdenominator: number;\r\n}\r\n\r\nexport interface HrznVrtcDescriptor {\r\n\tHrzn: number;\r\n\tVrtc: number;\r\n}\r\n\r\nexport interface FrameDescriptor {\r\n\tFrLs: number[];\r\n\tenab?: boolean;\r\n\tIMsk?: { Ofst: HrznVrtcDescriptor };\r\n\tVMsk?: { Ofst: HrznVrtcDescriptor };\r\n\tOfst?: HrznVrtcDescriptor;\r\n\tFXRf?: HrznVrtcDescriptor;\r\n\tLefx?: Lfx2Descriptor;\r\n\tblendOptions?: { Opct: DescriptorUnitsValue; };\r\n}\r\n\r\nexport interface FrameListDescriptor {\r\n\tLaID: number; // layer ID\r\n\tLaSt: FrameDescriptor[];\r\n}\r\n\r\nexport function horzVrtcToXY(hv: HrznVrtcDescriptor): { x: number; y: number; } {\r\n\treturn { x: hv.Hrzn, y: hv.Vrtc };\r\n}\r\n\r\nexport function xyToHorzVrtc(xy: { x: number; y: number; }): HrznVrtcDescriptor {\r\n\treturn { Hrzn: xy.x, Vrtc: xy.y };\r\n}\r\n\r\nexport function descBoundsToBounds(desc: BoundsDescriptor): UnitsBounds {\r\n\treturn {\r\n\t\ttop: parseUnits(desc['Top ']),\r\n\t\tleft: parseUnits(desc.Left),\r\n\t\tright: parseUnits(desc.Rght),\r\n\t\tbottom: parseUnits(desc.Btom),\r\n\t};\r\n}\r\n\r\nexport function boundsToDescBounds(bounds: UnitsBounds): BoundsDescriptor {\r\n\treturn {\r\n\t\tLeft: unitsValue(bounds.left, 'bounds.left'),\r\n\t\t['Top ']: unitsValue(bounds.top, 'bounds.top'),\r\n\t\tRght: unitsValue(bounds.right, 'bounds.right'),\r\n\t\tBtom: unitsValue(bounds.bottom, 'bounds.bottom'),\r\n\t};\r\n}\r\n\r\nexport type TimelineAnimKeyDescriptor = {\r\n\tType: 'keyType.Opct';\r\n\tOpct: DescriptorUnitsValue;\r\n} | {\r\n\tType: 'keyType.Trnf';\r\n\t'Scl ': HrznVrtcDescriptor;\r\n\tSkew: HrznVrtcDescriptor;\r\n\trotation: number;\r\n\ttranslation: HrznVrtcDescriptor;\r\n} | {\r\n\tType: 'keyType.Pstn';\r\n\tHrzn: number;\r\n\tVrtc: number;\r\n} | {\r\n\tType: 'keyType.sheetStyle';\r\n\tsheetStyle: {\r\n\t\tVrsn: number;\r\n\t\tLefx?: Lfx2Descriptor;\r\n\t\tblendOptions: {};\r\n\t};\r\n} | {\r\n\tType: 'keyType.globalLighting';\r\n\tgblA: number;\r\n\tglobalAltitude: number;\r\n};\r\n\r\nexport interface TimelineKeyDescriptor {\r\n\tVrsn: 1;\r\n\tanimInterpStyle: 'animInterpStyle.Lnr ' | 'animInterpStyle.hold';\r\n\ttime: FractionDescriptor;\r\n\tanimKey: TimelineAnimKeyDescriptor;\r\n\tselected: boolean;\r\n}\r\n\r\nexport interface TimelineTrackDescriptor {\r\n\ttrackID: 'stdTrackID.globalLightingTrack' | 'stdTrackID.opacityTrack' | 'stdTrackID.styleTrack' | 'stdTrackID.sheetTransformTrack' | 'stdTrackID.sheetPositionTrack';\r\n\tVrsn: 1;\r\n\tenab: boolean;\r\n\tEffc: boolean;\r\n\teffectParams?: {\r\n\t\tkeyList: TimelineKeyDescriptor[];\r\n\t\tfillCanvas: boolean;\r\n\t\tzoomOrigin: number;\r\n\t};\r\n\tkeyList: TimelineKeyDescriptor[];\r\n}\r\n\r\nexport interface TimeScopeDescriptor {\r\n\tVrsn: 1;\r\n\tStrt: FractionDescriptor;\r\n\tduration: FractionDescriptor;\r\n\tinTime: FractionDescriptor;\r\n\toutTime: FractionDescriptor;\r\n}\r\n\r\nexport interface TimelineDescriptor {\r\n\tVrsn: 1;\r\n\ttimeScope: TimeScopeDescriptor;\r\n\tautoScope: boolean;\r\n\taudioLevel: number;\r\n\tLyrI: number;\r\n\ttrackList?: TimelineTrackDescriptor[];\r\n}\r\n\r\nexport interface EffectDescriptor extends Partial<DescriptorGradientContent>, Partial<DescriptorPatternContent> {\r\n\tenab?: boolean;\r\n\tStyl: string;\r\n\tPntT?: string;\r\n\t'Md  '?: string;\r\n\tOpct?: DescriptorUnitsValue;\r\n\t'Sz  '?: DescriptorUnitsValue;\r\n\t'Clr '?: DescriptorColor;\r\n\tpresent?: boolean;\r\n\tshowInDialog?: boolean;\r\n\toverprint?: boolean;\r\n\tuglg?: boolean; // useGlobalLight\r\n\t// more fields here used in parseEffectObject\r\n}\r\n\r\nexport interface Lfx2Descriptor {\r\n\t'Scl '?: DescriptorUnitsValue;\r\n\tmasterFXSwitch?: boolean;\r\n\tDrSh?: EffectDescriptor;\r\n\tIrSh?: EffectDescriptor;\r\n\tOrGl?: EffectDescriptor;\r\n\tIrGl?: EffectDescriptor;\r\n\tebbl?: EffectDescriptor;\r\n\tSoFi?: EffectDescriptor;\r\n\tpatternFill?: EffectDescriptor;\r\n\tGrFl?: EffectDescriptor;\r\n\tChFX?: EffectDescriptor;\r\n\tFrFX?: EffectDescriptor;\r\n}\r\n\r\nexport interface LmfxDescriptor {\r\n\t'Scl '?: DescriptorUnitsValue;\r\n\tmasterFXSwitch?: boolean;\r\n\tdropShadowMulti?: EffectDescriptor[];\r\n\tinnerShadowMulti?: EffectDescriptor[];\r\n\tOrGl?: EffectDescriptor;\r\n\tsolidFillMulti?: EffectDescriptor[];\r\n\tgradientFillMulti?: EffectDescriptor[];\r\n\tpatternFill?: EffectDescriptor; // ???\r\n\tframeFXMulti?: EffectDescriptor[];\r\n\tIrGl?: EffectDescriptor;\r\n\tebbl?: EffectDescriptor;\r\n\tChFX?: EffectDescriptor;\r\n\tnumModifyingFX?: number; // number of effects with enabled = true\r\n}\r\n\r\nfunction parseFxObject(fx: EffectDescriptor) {\r\n\tconst stroke: LayerEffectStroke = {\r\n\t\tenabled: !!fx.enab,\r\n\t\tposition: FStl.decode(fx.Styl),\r\n\t\tfillType: FrFl.decode(fx.PntT!),\r\n\t\tblendMode: BlnM.decode(fx['Md  ']!),\r\n\t\topacity: parsePercent(fx.Opct),\r\n\t\tsize: parseUnits(fx['Sz  ']!),\r\n\t};\r\n\r\n\tif (fx.present !== undefined) stroke.present = fx.present;\r\n\tif (fx.showInDialog !== undefined) stroke.showInDialog = fx.showInDialog;\r\n\tif (fx.overprint !== undefined) stroke.overprint = fx.overprint;\r\n\tif (fx['Clr ']) stroke.color = parseColor(fx['Clr ']);\r\n\tif (fx.Grad) stroke.gradient = parseGradientContent(fx as any);\r\n\tif (fx.Ptrn) stroke.pattern = parsePatternContent(fx as any);\r\n\r\n\treturn stroke;\r\n}\r\n\r\nfunction serializeFxObject(stroke: LayerEffectStroke) {\r\n\tlet FrFX: EffectDescriptor = {} as any;\r\n\tFrFX.enab = !!stroke.enabled;\r\n\tif (stroke.present !== undefined) FrFX.present = !!stroke.present;\r\n\tif (stroke.showInDialog !== undefined) FrFX.showInDialog = !!stroke.showInDialog;\r\n\tFrFX.Styl = FStl.encode(stroke.position);\r\n\tFrFX.PntT = FrFl.encode(stroke.fillType);\r\n\tFrFX['Md  '] = BlnM.encode(stroke.blendMode);\r\n\tFrFX.Opct = unitsPercent(stroke.opacity);\r\n\tFrFX['Sz  '] = unitsValue(stroke.size, 'size');\r\n\tif (stroke.color) FrFX['Clr '] = serializeColor(stroke.color);\r\n\tif (stroke.gradient) FrFX = { ...FrFX, ...serializeGradientContent(stroke.gradient) };\r\n\tif (stroke.pattern) FrFX = { ...FrFX, ...serializePatternContent(stroke.pattern) };\r\n\tif (stroke.overprint !== undefined) FrFX.overprint = !!stroke.overprint;\r\n\treturn FrFX;\r\n}\r\n\r\nexport function serializeEffects(e: LayerEffectsInfo, log: boolean, multi: boolean) {\r\n\tconst info: Lfx2Descriptor & LmfxDescriptor = multi ? {\r\n\t\t'Scl ': unitsPercentF(e.scale ?? 1),\r\n\t\tmasterFXSwitch: !e.disabled,\r\n\t} : {\r\n\t\tmasterFXSwitch: !e.disabled,\r\n\t\t'Scl ': unitsPercentF(e.scale ?? 1),\r\n\t};\r\n\r\n\tconst arrayKeys: (keyof LayerEffectsInfo)[] = ['dropShadow', 'innerShadow', 'solidFill', 'gradientOverlay', 'stroke'];\r\n\tfor (const key of arrayKeys) {\r\n\t\tif (e[key] && !Array.isArray(e[key])) throw new Error(`${key} should be an array`);\r\n\t}\r\n\r\n\tconst useMulti = <T>(arr: undefined | T[]): arr is T[] => !!arr && arr.length > 1 && multi;\r\n\tconst useSingle = <T>(arr: undefined | T[]): arr is T[] => !!arr && arr.length >= 1 && (!multi || arr.length === 1);\r\n\r\n\tif (useSingle(e.dropShadow)) info.DrSh = serializeEffectObject(e.dropShadow[0], 'dropShadow', log);\r\n\tif (useMulti(e.dropShadow)) info.dropShadowMulti = e.dropShadow.map(i => serializeEffectObject(i, 'dropShadow', log));\r\n\tif (useSingle(e.innerShadow)) info.IrSh = serializeEffectObject(e.innerShadow[0], 'innerShadow', log);\r\n\tif (useMulti(e.innerShadow)) info.innerShadowMulti = e.innerShadow.map(i => serializeEffectObject(i, 'innerShadow', log));\r\n\tif (e.outerGlow) info.OrGl = serializeEffectObject(e.outerGlow, 'outerGlow', log);\r\n\tif (useMulti(e.solidFill)) info.solidFillMulti = e.solidFill.map(i => serializeEffectObject(i, 'solidFill', log));\r\n\tif (useMulti(e.gradientOverlay)) info.gradientFillMulti = e.gradientOverlay.map(i => serializeEffectObject(i, 'gradientOverlay', log));\r\n\tif (useMulti(e.stroke)) info.frameFXMulti = e.stroke.map(i => serializeFxObject(i));\r\n\tif (e.innerGlow) info.IrGl = serializeEffectObject(e.innerGlow, 'innerGlow', log);\r\n\tif (e.bevel) info.ebbl = serializeEffectObject(e.bevel, 'bevel', log);\r\n\tif (useSingle(e.solidFill)) info.SoFi = serializeEffectObject(e.solidFill[0], 'solidFill', log);\r\n\tif (e.patternOverlay) info.patternFill = serializeEffectObject(e.patternOverlay, 'patternOverlay', log);\r\n\tif (useSingle(e.gradientOverlay)) info.GrFl = serializeEffectObject(e.gradientOverlay[0], 'gradientOverlay', log);\r\n\tif (e.satin) info.ChFX = serializeEffectObject(e.satin, 'satin', log);\r\n\tif (useSingle(e.stroke)) info.FrFX = serializeFxObject(e.stroke?.[0]);\r\n\r\n\tif (multi) {\r\n\t\tinfo.numModifyingFX = 0;\r\n\r\n\t\tfor (const key of Object.keys(e)) {\r\n\t\t\tconst value = (e as any)[key];\r\n\t\t\tif (Array.isArray(value)) {\r\n\t\t\t\tfor (const effect of value) {\r\n\t\t\t\t\tif (effect.enabled) info.numModifyingFX++;\r\n\t\t\t\t}\r\n\t\t\t} else if (value.enabled) {\r\n\t\t\t\tinfo.numModifyingFX++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn info;\r\n}\r\n\r\nexport function parseEffects(info: Lfx2Descriptor & LmfxDescriptor, log: boolean) {\r\n\tconst effects: LayerEffectsInfo = {};\r\n\tconst { masterFXSwitch, DrSh, dropShadowMulti, IrSh, innerShadowMulti, OrGl, IrGl, ebbl, SoFi, solidFillMulti, patternFill, GrFl, gradientFillMulti, ChFX, FrFX, frameFXMulti, numModifyingFX, ...rest } = info;\r\n\tif (!masterFXSwitch) effects.disabled = true;\r\n\tif (info['Scl ']) effects.scale = parsePercent(info['Scl ']);\r\n\tif (DrSh) effects.dropShadow = [parseEffectObject(DrSh, log)];\r\n\tif (dropShadowMulti) effects.dropShadow = dropShadowMulti.map(i => parseEffectObject(i, log));\r\n\tif (IrSh) effects.innerShadow = [parseEffectObject(IrSh, log)];\r\n\tif (innerShadowMulti) effects.innerShadow = innerShadowMulti.map(i => parseEffectObject(i, log));\r\n\tif (OrGl) effects.outerGlow = parseEffectObject(OrGl, log);\r\n\tif (IrGl) effects.innerGlow = parseEffectObject(IrGl, log);\r\n\tif (ebbl) effects.bevel = parseEffectObject(ebbl, log);\r\n\tif (SoFi) effects.solidFill = [parseEffectObject(SoFi, log)];\r\n\tif (solidFillMulti) effects.solidFill = solidFillMulti.map(i => parseEffectObject(i, log));\r\n\tif (patternFill) effects.patternOverlay = parseEffectObject(patternFill, log);\r\n\tif (GrFl) effects.gradientOverlay = [parseEffectObject(GrFl, log)];\r\n\tif (gradientFillMulti) effects.gradientOverlay = gradientFillMulti.map(i => parseEffectObject(i, log));\r\n\tif (ChFX) effects.satin = parseEffectObject(ChFX, log);\r\n\tif (FrFX) effects.stroke = [parseFxObject(FrFX)];\r\n\tif (frameFXMulti) effects.stroke = frameFXMulti.map(i => parseFxObject(i));\r\n\tif (log && Object.keys(rest).length > 1) console.log('Unhandled effect keys:', rest);\r\n\treturn effects;\r\n}\r\n\r\nfunction parseKeyList(keyList: TimelineKeyDescriptor[], logMissingFeatures: boolean) {\r\n\tconst keys: TimelineKey[] = [];\r\n\r\n\tfor (let j = 0; j < keyList.length; j++) {\r\n\t\tconst key = keyList[j];\r\n\t\tconst { time: { denominator, numerator }, selected, animKey } = key;\r\n\t\tconst time = { numerator, denominator };\r\n\t\tconst interpolation = animInterpStyleEnum.decode(key.animInterpStyle);\r\n\r\n\t\tswitch (animKey.Type) {\r\n\t\t\tcase 'keyType.Opct':\r\n\t\t\t\tkeys.push({ interpolation, time, selected, type: 'opacity', value: parsePercent(animKey.Opct) });\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'keyType.Pstn':\r\n\t\t\t\tkeys.push({ interpolation, time, selected, type: 'position', x: animKey.Hrzn, y: animKey.Vrtc });\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'keyType.Trnf':\r\n\t\t\t\tkeys.push({\r\n\t\t\t\t\tinterpolation, time, selected, type: 'transform',\r\n\t\t\t\t\tscale: horzVrtcToXY(animKey['Scl ']), skew: horzVrtcToXY(animKey.Skew), rotation: animKey.rotation, translation: horzVrtcToXY(animKey.translation)\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'keyType.sheetStyle': {\r\n\t\t\t\tconst key: TimelineKey = { interpolation, time, selected, type: 'style' };\r\n\t\t\t\tif (animKey.sheetStyle.Lefx) key.style = parseEffects(animKey.sheetStyle.Lefx, logMissingFeatures);\r\n\t\t\t\tkeys.push(key);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 'keyType.globalLighting': {\r\n\t\t\t\tkeys.push({\r\n\t\t\t\t\tinterpolation, time, selected, type: 'globalLighting',\r\n\t\t\t\t\tglobalAngle: animKey.gblA, globalAltitude: animKey.globalAltitude\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tdefault: throw new Error(`Unsupported keyType value`);\r\n\t\t}\r\n\t}\r\n\r\n\treturn keys;\r\n}\r\n\r\nfunction serializeKeyList(keys: TimelineKey[]): TimelineKeyDescriptor[] {\r\n\tconst keyList: TimelineKeyDescriptor[] = [];\r\n\r\n\tfor (let j = 0; j < keys.length; j++) {\r\n\t\tconst key = keys[j];\r\n\t\tconst { time, selected = false, interpolation } = key;\r\n\t\tconst animInterpStyle = animInterpStyleEnum.encode(interpolation) as 'animInterpStyle.Lnr ' | 'animInterpStyle.hold';\r\n\t\tlet animKey: TimelineAnimKeyDescriptor;\r\n\r\n\t\tswitch (key.type) {\r\n\t\t\tcase 'opacity':\r\n\t\t\t\tanimKey = { Type: 'keyType.Opct', Opct: unitsPercent(key.value) };\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'position':\r\n\t\t\t\tanimKey = { Type: 'keyType.Pstn', Hrzn: key.x, Vrtc: key.y };\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'transform':\r\n\t\t\t\tanimKey = { Type: 'keyType.Trnf', 'Scl ': xyToHorzVrtc(key.scale), Skew: xyToHorzVrtc(key.skew), rotation: key.rotation, translation: xyToHorzVrtc(key.translation) };\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'style':\r\n\t\t\t\tanimKey = { Type: 'keyType.sheetStyle', sheetStyle: { Vrsn: 1, blendOptions: {} } };\r\n\t\t\t\tif (key.style) animKey.sheetStyle = { Vrsn: 1, Lefx: serializeEffects(key.style, false, false), blendOptions: {} };\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'globalLighting': {\r\n\t\t\t\tanimKey = { Type: 'keyType.globalLighting', gblA: key.globalAngle, globalAltitude: key.globalAltitude };\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tdefault: throw new Error(`Unsupported keyType value`);\r\n\t\t}\r\n\r\n\t\tkeyList.push({ Vrsn: 1, animInterpStyle, time, animKey, selected });\r\n\t}\r\n\r\n\treturn keyList;\r\n}\r\n\r\nexport function parseTrackList(trackList: TimelineTrackDescriptor[], logMissingFeatures: boolean) {\r\n\tconst tracks: TimelineTrack[] = [];\r\n\r\n\tfor (let i = 0; i < trackList.length; i++) {\r\n\t\tconst tr = trackList[i];\r\n\t\tconst track: TimelineTrack = {\r\n\t\t\ttype: stdTrackID.decode(tr.trackID),\r\n\t\t\tenabled: tr.enab,\r\n\t\t\tkeys: parseKeyList(tr.keyList, logMissingFeatures),\r\n\t\t};\r\n\r\n\t\tif (tr.effectParams) {\r\n\t\t\ttrack.effectParams = {\r\n\t\t\t\tfillCanvas: tr.effectParams.fillCanvas,\r\n\t\t\t\tzoomOrigin: tr.effectParams.zoomOrigin,\r\n\t\t\t\tkeys: parseKeyList(tr.effectParams.keyList, logMissingFeatures),\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\ttracks.push(track);\r\n\t}\r\n\r\n\treturn tracks;\r\n}\r\n\r\nexport function serializeTrackList(tracks: TimelineTrack[]): TimelineTrackDescriptor[] {\r\n\tconst trackList: TimelineTrackDescriptor[] = [];\r\n\r\n\tfor (let i = 0; i < tracks.length; i++) {\r\n\t\tconst t = tracks[i];\r\n\t\ttrackList.push({\r\n\t\t\ttrackID: stdTrackID.encode(t.type) as any,\r\n\t\t\tVrsn: 1,\r\n\t\t\tenab: !!t.enabled,\r\n\t\t\tEffc: !!t.effectParams,\r\n\t\t\t...(t.effectParams ? {\r\n\t\t\t\teffectParams: {\r\n\t\t\t\t\tkeyList: serializeKeyList(t.keys),\r\n\t\t\t\t\tfillCanvas: t.effectParams.fillCanvas,\r\n\t\t\t\t\tzoomOrigin: t.effectParams.zoomOrigin,\r\n\t\t\t\t}\r\n\t\t\t} : {}),\r\n\t\t\tkeyList: serializeKeyList(t.keys),\r\n\t\t});\r\n\t}\r\n\r\n\treturn trackList;\r\n}\r\n\r\ntype AllEffects = LayerEffectShadow & LayerEffectsOuterGlow & LayerEffectStroke &\r\n\tLayerEffectInnerGlow & LayerEffectBevel & LayerEffectSolidFill &\r\n\tLayerEffectPatternOverlay & LayerEffectSatin & LayerEffectGradientOverlay;\r\n\r\nfunction parseEffectObject(obj: any, reportErrors: boolean) {\r\n\tconst result: AllEffects = {} as any;\r\n\r\n\tfor (const key of Object.keys(obj)) {\r\n\t\tconst val = obj[key];\r\n\r\n\t\tswitch (key) {\r\n\t\t\tcase 'enab': result.enabled = !!val; break;\r\n\t\t\tcase 'uglg': result.useGlobalLight = !!val; break;\r\n\t\t\tcase 'AntA': result.antialiased = !!val; break;\r\n\t\t\tcase 'Algn': result.align = !!val; break;\r\n\t\t\tcase 'Dthr': result.dither = !!val; break;\r\n\t\t\tcase 'Invr': result.invert = !!val; break;\r\n\t\t\tcase 'Rvrs': result.reverse = !!val; break;\r\n\t\t\tcase 'Clr ': result.color = parseColor(val); break;\r\n\t\t\tcase 'hglC': result.highlightColor = parseColor(val); break;\r\n\t\t\tcase 'sdwC': result.shadowColor = parseColor(val); break;\r\n\t\t\tcase 'Styl': result.position = FStl.decode(val); break;\r\n\t\t\tcase 'Md  ': result.blendMode = BlnM.decode(val); break;\r\n\t\t\tcase 'hglM': result.highlightBlendMode = BlnM.decode(val); break;\r\n\t\t\tcase 'sdwM': result.shadowBlendMode = BlnM.decode(val); break;\r\n\t\t\tcase 'bvlS': result.style = BESl.decode(val); break;\r\n\t\t\tcase 'bvlD': result.direction = BESs.decode(val); break;\r\n\t\t\tcase 'bvlT': result.technique = bvlT.decode(val) as any; break;\r\n\t\t\tcase 'GlwT': result.technique = BETE.decode(val) as any; break;\r\n\t\t\tcase 'glwS': result.source = IGSr.decode(val); break;\r\n\t\t\tcase 'Type': result.type = GrdT.decode(val); break;\r\n\t\t\tcase 'gs99': result.interpolationMethod = gradientInterpolationMethodType.decode(val); break;\r\n\t\t\tcase 'Opct': result.opacity = parsePercent(val); break;\r\n\t\t\tcase 'hglO': result.highlightOpacity = parsePercent(val); break;\r\n\t\t\tcase 'sdwO': result.shadowOpacity = parsePercent(val); break;\r\n\t\t\tcase 'lagl': result.angle = parseAngle(val); break;\r\n\t\t\tcase 'Angl': result.angle = parseAngle(val); break;\r\n\t\t\tcase 'Lald': result.altitude = parseAngle(val); break;\r\n\t\t\tcase 'Sftn': result.soften = parseUnits(val); break;\r\n\t\t\tcase 'srgR': result.strength = parsePercent(val); break;\r\n\t\t\tcase 'blur': result.size = parseUnits(val); break;\r\n\t\t\tcase 'Nose': result.noise = parsePercent(val); break;\r\n\t\t\tcase 'Inpr': result.range = parsePercent(val); break;\r\n\t\t\tcase 'Ckmt': result.choke = parseUnits(val); break;\r\n\t\t\tcase 'ShdN': result.jitter = parsePercent(val); break;\r\n\t\t\tcase 'Dstn': result.distance = parseUnits(val); break;\r\n\t\t\tcase 'Scl ': result.scale = parsePercent(val); break;\r\n\t\t\tcase 'Ptrn': result.pattern = { name: val['Nm  '], id: val.Idnt }; break;\r\n\t\t\tcase 'phase': result.phase = { x: val.Hrzn, y: val.Vrtc }; break;\r\n\t\t\tcase 'Ofst': result.offset = { x: parsePercent(val.Hrzn), y: parsePercent(val.Vrtc) }; break;\r\n\t\t\tcase 'MpgS':\r\n\t\t\tcase 'TrnS':\r\n\t\t\t\tresult.contour = {\r\n\t\t\t\t\tname: val['Nm  '],\r\n\t\t\t\t\tcurve: (val['Crv '] as any[]).map(p => ({ x: p.Hrzn, y: p.Vrtc })),\r\n\t\t\t\t};\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'Grad': result.gradient = parseGradient(val); break;\r\n\t\t\tcase 'useTexture':\r\n\t\t\tcase 'useShape':\r\n\t\t\tcase 'layerConceals':\r\n\t\t\tcase 'present':\r\n\t\t\tcase 'showInDialog':\r\n\t\t\tcase 'antialiasGloss': result[key] = val; break;\r\n\t\t\tcase '_name':\r\n\t\t\tcase '_classID':\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treportErrors && console.log(`Invalid effect key: '${key}', value:`, val);\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\nfunction serializeEffectObject(obj: any, objName: string, reportErrors: boolean) {\r\n\tconst result: any = {};\r\n\r\n\tfor (const objKey of Object.keys(obj)) {\r\n\t\tconst key: keyof AllEffects = objKey as any;\r\n\t\tconst val = obj[key];\r\n\r\n\t\tswitch (key) {\r\n\t\t\tcase 'enabled': result.enab = !!val; break;\r\n\t\t\tcase 'useGlobalLight': result.uglg = !!val; break;\r\n\t\t\tcase 'antialiased': result.AntA = !!val; break;\r\n\t\t\tcase 'align': result.Algn = !!val; break;\r\n\t\t\tcase 'dither': result.Dthr = !!val; break;\r\n\t\t\tcase 'invert': result.Invr = !!val; break;\r\n\t\t\tcase 'reverse': result.Rvrs = !!val; break;\r\n\t\t\tcase 'color': result['Clr '] = serializeColor(val); break;\r\n\t\t\tcase 'highlightColor': result.hglC = serializeColor(val); break;\r\n\t\t\tcase 'shadowColor': result.sdwC = serializeColor(val); break;\r\n\t\t\tcase 'position': result.Styl = FStl.encode(val); break;\r\n\t\t\tcase 'blendMode': result['Md  '] = BlnM.encode(val); break;\r\n\t\t\tcase 'highlightBlendMode': result.hglM = BlnM.encode(val); break;\r\n\t\t\tcase 'shadowBlendMode': result.sdwM = BlnM.encode(val); break;\r\n\t\t\tcase 'style': result.bvlS = BESl.encode(val); break;\r\n\t\t\tcase 'direction': result.bvlD = BESs.encode(val); break;\r\n\t\t\tcase 'technique':\r\n\t\t\t\tif (objName === 'bevel') {\r\n\t\t\t\t\tresult.bvlT = bvlT.encode(val);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresult.GlwT = BETE.encode(val);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'source': result.glwS = IGSr.encode(val); break;\r\n\t\t\tcase 'type': result.Type = GrdT.encode(val); break;\r\n\t\t\tcase 'interpolationMethod': result.gs99 = gradientInterpolationMethodType.encode(val); break;\r\n\t\t\tcase 'opacity': result.Opct = unitsPercent(val); break;\r\n\t\t\tcase 'highlightOpacity': result.hglO = unitsPercent(val); break;\r\n\t\t\tcase 'shadowOpacity': result.sdwO = unitsPercent(val); break;\r\n\t\t\tcase 'angle':\r\n\t\t\t\tif (objName === 'gradientOverlay' || objName === 'patternFill') {\r\n\t\t\t\t\tresult.Angl = unitsAngle(val);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresult.lagl = unitsAngle(val);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'altitude': result.Lald = unitsAngle(val); break;\r\n\t\t\tcase 'soften': result.Sftn = unitsValue(val, key); break;\r\n\t\t\tcase 'strength': result.srgR = unitsPercent(val); break;\r\n\t\t\tcase 'size': result.blur = unitsValue(val, key); break;\r\n\t\t\tcase 'noise': result.Nose = unitsPercent(val); break;\r\n\t\t\tcase 'range': result.Inpr = unitsPercent(val); break;\r\n\t\t\tcase 'choke': result.Ckmt = unitsValue(val, key); break;\r\n\t\t\tcase 'jitter': result.ShdN = unitsPercent(val); break;\r\n\t\t\tcase 'distance': result.Dstn = unitsValue(val, key); break;\r\n\t\t\tcase 'scale': result['Scl '] = unitsPercent(val); break;\r\n\t\t\tcase 'pattern': result.Ptrn = { 'Nm  ': val.name, Idnt: val.id }; break;\r\n\t\t\tcase 'phase': result.phase = { Hrzn: val.x, Vrtc: val.y }; break;\r\n\t\t\tcase 'offset': result.Ofst = { Hrzn: unitsPercent(val.x), Vrtc: unitsPercent(val.y) }; break;\r\n\t\t\tcase 'contour': {\r\n\t\t\t\tresult[objName === 'satin' ? 'MpgS' : 'TrnS'] = {\r\n\t\t\t\t\t'Nm  ': (val as EffectContour).name,\r\n\t\t\t\t\t'Crv ': (val as EffectContour).curve.map(p => ({ Hrzn: p.x, Vrtc: p.y })),\r\n\t\t\t\t};\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 'gradient': result.Grad = serializeGradient(val); break;\r\n\t\t\tcase 'useTexture':\r\n\t\t\tcase 'useShape':\r\n\t\t\tcase 'layerConceals':\r\n\t\t\tcase 'present':\r\n\t\t\tcase 'showInDialog':\r\n\t\t\tcase 'antialiasGloss':\r\n\t\t\t\tresult[key] = val;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treportErrors && console.log(`Invalid effect key: '${key}', value:`, val);\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\nfunction parseGradient(grad: DesciptorGradient): EffectSolidGradient | EffectNoiseGradient {\r\n\tif (grad.GrdF === 'GrdF.CstS') {\r\n\t\tconst samples: number = grad.Intr || 4096;\r\n\r\n\t\treturn {\r\n\t\t\ttype: 'solid',\r\n\t\t\tname: grad['Nm  '],\r\n\t\t\tsmoothness: grad.Intr / 4096,\r\n\t\t\tcolorStops: grad.Clrs.map(s => ({\r\n\t\t\t\tcolor: parseColor(s['Clr ']),\r\n\t\t\t\tlocation: s.Lctn / samples,\r\n\t\t\t\tmidpoint: s.Mdpn / 100,\r\n\t\t\t})),\r\n\t\t\topacityStops: grad.Trns.map(s => ({\r\n\t\t\t\topacity: parsePercent(s.Opct),\r\n\t\t\t\tlocation: s.Lctn / samples,\r\n\t\t\t\tmidpoint: s.Mdpn / 100,\r\n\t\t\t})),\r\n\t\t};\r\n\t} else {\r\n\t\treturn {\r\n\t\t\ttype: 'noise',\r\n\t\t\tname: grad['Nm  '],\r\n\t\t\troughness: grad.Smth / 4096,\r\n\t\t\tcolorModel: ClrS.decode(grad.ClrS),\r\n\t\t\trandomSeed: grad.RndS,\r\n\t\t\trestrictColors: !!grad.VctC,\r\n\t\t\taddTransparency: !!grad.ShTr,\r\n\t\t\tmin: grad['Mnm '].map(x => x / 100),\r\n\t\t\tmax: grad['Mxm '].map(x => x / 100),\r\n\t\t};\r\n\t}\r\n}\r\n\r\nfunction serializeGradient(grad: EffectSolidGradient | EffectNoiseGradient): DesciptorGradient {\r\n\tif (grad.type === 'solid') {\r\n\t\tconst samples = Math.round((grad.smoothness ?? 1) * 4096);\r\n\t\treturn {\r\n\t\t\t'Nm  ': grad.name || '',\r\n\t\t\tGrdF: 'GrdF.CstS',\r\n\t\t\tIntr: samples,\r\n\t\t\tClrs: grad.colorStops.map(s => ({\r\n\t\t\t\t'Clr ': serializeColor(s.color),\r\n\t\t\t\tType: 'Clry.UsrS',\r\n\t\t\t\tLctn: Math.round(s.location * samples),\r\n\t\t\t\tMdpn: Math.round((s.midpoint ?? 0.5) * 100),\r\n\t\t\t})),\r\n\t\t\tTrns: grad.opacityStops.map(s => ({\r\n\t\t\t\tOpct: unitsPercent(s.opacity),\r\n\t\t\t\tLctn: Math.round(s.location * samples),\r\n\t\t\t\tMdpn: Math.round((s.midpoint ?? 0.5) * 100),\r\n\t\t\t})),\r\n\t\t};\r\n\t} else {\r\n\t\treturn {\r\n\t\t\tGrdF: 'GrdF.ClNs',\r\n\t\t\t'Nm  ': grad.name || '',\r\n\t\t\tShTr: !!grad.addTransparency,\r\n\t\t\tVctC: !!grad.restrictColors,\r\n\t\t\tClrS: ClrS.encode(grad.colorModel),\r\n\t\t\tRndS: grad.randomSeed || 0,\r\n\t\t\tSmth: Math.round((grad.roughness ?? 1) * 4096),\r\n\t\t\t'Mnm ': (grad.min || [0, 0, 0, 0]).map(x => x * 100),\r\n\t\t\t'Mxm ': (grad.max || [1, 1, 1, 1]).map(x => x * 100),\r\n\t\t};\r\n\t}\r\n}\r\n\r\nfunction parseGradientContent(descriptor: DescriptorGradientContent) {\r\n\tconst result = parseGradient(descriptor.Grad) as (EffectSolidGradient | EffectNoiseGradient) & ExtraGradientInfo;\r\n\tresult.style = GrdT.decode(descriptor.Type);\r\n\tif (descriptor.Dthr !== undefined) result.dither = descriptor.Dthr;\r\n\tif (descriptor.gradientsInterpolationMethod !== undefined) result.interpolationMethod = gradientInterpolationMethodType.decode(descriptor.gradientsInterpolationMethod);\r\n\tif (descriptor.Rvrs !== undefined) result.reverse = descriptor.Rvrs;\r\n\tif (descriptor.Angl !== undefined) result.angle = parseAngle(descriptor.Angl);\r\n\tif (descriptor['Scl '] !== undefined) result.scale = parsePercent(descriptor['Scl ']);\r\n\tif (descriptor.Algn !== undefined) result.align = descriptor.Algn;\r\n\tif (descriptor.Ofst !== undefined) {\r\n\t\tresult.offset = {\r\n\t\t\tx: parsePercent(descriptor.Ofst.Hrzn),\r\n\t\t\ty: parsePercent(descriptor.Ofst.Vrtc)\r\n\t\t};\r\n\t}\r\n\treturn result;\r\n}\r\n\r\nfunction parsePatternContent(descriptor: DescriptorPatternContent) {\r\n\tconst result: EffectPattern & ExtraPatternInfo = {\r\n\t\tname: descriptor.Ptrn['Nm  '],\r\n\t\tid: descriptor.Ptrn.Idnt,\r\n\t};\r\n\tif (descriptor.Lnkd !== undefined) result.linked = descriptor.Lnkd;\r\n\tif (descriptor.phase !== undefined) result.phase = { x: descriptor.phase.Hrzn, y: descriptor.phase.Vrtc };\r\n\treturn result;\r\n}\r\n\r\n\r\nexport function parseVectorContent(descriptor: DescriptorVectorContent): VectorContent {\r\n\tif ('Grad' in descriptor) {\r\n\t\treturn parseGradientContent(descriptor);\r\n\t} else if ('Ptrn' in descriptor) {\r\n\t\treturn { type: 'pattern', ...parsePatternContent(descriptor) };\r\n\t} else if ('Clr ' in descriptor) {\r\n\t\treturn { type: 'color', color: parseColor(descriptor['Clr ']) };\r\n\t} else {\r\n\t\tthrow new Error('Invalid vector content');\r\n\t}\r\n}\r\n\r\nfunction serializeGradientContent(content: (EffectSolidGradient | EffectNoiseGradient) & ExtraGradientInfo) {\r\n\tconst result: DescriptorGradientContent = {} as any;\r\n\tif (content.dither !== undefined) result.Dthr = content.dither;\r\n\tif (content.interpolationMethod !== undefined) result.gradientsInterpolationMethod = gradientInterpolationMethodType.encode(content.interpolationMethod);\r\n\tif (content.reverse !== undefined) result.Rvrs = content.reverse;\r\n\tif (content.angle !== undefined) result.Angl = unitsAngle(content.angle);\r\n\tresult.Type = GrdT.encode(content.style);\r\n\tif (content.align !== undefined) result.Algn = content.align;\r\n\tif (content.scale !== undefined) result['Scl '] = unitsPercent(content.scale);\r\n\tif (content.offset) {\r\n\t\tresult.Ofst = {\r\n\t\t\tHrzn: unitsPercent(content.offset.x),\r\n\t\t\tVrtc: unitsPercent(content.offset.y),\r\n\t\t};\r\n\t}\r\n\tresult.Grad = serializeGradient(content);\r\n\treturn result;\r\n}\r\n\r\nfunction serializePatternContent(content: EffectPattern & ExtraPatternInfo) {\r\n\tconst result: DescriptorPatternContent = {\r\n\t\tPtrn: {\r\n\t\t\t'Nm  ': content.name || '',\r\n\t\t\tIdnt: content.id || '',\r\n\t\t}\r\n\t};\r\n\tif (content.linked !== undefined) result.Lnkd = !!content.linked;\r\n\tif (content.phase !== undefined) result.phase = { Hrzn: content.phase.x, Vrtc: content.phase.y };\r\n\treturn result;\r\n}\r\n\r\nexport function serializeVectorContent(content: VectorContent): { descriptor: DescriptorVectorContent; key: string; } {\r\n\tif (content.type === 'color') {\r\n\t\treturn { key: 'SoCo', descriptor: { 'Clr ': serializeColor(content.color) } };\r\n\t} else if (content.type === 'pattern') {\r\n\t\treturn { key: 'PtFl', descriptor: serializePatternContent(content) };\r\n\t} else {\r\n\t\treturn { key: 'GdFl', descriptor: serializeGradientContent(content) };\r\n\t}\r\n}\r\n\r\nexport function parseColor(color: DescriptorColor): Color {\r\n\tif ('H   ' in color) {\r\n\t\treturn { h: parsePercentOrAngle(color['H   ']), s: color.Strt, b: color.Brgh };\r\n\t} else if ('Rd  ' in color) {\r\n\t\treturn { r: color['Rd  '], g: color['Grn '], b: color['Bl  '] };\r\n\t} else if ('Cyn ' in color) {\r\n\t\treturn { c: color['Cyn '], m: color.Mgnt, y: color['Ylw '], k: color.Blck };\r\n\t} else if ('Gry ' in color) {\r\n\t\treturn { k: color['Gry '] };\r\n\t} else if ('Lmnc' in color) {\r\n\t\treturn { l: color.Lmnc, a: color['A   '], b: color['B   '] };\r\n\t} else if ('redFloat' in color) {\r\n\t\treturn { fr: color.redFloat, fg: color.greenFloat, fb: color.blueFloat };\r\n\t} else {\r\n\t\tthrow new Error('Unsupported color descriptor');\r\n\t}\r\n}\r\n\r\nexport function serializeColor(color: Color | undefined): DescriptorColor {\r\n\tif (!color) {\r\n\t\treturn { _name: '', _classID: 'RGBC', 'Rd  ': 0, 'Grn ': 0, 'Bl  ': 0 };\r\n\t} else if ('r' in color) {\r\n\t\treturn { _name: '', _classID: 'RGBC', 'Rd  ': color.r || 0, 'Grn ': color.g || 0, 'Bl  ': color.b || 0 };\r\n\t} else if ('fr' in color) {\r\n\t\treturn { _name: '', _classID: 'RGBC', redFloat: color.fr, greenFloat: color.fg, blueFloat: color.fb };\r\n\t} else if ('h' in color) {\r\n\t\treturn { _name: '', _classID: 'HSBC', 'H   ': unitsAngle(color.h * 360), Strt: color.s || 0, Brgh: color.b || 0 };\r\n\t} else if ('c' in color) {\r\n\t\treturn { _name: '', _classID: 'CMYC', 'Cyn ': color.c || 0, Mgnt: color.m || 0, 'Ylw ': color.y || 0, Blck: color.k || 0 };\r\n\t} else if ('l' in color) {\r\n\t\treturn { _name: '', _classID: 'LABC', Lmnc: color.l || 0, 'A   ': color.a || 0, 'B   ': color.b || 0 };\r\n\t} else if ('k' in color) {\r\n\t\treturn { _name: '', _classID: 'GRYC', 'Gry ': color.k };\r\n\t} else {\r\n\t\tthrow new Error('Invalid color value');\r\n\t}\r\n}\r\n\r\nexport function parseAngle(x: DescriptorUnitsValue) {\r\n\tif (x === undefined) return 0;\r\n\tif (x.units !== 'Angle') throw new Error(`Invalid units: ${x.units}`);\r\n\treturn x.value;\r\n}\r\n\r\nexport function parsePercent(x: DescriptorUnitsValue | undefined) {\r\n\tif (x === undefined) return 1;\r\n\tif (x.units !== 'Percent') throw new Error(`Invalid units: ${x.units}`);\r\n\treturn x.value / 100;\r\n}\r\n\r\nexport function parsePercentOrAngle(x: DescriptorUnitsValue | undefined) {\r\n\tif (x === undefined) return 1;\r\n\tif (x.units === 'Percent') return x.value / 100;\r\n\tif (x.units === 'Angle') return x.value / 360;\r\n\tthrow new Error(`Invalid units: ${x.units}`);\r\n}\r\n\r\nexport function parseUnits({ units, value }: DescriptorUnitsValue): UnitsValue {\r\n\tif (\r\n\t\tunits !== 'Pixels' && units !== 'Millimeters' && units !== 'Points' && units !== 'None' &&\r\n\t\tunits !== 'Picas' && units !== 'Inches' && units !== 'Centimeters' && units !== 'Density'\r\n\t) {\r\n\t\tthrow new Error(`Invalid units: ${JSON.stringify({ units, value })}`);\r\n\t}\r\n\treturn { value, units };\r\n}\r\n\r\nexport function parseUnitsOrNumber(value: DescriptorUnitsValue | number, units: Units = 'Pixels'): UnitsValue {\r\n\tif (typeof value === 'number') return { value, units };\r\n\treturn parseUnits(value);\r\n}\r\n\r\nexport function parseUnitsToNumber({ units, value }: DescriptorUnitsValue, expectedUnits: string): number {\r\n\tif (units !== expectedUnits) throw new Error(`Invalid units: ${JSON.stringify({ units, value })}`);\r\n\treturn value;\r\n}\r\n\r\nexport function unitsAngle(value: number | undefined): DescriptorUnitsValue {\r\n\treturn { units: 'Angle', value: value || 0 };\r\n}\r\n\r\nexport function unitsPercent(value: number | undefined): DescriptorUnitsValue {\r\n\treturn { units: 'Percent', value: Math.round((value || 0) * 100) };\r\n}\r\n\r\nexport function unitsPercentF(value: number | undefined): DescriptorUnitsValue {\r\n\treturn { units: 'Percent', value: (value || 0) * 100 };\r\n}\r\n\r\nexport function unitsValue(x: UnitsValue | undefined, key: string): DescriptorUnitsValue {\r\n\tif (x == null) return { units: 'Pixels', value: 0 };\r\n\r\n\tif (typeof x !== 'object')\r\n\t\tthrow new Error(`Invalid value: ${JSON.stringify(x)} (key: ${key}) (should have value and units)`);\r\n\r\n\tconst { units, value } = x;\r\n\r\n\tif (typeof value !== 'number')\r\n\t\tthrow new Error(`Invalid value in ${JSON.stringify(x)} (key: ${key})`);\r\n\r\n\tif (\r\n\t\tunits !== 'Pixels' && units !== 'Millimeters' && units !== 'Points' && units !== 'None' &&\r\n\t\tunits !== 'Picas' && units !== 'Inches' && units !== 'Centimeters' && units !== 'Density'\r\n\t) {\r\n\t\tthrow new Error(`Invalid units in ${JSON.stringify(x)} (key: ${key})`);\r\n\t}\r\n\r\n\treturn { units, value };\r\n}\r\n\r\nexport function frac({ numerator, denominator }: FractionDescriptor) {\r\n\treturn { numerator, denominator };\r\n}\r\n\r\nexport const textGridding = createEnum<TextGridding>('textGridding', 'none', {\r\n\tnone: 'None',\r\n\tround: 'Rnd ',\r\n});\r\n\r\nexport const Ornt = createEnum<Orientation>('Ornt', 'horizontal', {\r\n\thorizontal: 'Hrzn',\r\n\tvertical: 'Vrtc',\r\n});\r\n\r\nexport const Annt = createEnum<AntiAlias>('Annt', 'sharp', {\r\n\tnone: 'Anno',\r\n\tsharp: 'antiAliasSharp',\r\n\tcrisp: 'AnCr',\r\n\tstrong: 'AnSt',\r\n\tsmooth: 'AnSm',\r\n\tplatform: 'antiAliasPlatformGray',\r\n\tplatformLCD: 'antiAliasPlatformLCD',\r\n});\r\n\r\nexport const warpStyle = createEnum<WarpStyle>('warpStyle', 'none', {\r\n\tnone: 'warpNone',\r\n\tarc: 'warpArc',\r\n\tarcLower: 'warpArcLower',\r\n\tarcUpper: 'warpArcUpper',\r\n\tarch: 'warpArch',\r\n\tbulge: 'warpBulge',\r\n\tshellLower: 'warpShellLower',\r\n\tshellUpper: 'warpShellUpper',\r\n\tflag: 'warpFlag',\r\n\twave: 'warpWave',\r\n\tfish: 'warpFish',\r\n\trise: 'warpRise',\r\n\tfisheye: 'warpFisheye',\r\n\tinflate: 'warpInflate',\r\n\tsqueeze: 'warpSqueeze',\r\n\ttwist: 'warpTwist',\r\n\tcylinder: 'warpCylinder',\r\n\tcustom: 'warpCustom',\r\n});\r\n\r\nexport const BlnM = createEnum<BlendMode>('BlnM', 'normal', {\r\n\t'normal': 'Nrml',\r\n\t'dissolve': 'Dslv',\r\n\t'darken': 'Drkn',\r\n\t'multiply': 'Mltp',\r\n\t'color burn': 'CBrn',\r\n\t'linear burn': 'linearBurn',\r\n\t'darker color': 'darkerColor',\r\n\t'lighten': 'Lghn',\r\n\t'screen': 'Scrn',\r\n\t'color dodge': 'CDdg',\r\n\t'linear dodge': 'linearDodge',\r\n\t'lighter color': 'lighterColor',\r\n\t'overlay': 'Ovrl',\r\n\t'soft light': 'SftL',\r\n\t'hard light': 'HrdL',\r\n\t'vivid light': 'vividLight',\r\n\t'linear light': 'linearLight',\r\n\t'pin light': 'pinLight',\r\n\t'hard mix': 'hardMix',\r\n\t'difference': 'Dfrn',\r\n\t'exclusion': 'Xclu',\r\n\t'subtract': 'blendSubtraction',\r\n\t'divide': 'blendDivide',\r\n\t'hue': 'H   ',\r\n\t'saturation': 'Strt',\r\n\t'color': 'Clr ',\r\n\t'luminosity': 'Lmns',\r\n\t// used in ABR\r\n\t'linear height': 'linearHeight',\r\n\t'height': 'Hght',\r\n\t'subtraction': 'Sbtr', // 2nd version of subtract ?\r\n});\r\n\r\nexport const BESl = createEnum<BevelStyle>('BESl', 'inner bevel', {\r\n\t'inner bevel': 'InrB',\r\n\t'outer bevel': 'OtrB',\r\n\t'emboss': 'Embs',\r\n\t'pillow emboss': 'PlEb',\r\n\t'stroke emboss': 'strokeEmboss',\r\n});\r\n\r\nexport const bvlT = createEnum<BevelTechnique>('bvlT', 'smooth', {\r\n\t'smooth': 'SfBL',\r\n\t'chisel hard': 'PrBL',\r\n\t'chisel soft': 'Slmt',\r\n});\r\n\r\nexport const BESs = createEnum<BevelDirection>('BESs', 'up', {\r\n\tup: 'In  ',\r\n\tdown: 'Out ',\r\n});\r\n\r\nexport const BETE = createEnum<GlowTechnique>('BETE', 'softer', {\r\n\tsofter: 'SfBL',\r\n\tprecise: 'PrBL',\r\n});\r\n\r\nexport const IGSr = createEnum<GlowSource>('IGSr', 'edge', {\r\n\tedge: 'SrcE',\r\n\tcenter: 'SrcC',\r\n});\r\n\r\nexport const GrdT = createEnum<GradientStyle>('GrdT', 'linear', {\r\n\tlinear: 'Lnr ',\r\n\tradial: 'Rdl ',\r\n\tangle: 'Angl',\r\n\treflected: 'Rflc',\r\n\tdiamond: 'Dmnd',\r\n});\r\n\r\nexport const animInterpStyleEnum = createEnum<TimelineKeyInterpolation>('animInterpStyle', 'linear', {\r\n\tlinear: 'Lnr ',\r\n\thold: 'hold',\r\n});\r\n\r\nexport const stdTrackID = createEnum<TimelineTrackType>('stdTrackID', 'opacity', {\r\n\topacity: 'opacityTrack',\r\n\tstyle: 'styleTrack',\r\n\tsheetTransform: 'sheetTransformTrack',\r\n\tsheetPosition: 'sheetPositionTrack',\r\n\tglobalLighting: 'globalLightingTrack',\r\n});\r\n\r\nexport const gradientInterpolationMethodType = createEnum<InterpolationMethod>('gradientInterpolationMethodType', 'perceptual', {\r\n\tperceptual: 'Perc',\r\n\tlinear: 'Lnr ',\r\n\tclassic: 'Gcls',\r\n\tsmooth: 'Smoo',\r\n\t// TODO: stripes\r\n});\r\n\r\nexport const ClrS = createEnum<'rgb' | 'hsb' | 'lab'>('ClrS', 'rgb', {\r\n\trgb: 'RGBC',\r\n\thsb: 'HSBl',\r\n\tlab: 'LbCl',\r\n\thsl: 'HSLC',\r\n});\r\n\r\nexport const FStl = createEnum<'inside' | 'center' | 'outside'>('FStl', 'outside', {\r\n\toutside: 'OutF',\r\n\tcenter: 'CtrF',\r\n\tinside: 'InsF'\r\n});\r\n\r\nexport const FrFl = createEnum<'color' | 'gradient' | 'pattern'>('FrFl', 'color', {\r\n\tcolor: 'SClr',\r\n\tgradient: 'GrFl',\r\n\tpattern: 'Ptrn',\r\n});\r\n\r\nexport const ESliceType = createEnum<'image' | 'noImage'>('ESliceType', 'image', {\r\n\timage: 'Img ',\r\n\tnoImage: 'noImage',\r\n});\r\n\r\nexport const ESliceHorzAlign = createEnum<'default'>('ESliceHorzAlign', 'default', {\r\n\tdefault: 'default',\r\n});\r\n\r\nexport const ESliceVertAlign = createEnum<'default'>('ESliceVertAlign', 'default', {\r\n\tdefault: 'default',\r\n});\r\n\r\nexport const ESliceOrigin = createEnum<'userGenerated' | 'autoGenerated' | 'layer'>('ESliceOrigin', 'userGenerated', {\r\n\tuserGenerated: 'userGenerated',\r\n\tautoGenerated: 'autoGenerated',\r\n\tlayer: 'layer',\r\n});\r\n\r\nexport const ESliceBGColorType = createEnum<'none' | 'matte' | 'color'>('ESliceBGColorType', 'none', {\r\n\tnone: 'None',\r\n\tmatte: 'matte',\r\n\tcolor: 'Clr ',\r\n});\r\n\r\nexport const strokeStyleLineCapType = createEnum<LineCapType>('strokeStyleLineCapType', 'butt', {\r\n\tbutt: 'strokeStyleButtCap',\r\n\tround: 'strokeStyleRoundCap',\r\n\tsquare: 'strokeStyleSquareCap',\r\n});\r\n\r\nexport const strokeStyleLineJoinType = createEnum<LineJoinType>('strokeStyleLineJoinType', 'miter', {\r\n\tmiter: 'strokeStyleMiterJoin',\r\n\tround: 'strokeStyleRoundJoin',\r\n\tbevel: 'strokeStyleBevelJoin',\r\n});\r\n\r\nexport const strokeStyleLineAlignment = createEnum<LineAlignment>('strokeStyleLineAlignment', 'inside', {\r\n\tinside: 'strokeStyleAlignInside',\r\n\tcenter: 'strokeStyleAlignCenter',\r\n\toutside: 'strokeStyleAlignOutside',\r\n});\r\n\r\nexport const BlrM = createEnum<'spin' | 'zoom'>('BlrM', 'ispinmage', {\r\n\tspin: 'Spn ',\r\n\tzoom: 'Zm  ',\r\n});\r\n\r\nexport const BlrQ = createEnum<'draft' | 'good' | 'best'>('BlrQ', 'good', {\r\n\tdraft: 'Drft',\r\n\tgood: 'Gd  ',\r\n\tbest: 'Bst ',\r\n});\r\n\r\nexport const SmBM = createEnum<'normal' | 'edge only' | 'overlay edge'>('SmBM', 'normal', {\r\n\tnormal: 'SBMN',\r\n\t'edge only': 'SBME',\r\n\t'overlay edge': 'SBMO',\r\n});\r\n\r\nexport const SmBQ = createEnum<'low' | 'medium' | 'high'>('SmBQ', 'medium', {\r\n\tlow: 'SBQL',\r\n\tmedium: 'SBQM',\r\n\thigh: 'SBQH',\r\n});\r\n\r\nexport const DspM = createEnum<'stretch to fit' | 'tile'>('DspM', 'stretch to fit', {\r\n\t'stretch to fit': 'StrF',\r\n\t'tile': 'Tile',\r\n});\r\n\r\nexport const UndA = createEnum<'wrap around' | 'repeat edge pixels'>('UndA', 'repeat edge pixels', {\r\n\t'wrap around': 'WrpA',\r\n\t'repeat edge pixels': 'RptE',\r\n});\r\n\r\nexport const Cnvr = createEnum<'rectangular to polar' | 'polar to rectangular'>('Cnvr', 'rectangular to polar', {\r\n\t'rectangular to polar': 'RctP',\r\n\t'polar to rectangular': 'PlrR',\r\n});\r\n\r\nexport const RplS = createEnum<'small' | 'medium' | 'large'>('RplS', 'medium', {\r\n\tsmall: 'Sml ',\r\n\tmedium: 'Mdm ',\r\n\tlarge: 'Lrg ',\r\n});\r\n\r\nexport const SphM = createEnum<'normal' | 'horizontal only' | 'vertical only'>('SphM', 'normal', {\r\n\t'normal': 'Nrml',\r\n\t'horizontal only': 'HrzO',\r\n\t'vertical only': 'VrtO',\r\n});\r\n\r\nexport const Wvtp = createEnum<'sine' | 'triangle' | 'square'>('Wvtp', 'sine', {\r\n\tsine: 'WvSn',\r\n\ttriangle: 'WvTr',\r\n\tsquare: 'WvSq',\r\n});\r\n\r\nexport const ZZTy = createEnum<'around center' | 'out from center' | 'pond ripples'>('ZZTy', 'pond ripples', {\r\n\t'around center': 'ArnC',\r\n\t'out from center': 'OtFr',\r\n\t'pond ripples': 'PndR',\r\n});\r\n\r\nexport const Dstr = createEnum<'uniform' | 'gaussian'>('Dstr', 'uniform', {\r\n\tuniform: 'Unfr',\r\n\tgaussian: 'Gsn ',\r\n});\r\n\r\nexport const Chnl = createEnum<'red' | 'green' | 'blue' | 'composite'>('Chnl', 'composite', {\r\n\tred: 'Rd  ',\r\n\tgreen: 'Grn ',\r\n\tblue: 'Bl  ',\r\n\tcomposite: 'Cmps',\r\n});\r\n\r\nexport const MztT = createEnum<'fine dots' | 'medium dots' | 'grainy dots' | 'coarse dots' | 'short lines' | 'medium lines' | 'long lines' | 'short strokes' | 'medium strokes' | 'long strokes'>('MztT', 'fine dots', {\r\n\t'fine dots': 'FnDt',\r\n\t'medium dots': 'MdmD',\r\n\t'grainy dots': 'GrnD',\r\n\t'coarse dots': 'CrsD',\r\n\t'short lines': 'ShrL',\r\n\t'medium lines': 'MdmL',\r\n\t'long lines': 'LngL',\r\n\t'short strokes': 'ShSt',\r\n\t'medium strokes': 'MdmS',\r\n\t'long strokes': 'LngS',\r\n});\r\n\r\nexport const Lns = createEnum<'50-300mm zoom' | '32mm prime' | '105mm prime' | 'movie prime'>('Lns ', '50-300mm zoom', {\r\n\t'50-300mm zoom': 'Zm  ',\r\n\t'32mm prime': 'Nkn ',\r\n\t'105mm prime': 'Nkn1',\r\n\t'movie prime': 'PnVs',\r\n});\r\n\r\nexport const blurType = createEnum<'gaussian blur' | 'lens blur' | 'motion blur'>('blurType', 'gaussian blur', {\r\n\t'gaussian blur': 'GsnB',\r\n\t'lens blur': 'lensBlur',\r\n\t'motion blur': 'MtnB',\r\n});\r\n\r\nexport const DfsM = createEnum<'normal' | 'darken only' | 'lighten only' | 'anisotropic'>('DfsM', 'normal', {\r\n\t'normal': 'Nrml',\r\n\t'darken only': 'DrkO',\r\n\t'lighten only': 'LghO',\r\n\t'anisotropic': 'anisotropic',\r\n});\r\n\r\nexport const ExtT = createEnum<'blocks' | 'pyramids'>('ExtT', 'blocks', {\r\n\tblocks: 'Blks',\r\n\tpyramids: 'Pyrm',\r\n});\r\n\r\nexport const ExtR = createEnum<'random' | 'level-based'>('ExtR', 'random', {\r\n\trandom: 'Rndm',\r\n\t'level-based': 'LvlB',\r\n});\r\n\r\nexport const FlCl = createEnum<'background color' | 'foreground color' | 'inverse image' | 'unaltered image'>('FlCl', 'background color', {\r\n\t'background color': 'FlBc',\r\n\t'foreground color': 'FlFr',\r\n\t'inverse image': 'FlIn',\r\n\t'unaltered image': 'FlSm',\r\n});\r\n\r\nexport const CntE = createEnum<'lower' | 'upper'>('CntE', 'upper', {\r\n\tlower: 'Lwr ',\r\n\tupper: 'Upr ',\r\n});\r\n\r\nexport const WndM = createEnum<'wind' | 'blast' | 'stagger'>('WndM', 'wind', {\r\n\twind: 'Wnd ',\r\n\tblast: 'Blst',\r\n\tstagger: 'Stgr',\r\n});\r\n\r\nexport const Drct = createEnum<'left' | 'right'>('Drct', 'from the right', {\r\n\tleft: 'Left',\r\n\tright: 'Rght',\r\n});\r\n\r\nexport const IntE = createEnum<'odd lines' | 'even lines'>('IntE', 'odd lines', {\r\n\t'odd lines': 'ElmO',\r\n\t'even lines': 'ElmE',\r\n});\r\n\r\nexport const IntC = createEnum<'duplication' | 'interpolation'>('IntC', 'interpolation', {\r\n\tduplication: 'CrtD',\r\n\tinterpolation: 'CrtI',\r\n});\r\n\r\nexport const FlMd = createEnum<'set to transparent' | 'repeat edge pixels' | 'wrap around'>('FlMd', 'wrap around', {\r\n\t'set to transparent': 'Bckg',\r\n\t'repeat edge pixels': 'Rpt ',\r\n\t'wrap around': 'Wrp ',\r\n});\r\n\r\nexport const prjM = createEnum<'fisheye' | 'perspective' | 'auto' | 'full spherical'>('prjM', 'fisheye', {\r\n\t'fisheye': 'fisP',\r\n\t'perspective': 'perP',\r\n\t'auto': 'auto',\r\n\t'full spherical': 'fusP',\r\n});\r\n\r\nexport const presetKindType = createEnum<'custom' | 'default'>('presetKindType', 'presetKindCustom', {\r\n\tcustom: 'presetKindCustom',\r\n\tdefault: 'presetKindDefault',\r\n});\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.serializeEngineData = exports.parseEngineData = void 0;\r\nfunction isWhitespace(char) {\r\n    // ' ', '\\n', '\\r', '\\t'\r\n    return char === 32 || char === 10 || char === 13 || char === 9;\r\n}\r\nfunction isNumber(char) {\r\n    // 0123456789.-\r\n    return (char >= 48 && char <= 57) || char === 46 || char === 45;\r\n}\r\nfunction parseEngineData(data) {\r\n    var index = 0;\r\n    function skipWhitespace() {\r\n        while (index < data.length && isWhitespace(data[index])) {\r\n            index++;\r\n        }\r\n    }\r\n    function getTextByte() {\r\n        var byte = data[index];\r\n        index++;\r\n        if (byte === 92) { // \\\r\n            byte = data[index];\r\n            index++;\r\n        }\r\n        return byte;\r\n    }\r\n    function getText() {\r\n        var result = '';\r\n        if (data[index] === 41) { // )\r\n            index++;\r\n            return result;\r\n        }\r\n        // Strings start with utf-16 BOM\r\n        if (data[index] !== 0xFE || data[index + 1] !== 0xFF) {\r\n            throw new Error('Invalid utf-16 BOM');\r\n        }\r\n        index += 2;\r\n        // ), ( and \\ characters are escaped in ascii manner, remove the escapes before interpreting\r\n        // the bytes as utf-16\r\n        while (index < data.length && data[index] !== 41) { // )\r\n            var high = getTextByte();\r\n            var low = getTextByte();\r\n            var char = (high << 8) | low;\r\n            result += String.fromCharCode(char);\r\n        }\r\n        index++;\r\n        return result;\r\n    }\r\n    var root = null;\r\n    var stack = [];\r\n    function pushContainer(value) {\r\n        if (!stack.length) {\r\n            stack.push(value);\r\n            root = value;\r\n        }\r\n        else {\r\n            pushValue(value);\r\n            stack.push(value);\r\n        }\r\n    }\r\n    function pushValue(value) {\r\n        if (!stack.length)\r\n            throw new Error('Invalid data');\r\n        var top = stack[stack.length - 1];\r\n        if (typeof top === 'string') {\r\n            stack[stack.length - 2][top] = value;\r\n            pop();\r\n        }\r\n        else if (Array.isArray(top)) {\r\n            top.push(value);\r\n        }\r\n        else {\r\n            throw new Error('Invalid data');\r\n        }\r\n    }\r\n    function pushProperty(name) {\r\n        if (!stack.length)\r\n            pushContainer({});\r\n        var top = stack[stack.length - 1];\r\n        if (top && typeof top === 'string') {\r\n            if (name === 'nil') {\r\n                pushValue(null);\r\n            }\r\n            else {\r\n                pushValue(\"/\".concat(name));\r\n            }\r\n        }\r\n        else if (top && typeof top === 'object') {\r\n            stack.push(name);\r\n        }\r\n        else {\r\n            throw new Error('Invalid data');\r\n        }\r\n    }\r\n    function pop() {\r\n        if (!stack.length)\r\n            throw new Error('Invalid data');\r\n        stack.pop();\r\n    }\r\n    skipWhitespace();\r\n    var dataLength = data.length;\r\n    while (dataLength > 0 && data[dataLength - 1] === 0)\r\n        dataLength--; // trim 0 bytes from end\r\n    while (index < dataLength) {\r\n        var i = index;\r\n        var char = data[i];\r\n        if (char === 60 && data[i + 1] === 60) { // <<\r\n            index += 2;\r\n            pushContainer({});\r\n        }\r\n        else if (char === 62 && data[i + 1] === 62) { // >>\r\n            index += 2;\r\n            pop();\r\n        }\r\n        else if (char === 47) { // /\r\n            index += 1;\r\n            var start = index;\r\n            while (index < data.length && !isWhitespace(data[index])) {\r\n                index++;\r\n            }\r\n            var name_1 = '';\r\n            for (var i_1 = start; i_1 < index; i_1++) {\r\n                name_1 += String.fromCharCode(data[i_1]);\r\n            }\r\n            pushProperty(name_1);\r\n        }\r\n        else if (char === 40) { // (\r\n            index += 1;\r\n            pushValue(getText());\r\n        }\r\n        else if (char === 91) { // [\r\n            index += 1;\r\n            pushContainer([]);\r\n        }\r\n        else if (char === 93) { // ]\r\n            index += 1;\r\n            pop();\r\n        }\r\n        else if (char === 110 && data[i + 1] === 117 && data[i + 2] === 108 && data[i + 3] === 108) { // null\r\n            index += 4;\r\n            pushValue(null);\r\n        }\r\n        else if (char === 116 && data[i + 1] === 114 && data[i + 2] === 117 && data[i + 3] === 101) { // true\r\n            index += 4;\r\n            pushValue(true);\r\n        }\r\n        else if (char === 102 && data[i + 1] === 97 && data[i + 2] === 108 && data[i + 3] === 115 && data[i + 4] === 101) { // false\r\n            index += 5;\r\n            pushValue(false);\r\n        }\r\n        else if (isNumber(char)) {\r\n            var value = '';\r\n            while (index < data.length && isNumber(data[index])) {\r\n                value += String.fromCharCode(data[index]);\r\n                index++;\r\n            }\r\n            pushValue(parseFloat(value));\r\n        }\r\n        else {\r\n            index += 1;\r\n            console.log(\"Invalid token '\".concat(String.fromCharCode(char), \"' (\").concat(char, \") at \").concat(index)\r\n            // + ` near '${String.fromCharCode.apply(null, data.slice(index - 10, index + 20) as any)}'`\r\n            // + ` data [${Array.from(data.slice(index - 10, index + 20)).join(', ')}]`\r\n            );\r\n            // throw new Error(`Invalid token ${String.fromCharCode(char)} at ${index}`);\r\n        }\r\n        skipWhitespace();\r\n    }\r\n    return root;\r\n}\r\nexports.parseEngineData = parseEngineData;\r\nvar floatKeys = [\r\n    'Axis', 'XY', 'Zone', 'WordSpacing', 'FirstLineIndent', 'GlyphSpacing', 'StartIndent', 'EndIndent', 'SpaceBefore',\r\n    'SpaceAfter', 'LetterSpacing', 'Values', 'GridSize', 'GridLeading', 'PointBase', 'BoxBounds', 'TransformPoint0', 'TransformPoint1',\r\n    'TransformPoint2', 'FontSize', 'Leading', 'HorizontalScale', 'VerticalScale', 'BaselineShift', 'Tsume',\r\n    'OutlineWidth', 'AutoLeading',\r\n];\r\nvar intArrays = ['RunLengthArray'];\r\n// TODO: handle /nil\r\nfunction serializeEngineData(data, condensed) {\r\n    if (condensed === void 0) { condensed = false; }\r\n    var buffer = new Uint8Array(1024);\r\n    var offset = 0;\r\n    var indent = 0;\r\n    function write(value) {\r\n        if (offset >= buffer.length) {\r\n            var newBuffer = new Uint8Array(buffer.length * 2);\r\n            newBuffer.set(buffer);\r\n            buffer = newBuffer;\r\n        }\r\n        buffer[offset] = value;\r\n        offset++;\r\n    }\r\n    function writeString(value) {\r\n        for (var i = 0; i < value.length; i++) {\r\n            write(value.charCodeAt(i));\r\n        }\r\n    }\r\n    function writeIndent() {\r\n        if (condensed) {\r\n            writeString(' ');\r\n        }\r\n        else {\r\n            for (var i = 0; i < indent; i++) {\r\n                writeString('\\t');\r\n            }\r\n        }\r\n    }\r\n    function writeProperty(key, value) {\r\n        writeIndent();\r\n        writeString(\"/\".concat(key));\r\n        writeValue(value, key, true);\r\n        if (!condensed)\r\n            writeString('\\n');\r\n    }\r\n    function serializeInt(value) {\r\n        return value.toString();\r\n    }\r\n    function serializeFloat(value) {\r\n        return value.toFixed(5)\r\n            .replace(/(\\d)0+$/g, '$1')\r\n            .replace(/^0+\\.([1-9])/g, '.$1')\r\n            .replace(/^-0+\\.0(\\d)/g, '-.0$1');\r\n    }\r\n    function serializeNumber(value, key) {\r\n        var isFloat = (key && floatKeys.indexOf(key) !== -1) || (value | 0) !== value;\r\n        return isFloat ? serializeFloat(value) : serializeInt(value);\r\n    }\r\n    function getKeys(value) {\r\n        var keys = Object.keys(value);\r\n        if (keys.indexOf('98') !== -1)\r\n            keys.unshift.apply(keys, keys.splice(keys.indexOf('99'), 1));\r\n        if (keys.indexOf('99') !== -1)\r\n            keys.unshift.apply(keys, keys.splice(keys.indexOf('99'), 1));\r\n        return keys;\r\n    }\r\n    function writeStringByte(value) {\r\n        if (value === 40 || value === 41 || value === 92) { // ( ) \\\r\n            write(92); // \\\r\n        }\r\n        write(value);\r\n    }\r\n    function writeValue(value, key, inProperty) {\r\n        if (inProperty === void 0) { inProperty = false; }\r\n        function writePrefix() {\r\n            if (inProperty) {\r\n                writeString(' ');\r\n            }\r\n            else {\r\n                writeIndent();\r\n            }\r\n        }\r\n        if (value === null) {\r\n            writePrefix();\r\n            writeString(condensed ? '/nil' : 'null');\r\n        }\r\n        else if (typeof value === 'number') {\r\n            writePrefix();\r\n            writeString(serializeNumber(value, key));\r\n        }\r\n        else if (typeof value === 'boolean') {\r\n            writePrefix();\r\n            writeString(value ? 'true' : 'false');\r\n        }\r\n        else if (typeof value === 'string') {\r\n            writePrefix();\r\n            if ((key === '99' || key === '98') && value.charAt(0) === '/') {\r\n                writeString(value);\r\n            }\r\n            else {\r\n                writeString('(');\r\n                write(0xfe);\r\n                write(0xff);\r\n                for (var i = 0; i < value.length; i++) {\r\n                    var code = value.charCodeAt(i);\r\n                    writeStringByte((code >> 8) & 0xff);\r\n                    writeStringByte(code & 0xff);\r\n                }\r\n                writeString(')');\r\n            }\r\n        }\r\n        else if (Array.isArray(value)) {\r\n            writePrefix();\r\n            if (value.every(function (x) { return typeof x === 'number'; })) {\r\n                writeString('[');\r\n                var intArray = intArrays.indexOf(key) !== -1;\r\n                for (var _i = 0, value_1 = value; _i < value_1.length; _i++) {\r\n                    var x = value_1[_i];\r\n                    writeString(' ');\r\n                    writeString(intArray ? serializeNumber(x) : serializeFloat(x));\r\n                }\r\n                writeString(' ]');\r\n            }\r\n            else {\r\n                writeString('[');\r\n                if (!condensed)\r\n                    writeString('\\n');\r\n                for (var _a = 0, value_2 = value; _a < value_2.length; _a++) {\r\n                    var x = value_2[_a];\r\n                    writeValue(x, key);\r\n                    if (!condensed)\r\n                        writeString('\\n');\r\n                }\r\n                writeIndent();\r\n                writeString(']');\r\n            }\r\n        }\r\n        else if (typeof value === 'object') {\r\n            if (inProperty && !condensed)\r\n                writeString('\\n');\r\n            writeIndent();\r\n            writeString('<<');\r\n            if (!condensed)\r\n                writeString('\\n');\r\n            indent++;\r\n            for (var _b = 0, _c = getKeys(value); _b < _c.length; _b++) {\r\n                var key_1 = _c[_b];\r\n                writeProperty(key_1, value[key_1]);\r\n            }\r\n            indent--;\r\n            writeIndent();\r\n            writeString('>>');\r\n        }\r\n        return undefined;\r\n    }\r\n    if (condensed) {\r\n        if (typeof data === 'object') {\r\n            for (var _i = 0, _a = getKeys(data); _i < _a.length; _i++) {\r\n                var key = _a[_i];\r\n                writeProperty(key, data[key]);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        writeString('\\n\\n');\r\n        writeValue(data);\r\n    }\r\n    return buffer.slice(0, offset);\r\n}\r\nexports.serializeEngineData = serializeEngineData;\r\n//# sourceMappingURL=engineData.js.map","function isWhitespace(char: number) {\r\n\t// ' ', '\\n', '\\r', '\\t'\r\n\treturn char === 32 || char === 10 || char === 13 || char === 9;\r\n}\r\n\r\nfunction isNumber(char: number) {\r\n\t// 0123456789.-\r\n\treturn (char >= 48 && char <= 57) || char === 46 || char === 45;\r\n}\r\n\r\nexport function parseEngineData(data: number[] | Uint8Array) {\r\n\tlet index = 0;\r\n\r\n\tfunction skipWhitespace() {\r\n\t\twhile (index < data.length && isWhitespace(data[index])) {\r\n\t\t\tindex++;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getTextByte() {\r\n\t\tlet byte = data[index];\r\n\t\tindex++;\r\n\r\n\t\tif (byte === 92) { // \\\r\n\t\t\tbyte = data[index];\r\n\t\t\tindex++;\r\n\t\t}\r\n\r\n\t\treturn byte;\r\n\t}\r\n\r\n\tfunction getText() {\r\n\t\tlet result = '';\r\n\r\n\t\tif (data[index] === 41) { // )\r\n\t\t\tindex++;\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\t// Strings start with utf-16 BOM\r\n\t\tif (data[index] !== 0xFE || data[index + 1] !== 0xFF) {\r\n\t\t\tthrow new Error('Invalid utf-16 BOM');\r\n\t\t}\r\n\r\n\t\tindex += 2;\r\n\r\n\t\t// ), ( and \\ characters are escaped in ascii manner, remove the escapes before interpreting\r\n\t\t// the bytes as utf-16\r\n\t\twhile (index < data.length && data[index] !== 41) { // )\r\n\t\t\tconst high = getTextByte();\r\n\t\t\tconst low = getTextByte();\r\n\t\t\tconst char = (high << 8) | low;\r\n\t\t\tresult += String.fromCharCode(char);\r\n\t\t}\r\n\r\n\t\tindex++;\r\n\t\treturn result;\r\n\t}\r\n\r\n\tlet root: any = null;\r\n\tconst stack: any[] = [];\r\n\r\n\tfunction pushContainer(value: any) {\r\n\t\tif (!stack.length) {\r\n\t\t\tstack.push(value);\r\n\t\t\troot = value;\r\n\t\t} else {\r\n\t\t\tpushValue(value);\r\n\t\t\tstack.push(value);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction pushValue(value: any) {\r\n\t\tif (!stack.length) throw new Error('Invalid data');\r\n\r\n\t\tconst top = stack[stack.length - 1];\r\n\r\n\t\tif (typeof top === 'string') {\r\n\t\t\tstack[stack.length - 2][top] = value;\r\n\t\t\tpop();\r\n\t\t} else if (Array.isArray(top)) {\r\n\t\t\ttop.push(value);\r\n\t\t} else {\r\n\t\t\tthrow new Error('Invalid data');\r\n\t\t}\r\n\t}\r\n\r\n\tfunction pushProperty(name: string) {\r\n\t\tif (!stack.length) pushContainer({});\r\n\r\n\t\tconst top = stack[stack.length - 1];\r\n\r\n\t\tif (top && typeof top === 'string') {\r\n\t\t\tif (name === 'nil') {\r\n\t\t\t\tpushValue(null);\r\n\t\t\t} else {\r\n\t\t\t\tpushValue(`/${name}`);\r\n\t\t\t}\r\n\t\t} else if (top && typeof top === 'object') {\r\n\t\t\tstack.push(name);\r\n\t\t} else {\r\n\t\t\tthrow new Error('Invalid data');\r\n\t\t}\r\n\t}\r\n\r\n\tfunction pop() {\r\n\t\tif (!stack.length) throw new Error('Invalid data');\r\n\t\tstack.pop();\r\n\t}\r\n\r\n\tskipWhitespace();\r\n\r\n\tlet dataLength = data.length;\r\n\r\n\twhile (dataLength > 0 && data[dataLength - 1] === 0) dataLength--; // trim 0 bytes from end\r\n\r\n\twhile (index < dataLength) {\r\n\t\tconst i = index;\r\n\t\tconst char = data[i];\r\n\r\n\t\tif (char === 60 && data[i + 1] === 60) { // <<\r\n\t\t\tindex += 2;\r\n\t\t\tpushContainer({});\r\n\t\t} else if (char === 62 && data[i + 1] === 62) { // >>\r\n\t\t\tindex += 2;\r\n\t\t\tpop();\r\n\t\t} else if (char === 47) { // /\r\n\t\t\tindex += 1;\r\n\t\t\tconst start = index;\r\n\r\n\t\t\twhile (index < data.length && !isWhitespace(data[index])) {\r\n\t\t\t\tindex++;\r\n\t\t\t}\r\n\r\n\t\t\tlet name = '';\r\n\r\n\t\t\tfor (let i = start; i < index; i++) {\r\n\t\t\t\tname += String.fromCharCode(data[i]);\r\n\t\t\t}\r\n\r\n\t\t\tpushProperty(name);\r\n\t\t} else if (char === 40) { // (\r\n\t\t\tindex += 1;\r\n\t\t\tpushValue(getText());\r\n\t\t} else if (char === 91) { // [\r\n\t\t\tindex += 1;\r\n\t\t\tpushContainer([]);\r\n\t\t} else if (char === 93) { // ]\r\n\t\t\tindex += 1;\r\n\t\t\tpop();\r\n\t\t} else if (char === 110 && data[i + 1] === 117 && data[i + 2] === 108 && data[i + 3] === 108) { // null\r\n\t\t\tindex += 4;\r\n\t\t\tpushValue(null);\r\n\t\t} else if (char === 116 && data[i + 1] === 114 && data[i + 2] === 117 && data[i + 3] === 101) { // true\r\n\t\t\tindex += 4;\r\n\t\t\tpushValue(true);\r\n\t\t} else if (char === 102 && data[i + 1] === 97 && data[i + 2] === 108 && data[i + 3] === 115 && data[i + 4] === 101) { // false\r\n\t\t\tindex += 5;\r\n\t\t\tpushValue(false);\r\n\t\t} else if (isNumber(char)) {\r\n\t\t\tlet value = '';\r\n\r\n\t\t\twhile (index < data.length && isNumber(data[index])) {\r\n\t\t\t\tvalue += String.fromCharCode(data[index]);\r\n\t\t\t\tindex++;\r\n\t\t\t}\r\n\r\n\t\t\tpushValue(parseFloat(value));\r\n\t\t} else {\r\n\t\t\tindex += 1;\r\n\t\t\tconsole.log(`Invalid token '${String.fromCharCode(char)}' (${char}) at ${index}`\r\n\t\t\t\t// + ` near '${String.fromCharCode.apply(null, data.slice(index - 10, index + 20) as any)}'`\r\n\t\t\t\t// + ` data [${Array.from(data.slice(index - 10, index + 20)).join(', ')}]`\r\n\t\t\t);\r\n\t\t\t// throw new Error(`Invalid token ${String.fromCharCode(char)} at ${index}`);\r\n\t\t}\r\n\r\n\t\tskipWhitespace();\r\n\t}\r\n\r\n\treturn root;\r\n}\r\n\r\nconst floatKeys = [\r\n\t'Axis', 'XY', 'Zone', 'WordSpacing', 'FirstLineIndent', 'GlyphSpacing', 'StartIndent', 'EndIndent', 'SpaceBefore',\r\n\t'SpaceAfter', 'LetterSpacing', 'Values', 'GridSize', 'GridLeading', 'PointBase', 'BoxBounds', 'TransformPoint0', 'TransformPoint1',\r\n\t'TransformPoint2', 'FontSize', 'Leading', 'HorizontalScale', 'VerticalScale', 'BaselineShift', 'Tsume',\r\n\t'OutlineWidth', 'AutoLeading',\r\n];\r\n\r\nconst intArrays = ['RunLengthArray'];\r\n\r\n// TODO: handle /nil\r\nexport function serializeEngineData(data: any, condensed = false) {\r\n\tlet buffer = new Uint8Array(1024);\r\n\tlet offset = 0;\r\n\tlet indent = 0;\r\n\r\n\tfunction write(value: number) {\r\n\t\tif (offset >= buffer.length) {\r\n\t\t\tconst newBuffer = new Uint8Array(buffer.length * 2);\r\n\t\t\tnewBuffer.set(buffer);\r\n\t\t\tbuffer = newBuffer;\r\n\t\t}\r\n\r\n\t\tbuffer[offset] = value;\r\n\t\toffset++;\r\n\t}\r\n\r\n\tfunction writeString(value: string) {\r\n\t\tfor (let i = 0; i < value.length; i++) {\r\n\t\t\twrite(value.charCodeAt(i));\r\n\t\t}\r\n\t}\r\n\r\n\tfunction writeIndent() {\r\n\t\tif (condensed) {\r\n\t\t\twriteString(' ');\r\n\t\t} else {\r\n\t\t\tfor (let i = 0; i < indent; i++) {\r\n\t\t\t\twriteString('\\t');\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction writeProperty(key: string, value: any) {\r\n\t\twriteIndent();\r\n\t\twriteString(`/${key}`);\r\n\t\twriteValue(value, key, true);\r\n\t\tif (!condensed) writeString('\\n');\r\n\t}\r\n\r\n\tfunction serializeInt(value: number) {\r\n\t\treturn value.toString();\r\n\t}\r\n\r\n\tfunction serializeFloat(value: number) {\r\n\t\treturn value.toFixed(5)\r\n\t\t\t.replace(/(\\d)0+$/g, '$1')\r\n\t\t\t.replace(/^0+\\.([1-9])/g, '.$1')\r\n\t\t\t.replace(/^-0+\\.0(\\d)/g, '-.0$1');\r\n\t}\r\n\r\n\tfunction serializeNumber(value: number, key?: string) {\r\n\t\tconst isFloat = (key && floatKeys.indexOf(key) !== -1) || (value | 0) !== value;\r\n\t\treturn isFloat ? serializeFloat(value) : serializeInt(value);\r\n\t}\r\n\r\n\tfunction getKeys(value: any) {\r\n\t\tconst keys = Object.keys(value);\r\n\r\n\t\tif (keys.indexOf('98') !== -1)\r\n\t\t\tkeys.unshift(...keys.splice(keys.indexOf('99'), 1));\r\n\r\n\t\tif (keys.indexOf('99') !== -1)\r\n\t\t\tkeys.unshift(...keys.splice(keys.indexOf('99'), 1));\r\n\r\n\t\treturn keys;\r\n\t}\r\n\r\n\tfunction writeStringByte(value: number) {\r\n\t\tif (value === 40 || value === 41 || value === 92) { // ( ) \\\r\n\t\t\twrite(92); // \\\r\n\t\t}\r\n\r\n\t\twrite(value);\r\n\t}\r\n\r\n\tfunction writeValue(value: any, key?: string, inProperty = false) {\r\n\t\tfunction writePrefix() {\r\n\t\t\tif (inProperty) {\r\n\t\t\t\twriteString(' ');\r\n\t\t\t} else {\r\n\t\t\t\twriteIndent();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (value === null) {\r\n\t\t\twritePrefix();\r\n\t\t\twriteString(condensed ? '/nil' : 'null');\r\n\t\t} else if (typeof value === 'number') {\r\n\t\t\twritePrefix();\r\n\t\t\twriteString(serializeNumber(value, key));\r\n\t\t} else if (typeof value === 'boolean') {\r\n\t\t\twritePrefix();\r\n\t\t\twriteString(value ? 'true' : 'false');\r\n\t\t} else if (typeof value === 'string') {\r\n\t\t\twritePrefix();\r\n\r\n\t\t\tif ((key === '99' || key === '98') && value.charAt(0) === '/') {\r\n\t\t\t\twriteString(value);\r\n\t\t\t} else {\r\n\t\t\t\twriteString('(');\r\n\t\t\t\twrite(0xfe);\r\n\t\t\t\twrite(0xff);\r\n\r\n\t\t\t\tfor (let i = 0; i < value.length; i++) {\r\n\t\t\t\t\tconst code = value.charCodeAt(i);\r\n\t\t\t\t\twriteStringByte((code >> 8) & 0xff);\r\n\t\t\t\t\twriteStringByte(code & 0xff);\r\n\t\t\t\t}\r\n\r\n\t\t\t\twriteString(')');\r\n\t\t\t}\r\n\t\t} else if (Array.isArray(value)) {\r\n\t\t\twritePrefix();\r\n\r\n\t\t\tif (value.every(x => typeof x === 'number')) {\r\n\t\t\t\twriteString('[');\r\n\r\n\t\t\t\tconst intArray = intArrays.indexOf(key!) !== -1;\r\n\r\n\t\t\t\tfor (const x of value) {\r\n\t\t\t\t\twriteString(' ');\r\n\t\t\t\t\twriteString(intArray ? serializeNumber(x) : serializeFloat(x));\r\n\t\t\t\t}\r\n\r\n\t\t\t\twriteString(' ]');\r\n\t\t\t} else {\r\n\t\t\t\twriteString('[');\r\n\t\t\t\tif (!condensed) writeString('\\n');\r\n\r\n\t\t\t\tfor (const x of value) {\r\n\t\t\t\t\twriteValue(x, key);\r\n\t\t\t\t\tif (!condensed) writeString('\\n');\r\n\t\t\t\t}\r\n\r\n\t\t\t\twriteIndent();\r\n\t\t\t\twriteString(']');\r\n\t\t\t}\r\n\t\t} else if (typeof value === 'object') {\r\n\t\t\tif (inProperty && !condensed) writeString('\\n');\r\n\r\n\t\t\twriteIndent();\r\n\t\t\twriteString('<<');\r\n\r\n\t\t\tif (!condensed) writeString('\\n');\r\n\r\n\t\t\tindent++;\r\n\r\n\t\t\tfor (const key of getKeys(value)) {\r\n\t\t\t\twriteProperty(key, value[key]);\r\n\t\t\t}\r\n\r\n\t\t\tindent--;\r\n\t\t\twriteIndent();\r\n\t\t\twriteString('>>');\r\n\t\t}\r\n\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\tif (condensed) {\r\n\t\tif (typeof data === 'object') {\r\n\t\t\tfor (const key of getKeys(data)) {\r\n\t\t\t\twriteProperty(key, data[key]);\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\twriteString('\\n\\n');\r\n\t\twriteValue(data);\r\n\t}\r\n\r\n\treturn buffer.slice(0, offset);\r\n}\r\n","\"use strict\";\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.encodeEngineData = exports.decodeEngineData = void 0;\r\nvar defaultFont = {\r\n    name: 'MyriadPro-Regular',\r\n    script: 0,\r\n    type: 0,\r\n    synthetic: 0,\r\n};\r\nvar defaultParagraphStyle = {\r\n    justification: 'left',\r\n    firstLineIndent: 0,\r\n    startIndent: 0,\r\n    endIndent: 0,\r\n    spaceBefore: 0,\r\n    spaceAfter: 0,\r\n    autoHyphenate: true,\r\n    hyphenatedWordSize: 6,\r\n    preHyphen: 2,\r\n    postHyphen: 2,\r\n    consecutiveHyphens: 8,\r\n    zone: 36,\r\n    wordSpacing: [0.8, 1, 1.33],\r\n    letterSpacing: [0, 0, 0],\r\n    glyphSpacing: [1, 1, 1],\r\n    autoLeading: 1.2,\r\n    leadingType: 0,\r\n    hanging: false,\r\n    burasagari: false,\r\n    kinsokuOrder: 0,\r\n    everyLineComposer: false,\r\n};\r\nvar defaultStyle = {\r\n    font: defaultFont,\r\n    fontSize: 12,\r\n    fauxBold: false,\r\n    fauxItalic: false,\r\n    autoLeading: true,\r\n    leading: 0,\r\n    horizontalScale: 1,\r\n    verticalScale: 1,\r\n    tracking: 0,\r\n    autoKerning: true,\r\n    kerning: 0,\r\n    baselineShift: 0,\r\n    fontCaps: 0,\r\n    fontBaseline: 0,\r\n    underline: false,\r\n    strikethrough: false,\r\n    ligatures: true,\r\n    dLigatures: false,\r\n    baselineDirection: 2,\r\n    tsume: 0,\r\n    styleRunAlignment: 2,\r\n    language: 0,\r\n    noBreak: false,\r\n    fillColor: { r: 0, g: 0, b: 0 },\r\n    strokeColor: { r: 0, g: 0, b: 0 },\r\n    fillFlag: true,\r\n    strokeFlag: false,\r\n    fillFirst: true,\r\n    yUnderline: 1,\r\n    outlineWidth: 1,\r\n    characterDirection: 0,\r\n    hindiNumbers: false,\r\n    kashida: 1,\r\n    diacriticPos: 2,\r\n};\r\nvar defaultGridInfo = {\r\n    isOn: false,\r\n    show: false,\r\n    size: 18,\r\n    leading: 22,\r\n    color: { r: 0, g: 0, b: 255 },\r\n    leadingFillColor: { r: 0, g: 0, b: 255 },\r\n    alignLineHeightToGridFlags: false,\r\n};\r\nvar paragraphStyleKeys = [\r\n    'justification', 'firstLineIndent', 'startIndent', 'endIndent', 'spaceBefore', 'spaceAfter',\r\n    'autoHyphenate', 'hyphenatedWordSize', 'preHyphen', 'postHyphen', 'consecutiveHyphens',\r\n    'zone', 'wordSpacing', 'letterSpacing', 'glyphSpacing', 'autoLeading', 'leadingType',\r\n    'hanging', 'burasagari', 'kinsokuOrder', 'everyLineComposer',\r\n];\r\nvar styleKeys = [\r\n    'font', 'fontSize', 'fauxBold', 'fauxItalic', 'autoLeading', 'leading', 'horizontalScale',\r\n    'verticalScale', 'tracking', 'autoKerning', 'kerning', 'baselineShift', 'fontCaps', 'fontBaseline',\r\n    'underline', 'strikethrough', 'ligatures', 'dLigatures', 'baselineDirection', 'tsume',\r\n    'styleRunAlignment', 'language', 'noBreak', 'fillColor', 'strokeColor', 'fillFlag',\r\n    'strokeFlag', 'fillFirst', 'yUnderline', 'outlineWidth', 'characterDirection', 'hindiNumbers',\r\n    'kashida', 'diacriticPos',\r\n];\r\nvar antialias = ['none', 'crisp', 'strong', 'smooth', 'sharp'];\r\nvar justification = [\r\n    'left',\r\n    'right',\r\n    'center',\r\n    'justify-left',\r\n    'justify-right',\r\n    'justify-center',\r\n    'justify-all', // 6\r\n];\r\nfunction upperFirst(value) {\r\n    return value.substring(0, 1).toUpperCase() + value.substring(1);\r\n}\r\nfunction decodeColor(color) {\r\n    var c = color.Values;\r\n    switch (color.Type) {\r\n        case 0: return { k: c[1] * 255 }; // grayscale (alpha?)\r\n        case 1: return c[0] === 1 ?\r\n            { r: c[1] * 255, g: c[2] * 255, b: c[3] * 255 } : // rgb\r\n            { r: c[1] * 255, g: c[2] * 255, b: c[3] * 255, a: c[0] * 255 }; // rgba\r\n        case 2: return { c: c[1] * 255, m: c[2] * 255, y: c[3] * 255, k: c[4] * 255 }; // cmyk (alpha?)\r\n        default: throw new Error('Unknown color type in text layer');\r\n    }\r\n}\r\nfunction encodeColor(color) {\r\n    if (!color) {\r\n        return { Type: 1, Values: [0, 0, 0, 0] };\r\n    }\r\n    else if ('r' in color) {\r\n        return { Type: 1, Values: ['a' in color ? color.a / 255 : 1, color.r / 255, color.g / 255, color.b / 255] };\r\n    }\r\n    else if ('c' in color) {\r\n        return { Type: 2, Values: [1, color.c / 255, color.m / 255, color.y / 255, color.k / 255] };\r\n    }\r\n    else if ('k' in color) {\r\n        return { Type: 0, Values: [1, color.k / 255] };\r\n    }\r\n    else {\r\n        throw new Error('Invalid color type in text layer');\r\n    }\r\n}\r\nfunction arraysEqual(a, b) {\r\n    if (!a || !b)\r\n        return false;\r\n    if (a.length !== b.length)\r\n        return false;\r\n    for (var i = 0; i < a.length; i++)\r\n        if (a[i] !== b[i])\r\n            return false;\r\n    return true;\r\n}\r\nfunction objectsEqual(a, b) {\r\n    if (!a || !b)\r\n        return false;\r\n    for (var _i = 0, _a = Object.keys(a); _i < _a.length; _i++) {\r\n        var key = _a[_i];\r\n        if (a[key] !== b[key])\r\n            return false;\r\n    }\r\n    for (var _b = 0, _c = Object.keys(b); _b < _c.length; _b++) {\r\n        var key = _c[_b];\r\n        if (a[key] !== b[key])\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\nfunction findOrAddFont(fonts, font) {\r\n    for (var i = 0; i < fonts.length; i++) {\r\n        if (fonts[i].name === font.name)\r\n            return i;\r\n    }\r\n    fonts.push(font);\r\n    return fonts.length - 1;\r\n}\r\nfunction decodeObject(obj, keys, fonts) {\r\n    var result = {};\r\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\r\n        var key = keys_1[_i];\r\n        var Key = upperFirst(key);\r\n        if (obj[Key] === undefined)\r\n            continue;\r\n        if (key === 'justification') {\r\n            result[key] = justification[obj[Key]];\r\n        }\r\n        else if (key === 'font') {\r\n            result[key] = fonts[obj[Key]];\r\n        }\r\n        else if (key === 'fillColor' || key === 'strokeColor') {\r\n            result[key] = decodeColor(obj[Key]);\r\n        }\r\n        else {\r\n            result[key] = obj[Key];\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction encodeObject(obj, keys, fonts) {\r\n    var _a;\r\n    var result = {};\r\n    for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {\r\n        var key = keys_2[_i];\r\n        var Key = upperFirst(key);\r\n        if (obj[key] === undefined)\r\n            continue;\r\n        if (key === 'justification') {\r\n            result[Key] = justification.indexOf((_a = obj[key]) !== null && _a !== void 0 ? _a : 'left');\r\n        }\r\n        else if (key === 'font') {\r\n            result[Key] = findOrAddFont(fonts, obj[key]);\r\n        }\r\n        else if (key === 'fillColor' || key === 'strokeColor') {\r\n            result[Key] = encodeColor(obj[key]);\r\n        }\r\n        else {\r\n            result[Key] = obj[key];\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction decodeParagraphStyle(obj, fonts) {\r\n    return decodeObject(obj, paragraphStyleKeys, fonts);\r\n}\r\nfunction decodeStyle(obj, fonts) {\r\n    return decodeObject(obj, styleKeys, fonts);\r\n}\r\nfunction encodeParagraphStyle(obj, fonts) {\r\n    return encodeObject(obj, paragraphStyleKeys, fonts);\r\n}\r\nfunction encodeStyle(obj, fonts) {\r\n    return encodeObject(obj, styleKeys, fonts);\r\n}\r\nfunction deduplicateValues(base, runs, keys) {\r\n    if (!runs.length)\r\n        return;\r\n    var _loop_1 = function (key) {\r\n        var value = runs[0].style[key];\r\n        if (value !== undefined) {\r\n            var identical = false;\r\n            if (Array.isArray(value)) {\r\n                identical = runs.every(function (r) { return arraysEqual(r.style[key], value); });\r\n            }\r\n            else if (typeof value === 'object') {\r\n                identical = runs.every(function (r) { return objectsEqual(r.style[key], value); });\r\n            }\r\n            else {\r\n                identical = runs.every(function (r) { return r.style[key] === value; });\r\n            }\r\n            if (identical) {\r\n                base[key] = value;\r\n            }\r\n        }\r\n        var styleValue = base[key];\r\n        if (styleValue !== undefined) {\r\n            for (var _a = 0, runs_1 = runs; _a < runs_1.length; _a++) {\r\n                var r = runs_1[_a];\r\n                var same = false;\r\n                if (Array.isArray(value)) {\r\n                    same = arraysEqual(r.style[key], value);\r\n                }\r\n                else if (typeof value === 'object') {\r\n                    same = objectsEqual(r.style[key], value);\r\n                }\r\n                else {\r\n                    same = r.style[key] === value;\r\n                }\r\n                if (same)\r\n                    delete r.style[key];\r\n            }\r\n        }\r\n    };\r\n    for (var _i = 0, keys_3 = keys; _i < keys_3.length; _i++) {\r\n        var key = keys_3[_i];\r\n        _loop_1(key);\r\n    }\r\n    if (runs.every(function (x) { return Object.keys(x.style).length === 0; })) {\r\n        runs.length = 0;\r\n    }\r\n}\r\nfunction decodeEngineData(engineData) {\r\n    var _a, _b, _c, _d, _e, _f;\r\n    // console.log('engineData', require('util').inspect(engineData, false, 99, true));\r\n    var engineDict = engineData.EngineDict;\r\n    var resourceDict = engineData.ResourceDict;\r\n    var fonts = resourceDict.FontSet.map(function (f) { return ({\r\n        name: f.Name,\r\n        script: f.Script,\r\n        type: f.FontType,\r\n        synthetic: f.Synthetic,\r\n    }); });\r\n    var text = engineDict.Editor.Text.replace(/\\r/g, '\\n');\r\n    var removedCharacters = 0;\r\n    while (/\\n$/.test(text)) {\r\n        text = text.substring(0, text.length - 1);\r\n        removedCharacters++;\r\n    }\r\n    var result = {\r\n        text: text,\r\n        antiAlias: (_a = antialias[engineDict.AntiAlias]) !== null && _a !== void 0 ? _a : 'smooth',\r\n        useFractionalGlyphWidths: !!engineDict.UseFractionalGlyphWidths,\r\n        superscriptSize: resourceDict.SuperscriptSize,\r\n        superscriptPosition: resourceDict.SuperscriptPosition,\r\n        subscriptSize: resourceDict.SubscriptSize,\r\n        subscriptPosition: resourceDict.SubscriptPosition,\r\n        smallCapSize: resourceDict.SmallCapSize,\r\n    };\r\n    // shape\r\n    var photoshop = (_f = (_e = (_d = (_c = (_b = engineDict.Rendered) === null || _b === void 0 ? void 0 : _b.Shapes) === null || _c === void 0 ? void 0 : _c.Children) === null || _d === void 0 ? void 0 : _d[0]) === null || _e === void 0 ? void 0 : _e.Cookie) === null || _f === void 0 ? void 0 : _f.Photoshop;\r\n    if (photoshop) {\r\n        result.shapeType = photoshop.ShapeType === 1 ? 'box' : 'point';\r\n        if (photoshop.PointBase)\r\n            result.pointBase = photoshop.PointBase;\r\n        if (photoshop.BoxBounds)\r\n            result.boxBounds = photoshop.BoxBounds;\r\n    }\r\n    // paragraph style\r\n    // const theNormalParagraphSheet = resourceDict.TheNormalParagraphSheet;\r\n    // const paragraphSheetSet = resourceDict.ParagraphSheetSet;\r\n    // const paragraphProperties = paragraphSheetSet[theNormalParagraphSheet].Properties;\r\n    var paragraphRun = engineDict.ParagraphRun;\r\n    result.paragraphStyle = {}; // decodeParagraphStyle(paragraphProperties, fonts);\r\n    result.paragraphStyleRuns = [];\r\n    for (var i = 0; i < paragraphRun.RunArray.length; i++) {\r\n        var run_1 = paragraphRun.RunArray[i];\r\n        var length_1 = paragraphRun.RunLengthArray[i];\r\n        var style = decodeParagraphStyle(run_1.ParagraphSheet.Properties, fonts);\r\n        // const adjustments = {\r\n        //   axis: run.Adjustments.Axis,\r\n        //   xy: run.Adjustments.XY,\r\n        // };\r\n        result.paragraphStyleRuns.push({ length: length_1, style: style /*, adjustments*/ });\r\n    }\r\n    for (var counter = removedCharacters; result.paragraphStyleRuns.length && counter > 0; counter--) {\r\n        if (--result.paragraphStyleRuns[result.paragraphStyleRuns.length - 1].length === 0) {\r\n            result.paragraphStyleRuns.pop();\r\n        }\r\n    }\r\n    deduplicateValues(result.paragraphStyle, result.paragraphStyleRuns, paragraphStyleKeys);\r\n    if (!result.paragraphStyleRuns.length)\r\n        delete result.paragraphStyleRuns;\r\n    // style\r\n    // const theNormalStyleSheet = resourceDict.TheNormalStyleSheet;\r\n    // const styleSheetSet = resourceDict.StyleSheetSet;\r\n    // const styleSheetData = styleSheetSet[theNormalStyleSheet].StyleSheetData;\r\n    var styleRun = engineDict.StyleRun;\r\n    result.style = {}; // decodeStyle(styleSheetData, fonts);\r\n    result.styleRuns = [];\r\n    for (var i = 0; i < styleRun.RunArray.length; i++) {\r\n        var length_2 = styleRun.RunLengthArray[i];\r\n        var style = decodeStyle(styleRun.RunArray[i].StyleSheet.StyleSheetData, fonts);\r\n        if (!style.font)\r\n            style.font = fonts[0];\r\n        result.styleRuns.push({ length: length_2, style: style });\r\n    }\r\n    for (var counter = removedCharacters; result.styleRuns.length && counter > 0; counter--) {\r\n        if (--result.styleRuns[result.styleRuns.length - 1].length === 0) {\r\n            result.styleRuns.pop();\r\n        }\r\n    }\r\n    deduplicateValues(result.style, result.styleRuns, styleKeys);\r\n    if (!result.styleRuns.length)\r\n        delete result.styleRuns;\r\n    return result;\r\n}\r\nexports.decodeEngineData = decodeEngineData;\r\nfunction encodeEngineData(data) {\r\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\r\n    var text = \"\".concat((data.text || '').replace(/\\r?\\n/g, '\\r'), \"\\r\");\r\n    var fonts = [\r\n        { name: 'AdobeInvisFont', script: 0, type: 0, synthetic: 0 },\r\n    ];\r\n    var defFont = ((_a = data.style) === null || _a === void 0 ? void 0 : _a.font) || ((_c = (_b = data.styleRuns) === null || _b === void 0 ? void 0 : _b.find(function (s) { return s.style.font; })) === null || _c === void 0 ? void 0 : _c.style.font) || defaultFont;\r\n    var paragraphRunArray = [];\r\n    var paragraphRunLengthArray = [];\r\n    var paragraphRuns = data.paragraphStyleRuns;\r\n    if (paragraphRuns && paragraphRuns.length) {\r\n        var leftLength_1 = text.length;\r\n        for (var _i = 0, paragraphRuns_1 = paragraphRuns; _i < paragraphRuns_1.length; _i++) {\r\n            var run_2 = paragraphRuns_1[_i];\r\n            var runLength = Math.min(run_2.length, leftLength_1);\r\n            leftLength_1 -= runLength;\r\n            if (!runLength)\r\n                continue; // ignore 0 size runs\r\n            // extend last run if it's only for trailing \\r\r\n            if (leftLength_1 === 1 && run_2 === paragraphRuns[paragraphRuns.length - 1]) {\r\n                runLength++;\r\n                leftLength_1--;\r\n            }\r\n            paragraphRunLengthArray.push(runLength);\r\n            paragraphRunArray.push({\r\n                ParagraphSheet: {\r\n                    DefaultStyleSheet: 0,\r\n                    Properties: encodeParagraphStyle(__assign(__assign(__assign({}, defaultParagraphStyle), data.paragraphStyle), run_2.style), fonts),\r\n                },\r\n                Adjustments: { Axis: [1, 0, 1], XY: [0, 0] },\r\n            });\r\n        }\r\n        if (leftLength_1) {\r\n            paragraphRunLengthArray.push(leftLength_1);\r\n            paragraphRunArray.push({\r\n                ParagraphSheet: {\r\n                    DefaultStyleSheet: 0,\r\n                    Properties: encodeParagraphStyle(__assign(__assign({}, defaultParagraphStyle), data.paragraphStyle), fonts),\r\n                },\r\n                Adjustments: { Axis: [1, 0, 1], XY: [0, 0] },\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        for (var i = 0, last = 0; i < text.length; i++) {\r\n            if (text.charCodeAt(i) === 13) { // \\r\r\n                paragraphRunLengthArray.push(i - last + 1);\r\n                paragraphRunArray.push({\r\n                    ParagraphSheet: {\r\n                        DefaultStyleSheet: 0,\r\n                        Properties: encodeParagraphStyle(__assign(__assign({}, defaultParagraphStyle), data.paragraphStyle), fonts),\r\n                    },\r\n                    Adjustments: { Axis: [1, 0, 1], XY: [0, 0] },\r\n                });\r\n                last = i + 1;\r\n            }\r\n        }\r\n    }\r\n    var styleSheetData = encodeStyle(__assign(__assign({}, defaultStyle), { font: defFont }), fonts);\r\n    var styleRuns = data.styleRuns || [{ length: text.length, style: data.style || {} }];\r\n    var styleRunArray = [];\r\n    var styleRunLengthArray = [];\r\n    var leftLength = text.length;\r\n    for (var _o = 0, styleRuns_1 = styleRuns; _o < styleRuns_1.length; _o++) {\r\n        var run_3 = styleRuns_1[_o];\r\n        var runLength = Math.min(run_3.length, leftLength);\r\n        leftLength -= runLength;\r\n        if (!runLength)\r\n            continue; // ignore 0 size runs\r\n        // extend last run if it's only for trailing \\r\r\n        if (leftLength === 1 && run_3 === styleRuns[styleRuns.length - 1]) {\r\n            runLength++;\r\n            leftLength--;\r\n        }\r\n        styleRunLengthArray.push(runLength);\r\n        styleRunArray.push({\r\n            StyleSheet: {\r\n                StyleSheetData: encodeStyle(__assign(__assign({ kerning: 0, autoKerning: true, fillColor: { r: 0, g: 0, b: 0 } }, data.style), run_3.style), fonts),\r\n            },\r\n        });\r\n    }\r\n    // add extra run to the end if existing ones didn't fill it up\r\n    if (leftLength && styleRuns.length) {\r\n        styleRunLengthArray.push(leftLength);\r\n        styleRunArray.push({\r\n            StyleSheet: {\r\n                StyleSheetData: encodeStyle(__assign({ kerning: 0, autoKerning: true, fillColor: { r: 0, g: 0, b: 0 } }, data.style), fonts),\r\n            },\r\n        });\r\n    }\r\n    var gridInfo = __assign(__assign({}, defaultGridInfo), data.gridInfo);\r\n    var WritingDirection = data.orientation === 'vertical' ? 2 : 0;\r\n    var Procession = data.orientation === 'vertical' ? 1 : 0;\r\n    var ShapeType = data.shapeType === 'box' ? 1 : 0;\r\n    var Photoshop = {\r\n        ShapeType: ShapeType,\r\n    };\r\n    if (ShapeType === 0) {\r\n        Photoshop.PointBase = data.pointBase || [0, 0];\r\n    }\r\n    else {\r\n        Photoshop.BoxBounds = data.boxBounds || [0, 0, 0, 0];\r\n    }\r\n    // needed for correct order of properties\r\n    Photoshop.Base = {\r\n        ShapeType: ShapeType,\r\n        TransformPoint0: [1, 0],\r\n        TransformPoint1: [0, 1],\r\n        TransformPoint2: [0, 0],\r\n    };\r\n    var defaultResources = {\r\n        KinsokuSet: [\r\n            {\r\n                Name: 'PhotoshopKinsokuHard',\r\n                NoStart: '、。，．・：；？！ー―’”）〕］｝〉》」』】ヽヾゝゞ々ぁぃぅぇぉっゃゅょゎァィゥェォッャュョヮヵヶ゛゜?!)]},.:;℃℉¢％‰',\r\n                NoEnd: '‘“（〔［｛〈《「『【([{￥＄£＠§〒＃',\r\n                Keep: '―‥',\r\n                Hanging: '、。.,',\r\n            },\r\n            {\r\n                Name: 'PhotoshopKinsokuSoft',\r\n                NoStart: '、。，．・：；？！’”）〕］｝〉》」』】ヽヾゝゞ々',\r\n                NoEnd: '‘“（〔［｛〈《「『【',\r\n                Keep: '―‥',\r\n                Hanging: '、。.,',\r\n            },\r\n        ],\r\n        MojiKumiSet: [\r\n            { InternalName: 'Photoshop6MojiKumiSet1' },\r\n            { InternalName: 'Photoshop6MojiKumiSet2' },\r\n            { InternalName: 'Photoshop6MojiKumiSet3' },\r\n            { InternalName: 'Photoshop6MojiKumiSet4' },\r\n        ],\r\n        TheNormalStyleSheet: 0,\r\n        TheNormalParagraphSheet: 0,\r\n        ParagraphSheetSet: [\r\n            {\r\n                Name: 'Normal RGB',\r\n                DefaultStyleSheet: 0,\r\n                Properties: encodeParagraphStyle(__assign(__assign({}, defaultParagraphStyle), data.paragraphStyle), fonts),\r\n            },\r\n        ],\r\n        StyleSheetSet: [\r\n            {\r\n                Name: 'Normal RGB',\r\n                StyleSheetData: styleSheetData,\r\n            },\r\n        ],\r\n        FontSet: fonts.map(function (f) { return ({\r\n            Name: f.name,\r\n            Script: f.script || 0,\r\n            FontType: f.type || 0,\r\n            Synthetic: f.synthetic || 0,\r\n        }); }),\r\n        SuperscriptSize: (_d = data.superscriptSize) !== null && _d !== void 0 ? _d : 0.583,\r\n        SuperscriptPosition: (_e = data.superscriptPosition) !== null && _e !== void 0 ? _e : 0.333,\r\n        SubscriptSize: (_f = data.subscriptSize) !== null && _f !== void 0 ? _f : 0.583,\r\n        SubscriptPosition: (_g = data.subscriptPosition) !== null && _g !== void 0 ? _g : 0.333,\r\n        SmallCapSize: (_h = data.smallCapSize) !== null && _h !== void 0 ? _h : 0.7,\r\n    };\r\n    var engineData = {\r\n        EngineDict: {\r\n            Editor: { Text: text },\r\n            ParagraphRun: {\r\n                DefaultRunData: {\r\n                    ParagraphSheet: { DefaultStyleSheet: 0, Properties: {} },\r\n                    Adjustments: { Axis: [1, 0, 1], XY: [0, 0] },\r\n                },\r\n                RunArray: paragraphRunArray,\r\n                RunLengthArray: paragraphRunLengthArray,\r\n                IsJoinable: 1,\r\n            },\r\n            StyleRun: {\r\n                DefaultRunData: { StyleSheet: { StyleSheetData: {} } },\r\n                RunArray: styleRunArray,\r\n                RunLengthArray: styleRunLengthArray,\r\n                IsJoinable: 2,\r\n            },\r\n            GridInfo: {\r\n                GridIsOn: !!gridInfo.isOn,\r\n                ShowGrid: !!gridInfo.show,\r\n                GridSize: (_j = gridInfo.size) !== null && _j !== void 0 ? _j : 18,\r\n                GridLeading: (_k = gridInfo.leading) !== null && _k !== void 0 ? _k : 22,\r\n                GridColor: encodeColor(gridInfo.color),\r\n                GridLeadingFillColor: encodeColor(gridInfo.color),\r\n                AlignLineHeightToGridFlags: !!gridInfo.alignLineHeightToGridFlags,\r\n            },\r\n            AntiAlias: antialias.indexOf((_l = data.antiAlias) !== null && _l !== void 0 ? _l : 'sharp'),\r\n            UseFractionalGlyphWidths: (_m = data.useFractionalGlyphWidths) !== null && _m !== void 0 ? _m : true,\r\n            Rendered: {\r\n                Version: 1,\r\n                Shapes: {\r\n                    WritingDirection: WritingDirection,\r\n                    Children: [\r\n                        {\r\n                            ShapeType: ShapeType,\r\n                            Procession: Procession,\r\n                            Lines: { WritingDirection: WritingDirection, Children: [] },\r\n                            Cookie: { Photoshop: Photoshop },\r\n                        },\r\n                    ],\r\n                },\r\n            },\r\n        },\r\n        ResourceDict: __assign({}, defaultResources),\r\n        DocumentResources: __assign({}, defaultResources),\r\n    };\r\n    // console.log('encodeEngineData', require('util').inspect(engineData, false, 99, true));\r\n    return engineData;\r\n}\r\nexports.encodeEngineData = encodeEngineData;\r\n//# sourceMappingURL=text.js.map","import type { TextStyle, LayerTextData, ParagraphStyle, Font, AntiAlias, TextGridInfo, Justification, Color, TextPath } from './psd';\r\n\r\ninterface Adjustments {\r\n\tAxis: number[];\r\n\tXY: number[];\r\n}\r\n\r\ninterface TypeValues {\r\n\tType: number;\r\n\tValues: number[];\r\n}\r\n\r\ninterface ParagraphProperties {\r\n\tJustification?: number;\r\n\tFirstLineIndent?: number;\r\n\tStartIndent?: number;\r\n\tEndIndent?: number;\r\n\tSpaceBefore?: number;\r\n\tSpaceAfter?: number;\r\n\tAutoHyphenate?: boolean;\r\n\tHyphenatedWordSize?: number;\r\n\tPreHyphen?: number;\r\n\tPostHyphen?: number;\r\n\tConsecutiveHyphens?: number;\r\n\tZone?: number;\r\n\tWordSpacing?: number[];\r\n\tLetterSpacing?: number[];\r\n\tGlyphSpacing?: number[];\r\n\tAutoLeading?: number;\r\n\tLeadingType?: number;\r\n\tHanging?: boolean;\r\n\tBurasagari?: boolean;\r\n\tKinsokuOrder?: number;\r\n\tEveryLineComposer?: boolean;\r\n}\r\n\r\ninterface ParagraphSheet {\r\n\tName?: string;\r\n\tDefaultStyleSheet: number;\r\n\tProperties: ParagraphProperties;\r\n}\r\n\r\ninterface StyleSheetData {\r\n\tFont?: number;\r\n\tFontSize?: number;\r\n\tFauxBold?: boolean;\r\n\tFauxItalic?: boolean;\r\n\tAutoLeading?: boolean;\r\n\tLeading?: number;\r\n\tHorizontalScale?: number;\r\n\tVerticalScale?: number;\r\n\tTracking?: number;\r\n\tAutoKerning?: boolean;\r\n\tKerning?: number;\r\n\tBaselineShift?: number;\r\n\tFontCaps?: number;\r\n\tFontBaseline?: number;\r\n\tUnderline?: boolean;\r\n\tStrikethrough?: boolean;\r\n\tLigatures?: boolean;\r\n\tDLigatures?: boolean;\r\n\tBaselineDirection?: number;\r\n\tTsume?: number;\r\n\tStyleRunAlignment?: number;\r\n\tLanguage?: number;\r\n\tNoBreak?: boolean;\r\n\tFillColor?: TypeValues;\r\n\tStrokeColor?: TypeValues;\r\n\tFillFlag?: boolean;\r\n\tStrokeFlag?: boolean;\r\n\tFillFirst?: boolean;\r\n\tYUnderline?: number;\r\n\tOutlineWidth?: number;\r\n\tCharacterDirection?: number;\r\n\tHindiNumbers?: boolean;\r\n\tKashida?: number;\r\n\tDiacriticPos?: number;\r\n}\r\n\r\ninterface FontSet {\r\n\tName: string;\r\n\tScript: number;\r\n\tFontType: number;\r\n\tSynthetic: number;\r\n}\r\n\r\ninterface ResourceDict {\r\n\tKinsokuSet: any[];\r\n\tMojiKumiSet: any[];\r\n\tTheNormalStyleSheet: number;\r\n\tTheNormalParagraphSheet: number;\r\n\tParagraphSheetSet: ParagraphSheet[];\r\n\tStyleSheetSet: { Name: string; StyleSheetData: StyleSheetData; }[];\r\n\tFontSet: FontSet[];\r\n\tSuperscriptSize: number;\r\n\tSuperscriptPosition: number;\r\n\tSubscriptSize: number;\r\n\tSubscriptPosition: number;\r\n\tSmallCapSize: number;\r\n}\r\n\r\ninterface ParagraphRun {\r\n\tParagraphSheet: ParagraphSheet;\r\n\tAdjustments: Adjustments;\r\n}\r\n\r\ninterface StyleRun {\r\n\tStyleSheet: { StyleSheetData: StyleSheetData; };\r\n}\r\n\r\ninterface PhotoshopNode {\r\n\tShapeType?: number;\r\n\tPointBase?: number[];\r\n\tBoxBounds?: number[];\r\n\tBase?: {\r\n\t\tShapeType: number;\r\n\t\tTransformPoint0: number[];\r\n\t\tTransformPoint1: number[];\r\n\t\tTransformPoint2: number[];\r\n\t};\r\n}\r\n\r\nexport interface EngineData {\r\n\tEngineDict: {\r\n\t\tEditor: { Text: string; };\r\n\t\tParagraphRun: {\r\n\t\t\tDefaultRunData: ParagraphRun;\r\n\t\t\tRunArray: ParagraphRun[];\r\n\t\t\tRunLengthArray: number[];\r\n\t\t\tIsJoinable: number;\r\n\t\t};\r\n\t\tStyleRun: {\r\n\t\t\tDefaultRunData: StyleRun;\r\n\t\t\tRunArray: StyleRun[];\r\n\t\t\tRunLengthArray: number[];\r\n\t\t\tIsJoinable: number;\r\n\t\t};\r\n\t\tGridInfo: {\r\n\t\t\tGridIsOn: boolean;\r\n\t\t\tShowGrid: boolean;\r\n\t\t\tGridSize: number;\r\n\t\t\tGridLeading: number;\r\n\t\t\tGridColor: TypeValues;\r\n\t\t\tGridLeadingFillColor: TypeValues;\r\n\t\t\tAlignLineHeightToGridFlags: boolean;\r\n\t\t};\r\n\t\tAntiAlias: number;\r\n\t\tUseFractionalGlyphWidths: boolean;\r\n\t\tRendered?: {\r\n\t\t\tVersion: number;\r\n\t\t\tShapes?: {\r\n\t\t\t\tWritingDirection: number;\r\n\t\t\t\tChildren?: {\r\n\t\t\t\t\tShapeType?: number;\r\n\t\t\t\t\tProcession: number;\r\n\t\t\t\t\tLines: { WritingDirection: number; Children: any[]; };\r\n\t\t\t\t\tCookie?: {\r\n\t\t\t\t\t\tPhotoshop?: PhotoshopNode;\r\n\t\t\t\t\t};\r\n\t\t\t\t}[];\r\n\t\t\t};\r\n\t\t};\r\n\t};\r\n\tResourceDict: ResourceDict;\r\n\tDocumentResources: ResourceDict;\r\n}\r\n\r\nexport interface GlobalEngineData {\r\n\tResourceDict: {\r\n\t\tFontSet: any[]; // TODO\r\n\t\tStyleSheetSet: any[]; // TODO\r\n\t\tParagraphSheetSet: any[]; // TODO\r\n\t\tTextFrameSet?: {\r\n\t\t\tpath: TextPath;\r\n\t\t}[];\r\n\t};\r\n\tEngineDict: {\r\n\t\t// TODO\r\n\t};\r\n}\r\n\r\nconst defaultFont: Font = {\r\n\tname: 'MyriadPro-Regular',\r\n\tscript: 0,\r\n\ttype: 0,\r\n\tsynthetic: 0,\r\n};\r\n\r\nconst defaultParagraphStyle: ParagraphStyle = {\r\n\tjustification: 'left',\r\n\tfirstLineIndent: 0,\r\n\tstartIndent: 0,\r\n\tendIndent: 0,\r\n\tspaceBefore: 0,\r\n\tspaceAfter: 0,\r\n\tautoHyphenate: true,\r\n\thyphenatedWordSize: 6,\r\n\tpreHyphen: 2,\r\n\tpostHyphen: 2,\r\n\tconsecutiveHyphens: 8,\r\n\tzone: 36,\r\n\twordSpacing: [0.8, 1, 1.33],\r\n\tletterSpacing: [0, 0, 0],\r\n\tglyphSpacing: [1, 1, 1],\r\n\tautoLeading: 1.2,\r\n\tleadingType: 0,\r\n\thanging: false,\r\n\tburasagari: false,\r\n\tkinsokuOrder: 0,\r\n\teveryLineComposer: false,\r\n};\r\n\r\nconst defaultStyle: TextStyle = {\r\n\tfont: defaultFont,\r\n\tfontSize: 12,\r\n\tfauxBold: false,\r\n\tfauxItalic: false,\r\n\tautoLeading: true,\r\n\tleading: 0,\r\n\thorizontalScale: 1,\r\n\tverticalScale: 1,\r\n\ttracking: 0,\r\n\tautoKerning: true,\r\n\tkerning: 0,\r\n\tbaselineShift: 0,\r\n\tfontCaps: 0,\r\n\tfontBaseline: 0,\r\n\tunderline: false,\r\n\tstrikethrough: false,\r\n\tligatures: true,\r\n\tdLigatures: false,\r\n\tbaselineDirection: 2,\r\n\ttsume: 0,\r\n\tstyleRunAlignment: 2,\r\n\tlanguage: 0,\r\n\tnoBreak: false,\r\n\tfillColor: { r: 0, g: 0, b: 0 },\r\n\tstrokeColor: { r: 0, g: 0, b: 0 },\r\n\tfillFlag: true,\r\n\tstrokeFlag: false,\r\n\tfillFirst: true,\r\n\tyUnderline: 1,\r\n\toutlineWidth: 1,\r\n\tcharacterDirection: 0,\r\n\thindiNumbers: false,\r\n\tkashida: 1,\r\n\tdiacriticPos: 2,\r\n};\r\n\r\nconst defaultGridInfo: TextGridInfo = {\r\n\tisOn: false,\r\n\tshow: false,\r\n\tsize: 18,\r\n\tleading: 22,\r\n\tcolor: { r: 0, g: 0, b: 255 },\r\n\tleadingFillColor: { r: 0, g: 0, b: 255 },\r\n\talignLineHeightToGridFlags: false,\r\n};\r\n\r\nconst paragraphStyleKeys: (keyof ParagraphStyle)[] = [\r\n\t'justification', 'firstLineIndent', 'startIndent', 'endIndent', 'spaceBefore', 'spaceAfter',\r\n\t'autoHyphenate', 'hyphenatedWordSize', 'preHyphen', 'postHyphen', 'consecutiveHyphens',\r\n\t'zone', 'wordSpacing', 'letterSpacing', 'glyphSpacing', 'autoLeading', 'leadingType',\r\n\t'hanging', 'burasagari', 'kinsokuOrder', 'everyLineComposer',\r\n];\r\n\r\nconst styleKeys: (keyof TextStyle)[] = [\r\n\t'font', 'fontSize', 'fauxBold', 'fauxItalic', 'autoLeading', 'leading', 'horizontalScale',\r\n\t'verticalScale', 'tracking', 'autoKerning', 'kerning', 'baselineShift', 'fontCaps', 'fontBaseline',\r\n\t'underline', 'strikethrough', 'ligatures', 'dLigatures', 'baselineDirection', 'tsume',\r\n\t'styleRunAlignment', 'language', 'noBreak', 'fillColor', 'strokeColor', 'fillFlag',\r\n\t'strokeFlag', 'fillFirst', 'yUnderline', 'outlineWidth', 'characterDirection', 'hindiNumbers',\r\n\t'kashida', 'diacriticPos',\r\n];\r\n\r\nconst antialias: AntiAlias[] = ['none', 'crisp', 'strong', 'smooth', 'sharp'];\r\nconst justification: Justification[] = [\r\n\t'left', // 0\r\n\t'right', // 1\r\n\t'center', // 2\r\n\t'justify-left', // 3\r\n\t'justify-right', // 4\r\n\t'justify-center', // 5\r\n\t'justify-all', // 6\r\n];\r\n\r\nfunction upperFirst(value: string) {\r\n\treturn value.substring(0, 1).toUpperCase() + value.substring(1);\r\n}\r\n\r\nfunction decodeColor(color: TypeValues): Color {\r\n\tconst c = color.Values;\r\n\tswitch (color.Type) {\r\n\t\tcase 0: return { k: c[1] * 255 }; // grayscale (alpha?)\r\n\t\tcase 1: return c[0] === 1 ?\r\n\t\t\t{ r: c[1] * 255, g: c[2] * 255, b: c[3] * 255 } : // rgb\r\n\t\t\t{ r: c[1] * 255, g: c[2] * 255, b: c[3] * 255, a: c[0] * 255 }; // rgba\r\n\t\tcase 2: return { c: c[1] * 255, m: c[2] * 255, y: c[3] * 255, k: c[4] * 255 }; // cmyk (alpha?)\r\n\t\tdefault: throw new Error('Unknown color type in text layer');\r\n\t}\r\n}\r\n\r\nfunction encodeColor(color: Color | undefined): TypeValues {\r\n\tif (!color) {\r\n\t\treturn { Type: 1, Values: [0, 0, 0, 0] };\r\n\t} else if ('r' in color) {\r\n\t\treturn { Type: 1, Values: ['a' in color ? color.a / 255 : 1, color.r / 255, color.g / 255, color.b / 255] };\r\n\t} else if ('c' in color) {\r\n\t\treturn { Type: 2, Values: [1, color.c / 255, color.m / 255, color.y / 255, color.k / 255] };\r\n\t} else if ('k' in color) {\r\n\t\treturn { Type: 0, Values: [1, color.k / 255] };\r\n\t} else {\r\n\t\tthrow new Error('Invalid color type in text layer');\r\n\t}\r\n}\r\n\r\nfunction arraysEqual(a: any[], b: any[]) {\r\n\tif (!a || !b) return false;\r\n\tif (a.length !== b.length) return false;\r\n\tfor (let i = 0; i < a.length; i++) if (a[i] !== b[i]) return false;\r\n\treturn true;\r\n}\r\n\r\nfunction objectsEqual(a: any, b: any) {\r\n\tif (!a || !b) return false;\r\n\tfor (const key of Object.keys(a)) if (a[key] !== b[key]) return false;\r\n\tfor (const key of Object.keys(b)) if (a[key] !== b[key]) return false;\r\n\treturn true;\r\n}\r\n\r\nfunction findOrAddFont(fonts: Font[], font: Font) {\r\n\tfor (let i = 0; i < fonts.length; i++) {\r\n\t\tif (fonts[i].name === font.name) return i;\r\n\t}\r\n\r\n\tfonts.push(font);\r\n\treturn fonts.length - 1;\r\n}\r\n\r\nfunction decodeObject(obj: any, keys: string[], fonts: Font[]) {\r\n\tconst result: any = {};\r\n\r\n\tfor (const key of keys) {\r\n\t\tconst Key = upperFirst(key);\r\n\r\n\t\tif (obj[Key] === undefined) continue;\r\n\r\n\t\tif (key === 'justification') {\r\n\t\t\tresult[key] = justification[obj[Key]];\r\n\t\t} else if (key === 'font') {\r\n\t\t\tresult[key] = fonts[obj[Key]];\r\n\t\t} else if (key === 'fillColor' || key === 'strokeColor') {\r\n\t\t\tresult[key] = decodeColor(obj[Key]);\r\n\t\t} else {\r\n\t\t\tresult[key] = obj[Key];\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\nfunction encodeObject(obj: any, keys: string[], fonts: Font[]) {\r\n\tconst result: any = {};\r\n\r\n\tfor (const key of keys) {\r\n\t\tconst Key = upperFirst(key);\r\n\r\n\t\tif (obj[key] === undefined) continue;\r\n\r\n\t\tif (key === 'justification') {\r\n\t\t\tresult[Key] = justification.indexOf(obj[key] ?? 'left');\r\n\t\t} else if (key === 'font') {\r\n\t\t\tresult[Key] = findOrAddFont(fonts, obj[key]);\r\n\t\t} else if (key === 'fillColor' || key === 'strokeColor') {\r\n\t\t\tresult[Key] = encodeColor(obj[key]);\r\n\t\t} else {\r\n\t\t\tresult[Key] = obj[key];\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\nfunction decodeParagraphStyle(obj: ParagraphProperties, fonts: Font[]): ParagraphStyle {\r\n\treturn decodeObject(obj, paragraphStyleKeys, fonts);\r\n}\r\n\r\nfunction decodeStyle(obj: StyleSheetData, fonts: Font[]): TextStyle {\r\n\treturn decodeObject(obj, styleKeys, fonts);\r\n}\r\n\r\nfunction encodeParagraphStyle(obj: ParagraphStyle, fonts: Font[]): ParagraphProperties {\r\n\treturn encodeObject(obj, paragraphStyleKeys, fonts);\r\n}\r\n\r\nfunction encodeStyle(obj: TextStyle, fonts: Font[]): StyleSheetData {\r\n\treturn encodeObject(obj, styleKeys, fonts);\r\n}\r\n\r\nfunction deduplicateValues<T>(base: T, runs: { style: T; }[], keys: (keyof T)[]) {\r\n\tif (!runs.length) return;\r\n\r\n\tfor (const key of keys) {\r\n\t\tconst value = runs[0].style[key];\r\n\r\n\t\tif (value !== undefined) {\r\n\t\t\tlet identical = false;\r\n\r\n\t\t\tif (Array.isArray(value)) {\r\n\t\t\t\tidentical = runs.every(r => arraysEqual(r.style[key] as any, value));\r\n\t\t\t} else if (typeof value === 'object') {\r\n\t\t\t\tidentical = runs.every(r => objectsEqual(r.style[key] as any, value));\r\n\t\t\t} else {\r\n\t\t\t\tidentical = runs.every(r => r.style[key] === value);\r\n\t\t\t}\r\n\r\n\t\t\tif (identical) {\r\n\t\t\t\tbase[key] = value as any;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst styleValue = base[key];\r\n\r\n\t\tif (styleValue !== undefined) {\r\n\t\t\tfor (const r of runs) {\r\n\t\t\t\tlet same = false;\r\n\r\n\t\t\t\tif (Array.isArray(value)) {\r\n\t\t\t\t\tsame = arraysEqual(r.style[key] as any, value);\r\n\t\t\t\t} else if (typeof value === 'object') {\r\n\t\t\t\t\tsame = objectsEqual(r.style[key] as any, value);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsame = r.style[key] === value;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (same) delete r.style[key];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tif (runs.every(x => Object.keys(x.style as any).length === 0)) {\r\n\t\truns.length = 0;\r\n\t}\r\n}\r\n\r\nexport function decodeEngineData(engineData: EngineData) {\r\n\t// console.log('engineData', require('util').inspect(engineData, false, 99, true));\r\n\tconst engineDict = engineData.EngineDict;\r\n\tconst resourceDict = engineData.ResourceDict;\r\n\r\n\tconst fonts = resourceDict.FontSet.map<Font>(f => ({\r\n\t\tname: f.Name,\r\n\t\tscript: f.Script,\r\n\t\ttype: f.FontType,\r\n\t\tsynthetic: f.Synthetic,\r\n\t}));\r\n\r\n\tlet text = engineDict.Editor.Text.replace(/\\r/g, '\\n');\r\n\tlet removedCharacters = 0;\r\n\r\n\twhile (/\\n$/.test(text)) {\r\n\t\ttext = text.substring(0, text.length - 1);\r\n\t\tremovedCharacters++;\r\n\t}\r\n\r\n\tconst result: LayerTextData = {\r\n\t\ttext,\r\n\t\tantiAlias: antialias[engineDict.AntiAlias] ?? 'smooth',\r\n\t\tuseFractionalGlyphWidths: !!engineDict.UseFractionalGlyphWidths,\r\n\t\tsuperscriptSize: resourceDict.SuperscriptSize,\r\n\t\tsuperscriptPosition: resourceDict.SuperscriptPosition,\r\n\t\tsubscriptSize: resourceDict.SubscriptSize,\r\n\t\tsubscriptPosition: resourceDict.SubscriptPosition,\r\n\t\tsmallCapSize: resourceDict.SmallCapSize,\r\n\t};\r\n\r\n\t// shape\r\n\r\n\tconst photoshop = engineDict.Rendered?.Shapes?.Children?.[0]?.Cookie?.Photoshop;\r\n\r\n\tif (photoshop) {\r\n\t\tresult.shapeType = photoshop.ShapeType === 1 ? 'box' : 'point';\r\n\t\tif (photoshop.PointBase) result.pointBase = photoshop.PointBase;\r\n\t\tif (photoshop.BoxBounds) result.boxBounds = photoshop.BoxBounds;\r\n\t}\r\n\r\n\t// paragraph style\r\n\r\n\t// const theNormalParagraphSheet = resourceDict.TheNormalParagraphSheet;\r\n\t// const paragraphSheetSet = resourceDict.ParagraphSheetSet;\r\n\t// const paragraphProperties = paragraphSheetSet[theNormalParagraphSheet].Properties;\r\n\tconst paragraphRun = engineDict.ParagraphRun;\r\n\r\n\tresult.paragraphStyle = {}; // decodeParagraphStyle(paragraphProperties, fonts);\r\n\tresult.paragraphStyleRuns = [];\r\n\r\n\tfor (let i = 0; i < paragraphRun.RunArray.length; i++) {\r\n\t\tconst run = paragraphRun.RunArray[i];\r\n\t\tconst length = paragraphRun.RunLengthArray[i];\r\n\t\tconst style = decodeParagraphStyle(run.ParagraphSheet.Properties, fonts);\r\n\t\t// const adjustments = {\r\n\t\t//   axis: run.Adjustments.Axis,\r\n\t\t//   xy: run.Adjustments.XY,\r\n\t\t// };\r\n\t\tresult.paragraphStyleRuns.push({ length, style/*, adjustments*/ });\r\n\t}\r\n\r\n\tfor (let counter = removedCharacters; result.paragraphStyleRuns.length && counter > 0; counter--) {\r\n\t\tif (--result.paragraphStyleRuns[result.paragraphStyleRuns.length - 1].length === 0) {\r\n\t\t\tresult.paragraphStyleRuns.pop();\r\n\t\t}\r\n\t}\r\n\r\n\tdeduplicateValues(result.paragraphStyle, result.paragraphStyleRuns, paragraphStyleKeys);\r\n\r\n\tif (!result.paragraphStyleRuns.length) delete result.paragraphStyleRuns;\r\n\r\n\t// style\r\n\r\n\t// const theNormalStyleSheet = resourceDict.TheNormalStyleSheet;\r\n\t// const styleSheetSet = resourceDict.StyleSheetSet;\r\n\t// const styleSheetData = styleSheetSet[theNormalStyleSheet].StyleSheetData;\r\n\tconst styleRun = engineDict.StyleRun;\r\n\r\n\tresult.style = {}; // decodeStyle(styleSheetData, fonts);\r\n\tresult.styleRuns = [];\r\n\r\n\tfor (let i = 0; i < styleRun.RunArray.length; i++) {\r\n\t\tconst length = styleRun.RunLengthArray[i];\r\n\t\tconst style = decodeStyle(styleRun.RunArray[i].StyleSheet.StyleSheetData, fonts);\r\n\t\tif (!style.font) style.font = fonts[0];\r\n\t\tresult.styleRuns.push({ length, style });\r\n\t}\r\n\r\n\tfor (let counter = removedCharacters; result.styleRuns.length && counter > 0; counter--) {\r\n\t\tif (--result.styleRuns[result.styleRuns.length - 1].length === 0) {\r\n\t\t\tresult.styleRuns.pop();\r\n\t\t}\r\n\t}\r\n\r\n\tdeduplicateValues(result.style, result.styleRuns, styleKeys);\r\n\r\n\tif (!result.styleRuns.length) delete result.styleRuns;\r\n\r\n\treturn result;\r\n}\r\n\r\nexport function encodeEngineData(data: LayerTextData) {\r\n\tconst text = `${(data.text || '').replace(/\\r?\\n/g, '\\r')}\\r`;\r\n\r\n\tconst fonts: Font[] = [\r\n\t\t{ name: 'AdobeInvisFont', script: 0, type: 0, synthetic: 0 },\r\n\t];\r\n\r\n\tconst defFont = data.style?.font || data.styleRuns?.find(s => s.style.font)?.style.font || defaultFont;\r\n\tconst paragraphRunArray: ParagraphRun[] = [];\r\n\tconst paragraphRunLengthArray: number[] = [];\r\n\tconst paragraphRuns = data.paragraphStyleRuns;\r\n\r\n\tif (paragraphRuns && paragraphRuns.length) {\r\n\t\tlet leftLength = text.length;\r\n\r\n\t\tfor (const run of paragraphRuns) {\r\n\t\t\tlet runLength = Math.min(run.length, leftLength);\r\n\t\t\tleftLength -= runLength;\r\n\r\n\t\t\tif (!runLength) continue; // ignore 0 size runs\r\n\r\n\t\t\t// extend last run if it's only for trailing \\r\r\n\t\t\tif (leftLength === 1 && run === paragraphRuns[paragraphRuns.length - 1]) {\r\n\t\t\t\trunLength++;\r\n\t\t\t\tleftLength--;\r\n\t\t\t}\r\n\r\n\t\t\tparagraphRunLengthArray.push(runLength);\r\n\t\t\tparagraphRunArray.push({\r\n\t\t\t\tParagraphSheet: {\r\n\t\t\t\t\tDefaultStyleSheet: 0,\r\n\t\t\t\t\tProperties: encodeParagraphStyle({ ...defaultParagraphStyle, ...data.paragraphStyle, ...run.style }, fonts),\r\n\t\t\t\t},\r\n\t\t\t\tAdjustments: { Axis: [1, 0, 1], XY: [0, 0] },\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (leftLength) {\r\n\t\t\tparagraphRunLengthArray.push(leftLength);\r\n\t\t\tparagraphRunArray.push({\r\n\t\t\t\tParagraphSheet: {\r\n\t\t\t\t\tDefaultStyleSheet: 0,\r\n\t\t\t\t\tProperties: encodeParagraphStyle({ ...defaultParagraphStyle, ...data.paragraphStyle }, fonts),\r\n\t\t\t\t},\r\n\t\t\t\tAdjustments: { Axis: [1, 0, 1], XY: [0, 0] },\r\n\t\t\t});\r\n\t\t}\r\n\t} else {\r\n\t\tfor (let i = 0, last = 0; i < text.length; i++) {\r\n\t\t\tif (text.charCodeAt(i) === 13) { // \\r\r\n\t\t\t\tparagraphRunLengthArray.push(i - last + 1);\r\n\t\t\t\tparagraphRunArray.push({\r\n\t\t\t\t\tParagraphSheet: {\r\n\t\t\t\t\t\tDefaultStyleSheet: 0,\r\n\t\t\t\t\t\tProperties: encodeParagraphStyle({ ...defaultParagraphStyle, ...data.paragraphStyle }, fonts),\r\n\t\t\t\t\t},\r\n\t\t\t\t\tAdjustments: { Axis: [1, 0, 1], XY: [0, 0] },\r\n\t\t\t\t});\r\n\t\t\t\tlast = i + 1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tconst styleSheetData = encodeStyle({ ...defaultStyle, font: defFont }, fonts);\r\n\tconst styleRuns = data.styleRuns || [{ length: text.length, style: data.style || {} }];\r\n\tconst styleRunArray: StyleRun[] = [];\r\n\tconst styleRunLengthArray: number[] = [];\r\n\r\n\tlet leftLength = text.length;\r\n\r\n\tfor (const run of styleRuns) {\r\n\t\tlet runLength = Math.min(run.length, leftLength);\r\n\t\tleftLength -= runLength;\r\n\r\n\t\tif (!runLength) continue; // ignore 0 size runs\r\n\r\n\t\t// extend last run if it's only for trailing \\r\r\n\t\tif (leftLength === 1 && run === styleRuns[styleRuns.length - 1]) {\r\n\t\t\trunLength++;\r\n\t\t\tleftLength--;\r\n\t\t}\r\n\r\n\t\tstyleRunLengthArray.push(runLength);\r\n\t\tstyleRunArray.push({\r\n\t\t\tStyleSheet: {\r\n\t\t\t\tStyleSheetData: encodeStyle({\r\n\t\t\t\t\tkerning: 0,\r\n\t\t\t\t\tautoKerning: true,\r\n\t\t\t\t\tfillColor: { r: 0, g: 0, b: 0 },\r\n\t\t\t\t\t...data.style,\r\n\t\t\t\t\t...run.style,\r\n\t\t\t\t}, fonts),\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\t// add extra run to the end if existing ones didn't fill it up\r\n\tif (leftLength && styleRuns.length) {\r\n\t\tstyleRunLengthArray.push(leftLength);\r\n\t\tstyleRunArray.push({\r\n\t\t\tStyleSheet: {\r\n\t\t\t\tStyleSheetData: encodeStyle({\r\n\t\t\t\t\tkerning: 0,\r\n\t\t\t\t\tautoKerning: true,\r\n\t\t\t\t\tfillColor: { r: 0, g: 0, b: 0 },\r\n\t\t\t\t\t...data.style,\r\n\t\t\t\t}, fonts),\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\tconst gridInfo = { ...defaultGridInfo, ...data.gridInfo };\r\n\tconst WritingDirection = data.orientation === 'vertical' ? 2 : 0;\r\n\tconst Procession = data.orientation === 'vertical' ? 1 : 0;\r\n\tconst ShapeType = data.shapeType === 'box' ? 1 : 0;\r\n\tconst Photoshop: PhotoshopNode = {\r\n\t\tShapeType,\r\n\t};\r\n\r\n\tif (ShapeType === 0) {\r\n\t\tPhotoshop.PointBase = data.pointBase || [0, 0];\r\n\t} else {\r\n\t\tPhotoshop.BoxBounds = data.boxBounds || [0, 0, 0, 0];\r\n\t}\r\n\r\n\t// needed for correct order of properties\r\n\tPhotoshop.Base = {\r\n\t\tShapeType,\r\n\t\tTransformPoint0: [1, 0],\r\n\t\tTransformPoint1: [0, 1],\r\n\t\tTransformPoint2: [0, 0],\r\n\t};\r\n\r\n\tconst defaultResources = {\r\n\t\tKinsokuSet: [\r\n\t\t\t{\r\n\t\t\t\tName: 'PhotoshopKinsokuHard',\r\n\t\t\t\tNoStart: '、。，．・：；？！ー―’”）〕］｝〉》」』】ヽヾゝゞ々ぁぃぅぇぉっゃゅょゎァィゥェォッャュョヮヵヶ゛゜?!)]},.:;℃℉¢％‰',\r\n\t\t\t\tNoEnd: '‘“（〔［｛〈《「『【([{￥＄£＠§〒＃',\r\n\t\t\t\tKeep: '―‥',\r\n\t\t\t\tHanging: '、。.,',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tName: 'PhotoshopKinsokuSoft',\r\n\t\t\t\tNoStart: '、。，．・：；？！’”）〕］｝〉》」』】ヽヾゝゞ々',\r\n\t\t\t\tNoEnd: '‘“（〔［｛〈《「『【',\r\n\t\t\t\tKeep: '―‥',\r\n\t\t\t\tHanging: '、。.,',\r\n\t\t\t},\r\n\t\t],\r\n\t\tMojiKumiSet: [\r\n\t\t\t{ InternalName: 'Photoshop6MojiKumiSet1' },\r\n\t\t\t{ InternalName: 'Photoshop6MojiKumiSet2' },\r\n\t\t\t{ InternalName: 'Photoshop6MojiKumiSet3' },\r\n\t\t\t{ InternalName: 'Photoshop6MojiKumiSet4' },\r\n\t\t],\r\n\t\tTheNormalStyleSheet: 0,\r\n\t\tTheNormalParagraphSheet: 0,\r\n\t\tParagraphSheetSet: [\r\n\t\t\t{\r\n\t\t\t\tName: 'Normal RGB',\r\n\t\t\t\tDefaultStyleSheet: 0,\r\n\t\t\t\tProperties: encodeParagraphStyle({ ...defaultParagraphStyle, ...data.paragraphStyle }, fonts),\r\n\t\t\t},\r\n\t\t],\r\n\t\tStyleSheetSet: [\r\n\t\t\t{\r\n\t\t\t\tName: 'Normal RGB',\r\n\t\t\t\tStyleSheetData: styleSheetData,\r\n\t\t\t},\r\n\t\t],\r\n\t\tFontSet: fonts.map<FontSet>(f => ({\r\n\t\t\tName: f.name,\r\n\t\t\tScript: f.script || 0,\r\n\t\t\tFontType: f.type || 0,\r\n\t\t\tSynthetic: f.synthetic || 0,\r\n\t\t})),\r\n\t\tSuperscriptSize: data.superscriptSize ?? 0.583,\r\n\t\tSuperscriptPosition: data.superscriptPosition ?? 0.333,\r\n\t\tSubscriptSize: data.subscriptSize ?? 0.583,\r\n\t\tSubscriptPosition: data.subscriptPosition ?? 0.333,\r\n\t\tSmallCapSize: data.smallCapSize ?? 0.7,\r\n\t};\r\n\r\n\tconst engineData: EngineData = {\r\n\t\tEngineDict: {\r\n\t\t\tEditor: { Text: text },\r\n\t\t\tParagraphRun: {\r\n\t\t\t\tDefaultRunData: {\r\n\t\t\t\t\tParagraphSheet: { DefaultStyleSheet: 0, Properties: {} },\r\n\t\t\t\t\tAdjustments: { Axis: [1, 0, 1], XY: [0, 0] },\r\n\t\t\t\t},\r\n\t\t\t\tRunArray: paragraphRunArray,\r\n\t\t\t\tRunLengthArray: paragraphRunLengthArray,\r\n\t\t\t\tIsJoinable: 1,\r\n\t\t\t},\r\n\t\t\tStyleRun: {\r\n\t\t\t\tDefaultRunData: { StyleSheet: { StyleSheetData: {} } },\r\n\t\t\t\tRunArray: styleRunArray,\r\n\t\t\t\tRunLengthArray: styleRunLengthArray,\r\n\t\t\t\tIsJoinable: 2,\r\n\t\t\t},\r\n\t\t\tGridInfo: {\r\n\t\t\t\tGridIsOn: !!gridInfo.isOn,\r\n\t\t\t\tShowGrid: !!gridInfo.show,\r\n\t\t\t\tGridSize: gridInfo.size ?? 18,\r\n\t\t\t\tGridLeading: gridInfo.leading ?? 22,\r\n\t\t\t\tGridColor: encodeColor(gridInfo.color),\r\n\t\t\t\tGridLeadingFillColor: encodeColor(gridInfo.color),\r\n\t\t\t\tAlignLineHeightToGridFlags: !!gridInfo.alignLineHeightToGridFlags,\r\n\t\t\t},\r\n\t\t\tAntiAlias: antialias.indexOf(data.antiAlias ?? 'sharp'),\r\n\t\t\tUseFractionalGlyphWidths: data.useFractionalGlyphWidths ?? true,\r\n\t\t\tRendered: {\r\n\t\t\t\tVersion: 1,\r\n\t\t\t\tShapes: {\r\n\t\t\t\t\tWritingDirection,\r\n\t\t\t\t\tChildren: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tShapeType,\r\n\t\t\t\t\t\t\tProcession,\r\n\t\t\t\t\t\t\tLines: { WritingDirection, Children: [] },\r\n\t\t\t\t\t\t\tCookie: { Photoshop },\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t},\r\n\t\tResourceDict: { ...defaultResources },\r\n\t\tDocumentResources: { ...defaultResources },\r\n\t};\r\n\r\n\t// console.log('encodeEngineData', require('util').inspect(engineData, false, 99, true));\r\n\treturn engineData;\r\n}\r\n","\"use strict\";\r\n/// Engine data 2 experiments\r\n// /test/engineData2.json:1109 is character codes\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.decodeEngineData2 = void 0;\r\nvar keysColor = {\r\n    '0': {\r\n        uproot: true,\r\n        children: {\r\n            '0': { name: 'Type' },\r\n            '1': { name: 'Values' },\r\n        },\r\n    },\r\n};\r\nvar keysStyleSheet = {\r\n    '0': { name: 'Font' },\r\n    '1': { name: 'FontSize' },\r\n    '2': { name: 'FauxBold' },\r\n    '3': { name: 'FauxItalic' },\r\n    '4': { name: 'AutoLeading' },\r\n    '5': { name: 'Leading' },\r\n    '6': { name: 'HorizontalScale' },\r\n    '7': { name: 'VerticalScale' },\r\n    '8': { name: 'Tracking' },\r\n    '9': { name: 'BaselineShift' },\r\n    // '10': ???\r\n    '11': { name: 'Kerning?' },\r\n    '12': { name: 'FontCaps' },\r\n    '13': { name: 'FontBaseline' },\r\n    '15': { name: 'Strikethrough?' },\r\n    '16': { name: 'Underline?' },\r\n    '18': { name: 'Ligatures' },\r\n    '19': { name: 'DLigatures' },\r\n    // '20': ???\r\n    // '21': ???\r\n    // '22': ???\r\n    '23': { name: 'Fractions' },\r\n    '24': { name: 'Ordinals' },\r\n    // '25': ???\r\n    // '26': ???\r\n    // '27': ???\r\n    '28': { name: 'StylisticAlternates' },\r\n    // '29': ???\r\n    '30': { name: 'OldStyle?' },\r\n    '35': { name: 'BaselineDirection' },\r\n    '38': { name: 'Language' },\r\n    '52': { name: 'NoBreak' },\r\n    '53': { name: 'FillColor', children: keysColor },\r\n    '54': { name: 'StrokeColor', children: keysColor },\r\n    '55': { children: { '99': { uproot: true } } },\r\n    // '68': ???\r\n    // '70': ???\r\n    // '71': ???\r\n    // '72': ???\r\n    // '73': ???\r\n    '79': { children: keysColor },\r\n    // '85': ???\r\n    // '87': ???\r\n    // '88': ???\r\n};\r\nvar keysParagraph = {\r\n    '0': { name: 'Justification' },\r\n    '1': { name: 'FirstLineIndent' },\r\n    '2': { name: 'StartIndent' },\r\n    '3': { name: 'EndIndent' },\r\n    '4': { name: 'SpaceBefore' },\r\n    '5': { name: 'SpaceAfter' },\r\n    '7': { name: 'AutoLeading' },\r\n    '9': { name: 'AutoHyphenate' },\r\n    '10': { name: 'HyphenatedWordSize' },\r\n    '11': { name: 'PreHyphen' },\r\n    '12': { name: 'PostHyphen' },\r\n    '13': { name: 'ConsecutiveHyphens?' },\r\n    '14': { name: 'Zone' },\r\n    '15': { name: 'HypenateCapitalizedWords' },\r\n    '17': { name: 'WordSpacing' },\r\n    '18': { name: 'LetterSpacing' },\r\n    '19': { name: 'GlyphSpacing' },\r\n    '32': { name: 'StyleSheet', children: keysStyleSheet },\r\n};\r\nvar keysStyleSheetData = {\r\n    name: 'StyleSheetData',\r\n    children: keysStyleSheet,\r\n};\r\nvar keysRoot = {\r\n    '0': {\r\n        name: 'ResourceDict',\r\n        children: {\r\n            '1': {\r\n                name: 'FontSet',\r\n                children: {\r\n                    '0': {\r\n                        uproot: true,\r\n                        children: {\r\n                            '0': {\r\n                                uproot: true,\r\n                                children: {\r\n                                    '0': {\r\n                                        uproot: true,\r\n                                        children: {\r\n                                            '0': { name: 'Name' },\r\n                                            '2': { name: 'FontType' },\r\n                                        },\r\n                                    },\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            '2': {\r\n                name: '2',\r\n                children: {},\r\n            },\r\n            '3': {\r\n                name: 'MojiKumiSet',\r\n                children: {\r\n                    '0': {\r\n                        uproot: true,\r\n                        children: {\r\n                            '0': {\r\n                                uproot: true,\r\n                                children: {\r\n                                    '0': { name: 'InternalName' },\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            '4': {\r\n                name: 'KinsokuSet',\r\n                children: {\r\n                    '0': {\r\n                        uproot: true,\r\n                        children: {\r\n                            '0': {\r\n                                uproot: true,\r\n                                children: {\r\n                                    '0': { name: 'Name' },\r\n                                    '5': {\r\n                                        uproot: true,\r\n                                        children: {\r\n                                            '0': { name: 'NoStart' },\r\n                                            '1': { name: 'NoEnd' },\r\n                                            '2': { name: 'Keep' },\r\n                                            '3': { name: 'Hanging' },\r\n                                            '4': { name: 'Name' },\r\n                                        },\r\n                                    },\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            '5': {\r\n                name: 'StyleSheetSet',\r\n                children: {\r\n                    '0': {\r\n                        uproot: true,\r\n                        children: {\r\n                            '0': {\r\n                                uproot: true,\r\n                                children: {\r\n                                    '0': { name: 'Name' },\r\n                                    '6': keysStyleSheetData,\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            '6': {\r\n                name: 'ParagraphSheetSet',\r\n                children: {\r\n                    '0': {\r\n                        uproot: true,\r\n                        children: {\r\n                            '0': {\r\n                                uproot: true,\r\n                                children: {\r\n                                    '0': { name: 'Name' },\r\n                                    '5': {\r\n                                        name: 'Properties',\r\n                                        children: keysParagraph,\r\n                                    },\r\n                                    '6': { name: 'DefaultStyleSheet' },\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            '8': {\r\n                name: 'TextFrameSet',\r\n                children: {\r\n                    '0': {\r\n                        uproot: true,\r\n                        children: {\r\n                            '0': {\r\n                                name: 'path',\r\n                                children: {\r\n                                    '0': { name: 'name' },\r\n                                    '1': {\r\n                                        name: 'bezierCurve',\r\n                                        children: {\r\n                                            '0': { name: 'controlPoints' },\r\n                                        },\r\n                                    },\r\n                                    '2': {\r\n                                        name: 'data',\r\n                                        children: {\r\n                                            '0': { name: 'type' },\r\n                                            '1': { name: 'orientation' },\r\n                                            '2': { name: 'frameMatrix' },\r\n                                            '4': { name: '4' },\r\n                                            '6': { name: 'textRange' },\r\n                                            '7': { name: 'rowGutter' },\r\n                                            '8': { name: 'columnGutter' },\r\n                                            '9': { name: '9' },\r\n                                            '10': {\r\n                                                name: 'baselineAlignment',\r\n                                                children: {\r\n                                                    '0': { name: 'flag' },\r\n                                                    '1': { name: 'min' },\r\n                                                },\r\n                                            },\r\n                                            '11': {\r\n                                                name: 'pathData',\r\n                                                children: {\r\n                                                    '1': { name: '1' },\r\n                                                    '0': { name: 'reversed' },\r\n                                                    '2': { name: '2' },\r\n                                                    '3': { name: '3' },\r\n                                                    '4': { name: 'spacing' },\r\n                                                    '5': { name: '5' },\r\n                                                    '6': { name: '6' },\r\n                                                    '7': { name: '7' },\r\n                                                    '18': { name: '18' },\r\n                                                },\r\n                                            },\r\n                                            '12': { name: '12' },\r\n                                            '13': { name: '13' },\r\n                                        },\r\n                                    },\r\n                                    '3': { name: '3' },\r\n                                    '97': { name: 'uuid' },\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            '9': {\r\n                name: 'Predefined',\r\n                children: {\r\n                    '0': {\r\n                        children: { '0': { uproot: true } },\r\n                    },\r\n                    '1': {\r\n                        children: { '0': { uproot: true } },\r\n                    },\r\n                },\r\n            },\r\n        },\r\n    },\r\n    '1': {\r\n        name: 'EngineDict',\r\n        children: {\r\n            '0': {\r\n                name: '0',\r\n                children: {\r\n                    // 0: ???\r\n                    // 1: ???\r\n                    // 2: ???\r\n                    '3': { name: 'SuperscriptSize' },\r\n                    '4': { name: 'SuperscriptPosition' },\r\n                    '5': { name: 'SubscriptSize' },\r\n                    '6': { name: 'SubscriptPosition' },\r\n                    '7': { name: 'SmallCapSize' },\r\n                    '8': { name: 'UseFractionalGlyphWidths' },\r\n                    '15': { children: { '0': { uproot: true } } },\r\n                    // 16: ???\r\n                    // 17: ???\r\n                },\r\n            },\r\n            '1': {\r\n                name: 'Editors?',\r\n                children: {\r\n                    '0': {\r\n                        name: 'Editor',\r\n                        children: {\r\n                            '0': { name: 'Text' },\r\n                            '5': {\r\n                                name: 'ParagraphRun',\r\n                                children: {\r\n                                    '0': {\r\n                                        name: 'RunArray',\r\n                                        children: {\r\n                                            '0': {\r\n                                                name: 'ParagraphSheet',\r\n                                                children: {\r\n                                                    '0': {\r\n                                                        uproot: true,\r\n                                                        children: {\r\n                                                            '0': { name: '0' },\r\n                                                            '5': {\r\n                                                                name: '5',\r\n                                                                children: keysParagraph,\r\n                                                            },\r\n                                                            '6': { name: '6' },\r\n                                                        },\r\n                                                    },\r\n                                                },\r\n                                            },\r\n                                            '1': { name: 'RunLength' },\r\n                                        },\r\n                                    },\r\n                                },\r\n                            },\r\n                            '6': {\r\n                                name: 'StyleRun',\r\n                                children: {\r\n                                    '0': {\r\n                                        name: 'RunArray',\r\n                                        children: {\r\n                                            '0': {\r\n                                                name: 'StyleSheet',\r\n                                                children: {\r\n                                                    '0': {\r\n                                                        uproot: true,\r\n                                                        children: {\r\n                                                            '6': keysStyleSheetData,\r\n                                                        },\r\n                                                    },\r\n                                                },\r\n                                            },\r\n                                            '1': { name: 'RunLength' },\r\n                                        },\r\n                                    },\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                    '1': {\r\n                        name: 'FontVectorData ???',\r\n                        // children: {\r\n                        // \t'0': {},\r\n                        // \t'2': {\r\n                        // \t\t// '5'\r\n                        // \t\t// '6'\r\n                        // \t},\r\n                        // }\r\n                        //     \"1\": [ // this is probably bounding box? there seem to be many of them nested\r\n                        //       0,\r\n                        //       0,\r\n                        //       999,\r\n                        //       176.30014\r\n                        //     ],\r\n                        // various types: /PC, /F, /R, /L, /S, /G\r\n                    },\r\n                },\r\n            },\r\n            '2': {\r\n                name: 'StyleSheet',\r\n                children: keysStyleSheet,\r\n            },\r\n            '3': {\r\n                name: 'ParagraphSheet',\r\n                children: keysParagraph,\r\n            },\r\n        },\r\n    },\r\n};\r\nfunction decodeObj(obj, keys) {\r\n    var _a, _b;\r\n    if (obj === null)\r\n        return obj;\r\n    if (Array.isArray(obj))\r\n        return obj.map(function (x) { return decodeObj(x, keys); });\r\n    if (typeof obj !== 'object')\r\n        return obj;\r\n    var result = {};\r\n    for (var _i = 0, _c = Object.keys(obj); _i < _c.length; _i++) {\r\n        var key = _c[_i];\r\n        if (keys[key]) {\r\n            if (keys[key].uproot) {\r\n                if (key !== '99')\r\n                    result = decodeObj(obj[key], (_a = keys[key].children) !== null && _a !== void 0 ? _a : {});\r\n                if (obj['99'])\r\n                    result._type = obj['99'];\r\n                break;\r\n            }\r\n            else {\r\n                result[keys[key].name || key] = decodeObj(obj[key], (_b = keys[key].children) !== null && _b !== void 0 ? _b : {});\r\n            }\r\n        }\r\n        else if (key === '99') {\r\n            result._type = obj[key];\r\n        }\r\n        else {\r\n            result[key] = decodeObj(obj[key], {});\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction decodeEngineData2(data) {\r\n    return decodeObj(data, keysRoot);\r\n}\r\nexports.decodeEngineData2 = decodeEngineData2;\r\n//# sourceMappingURL=engineData2.js.map","/// Engine data 2 experiments\r\n// /test/engineData2.json:1109 is character codes\r\n\r\nimport type { GlobalEngineData } from './text';\r\n\r\ninterface KeysDict {\r\n\t[key: string]: {\r\n\t\tname?: string;\r\n\t\tuproot?: boolean;\r\n\t\tchildren?: KeysDict;\r\n\t};\r\n}\r\n\r\nconst keysColor: KeysDict = {\r\n\t'0': {\r\n\t\tuproot: true,\r\n\t\tchildren: {\r\n\t\t\t'0': { name: 'Type' },\r\n\t\t\t'1': { name: 'Values' },\r\n\t\t},\r\n\t},\r\n};\r\n\r\nconst keysStyleSheet: KeysDict = {\r\n\t'0': { name: 'Font' },\r\n\t'1': { name: 'FontSize' },\r\n\t'2': { name: 'FauxBold' },\r\n\t'3': { name: 'FauxItalic' },\r\n\t'4': { name: 'AutoLeading' },\r\n\t'5': { name: 'Leading' },\r\n\t'6': { name: 'HorizontalScale' },\r\n\t'7': { name: 'VerticalScale' },\r\n\t'8': { name: 'Tracking' },\r\n\t'9': { name: 'BaselineShift' },\r\n\t// '10': ???\r\n\t'11': { name: 'Kerning?' }, // different value than EngineData (0 - numerical value, 1 - metric, 2 - optical)\r\n\t'12': { name: 'FontCaps' },\r\n\t'13': { name: 'FontBaseline' },\r\n\r\n\t'15': { name: 'Strikethrough?' }, // number instead of bool\r\n\t'16': { name: 'Underline?' }, // number instead of bool\r\n\r\n\t'18': { name: 'Ligatures' },\r\n\t'19': { name: 'DLigatures' },\r\n\t// '20': ???\r\n\t// '21': ???\r\n\t// '22': ???\r\n\t'23': { name: 'Fractions' }, // not present in EngineData\r\n\t'24': { name: 'Ordinals' }, // not present in EngineData\r\n\t// '25': ???\r\n\t// '26': ???\r\n\t// '27': ???\r\n\t'28': { name: 'StylisticAlternates' }, // not present in EngineData\r\n\t// '29': ???\r\n\t'30': { name: 'OldStyle?' }, // OpenType > OldStyle, number instead of bool, not present in EngineData\r\n\r\n\t'35': { name: 'BaselineDirection' },\r\n\r\n\t'38': { name: 'Language' },\r\n\r\n\t'52': { name: 'NoBreak' },\r\n\t'53': { name: 'FillColor', children: keysColor },\r\n\t'54': { name: 'StrokeColor', children: keysColor },\r\n\t'55': { children: { '99': { uproot: true } } },\r\n\r\n\t// '68': ???\r\n\r\n\t// '70': ???\r\n\t// '71': ???\r\n\t// '72': ???\r\n\t// '73': ???\r\n\r\n\t'79': { children: keysColor },\r\n\r\n\t// '85': ???\r\n\r\n\t// '87': ???\r\n\t// '88': ???\r\n};\r\n\r\nconst keysParagraph: KeysDict = {\r\n\t'0': { name: 'Justification' },\r\n\t'1': { name: 'FirstLineIndent' },\r\n\t'2': { name: 'StartIndent' },\r\n\t'3': { name: 'EndIndent' },\r\n\t'4': { name: 'SpaceBefore' },\r\n\t'5': { name: 'SpaceAfter' },\r\n\r\n\t'7': { name: 'AutoLeading' },\r\n\r\n\t'9': { name: 'AutoHyphenate' },\r\n\t'10': { name: 'HyphenatedWordSize' },\r\n\t'11': { name: 'PreHyphen' },\r\n\t'12': { name: 'PostHyphen' },\r\n\t'13': { name: 'ConsecutiveHyphens?' }, // different value than EngineData\r\n\t'14': { name: 'Zone' },\r\n\t'15': { name: 'HypenateCapitalizedWords' }, // not present in EngineData\r\n\r\n\t'17': { name: 'WordSpacing' },\r\n\t'18': { name: 'LetterSpacing' },\r\n\t'19': { name: 'GlyphSpacing' },\r\n\r\n\t'32': { name: 'StyleSheet', children: keysStyleSheet },\r\n};\r\n\r\nconst keysStyleSheetData: KeysDict[''] = {\r\n\tname: 'StyleSheetData',\r\n\tchildren: keysStyleSheet,\r\n};\r\n\r\nconst keysRoot: KeysDict = {\r\n\t'0': {\r\n\t\tname: 'ResourceDict',\r\n\t\tchildren: {\r\n\t\t\t'1': {\r\n\t\t\t\tname: 'FontSet',\r\n\t\t\t\tchildren: {\r\n\t\t\t\t\t'0': {\r\n\t\t\t\t\t\tuproot: true,\r\n\t\t\t\t\t\tchildren: {\r\n\t\t\t\t\t\t\t'0': {\r\n\t\t\t\t\t\t\t\tuproot: true,\r\n\t\t\t\t\t\t\t\tchildren: {\r\n\t\t\t\t\t\t\t\t\t'0': {\r\n\t\t\t\t\t\t\t\t\t\tuproot: true,\r\n\t\t\t\t\t\t\t\t\t\tchildren: {\r\n\t\t\t\t\t\t\t\t\t\t\t'0': { name: 'Name' },\r\n\t\t\t\t\t\t\t\t\t\t\t'2': { name: 'FontType' },\r\n\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\t'2': {\r\n\t\t\t\tname: '2',\r\n\t\t\t\tchildren: {},\r\n\t\t\t},\r\n\t\t\t'3': {\r\n\t\t\t\tname: 'MojiKumiSet',\r\n\t\t\t\tchildren: {\r\n\t\t\t\t\t'0': {\r\n\t\t\t\t\t\tuproot: true,\r\n\t\t\t\t\t\tchildren: {\r\n\t\t\t\t\t\t\t'0': {\r\n\t\t\t\t\t\t\t\tuproot: true,\r\n\t\t\t\t\t\t\t\tchildren: {\r\n\t\t\t\t\t\t\t\t\t'0': { name: 'InternalName' },\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\t'4': {\r\n\t\t\t\tname: 'KinsokuSet',\r\n\t\t\t\tchildren: {\r\n\t\t\t\t\t'0': {\r\n\t\t\t\t\t\tuproot: true,\r\n\t\t\t\t\t\tchildren: {\r\n\t\t\t\t\t\t\t'0': {\r\n\t\t\t\t\t\t\t\tuproot: true,\r\n\t\t\t\t\t\t\t\tchildren: {\r\n\t\t\t\t\t\t\t\t\t'0': { name: 'Name' },\r\n\t\t\t\t\t\t\t\t\t'5': {\r\n\t\t\t\t\t\t\t\t\t\tuproot: true,\r\n\t\t\t\t\t\t\t\t\t\tchildren: {\r\n\t\t\t\t\t\t\t\t\t\t\t'0': { name: 'NoStart' },\r\n\t\t\t\t\t\t\t\t\t\t\t'1': { name: 'NoEnd' },\r\n\t\t\t\t\t\t\t\t\t\t\t'2': { name: 'Keep' },\r\n\t\t\t\t\t\t\t\t\t\t\t'3': { name: 'Hanging' },\r\n\t\t\t\t\t\t\t\t\t\t\t'4': { name: 'Name' },\r\n\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\t'5': {\r\n\t\t\t\tname: 'StyleSheetSet',\r\n\t\t\t\tchildren: {\r\n\t\t\t\t\t'0': {\r\n\t\t\t\t\t\tuproot: true,\r\n\t\t\t\t\t\tchildren: {\r\n\t\t\t\t\t\t\t'0': {\r\n\t\t\t\t\t\t\t\tuproot: true,\r\n\t\t\t\t\t\t\t\tchildren: {\r\n\t\t\t\t\t\t\t\t\t'0': { name: 'Name' },\r\n\t\t\t\t\t\t\t\t\t'6': keysStyleSheetData,\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\t'6': {\r\n\t\t\t\tname: 'ParagraphSheetSet',\r\n\t\t\t\tchildren: {\r\n\t\t\t\t\t'0': {\r\n\t\t\t\t\t\tuproot: true,\r\n\t\t\t\t\t\tchildren: {\r\n\t\t\t\t\t\t\t'0': {\r\n\t\t\t\t\t\t\t\tuproot: true,\r\n\t\t\t\t\t\t\t\tchildren: {\r\n\t\t\t\t\t\t\t\t\t'0': { name: 'Name' },\r\n\t\t\t\t\t\t\t\t\t'5': {\r\n\t\t\t\t\t\t\t\t\t\tname: 'Properties',\r\n\t\t\t\t\t\t\t\t\t\tchildren: keysParagraph,\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t'6': { name: 'DefaultStyleSheet' },\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\t'8': {\r\n\t\t\t\tname: 'TextFrameSet',\r\n\t\t\t\tchildren: {\r\n\t\t\t\t\t'0': {\r\n\t\t\t\t\t\tuproot: true,\r\n\t\t\t\t\t\tchildren: {\r\n\t\t\t\t\t\t\t'0': {\r\n\t\t\t\t\t\t\t\tname: 'path',\r\n\t\t\t\t\t\t\t\tchildren: {\r\n\t\t\t\t\t\t\t\t\t'0': { name: 'name' },\r\n\t\t\t\t\t\t\t\t\t'1': {\r\n\t\t\t\t\t\t\t\t\t\tname: 'bezierCurve',\r\n\t\t\t\t\t\t\t\t\t\tchildren: {\r\n\t\t\t\t\t\t\t\t\t\t\t'0': { name: 'controlPoints' },\r\n\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t'2': {\r\n\t\t\t\t\t\t\t\t\t\tname: 'data',\r\n\t\t\t\t\t\t\t\t\t\tchildren: {\r\n\t\t\t\t\t\t\t\t\t\t\t'0': { name: 'type' },\r\n\t\t\t\t\t\t\t\t\t\t\t'1': { name: 'orientation' },\r\n\t\t\t\t\t\t\t\t\t\t\t'2': { name: 'frameMatrix' },\r\n\t\t\t\t\t\t\t\t\t\t\t'4': { name: '4' },\r\n\t\t\t\t\t\t\t\t\t\t\t'6': { name: 'textRange' },\r\n\t\t\t\t\t\t\t\t\t\t\t'7': { name: 'rowGutter' },\r\n\t\t\t\t\t\t\t\t\t\t\t'8': { name: 'columnGutter' },\r\n\t\t\t\t\t\t\t\t\t\t\t'9': { name: '9' },\r\n\t\t\t\t\t\t\t\t\t\t\t'10': {\r\n\t\t\t\t\t\t\t\t\t\t\t\tname: 'baselineAlignment',\r\n\t\t\t\t\t\t\t\t\t\t\t\tchildren: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t'0': { name: 'flag' },\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t'1': { name: 'min' },\r\n\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t'11': {\r\n\t\t\t\t\t\t\t\t\t\t\t\tname: 'pathData',\r\n\t\t\t\t\t\t\t\t\t\t\t\tchildren: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t'1': { name: '1' },\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t'0': { name: 'reversed' },\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t'2': { name: '2' },\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t'3': { name: '3' },\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t'4': { name: 'spacing' },\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t'5': { name: '5' },\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t'6': { name: '6' },\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t'7': { name: '7' },\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t'18': { name: '18' },\r\n\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t'12': { name: '12' },\r\n\t\t\t\t\t\t\t\t\t\t\t'13': { name: '13' },\r\n\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t'3': { name: '3' },\r\n\t\t\t\t\t\t\t\t\t'97': { name: 'uuid' },\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\t'9': {\r\n\t\t\t\tname: 'Predefined',\r\n\t\t\t\tchildren: {\r\n\t\t\t\t\t'0': {\r\n\t\t\t\t\t\tchildren: { '0': { uproot: true } },\r\n\t\t\t\t\t},\r\n\t\t\t\t\t'1': {\r\n\t\t\t\t\t\tchildren: { '0': { uproot: true } },\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t},\r\n\t},\r\n\t'1': {\r\n\t\tname: 'EngineDict',\r\n\t\tchildren: {\r\n\t\t\t'0': {\r\n\t\t\t\tname: '0',\r\n\t\t\t\tchildren: {\r\n\t\t\t\t\t// 0: ???\r\n\t\t\t\t\t// 1: ???\r\n\t\t\t\t\t// 2: ???\r\n\t\t\t\t\t'3': { name: 'SuperscriptSize' },\r\n\t\t\t\t\t'4': { name: 'SuperscriptPosition' },\r\n\t\t\t\t\t'5': { name: 'SubscriptSize' },\r\n\t\t\t\t\t'6': { name: 'SubscriptPosition' },\r\n\t\t\t\t\t'7': { name: 'SmallCapSize' },\r\n\t\t\t\t\t'8': { name: 'UseFractionalGlyphWidths' }, // ???\r\n\r\n\t\t\t\t\t'15': { children: { '0': { uproot: true } } },\r\n\t\t\t\t\t// 16: ???\r\n\t\t\t\t\t// 17: ???\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\t'1': {\r\n\t\t\t\tname: 'Editors?', // layer.text.index is specifying the index of the editor related to the layer\r\n\t\t\t\tchildren: {\r\n\t\t\t\t\t'0': {\r\n\t\t\t\t\t\tname: 'Editor',\r\n\t\t\t\t\t\tchildren: {\r\n\t\t\t\t\t\t\t'0': { name: 'Text' },\r\n\t\t\t\t\t\t\t'5': {\r\n\t\t\t\t\t\t\t\tname: 'ParagraphRun',\r\n\t\t\t\t\t\t\t\tchildren: {\r\n\t\t\t\t\t\t\t\t\t'0': {\r\n\t\t\t\t\t\t\t\t\t\tname: 'RunArray',\r\n\t\t\t\t\t\t\t\t\t\tchildren: {\r\n\t\t\t\t\t\t\t\t\t\t\t'0': {\r\n\t\t\t\t\t\t\t\t\t\t\t\tname: 'ParagraphSheet',\r\n\t\t\t\t\t\t\t\t\t\t\t\tchildren: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t'0': {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tuproot: true,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tchildren: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'0': { name: '0' },\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'5': {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: '5',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchildren: keysParagraph,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'6': { name: '6' },\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t'1': { name: 'RunLength' },\r\n\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t'6': {\r\n\t\t\t\t\t\t\t\tname: 'StyleRun',\r\n\t\t\t\t\t\t\t\tchildren: {\r\n\t\t\t\t\t\t\t\t\t'0': {\r\n\t\t\t\t\t\t\t\t\t\tname: 'RunArray',\r\n\t\t\t\t\t\t\t\t\t\tchildren: {\r\n\t\t\t\t\t\t\t\t\t\t\t'0': {\r\n\t\t\t\t\t\t\t\t\t\t\t\tname: 'StyleSheet',\r\n\t\t\t\t\t\t\t\t\t\t\t\tchildren: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t'0': {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tuproot: true,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tchildren: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'6': keysStyleSheetData,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t'1': { name: 'RunLength' },\r\n\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n\t\t\t\t\t'1': {\r\n\t\t\t\t\t\tname: 'FontVectorData ???',\r\n\t\t\t\t\t\t// children: {\r\n\t\t\t\t\t\t// \t'0': {},\r\n\t\t\t\t\t\t// \t'2': {\r\n\t\t\t\t\t\t// \t\t// '5'\r\n\t\t\t\t\t\t// \t\t// '6'\r\n\t\t\t\t\t\t// \t},\r\n\t\t\t\t\t\t// }\r\n\t\t\t\t\t\t//     \"1\": [ // this is probably bounding box? there seem to be many of them nested\r\n\t\t\t\t\t\t//       0,\r\n\t\t\t\t\t\t//       0,\r\n\t\t\t\t\t\t//       999,\r\n\t\t\t\t\t\t//       176.30014\r\n\t\t\t\t\t\t//     ],\r\n\t\t\t\t\t\t// various types: /PC, /F, /R, /L, /S, /G\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\t'2': {\r\n\t\t\t\tname: 'StyleSheet',\r\n\t\t\t\tchildren: keysStyleSheet,\r\n\t\t\t},\r\n\t\t\t'3': {\r\n\t\t\t\tname: 'ParagraphSheet',\r\n\t\t\t\tchildren: keysParagraph,\r\n\t\t\t},\r\n\t\t},\r\n\t},\r\n};\r\n\r\nfunction decodeObj(obj: any, keys: KeysDict): any {\r\n\tif (obj === null) return obj;\r\n\tif (Array.isArray(obj)) return obj.map(x => decodeObj(x, keys));\r\n\tif (typeof obj !== 'object') return obj;\r\n\r\n\tlet result: any = {};\r\n\r\n\tfor (const key of Object.keys(obj)) {\r\n\t\tif (keys[key]) {\r\n\t\t\tif (keys[key].uproot) {\r\n\t\t\t\tif (key !== '99') result = decodeObj(obj[key], keys[key].children ?? {});\r\n\t\t\t\tif (obj['99']) result._type = obj['99'];\r\n\t\t\t\tbreak;\r\n\t\t\t} else {\r\n\t\t\t\tresult[keys[key].name || key] = decodeObj(obj[key], keys[key].children ?? {});\r\n\t\t\t}\r\n\t\t} else if (key === '99') {\r\n\t\t\tresult._type = obj[key];\r\n\t\t} else {\r\n\t\t\tresult[key] = decodeObj(obj[key], {});\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\nexport function decodeEngineData2(data: any): GlobalEngineData {\r\n\treturn decodeObj(data, keysRoot);\r\n}\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.readAbr = void 0;\r\nvar descriptor_1 = require(\"./descriptor\");\r\nvar psdReader_1 = require(\"./psdReader\");\r\nvar dynamicsControl = ['off', 'fade', 'pen pressure', 'pen tilt', 'stylus wheel', 'initial direction', 'direction', 'initial rotation', 'rotation'];\r\nvar toBrushType = {\r\n    _: 'brush',\r\n    MixB: 'mixer brush',\r\n    SmTl: 'smudge brush',\r\n    // PbTl\r\n    // ErTl\r\n};\r\nfunction parseDynamics(desc) {\r\n    return {\r\n        control: dynamicsControl[desc.bVTy],\r\n        steps: desc.fStp,\r\n        jitter: (0, descriptor_1.parsePercent)(desc.jitter),\r\n        minimum: (0, descriptor_1.parsePercent)(desc['Mnm ']),\r\n    };\r\n}\r\nfunction parseBrushShape(desc) {\r\n    var shape = {\r\n        size: (0, descriptor_1.parseUnitsToNumber)(desc.Dmtr, 'Pixels'),\r\n        angle: (0, descriptor_1.parseAngle)(desc.Angl),\r\n        roundness: (0, descriptor_1.parsePercent)(desc.Rndn),\r\n        spacingOn: desc.Intr,\r\n        spacing: (0, descriptor_1.parsePercent)(desc.Spcn),\r\n        flipX: desc.flipX,\r\n        flipY: desc.flipY,\r\n    };\r\n    if (desc['Nm  '])\r\n        shape.name = desc['Nm  '];\r\n    if (desc.Hrdn)\r\n        shape.hardness = (0, descriptor_1.parsePercent)(desc.Hrdn);\r\n    if (desc.sampledData)\r\n        shape.sampledData = desc.sampledData;\r\n    return shape;\r\n}\r\nfunction readAbr(buffer, options) {\r\n    var _a, _b, _c, _d;\r\n    if (options === void 0) { options = {}; }\r\n    var reader = (0, psdReader_1.createReader)(buffer.buffer, buffer.byteOffset, buffer.byteLength);\r\n    var version = (0, psdReader_1.readInt16)(reader);\r\n    var samples = [];\r\n    var brushes = [];\r\n    var patterns = [];\r\n    if (version === 1 || version === 2) {\r\n        throw new Error(\"Unsupported ABR version (\".concat(version, \")\")); // TODO: ...\r\n    }\r\n    else if (version === 6 || version === 7 || version === 9 || version === 10) {\r\n        var minorVersion = (0, psdReader_1.readInt16)(reader);\r\n        if (minorVersion !== 1 && minorVersion !== 2)\r\n            throw new Error('Unsupported ABR minor version');\r\n        while (reader.offset < reader.view.byteLength) {\r\n            (0, psdReader_1.checkSignature)(reader, '8BIM');\r\n            var type = (0, psdReader_1.readSignature)(reader);\r\n            var size = (0, psdReader_1.readUint32)(reader);\r\n            var end = reader.offset + size;\r\n            switch (type) {\r\n                case 'samp': {\r\n                    while (reader.offset < end) {\r\n                        var brushLength = (0, psdReader_1.readUint32)(reader);\r\n                        while (brushLength & 3)\r\n                            brushLength++; // pad to 4 byte alignment\r\n                        var brushEnd = reader.offset + brushLength;\r\n                        var id = (0, psdReader_1.readPascalString)(reader, 1);\r\n                        // v1 - Skip the Int16 bounds rectangle and the unknown Int16.\r\n                        // v2 - Skip the unknown bytes.\r\n                        (0, psdReader_1.skipBytes)(reader, minorVersion === 1 ? 10 : 264);\r\n                        var y = (0, psdReader_1.readInt32)(reader);\r\n                        var x = (0, psdReader_1.readInt32)(reader);\r\n                        var h = (0, psdReader_1.readInt32)(reader) - y;\r\n                        var w = (0, psdReader_1.readInt32)(reader) - x;\r\n                        if (w <= 0 || h <= 0)\r\n                            throw new Error('Invalid bounds');\r\n                        var bithDepth = (0, psdReader_1.readInt16)(reader);\r\n                        var compression = (0, psdReader_1.readUint8)(reader); // 0 - raw, 1 - RLE\r\n                        var alpha = new Uint8Array(w * h);\r\n                        if (bithDepth === 8) {\r\n                            if (compression === 0) {\r\n                                alpha.set((0, psdReader_1.readBytes)(reader, alpha.byteLength));\r\n                            }\r\n                            else if (compression === 1) {\r\n                                (0, psdReader_1.readDataRLE)(reader, { width: w, height: h, data: alpha }, w, h, bithDepth, 1, [0], false);\r\n                            }\r\n                            else {\r\n                                throw new Error('Invalid compression');\r\n                            }\r\n                        }\r\n                        else if (bithDepth === 16) {\r\n                            if (compression === 0) {\r\n                                for (var i = 0; i < alpha.byteLength; i++) {\r\n                                    alpha[i] = (0, psdReader_1.readUint16)(reader) >> 8; // convert to 8bit values\r\n                                }\r\n                            }\r\n                            else if (compression === 1) {\r\n                                throw new Error('not implemented (16bit RLE)'); // TODO: ...\r\n                            }\r\n                            else {\r\n                                throw new Error('Invalid compression');\r\n                            }\r\n                        }\r\n                        else {\r\n                            throw new Error('Invalid depth');\r\n                        }\r\n                        samples.push({ id: id, bounds: { x: x, y: y, w: w, h: h }, alpha: alpha });\r\n                        reader.offset = brushEnd;\r\n                    }\r\n                    break;\r\n                }\r\n                case 'desc': {\r\n                    var desc = (0, descriptor_1.readVersionAndDescriptor)(reader, true);\r\n                    // console.log(require('util').inspect(desc, false, 99, true));\r\n                    for (var _i = 0, _e = desc.Brsh; _i < _e.length; _i++) {\r\n                        var brush = _e[_i];\r\n                        var b = {\r\n                            name: brush['Nm  '],\r\n                            shape: parseBrushShape(brush.Brsh),\r\n                            spacing: (0, descriptor_1.parsePercent)(brush.Spcn),\r\n                            // TODO: brushGroup ???\r\n                            wetEdges: brush.Wtdg,\r\n                            noise: brush.Nose,\r\n                            // TODO: TxtC ??? smoothing / build-up ?\r\n                            // TODO: 'Rpt ' ???\r\n                            useBrushSize: brush.useBrushSize, // ???\r\n                        };\r\n                        if (brush.interpretation != null)\r\n                            b.interpretation = brush.interpretation;\r\n                        if (brush.protectTexture != null)\r\n                            b.protectTexture = brush.protectTexture;\r\n                        if (brush.useTipDynamics) {\r\n                            b.shapeDynamics = {\r\n                                tiltScale: (0, descriptor_1.parsePercent)(brush.tiltScale),\r\n                                sizeDynamics: parseDynamics(brush.szVr),\r\n                                angleDynamics: parseDynamics(brush.angleDynamics),\r\n                                roundnessDynamics: parseDynamics(brush.roundnessDynamics),\r\n                                flipX: brush.flipX,\r\n                                flipY: brush.flipY,\r\n                                brushProjection: brush.brushProjection,\r\n                                minimumDiameter: (0, descriptor_1.parsePercent)(brush.minimumDiameter),\r\n                                minimumRoundness: (0, descriptor_1.parsePercent)(brush.minimumRoundness),\r\n                            };\r\n                        }\r\n                        if (brush.useScatter) {\r\n                            b.scatter = {\r\n                                count: brush['Cnt '],\r\n                                bothAxes: brush.bothAxes,\r\n                                countDynamics: parseDynamics(brush.countDynamics),\r\n                                scatterDynamics: parseDynamics(brush.scatterDynamics),\r\n                            };\r\n                        }\r\n                        if (brush.useTexture && brush.Txtr) {\r\n                            b.texture = {\r\n                                id: brush.Txtr.Idnt,\r\n                                name: brush.Txtr['Nm  '],\r\n                                blendMode: descriptor_1.BlnM.decode(brush.textureBlendMode),\r\n                                depth: (0, descriptor_1.parsePercent)(brush.textureDepth),\r\n                                depthMinimum: (0, descriptor_1.parsePercent)(brush.minimumDepth),\r\n                                depthDynamics: parseDynamics(brush.textureDepthDynamics),\r\n                                scale: (0, descriptor_1.parsePercent)(brush.textureScale),\r\n                                invert: brush.InvT,\r\n                                brightness: brush.textureBrightness,\r\n                                contrast: brush.textureContrast,\r\n                            };\r\n                        }\r\n                        var db = brush.dualBrush;\r\n                        if (db && db.useDualBrush) {\r\n                            b.dualBrush = {\r\n                                flip: db.Flip,\r\n                                shape: parseBrushShape(db.Brsh),\r\n                                blendMode: descriptor_1.BlnM.decode(db.BlnM),\r\n                                useScatter: db.useScatter,\r\n                                spacing: (0, descriptor_1.parsePercent)(db.Spcn),\r\n                                count: db['Cnt '],\r\n                                bothAxes: db.bothAxes,\r\n                                countDynamics: parseDynamics(db.countDynamics),\r\n                                scatterDynamics: parseDynamics(db.scatterDynamics),\r\n                            };\r\n                        }\r\n                        if (brush.useColorDynamics) {\r\n                            b.colorDynamics = {\r\n                                foregroundBackground: parseDynamics(brush.clVr),\r\n                                hue: (0, descriptor_1.parsePercent)(brush['H   ']),\r\n                                saturation: (0, descriptor_1.parsePercent)(brush.Strt),\r\n                                brightness: (0, descriptor_1.parsePercent)(brush.Brgh),\r\n                                purity: (0, descriptor_1.parsePercent)(brush.purity),\r\n                                perTip: brush.colorDynamicsPerTip,\r\n                            };\r\n                        }\r\n                        if (brush.usePaintDynamics) {\r\n                            b.transfer = {\r\n                                flowDynamics: parseDynamics(brush.prVr),\r\n                                opacityDynamics: parseDynamics(brush.opVr),\r\n                                wetnessDynamics: parseDynamics(brush.wtVr),\r\n                                mixDynamics: parseDynamics(brush.mxVr),\r\n                            };\r\n                        }\r\n                        if (brush.useBrushPose) {\r\n                            b.brushPose = {\r\n                                overrideAngle: brush.overridePoseAngle,\r\n                                overrideTiltX: brush.overridePoseTiltX,\r\n                                overrideTiltY: brush.overridePoseTiltY,\r\n                                overridePressure: brush.overridePosePressure,\r\n                                pressure: (0, descriptor_1.parsePercent)(brush.brushPosePressure),\r\n                                tiltX: brush.brushPoseTiltX,\r\n                                tiltY: brush.brushPoseTiltY,\r\n                                angle: brush.brushPoseAngle,\r\n                            };\r\n                        }\r\n                        var to = brush.toolOptions;\r\n                        if (to) {\r\n                            b.toolOptions = {\r\n                                type: toBrushType[to._classID] || 'brush',\r\n                                brushPreset: to.brushPreset,\r\n                                flow: (_a = to.flow) !== null && _a !== void 0 ? _a : 100,\r\n                                smooth: (_b = to.Smoo) !== null && _b !== void 0 ? _b : 0,\r\n                                mode: descriptor_1.BlnM.decode(to['Md  '] || 'BlnM.Nrml'),\r\n                                opacity: (_c = to.Opct) !== null && _c !== void 0 ? _c : 100,\r\n                                smoothing: !!to.smoothing,\r\n                                smoothingValue: to.smoothingValue || 0,\r\n                                smoothingRadiusMode: !!to.smoothingRadiusMode,\r\n                                smoothingCatchup: !!to.smoothingCatchup,\r\n                                smoothingCatchupAtEnd: !!to.smoothingCatchupAtEnd,\r\n                                smoothingZoomCompensation: !!to.smoothingZoomCompensation,\r\n                                pressureSmoothing: !!to.pressureSmoothing,\r\n                                usePressureOverridesSize: !!to.usePressureOverridesSize,\r\n                                usePressureOverridesOpacity: !!to.usePressureOverridesOpacity,\r\n                                useLegacy: !!to.useLegacy,\r\n                            };\r\n                            if (to.prVr)\r\n                                b.toolOptions.flowDynamics = parseDynamics(to.prVr);\r\n                            if (to.opVr)\r\n                                b.toolOptions.opacityDynamics = parseDynamics(to.opVr);\r\n                            if (to.szVr)\r\n                                b.toolOptions.sizeDynamics = parseDynamics(to.szVr);\r\n                            if ('wetness' in to)\r\n                                b.toolOptions.wetness = to.wetness;\r\n                            if ('dryness' in to)\r\n                                b.toolOptions.dryness = to.dryness;\r\n                            if ('mix' in to)\r\n                                b.toolOptions.mix = to.mix;\r\n                            if ('autoFill' in to)\r\n                                b.toolOptions.autoFill = to.autoFill;\r\n                            if ('autoClean' in to)\r\n                                b.toolOptions.autoClean = to.autoClean;\r\n                            if ('loadSolidColorOnly' in to)\r\n                                b.toolOptions.loadSolidColorOnly = to.loadSolidColorOnly;\r\n                            if ('sampleAllLayers' in to)\r\n                                b.toolOptions.sampleAllLayers = to.sampleAllLayers;\r\n                            if ('SmdF' in to)\r\n                                b.toolOptions.smudgeFingerPainting = to.SmdF;\r\n                            if ('SmdS' in to)\r\n                                b.toolOptions.smudgeSampleAllLayers = to.SmdS;\r\n                            if ('Prs ' in to)\r\n                                b.toolOptions.strength = to['Prs '];\r\n                            if ('SmdF' in to)\r\n                                b.toolOptions.smudgeFingerPainting = to.SmdF;\r\n                            if ('SmdS' in to)\r\n                                b.toolOptions.smudgeSampleAllLayers = to.SmdS;\r\n                        }\r\n                        brushes.push(b);\r\n                    }\r\n                    break;\r\n                }\r\n                case 'patt': {\r\n                    if (reader.offset < end) { // TODO: check multiple patterns\r\n                        patterns.push((0, psdReader_1.readPattern)(reader));\r\n                        reader.offset = end;\r\n                    }\r\n                    break;\r\n                }\r\n                case 'phry': {\r\n                    // TODO: what is this ?\r\n                    var desc = (0, descriptor_1.readVersionAndDescriptor)(reader);\r\n                    if (options.logMissingFeatures) {\r\n                        if ((_d = desc.hierarchy) === null || _d === void 0 ? void 0 : _d.length) {\r\n                            console.log('unhandled phry section', desc);\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                default:\r\n                    throw new Error(\"Invalid brush type: \".concat(type));\r\n            }\r\n            // align to 4 bytes\r\n            while (size % 4) {\r\n                reader.offset++;\r\n                size++;\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        throw new Error(\"Unsupported ABR version (\".concat(version, \")\"));\r\n    }\r\n    return { samples: samples, patterns: patterns, brushes: brushes };\r\n}\r\nexports.readAbr = readAbr;\r\n//# sourceMappingURL=abr.js.map","import { BlnM, DescriptorUnitsValue, parseAngle, parsePercent, parseUnitsToNumber, readVersionAndDescriptor } from './descriptor';\r\nimport { BlendMode, PatternInfo } from './psd';\r\nimport {\r\n\tcheckSignature, createReader, readBytes, readDataRLE, readInt16, readInt32, readPascalString, readPattern,\r\n\treadSignature, readUint16, readUint32, readUint8, skipBytes\r\n} from './psdReader';\r\n\r\nexport interface Abr {\r\n\tbrushes: Brush[];\r\n\tsamples: SampleInfo[];\r\n\tpatterns: PatternInfo[];\r\n}\r\n\r\nexport interface SampleInfo {\r\n\tid: string;\r\n\tbounds: { x: number; y: number; w: number; h: number; };\r\n\talpha: Uint8Array;\r\n}\r\n\r\nexport interface BrushDynamics {\r\n\tcontrol: 'off' | 'fade' | 'pen pressure' | 'pen tilt' | 'stylus wheel' | 'initial direction' | 'direction' | 'initial rotation' | 'rotation';\r\n\tsteps: number; // for fade\r\n\tjitter: number;\r\n\tminimum: number;\r\n}\r\n\r\nconst dynamicsControl = ['off', 'fade', 'pen pressure', 'pen tilt', 'stylus wheel', 'initial direction', 'direction', 'initial rotation', 'rotation'];\r\n\r\nexport interface BrushShape {\r\n\tname?: string;\r\n\tsize: number;\r\n\tangle: number;\r\n\troundness: number;\r\n\thardness?: number;\r\n\tspacingOn: boolean;\r\n\tspacing: number;\r\n\tflipX: boolean;\r\n\tflipY: boolean;\r\n\tsampledData?: string;\r\n}\r\n\r\nexport interface Brush {\r\n\tname: string;\r\n\tshape: BrushShape;\r\n\tshapeDynamics?: {\r\n\t\tsizeDynamics: BrushDynamics;\r\n\t\tminimumDiameter: number;\r\n\t\ttiltScale: number;\r\n\t\tangleDynamics: BrushDynamics; // jitter 0-1 -> 0-360 deg ?\r\n\t\troundnessDynamics: BrushDynamics;\r\n\t\tminimumRoundness: number;\r\n\t\tflipX: boolean;\r\n\t\tflipY: boolean;\r\n\t\tbrushProjection: boolean;\r\n\t};\r\n\tscatter?: {\r\n\t\tbothAxes: boolean;\r\n\t\tscatterDynamics: BrushDynamics;\r\n\t\tcountDynamics: BrushDynamics;\r\n\t\tcount: number;\r\n\t};\r\n\ttexture?: {\r\n\t\tid: string;\r\n\t\tname: string;\r\n\t\tinvert: boolean;\r\n\t\tscale: number;\r\n\t\tbrightness: number;\r\n\t\tcontrast: number;\r\n\t\tblendMode: BlendMode;\r\n\t\tdepth: number;\r\n\t\tdepthMinimum: number;\r\n\t\tdepthDynamics: BrushDynamics;\r\n\t};\r\n\tdualBrush?: {\r\n\t\tflip: boolean;\r\n\t\tshape: BrushShape;\r\n\t\tblendMode: BlendMode;\r\n\t\tuseScatter: boolean;\r\n\t\tspacing: number;\r\n\t\tcount: number;\r\n\t\tbothAxes: boolean;\r\n\t\tcountDynamics: BrushDynamics;\r\n\t\tscatterDynamics: BrushDynamics;\r\n\t};\r\n\tcolorDynamics?: {\r\n\t\tforegroundBackground: BrushDynamics;\r\n\t\thue: number;\r\n\t\tsaturation: number;\r\n\t\tbrightness: number;\r\n\t\tpurity: number;\r\n\t\tperTip: boolean;\r\n\t};\r\n\ttransfer?: {\r\n\t\tflowDynamics: BrushDynamics;\r\n\t\topacityDynamics: BrushDynamics;\r\n\t\twetnessDynamics: BrushDynamics;\r\n\t\tmixDynamics: BrushDynamics;\r\n\t};\r\n\tbrushPose?: {\r\n\t\toverrideAngle: boolean;\r\n\t\toverrideTiltX: boolean;\r\n\t\toverrideTiltY: boolean;\r\n\t\toverridePressure: boolean;\r\n\t\tpressure: number;\r\n\t\ttiltX: number;\r\n\t\ttiltY: number;\r\n\t\tangle: number;\r\n\t};\r\n\tnoise: boolean;\r\n\twetEdges: boolean;\r\n\t// TODO: build-up\r\n\t// TODO: smoothing\r\n\tprotectTexture?: boolean;\r\n\tspacing: number;\r\n\tbrushGroup?: undefined; // ?\r\n\tinterpretation?: boolean; // ?\r\n\tuseBrushSize: boolean; // ?\r\n\ttoolOptions?: {\r\n\t\ttype: 'brush' | 'mixer brush' | 'smudge brush';\r\n\t\tbrushPreset: boolean;\r\n\t\tflow: number; // 0-100\r\n\t\twetness?: number; // 0-100\r\n\t\tdryness?: number; // 0-100\r\n\t\tmix?: number; // 0-100\r\n\t\tsmooth: number; // ?\r\n\t\tmode: BlendMode;\r\n\t\topacity: number; // 0-100\r\n\t\tsmoothing: boolean;\r\n\t\tsmoothingValue: number;\r\n\t\tsmoothingRadiusMode: boolean;\r\n\t\tsmoothingCatchup: boolean;\r\n\t\tsmoothingCatchupAtEnd: boolean;\r\n\t\tsmoothingZoomCompensation: boolean;\r\n\t\tpressureSmoothing: boolean;\r\n\t\tusePressureOverridesSize: boolean;\r\n\t\tusePressureOverridesOpacity: boolean;\r\n\t\tuseLegacy: boolean;\r\n\t\tautoFill?: boolean;\r\n\t\tautoClean?: boolean;\r\n\t\tloadSolidColorOnly?: boolean;\r\n\t\tsampleAllLayers?: boolean;\r\n\t\tflowDynamics?: BrushDynamics;\r\n\t\topacityDynamics?: BrushDynamics;\r\n\t\tsizeDynamics?: BrushDynamics;\r\n\t\tsmudgeFingerPainting?: boolean;\r\n\t\tsmudgeSampleAllLayers?: boolean;\r\n\t\tstrength?: number; // 0-100\r\n\t};\r\n}\r\n\r\n// internal\r\n\r\ninterface PhryDescriptor {\r\n\thierarchy: ({} | {\r\n\t\t'Nm  ': string;\r\n\t\tzuid: string;\r\n\t})[];\r\n}\r\n\r\ninterface DynamicsDescriptor {\r\n\tbVTy: number;\r\n\tfStp: number;\r\n\tjitter: DescriptorUnitsValue;\r\n\t'Mnm ': DescriptorUnitsValue;\r\n}\r\n\r\ninterface BrushShapeDescriptor {\r\n\tDmtr: DescriptorUnitsValue;\r\n\tAngl: DescriptorUnitsValue;\r\n\tRndn: DescriptorUnitsValue;\r\n\t'Nm  '?: string;\r\n\tSpcn: DescriptorUnitsValue;\r\n\tIntr: boolean;\r\n\tHrdn?: DescriptorUnitsValue;\r\n\tflipX: boolean;\r\n\tflipY: boolean;\r\n\tsampledData?: string;\r\n}\r\n\r\ninterface DescDescriptor {\r\n\tBrsh: {\r\n\t\t'Nm  ': string;\r\n\t\tBrsh: BrushShapeDescriptor;\r\n\t\tuseTipDynamics: boolean;\r\n\t\tflipX: boolean;\r\n\t\tflipY: boolean;\r\n\t\tbrushProjection: boolean;\r\n\t\tminimumDiameter: DescriptorUnitsValue;\r\n\t\tminimumRoundness: DescriptorUnitsValue;\r\n\t\ttiltScale: DescriptorUnitsValue;\r\n\t\tszVr: DynamicsDescriptor;\r\n\t\tangleDynamics: DynamicsDescriptor;\r\n\t\troundnessDynamics: DynamicsDescriptor;\r\n\t\tuseScatter: boolean;\r\n\t\tSpcn: DescriptorUnitsValue;\r\n\t\t'Cnt ': number;\r\n\t\tbothAxes: boolean;\r\n\t\tcountDynamics: DynamicsDescriptor;\r\n\t\tscatterDynamics: DynamicsDescriptor;\r\n\t\tdualBrush: { useDualBrush: false; } | {\r\n\t\t\tuseDualBrush: true;\r\n\t\t\tFlip: boolean;\r\n\t\t\tBrsh: BrushShapeDescriptor;\r\n\t\t\tBlnM: string;\r\n\t\t\tuseScatter: boolean;\r\n\t\t\tSpcn: DescriptorUnitsValue;\r\n\t\t\t'Cnt ': number;\r\n\t\t\tbothAxes: boolean;\r\n\t\t\tcountDynamics: DynamicsDescriptor;\r\n\t\t\tscatterDynamics: DynamicsDescriptor;\r\n\t\t};\r\n\t\tbrushGroup: { useBrushGroup: false; };\r\n\t\tuseTexture: boolean;\r\n\t\tTxtC: boolean;\r\n\t\tinterpretation: boolean;\r\n\t\ttextureBlendMode: string;\r\n\t\ttextureDepth: DescriptorUnitsValue;\r\n\t\tminimumDepth: DescriptorUnitsValue;\r\n\t\ttextureDepthDynamics: DynamicsDescriptor;\r\n\t\tTxtr?: {\r\n\t\t\t'Nm  ': string;\r\n\t\t\tIdnt: string;\r\n\t\t};\r\n\t\ttextureScale: DescriptorUnitsValue;\r\n\t\tInvT: boolean;\r\n\t\tprotectTexture: boolean;\r\n\t\ttextureBrightness: number;\r\n\t\ttextureContrast: number;\r\n\t\tusePaintDynamics: boolean;\r\n\t\tprVr?: DynamicsDescriptor;\r\n\t\topVr?: DynamicsDescriptor;\r\n\t\twtVr?: DynamicsDescriptor;\r\n\t\tmxVr?: DynamicsDescriptor;\r\n\t\tuseColorDynamics: boolean;\r\n\t\tclVr?: DynamicsDescriptor;\r\n\t\t'H   '?: DescriptorUnitsValue;\r\n\t\tStrt?: DescriptorUnitsValue;\r\n\t\tBrgh?: DescriptorUnitsValue;\r\n\t\tpurity?: DescriptorUnitsValue;\r\n\t\tcolorDynamicsPerTip?: true;\r\n\t\tWtdg: boolean;\r\n\t\tNose: boolean;\r\n\t\t'Rpt ': boolean;\r\n\t\tuseBrushSize: boolean;\r\n\t\tuseBrushPose: boolean;\r\n\t\toverridePoseAngle?: boolean;\r\n\t\toverridePoseTiltX?: boolean;\r\n\t\toverridePoseTiltY?: boolean;\r\n\t\toverridePosePressure?: boolean;\r\n\t\tbrushPosePressure?: DescriptorUnitsValue;\r\n\t\tbrushPoseTiltX?: number;\r\n\t\tbrushPoseTiltY?: number;\r\n\t\tbrushPoseAngle?: number;\r\n\t\ttoolOptions?: {\r\n\t\t\t_classID: string;\r\n\t\t\tbrushPreset: boolean;\r\n\t\t\tflow?: number;\r\n\t\t\twetness?: number;\r\n\t\t\tdryness?: number;\r\n\t\t\tmix?: number;\r\n\t\t\tSmoo?: number;\r\n\t\t\t'Md  ': string;\r\n\t\t\tOpct?: number;\r\n\t\t\tsmoothing?: boolean;\r\n\t\t\tsmoothingValue?: number;\r\n\t\t\tsmoothingRadiusMode?: boolean;\r\n\t\t\tsmoothingCatchup?: boolean;\r\n\t\t\tsmoothingCatchupAtEnd?: boolean;\r\n\t\t\tsmoothingZoomCompensation?: boolean;\r\n\t\t\tpressureSmoothing?: boolean;\r\n\t\t\tusePressureOverridesSize?: boolean;\r\n\t\t\tusePressureOverridesOpacity?: boolean;\r\n\t\t\tuseLegacy: boolean;\r\n\t\t\tautoFill?: boolean;\r\n\t\t\tautoClean?: boolean;\r\n\t\t\tloadSolidColorOnly?: boolean;\r\n\t\t\tsampleAllLayers?: boolean;\r\n\t\t\t'Prs '?: number;\r\n\t\t\tMgcE?: boolean; // TODO: ???\r\n\t\t\tErsB?: number; // TODO: ???\r\n\t\t\tprVr?: DynamicsDescriptor;\r\n\t\t\topVr?: DynamicsDescriptor;\r\n\t\t\tszVr?: DynamicsDescriptor;\r\n\t\t\tSmdF?: boolean;\r\n\t\t\tSmdS?: boolean;\r\n\t\t};\r\n\t}[];\r\n}\r\n\r\nconst toBrushType: { [key: string]: 'brush' | 'mixer brush' | 'smudge brush'; } = {\r\n\t_: 'brush',\r\n\tMixB: 'mixer brush',\r\n\tSmTl: 'smudge brush',\r\n\t// PbTl\r\n\t// ErTl\r\n};\r\n\r\nfunction parseDynamics(desc: DynamicsDescriptor): BrushDynamics {\r\n\treturn {\r\n\t\tcontrol: dynamicsControl[desc.bVTy] as any,\r\n\t\tsteps: desc.fStp,\r\n\t\tjitter: parsePercent(desc.jitter),\r\n\t\tminimum: parsePercent(desc['Mnm ']),\r\n\t};\r\n}\r\n\r\nfunction parseBrushShape(desc: BrushShapeDescriptor): BrushShape {\r\n\tconst shape: BrushShape = {\r\n\t\tsize: parseUnitsToNumber(desc.Dmtr, 'Pixels'),\r\n\t\tangle: parseAngle(desc.Angl),\r\n\t\troundness: parsePercent(desc.Rndn),\r\n\t\tspacingOn: desc.Intr,\r\n\t\tspacing: parsePercent(desc.Spcn),\r\n\t\tflipX: desc.flipX,\r\n\t\tflipY: desc.flipY,\r\n\t};\r\n\r\n\tif (desc['Nm  ']) shape.name = desc['Nm  '];\r\n\tif (desc.Hrdn) shape.hardness = parsePercent(desc.Hrdn);\r\n\tif (desc.sampledData) shape.sampledData = desc.sampledData;\r\n\r\n\treturn shape;\r\n}\r\n\r\nexport function readAbr(buffer: ArrayBufferView, options: { logMissingFeatures?: boolean; } = {}): Abr {\r\n\tconst reader = createReader(buffer.buffer, buffer.byteOffset, buffer.byteLength);\r\n\tconst version = readInt16(reader);\r\n\tconst samples: SampleInfo[] = [];\r\n\tconst brushes: Brush[] = [];\r\n\tconst patterns: PatternInfo[] = [];\r\n\r\n\tif (version === 1 || version === 2) {\r\n\t\tthrow new Error(`Unsupported ABR version (${version})`); // TODO: ...\r\n\t} else if (version === 6 || version === 7 || version === 9 || version === 10) {\r\n\t\tconst minorVersion = readInt16(reader);\r\n\t\tif (minorVersion !== 1 && minorVersion !== 2) throw new Error('Unsupported ABR minor version');\r\n\r\n\t\twhile (reader.offset < reader.view.byteLength) {\r\n\t\t\tcheckSignature(reader, '8BIM');\r\n\t\t\tconst type = readSignature(reader) as 'samp' | 'desc' | 'patt' | 'phry';\r\n\t\t\tlet size = readUint32(reader);\r\n\t\t\tconst end = reader.offset + size;\r\n\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase 'samp': {\r\n\t\t\t\t\twhile (reader.offset < end) {\r\n\t\t\t\t\t\tlet brushLength = readUint32(reader);\r\n\t\t\t\t\t\twhile (brushLength & 0b11) brushLength++; // pad to 4 byte alignment\r\n\t\t\t\t\t\tconst brushEnd = reader.offset + brushLength;\r\n\r\n\t\t\t\t\t\tconst id = readPascalString(reader, 1);\r\n\r\n\t\t\t\t\t\t// v1 - Skip the Int16 bounds rectangle and the unknown Int16.\r\n\t\t\t\t\t\t// v2 - Skip the unknown bytes.\r\n\t\t\t\t\t\tskipBytes(reader, minorVersion === 1 ? 10 : 264);\r\n\r\n\t\t\t\t\t\tconst y = readInt32(reader);\r\n\t\t\t\t\t\tconst x = readInt32(reader);\r\n\t\t\t\t\t\tconst h = readInt32(reader) - y;\r\n\t\t\t\t\t\tconst w = readInt32(reader) - x;\r\n\t\t\t\t\t\tif (w <= 0 || h <= 0) throw new Error('Invalid bounds');\r\n\r\n\t\t\t\t\t\tconst bithDepth = readInt16(reader);\r\n\t\t\t\t\t\tconst compression = readUint8(reader); // 0 - raw, 1 - RLE\r\n\t\t\t\t\t\tconst alpha = new Uint8Array(w * h);\r\n\r\n\t\t\t\t\t\tif (bithDepth === 8) {\r\n\t\t\t\t\t\t\tif (compression === 0) {\r\n\t\t\t\t\t\t\t\talpha.set(readBytes(reader, alpha.byteLength));\r\n\t\t\t\t\t\t\t} else if (compression === 1) {\r\n\t\t\t\t\t\t\t\treadDataRLE(reader, { width: w, height: h, data: alpha }, w, h, bithDepth, 1, [0], false);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthrow new Error('Invalid compression');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (bithDepth === 16) {\r\n\t\t\t\t\t\t\tif (compression === 0) {\r\n\t\t\t\t\t\t\t\tfor (let i = 0; i < alpha.byteLength; i++) {\r\n\t\t\t\t\t\t\t\t\talpha[i] = readUint16(reader) >> 8; // convert to 8bit values\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else if (compression === 1) {\r\n\t\t\t\t\t\t\t\tthrow new Error('not implemented (16bit RLE)'); // TODO: ...\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthrow new Error('Invalid compression');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthrow new Error('Invalid depth');\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tsamples.push({ id, bounds: { x, y, w, h }, alpha });\r\n\t\t\t\t\t\treader.offset = brushEnd;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase 'desc': {\r\n\t\t\t\t\tconst desc: DescDescriptor = readVersionAndDescriptor(reader, true);\r\n\t\t\t\t\t// console.log(require('util').inspect(desc, false, 99, true));\r\n\r\n\t\t\t\t\tfor (const brush of desc.Brsh) {\r\n\t\t\t\t\t\tconst b: Brush = {\r\n\t\t\t\t\t\t\tname: brush['Nm  '],\r\n\t\t\t\t\t\t\tshape: parseBrushShape(brush.Brsh),\r\n\t\t\t\t\t\t\tspacing: parsePercent(brush.Spcn),\r\n\t\t\t\t\t\t\t// TODO: brushGroup ???\r\n\t\t\t\t\t\t\twetEdges: brush.Wtdg,\r\n\t\t\t\t\t\t\tnoise: brush.Nose,\r\n\t\t\t\t\t\t\t// TODO: TxtC ??? smoothing / build-up ?\r\n\t\t\t\t\t\t\t// TODO: 'Rpt ' ???\r\n\t\t\t\t\t\t\tuseBrushSize: brush.useBrushSize, // ???\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\tif (brush.interpretation != null) b.interpretation = brush.interpretation;\r\n\t\t\t\t\t\tif (brush.protectTexture != null) b.protectTexture = brush.protectTexture;\r\n\r\n\t\t\t\t\t\tif (brush.useTipDynamics) {\r\n\t\t\t\t\t\t\tb.shapeDynamics = {\r\n\t\t\t\t\t\t\t\ttiltScale: parsePercent(brush.tiltScale),\r\n\t\t\t\t\t\t\t\tsizeDynamics: parseDynamics(brush.szVr),\r\n\t\t\t\t\t\t\t\tangleDynamics: parseDynamics(brush.angleDynamics),\r\n\t\t\t\t\t\t\t\troundnessDynamics: parseDynamics(brush.roundnessDynamics),\r\n\t\t\t\t\t\t\t\tflipX: brush.flipX,\r\n\t\t\t\t\t\t\t\tflipY: brush.flipY,\r\n\t\t\t\t\t\t\t\tbrushProjection: brush.brushProjection,\r\n\t\t\t\t\t\t\t\tminimumDiameter: parsePercent(brush.minimumDiameter),\r\n\t\t\t\t\t\t\t\tminimumRoundness: parsePercent(brush.minimumRoundness),\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (brush.useScatter) {\r\n\t\t\t\t\t\t\tb.scatter = {\r\n\t\t\t\t\t\t\t\tcount: brush['Cnt '],\r\n\t\t\t\t\t\t\t\tbothAxes: brush.bothAxes,\r\n\t\t\t\t\t\t\t\tcountDynamics: parseDynamics(brush.countDynamics),\r\n\t\t\t\t\t\t\t\tscatterDynamics: parseDynamics(brush.scatterDynamics),\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (brush.useTexture && brush.Txtr) {\r\n\t\t\t\t\t\t\tb.texture = {\r\n\t\t\t\t\t\t\t\tid: brush.Txtr.Idnt,\r\n\t\t\t\t\t\t\t\tname: brush.Txtr['Nm  '],\r\n\t\t\t\t\t\t\t\tblendMode: BlnM.decode(brush.textureBlendMode),\r\n\t\t\t\t\t\t\t\tdepth: parsePercent(brush.textureDepth),\r\n\t\t\t\t\t\t\t\tdepthMinimum: parsePercent(brush.minimumDepth),\r\n\t\t\t\t\t\t\t\tdepthDynamics: parseDynamics(brush.textureDepthDynamics),\r\n\t\t\t\t\t\t\t\tscale: parsePercent(brush.textureScale),\r\n\t\t\t\t\t\t\t\tinvert: brush.InvT,\r\n\t\t\t\t\t\t\t\tbrightness: brush.textureBrightness,\r\n\t\t\t\t\t\t\t\tcontrast: brush.textureContrast,\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tconst db = brush.dualBrush;\r\n\t\t\t\t\t\tif (db && db.useDualBrush) {\r\n\t\t\t\t\t\t\tb.dualBrush = {\r\n\t\t\t\t\t\t\t\tflip: db.Flip,\r\n\t\t\t\t\t\t\t\tshape: parseBrushShape(db.Brsh),\r\n\t\t\t\t\t\t\t\tblendMode: BlnM.decode(db.BlnM),\r\n\t\t\t\t\t\t\t\tuseScatter: db.useScatter,\r\n\t\t\t\t\t\t\t\tspacing: parsePercent(db.Spcn),\r\n\t\t\t\t\t\t\t\tcount: db['Cnt '],\r\n\t\t\t\t\t\t\t\tbothAxes: db.bothAxes,\r\n\t\t\t\t\t\t\t\tcountDynamics: parseDynamics(db.countDynamics),\r\n\t\t\t\t\t\t\t\tscatterDynamics: parseDynamics(db.scatterDynamics),\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (brush.useColorDynamics) {\r\n\t\t\t\t\t\t\tb.colorDynamics = {\r\n\t\t\t\t\t\t\t\tforegroundBackground: parseDynamics(brush.clVr!),\r\n\t\t\t\t\t\t\t\thue: parsePercent(brush['H   ']!),\r\n\t\t\t\t\t\t\t\tsaturation: parsePercent(brush.Strt!),\r\n\t\t\t\t\t\t\t\tbrightness: parsePercent(brush.Brgh!),\r\n\t\t\t\t\t\t\t\tpurity: parsePercent(brush.purity!),\r\n\t\t\t\t\t\t\t\tperTip: brush.colorDynamicsPerTip!,\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (brush.usePaintDynamics) {\r\n\t\t\t\t\t\t\tb.transfer = {\r\n\t\t\t\t\t\t\t\tflowDynamics: parseDynamics(brush.prVr!),\r\n\t\t\t\t\t\t\t\topacityDynamics: parseDynamics(brush.opVr!),\r\n\t\t\t\t\t\t\t\twetnessDynamics: parseDynamics(brush.wtVr!),\r\n\t\t\t\t\t\t\t\tmixDynamics: parseDynamics(brush.mxVr!),\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (brush.useBrushPose) {\r\n\t\t\t\t\t\t\tb.brushPose = {\r\n\t\t\t\t\t\t\t\toverrideAngle: brush.overridePoseAngle!,\r\n\t\t\t\t\t\t\t\toverrideTiltX: brush.overridePoseTiltX!,\r\n\t\t\t\t\t\t\t\toverrideTiltY: brush.overridePoseTiltY!,\r\n\t\t\t\t\t\t\t\toverridePressure: brush.overridePosePressure!,\r\n\t\t\t\t\t\t\t\tpressure: parsePercent(brush.brushPosePressure!),\r\n\t\t\t\t\t\t\t\ttiltX: brush.brushPoseTiltX!,\r\n\t\t\t\t\t\t\t\ttiltY: brush.brushPoseTiltY!,\r\n\t\t\t\t\t\t\t\tangle: brush.brushPoseAngle!,\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tconst to = brush.toolOptions;\r\n\t\t\t\t\t\tif (to) {\r\n\t\t\t\t\t\t\tb.toolOptions = {\r\n\t\t\t\t\t\t\t\ttype: toBrushType[to._classID] || 'brush',\r\n\t\t\t\t\t\t\t\tbrushPreset: to.brushPreset,\r\n\t\t\t\t\t\t\t\tflow: to.flow ?? 100,\r\n\t\t\t\t\t\t\t\tsmooth: to.Smoo ?? 0,\r\n\t\t\t\t\t\t\t\tmode: BlnM.decode(to['Md  '] || 'BlnM.Nrml'), // sometimes mode is missing\r\n\t\t\t\t\t\t\t\topacity: to.Opct ?? 100,\r\n\t\t\t\t\t\t\t\tsmoothing: !!to.smoothing,\r\n\t\t\t\t\t\t\t\tsmoothingValue: to.smoothingValue || 0,\r\n\t\t\t\t\t\t\t\tsmoothingRadiusMode: !!to.smoothingRadiusMode,\r\n\t\t\t\t\t\t\t\tsmoothingCatchup: !!to.smoothingCatchup,\r\n\t\t\t\t\t\t\t\tsmoothingCatchupAtEnd: !!to.smoothingCatchupAtEnd,\r\n\t\t\t\t\t\t\t\tsmoothingZoomCompensation: !!to.smoothingZoomCompensation,\r\n\t\t\t\t\t\t\t\tpressureSmoothing: !!to.pressureSmoothing,\r\n\t\t\t\t\t\t\t\tusePressureOverridesSize: !!to.usePressureOverridesSize,\r\n\t\t\t\t\t\t\t\tusePressureOverridesOpacity: !!to.usePressureOverridesOpacity,\r\n\t\t\t\t\t\t\t\tuseLegacy: !!to.useLegacy,\r\n\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\tif (to.prVr) b.toolOptions.flowDynamics = parseDynamics(to.prVr);\r\n\t\t\t\t\t\t\tif (to.opVr) b.toolOptions.opacityDynamics = parseDynamics(to.opVr);\r\n\t\t\t\t\t\t\tif (to.szVr) b.toolOptions.sizeDynamics = parseDynamics(to.szVr);\r\n\t\t\t\t\t\t\tif ('wetness' in to) b.toolOptions.wetness = to.wetness;\r\n\t\t\t\t\t\t\tif ('dryness' in to) b.toolOptions.dryness = to.dryness;\r\n\t\t\t\t\t\t\tif ('mix' in to) b.toolOptions.mix = to.mix;\r\n\t\t\t\t\t\t\tif ('autoFill' in to) b.toolOptions.autoFill = to.autoFill;\r\n\t\t\t\t\t\t\tif ('autoClean' in to) b.toolOptions.autoClean = to.autoClean;\r\n\t\t\t\t\t\t\tif ('loadSolidColorOnly' in to) b.toolOptions.loadSolidColorOnly = to.loadSolidColorOnly;\r\n\t\t\t\t\t\t\tif ('sampleAllLayers' in to) b.toolOptions.sampleAllLayers = to.sampleAllLayers;\r\n\t\t\t\t\t\t\tif ('SmdF' in to) b.toolOptions.smudgeFingerPainting = to.SmdF;\r\n\t\t\t\t\t\t\tif ('SmdS' in to) b.toolOptions.smudgeSampleAllLayers = to.SmdS;\r\n\t\t\t\t\t\t\tif ('Prs ' in to) b.toolOptions.strength = to['Prs '];\r\n\t\t\t\t\t\t\tif ('SmdF' in to) b.toolOptions.smudgeFingerPainting = to.SmdF;\r\n\t\t\t\t\t\t\tif ('SmdS' in to) b.toolOptions.smudgeSampleAllLayers = to.SmdS;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbrushes.push(b);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase 'patt': {\r\n\t\t\t\t\tif (reader.offset < end) { // TODO: check multiple patterns\r\n\t\t\t\t\t\tpatterns.push(readPattern(reader));\r\n\t\t\t\t\t\treader.offset = end;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase 'phry': {\r\n\t\t\t\t\t// TODO: what is this ?\r\n\t\t\t\t\tconst desc: PhryDescriptor = readVersionAndDescriptor(reader);\r\n\t\t\t\t\tif (options.logMissingFeatures) {\r\n\t\t\t\t\t\tif (desc.hierarchy?.length) {\r\n\t\t\t\t\t\t\tconsole.log('unhandled phry section', desc);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(`Invalid brush type: ${type}`);\r\n\t\t\t}\r\n\r\n\t\t\t// align to 4 bytes\r\n\t\t\twhile (size % 4) {\r\n\t\t\t\treader.offset++;\r\n\t\t\t\tsize++;\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\tthrow new Error(`Unsupported ABR version (${version})`);\r\n\t}\r\n\r\n\treturn { samples, patterns, brushes };\r\n}\r\n","\"use strict\";\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.readCsh = void 0;\r\nvar additionalInfo_1 = require(\"./additionalInfo\");\r\nvar psdReader_1 = require(\"./psdReader\");\r\nfunction readCsh(buffer) {\r\n    var reader = (0, psdReader_1.createReader)(buffer.buffer, buffer.byteOffset, buffer.byteLength);\r\n    var csh = { shapes: [] };\r\n    (0, psdReader_1.checkSignature)(reader, 'cush');\r\n    if ((0, psdReader_1.readUint32)(reader) !== 2)\r\n        throw new Error('Invalid version');\r\n    var count = (0, psdReader_1.readUint32)(reader);\r\n    for (var i = 0; i < count; i++) {\r\n        var name_1 = (0, psdReader_1.readUnicodeString)(reader);\r\n        while (reader.offset % 4)\r\n            reader.offset++; // pad to 4byte bounds\r\n        if ((0, psdReader_1.readUint32)(reader) !== 1)\r\n            throw new Error('Invalid shape version');\r\n        var size = (0, psdReader_1.readUint32)(reader);\r\n        var end = reader.offset + size;\r\n        var id = (0, psdReader_1.readPascalString)(reader, 1);\r\n        // this might not be correct ???\r\n        var y1 = (0, psdReader_1.readUint32)(reader);\r\n        var x1 = (0, psdReader_1.readUint32)(reader);\r\n        var y2 = (0, psdReader_1.readUint32)(reader);\r\n        var x2 = (0, psdReader_1.readUint32)(reader);\r\n        var width = x2 - x1;\r\n        var height = y2 - y1;\r\n        var mask = { paths: [] };\r\n        (0, additionalInfo_1.readVectorMask)(reader, mask, width, height, end - reader.offset);\r\n        csh.shapes.push(__assign({ name: name_1, id: id, width: width, height: height }, mask));\r\n        reader.offset = end;\r\n    }\r\n    return csh;\r\n}\r\nexports.readCsh = readCsh;\r\n//# sourceMappingURL=csh.js.map","import { readVectorMask } from './additionalInfo';\r\nimport { LayerVectorMask } from './psd';\r\nimport { readUint32, checkSignature, createReader, readPascalString, readUnicodeString } from './psdReader';\r\n\r\nexport interface Csh {\r\n\tshapes: (LayerVectorMask & {\r\n\t\tname: string;\r\n\t\tid: string;\r\n\t\twidth: number;\r\n\t\theight: number;\r\n\t})[];\r\n}\r\n\r\nexport function readCsh(buffer: ArrayBufferView): Csh {\r\n\tconst reader = createReader(buffer.buffer, buffer.byteOffset, buffer.byteLength);\r\n\tconst csh: Csh = { shapes: [] };\r\n\r\n\tcheckSignature(reader, 'cush');\r\n\tif (readUint32(reader) !== 2) throw new Error('Invalid version');\r\n\tconst count = readUint32(reader);\r\n\r\n\tfor (let i = 0; i < count; i++) {\r\n\t\tconst name = readUnicodeString(reader);\r\n\t\twhile (reader.offset % 4) reader.offset++; // pad to 4byte bounds\r\n\t\tif (readUint32(reader) !== 1) throw new Error('Invalid shape version');\r\n\t\tconst size = readUint32(reader);\r\n\t\tconst end = reader.offset + size;\r\n\t\tconst id = readPascalString(reader, 1);\r\n\t\t// this might not be correct ???\r\n\t\tconst y1 = readUint32(reader);\r\n\t\tconst x1 = readUint32(reader);\r\n\t\tconst y2 = readUint32(reader);\r\n\t\tconst x2 = readUint32(reader);\r\n\t\tconst width = x2 - x1;\r\n\t\tconst height = y2 - y1;\r\n\t\tconst mask: LayerVectorMask = { paths: [] };\r\n\t\treadVectorMask(reader, mask, width, height, end - reader.offset);\r\n\t\tcsh.shapes.push({ name, id, width, height, ...mask });\r\n\r\n\t\treader.offset = end;\r\n\t}\r\n\r\n\treturn csh;\r\n}\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.LayerCompCapturedInfo = exports.SectionDividerType = exports.ColorMode = void 0;\r\nvar ColorMode;\r\n(function (ColorMode) {\r\n    ColorMode[ColorMode[\"Bitmap\"] = 0] = \"Bitmap\";\r\n    ColorMode[ColorMode[\"Grayscale\"] = 1] = \"Grayscale\";\r\n    ColorMode[ColorMode[\"Indexed\"] = 2] = \"Indexed\";\r\n    ColorMode[ColorMode[\"RGB\"] = 3] = \"RGB\";\r\n    ColorMode[ColorMode[\"CMYK\"] = 4] = \"CMYK\";\r\n    ColorMode[ColorMode[\"Multichannel\"] = 7] = \"Multichannel\";\r\n    ColorMode[ColorMode[\"Duotone\"] = 8] = \"Duotone\";\r\n    ColorMode[ColorMode[\"Lab\"] = 9] = \"Lab\";\r\n})(ColorMode = exports.ColorMode || (exports.ColorMode = {}));\r\nvar SectionDividerType;\r\n(function (SectionDividerType) {\r\n    SectionDividerType[SectionDividerType[\"Other\"] = 0] = \"Other\";\r\n    SectionDividerType[SectionDividerType[\"OpenFolder\"] = 1] = \"OpenFolder\";\r\n    SectionDividerType[SectionDividerType[\"ClosedFolder\"] = 2] = \"ClosedFolder\";\r\n    SectionDividerType[SectionDividerType[\"BoundingSectionDivider\"] = 3] = \"BoundingSectionDivider\";\r\n})(SectionDividerType = exports.SectionDividerType || (exports.SectionDividerType = {}));\r\nvar LayerCompCapturedInfo;\r\n(function (LayerCompCapturedInfo) {\r\n    LayerCompCapturedInfo[LayerCompCapturedInfo[\"None\"] = 0] = \"None\";\r\n    LayerCompCapturedInfo[LayerCompCapturedInfo[\"Visibility\"] = 1] = \"Visibility\";\r\n    LayerCompCapturedInfo[LayerCompCapturedInfo[\"Position\"] = 2] = \"Position\";\r\n    LayerCompCapturedInfo[LayerCompCapturedInfo[\"Appearance\"] = 4] = \"Appearance\";\r\n})(LayerCompCapturedInfo = exports.LayerCompCapturedInfo || (exports.LayerCompCapturedInfo = {}));\r\n//# sourceMappingURL=psd.js.map","export type BlendMode = 'pass through' | 'normal' | 'dissolve' | 'darken' | 'multiply' |\n\t'color burn' | 'linear burn' | 'darker color' | 'lighten' | 'screen' | 'color dodge' |\n\t'linear dodge' | 'lighter color' | 'overlay' | 'soft light' | 'hard light' |\n\t'vivid light' | 'linear light' | 'pin light' | 'hard mix' | 'difference' | 'exclusion' |\n\t'subtract' | 'divide' | 'hue' | 'saturation' | 'color' | 'luminosity';\n\nexport const enum ColorMode {\n\tBitmap = 0,\n\tGrayscale = 1,\n\tIndexed = 2,\n\tRGB = 3,\n\tCMYK = 4,\n\tMultichannel = 7,\n\tDuotone = 8,\n\tLab = 9,\n}\n\nexport const enum SectionDividerType {\n\tOther = 0,\n\tOpenFolder = 1,\n\tClosedFolder = 2,\n\tBoundingSectionDivider = 3,\n}\n\nexport type RGBA = { r: number; g: number; b: number; a: number; }; // values from 0 to 255\nexport type RGB = { r: number; g: number; b: number; }; // values from 0 to 255\nexport type FRGB = { fr: number; fg: number; fb: number; }; // values from 0 to 1 (can be above 1, can be negative)\nexport type HSB = { h: number; s: number; b: number; }; // values from 0 to 1\nexport type CMYK = { c: number; m: number; y: number; k: number; }; // values from 0 to 255\nexport type LAB = { l: number; a: number; b: number; }; // values `l` from 0 to 1; `a` and `b` from -1 to 1\nexport type Grayscale = { k: number }; // values from 0 to 255\nexport type Color = RGBA | RGB | FRGB | HSB | CMYK | LAB | Grayscale;\n\nexport interface EffectContour {\n\tname: string;\n\tcurve: { x: number; y: number; }[];\n}\n\nexport interface EffectPattern {\n\tname: string;\n\tid: string;\n\t// TODO: add fields\n}\n\nexport interface LayerEffectShadow {\n\tpresent?: boolean;\n\tshowInDialog?: boolean;\n\tenabled?: boolean;\n\tsize?: UnitsValue;\n\tangle?: number;\n\tdistance?: UnitsValue;\n\tcolor?: Color;\n\tblendMode?: BlendMode;\n\topacity?: number;\n\tuseGlobalLight?: boolean;\n\tantialiased?: boolean;\n\tcontour?: EffectContour;\n\tchoke?: UnitsValue; // spread\n\tlayerConceals?: boolean; // only drop shadow\n}\n\nexport interface LayerEffectsOuterGlow {\n\tpresent?: boolean;\n\tshowInDialog?: boolean;\n\tenabled?: boolean;\n\tsize?: UnitsValue;\n\tcolor?: Color;\n\tblendMode?: BlendMode;\n\topacity?: number;\n\tsource?: GlowSource;\n\tantialiased?: boolean;\n\tnoise?: number;\n\trange?: number;\n\tchoke?: UnitsValue;\n\tjitter?: number;\n\tcontour?: EffectContour;\n}\n\nexport interface LayerEffectInnerGlow {\n\tpresent?: boolean;\n\tshowInDialog?: boolean;\n\tenabled?: boolean;\n\tsize?: UnitsValue;\n\tcolor?: Color;\n\tblendMode?: BlendMode;\n\topacity?: number;\n\tsource?: GlowSource;\n\ttechnique?: GlowTechnique;\n\tantialiased?: boolean;\n\tnoise?: number;\n\trange?: number;\n\tchoke?: UnitsValue; // spread\n\tjitter?: number;\n\tcontour?: EffectContour;\n}\n\nexport interface LayerEffectBevel {\n\tpresent?: boolean;\n\tshowInDialog?: boolean;\n\tenabled?: boolean;\n\tsize?: UnitsValue;\n\tangle?: number;\n\tstrength?: number; // depth\n\thighlightBlendMode?: BlendMode;\n\tshadowBlendMode?: BlendMode;\n\thighlightColor?: Color;\n\tshadowColor?: Color;\n\tstyle?: BevelStyle;\n\thighlightOpacity?: number;\n\tshadowOpacity?: number;\n\tsoften?: UnitsValue;\n\tuseGlobalLight?: boolean;\n\taltitude?: number;\n\ttechnique?: BevelTechnique;\n\tdirection?: BevelDirection;\n\tuseTexture?: boolean;\n\tuseShape?: boolean;\n\tantialiasGloss?: boolean;\n\tcontour?: EffectContour;\n}\n\nexport interface LayerEffectSolidFill {\n\tpresent?: boolean;\n\tshowInDialog?: boolean;\n\tenabled?: boolean;\n\tblendMode?: BlendMode;\n\tcolor?: Color;\n\topacity?: number;\n}\n\nexport interface LayerEffectStroke {\n\tpresent?: boolean;\n\tshowInDialog?: boolean;\n\tenabled?: boolean;\n\toverprint?: boolean;\n\tsize?: UnitsValue;\n\tposition?: 'inside' | 'center' | 'outside';\n\tfillType?: 'color' | 'gradient' | 'pattern';\n\tblendMode?: BlendMode;\n\topacity?: number;\n\tcolor?: Color;\n\tgradient?: (EffectSolidGradient | EffectNoiseGradient) & ExtraGradientInfo;\n\tpattern?: EffectPattern & {}; // TODO: additional pattern info\n}\n\nexport interface LayerEffectSatin {\n\tpresent?: boolean;\n\tshowInDialog?: boolean;\n\tenabled?: boolean;\n\tsize?: UnitsValue;\n\tblendMode?: BlendMode;\n\tcolor?: Color;\n\tantialiased?: boolean;\n\topacity?: number;\n\tdistance?: UnitsValue;\n\tinvert?: boolean;\n\tangle?: number;\n\tcontour?: EffectContour;\n}\n\n// not supported yet because of `Patt` section not implemented\nexport interface LayerEffectPatternOverlay {\n\tpresent?: boolean;\n\tshowInDialog?: boolean;\n\tenabled?: boolean;\n\tblendMode?: BlendMode;\n\topacity?: number;\n\tscale?: number;\n\tpattern?: EffectPattern;\n\tphase?: { x: number; y: number; };\n\talign?: boolean;\n}\n\nexport interface EffectSolidGradient {\n\tname: string;\n\ttype: 'solid';\n\tsmoothness?: number;\n\tcolorStops: ColorStop[];\n\topacityStops: OpacityStop[];\n}\n\nexport interface EffectNoiseGradient {\n\tname: string;\n\ttype: 'noise';\n\troughness?: number;\n\tcolorModel?: 'rgb' | 'hsb' | 'lab';\n\trandomSeed?: number;\n\trestrictColors?: boolean;\n\taddTransparency?: boolean;\n\tmin: number[];\n\tmax: number[];\n}\n\nexport interface LayerEffectGradientOverlay {\n\tpresent?: boolean;\n\tshowInDialog?: boolean;\n\tenabled?: boolean;\n\tblendMode?: string;\n\topacity?: number;\n\talign?: boolean;\n\tscale?: number;\n\tdither?: boolean;\n\treverse?: boolean;\n\ttype?: GradientStyle;\n\toffset?: { x: number; y: number; };\n\tgradient?: EffectSolidGradient | EffectNoiseGradient;\n\tinterpolationMethod?: InterpolationMethod;\n\tangle?: number; // degrees\n}\n\nexport interface LayerEffectsInfo {\n\tdisabled?: boolean;\n\tscale?: number;\n\tdropShadow?: LayerEffectShadow[];\n\tinnerShadow?: LayerEffectShadow[];\n\touterGlow?: LayerEffectsOuterGlow;\n\tinnerGlow?: LayerEffectInnerGlow;\n\tbevel?: LayerEffectBevel;\n\tsolidFill?: LayerEffectSolidFill[];\n\tsatin?: LayerEffectSatin;\n\tstroke?: LayerEffectStroke[];\n\tgradientOverlay?: LayerEffectGradientOverlay[];\n\tpatternOverlay?: LayerEffectPatternOverlay; // not supported yet because of `Patt` section not implemented\n}\n\nexport type PixelArray = Uint8ClampedArray | Uint8Array | Uint16Array | Float32Array;\n\nexport interface PixelData {\n\tdata: PixelArray; // type depends on document bit depth\n\twidth: number;\n\theight: number;\n}\n\nexport interface LayerMaskData {\n\ttop?: number;\n\tleft?: number;\n\tbottom?: number;\n\tright?: number;\n\tdefaultColor?: number;\n\tdisabled?: boolean;\n\tpositionRelativeToLayer?: boolean;\n\tfromVectorData?: boolean; // set to true if the mask is generated from vector data, false if it's a bitmap provided by user\n\tuserMaskDensity?: number;\n\tuserMaskFeather?: number; // px\n\tvectorMaskDensity?: number;\n\tvectorMaskFeather?: number;\n\tcanvas?: HTMLCanvasElement;\n\timageData?: PixelData;\n}\n\nexport type TextGridding = 'none' | 'round'; // TODO: other values (no idea where to set it up in Photoshop)\nexport type Orientation = 'horizontal' | 'vertical';\nexport type AntiAlias = 'none' | 'sharp' | 'crisp' | 'strong' | 'smooth' | 'platform' | 'platformLCD';\nexport type WarpStyle =\n\t'none' | 'arc' | 'arcLower' | 'arcUpper' | 'arch' | 'bulge' | 'shellLower' | 'shellUpper' | 'flag' |\n\t'wave' | 'fish' | 'rise' | 'fisheye' | 'inflate' | 'squeeze' | 'twist' | 'custom' | 'cylinder';\nexport type BevelStyle = 'outer bevel' | 'inner bevel' | 'emboss' | 'pillow emboss' | 'stroke emboss';\nexport type BevelTechnique = 'smooth' | 'chisel hard' | 'chisel soft';\nexport type BevelDirection = 'up' | 'down';\nexport type GlowTechnique = 'softer' | 'precise';\nexport type GlowSource = 'edge' | 'center';\nexport type GradientStyle = 'linear' | 'radial' | 'angle' | 'reflected' | 'diamond';\nexport type Justification = 'left' | 'right' | 'center' | 'justify-left' | 'justify-right' | 'justify-center' | 'justify-all';\nexport type LineCapType = 'butt' | 'round' | 'square';\nexport type LineJoinType = 'miter' | 'round' | 'bevel';\nexport type LineAlignment = 'inside' | 'center' | 'outside';\nexport type InterpolationMethod = 'classic' | 'perceptual' | 'linear' | 'smooth';\n\nexport interface Warp {\n\tstyle?: WarpStyle;\n\tvalue?: number;\n\tvalues?: number[];\n\tperspective?: number;\n\tperspectiveOther?: number;\n\trotate?: Orientation;\n\t// for custom warps\n\tbounds?: { top: UnitsValue; left: UnitsValue; bottom: UnitsValue; right: UnitsValue; };\n\tuOrder?: number;\n\tvOrder?: number;\n\tdeformNumRows?: number;\n\tdeformNumCols?: number;\n\tcustomEnvelopeWarp?: {\n\t\tquiltSliceX?: number[];\n\t\tquiltSliceY?: number[];\n\t\t// 16 points from top left to bottom right, rows first, all points are relative to the first point\n\t\tmeshPoints: { x: number; y: number; }[];\n\t};\n}\n\nexport interface Animations {\n\tframes: {\n\t\tid: number;\n\t\tdelay: number;\n\t\tdispose?: 'auto' | 'none' | 'dispose';\n\t}[];\n\tanimations: {\n\t\tid: number;\n\t\tframes: number[];\n\t\trepeats?: number;\n\t\tactiveFrame?: number;\n\t}[];\n}\n\nexport interface Font {\n\tname: string;\n\tscript?: number;\n\ttype?: number;\n\tsynthetic?: number;\n}\n\nexport interface ParagraphStyle {\n\tjustification?: Justification;\n\tfirstLineIndent?: number;\n\tstartIndent?: number;\n\tendIndent?: number;\n\tspaceBefore?: number;\n\tspaceAfter?: number;\n\tautoHyphenate?: boolean;\n\thyphenatedWordSize?: number;\n\tpreHyphen?: number;\n\tpostHyphen?: number;\n\tconsecutiveHyphens?: number;\n\tzone?: number;\n\twordSpacing?: number[];\n\tletterSpacing?: number[];\n\tglyphSpacing?: number[];\n\tautoLeading?: number;\n\tleadingType?: number;\n\thanging?: boolean;\n\tburasagari?: boolean;\n\tkinsokuOrder?: number;\n\teveryLineComposer?: boolean;\n}\n\nexport interface ParagraphStyleRun {\n\tlength: number;\n\tstyle: ParagraphStyle;\n}\n\nexport interface TextStyle {\n\tfont?: Font;\n\tfontSize?: number;\n\tfauxBold?: boolean;\n\tfauxItalic?: boolean;\n\tautoLeading?: boolean;\n\tleading?: number;\n\thorizontalScale?: number;\n\tverticalScale?: number;\n\ttracking?: number;\n\tautoKerning?: boolean;\n\tkerning?: number;\n\tbaselineShift?: number;\n\tfontCaps?: number; // 0 - none, 1 - small caps, 2 - all caps\n\tfontBaseline?: number; // 0 - normal, 1 - superscript, 2 - subscript\n\tunderline?: boolean;\n\tstrikethrough?: boolean;\n\tligatures?: boolean;\n\tdLigatures?: boolean;\n\tbaselineDirection?: number;\n\ttsume?: number;\n\tstyleRunAlignment?: number;\n\tlanguage?: number;\n\tnoBreak?: boolean;\n\tfillColor?: Color;\n\tstrokeColor?: Color;\n\tfillFlag?: boolean;\n\tstrokeFlag?: boolean;\n\tfillFirst?: boolean;\n\tyUnderline?: number;\n\toutlineWidth?: number;\n\tcharacterDirection?: number;\n\thindiNumbers?: boolean;\n\tkashida?: number;\n\tdiacriticPos?: number;\n}\n\nexport interface TextStyleRun {\n\tlength: number;\n\tstyle: TextStyle;\n}\n\nexport interface TextGridInfo {\n\tisOn?: boolean;\n\tshow?: boolean;\n\tsize?: number;\n\tleading?: number;\n\tcolor?: Color;\n\tleadingFillColor?: Color;\n\talignLineHeightToGridFlags?: boolean;\n}\n\nexport interface UnitsBounds {\n\ttop: UnitsValue;\n\tleft: UnitsValue;\n\tright: UnitsValue;\n\tbottom: UnitsValue;\n}\n\nexport interface TextPath {\n\tname?: number[]; // TODO: this is probably not a name\n\tbezierCurve?: {\n\t\tcontrolPoints: number[]; // 8 values per bezier curve\n\t};\n\tdata: {\n\t\t// TODO: other fields\n\t\ttype?: number;\n\t\torientation?: number;\n\t\tframeMatrix: number[];\n\t\ttextRange: number[];\n\t\trowGutter?: number;\n\t\tcolumnGutter?: number;\n\t\tBaselineAlignment?: {\n\t\t\tflag?: number;\n\t\t\tmin?: number;\n\t\t};\n\t\tpathData: {\n\t\t\t// TODO: other fields\n\t\t\treversed?: boolean;\n\t\t\tspacing?: number;\n\t\t};\n\t};\n\tuuid?: string;\n}\n\nexport interface LayerTextData {\n\ttext: string;\n\ttransform?: number[]; // 2d transform matrix [xx, xy, yx, yy, tx, ty]\n\tantiAlias?: AntiAlias;\n\tgridding?: TextGridding;\n\torientation?: Orientation;\n\tindex?: number; // index of Editor in extra editor data related to this layer\n\twarp?: Warp;\n\ttop?: number;\n\tleft?: number;\n\tbottom?: number;\n\tright?: number;\n\n\tgridInfo?: TextGridInfo;\n\tuseFractionalGlyphWidths?: boolean;\n\tstyle?: TextStyle; // base style\n\tstyleRuns?: TextStyleRun[]; // spans of different style\n\tparagraphStyle?: ParagraphStyle; // base paragraph style\n\tparagraphStyleRuns?: ParagraphStyleRun[]; // style for each line\n\n\tsuperscriptSize?: number;\n\tsuperscriptPosition?: number;\n\tsubscriptSize?: number;\n\tsubscriptPosition?: number;\n\tsmallCapSize?: number;\n\n\tshapeType?: 'point' | 'box';\n\tpointBase?: number[];\n\tboxBounds?: number[];\n\tbounds?: UnitsBounds;\n\tboundingBox?: UnitsBounds;\n\n\t/** This is read-only field, any changes will not be saved */\n\ttextPath?: TextPath;\n}\n\nexport interface PatternInfo {\n\tname: string;\n\tid: string;\n\tx: number;\n\ty: number;\n\tbounds: { x: number; y: number; w: number, h: number; };\n\tdata: Uint8Array;\n}\n\nexport interface BezierKnot {\n\tlinked: boolean;\n\tpoints: number[]; // x0, y0, x1, y1, x2, y2\n}\n\nexport type BooleanOperation = 'exclude' | 'combine' | 'subtract' | 'intersect';\n\nexport interface BezierPath {\n\topen: boolean;\n\toperation?: BooleanOperation;\n\tknots: BezierKnot[];\n\tfillRule: 'even-odd' | 'non-zero';\n}\n\nexport interface ExtraGradientInfo {\n\tstyle?: GradientStyle;\n\tscale?: number;\n\tangle?: number;\n\tdither?: boolean;\n\tinterpolationMethod?: InterpolationMethod;\n\treverse?: boolean;\n\talign?: boolean;\n\toffset?: { x: number; y: number; };\n}\n\nexport interface ExtraPatternInfo {\n\tlinked?: boolean;\n\tphase?: { x: number; y: number; };\n}\n\nexport type VectorContent = { type: 'color'; color: Color; } |\n\t(EffectSolidGradient & ExtraGradientInfo) |\n\t(EffectNoiseGradient & ExtraGradientInfo) |\n\t(EffectPattern & { type: 'pattern'; } & ExtraPatternInfo);\n\nexport type RenderingIntent = 'perceptual' | 'saturation' | 'relative colorimetric' | 'absolute colorimetric';\n\nexport type Units = 'Pixels' | 'Points' | 'Picas' | 'Millimeters' | 'Centimeters' | 'Inches' | 'None' | 'Density';\n\nexport interface UnitsValue {\n\tunits: Units;\n\tvalue: number;\n}\n\nexport interface BrightnessAdjustment {\n\ttype: 'brightness/contrast';\n\tbrightness?: number;\n\tcontrast?: number;\n\tmeanValue?: number;\n\tuseLegacy?: boolean;\n\tlabColorOnly?: boolean;\n\tauto?: boolean;\n}\n\nexport interface LevelsAdjustmentChannel {\n\tshadowInput: number;\n\thighlightInput: number;\n\tshadowOutput: number;\n\thighlightOutput: number;\n\tmidtoneInput: number;\n}\n\nexport interface PresetInfo {\n\tpresetKind?: number;\n\tpresetFileName?: string;\n}\n\nexport interface LevelsAdjustment extends PresetInfo {\n\ttype: 'levels';\n\trgb?: LevelsAdjustmentChannel;\n\tred?: LevelsAdjustmentChannel;\n\tgreen?: LevelsAdjustmentChannel;\n\tblue?: LevelsAdjustmentChannel;\n}\n\nexport type CurvesAdjustmentChannel = { input: number; output: number; }[];\n\nexport interface CurvesAdjustment extends PresetInfo {\n\ttype: 'curves';\n\trgb?: CurvesAdjustmentChannel;\n\tred?: CurvesAdjustmentChannel;\n\tgreen?: CurvesAdjustmentChannel;\n\tblue?: CurvesAdjustmentChannel;\n}\n\nexport interface ExposureAdjustment extends PresetInfo {\n\ttype: 'exposure';\n\texposure?: number;\n\toffset?: number;\n\tgamma?: number;\n}\n\nexport interface VibranceAdjustment {\n\ttype: 'vibrance';\n\tvibrance?: number;\n\tsaturation?: number;\n}\n\nexport interface HueSaturationAdjustmentChannel {\n\ta: number;\n\tb: number;\n\tc: number;\n\td: number;\n\thue: number;\n\tsaturation: number;\n\tlightness: number;\n}\n\nexport interface HueSaturationAdjustment extends PresetInfo {\n\ttype: 'hue/saturation';\n\tmaster?: HueSaturationAdjustmentChannel;\n\treds?: HueSaturationAdjustmentChannel;\n\tyellows?: HueSaturationAdjustmentChannel;\n\tgreens?: HueSaturationAdjustmentChannel;\n\tcyans?: HueSaturationAdjustmentChannel;\n\tblues?: HueSaturationAdjustmentChannel;\n\tmagentas?: HueSaturationAdjustmentChannel;\n}\n\nexport interface ColorBalanceValues {\n\tcyanRed: number;\n\tmagentaGreen: number;\n\tyellowBlue: number;\n}\n\nexport interface ColorBalanceAdjustment {\n\ttype: 'color balance';\n\tshadows?: ColorBalanceValues;\n\tmidtones?: ColorBalanceValues;\n\thighlights?: ColorBalanceValues;\n\tpreserveLuminosity?: boolean;\n}\n\nexport interface BlackAndWhiteAdjustment extends PresetInfo {\n\ttype: 'black & white';\n\treds?: number;\n\tyellows?: number;\n\tgreens?: number;\n\tcyans?: number;\n\tblues?: number;\n\tmagentas?: number;\n\tuseTint?: boolean;\n\ttintColor?: Color;\n}\n\nexport interface PhotoFilterAdjustment {\n\ttype: 'photo filter';\n\tcolor?: Color;\n\tdensity?: number;\n\tpreserveLuminosity?: boolean;\n}\n\nexport interface ChannelMixerChannel {\n\tred: number;\n\tgreen: number;\n\tblue: number;\n\tconstant: number;\n}\n\nexport interface ChannelMixerAdjustment extends PresetInfo {\n\ttype: 'channel mixer';\n\tmonochrome?: boolean;\n\tred?: ChannelMixerChannel;\n\tgreen?: ChannelMixerChannel;\n\tblue?: ChannelMixerChannel;\n\tgray?: ChannelMixerChannel;\n}\n\nexport interface ColorLookupAdjustment {\n\ttype: 'color lookup';\n\tlookupType?: '3dlut' | 'abstractProfile' | 'deviceLinkProfile';\n\tname?: string;\n\tdither?: boolean;\n\tprofile?: Uint8Array;\n\tlutFormat?: 'look' | 'cube' | '3dl';\n\tdataOrder?: 'rgb' | 'bgr';\n\ttableOrder?: 'rgb' | 'bgr';\n\tlut3DFileData?: Uint8Array;\n\tlut3DFileName?: string;\n}\n\nexport interface InvertAdjustment {\n\ttype: 'invert';\n}\n\nexport interface PosterizeAdjustment {\n\ttype: 'posterize';\n\tlevels?: number;\n}\n\nexport interface ThresholdAdjustment {\n\ttype: 'threshold';\n\tlevel?: number;\n}\n\nexport interface ColorStop {\n\tcolor: Color;\n\tlocation: number;\n\tmidpoint: number;\n}\n\nexport interface OpacityStop {\n\topacity: number;\n\tlocation: number;\n\tmidpoint: number;\n}\n\nexport interface GradientMapAdjustment {\n\ttype: 'gradient map';\n\tname?: string;\n\tgradientType: 'solid' | 'noise';\n\tdither?: boolean;\n\treverse?: boolean;\n\tmethod?: InterpolationMethod;\n\t// solid\n\tsmoothness?: number;\n\tcolorStops?: ColorStop[];\n\topacityStops?: OpacityStop[];\n\t// noise\n\troughness?: number;\n\tcolorModel?: 'rgb' | 'hsb' | 'lab';\n\trandomSeed?: number;\n\trestrictColors?: boolean;\n\taddTransparency?: boolean;\n\tmin?: number[];\n\tmax?: number[];\n}\n\nexport interface SelectiveColorAdjustment {\n\ttype: 'selective color';\n\tmode?: 'relative' | 'absolute';\n\treds?: CMYK;\n\tyellows?: CMYK;\n\tgreens?: CMYK;\n\tcyans?: CMYK;\n\tblues?: CMYK;\n\tmagentas?: CMYK;\n\twhites?: CMYK;\n\tneutrals?: CMYK;\n\tblacks?: CMYK;\n}\n\nexport type LinkedFile = {\n\tid: string; // must be in a GUID format (example: 20953ddb-9391-11ec-b4f1-c15674f50bc4)\n\tname: string;\n\ttype?: string;\n\tcreator?: string;\n\tdata?: Uint8Array;\n\ttime?: string; // for external files\n\tdescriptor?: {\n\t\tcompInfo: { compID: number; originalCompID: number; };\n\t};\n\tchildDocumentID?: string;\n\tassetModTime?: number;\n\tassetLockedState?: number;\n\n\t// external files\n\tlinkedFile?: {\n\t\tfileSize: number;\n\t\tname: string;\n\t\tfullPath: string;\n\t\toriginalPath: string;\n\t\trelativePath: string;\n\t};\n}\n\ntype FilterVariant = {\n\ttype: 'average' | 'blur' | 'blur more';\n} | {\n\ttype: 'box blur';\n\tfilter: {\n\t\tradius: UnitsValue;\n\t};\n} | {\n\ttype: 'gaussian blur';\n\tfilter: {\n\t\tradius: UnitsValue;\n\t};\n} | {\n\ttype: 'motion blur';\n\tfilter: {\n\t\tangle: number; // in degrees\n\t\tdistance: UnitsValue;\n\t};\n} | {\n\ttype: 'radial blur';\n\tfilter: {\n\t\tamount: number;\n\t\tmethod: 'spin' | 'zoom';\n\t\tquality: 'draft' | 'good' | 'best';\n\t};\n} | {\n\ttype: 'shape blur';\n\tfilter: {\n\t\tradius: UnitsValue;\n\t\tcustomShape: { name: string; id: string };\n\t};\n} | {\n\ttype: 'smart blur';\n\tfilter: {\n\t\tradius: number;\n\t\tthreshold: number;\n\t\tquality: 'low' | 'medium' | 'high';\n\t\tmode: 'normal' | 'edge only' | 'overlay edge';\n\t};\n} | {\n\ttype: 'surface blur';\n\tfilter: {\n\t\tradius: UnitsValue;\n\t\tthreshold: number;\n\t};\n} | {\n\ttype: 'displace';\n\tfilter: {\n\t\thorizontalScale: number;\n\t\tverticalScale: number;\n\t\tdisplacementMap: 'stretch to fit' | 'tile';\n\t\tundefinedAreas: 'wrap around' | 'repeat edge pixels';\n\t\tdisplacementFile: {\n\t\t\tsignature: string;\n\t\t\tpath: string;\n\t\t};\n\t};\n} | {\n\ttype: 'pinch';\n\tfilter: {\n\t\tamount: number;\n\t};\n} | {\n\ttype: 'polar coordinates';\n\tfilter: {\n\t\tconversion: 'rectangular to polar' | 'polar to rectangular';\n\t};\n} | {\n\ttype: 'ripple';\n\tfilter: {\n\t\tamount: number;\n\t\tsize: 'small' | 'medium' | 'large';\n\t};\n} | {\n\ttype: 'shear';\n\tfilter: {\n\t\tshearPoints: { x: number; y: number }[];\n\t\tshearStart: number;\n\t\tshearEnd: number;\n\t\tundefinedAreas: 'wrap around' | 'repeat edge pixels';\n\t};\n} | {\n\ttype: 'spherize';\n\tfilter: {\n\t\tamount: number;\n\t\tmode: 'normal' | 'horizontal only' | 'vertical only';\n\t};\n} | {\n\ttype: 'twirl';\n\tfilter: {\n\t\tangle: number; // degrees\n\t};\n} | {\n\ttype: 'wave';\n\tfilter: {\n\t\tnumberOfGenerators: number;\n\t\ttype: 'sine' | 'triangle' | 'square';\n\t\twavelength: { min: number; max: number };\n\t\tamplitude: { min: number; max: number };\n\t\tscale: { x: number; y: number };\n\t\trandomSeed: number;\n\t\tundefinedAreas: 'wrap around' | 'repeat edge pixels';\n\t};\n} | {\n\ttype: 'zigzag';\n\tfilter: {\n\t\tamount: number;\n\t\tridges: number;\n\t\tstyle: 'around center' | 'out from center' | 'pond ripples';\n\t};\n} | {\n\ttype: 'add noise';\n\tfilter: {\n\t\tamount: number; // 0..1\n\t\tdistribution: 'uniform' | 'gaussian';\n\t\tmonochromatic: boolean;\n\t\trandomSeed: number;\n\t};\n} | {\n\ttype: 'despeckle';\n} | {\n\ttype: 'dust and scratches';\n\tfilter: {\n\t\tradius: number; // pixels\n\t\tthreshold: number; // levels\n\t};\n} | {\n\ttype: 'median';\n\tfilter: {\n\t\tradius: UnitsValue;\n\t};\n} | {\n\ttype: 'reduce noise';\n\tfilter: {\n\t\tpreset: string;\n\t\tremoveJpegArtifact: boolean;\n\t\treduceColorNoise: number; // 0..1\n\t\tsharpenDetails: number; // 0..1\n\t\tchannelDenoise: {\n\t\t\tchannels: ('red' | 'green' | 'blue' | 'composite')[];\n\t\t\tamount: number;\n\t\t\tpreserveDetails?: number; // percent\n\t\t}[];\n\t};\n} | {\n\ttype: 'color halftone';\n\tfilter: {\n\t\tradius: number; // pixels\n\t\tangle1: number; // degrees\n\t\tangle2: number; // degrees\n\t\tangle3: number; // degrees\n\t\tangle4: number; // degrees\n\t};\n} | {\n\ttype: 'crystallize';\n\tfilter: {\n\t\tcellSize: number;\n\t\trandomSeed: number;\n\t};\n} | {\n\ttype: 'facet' | 'fragment';\n} | {\n\ttype: 'mezzotint';\n\tfilter: {\n\t\ttype: 'fine dots' | 'medium dots' | 'grainy dots' | 'coarse dots' | 'short lines' | 'medium lines' | 'long lines' | 'short strokes' | 'medium strokes' | 'long strokes';\n\t\trandomSeed: number;\n\t};\n} | {\n\ttype: 'mosaic';\n\tfilter: {\n\t\tcellSize: UnitsValue;\n\t};\n} | {\n\ttype: 'pointillize';\n\tfilter: {\n\t\tcellSize: number;\n\t\trandomSeed: number;\n\t};\n} | {\n\ttype: 'clouds';\n\tfilter: {\n\t\trandomSeed: number;\n\t};\n} | {\n\ttype: 'difference clouds';\n\tfilter: {\n\t\trandomSeed: number;\n\t};\n} | {\n\ttype: 'fibers';\n\tfilter: {\n\t\tvariance: number;\n\t\tstrength: number;\n\t\trandomSeed: number;\n\t};\n} | {\n\ttype: 'lens flare';\n\tfilter: {\n\t\tbrightness: number; // percent\n\t\tposition: { x: number; y: number; };\n\t\tlensType: '50-300mm zoom' | '32mm prime' | '105mm prime' | 'movie prime';\n\t};\n} /*| {\n\ttype: 'lighting effects';\n\tfilter: {\n\t\tlights: Light3D;\n\t\tcameraPosition: Position3D;\n\t\tgloss: number;\n\t\tmetallic: number;\n\t\texposure: number;\n\t\tambience: number;\n\t\tambientColor: Color;\n\t\t// TODO: BmpA, BmpC / Hotspot / color ?\n\t\twidth: number;\n\t\theight: number;\n\t};\n}*/ | {\n\ttype: 'sharpen' | 'sharpen edges' | 'sharpen more';\n} | {\n\ttype: 'smart sharpen';\n\tfilter: {\n\t\tamount: number; // 0..1\n\t\tradius: UnitsValue;\n\t\tthreshold: number;\n\t\tangle: number; // degrees\n\t\tmoreAccurate: boolean;\n\t\tblur: 'gaussian blur' | 'lens blur' | 'motion blur';\n\t\tpreset: string;\n\t\tshadow: {\n\t\t\tfadeAmount: number; // 0..1\n\t\t\ttonalWidth: number; // 0..1\n\t\t\tradius: number; // px\n\t\t};\n\t\thighlight: {\n\t\t\tfadeAmount: number; // 0..1\n\t\t\ttonalWidth: number; // 0..1\n\t\t\tradius: number; // px\n\t\t};\n\t};\n} | {\n\ttype: 'unsharp mask';\n\tfilter: {\n\t\tamount: number; // 0..1\n\t\tradius: UnitsValue;\n\t\tthreshold: number; // levels\n\t};\n} | {\n\ttype: 'diffuse';\n\tfilter: {\n\t\tmode: 'normal' | 'darken only' | 'lighten only' | 'anisotropic';\n\t\trandomSeed: number;\n\t};\n} | {\n\ttype: 'emboss';\n\tfilter: {\n\t\tangle: number; // degrees\n\t\theight: number; // pixels\n\t\tamount: number; // percent\n\t};\n} | {\n\ttype: 'extrude';\n\tfilter: {\n\t\ttype: 'blocks' | 'pyramids';\n\t\tsize: number; // pixels\n\t\tdepth: number;\n\t\tdepthMode: 'random' | 'level-based';\n\t\trandomSeed: number;\n\t\tsolidFrontFaces: boolean;\n\t\tmaskIncompleteBlocks: boolean;\n\t};\n} | {\n\ttype: 'find edges' | 'solarize';\n} | {\n\ttype: 'tiles';\n\tfilter: {\n\t\tnumberOfTiles: number;\n\t\tmaximumOffset: number; // percent\n\t\tfillEmptyAreaWith: 'background color' | 'foreground color' | 'inverse image' | 'unaltered image';\n\t\trandomSeed: number;\n\t};\n} | {\n\ttype: 'trace contour';\n\tfilter: {\n\t\tlevel: number;\n\t\tedge: 'lower' | 'upper';\n\t};\n} | {\n\ttype: 'wind';\n\tfilter: {\n\t\tmethod: 'wind' | 'blast' | 'stagger';\n\t\tdirection: 'left' | 'right';\n\t};\n} | {\n\ttype: 'de-interlace';\n\tfilter: {\n\t\teliminate: 'odd lines' | 'even lines';\n\t\tnewFieldsBy: 'duplication' | 'interpolation';\n\t};\n} | {\n\ttype: 'ntsc colors';\n} | {\n\ttype: 'custom';\n\tfilter: {\n\t\tscale: number;\n\t\toffset: number;\n\t\tmatrix: number[];\n\t};\n} | {\n\ttype: 'high pass' | 'maximum' | 'minimum';\n\tfilter: {\n\t\tradius: UnitsValue;\n\t};\n} | {\n\ttype: 'offset';\n\tfilter: {\n\t\thorizontal: number; // pixels\n\t\tvertical: number; // pixels\n\t\tundefinedAreas: 'set to transparent' | 'repeat edge pixels' | 'wrap around';\n\t};\n} | {\n\ttype: 'puppet';\n\tfilter: {\n\t\trigidType: boolean;\n\t\tbounds: { x: number; y: number; }[];\n\t\tpuppetShapeList: {\n\t\t\trigidType: boolean;\n\t\t\t// VrsM: number;\n\t\t\t// VrsN: number;\n\t\t\toriginalVertexArray: { x: number; y: number; }[];\n\t\t\tdeformedVertexArray: { x: number; y: number; }[];\n\t\t\tindexArray: number[];\n\t\t\tpinOffsets: { x: number; y: number; }[];\n\t\t\tposFinalPins: { x: number; y: number; }[];\n\t\t\tpinVertexIndices: number[];\n\t\t\tselectedPin: number[];\n\t\t\tpinPosition: { x: number; y: number; }[];\n\t\t\tpinRotation: number[]; // in degrees\n\t\t\tpinOverlay: boolean[];\n\t\t\tpinDepth: number[];\n\t\t\tmeshQuality: number;\n\t\t\tmeshExpansion: number;\n\t\t\tmeshRigidity: number;\n\t\t\timageResolution: number;\n\t\t\tmeshBoundaryPath: {\n\t\t\t\tpathComponents: {\n\t\t\t\t\tshapeOperation: string;\n\t\t\t\t\tpaths: {\n\t\t\t\t\t\tclosed: boolean;\n\t\t\t\t\t\tpoints: {\n\t\t\t\t\t\t\tanchor: { x: UnitsValue; y: UnitsValue; };\n\t\t\t\t\t\t\tforward: { x: UnitsValue; y: UnitsValue; };\n\t\t\t\t\t\t\tbackward: { x: UnitsValue; y: UnitsValue; };\n\t\t\t\t\t\t\tsmooth: boolean;\n\t\t\t\t\t\t}[];\n\t\t\t\t\t}[];\n\t\t\t\t}[];\n\t\t\t};\n\t\t}[];\n\t};\n} | {\n\ttype: 'oil paint plugin';\n\tfilter: {\n\t\tname: string;\n\t\tgpu: boolean;\n\t\tlighting: boolean;\n\t\t// FPth ???\n\t\tparameters: {\n\t\t\tname: string;\n\t\t\tvalue: number;\n\t\t}[];\n\t};\n} /*| {\n\ttype: 'lens correction';\n\tfilter: {\n\t\tprofile: string;\n\t\t\n\t};\n}*//* | {\n\ttype: 'adaptive wide angle';\n\tfilter: {\n\t\tcorrection: 'fisheye' | 'perspective' | 'auto' | 'full spherical';\n\t\tfocalLength: number;\n\t\tcropFactor: number;\n\t\timageScale: number;\n\t\timageX: number;\n\t\timageY: number;\n\t};\n}*//* | {\n\ttype: 'filter gallery';\n\tfilter: {\n\t\tfilter: 'colored pencil';\n\t\tpencilWidth: number;\n\t\tstrokePressure: number;\n\t\tpaperBrightness: number;\n\t} | ...;\n}*/ | {\n\ttype: 'hsb/hsl';\n\tfilter: {\n\t\tinputMode: 'rgb' | 'hsb' | 'hsl';\n\t\trowOrder: 'rgb' | 'hsb' | 'hsl';\n\t};\n} | {\n\ttype: 'oil paint';\n\tfilter: {\n\t\tlightingOn: boolean;\n\t\tstylization: number;\n\t\tcleanliness: number;\n\t\tbrushScale: number;\n\t\tmicroBrush: number;\n\t\tlightDirection: number; // degrees\n\t\tspecularity: number;\n\t};\n} | {\n\ttype: 'liquify';\n\tfilter: {\n\t\tliquifyMesh: Uint8Array;\n\t};\n} | {\n\ttype: 'perspective warp';\n\tfilter: {\n\t\tquads: number[][]; // quad indices\n\t\tvertices: { x: UnitsValue; y: UnitsValue; }[];\n\t\twarpedVertices: { x: UnitsValue; y: UnitsValue; }[];\n\t};\n} | {\n\ttype: 'curves';\n\tfilter: {\n\t\tpresetKind: 'custom' | 'default';\n\t\tadjustments?: ({\n\t\t\tchannels: ('composite' | 'red' | 'green' | 'blue')[];\n\t\t\tcurve: { x: number; y: number; curved?: boolean; }[];\n\t\t} | {\n\t\t\tchannels: ('composite' | 'red' | 'green' | 'blue')[];\n\t\t\tvalues: number[];\n\t\t})[];\n\t};\n} | {\n\ttype: 'invert';\n} | {\n\ttype: 'brightness/contrast';\n\tfilter: {\n\t\tbrightness: number;\n\t\tcontrast: number;\n\t\tuseLegacy: boolean;\n\t};\n};\n\n/*\nexport interface Position3D {\n\tx: number;\n\ty: number;\n\tz: number;\n\tangleX: number;\n\tangleY: number;\n\tangleZ: number;\n}\n\nexport interface Light3D {\n\tname: string;\n\ttype: 'point' | 'spot' | 'infinite';\n\tred: number; // 0..1\n\tgreen: number; // 0..1\n\tblue: number; // 0..1\n\t// TODO: hots\n\tfalloff: number;\n\tshadow: number;\n\t// TODO: attn\n\t// TODO: attt atta, attb, attc, orad, irad, mult, Type\n\t// ...\n}\n*/\n\nexport type Filter = FilterVariant & {\n\tname: string;\n\topacity: number;\n\tblendMode: BlendMode;\n\tenabled: boolean;\n\thasOptions: boolean;\n\tforegroundColor: Color;\n\tbackgroundColor: Color;\n}\n\nexport interface PlacedLayerFilter {\n\tenabled: boolean;\n\tvalidAtPosition: boolean;\n\tmaskEnabled: boolean;\n\tmaskLinked: boolean;\n\tmaskExtendWithWhite: boolean;\n\tlist: Filter[];\n}\n\nexport type PlacedLayerType = 'unknown' | 'vector' | 'raster' | 'image stack';\n\nexport interface PlacedLayer {\n\tid: string; // id of linked image file (psd.linkedFiles), must be in a GUID format (example: 20953ddb-9391-11ec-b4f1-c15674f50bc4)\n\tplaced?: string; // unique id\n\ttype: PlacedLayerType;\n\tpageNumber?: number;\n\ttotalPages?: number;\n\tframeStep?: { numerator: number; denominator: number; };\n\tduration?: { numerator: number; denominator: number; };\n\tframeCount?: number;\n\ttransform: number[]; // x, y of 4 corners of the transform\n\tnonAffineTransform?: number[]; // x, y of 4 corners of the transform\n\twidth?: number; // width of the linked image\n\theight?: number; // height of the linked image\n\tresolution?: UnitsValue;\n\t// antialias ?\n\twarp?: Warp; // warp coordinates are relative to the linked image size\n\tcrop?: number;\n\tcomp?: number;\n\tcompInfo?: { compID: number; originalCompID: number; };\n\tfilter?: PlacedLayerFilter;\n}\n\nexport type AdjustmentLayer = BrightnessAdjustment | LevelsAdjustment | CurvesAdjustment |\n\tExposureAdjustment | VibranceAdjustment | HueSaturationAdjustment | ColorBalanceAdjustment |\n\tBlackAndWhiteAdjustment | PhotoFilterAdjustment | ChannelMixerAdjustment | ColorLookupAdjustment |\n\tInvertAdjustment | PosterizeAdjustment | ThresholdAdjustment | GradientMapAdjustment |\n\tSelectiveColorAdjustment;\n\nexport type LayerColor = 'none' | 'red' | 'orange' | 'yellow' | 'green' | 'blue' | 'violet' | 'gray';\n\nexport interface KeyDescriptorItem {\n\tkeyShapeInvalidated?: boolean;\n\tkeyOriginType?: number;\n\tkeyOriginResolution?: number;\n\tkeyOriginRRectRadii?: {\n\t\ttopRight: UnitsValue;\n\t\ttopLeft: UnitsValue;\n\t\tbottomLeft: UnitsValue;\n\t\tbottomRight: UnitsValue;\n\t};\n\tkeyOriginShapeBoundingBox?: {\n\t\ttop: UnitsValue;\n\t\tleft: UnitsValue;\n\t\tbottom: UnitsValue;\n\t\tright: UnitsValue;\n\t};\n\tkeyOriginBoxCorners?: { x: number; y: number; }[];\n\ttransform?: number[]; // 2d transform matrix [xx, xy, yx, yy, tx, ty]\n}\n\nexport interface LayerVectorMask {\n\tinvert?: boolean;\n\tnotLink?: boolean;\n\tdisable?: boolean;\n\tfillStartsWithAllPixels?: boolean;\n\tclipboard?: {\n\t\ttop: number;\n\t\tleft: number;\n\t\tbottom: number;\n\t\tright: number;\n\t\tresolution: number;\n\t};\n\tpaths: BezierPath[];\n}\n\nexport interface AnimationFrame {\n\tframes: number[]; // IDs of frames that this modifiers applies to\n\tenable?: boolean;\n\toffset?: { x: number; y: number; };\n\treferencePoint?: { x: number; y: number; };\n\topacity?: number;\n\teffects?: LayerEffectsInfo;\n}\n\nexport interface Fraction {\n\tnumerator: number;\n\tdenominator: number;\n}\n\nexport type TimelineKeyInterpolation = 'linear' | 'hold';\n\nexport type TimelineKey = {\n\tinterpolation: TimelineKeyInterpolation;\n\ttime: Fraction;\n\tselected?: boolean;\n} & ({\n\ttype: 'opacity';\n\tvalue: number;\n} | {\n\ttype: 'position';\n\tx: number;\n\ty: number;\n} | {\n\ttype: 'transform';\n\tscale: { x: number; y: number; };\n\tskew: { x: number; y: number; };\n\trotation: number;\n\ttranslation: { x: number; y: number; };\n} | {\n\ttype: 'style';\n\tstyle?: LayerEffectsInfo;\n} | {\n\ttype: 'globalLighting';\n\tglobalAngle: number;\n\tglobalAltitude: number;\n});\n\nexport type TimelineTrackType = 'opacity' | 'style' | 'sheetTransform' | 'sheetPosition' | 'globalLighting';\n\nexport interface TimelineTrack {\n\ttype: TimelineTrackType;\n\tenabled?: boolean;\n\teffectParams?: {\n\t\tkeys: TimelineKey[];\n\t\tfillCanvas: boolean;\n\t\tzoomOrigin: number;\n\t};\n\tkeys: TimelineKey[];\n}\n\nexport interface Timeline {\n\tstart: Fraction;\n\tduration: Fraction;\n\tinTime: Fraction;\n\toutTime: Fraction;\n\tautoScope: boolean;\n\taudioLevel: number;\n\ttracks?: TimelineTrack[];\n}\n\nexport interface LayerAdditionalInfo {\n\tname?: string; // layer name\n\tnameSource?: string; // layer name source\n\tid?: number; // layer id\n\tversion?: number; // layer version\n\tmask?: LayerMaskData;\n\trealMask?: LayerMaskData;\n\tblendClippendElements?: boolean; // has to be set to `true` when using `color burn` blend mode (otherwise `transparencyShapesLayer` is set incorrectly)\n\tblendInteriorElements?: boolean;\n\tknockout?: boolean;\n\tlayerMaskAsGlobalMask?: boolean;\n\tprotected?: {\n\t\ttransparency?: boolean;\n\t\tcomposite?: boolean;\n\t\tposition?: boolean;\n\t\tartboards?: boolean;\n\t};\n\tlayerColor?: LayerColor;\n\treferencePoint?: {\n\t\tx: number;\n\t\ty: number;\n\t};\n\tsectionDivider?: {\n\t\ttype: SectionDividerType;\n\t\tkey?: string;\n\t\tsubType?: number; // 0 = normal, 1 = scene group, affects the animation timeline.\n\t};\n\tfilterMask?: {\n\t\tcolorSpace: Color;\n\t\topacity: number;\n\t};\n\teffects?: LayerEffectsInfo;\n\ttext?: LayerTextData;\n\tpatterns?: PatternInfo[]; // not supported yet\n\tvectorFill?: VectorContent;\n\tvectorStroke?: {\n\t\tstrokeEnabled?: boolean;\n\t\tfillEnabled?: boolean;\n\t\tlineWidth?: UnitsValue;\n\t\tlineDashOffset?: UnitsValue;\n\t\tmiterLimit?: number;\n\t\tlineCapType?: LineCapType;\n\t\tlineJoinType?: LineJoinType;\n\t\tlineAlignment?: LineAlignment;\n\t\tscaleLock?: boolean;\n\t\tstrokeAdjust?: boolean;\n\t\tlineDashSet?: UnitsValue[];\n\t\tblendMode?: BlendMode;\n\t\topacity?: number;\n\t\tcontent?: VectorContent;\n\t\tresolution?: number;\n\t};\n\tvectorMask?: LayerVectorMask;\n\tusingAlignedRendering?: boolean;\n\ttimestamp?: number; // seconds\n\tpathList?: {\n\t\t// TODO: ...\n\t}[];\n\tadjustment?: AdjustmentLayer;\n\tplacedLayer?: PlacedLayer;\n\tvectorOrigination?: {\n\t\tkeyDescriptorList: KeyDescriptorItem[];\n\t};\n\tcompositorUsed?: {\n\t\tversion?: { major: number; minor: number; fix: number; };\n\t\tphotoshopVersion?: { major: number; minor: number; fix: number; };\n\t\tdescription: string;\n\t\treason: string;\n\t\tengine: string;\n\t\tenableCompCore?: string;\n\t\tenableCompCoreGPU?: string;\n\t\tenableCompCoreThreads?: string;\n\t\tcompCoreSupport?: string;\n\t\tcompCoreGPUSupport?: string;\n\t};\n\tartboard?: {\n\t\trect: { top: number; left: number; bottom: number; right: number; };\n\t\tguideIndices?: any[];\n\t\tpresetName?: string;\n\t\tcolor?: Color;\n\t\tbackgroundType?: number;\n\t};\n\tfillOpacity?: number;\n\ttransparencyShapesLayer?: boolean;\n\tchannelBlendingRestrictions?: number[];\n\tanimationFrames?: AnimationFrame[];\n\tanimationFrameFlags?: {\n\t\tpropagateFrameOne?: boolean;\n\t\tunifyLayerPosition?: boolean;\n\t\tunifyLayerStyle?: boolean;\n\t\tunifyLayerVisibility?: boolean;\n\t};\n\ttimeline?: Timeline;\n\tfilterEffectsMasks?: {\n\t\tid: string;\n\t\ttop: number;\n\t\tleft: number;\n\t\tbottom: number;\n\t\tright: number;\n\t\tdepth: number;\n\t\tchannels: ({\n\t\t\tcompressionMode: number;\n\t\t\tdata: Uint8Array;\n\t\t} | undefined)[];\n\t\textra?: {\n\t\t\ttop: number;\n\t\t\tleft: number;\n\t\t\tbottom: number;\n\t\t\tright: number;\n\t\t\tcompressionMode: number;\n\t\t\tdata: Uint8Array;\n\t\t};\n\t}[];\n\tcomps?: {\n\t\toriginalEffectsReferencePoint?: { x: number; y: number; };\n\t\tsettings: {\n\t\t\tenabled?: boolean;\n\t\t\tcompList: number[];\n\t\t\toffset?: { x: number; y: number; };\n\t\t\teffectsReferencePoint?: { x: number; y: number; };\n\t\t}[];\n\t};\n\tuserMask?: {\n\t\tcolorSpace: Color;\n\t\topacity: number;\n\t};\n\tblendingRanges?: {\n\t\tcompositeGrayBlendSource: number[];\n\t\tcompositeGraphBlendDestinationRange: number[];\n\t\tranges: { sourceRange: number[]; destRange: number[]; }[];\n\t};\n\tvowv?: number; // ???\n\n\t// Base64 encoded raw EngineData, currently just kept in original state to support\n\t// loading and modifying PSD file without breaking text layers.\n\tengineData?: string;\n}\n\nexport enum LayerCompCapturedInfo {\n\tNone = 0,\n\tVisibility = 1,\n\tPosition = 2,\n\tAppearance = 4,\n}\n\nexport interface ImageResources {\n\tlayerState?: number;\n\tlayerSelectionIds?: number[];\n\tversionInfo?: {\n\t\thasRealMergedData: boolean;\n\t\twriterName: string;\n\t\treaderName: string;\n\t\tfileVersion: number;\n\t};\n\talphaIdentifiers?: number[];\n\talphaChannelNames?: string[];\n\tglobalAngle?: number;\n\tglobalAltitude?: number;\n\tpixelAspectRatio?: {\n\t\taspect: number;\n\t};\n\turlsList?: {\n\t\tid: number;\n\t\tref: 'slice';\n\t\turl: string;\n\t}[];\n\tgridAndGuidesInformation?: {\n\t\tgrid?: {\n\t\t\thorizontal: number;\n\t\t\tvertical: number;\n\t\t},\n\t\tguides?: {\n\t\t\tlocation: number;\n\t\t\tdirection: 'horizontal' | 'vertical';\n\t\t}[];\n\t};\n\tresolutionInfo?: {\n\t\thorizontalResolution: number;\n\t\thorizontalResolutionUnit: 'PPI' | 'PPCM';\n\t\twidthUnit: 'Inches' | 'Centimeters' | 'Points' | 'Picas' | 'Columns';\n\t\tverticalResolution: number;\n\t\tverticalResolutionUnit: 'PPI' | 'PPCM';\n\t\theightUnit: 'Inches' | 'Centimeters' | 'Points' | 'Picas' | 'Columns';\n\t};\n\tthumbnail?: HTMLCanvasElement;\n\tthumbnailRaw?: { width: number; height: number; data: Uint8Array; };\n\tcaptionDigest?: string;\n\txmpMetadata?: string;\n\tprintScale?: {\n\t\tstyle?: 'centered' | 'size to fit' | 'user defined';\n\t\tx?: number;\n\t\ty?: number;\n\t\tscale?: number;\n\t};\n\tprintInformation?: {\n\t\tprinterManagesColors?: boolean;\n\t\tprinterName?: string;\n\t\tprinterProfile?: string;\n\t\tprintSixteenBit?: boolean;\n\t\trenderingIntent?: RenderingIntent;\n\t\thardProof?: boolean;\n\t\tblackPointCompensation?: boolean;\n\t\tproofSetup?: {\n\t\t\tbuiltin: string;\n\t\t} | {\n\t\t\tprofile: string;\n\t\t\trenderingIntent?: RenderingIntent;\n\t\t\tblackPointCompensation?: boolean;\n\t\t\tpaperWhite?: boolean;\n\t\t};\n\t};\n\tbackgroundColor?: Color;\n\tidsSeedNumber?: number;\n\tprintFlags?: {\n\t\tlabels?: boolean;\n\t\tcropMarks?: boolean;\n\t\tcolorBars?: boolean;\n\t\tregistrationMarks?: boolean;\n\t\tnegative?: boolean;\n\t\tflip?: boolean;\n\t\tinterpolate?: boolean;\n\t\tcaption?: boolean;\n\t\tprintFlags?: boolean;\n\t};\n\ticcUntaggedProfile?: boolean;\n\tpathSelectionState?: string[];\n\timageReadyVariables?: string;\n\timageReadyDataSets?: string;\n\tanimations?: Animations;\n\tonionSkins?: {\n\t\tenabled: boolean;\n\t\tframesBefore: number;\n\t\tframesAfter: number;\n\t\tframeSpacing: number;\n\t\tminOpacity: number;\n\t\tmaxOpacity: number;\n\t\tblendMode: BlendMode;\n\t};\n\ttimelineInformation?: {\n\t\tenabled: boolean;\n\t\tframeStep: Fraction;\n\t\tframeRate: number;\n\t\ttime: Fraction;\n\t\tduration: Fraction;\n\t\tworkInTime: Fraction;\n\t\tworkOutTime: Fraction;\n\t\trepeats: number;\n\t\thasMotion: boolean;\n\t\tglobalTracks: TimelineTrack[];\n\t\taudioClipGroups?: {\n\t\t\tid: string;\n\t\t\tmuted: boolean;\n\t\t\taudioClips: {\n\t\t\t\tid: string;\n\t\t\t\tstart: Fraction;\n\t\t\t\tduration: Fraction;\n\t\t\t\tinTime: Fraction;\n\t\t\t\toutTime: Fraction;\n\t\t\t\tmuted: boolean;\n\t\t\t\taudioLevel: number;\n\t\t\t\tframeReader: {\n\t\t\t\t\ttype: number;\n\t\t\t\t\tmediaDescriptor: string;\n\t\t\t\t\tlink: {\n\t\t\t\t\t\tname: string;\n\t\t\t\t\t\tfullPath: string;\n\t\t\t\t\t\trelativePath: string;\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}[];\n\t\t}[];\n\t};\n\tsheetDisclosure?: {\n\t\tsheetTimelineOptions?: {\n\t\t\tsheetID: number;\n\t\t\tsheetDisclosed: boolean;\n\t\t\tlightsDisclosed: boolean;\n\t\t\tmeshesDisclosed: boolean;\n\t\t\tmaterialsDisclosed: boolean;\n\t\t}[];\n\t};\n\tcountInformation?: {\n\t\tcolor: RGB;\n\t\tname: string;\n\t\tsize: number;\n\t\tfontSize: number;\n\t\tvisible: boolean;\n\t\tpoints: { x: number; y: number }[];\n\t}[];\n\tslices?: {\n\t\tbounds: { left: number; top: number; right: number; bottom: number };\n\t\tgroupName: string;\n\t\tslices: {\n\t\t\tid: number;\n\t\t\tgroupId: number;\n\t\t\torigin: 'userGenerated' | 'autoGenerated' | 'layer';\n\t\t\tassociatedLayerId: number;\n\t\t\tname?: string;\n\t\t\ttype: 'image' | 'noImage';\n\t\t\tbounds: { left: number; top: number; right: number; bottom: number };\n\t\t\turl: string;\n\t\t\ttarget: string;\n\t\t\tmessage: string;\n\t\t\taltTag: string;\n\t\t\tcellTextIsHTML: boolean;\n\t\t\tcellText: string;\n\t\t\thorizontalAlignment: 'default';\n\t\t\tverticalAlignment: 'default';\n\t\t\tbackgroundColorType: 'none' | 'matte' | 'color';\n\t\t\tbackgroundColor: RGBA;\n\t\t\ttopOutset?: number;\n\t\t\tleftOutset?: number;\n\t\t\tbottomOutset?: number;\n\t\t\trightOutset?: number;\n\t\t}[];\n\t}[];\n\tlayerComps?: {\n\t\tlist: {\n\t\t\tid: number;\n\t\t\tname: string;\n\t\t\tcomment?: string;\n\t\t\tcapturedInfo: LayerCompCapturedInfo;\n\t\t}[];\n\t\tlastApplied?: number;\n\t};\n}\n\nexport interface GlobalLayerMaskInfo {\n\toverlayColorSpace: number;\n\tcolorSpace1: number;\n\tcolorSpace2: number;\n\tcolorSpace3: number;\n\tcolorSpace4: number;\n\topacity: number;\n\tkind: number;\n}\n\nexport interface Annotation {\n\ttype: 'text' | 'sound';\n\topen: boolean;\n\ticonLocation: { left: number; top: number; right: number; bottom: number };\n\tpopupLocation: { left: number; top: number; right: number; bottom: number };\n\tcolor: Color;\n\tauthor: string;\n\tname: string;\n\tdate: string;\n\tdata: string | Uint8Array;\n}\n\nexport interface Layer extends LayerAdditionalInfo {\n\ttop?: number;\n\tleft?: number;\n\tbottom?: number;\n\tright?: number;\n\tblendMode?: BlendMode;\n\topacity?: number;\n\ttransparencyProtected?: boolean;\n\teffectsOpen?: boolean; // effects/filters panel is expanded\n\thidden?: boolean;\n\tclipping?: boolean;\n\tcanvas?: HTMLCanvasElement;\n\timageData?: PixelData;\n\tchildren?: Layer[];\n\t/** Applies only for layer groups. */\n\topened?: boolean;\n\tlinkGroup?: number;\n\tlinkGroupEnabled?: boolean;\n}\n\nexport interface Psd extends LayerAdditionalInfo {\n\twidth: number;\n\theight: number;\n\tchannels?: number;\n\tbitsPerChannel?: number;\n\tcolorMode?: ColorMode;\n\tpalette?: RGB[]; // colors for indexed color mode\n\tchildren?: Layer[];\n\tcanvas?: HTMLCanvasElement;\n\timageData?: PixelData;\n\timageResources?: ImageResources;\n\tlinkedFiles?: LinkedFile[]; // used in smart objects\n\tartboards?: {\n\t\tcount: number; // number of artboards in the document\n\t\tautoExpandOffset?: { horizontal: number; vertical: number; };\n\t\torigin?: { horizontal: number; vertical: number; };\n\t\tautoExpandEnabled?: boolean;\n\t\tautoNestEnabled?: boolean;\n\t\tautoPositionEnabled?: boolean;\n\t\tshrinkwrapOnSaveEnabled?: boolean;\n\t\tdocDefaultNewArtboardBackgroundColor?: Color;\n\t\tdocDefaultNewArtboardBackgroundType?: number;\n\t};\n\tglobalLayerMaskInfo?: GlobalLayerMaskInfo;\n\tannotations?: Annotation[];\n}\n\nexport interface ReadOptions {\n\t/** Does not load layer image data. */\n\tskipLayerImageData?: boolean;\n\t/** Does not load composite image data. */\n\tskipCompositeImageData?: boolean;\n\t/** Does not load thumbnail. */\n\tskipThumbnail?: boolean;\n\t/** Does not load linked files (used in smart-objects). */\n\tskipLinkedFilesData?: boolean;\n\t/** Throws exception if features are missing. */\n\tthrowForMissingFeatures?: boolean;\n\t/** Logs if features are missing. */\n\tlogMissingFeatures?: boolean;\n\t/** Keep image data as byte array instead of canvas.\n\t * (image data will appear in `imageData` fields instead of `canvas` fields)\n\t * This avoids issues with canvas premultiplied alpha corrupting image data. */\n\tuseImageData?: boolean;\n\t/** Loads thumbnail raw data instead of decoding it's content into canvas.\n\t * `thumnailRaw` field is used instead. */\n\tuseRawThumbnail?: boolean;\n\n\t/** Used only for development. */\n\tlogDevFeatures?: boolean;\n\t/** Used only for development. */\n\tstrict?: boolean;\n\t/** Used only for development. */\n\tdebug?: boolean;\n\t/** Used only for development. */\n\tlog?: (...args: any[]) => void;\n}\n\nexport interface WriteOptions {\n\t/** Automatically generates thumbnail from composite image. */\n\tgenerateThumbnail?: boolean;\n\t/** Trims transparent pixels from layer image data. */\n\ttrimImageData?: boolean;\n\t/** Invalidates text layer data, forcing Photoshop to redraw them on load.\n\t *  Use this option if you're updating loaded text layer properties. */\n\tinvalidateTextLayers?: boolean;\n\t/** Logs if features are missing. */\n\tlogMissingFeatures?: boolean;\n\t/** Forces bottom layer to be treated as layer and not background even when it's missing any transparency\n\t * \t(by default Photoshop treats bottom layer as background it it doesn't have any transparent pixels). */\n\tnoBackground?: boolean;\n\t/** Saves document as PSB (Large Document Format) file. */\n\tpsb?: boolean;\n\t/** Uses zip compression when writing PSD file, will result in smaller file size but may be incompatible\n\t *  with some software. It may also be significantly slower. */\n\tcompress?: boolean;\n}\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","self","window","global","parcelRegister","register","module","exports","$1b6f6e28f7eac574$require$Buffer","$eC9e0","Buffer","$1b6f6e28f7eac574$var$__createBinding","__createBinding","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","$1b6f6e28f7eac574$var$__exportStar","__exportStar","exports1","p","prototype","hasOwnProperty","call","value","writePsdBuffer","writePsdUint8Array","writePsd","readPsd","byteArrayToBase64","initializeCanvas","$kCSTH","$5OPaf","$jWkTT","$jE67M","$1b6f6e28f7eac574$var$writePsdUint8Array","psd","options","writer","createWriter","getWriterBufferNoCopy","fromByteArray","buffer","reader","createReader","byteOffset","byteLength","getWriterBuffer","Error","from","$aa3bc52a91644a03$export$a143d493d941bafc","$aa3bc52a91644a03$export$f99ded8fe4b79145","$fFwUa","$cx0mh","$7h4XF","$9xmuV","$4Ooth","$aa3bc52a91644a03$var$customInspectSymbol","Symbol","$aa3bc52a91644a03$var$createBuffer","length","RangeError","buf","Uint8Array","setPrototypeOf","$aa3bc52a91644a03$var$Buffer","arg","encodingOrOffset","TypeError","$aa3bc52a91644a03$var$allocUnsafe","$aa3bc52a91644a03$var$from","$aa3bc52a91644a03$var$fromString","string","encoding","isEncoding","$aa3bc52a91644a03$var$byteLength","actual","write","slice","ArrayBuffer","isView","$aa3bc52a91644a03$var$fromArrayView","arrayView","$aa3bc52a91644a03$var$isInstance","copy","$aa3bc52a91644a03$var$fromArrayBuffer","$aa3bc52a91644a03$var$fromArrayLike","SharedArrayBuffer","valueOf","b","$aa3bc52a91644a03$var$fromObject","obj","isBuffer","len","$aa3bc52a91644a03$var$checked","$aa3bc52a91644a03$var$numberIsNaN","type","Array","isArray","data","toPrimitive","$aa3bc52a91644a03$var$assertSize","size","array","i","TYPED_ARRAY_SUPPORT","$aa3bc52a91644a03$var$typedArraySupport","arr","proto","foo","console","error","poolSize","alloc","fill","allocUnsafe","allocUnsafeSlow","mustMatch","arguments","loweredCase","$aa3bc52a91644a03$var$utf8ToBytes","$aa3bc52a91644a03$var$base64ToBytes","toLowerCase","$aa3bc52a91644a03$var$slowToString","start","end","$aa3bc52a91644a03$var$hexSlice","out","$aa3bc52a91644a03$var$hexSliceLookupTable","$aa3bc52a91644a03$var$utf8Slice","$aa3bc52a91644a03$var$asciiSlice","ret","Math","min","String","fromCharCode","$aa3bc52a91644a03$var$latin1Slice","$aa3bc52a91644a03$var$utf16leSlice","bytes","res","$aa3bc52a91644a03$var$swap","$aa3bc52a91644a03$var$bidirectionalIndexOf","val","dir","$aa3bc52a91644a03$var$arrayIndexOf","indexOf","lastIndexOf","indexSize","arrLength","valLength","read","readUInt16BE","foundIndex","found","j","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","push","codePoints","apply","$aa3bc52a91644a03$var$checkOffset","offset","ext","$aa3bc52a91644a03$var$checkInt","max","$aa3bc52a91644a03$var$wrtBigUInt64LE","$aa3bc52a91644a03$var$checkIntBI","lo","Number","BigInt","hi","$aa3bc52a91644a03$var$wrtBigUInt64BE","$aa3bc52a91644a03$var$checkIEEE754","$aa3bc52a91644a03$var$writeFloat","littleEndian","noAssert","$aa3bc52a91644a03$var$writeDouble","_isBuffer","compare","a","x","y","concat","list","pos","swap16","swap32","swap64","toString","toLocaleString","equals","inspect","str","replace","trim","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","remaining","$aa3bc52a91644a03$var$hexWrite","strLen","parsed","parseInt","substr","$aa3bc52a91644a03$var$blitBuffer","$aa3bc52a91644a03$var$asciiToBytes","byteArray","charCodeAt","$aa3bc52a91644a03$var$utf16leToBytes","units","c","toJSON","_arr","newBuf","subarray","readUintLE","readUIntLE","mul","readUintBE","readUIntBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readUInt32BE","readBigUInt64LE","$aa3bc52a91644a03$var$defineBigIntMethod","$aa3bc52a91644a03$var$validateNumber","first","last","$aa3bc52a91644a03$var$boundsError","readBigUInt64BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readBigInt64LE","readBigInt64BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUintLE","writeUIntLE","maxBytes","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","code","$aa3bc52a91644a03$var$errors","$aa3bc52a91644a03$var$E","sym","getMessage","Base","NodeError","_this","_","name","stack","key","message","$aa3bc52a91644a03$var$addNumericalSeparator","range","ERR_OUT_OF_RANGE","ERR_INVALID_ARG_TYPE","floor","ERR_BUFFER_OUT_OF_BOUNDS","input","msg","received","isInteger","abs","$aa3bc52a91644a03$var$INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","$aa3bc52a91644a03$var$base64clean","split","src","dst","alphabet","table","i16","fn","$aa3bc52a91644a03$var$BufferBigIntNotDefined","$b684359a5868888a$export$71511d61b312f219","$2JCCy","$ff8rK","$5IlRA","derived","args","Reflect","construct","$1fddbe0c3c1a3fa3$export$71511d61b312f219","getPrototypeOf","__proto__","$b18ecf0a91605feb$export$71511d61b312f219","result","Boolean","$42920568c35875bb$export$71511d61b312f219","$d6zUP","$8KHnw","$98a7b1f92515508c$export$71511d61b312f219","ReferenceError","$65f444a42ac09208$export$71511d61b312f219","$6f18a5bb13975690$export$71511d61b312f219","$5oklS","subClass","superClass","$010356a15c2fd2ed$export$71511d61b312f219","$e843a57e209ac34b$export$d622b2ad8d90c771","$e843a57e209ac34b$export$6100ba28696e12de","b64","tmp","lens","$e843a57e209ac34b$var$getLens","validLen","placeHoldersLen","$e843a57e209ac34b$var$Arr","curByte","$e843a57e209ac34b$var$revLookup","uint8","extraBytes","parts","len2","$e843a57e209ac34b$var$encodeChunk","output","$e843a57e209ac34b$var$lookup","num","join","$e843a57e209ac34b$var$code","$e843a57e209ac34b$var$i","$e843a57e209ac34b$var$len","$380ed06a8f757827$export$aafa59e2e03f2942","$380ed06a8f757827$export$68d8715fc104d294","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","d","NaN","rt","isNaN","log","LN2","$f041f0b6e7a0d2ff$var$__assign","__assign","assign","t","writeColor","writeSection","writeUnicodeStringWithPadding","writeUnicodeString","writeUnicodeStringWithoutLengthLE","writeUnicodeStringWithoutLength","writePascalString","writeSignature","writeZeros","writeBytes","writeFixedPointPath32","writeFixedPoint32","writeFloat64","writeFloat32","writeUint32","writeInt32","writeUint16","writeInt16","$cAUqy","$aqyg9","$f041f0b6e7a0d2ff$var$writeUint8","$f041f0b6e7a0d2ff$var$addSize","view","setUint8","$f041f0b6e7a0d2ff$var$writeInt16","setInt16","$f041f0b6e7a0d2ff$var$writeUint16","setUint16","$f041f0b6e7a0d2ff$var$writeUint16LE","$f041f0b6e7a0d2ff$var$writeInt32","setInt32","$f041f0b6e7a0d2ff$var$writeUint32","setUint32","$f041f0b6e7a0d2ff$var$writeFloat64","setFloat64","$f041f0b6e7a0d2ff$var$writeBytes","$f041f0b6e7a0d2ff$var$ensureSize","$f041f0b6e7a0d2ff$var$writeZeros","count","$f041f0b6e7a0d2ff$var$writeSignature","signature","$f041f0b6e7a0d2ff$var$writePascalString","text","padTo","$f041f0b6e7a0d2ff$var$writeUnicodeStringWithoutLength","$f041f0b6e7a0d2ff$var$writeSection","round","func","writeTotalLength","large","$f041f0b6e7a0d2ff$var$writerBlendingRange","$f041f0b6e7a0d2ff$var$writeAdditionalLayerInfo","_loop_4","handler","invalidateTextLayers","psb","has","largeAdditionalInfoKeys","fourBytes","_i","infoHandlers_1","infoHandlers","$f041f0b6e7a0d2ff$var$resizeBuffer","newLength","newBuffer","newBytes","oldBytes","DataView","$f041f0b6e7a0d2ff$var$getMaskChannels","tempBuffer","layerData","layer","mask","realMask","top","left","right","bottom","_a","$f041f0b6e7a0d2ff$var$getLayerDimentions","width","height","imageData","canvas","getContext","getImageData","compression","RAW_IMAGE_DATA","compress","writeDataZipWithoutPrediction","writeDataRLE","channels","channelId","$f041f0b6e7a0d2ff$var$isRowEmpty","$f041f0b6e7a0d2ff$var$isColEmpty","stride","setFloat32","scale","context","bitsPerChannel","$f041f0b6e7a0d2ff$var$verifyBitCount","children","forEach","Uint32Array","Uint16Array","data_1","imageResources","opt","layerIds","Set","layerToId","Map","generateThumbnail","createCanvas","drawImage","imageDataToCanvas","thumbnail","globalAlpha","hasAlpha","$f041f0b6e7a0d2ff$var$getLargestLayerSize","layers","layers_1","_b","_c","palette","r","g","$f041f0b6e7a0d2ff$var$addChildren","children_1","sectionDivider","blendMode","opened","fromBlendMode","subType","layersGroup","map","l","linkGroup","layerGroupsEnabledId","linkGroupEnabled","_loop_1","_loop_2","resourceHandlers_1","resourceHandlers","info","layersData","$f041f0b6e7a0d2ff$var$getLayerChannels","background","trimImageData","trimmed","$f041f0b6e7a0d2ff$var$trimData","$f041f0b6e7a0d2ff$var$cropImageData","croppedData","createImageData","srcData","dstData","channelIds","noBackground","imageDataRaw","unshift","offsetForChannel","imageDataRawCompression","_loop_3","top_1","_e","channels_1","clamp","opacity","clipping","flags","transparencyProtected","hidden","vectorMask","adjustment","effectsOpen","params","realFlags","userMaskDensity","userMaskFeather","vectorMaskDensity","vectorMaskFeather","disabled","positionRelativeToLayer","fromVectorData","defaultColor","ranges","blendingRanges","compositeGrayBlendSource","compositeGraphBlendDestinationRange","sourceRange","destRange","substring","layersData_1","layersData_2","_d","channel","globalLayerMaskInfo","overlayColorSpace","colorSpace1","colorSpace2","colorSpace3","colorSpace4","kind","pa","ra","color","fr","fg","fb","h","createCanvasFromData","writeDataRaw","decodeBitmap","resetImageData","Compression","ChannelID","MaskParams","LayerMaskFlags","ColorSpace","createEnum","revMap","layerColors","toBlendMode","MOCK_HANDLERS","$1eu3Z","$e4d680eb7b71aa6d$var$revMap","keys","prefix","def","rev","decode","encode","cmyk","alpha","Float32Array","pixelData","Uint8ClampedArray","shift","putImageData","offsets","ol","offsets_1","strideStart","strideEnd","lastIndex","lastIndex2","startOffset","value1","value2","value3","countIndex","writeLast","length_1","buffers","totalLength","offsets_2","deflate","buffers_1","$e4d680eb7b71aa6d$var$tempCanvas","document","createElement","image","Image","createCanvasMethod","createCanvasFromDataMethod","createImageDataMethod","$2755faf0e26f783c$var$zero$1","$2755faf0e26f783c$export$2316623ecd1285ab","$2755faf0e26f783c$export$cae1ce83fe4a1782","$2755faf0e26f783c$var$static_l_desc","$2755faf0e26f783c$var$static_d_desc","$2755faf0e26f783c$var$static_bl_desc","$2755faf0e26f783c$var$lenfix","$2755faf0e26f783c$var$distfix","$2755faf0e26f783c$var$HEAP_SIZE$1","$2755faf0e26f783c$var$extra_lbits","$2755faf0e26f783c$var$extra_dbits","$2755faf0e26f783c$var$extra_blbits","$2755faf0e26f783c$var$bl_order","$2755faf0e26f783c$var$static_ltree","$2755faf0e26f783c$var$static_dtree","$2755faf0e26f783c$var$D_CODES$1","$2755faf0e26f783c$var$_dist_code","$2755faf0e26f783c$var$_length_code","$2755faf0e26f783c$var$MAX_MATCH$1","$2755faf0e26f783c$var$base_length","$2755faf0e26f783c$var$base_dist","$2755faf0e26f783c$var$StaticTreeDesc","static_tree","extra_bits","extra_base","elems","max_length","has_stree","$2755faf0e26f783c$var$TreeDesc","dyn_tree","stat_desc","max_code","$2755faf0e26f783c$var$d_code","dist","$2755faf0e26f783c$var$put_short","w","pending_buf","pending","$2755faf0e26f783c$var$send_bits","bi_valid","$2755faf0e26f783c$var$Buf_size","bi_buf","$2755faf0e26f783c$var$send_code","tree","$2755faf0e26f783c$var$bi_reverse","$2755faf0e26f783c$var$bi_flush","$2755faf0e26f783c$var$gen_bitlen","bits","xbits","f","stree","extra","base","overflow","bl_count","heap","heap_max","opt_len","static_len","$2755faf0e26f783c$var$gen_codes","next_code","$2755faf0e26f783c$var$MAX_BITS$1","$2755faf0e26f783c$var$tr_static_init","$2755faf0e26f783c$var$LENGTH_CODES$1","$2755faf0e26f783c$var$L_CODES$1","$2755faf0e26f783c$var$LITERALS$1","$2755faf0e26f783c$var$init_block","dyn_ltree","dyn_dtree","bl_tree","$2755faf0e26f783c$var$END_BLOCK","sym_next","matches","$2755faf0e26f783c$var$bi_windup","$2755faf0e26f783c$var$smaller","depth","_n2","_m2","$2755faf0e26f783c$var$pqdownheap","heap_len","$2755faf0e26f783c$var$compress_block","ltree","dtree","lc","sx","sym_buf","$2755faf0e26f783c$var$build_tree","node","$2755faf0e26f783c$var$scan_tree","curlen","prevlen","nextlen","max_count","min_count","$2755faf0e26f783c$var$REP_3_6","$2755faf0e26f783c$var$REPZ_3_10","$2755faf0e26f783c$var$REPZ_11_138","$2755faf0e26f783c$var$send_tree","$2755faf0e26f783c$var$build_bl_tree","max_blindex","l_desc","d_desc","bl_desc","$2755faf0e26f783c$var$BL_CODES$1","$2755faf0e26f783c$var$send_all_trees","lcodes","dcodes","blcodes","rank","$2755faf0e26f783c$var$detect_data_type","block_mask","$2755faf0e26f783c$var$static_init_done","$2755faf0e26f783c$var$_tr_stored_block$1","stored_len","$2755faf0e26f783c$var$STORED_BLOCK","opt_lenb","static_lenb","level","strm","data_type","strategy","$2755faf0e26f783c$var$STATIC_TREES","$2755faf0e26f783c$var$DYN_TREES","$2755faf0e26f783c$var$adler32_1","adler","s1","s2","$2755faf0e26f783c$var$crcTable","$2755faf0e26f783c$var$makeTable","$2755faf0e26f783c$var$crc32_1","crc","$2755faf0e26f783c$var$messages","$2755faf0e26f783c$var$_tr_tally","sym_end","$2755faf0e26f783c$var$Z_NO_FLUSH$2","$2755faf0e26f783c$var$Z_FINISH$3","$2755faf0e26f783c$var$Z_BLOCK$1","$2755faf0e26f783c$var$Z_OK$3","$2755faf0e26f783c$var$Z_STREAM_END$3","$2755faf0e26f783c$var$Z_STREAM_ERROR$2","$2755faf0e26f783c$var$Z_BUF_ERROR$1","$2755faf0e26f783c$var$Z_FILTERED","$2755faf0e26f783c$var$Z_HUFFMAN_ONLY","$2755faf0e26f783c$var$Z_DEFLATED$2","$2755faf0e26f783c$var$HEAP_SIZE","$2755faf0e26f783c$var$err","errorCode","$2755faf0e26f783c$var$rank","$2755faf0e26f783c$var$zero","$2755faf0e26f783c$var$slide_hash","wsize","w_size","hash_size","head","prev","$2755faf0e26f783c$var$HASH","hash_shift","hash_mask","$2755faf0e26f783c$var$flush_pending","state","avail_out","pending_out","next_out","total_out","$2755faf0e26f783c$var$flush_block_only","$2755faf0e26f783c$var$_tr_flush_block","block_start","strstart","$2755faf0e26f783c$var$put_byte","$2755faf0e26f783c$var$putShortMSB","$2755faf0e26f783c$var$read_buf","avail_in","next_in","wrap","total_in","$2755faf0e26f783c$var$longest_match","cur_match","match","chain_length","max_chain_length","scan","best_len","prev_length","nice_match","$2755faf0e26f783c$var$MAX_MATCH","_win","wmask","w_mask","strend","scan_end1","scan_end","good_match","lookahead","match_start","$2755faf0e26f783c$var$fill_window","more","_w_size","window_size","insert","ins_h","$2755faf0e26f783c$var$deflate_stored","flush","have","min_block","pending_buf_size","used","$2755faf0e26f783c$var$_tr_stored_block","high_water","$2755faf0e26f783c$var$deflate_fast","hash_head","bflush","match_length","max_lazy_match","$2755faf0e26f783c$var$MIN_MATCH","$2755faf0e26f783c$var$deflate_slow","max_insert","prev_match","match_available","$2755faf0e26f783c$var$deflate_rle","$2755faf0e26f783c$var$deflate_huff","$2755faf0e26f783c$var$Config","good_length","max_lazy","nice_length","max_chain","$2755faf0e26f783c$var$configuration_table","$2755faf0e26f783c$var$lm_init","$2755faf0e26f783c$var$DeflateState","status","gzhead","gzindex","method","last_flush","w_bits","hash_bits","$2755faf0e26f783c$var$MAX_BITS","lit_bufsize","$2755faf0e26f783c$var$deflateStateCheck","$2755faf0e26f783c$var$deflateResetKeep","$2755faf0e26f783c$var$_tr_init","$2755faf0e26f783c$var$deflateReset","windowBits","memLevel","old_flush","header","level_flags","hcrc","comment","time","os","beg","gzhead_extra","beg1","val1","beg2","bstate","$2755faf0e26f783c$var$_tr_align","dictionary","dictLength","tmpDict","avail","next","sources","source","chunks","i1","l1","chunk","$2755faf0e26f783c$var$STR_APPLY_UIA_OK","__","$2755faf0e26f783c$var$_utf8len","$2755faf0e26f783c$var$q","$2755faf0e26f783c$var$buf2binstring","TextEncoder","c2","m_pos","str_len","buf_len","TextDecoder","utf16buf","c_len","$2755faf0e26f783c$var$zstream","$2755faf0e26f783c$var$toString$1","$2755faf0e26f783c$var$Z_SYNC_FLUSH","$2755faf0e26f783c$var$Z_FULL_FLUSH","$2755faf0e26f783c$var$Z_OK$2","$2755faf0e26f783c$var$Z_STREAM_END$2","$2755faf0e26f783c$var$Deflate$1","$2755faf0e26f783c$var$common","chunkSize","dict","raw","gzip","err","ended","$2755faf0e26f783c$var$deflate_1$2","$2755faf0e26f783c$var$strings","_dict_set","$2755faf0e26f783c$var$deflate$1","deflator","flush_mode","_flush_mode","onData","onEnd","$2755faf0e26f783c$var$inffast","_in","_out","dmax","whave","wnext","s_window","hold","lcode","dcode","lmask","dmask","here","op","from_source","lencode","distcode","lenbits","distbits","mode","sane","$2755faf0e26f783c$var$lbase","$2755faf0e26f783c$var$lext","$2755faf0e26f783c$var$dbase","$2755faf0e26f783c$var$dext","$2755faf0e26f783c$var$inftrees","lens_index","codes","table_index","work","opts","incr","low","here_bits","here_op","here_val","root","curr","drop","huff","$2755faf0e26f783c$var$MAXBITS","offs","$2755faf0e26f783c$var$Z_FINISH$1","$2755faf0e26f783c$var$Z_BLOCK","$2755faf0e26f783c$var$Z_TREES","$2755faf0e26f783c$var$Z_OK$1","$2755faf0e26f783c$var$Z_STREAM_END$1","$2755faf0e26f783c$var$Z_NEED_DICT$1","$2755faf0e26f783c$var$Z_STREAM_ERROR$1","$2755faf0e26f783c$var$Z_DATA_ERROR$1","$2755faf0e26f783c$var$Z_MEM_ERROR$1","$2755faf0e26f783c$var$Z_DEFLATED","$2755faf0e26f783c$var$zswap32","q","$2755faf0e26f783c$var$InflateState","havedict","check","total","wbits","ncode","nlen","ndist","lendyn","distdyn","back","was","$2755faf0e26f783c$var$inflateStateCheck","$2755faf0e26f783c$var$inflateResetKeep","Int32Array","$2755faf0e26f783c$var$inflateReset","$2755faf0e26f783c$var$inflateReset2","$2755faf0e26f783c$var$virgin","$2755faf0e26f783c$var$fixedtables","$2755faf0e26f783c$var$updatewindow","put","last_bits","last_op","last_val","hbuf","order","inf_leave","done","xflags","extra_len","dictid","$2755faf0e26f783c$var$gzheader","$2755faf0e26f783c$var$toString","$2755faf0e26f783c$var$Z_OK","$2755faf0e26f783c$var$Z_STREAM_END","$2755faf0e26f783c$var$Z_NEED_DICT","$2755faf0e26f783c$var$Z_STREAM_ERROR","$2755faf0e26f783c$var$Z_DATA_ERROR","$2755faf0e26f783c$var$Z_MEM_ERROR","$2755faf0e26f783c$var$Inflate$1","to","$2755faf0e26f783c$var$inflate_1$2","$2755faf0e26f783c$var$inflate$1","inflator","last_avail_out","next_out_utf8","tail","utf8str","$92b49e225bf9343c$var$__assign","hasMultiEffects","readVectorMask","booleanOperations","readBezierKnot","infoHandlersMap","$26rz6","$klnll","$2TM27","$6rQPt","$duoIX","$92b49e225bf9343c$var$fromAtoZ","$92b49e225bf9343c$var$addHandler","$92b49e225bf9343c$var$addHandlerAlias","$92b49e225bf9343c$var$hasKey","$92b49e225bf9343c$var$readLength64","readUint32","$92b49e225bf9343c$var$writeLength64","$92b49e225bf9343c$var$readBezierKnot","y0","readFixedPointPath32","x0","y1","x1","y2","$92b49e225bf9343c$var$readVectorMask","paths","path","selector","readUint16","boolOp","readInt16","skipBytes","open","knots","fillRule","operation","linked","points","resolution","clipboard","fillStartsWithAllPixels","leftBytes","transform","readFloat64","readVersionAndDescriptor","warp","readFloat32","index","TextIndex","gridding","textGridding","antiAlias","Annt","AntA","orientation","Ornt","style","warpStyle","warpValue","perspective","warpPerspective","perspectiveOther","warpPerspectiveOther","rotate","warpRotate","bounds","descBoundsToBounds","boundingBox","EngineData","engineData","parseEngineData","textData","decodeEngineData","textDescriptor","boundsToDescBounds","serializeEngineData","encodeEngineData","writeVersionAndDescriptor","$92b49e225bf9343c$var$encodeWarp","vectorFill","vectorStroke","descriptor","parseVectorContent","serializeVectorContent","readSignature","invert","notLink","disable","linkedKnot","unlinkedKnot","vowv","readInt32","vectorOrigination","keyDescriptorList","item","keyShapeInvalidated","keyOriginType","keyOriginResolution","keyOriginShapeBBox","keyOriginShapeBoundingBox","parseUnitsOrNumber","Left","Btom","Rght","rectRadii","keyOriginRRectRadii","topRight","parseUnits","topLeft","bottomLeft","bottomRight","corners","keyOriginBoxCorners","rectangleCornerA","Hrzn","Vrtc","rectangleCornerB","rectangleCornerC","rectangleCornerD","trnf","Trnf","xx","xy","yy","tx","ty","orig","radii","unitValueQuadVersion","unitsValue","box","yx","keyOriginIndex","effects","$92b49e225bf9343c$var$hasMultiEffects","version","parseEffects","logMissingFeatures","serializeEffects","readEffects","writeEffects","readUnicodeStringWithLength","logDevFeatures","nameSource","id","_psd","add","checkSignature","blendClippendElements","blendInteriorElements","knockout","layerMaskAsGlobalMask","protected","transparency","composite","position","artboards","layerColor","timestamp","animationFrames","animationFrameFlags","timeline","comps","readSection","layerTime","i_1","LaSt","frame","frames","FrLs","enab","enable","Ofst","horzVrtcToXY","FXRf","referencePoint","Lefx","blendOptions","Opct","parsePercent","propagate","propagateFrameOne","unifyLayerPosition","unifyLayerStyle","unifyLayerVisibility","timeScope","frac","Strt","duration","inTime","outTime","autoScope","audioLevel","trackList","tracks","parseTrackList","settings","origFXRefPoint","originalEffectsReferencePoint","layerSettings","compList","enabled","FXRefPoint","effectsReferencePoint","LaID","xyToHorzVrtc","unitsPercent","Vrsn","serializeTrackList","LyrI","strokeEnabled","fillEnabled","lineWidth","strokeStyleLineWidth","lineDashOffset","strokeStyleLineDashOffset","miterLimit","strokeStyleMiterLimit","lineCapType","strokeStyleLineCapType","lineJoinType","strokeStyleLineJoinType","lineAlignment","strokeStyleLineAlignment","scaleLock","strokeStyleScaleLock","strokeAdjust","strokeStyleStrokeAdjust","lineDashSet","strokeStyleLineDashSet","BlnM","strokeStyleBlendMode","strokeStyleOpacity","content","strokeStyleContent","strokeStyleResolution","stroke","strokeStyleVersion","rect","artboardRect","artboard","guideIndices","guideIndeces","presetName","artboardPresetName","parseColor","backgroundType","artboardBackgroundType","serializeColor","usingAlignedRendering","$92b49e225bf9343c$var$placedLayerTypes","$92b49e225bf9343c$var$parseWarp","_f","warpValues","values","uOrder","vOrder","deformNumRows","deformNumCols","envelopeWarp","customEnvelopeWarp","meshPoints","xs","find","ys","quiltSliceX","quiltSliceY","$92b49e225bf9343c$var$isQuiltWarp","isQuilt","desc2","_name","_classID","$92b49e225bf9343c$var$toUint8","$92b49e225bf9343c$var$arrayToPoints","$92b49e225bf9343c$var$pointsToArray","$92b49e225bf9343c$var$uint8ToPoints","$92b49e225bf9343c$var$hrznVrtcToPoint","$92b49e225bf9343c$var$pointToHrznVrtc","point","$92b49e225bf9343c$var$uvRadius","radius","$92b49e225bf9343c$var$getWarpFromPlacedLayer","placed","x2","$92b49e225bf9343c$var$readRect","$92b49e225bf9343c$var$writeRect","$92b49e225bf9343c$var$createLnkHandler","tag","linkedFiles","some","linkedFile","readPascalString","name_3","readUnicodeString","fileType","fileCreator","dataSize","fileOpenDescriptor","hasFileOpenDescriptor","linkedFileDescriptor","file","creator","compInfo","compID","originalCompID","year","month","day","hour","minute","seconds","wholeSeconds","ms","Date","UTC","toISOString","fileSize","readBytes","childDocumentID","assetModTime","assetLockedState","skipLinkedFilesData","fullPath","originalPath","relativePath","relPath","_g","_h","_j","_k","sizeOffset","test","descVersion","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","$92b49e225bf9343c$var$adjustmentType","$92b49e225bf9343c$var$readLevelsChannel","shadowInput","highlightInput","shadowOutput","highlightOutput","midtoneInput","$92b49e225bf9343c$var$writeLevelsChannel","$92b49e225bf9343c$var$readCurveChannel","nodes","$92b49e225bf9343c$var$writeCurveChannel","channel_1","$92b49e225bf9343c$var$readHueChannel","hue","saturation","lightness","$92b49e225bf9343c$var$writeHueChannel","$92b49e225bf9343c$var$readColorBalance","cyanRed","magentaGreen","yellowBlue","$92b49e225bf9343c$var$writeColorBalance","$92b49e225bf9343c$var$readMixrChannel","red","green","blue","constant","$92b49e225bf9343c$var$writeMixrChannel","pageNumber","totalPages","placedLayerType","warpVersion","placedLayer","Idnt","Type","PgNm","frameStep","frameCount","Wdth","Hght","Rslt","quiltWarp","nonAffineTransform","Crop","crop","comp","filterFX","filter","validAtPosition","maskEnabled","filterMaskEnable","maskLinked","filterMaskLinked","maskExtendWithWhite","filterMaskExtendWithWhite","filterFXList","$92b49e225bf9343c$var$parseFilterFXItem","hasOptions","hasoptions","foregroundColor","FrgC","backgroundColor","BckC","Fltr","angle","Angl","distance","Dstn","amount","Amnt","BlrM","quality","BlrQ","customShape","threshold","Thsh","SmBQ","SmBM","horizontalScale","HrzS","verticalScale","VrtS","displacementMap","DspM","undefinedAreas","UndA","displacementFile","DspF","sig","conversion","Cnvr","RplS","shearPoints","ShrP","shearStart","ShrS","shearEnd","ShrE","SphM","numberOfGenerators","NmbG","Wvtp","wavelength","WLMn","WLMx","amplitude","AmMn","AmMx","SclH","SclV","randomSeed","RndS","ridges","NmbR","ZZTy","Nose","distribution","Dstr","monochromatic","Mnch","FlRs","preset","removeJpegArtifact","removeJPEGArtifact","reduceColorNoise","ClNs","sharpenDetails","Shrp","channelDenoise","Chnl","EdgF","preserveDetails","angle1","Ang1","angle2","Ang2","angle3","Ang3","angle4","Ang4","cellSize","ClSz","MztT","variance","Vrnc","strength","Strg","brightness","Brgh","FlrC","lensType","Lns","moreAccurate","blur","blurType","shadow","fadeAmount","sdwM","tonalWidth","highlight","hglM","DfsM","ExtT","ExtS","ExtD","depthMode","ExtR","solidFrontFaces","ExtF","maskIncompleteBlocks","ExtM","numberOfTiles","TlNm","maximumOffset","TlOf","fillEmptyAreaWith","FlCl","edge","CntE","WndM","direction","Drct","eliminate","IntE","newFieldsBy","IntC","matrix","Mtrx","horizontal","vertical","FlMd","rigidType","PuX0","PuY0","PuX1","PuY1","PuX2","PuY2","PuX3","PuY3","puppetShapeList","originalVertexArray","deformedVertexArray","indexArray","pinOffsets","posFinalPins","pinVertexIndices","selectedPin","pinPosition","PinP","pinRotation","PnRt","pinOverlay","PnOv","pinDepth","PnDp","meshQuality","meshExpansion","meshRigidity","imageResolution","meshBoundaryPath","pathComponents","shapeOperation","SbpL","closed","Clsp","pt","anchor","Anch","forward","backward","smooth","Smoo","parameters","Flrt","KnNm","gpu","GpuY","lighting","LIWy","inputMode","ClrS","Inpt","rowOrder","Otpt","lightingOn","stylization","cleanliness","brushScale","microBrush","lightDirection","LghD","specularity","liquifyMesh","LqMe","vertices","warpedVertices","quads","indices","presetKind","presetKindType","Adjs","adjustments","curve","Cnty","curved","Mpng","contrast","Cntr","useLegacy","throwForMissingFeatures","filterID","numerator","denominator","$92b49e225bf9343c$var$serializeFilterFXItem","unitsPercentF","VrsM","VrsN","name_1","suffix","FPth","_target","_left","readLayerInfo","_writer","userMask","colorSpace","readColor","flag","_Patt","_CAI_","_OCIO","_GenI","annotations","major","minor","open_1","iconLocation","popupLocation","author","name_2","date","dataLength","readAsciiString","annotations_1","annotation","sound","lengthOffset","contentOffset","dataOffset","pathList","meanValue","labColorOnly","rgb","defaultChannel","channelCount","exposure","gamma","vibrance","master","reds","yellows","greens","cyans","blues","magentas","shadows","midtones","highlights","preserveLuminosity","Yllw","Mgnt","useTint","bwPresetKind","presetFileName","blackAndWhitePresetFileName","tintColor","density","monochrome","gray","$92b49e225bf9343c$var$colorLookupType","abstractProfile","deviceLinkProfile","$92b49e225bf9343c$var$LUTFormatType","look","cube","$92b49e225bf9343c$var$colorLookupOrder","bgr","lookupType","Dthr","dither","profile","LUTFormat","lutFormat","dataOrder","tableOrder","LUT3DFileData","lut3DFileData","LUT3DFileName","lut3DFileName","levels","$92b49e225bf9343c$var$grdmColorModels","$92b49e225bf9343c$var$readSelectiveColors","$92b49e225bf9343c$var$writeSelectiveColors","gradientType","reverse","hasMethod","gradientInterpolationMethodType","colorStops","opacityStops","stopsCount","location","midpoint","opacityStopsCount","expansionCount","interpolation","smoothness","addTransparency","restrictColors","roughness","colorModel","whites","neutrals","blacks","curvesPresetKind","curvesPresetFileName","mixerPresetKind","mixerPresetFileName","means","auto","Auto","layersByIndex","collect","child","TextFrameSet","engineData2","decodeEngineData2","ResourceDict","textPath","filterEffectsMasks","length_2","effectVersion","top_2","maxChannels","channelLength","compressionMode","top_3","left_1","bottom_1","right_1","extraLength","length2Offset","length_3","filterMask","autoExpandOffset","origin","autoExpandEnabled","autoNestEnabled","autoPositionEnabled","shrinkwrapOnSaveEnabled","docDefaultNewArtboardBackgroundColor","docDefaultNewArtboardBackgroundType","artb","enumValue","compositorUsed","description","reason","engine","Engn","psVersion","photoshopVersion","enableCompCore","enableCompCoreGPU","enableCompCoreThreads","compCoreSupport","compCoreGPUSupport","cinf","fix","_extn","fillOpacity","channelBlendingRestrictions","transparencyShapesLayer","$18818631259b9992$var$bevelStyles","$18818631259b9992$var$readBlendMode","$18818631259b9992$var$writeBlendMode","$18818631259b9992$var$readFixedPoint8","$18818631259b9992$var$writeFixedPoint8","$18818631259b9992$var$writeShadowInfo","useGlobalLight","effectsCount","version_1","visible","blockSize","version_2","readFixedPoint32","shadowInfo","dropShadow","innerShadow","version_3","outerGlow","version_4","innerGlow","version_5","highlightBlendMode","shadowBlendMode","highlightColor","shadowColor","highlightOpacity","shadowOpacity","bevel","version_6","solidFill","$43c94f66d9a06bba$var$__rest","__rest","getOwnPropertySymbols","propertyIsEnumerable","readPattern","readDataRLE","readDataZip","createImageDataBitDepth","readAdditionalLayerInfo","readGlobalLayerMaskInfo","readData","readUnicodeStringWithLengthLE","validSignatureAt","peekUint8","warnOrThrow","supportedColorModes","$43c94f66d9a06bba$var$colorModes","$43c94f66d9a06bba$var$setupGrayscale","$43c94f66d9a06bba$var$warnOrThrow","strict","debug","$43c94f66d9a06bba$var$readUint8","getUint8","$43c94f66d9a06bba$var$peekUint8","$43c94f66d9a06bba$var$readInt16","getInt16","$43c94f66d9a06bba$var$readUint16","getUint16","$43c94f66d9a06bba$var$readUint16LE","$43c94f66d9a06bba$var$readInt32","getInt32","$43c94f66d9a06bba$var$readUint32","getUint32","$43c94f66d9a06bba$var$readFloat64","getFloat64","$43c94f66d9a06bba$var$readBytes","$43c94f66d9a06bba$var$readSignature","$43c94f66d9a06bba$var$readShortString","$43c94f66d9a06bba$var$validSignatureAt","$43c94f66d9a06bba$var$readPascalString","$43c94f66d9a06bba$var$readUnicodeString","$43c94f66d9a06bba$var$readUnicodeStringWithLength","$43c94f66d9a06bba$var$skipBytes","$43c94f66d9a06bba$var$checkSignature","$43c94f66d9a06bba$var$isValidSignature","$43c94f66d9a06bba$var$readLayerInfo","layerCount","layerChannels","$43c94f66d9a06bba$var$readLayerRecord","$43c94f66d9a06bba$var$readSection","$43c94f66d9a06bba$var$readLayerMaskData","$43c94f66d9a06bba$var$readLayerBlendingRanges","$43c94f66d9a06bba$var$readBlendingRange","$43c94f66d9a06bba$var$readAdditionalLayerInfo","skipLayerImageData","$43c94f66d9a06bba$var$readLayerChannelImageData","layerWidth","layerHeight","colorMode","$43c94f66d9a06bba$var$createImageDataBitDepth","maskWidth","maskHeight","maskData","start_1","$43c94f66d9a06bba$var$readData","maskDataRawCompression","maskDataRaw","realMaskDataRawCompression","realMaskDataRaw","useImageData","targetData","cmykData","$43c94f66d9a06bba$var$cmykToRgb","pop","bitDepth","step","$43c94f66d9a06bba$var$readDataRaw","$43c94f66d9a06bba$var$readDataRLE","$43c94f66d9a06bba$var$readDataZip","$43c94f66d9a06bba$var$readGlobalLayerMaskInfo","u64","reverseAlpha","$43c94f66d9a06bba$var$bytesToArray","$43c94f66d9a06bba$var$copyChannelToPixelData","$43c94f66d9a06bba$var$decodePredicted","mod","prediction","compressed","decompressed","inflate","di","lengths","li","extraLimit","skipEmpty","eightBytes","getFloat32","readOptions","maxSize","fixOffsets","sigOffset","fixOffsets_1","resourceHandlersMap","skip","skipThumbnail","rest","hasChildren","skipCompositeImageData","$43c94f66d9a06bba$var$readImageData","ceil","indexedImageData","$43c94f66d9a06bba$var$indexedToRgb","indexed","cmykImageData","invA","ta","tb","version2","channelsCount","ch","pixelDepth","ctop","cleft","cbottom","cright","pixelDepth2","cdata","ox","oy","y_1","x_1","y_2","x_2","$7976e85542dc0fe3$var$__assign","$5wpNI","$7976e85542dc0fe3$var$addHandler","$7976e85542dc0fe3$var$RESOLUTION_UNITS","$7976e85542dc0fe3$var$MEASUREMENT_UNITS","$7976e85542dc0fe3$var$hex","$7976e85542dc0fe3$var$charToNibble","$7976e85542dc0fe3$var$readUtf8String","decodeString","$7976e85542dc0fe3$var$writeUtf8String","encodeString","_ir1028","captionDigest","byte","xmpMetadata","$7976e85542dc0fe3$var$Inte","printInformation","printerName","renderingIntent","Inte","PstS","printerManagesColors","printerProfile","MpBl","blackPointCompensation","printSixteenBit","hardProof","printProofSetup","proofSetup","builtin","Bltn","paperWhite","_ir1083","resolutionInfo","horizontalResolution","horizontalResolutionUnit","widthUnit","verticalResolution","verticalResolutionUnit","heightUnit","$7976e85542dc0fe3$var$printScaleStyles","printScale","alphaChannelNames","$7976e85542dc0fe3$var$readEncodedString","notAscii","decoder","$7976e85542dc0fe3$var$writeEncodedString","ascii","codePointAt","fromCodePoint","_ir1077","alphaIdentifiers","globalAngle","globalAltitude","printFlags","labels","cropMarks","colorBars","registrationMarks","negative","flip","interpolate","caption","_ir10000","_ir1013","_ir1016","countInformation","countGroupList","fontSize","Vsbl","countObjectList","layerState","layerSelectionIds","gridAndGuidesInformation","grid","guides","guides_1","layerComps","capturedInfo","lastApplied","lastAppliedComp","_ir1092","$7976e85542dc0fe3$var$onionSkinsBlendModes","$7976e85542dc0fe3$var$boundsToBounds","$7976e85542dc0fe3$var$boundsFromBounds","$7976e85542dc0fe3$var$clamped","onionSkins","framesBefore","numBefore","framesAfter","numAfter","frameSpacing","Spcn","minOpacity","maxOpacity","timelineInformation","frameRate","workInTime","workOutTime","repeats","LCnt","hasMotion","globalTracks","globalTrackList","audioClipGroupList","audioClipGroups","groupID","muted","audioClips","audioClipList","clipID","frameReader","frameReaderType","mediaDescriptor","link","sheetDisclosure","sheetTimelineOptions","sheetID","sheetDisclosed","lightsDisclosed","meshesDisclosed","materialsDisclosed","disclosure","urlsList","long","url","ref","$7976e85542dc0fe3$var$sliceOrigins","$7976e85542dc0fe3$var$sliceTypes","$7976e85542dc0fe3$var$sliceAlignments","slices","groupName","slices_1","groupId","origin_1","associatedLayerId","target_1","altTag","cellTextIsHTML","cellText","horizontalAlignment","verticalAlignment","backgroundColorType","sliceID","topOutset","leftOutset","bottomOutset","rightOutset","baseName","ESliceOrigin","ESliceType","null","Msge","ESliceHorzAlign","horzAlign","ESliceVertAlign","vertAlign","ESliceBGColorType","bgColorType","bgColor","pixelAspectRatio","aspect","iccUntaggedProfile","_ir1039","idsSeedNumber","thumbnailRaw","format","bitsPerPixel","planes","useRawThumbnail","dataUrl","toDataURL","widthBytes","totalSize","sizeAfterCompression","versionInfo","hasRealMergedData","writerName","readerName","fileVersion","_ir1058","imageReadyVariables","imageReadyDataSets","pathSelectionState","_ir1025","$7976e85542dc0fe3$var$FrmD","none","dispose","animations","key_1","FrIn","FrID","delay","FrDl","FrDs","FSts","FsID","FsFr","activeFrame","AFrm","anim","_ir4001","_ir4002","$4053f470e500857f$var$charLengthInBytes","$4053f470e500857f$var$stringLengthInBytes","$4053f470e500857f$var$writeCharacter","$4053f470e500857f$var$encodeStringTo","fullCode","$4053f470e500857f$var$continuationByte","continuationByte","encodeStringTo","stringLengthInBytes","byte1","byte2","byte3","toUpperCase","$ecf7e04a3a5ae4fa$var$__assign","$ecf7e04a3a5ae4fa$var$__rest","FrFl","FStl","stdTrackID","animInterpStyleEnum","GrdT","IGSr","BETE","BESs","bvlT","BESl","unitsAngle","parseUnitsToNumber","parsePercentOrAngle","parseAngle","writeDescriptorStructure","readDescriptorStructure","readAsciiStringOrClassId","setLogErrors","prjM","$ecf7e04a3a5ae4fa$var$unitsMap","$ecf7e04a3a5ae4fa$var$unitsMapRev","$ecf7e04a3a5ae4fa$var$logErrors","$ecf7e04a3a5ae4fa$var$makeType","classID","$ecf7e04a3a5ae4fa$var$nullType","$ecf7e04a3a5ae4fa$var$fieldToExtType","Grad","patternFill","ebbl","SoFi","GrFl","sdwC","hglC","ChFX","MpgS","DrSh","IrSh","OrGl","IrGl","TrnS","Ptrn","FrFX","phase","generatorSettings","crema","animKey","sheetStyle","translation","Skew","effectParams","Impr","ClMg","$ecf7e04a3a5ae4fa$var$fieldToArrayExtType","Clrs","Trns","solidFillMulti","gradientFillMulti","dropShadowMulti","innerShadowMulti","frameFXMulti","keyList","$ecf7e04a3a5ae4fa$var$typeToField","$ecf7e04a3a5ae4fa$var$channels","$ecf7e04a3a5ae4fa$var$fieldToArrayType","$ecf7e04a3a5ae4fa$var$fieldToType","$ecf7e04a3a5ae4fa$var$_i","$ecf7e04a3a5ae4fa$var$_a","$ecf7e04a3a5ae4fa$var$type","$ecf7e04a3a5ae4fa$var$_b","$ecf7e04a3a5ae4fa$var$_c","$ecf7e04a3a5ae4fa$var$field","$ecf7e04a3a5ae4fa$var$_d","$ecf7e04a3a5ae4fa$var$_e","$ecf7e04a3a5ae4fa$var$_f","$ecf7e04a3a5ae4fa$var$_g","$ecf7e04a3a5ae4fa$var$readAsciiStringOrClassId","$ecf7e04a3a5ae4fa$var$writeAsciiStringOrClassId","$ecf7e04a3a5ae4fa$var$readDescriptorStructure","includeClass","struct","$ecf7e04a3a5ae4fa$var$readClassStructure","object","itemsCount","$ecf7e04a3a5ae4fa$var$readOSType","$ecf7e04a3a5ae4fa$var$readReferenceStructure","items","keyID","typeID","itemType","enumType","high","length_4","type1","valuesCount","charsCount","$ecf7e04a3a5ae4fa$var$writeDescriptorStructure","classId","keyCount","keys_1","$ecf7e04a3a5ae4fa$var$getTypeByKey","parent","extType","$ecf7e04a3a5ae4fa$var$writeOSType","$ecf7e04a3a5ae4fa$var$writeReferenceStructure","_key","$ecf7e04a3a5ae4fa$var$writeClassStructure","JSON","stringify","type_1","_type","type_2","$ecf7e04a3a5ae4fa$var$ObArTypes","length_5","$ecf7e04a3a5ae4fa$var$horzVrtcToXY","hv","$ecf7e04a3a5ae4fa$var$xyToHorzVrtc","$ecf7e04a3a5ae4fa$var$parseFxObject","fx","Styl","fillType","PntT","$ecf7e04a3a5ae4fa$var$parsePercent","$ecf7e04a3a5ae4fa$var$parseUnits","present","showInDialog","overprint","$ecf7e04a3a5ae4fa$var$parseColor","gradient","$ecf7e04a3a5ae4fa$var$parseGradientContent","pattern","$ecf7e04a3a5ae4fa$var$parsePatternContent","$ecf7e04a3a5ae4fa$var$serializeFxObject","$ecf7e04a3a5ae4fa$var$unitsPercent","$ecf7e04a3a5ae4fa$var$unitsValue","$ecf7e04a3a5ae4fa$var$serializeColor","$ecf7e04a3a5ae4fa$var$serializeGradientContent","$ecf7e04a3a5ae4fa$var$serializePatternContent","$ecf7e04a3a5ae4fa$var$serializeEffects","multi","$ecf7e04a3a5ae4fa$var$unitsPercentF","masterFXSwitch","arrayKeys_1","useMulti","useSingle","$ecf7e04a3a5ae4fa$var$serializeEffectObject","gradientOverlay","patternOverlay","satin","numModifyingFX","value_1","effect","$ecf7e04a3a5ae4fa$var$parseEffects","$ecf7e04a3a5ae4fa$var$parseEffectObject","$ecf7e04a3a5ae4fa$var$parseKeyList","selected","animInterpStyle","skew","rotation","gblA","$ecf7e04a3a5ae4fa$var$serializeKeyList","reportErrors","antialiased","align","technique","interpolationMethod","$ecf7e04a3a5ae4fa$var$parseAngle","altitude","soften","noise","choke","jitter","contour","$ecf7e04a3a5ae4fa$var$parseGradient","objName","objKey","uglg","Algn","Invr","Rvrs","bvlS","bvlD","GlwT","glwS","gs99","hglO","sdwO","$ecf7e04a3a5ae4fa$var$unitsAngle","lagl","Lald","Sftn","srgR","Inpr","Ckmt","ShdN","$ecf7e04a3a5ae4fa$var$serializeGradient","grad","GrdF","Smth","VctC","ShTr","samples_1","Intr","Lctn","Mdpn","samples_2","gradientsInterpolationMethod","Lnkd","$ecf7e04a3a5ae4fa$var$parsePercentOrAngle","Blck","Lmnc","redFloat","greenFloat","blueFloat","tr","track","trackID","fillCanvas","zoomOrigin","Effc","expectedUnits","sharp","crisp","strong","platform","platformLCD","arc","arcLower","arcUpper","arch","bulge","shellLower","shellUpper","wave","fish","rise","fisheye","squeeze","twist","cylinder","custom","up","down","softer","precise","center","linear","radial","reflected","diamond","sheetTransform","sheetPosition","globalLighting","perceptual","classic","hsb","lab","hsl","outside","inside","noImage","default","userGenerated","autoGenerated","matte","butt","square","miter","spin","zoom","draft","good","best","normal","medium","small","sine","triangle","uniform","gaussian","blocks","pyramids","random","lower","upper","wind","blast","stagger","duplication","$21c5fa39013f749a$var$isWhitespace","char","$21c5fa39013f749a$var$isNumber","skipWhitespace","getTextByte","pushContainer","pushValue","pushProperty","getText","parseFloat","$21c5fa39013f749a$var$floatKeys","$21c5fa39013f749a$var$intArrays","condensed","indent","writeString","writeIndent","writeProperty","writeValue","serializeFloat","toFixed","serializeNumber","isFloat","getKeys","splice","writeStringByte","inProperty","writePrefix","charAt","every","intArray","value_2","$4b1e3e7817bb5a66$var$__assign","$4b1e3e7817bb5a66$var$defaultFont","script","synthetic","$4b1e3e7817bb5a66$var$defaultParagraphStyle","justification","firstLineIndent","startIndent","endIndent","spaceBefore","spaceAfter","autoHyphenate","hyphenatedWordSize","preHyphen","postHyphen","consecutiveHyphens","zone","wordSpacing","letterSpacing","glyphSpacing","autoLeading","leadingType","hanging","burasagari","kinsokuOrder","everyLineComposer","$4b1e3e7817bb5a66$var$defaultStyle","font","fauxBold","fauxItalic","leading","tracking","autoKerning","kerning","baselineShift","fontCaps","fontBaseline","underline","strikethrough","ligatures","dLigatures","baselineDirection","tsume","styleRunAlignment","language","noBreak","fillColor","strokeColor","fillFlag","strokeFlag","fillFirst","yUnderline","outlineWidth","characterDirection","hindiNumbers","kashida","diacriticPos","$4b1e3e7817bb5a66$var$defaultGridInfo","isOn","show","leadingFillColor","alignLineHeightToGridFlags","$4b1e3e7817bb5a66$var$paragraphStyleKeys","$4b1e3e7817bb5a66$var$styleKeys","$4b1e3e7817bb5a66$var$antialias","$4b1e3e7817bb5a66$var$justification","$4b1e3e7817bb5a66$var$upperFirst","$4b1e3e7817bb5a66$var$encodeColor","Values","$4b1e3e7817bb5a66$var$arraysEqual","$4b1e3e7817bb5a66$var$objectsEqual","$4b1e3e7817bb5a66$var$decodeObject","fonts","Key","$4b1e3e7817bb5a66$var$decodeColor","$4b1e3e7817bb5a66$var$encodeObject","keys_2","$4b1e3e7817bb5a66$var$findOrAddFont","$4b1e3e7817bb5a66$var$deduplicateValues","runs","identical","styleValue","runs_1","same","keys_3","engineDict","EngineDict","resourceDict","FontSet","Name","Script","FontType","Synthetic","Editor","Text","removedCharacters","AntiAlias","useFractionalGlyphWidths","UseFractionalGlyphWidths","superscriptSize","SuperscriptSize","superscriptPosition","SuperscriptPosition","subscriptSize","SubscriptSize","subscriptPosition","SubscriptPosition","smallCapSize","SmallCapSize","photoshop","Rendered","Shapes","Children","Cookie","Photoshop","shapeType","ShapeType","PointBase","pointBase","BoxBounds","boxBounds","paragraphRun","ParagraphRun","paragraphStyle","paragraphStyleRuns","RunArray","run_1","RunLengthArray","ParagraphSheet","Properties","counter","styleRun","StyleRun","styleRuns","StyleSheet","StyleSheetData","_l","_m","defFont","paragraphRunArray","paragraphRunLengthArray","paragraphRuns","leftLength_1","paragraphRuns_1","run_2","runLength","DefaultStyleSheet","Adjustments","Axis","XY","styleSheetData","styleRunArray","styleRunLengthArray","leftLength","_o","styleRuns_1","run_3","gridInfo","WritingDirection","Procession","TransformPoint0","TransformPoint1","TransformPoint2","defaultResources","KinsokuSet","NoStart","NoEnd","Keep","Hanging","MojiKumiSet","InternalName","TheNormalStyleSheet","TheNormalParagraphSheet","ParagraphSheetSet","StyleSheetSet","DefaultRunData","IsJoinable","GridInfo","GridIsOn","ShowGrid","GridSize","GridLeading","GridColor","GridLeadingFillColor","AlignLineHeightToGridFlags","Version","Lines","DocumentResources","$9d214166cfbe7e30$var$keysColor","uproot","$9d214166cfbe7e30$var$keysStyleSheet","$9d214166cfbe7e30$var$keysParagraph","$9d214166cfbe7e30$var$keysStyleSheetData","$9d214166cfbe7e30$var$keysRoot","$9d214166cfbe7e30$var$decodeObj","readAbr","$0a8225ae4984856a$var$dynamicsControl","$0a8225ae4984856a$var$toBrushType","MixB","SmTl","$0a8225ae4984856a$var$parseDynamics","control","bVTy","steps","fStp","minimum","$0a8225ae4984856a$var$parseBrushShape","shape","Dmtr","roundness","Rndn","spacingOn","spacing","flipX","flipY","Hrdn","hardness","sampledData","samples","brushes","patterns","minorVersion","brushLength","brushEnd","bithDepth","Brsh","brush","wetEdges","Wtdg","useBrushSize","interpretation","protectTexture","useTipDynamics","shapeDynamics","tiltScale","sizeDynamics","szVr","angleDynamics","roundnessDynamics","brushProjection","minimumDiameter","minimumRoundness","useScatter","scatter","bothAxes","countDynamics","scatterDynamics","useTexture","Txtr","texture","textureBlendMode","textureDepth","depthMinimum","minimumDepth","depthDynamics","textureDepthDynamics","textureScale","InvT","textureBrightness","textureContrast","db","dualBrush","useDualBrush","Flip","useColorDynamics","colorDynamics","foregroundBackground","clVr","purity","perTip","colorDynamicsPerTip","usePaintDynamics","transfer","flowDynamics","prVr","opacityDynamics","opVr","wetnessDynamics","wtVr","mixDynamics","mxVr","useBrushPose","brushPose","overrideAngle","overridePoseAngle","overrideTiltX","overridePoseTiltX","overrideTiltY","overridePoseTiltY","overridePressure","overridePosePressure","pressure","brushPosePressure","tiltX","brushPoseTiltX","tiltY","brushPoseTiltY","brushPoseAngle","toolOptions","brushPreset","flow","smoothing","smoothingValue","smoothingRadiusMode","smoothingCatchup","smoothingCatchupAtEnd","smoothingZoomCompensation","pressureSmoothing","usePressureOverridesSize","usePressureOverridesOpacity","wetness","dryness","mix","autoFill","autoClean","loadSolidColorOnly","sampleAllLayers","smudgeFingerPainting","SmdF","smudgeSampleAllLayers","SmdS","hierarchy","$28eaddf107490bfc$var$__assign","readCsh","csh","shapes","ColorMode","SectionDividerType","LayerCompCapturedInfo"],"version":3,"file":"dist.9a7dd667.js.map"}