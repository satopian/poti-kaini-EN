{"mappings":"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;gBACV,UAAU;YACd;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;YACd;SACH;IACL;IACA;QACI,MAAM;QACN,UAAU;QACV,UAAU;YACN;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;YACd;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;YACd;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,OAAO,CAAA,GAAA,SAAC,AAAD,EAAE;YACb;YACA;gBACI,MAAM;YACV;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;YACd;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;YACd;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;YACd;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;YACd;YACA;gBACI,MAAM;YACV;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;YACd;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;YACd;YACA;gBACI,MAAM;YACV;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;YACd;SACH;IACL;IACA;QACI,MAAM;QACN,UAAU;QACV,UAAU;YACN;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;YACd;YACA;gBACI,MAAM;YACV;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;YACd;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;YACd;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;YACd;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;YACd;YACA;gBACI,MAAM;YACV;YACA;gBACI,oBAAoB;gBACpB,MAAM;gBACN,QAAQ;YACZ;YACA;gBACI,oBAAoB;gBACpB,MAAM;gBACN,QAAQ;gBACR,UAAU;YACd;YACA;gBACI,oBAAoB;gBACpB,MAAM;gBACN,QAAQ;gBACR,UAAU;YACd;YACA;gBACI,MAAM;YACV;YACA;gBACI,oBAAoB;gBACpB,MAAM;gBACN,QAAQ;YACZ;YACA;gBACI,oBAAoB;gBACpB,MAAM;gBACN,QAAQ;YACZ;SACH;IACL;IACA;QACI,MAAM;QACN,UAAU;QACV,UAAU;YACN;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;YACd;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;YACd;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;YACd;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;YACd;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;gBACV,OAAO,CAAA,GAAA,SAAC,AAAD,EAAE;YACb;YACA;gBACI,MAAM;YACV;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,OAAO,CAAA,GAAA,SAAC,AAAD,EAAE;YACb;YACA;gBACI,MAAM;YACV;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;YACd;YACA;gBACI,MAAM;YACV;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,OAAO,CAAA,GAAA,SAAC,AAAD,EAAE;YACb;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,OAAO,CAAA,GAAA,SAAC,AAAD,EAAE;YACb;SACH;IACL;IACA;QACI,MAAM;QACN,UAAU;QACV,UAAU;YACN;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;gBACV,SAAS;YACb;YACA;gBACI,MAAM;YACV;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;YACd;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;YACd;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;YACd;YACA;gBACI,MAAM;YACV;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;YACd;YACA;gBACI,MAAM;YACV;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;YACd;YACA;gBACI,MAAM;YACV;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,OAAO,CAAA,GAAA,SAAC,AAAD,EACH;gBAEJ,UAAU;gBACV,SAAS;YACb;YACA;gBACI,MAAM;YACV;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;gBACV,UAAU;gBACV,SAAS;YACb;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;YACd;SACH;IACL;IACA;QACI,MAAM;QACN,UAAU;QACV,UAAU;YACN;gBACI,MAAM;gBACN,QAAQ;gBACR,OAAO,CAAA,GAAA,SAAC,AAAD,EAAE;YACb;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;gBACV,OAAO,CAAA,GAAA,SAAC,AAAD,EAAE;YACb;YACA;gBACI,MAAM;YACV;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;gBACV,SAAS;YACb;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;gBACV,SAAS;YACb;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;gBACV,SAAS;YACb;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;gBACV,SAAS;YACb;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;gBACV,SAAS;YACb;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;gBACV,SAAS;YACb;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;gBACV,SAAS;YACb;YACA;gBACI,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,UAAU;gBACV,SAAS;YACb;SACH;IACL;IACA;QACI,MAAM;QACN,UAAU;QACV,UAAU;YACN;gBACI,MAAM;gBACN,UAAU;gBACV,QAAQ;YACZ;YACA;gBACI,MAAM;g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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-e0398527fd418d60.js","js/ChickenPaint.js","js/engine/CPBrushInfo.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","js/engine/CPArtwork.js","js/engine/CPImageLayer.js","js/engine/CPColorBmp.js","js/engine/CPBitmap.js","js/util/CPRect.js","js/browser/util/Canvas.js","js/engine/CPLayer.js","js/engine/CPLayerGroup.js","js/engine/CPBlend.js","js/engine/CPGreyBmp.js","js/engine/CPBlendAdditional.js","js/engine/CPBlendTree.js","js/engine/CPMaskView.js","node_modules/wolfy87-eventemitter/EventEmitter.js","js/engine/CPBrushManager.js","js/engine/CPUndo.js","js/engine/CPClip.js","js/util/CPColor.js","js/util/CPRandom.js","js/util/CPTransform.js","js/util/CPPolyfill.js","js/engine/CPBrushTool.js","js/util/CPColorFloat.js","js/engine/CPResourceLoader.js","js/engine/CPChibiFile.js","js/util/ArrayDataStream.js","node_modules/pako/index.js","node_modules/pako/lib/utils/common.js","node_modules/pako/lib/deflate.js","node_modules/pako/lib/zlib/deflate.js","node_modules/pako/lib/zlib/trees.js","node_modules/pako/lib/zlib/adler32.js","node_modules/pako/lib/zlib/crc32.js","node_modules/pako/lib/zlib/messages.js","node_modules/pako/lib/utils/strings.js","node_modules/pako/lib/zlib/zstream.js","node_modules/pako/lib/inflate.js","node_modules/pako/lib/zlib/inflate.js","node_modules/pako/lib/zlib/inffast.js","node_modules/pako/lib/zlib/inftrees.js","node_modules/pako/lib/zlib/constants.js","node_modules/pako/lib/zlib/gzheader.js","js/util/AdobeColorTable.js","js/engine/CPResourceSaver.js","node_modules/file-saver/dist/FileSaver.min.js","node_modules/file-saver/src/FileSaver.js","js/languages/lang.js","js/languages/en.json","js/languages/ja.json","js/gui/CPSplashScreen.js","js/gui/CPMainGUI.js","node_modules/bootstrap/dist/js/bootstrap.bundle.min.js","node_modules/bootstrap/js/src/dom/data.js","node_modules/bootstrap/js/src/util/index.js","node_modules/bootstrap/js/src/dom/event-handler.js","node_modules/bootstrap/js/src/dom/manipulator.js","node_modules/bootstrap/js/src/util/config.js","node_modules/bootstrap/js/src/base-component.js","node_modules/bootstrap/js/src/dom/selector-engine.js","node_modules/bootstrap/js/src/util/component-functions.js","node_modules/bootstrap/js/src/alert.js","node_modules/bootstrap/js/src/button.js","node_modules/bootstrap/js/src/util/swipe.js","node_modules/bootstrap/js/src/carousel.js","node_modules/bootstrap/js/src/collapse.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/enums.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getNodeName.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getWindow.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/modifiers/applyStyles.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/getBasePlacement.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/math.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/userAgent.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/contains.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/isTableElement.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getParentNode.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/within.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/mergePaddingObject.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/getFreshSideObject.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/expandToHashMap.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/modifiers/arrow.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/getVariation.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/modifiers/computeStyles.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/modifiers/eventListeners.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/getOppositePlacement.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/rectToClientRect.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/computeOffsets.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/detectOverflow.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/modifiers/flip.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/modifiers/hide.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/modifiers/offset.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/modifiers/popperOffsets.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/modifiers/preventOverflow.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/getAltAxis.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/orderModifiers.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/createPopper.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/debounce.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/mergeByName.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/popper-lite.js","node_modules/bootstrap/node_modules/@popperjs/core/lib/popper.js","node_modules/bootstrap/js/src/dropdown.js","node_modules/bootstrap/js/src/util/backdrop.js","node_modules/bootstrap/js/src/util/focustrap.js","node_modules/bootstrap/js/src/util/scrollbar.js","node_modules/bootstrap/js/src/modal.js","node_modules/bootstrap/js/src/offcanvas.js","node_modules/bootstrap/js/src/util/sanitizer.js","node_modules/bootstrap/js/src/util/template-factory.js","node_modules/bootstrap/js/src/tooltip.js","node_modules/bootstrap/js/src/popover.js","node_modules/bootstrap/js/src/scrollspy.js","node_modules/bootstrap/js/src/tab.js","node_modules/bootstrap/js/src/toast.js","node_modules/bootstrap/js/index.umd.js","js/gui/CPCanvas.js","lib/keymaster.js","js/util/CPBezier.js","js/util/throttle-debounce.js","js/util/CPPolygon.js","js/util/CPVector.js","js/gui/CPGUIUtils.js","js/gui/CPScrollbar.js","js/gui/CPPaletteManager.js","js/gui/CPToolPalette.js","js/gui/CPPalette.js","js/gui/CPMiscPalette.js","js/gui/CPStrokePalette.js","js/gui/CPColorPalette.js","js/gui/CPColorSelect.js","js/gui/CPColorSlider.js","js/gui/CPBrushPalette.js","js/gui/CPCheckbox.js","js/gui/CPColorSwatch.js","js/gui/CPSlider.js","js/gui/CPLayersPalette.js","js/gui/CPTexturePalette.js","js/engine/CPLookUpTable.js","js/gui/CPSwatchesPalette.js","js/gui/CPMainMenu.js","js/gui/CPAboutDialog.js","js/gui/CPConfirmTransformDialog.js","js/gui/CPShortcutsDialog.js","js/gui/CPBoxBlurDialog.js","js/gui/CPTabletDialog.js","js/gui/CPGridDialog.js","js/gui/CPSendDialog.js","js/gui/CPUserPreferences.js"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SERVER_PORT = 1234;var HMR_SECURE = false;var HMR_ENV_HASH = \"439701173a9199ea\";var HMR_USE_SSE = false;module.bundle.HMR_BUNDLE_ID = \"d578fb09dd9a59b3\";\"use strict\";\n\n/* global HMR_HOST, HMR_PORT, HMR_SERVER_PORT, HMR_ENV_HASH, HMR_SECURE, HMR_USE_SSE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: {|[string]: mixed|};\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ninterface ExtensionContext {\n  runtime: {|\n    reload(): void,\n    getURL(url: string): string;\n    getManifest(): {manifest_version: number, ...};\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_SERVER_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\ndeclare var HMR_USE_SSE: boolean;\ndeclare var chrome: ExtensionContext;\ndeclare var browser: ExtensionContext;\ndeclare var __parcel__import__: (string) => Promise<void>;\ndeclare var __parcel__importScripts__: (string) => Promise<void>;\ndeclare var globalThis: typeof self;\ndeclare var ServiceWorkerGlobalScope: Object;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData[moduleName],\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData[moduleName] = undefined;\n}\nmodule.bundle.Module = Module;\nmodule.bundle.hotData = {};\nvar checkedAssets /*: {|[string]: boolean|} */,\n  disposedAssets /*: {|[string]: boolean|} */,\n  assetsToDispose /*: Array<[ParcelRequire, string]> */,\n  assetsToAccept /*: Array<[ParcelRequire, string]> */,\n  bundleNotFound = false;\nfunction getHostname() {\n  return HMR_HOST || (typeof location !== 'undefined' && location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\nfunction getPort() {\n  return HMR_PORT || (typeof location !== 'undefined' ? location.port : HMR_SERVER_PORT);\n}\n\n// eslint-disable-next-line no-redeclare\nlet WebSocket = globalThis.WebSocket;\nif (!WebSocket && typeof module.bundle.root === 'function') {\n  try {\n    // eslint-disable-next-line no-global-assign\n    WebSocket = module.bundle.root('ws');\n  } catch {\n    // ignore.\n  }\n}\nvar hostname = getHostname();\nvar port = getPort();\nvar protocol = HMR_SECURE || typeof location !== 'undefined' && location.protocol === 'https:' && !['localhost', '127.0.0.1', '0.0.0.0'].includes(hostname) ? 'wss' : 'ws';\n\n// eslint-disable-next-line no-redeclare\nvar parent = module.bundle.parent;\nif (!parent || !parent.isParcelRequire) {\n  // Web extension context\n  var extCtx = typeof browser === 'undefined' ? typeof chrome === 'undefined' ? null : chrome : browser;\n\n  // Safari doesn't support sourceURL in error stacks.\n  // eval may also be disabled via CSP, so do a quick check.\n  var supportsSourceURL = false;\n  try {\n    (0, eval)('throw new Error(\"test\"); //# sourceURL=test.js');\n  } catch (err) {\n    supportsSourceURL = err.stack.includes('test.js');\n  }\n  var ws;\n  if (HMR_USE_SSE) {\n    ws = new EventSource('/__parcel_hmr');\n  } else {\n    try {\n      // If we're running in the dev server's node runner, listen for messages on the parent port.\n      let {\n        workerData,\n        parentPort\n      } = module.bundle.root('node:worker_threads') /*: any*/;\n      if (workerData !== null && workerData !== void 0 && workerData.__parcel) {\n        parentPort.on('message', async message => {\n          try {\n            await handleMessage(message);\n            parentPort.postMessage('updated');\n          } catch {\n            parentPort.postMessage('restart');\n          }\n        });\n\n        // After the bundle has finished running, notify the dev server that the HMR update is complete.\n        queueMicrotask(() => parentPort.postMessage('ready'));\n      }\n    } catch {\n      if (typeof WebSocket !== 'undefined') {\n        try {\n          ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');\n        } catch (err) {\n          // Ignore cloudflare workers error.\n          if (err.message && !err.message.includes('Disallowed operation called within global scope')) {\n            console.error(err.message);\n          }\n        }\n      }\n    }\n  }\n  if (ws) {\n    // $FlowFixMe\n    ws.onmessage = async function (event /*: {data: string, ...} */) {\n      var data /*: HMRMessage */ = JSON.parse(event.data);\n      await handleMessage(data);\n    };\n    if (ws instanceof WebSocket) {\n      ws.onerror = function (e) {\n        if (e.message) {\n          console.error(e.message);\n        }\n      };\n      ws.onclose = function () {\n        console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n      };\n    }\n  }\n}\nasync function handleMessage(data /*: HMRMessage */) {\n  checkedAssets = {} /*: {|[string]: boolean|} */;\n  disposedAssets = {} /*: {|[string]: boolean|} */;\n  assetsToAccept = [];\n  assetsToDispose = [];\n  bundleNotFound = false;\n  if (data.type === 'reload') {\n    fullReload();\n  } else if (data.type === 'update') {\n    // Remove error overlay if there is one\n    if (typeof document !== 'undefined') {\n      removeErrorOverlay();\n    }\n    let assets = data.assets;\n\n    // Handle HMR Update\n    let handled = assets.every(asset => {\n      return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n    });\n\n    // Dispatch a custom event in case a bundle was not found. This might mean\n    // an asset on the server changed and we should reload the page. This event\n    // gives the client an opportunity to refresh without losing state\n    // (e.g. via React Server Components). If e.preventDefault() is not called,\n    // we will trigger a full page reload.\n    if (handled && bundleNotFound && assets.some(a => a.envHash !== HMR_ENV_HASH) && typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n      handled = !window.dispatchEvent(new CustomEvent('parcelhmrreload', {\n        cancelable: true\n      }));\n    }\n    if (handled) {\n      console.clear();\n\n      // Dispatch custom event so other runtimes (e.g React Refresh) are aware.\n      if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n        window.dispatchEvent(new CustomEvent('parcelhmraccept'));\n      }\n      await hmrApplyUpdates(assets);\n      hmrDisposeQueue();\n\n      // Run accept callbacks. This will also re-execute other disposed assets in topological order.\n      let processedAssets = {};\n      for (let i = 0; i < assetsToAccept.length; i++) {\n        let id = assetsToAccept[i][1];\n        if (!processedAssets[id]) {\n          hmrAccept(assetsToAccept[i][0], id);\n          processedAssets[id] = true;\n        }\n      }\n    } else fullReload();\n  }\n  if (data.type === 'error') {\n    // Log parcel errors to console\n    for (let ansiDiagnostic of data.diagnostics.ansi) {\n      let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n      console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n    }\n    if (typeof document !== 'undefined') {\n      // Render the fancy html overlay\n      removeErrorOverlay();\n      var overlay = createErrorOverlay(data.diagnostics.html);\n      // $FlowFixMe\n      document.body.appendChild(overlay);\n    }\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"${protocol === 'wss' ? 'https' : 'http'}://${hostname}:${port}/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          🚨 ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n        <div>\n          ${diagnostic.hints.map(hint => '<div>💡 ' + hint + '</div>').join('')}\n        </div>\n        ${diagnostic.documentation ? `<div>📝 <a style=\"color: violet\" href=\"${diagnostic.documentation}\" target=\"_blank\">Learn more</a></div>` : ''}\n      </div>\n    `;\n  }\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\nfunction fullReload() {\n  if (typeof location !== 'undefined' && 'reload' in location) {\n    location.reload();\n  } else if (typeof extCtx !== 'undefined' && extCtx && extCtx.runtime && extCtx.runtime.reload) {\n    extCtx.runtime.reload();\n  } else {\n    try {\n      let {\n        workerData,\n        parentPort\n      } = module.bundle.root('node:worker_threads') /*: any*/;\n      if (workerData !== null && workerData !== void 0 && workerData.__parcel) {\n        parentPort.postMessage('restart');\n      }\n    } catch (err) {\n      console.error('[parcel] ⚠️ An HMR update was not accepted. Please restart the process.');\n    }\n  }\n}\nfunction getParents(bundle, id) /*: Array<[ParcelRequire, string]> */{\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n  var parents = [];\n  var k, d, dep;\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n  return parents;\n}\nfunction updateLink(link) {\n  var href = link.getAttribute('href');\n  if (!href) {\n    return;\n  }\n  var newLink = link.cloneNode();\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n  newLink.setAttribute('href',\n  // $FlowFixMe\n  href.split('?')[0] + '?' + Date.now());\n  // $FlowFixMe\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\nvar cssTimeout = null;\nfunction reloadCSS() {\n  if (cssTimeout || typeof document === 'undefined') {\n    return;\n  }\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href /*: string */ = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n    cssTimeout = null;\n  }, 50);\n}\nfunction hmrDownload(asset) {\n  if (asset.type === 'js') {\n    if (typeof document !== 'undefined') {\n      let script = document.createElement('script');\n      script.src = asset.url + '?t=' + Date.now();\n      if (asset.outputFormat === 'esmodule') {\n        script.type = 'module';\n      }\n      return new Promise((resolve, reject) => {\n        var _document$head;\n        script.onload = () => resolve(script);\n        script.onerror = reject;\n        (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);\n      });\n    } else if (typeof importScripts === 'function') {\n      // Worker scripts\n      if (asset.outputFormat === 'esmodule') {\n        return __parcel__import__(asset.url + '?t=' + Date.now());\n      } else {\n        return new Promise((resolve, reject) => {\n          try {\n            __parcel__importScripts__(asset.url + '?t=' + Date.now());\n            resolve();\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }\n    }\n  }\n}\nasync function hmrApplyUpdates(assets) {\n  global.parcelHotUpdate = Object.create(null);\n  let scriptsToRemove;\n  try {\n    // If sourceURL comments aren't supported in eval, we need to load\n    // the update from the dev server over HTTP so that stack traces\n    // are correct in errors/logs. This is much slower than eval, so\n    // we only do it if needed (currently just Safari).\n    // https://bugs.webkit.org/show_bug.cgi?id=137297\n    // This path is also taken if a CSP disallows eval.\n    if (!supportsSourceURL) {\n      let promises = assets.map(asset => {\n        var _hmrDownload;\n        return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch(err => {\n          // Web extension fix\n          if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {\n            extCtx.runtime.reload();\n            return;\n          }\n          throw err;\n        });\n      });\n      scriptsToRemove = await Promise.all(promises);\n    }\n    assets.forEach(function (asset) {\n      hmrApply(module.bundle.root, asset);\n    });\n  } finally {\n    delete global.parcelHotUpdate;\n    if (scriptsToRemove) {\n      scriptsToRemove.forEach(script => {\n        if (script) {\n          var _document$head2;\n          (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);\n        }\n      });\n    }\n  }\n}\nfunction hmrApply(bundle /*: ParcelRequire */, asset /*:  HMRAsset */) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        let oldDeps = modules[asset.id][1];\n        for (let dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            let id = oldDeps[dep];\n            let parents = getParents(module.bundle.root, id);\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n      if (supportsSourceURL) {\n        // Global eval. We would use `new Function` here but browser\n        // support for source maps is better with eval.\n        (0, eval)(asset.output);\n      }\n\n      // $FlowFixMe\n      let fn = global.parcelHotUpdate[asset.id];\n      modules[asset.id] = [fn, deps];\n    }\n\n    // Always traverse to the parent bundle, even if we already replaced the asset in this bundle.\n    // This is required in case modules are duplicated. We need to ensure all instances have the updated code.\n    if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\nfunction hmrDelete(bundle, id) {\n  let modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    let deps = modules[id][1];\n    let orphans = [];\n    for (let dep in deps) {\n      let parents = getParents(module.bundle.root, deps[dep]);\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    }\n\n    // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n    delete modules[id];\n    delete bundle.cache[id];\n\n    // Now delete the orphans.\n    orphans.forEach(id => {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\nfunction hmrAcceptCheck(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  checkedAssets = {};\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  }\n\n  // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n  let parents = getParents(module.bundle.root, id);\n  let accepted = false;\n  while (parents.length > 0) {\n    let v = parents.shift();\n    let a = hmrAcceptCheckOne(v[0], v[1], null);\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else if (a !== null) {\n      // Otherwise, queue the parents in the next level upward.\n      let p = getParents(module.bundle.root, v[1]);\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n      parents.push(...p);\n    }\n  }\n  return accepted;\n}\nfunction hmrAcceptCheckOne(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      bundleNotFound = true;\n      return true;\n    }\n    return hmrAcceptCheckOne(bundle.parent, id, depsByBundle);\n  }\n  if (checkedAssets[id]) {\n    return null;\n  }\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  if (!cached) {\n    return true;\n  }\n  assetsToDispose.push([bundle, id]);\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    assetsToAccept.push([bundle, id]);\n    return true;\n  }\n  return false;\n}\nfunction hmrDisposeQueue() {\n  // Dispose all old assets.\n  for (let i = 0; i < assetsToDispose.length; i++) {\n    let id = assetsToDispose[i][1];\n    if (!disposedAssets[id]) {\n      hmrDispose(assetsToDispose[i][0], id);\n      disposedAssets[id] = true;\n    }\n  }\n  assetsToDispose = [];\n}\nfunction hmrDispose(bundle /*: ParcelRequire */, id /*: string */) {\n  var cached = bundle.cache[id];\n  bundle.hotData[id] = {};\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData[id];\n  }\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData[id]);\n    });\n  }\n  delete bundle.cache[id];\n}\nfunction hmrAccept(bundle /*: ParcelRequire */, id /*: string */) {\n  // Execute the module.\n  bundle(id);\n\n  // Run the accept callbacks in the new version of the module.\n  var cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    let assetsToAlsoAccept = [];\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      let additionalAssets = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n      if (Array.isArray(additionalAssets) && additionalAssets.length) {\n        assetsToAlsoAccept.push(...additionalAssets);\n      }\n    });\n    if (assetsToAlsoAccept.length) {\n      let handled = assetsToAlsoAccept.every(function (a) {\n        return hmrAcceptCheck(a[0], a[1]);\n      });\n      if (!handled) {\n        return fullReload();\n      }\n      hmrDisposeQueue();\n    }\n  }\n}","/*\n    ChickenPaint Be\n    https://github.com/satopian/ChickenPaint_Be\n    by satopian\n    Customized from ChickenPaint by Nicholas Sherlock.\n    GNU GENERAL PUBLIC LICENSE\n    Version 3, 29 June 2007\n    <http://www.gnu.org/licenses/>\n*/\n/*\n    ChickenPaint\n\n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\n    by Nicholas Sherlock / Chicken Smoothie.\n\n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n    ChickenPaint is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ChickenPaint is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport CPBrushInfo from \"./engine/CPBrushInfo.js\";\nimport CPArtwork from \"./engine/CPArtwork.js\";\nimport CPResourceLoader from \"./engine/CPResourceLoader.js\";\nimport CPResourceSaver from \"./engine/CPResourceSaver.js\";\n\nimport CPSplashScreen from \"./gui/CPSplashScreen.js\";\n\nimport CPMainGUI from \"./gui/CPMainGUI.js\";\n\nimport CPAboutDialog from \"./gui/CPAboutDialog.js\";\nimport CPConfirmTransformDialog from \"./gui/CPConfirmTransformDialog.js\";\nimport CPShortcutsDialog from \"./gui/CPShortcutsDialog.js\";\nimport CPBoxBlurDialog from \"./gui/CPBoxBlurDialog.js\";\nimport CPTabletDialog from \"./gui/CPTabletDialog.js\";\nimport CPGridDialog from \"./gui/CPGridDialog.js\";\nimport CPSendDialog from \"./gui/CPSendDialog.js\";\n\nimport { isCanvasInterpolationSupported } from \"./util/CPPolyfill.js\";\nimport CPColor from \"./util/CPColor.js\";\nimport CPRect from \"./util/CPRect.js\";\n\nimport EventEmitter from \"wolfy87-eventemitter\";\nimport {\n    currentLanguage,\n    guessLanguage,\n    setLanguage,\n    _,\n} from \"./languages/lang.js\";\nimport CPUserPreferences from \"./gui/CPUserPreferences.js\";\n\nfunction isSmallScreen() {\n    return Boolean(\n        typeof navigator.maxTouchPoints === \"number\" &&\n            navigator.maxTouchPoints > 2 &&\n            (window.screen.width <= 820 || window.screen.height <= 820)\n    );\n}\n\nfunction createDrawingTools() {\n    let tools = new Array(ChickenPaint.T_MAX);\n\n    tools[ChickenPaint.T_PENCIL] = new CPBrushInfo({\n        toolNb: ChickenPaint.T_PENCIL,\n        size: 16,\n        alpha: 255,\n        isAA: true,\n        minSpacing: 0.5,\n        spacing: 0.05,\n        pressureSize: false,\n        pressureAlpha: true,\n        tip: CPBrushInfo.TIP_ROUND_AA,\n        brushMode: CPBrushInfo.BRUSH_MODE_PAINT,\n        paintMode: CPBrushInfo.PAINT_MODE_OPACITY,\n    });\n\n    tools[ChickenPaint.T_ERASER] = new CPBrushInfo({\n        toolNb: ChickenPaint.T_ERASER,\n        size: 16,\n        alpha: 255,\n        isAA: true,\n        minSpacing: 0.5,\n        spacing: 0.05,\n        pressureSize: false,\n        pressureAlpha: false,\n        texture: 0, //消しゴムはテクスチャの影響を受けない。\n        tip: CPBrushInfo.TIP_ROUND_AA,\n        brushMode: CPBrushInfo.BRUSH_MODE_ERASE,\n        paintMode: CPBrushInfo.PAINT_MODE_OPACITY,\n    });\n\n    tools[ChickenPaint.T_PEN] = new CPBrushInfo({\n        toolNb: ChickenPaint.T_PEN,\n        size: 2,\n        alpha: 128,\n        isAA: true,\n        minSpacing: 0.5,\n        spacing: 0.05,\n        pressureSize: true,\n        pressureAlpha: false,\n        tip: CPBrushInfo.TIP_ROUND_AA,\n        brushMode: CPBrushInfo.BRUSH_MODE_PAINT,\n        paintMode: CPBrushInfo.PAINT_MODE_FLOW,\n        alphaScale: 1 / 2,\n    });\n\n    tools[ChickenPaint.T_SOFTERASER] = new CPBrushInfo({\n        toolNb: ChickenPaint.T_SOFTERASER,\n        size: 16,\n        alpha: 64,\n        isAA: false,\n        minSpacing: 0.5,\n        spacing: 0.05,\n        pressureSize: false,\n        pressureAlpha: true,\n        texture: 1, //薄消しゴムはテクスチャが出る。\n        tip: CPBrushInfo.TIP_ROUND_AIRBRUSH,\n        brushMode: CPBrushInfo.BRUSH_MODE_ERASE,\n        paintMode: CPBrushInfo.PAINT_MODE_FLOW,\n        alphaScale: 1 / 8,\n    });\n\n    tools[ChickenPaint.T_AIRBRUSH] = new CPBrushInfo({\n        toolNb: ChickenPaint.T_AIRBRUSH,\n        size: 50,\n        alpha: 32,\n        isAA: false,\n        minSpacing: 0.5,\n        spacing: 0.05,\n        pressureSize: false,\n        pressureAlpha: true,\n        tip: CPBrushInfo.TIP_ROUND_AIRBRUSH,\n        brushMode: CPBrushInfo.BRUSH_MODE_PAINT,\n        paintMode: CPBrushInfo.PAINT_MODE_FLOW,\n        alphaScale: 1 / 8,\n    });\n\n    tools[ChickenPaint.T_DODGE] = new CPBrushInfo({\n        toolNb: ChickenPaint.T_DODGE,\n        size: 30,\n        alpha: 32,\n        isAA: false,\n        minSpacing: 0.5,\n        spacing: 0.05,\n        pressureSize: false,\n        pressureAlpha: true,\n        tip: CPBrushInfo.TIP_ROUND_AIRBRUSH,\n        brushMode: CPBrushInfo.BRUSH_MODE_DODGE,\n        paintMode: CPBrushInfo.PAINT_MODE_FLOW,\n        alphaScale: 1 / 8,\n    });\n\n    tools[ChickenPaint.T_BURN] = new CPBrushInfo({\n        toolNb: ChickenPaint.T_BURN,\n        size: 30,\n        alpha: 32,\n        isAA: false,\n        minSpacing: 0.5,\n        spacing: 0.05,\n        pressureSize: false,\n        pressureAlpha: true,\n        tip: CPBrushInfo.TIP_ROUND_AIRBRUSH,\n        brushMode: CPBrushInfo.BRUSH_MODE_BURN,\n        paintMode: CPBrushInfo.PAINT_MODE_FLOW,\n        alphaScale: 1 / 8,\n    });\n\n    tools[ChickenPaint.T_WATER] = new CPBrushInfo({\n        toolNb: ChickenPaint.T_WATER,\n        size: 30,\n        alpha: 70,\n        isAA: false,\n        minSpacing: 0.5,\n        spacing: 0.02,\n        pressureSize: false,\n        pressureAlpha: true,\n        tip: CPBrushInfo.TIP_ROUND_AA,\n        brushMode: CPBrushInfo.BRUSH_MODE_WATER,\n        paintMode: CPBrushInfo.PAINT_MODE_FLOW,\n        alphaScale: 1 / 8,\n        resat: 0.3,\n        bleed: 0.6,\n    });\n\n    tools[ChickenPaint.T_BLUR] = new CPBrushInfo({\n        toolNb: ChickenPaint.T_BLUR,\n        size: 20,\n        alpha: 255,\n        isAA: false,\n        minSpacing: 0.5,\n        spacing: 0.05,\n        pressureSize: false,\n        pressureAlpha: true,\n        tip: CPBrushInfo.TIP_ROUND_PIXEL,\n        brushMode: CPBrushInfo.BRUSH_MODE_BLUR,\n        paintMode: CPBrushInfo.PAINT_MODE_FLOW,\n        alphaScale: 1 / 8,\n    });\n\n    tools[ChickenPaint.T_SMUDGE] = new CPBrushInfo({\n        toolNb: ChickenPaint.T_SMUDGE,\n        size: 20,\n        alpha: 128,\n        isAA: false,\n        minSpacing: 0.5,\n        spacing: 0.01,\n        pressureSize: false,\n        pressureAlpha: true,\n        tip: CPBrushInfo.TIP_ROUND_AIRBRUSH,\n        brushMode: CPBrushInfo.BRUSH_MODE_SMUDGE,\n        paintMode: CPBrushInfo.PAINT_MODE_FLOW,\n        alphaScale: 1 / 8,\n        resat: 0.0,\n        bleed: 1.0,\n    });\n\n    tools[ChickenPaint.T_BLENDER] = new CPBrushInfo({\n        toolNb: ChickenPaint.T_BLENDER,\n        size: 20,\n        alpha: 60,\n        isAA: false,\n        minSpacing: 0.5,\n        spacing: 0.1,\n        pressureSize: false,\n        pressureAlpha: true,\n        tip: CPBrushInfo.TIP_ROUND_AIRBRUSH,\n        brushMode: CPBrushInfo.BRUSH_MODE_OIL,\n        paintMode: CPBrushInfo.PAINT_MODE_FLOW,\n        alphaScale: 1 / 8,\n        resat: 0.0,\n        bleed: 0.07,\n    });\n\n    return tools;\n}\n\n/**\n * @typedef {Object} ChickenPaintOptions\n *\n * @property {Element} uiElem   - DOM element to insert ChickenPaint into\n *\n * @property {Function} [onLoaded] - Callback to call when artwork loading completes\n *\n * @property {number} [canvasWidth]  - Width in pixels to use when creating blank canvases (defaults to 800)\n * @property {number} [canvasHeight] - Height in pixels to use when creating blank canvases (defaults to 600)\n * @property {number} [rotation]     - Integer from [0..3], number of 90 degree right rotations that should be applied to\n *                                the canvas after loading\n *\n * @property {string} [saveUrl]   - URL to POST the drawing to to save it\n * @property {string} [postUrl]   - URL to navigate to after saving is successful and the user chooses to see/publish\n *                                their finished product\n * @property {string} [exitUrl]   - URL to navigate to after saving is successful and the user chooses to exit (optional)\n * @property {string} [testUrl]   - URL that ChickenPaint can simulate a drawing upload to to test the user's\n *                                permissions/connection (optional)\n *\n * @property {string} [loadImageUrl]     - URL of PNG/JPEG image to load for editing (optional)\n * @property {string} [loadChibiFileUrl] - URL of .chi file to load for editing (optional). Used in preference to loadImage.\n * @property {string} [loadSwatchesUrl]  - URL of an .aco palette to load (optional)\n * @property {CPArtwork} [artwork]       - Artwork to load into ChickenPaint (if you've already created one)\n *\n * @property {boolean} [allowMultipleSends] - Allow the drawing to be sent to the server multiple times (saving does not\n *                                          immediately end drawing session).\n * @property {boolean} [allowDownload]      - Allow the drawing to be saved to the user's computer\n *\n * @property {\"allow\"|\"auto\"|\"force\"|\"disable\"} [fullScreenMode] - Control the behaviour of the full screen option:\n *                                              allow - Don't automatically enter full screen mode, but allow it to be\n *                                                      chosen manually (default)\n *                                              auto - Automatically enter full screen mode on startup on small screens\n *                                              force - Enter full screen mode at startup and do not provide option to leave\n *                                              disable - Don't allow full screen mode at all\n *\n *\n * @property {string} resourcesRoot - URL to the directory that contains the gfx/css etc directories (relative to the\n *                                    page that ChickenPaint is loaded on)\n *\n * @property {string} [language] - Provide an explicit ISO language code here (e.g. \"ja_JP\") to override the guessed browser language\n *                               Unsupported languages will fall back to English.\n *                               Currently only \"en\" and \"ja\" are available.\n */\n\n/**\n * Creates an instance of the ChickenPaint drawing app with the specified options.\n *\n * @param {ChickenPaintOptions} options\n *\n * @throws ChickenPaint.UnsupportedBrowserException if the web browser does not support ChickenPaint\n */\nexport default function ChickenPaint(options) {\n    guessLanguage();\n\n    if (options.language) {\n        setLanguage(options.language);\n    }\n\n    const uiElem = options.uiElem;\n\n    //ブラウザデフォルトのキー操作をキャンセル\n    document.addEventListener(\"keydown\", (e) => {\n        const keys = [\"+\", \";\", \"=\", \"-\", \"s\", \"h\", \"r\", \"o\"];\n        if (\n            ((e.ctrlKey || e.metaKey) && keys.includes(e.key.toLowerCase())) ||\n            e.key === \"Enter\"\n        ) {\n            // console.log(\"e.key\",e.key);\n            e.preventDefault();\n        }\n    });\n    //長押しでコンテキストメニューを開かない\n    uiElem.addEventListener(\n        \"contextmenu\",\n        (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n        },\n        { passive: false }\n    );\n\n    let that = this,\n        /**\n         * @type {CPCanvas}\n         */\n        canvas,\n        /**\n         * @type {CPMainGUI}\n         */\n        mainGUI,\n        /**\n         *\n         * @type {CPColor}\n         */\n        curColor = new CPColor(0),\n        curMaskColor = 0xff,\n        colorMode = ChickenPaint.COLOR_MODE_RGB,\n        curBrush = ChickenPaint.T_PENCIL,\n        curMode = ChickenPaint.M_DRAW,\n        preTransformMode = curMode,\n        curGradient = [0xff000000, 0xffffffff],\n        smallScreenMode = false,\n        isFullScreen = false,\n        tools = createDrawingTools(),\n        preferences = new CPUserPreferences(),\n        boxBlurDialog,\n        gridDialog,\n        actions = {\n            // GUI actions\n\n            CPFullScreen: {\n                action: function () {\n                    that.setFullScreen(!isFullScreen);\n                },\n                isSupported: function () {\n                    return !(\n                        (\n                            options.fullScreenMode === \"disable\" ||\n                            options.fullScreenMode === \"force\" ||\n                            options.allowFullScreen === false\n                        ) /* For backwards compat */\n                    );\n                },\n                modifies: { gui: true },\n            },\n            CPZoomIn: {\n                action: function () {\n                    canvas.zoomIn();\n                },\n                modifies: { gui: true },\n            },\n            CPZoomOut: {\n                action: function () {\n                    canvas.zoomOut();\n                },\n                modifies: { gui: true },\n            },\n            CPZoom100: {\n                action: function () {\n                    canvas.zoom100();\n                },\n                modifies: { gui: true },\n            },\n            CPResetZoomAndRotation: {\n                action: function () {\n                    canvas.resetZoomAndRotation();\n                    const paletteManager = mainGUI.getPaletteManager();\n                    const flipButton = paletteManager.palettes.misc.flipButton;\n                    const mainMenu = mainGUI.getMainMenu();\n                    const menuElement = mainMenu.getElement();\n                    const flipMenuItem = menuElement.querySelector(\n                        '[data-action=\"CPViewHFlip\"]'\n                    );\n                    if (flipButton) {\n                        flipButton.classList.remove(\"flipped\");\n                    }\n                    //表示の左右反転時には、メニュー→表示→表示の左右反転にチェックマークを外す\n                    if (flipMenuItem) {\n                        flipMenuItem.classList.remove(\"selected\");\n                    }\n                },\n\n                modifies: { gui: true },\n            },\n            CPViewHFlip: {\n                action: function () {\n                    const flipped = canvas.toggleViewFlip();\n                    const paletteManager = mainGUI.getPaletteManager();\n                    const flipButton = paletteManager.palettes.misc.flipButton;\n                    const mainMenu = mainGUI.getMainMenu();\n                    const menuElement = mainMenu.getElement();\n                    // console.log(\"mainMenu\", mainMenu);\n                    // console.log(\"menuElement\", menuElement);\n                    const flipMenuItem = menuElement.querySelector(\n                        '[data-action=\"CPViewHFlip\"]'\n                    );\n                    if (flipButton) {\n                        //表示の左右反転時には、左右反転アイコンに赤枠を付ける\n                        if (flipped) {\n                            flipButton.classList.add(\"flipped\");\n                        } else {\n                            flipButton.classList.remove(\"flipped\");\n                        }\n                    }\n                    //表示の左右反転時には、メニュー→表示→表示の左右反転にチェックマークを付ける\n                    if (flipMenuItem) {\n                        if (flipped) {\n                            flipMenuItem.classList.add(\"selected\");\n                        } else {\n                            flipMenuItem.classList.remove(\"selected\");\n                        }\n                    }\n                },\n                modifies: { gui: true },\n            },\n            // 古いアイコンは使わない。\n            // CPToolbarStyle: {\n            //     action: function() {\n            //         that.setToolbarStyle(preferences.toolbarStyle === \"new\" ? \"old\" : \"new\");\n            //     },\n            //     modifies: {gui: true}\n            // },\n\n            // History actions\n\n            CPUndo: {\n                action: function () {\n                    that.artwork.undo();\n                },\n                modifies: { document: true },\n                allowed: \"isUndoAllowed\",\n            },\n            CPRedo: {\n                action: function () {\n                    that.artwork.redo();\n                },\n                modifies: { document: true },\n                allowed: \"isRedoAllowed\",\n            },\n            CPClearHistory: {\n                action: function () {\n                    if (\n                        confirm(\n                            _(\n                                \"You're about to clear the current Undo/Redo history.\\nThis operation cannot be undone, are you sure you want to do that?\"\n                            )\n                        )\n                    ) {\n                        that.artwork.clearHistory();\n                    }\n                },\n                modifies: { document: true },\n            },\n\n            // Drawing tools\n\n            CPPencil: new ToolChangeAction(ChickenPaint.T_PENCIL),\n            CPPen: new ToolChangeAction(ChickenPaint.T_PEN),\n            CPEraser: new ToolChangeAction(ChickenPaint.T_ERASER),\n            CPSoftEraser: new ToolChangeAction(ChickenPaint.T_SOFTERASER),\n            CPAirbrush: new ToolChangeAction(ChickenPaint.T_AIRBRUSH),\n            CPDodge: new ToolChangeAction(ChickenPaint.T_DODGE),\n            CPBurn: new ToolChangeAction(ChickenPaint.T_BURN),\n            CPWater: new ToolChangeAction(ChickenPaint.T_WATER),\n            CPBlur: new ToolChangeAction(ChickenPaint.T_BLUR),\n            CPSmudge: new ToolChangeAction(ChickenPaint.T_SMUDGE),\n            CPBlender: new ToolChangeAction(ChickenPaint.T_BLENDER),\n\n            // Modes\n\n            CPFloodFill: new ModeChangeAction(ChickenPaint.M_FLOODFILL),\n            CPGradientFill: new ModeChangeAction(ChickenPaint.M_GRADIENTFILL),\n            CPRectSelection: new ModeChangeAction(\n                ChickenPaint.M_RECT_SELECTION\n            ),\n            CPMoveTool: new ModeChangeAction(ChickenPaint.M_MOVE_TOOL),\n            CPRotateCanvas: new ModeChangeAction(ChickenPaint.M_ROTATE_CANVAS),\n            CPPanCanvas: new ModeChangeAction(ChickenPaint.M_PAN_CANVAS),\n            CPColorPicker: new ModeChangeAction(ChickenPaint.M_COLOR_PICKER),\n\n            // Layer transform\n\n            CPTransform: {\n                action: function () {\n                    const layer = that.artwork.getActiveLayer();\n\n                    if (that.artwork.transformAffineBegin() == null) {\n                        that.showLayerNotification(\n                            layer,\n                            _(\n                                \"Whoops! All of the selected pixels are transparent!\"\n                            ),\n                            \"layer\"\n                        );\n                    } else {\n                        setMode(ChickenPaint.M_TRANSFORM);\n                    }\n                },\n                modifies: { mode: true },\n                allowed: function () {\n                    const layer = that.artwork.getActiveLayer();\n\n                    if (!layer.visible) {\n                        //非表示レイヤーを変形しようとした時にエラーメッセージを出す\n                        that.showLayerNotification(\n                            layer,\n                            _(\"Whoops! This layer is currently hidden\"),\n                            \"layer\"\n                        );\n                    } else if (layer.alpha == 0) {\n                        that.showLayerNotification(\n                            layer,\n                            _(\"Whoops! This layer's opacity is currently 0%\"),\n                            \"opacity\"\n                        );\n                    } else if (that.artwork.transformAffineBegin() == null) {\n                        that.showLayerNotification(\n                            layer,\n                            _(\n                                \"Whoops! All of the selected pixels are transparent!\"\n                            ),\n                            \"layer\"\n                        );\n                    } else {\n                        return layer.getEffectiveAlpha() != 0;\n                    }\n                },\n            },\n            CPTransformAccept: {\n                action: function () {\n                    if (curMode == ChickenPaint.M_TRANSFORM) {\n                        that.artwork.transformAffineFinish();\n                        setMode(preTransformMode);\n                    }\n                },\n                modifies: { mode: true },\n            },\n            CPTransformReject: {\n                action: function () {\n                    if (curMode == ChickenPaint.M_TRANSFORM) {\n                        that.artwork.transformAffineAbort();\n                        setMode(preTransformMode);\n                    }\n                },\n                modifies: { document: true, mode: true },\n            },\n\n            // Stroke modes\n\n            CPFreeHand: {\n                action: function () {\n                    tools[curBrush].strokeMode =\n                        CPBrushInfo.STROKE_MODE_FREEHAND;\n                    callToolListeners();\n                },\n                modifies: { tool: true },\n            },\n            CPLine: {\n                action: function () {\n                    tools[curBrush].strokeMode = CPBrushInfo.STROKE_MODE_LINE;\n                    callToolListeners();\n                },\n                modifies: { tool: true },\n            },\n            CPBezier: {\n                action: function () {\n                    tools[curBrush].strokeMode = CPBrushInfo.STROKE_MODE_BEZIER;\n                    callToolListeners();\n                },\n                modifies: { tool: true },\n            },\n\n            // Help dialogs\n\n            CPAbout: {\n                action: function () {\n                    new CPAboutDialog(uiElem).show();\n                },\n                modifies: {},\n            },\n            CPShortcuts: {\n                action: function () {\n                    new CPShortcutsDialog(uiElem).show();\n                },\n                modifies: {},\n            },\n            CPTabletSupport: {\n                action: function () {\n                    new CPTabletDialog(uiElem).show();\n                },\n                modifies: {},\n            },\n\n            // Layer actions\n\n            CPLayerDuplicate: {\n                action: function () {\n                    that.artwork.duplicateLayer();\n                },\n                modifies: { document: true },\n            },\n            CPLayerMergeDown: {\n                action: function () {\n                    that.artwork.mergeDown();\n                },\n                modifies: { document: true },\n                allowed: \"isMergeDownAllowed\",\n            },\n            CPGroupMerge: {\n                action: function () {\n                    that.artwork.mergeGroup();\n                },\n                modifies: { document: true },\n                allowed: \"isMergeGroupAllowed\",\n            },\n            CPLayerMergeAll: {\n                action: function () {\n                    that.artwork.mergeAllLayers();\n                },\n                modifies: { document: true },\n                allowed: \"isMergeAllLayersAllowed\",\n            },\n            CPAddMergedLayer: {\n                action: function () {\n                    that.artwork.mergeAllLayers(true);\n                },\n                modifies: { document: true },\n                allowed: \"isMergeAllLayersAllowed\",\n            },\n            CPExpandLayerGroup: {\n                action: function (e) {\n                    that.artwork.expandLayerGroup(e.group, e.expand);\n                },\n                modifies: { document: true },\n            },\n            CPFill: {\n                action: function () {\n                    that.artwork.fill(that.getCurColor().getRgb() | 0xff000000);\n                },\n                modifies: { document: true },\n                requiresDrawable: true,\n            },\n            CPClear: {\n                action: function () {\n                    that.artwork.clear();\n                },\n                modifies: { document: true },\n                requiresDrawable: true,\n            },\n            CPSelectAll: {\n                action: function () {\n                    that.artwork.rectangleSelection(that.artwork.getBounds());\n                    canvas.repaintAll();\n                },\n                modifies: { document: true },\n            },\n            CPDeselectAll: {\n                action: function () {\n                    that.artwork.rectangleSelection(new CPRect(0, 0, 0, 0));\n                    canvas.repaintAll();\n                },\n                modifies: { document: true },\n            },\n            CPHFlip: {\n                action: function () {\n                    that.artwork.hFlip();\n                },\n                modifies: { document: true },\n                requiresDrawable: true, // TODO\n            },\n            CPVFlip: {\n                action: function () {\n                    that.artwork.vFlip();\n                },\n                modifies: { document: true },\n                requiresDrawable: true, //TODO\n            },\n            CPMNoise: {\n                action: function () {\n                    that.artwork.monochromaticNoise();\n                },\n                modifies: { document: true },\n                requiresDrawable: true,\n            },\n            CPCNoise: {\n                action: function () {\n                    that.artwork.colorNoise();\n                },\n                modifies: { document: true },\n                allowed: \"isColorNoiseAllowed\",\n            },\n            CPFXBoxBlur: {\n                action: function () {\n                    showBoxBlurDialog();\n                },\n                modifies: { document: true },\n                requiresDrawable: true,\n            },\n            CPFXInvert: {\n                action: function () {\n                    that.artwork.invert();\n                },\n                modifies: { document: true },\n                requiresDrawable: true,\n            },\n            CPBrightnessToOpacity: {\n                action: function () {\n                    that.artwork.brightnessToOpacity();\n                },\n                modifies: { document: true },\n                requiresDrawable: true,\n            },\n\n            CPCut: {\n                action: function () {\n                    that.artwork.cutSelection();\n                },\n                modifies: { document: true },\n                requiresDrawable: true,\n                allowed: \"isCutSelectionAllowed\",\n            },\n            CPCopy: {\n                action: function () {\n                    that.artwork.copySelection();\n                },\n                modifies: { document: true },\n                requiresDrawable: true,\n                allowed: \"isCopySelectionAllowed\",\n            },\n            CPCopyMerged: {\n                action: function () {\n                    that.artwork.copySelectionMerged();\n                },\n                modifies: { document: true },\n                allowed: \"isCopySelectionMergedAllowed\",\n            },\n            CPPaste: {\n                action: function () {\n                    that.artwork.pasteClipboard();\n                },\n                modifies: { document: true },\n                allowed: \"isPasteClipboardAllowed\",\n            },\n\n            CPToggleGrid: {\n                action: function (e) {\n                    canvas.showGrid(e.selected);\n                },\n                modifies: { gui: true },\n            },\n            CPGridOptions: {\n                action: function () {\n                    showGridOptionsDialog();\n                },\n                modifies: { gui: true },\n            },\n\n            CPLinearInterpolation: {\n                action: function (e) {\n                    canvas.setInterpolation(e.selected);\n                },\n                modifies: { gui: true },\n                isSupported: function () {\n                    return isCanvasInterpolationSupported();\n                },\n            },\n            CPResetCanvasRotation: {\n                action: function () {\n                    canvas.resetRotation();\n                },\n                modifies: { gui: true },\n            },\n\n            // Layer palette\n\n            CPAddLayer: {\n                action: function () {\n                    that.artwork.addLayer(\"layer\");\n                },\n                modifies: { document: true },\n            },\n            CPAddGroup: {\n                action: function () {\n                    that.artwork.addLayer(\"group\");\n                },\n                modifies: { document: true },\n            },\n            CPAddLayerMask: {\n                action: function () {\n                    that.artwork.addLayerMask();\n                },\n                modifies: { document: true },\n                allowed: \"isAddLayerMaskAllowed\",\n            },\n            CPApplyLayerMask: {\n                action: function () {\n                    that.artwork.applyLayerMask(true);\n                },\n                modifies: { document: true },\n                allowed: \"isApplyLayerMaskAllowed\",\n            },\n            CPRemoveLayerMask: {\n                action: function () {\n                    that.artwork.removeLayerMask();\n                },\n                modifies: { document: true },\n                allowed: \"isRemoveLayerMaskAllowed\",\n            },\n            CPRemoveLayer: {\n                action: function () {\n                    if (!that.artwork.removeLayer()) {\n                        alert(\n                            _(\n                                \"Sorry, you can't remove the last remaining layer in the drawing.\"\n                            )\n                        );\n                    }\n                },\n                modifies: { document: true },\n                allowed: \"isRemoveLayerAllowed\",\n            },\n            CPCreateClippingMask: {\n                action: function () {\n                    that.artwork.createClippingMask();\n                },\n                modifies: { document: true },\n                allowed: \"isCreateClippingMaskAllowed\",\n            },\n            CPReleaseClippingMask: {\n                action: function () {\n                    that.artwork.releaseClippingMask();\n                },\n                modifies: { document: true },\n                allowed: \"isReleaseClippingMaskAllowed\",\n            },\n            CPRelocateLayer: {\n                action: function (e) {\n                    that.artwork.relocateLayer(e.layer, e.toGroup, e.toIndex);\n                },\n                modifies: { document: true },\n            },\n            CPSetActiveLayer: {\n                action: function (e) {\n                    // Enable disabled layer masks when clicked on\n                    if (e.mask && e.layer.mask && !e.layer.maskVisible) {\n                        that.artwork.setLayerMaskVisible(e.layer, true);\n                    }\n\n                    that.artwork.setActiveLayer(e.layer, e.mask);\n\n                    // Since this is a slow GUI operation, this is a good chance to get the canvas ready for drawing\n                    that.artwork.performIdleTasks();\n                },\n                modifies: { document: true },\n            },\n            CPToggleMaskView: {\n                action: function () {\n                    let newView = that.artwork.toggleMaskView();\n\n                    if (newView) {\n                        that.emitEvent(\"maskViewOpened\", [newView]);\n                    }\n                },\n                modifies: { gui: true },\n            },\n            CPSetMaskVisible: {\n                action: function (e) {\n                    that.artwork.setLayerMaskVisible(e.layer, e.visible);\n                },\n                modifies: { layerProp: true },\n            },\n            CPSetLayerVisibility: {\n                action: function (e) {\n                    that.artwork.setLayerVisibility(e.layer, e.visible);\n                },\n                modifies: { layerProp: true },\n            },\n            CPSetLayerName: {\n                action: function (e) {\n                    that.artwork.setLayerName(e.layer, e.name);\n                },\n                modifies: { layerProp: true },\n            },\n            CPSetLayerBlendMode: {\n                action: function (e) {\n                    that.artwork.setLayerBlendMode(e.blendMode);\n                },\n                modifies: { layerProp: true },\n            },\n            CPSetLayerAlpha: {\n                action: function (e) {\n                    that.artwork.setLayerAlpha(e.alpha);\n                },\n                modifies: { layerProp: true },\n            },\n            CPSetLayerLockAlpha: {\n                action: function (e) {\n                    that.artwork.setLayerLockAlpha(e.lock);\n                },\n                modifies: { layerProp: true },\n            },\n\n            // Palettes\n\n            CPPalColor: new PaletteToggleAction(\"color\"),\n            CPPalBrush: new PaletteToggleAction(\"brush\"),\n            CPPalLayers: new PaletteToggleAction(\"layers\"),\n            CPPalStroke: new PaletteToggleAction(\"stroke\"),\n            CPPalSwatches: new PaletteToggleAction(\"swatches\"),\n            CPPalTool: new PaletteToggleAction(\"tool\"),\n            CPPalMisc: new PaletteToggleAction(\"misc\"),\n            CPPalTextures: new PaletteToggleAction(\"textures\"),\n\n            CPTogglePalettes: {\n                action: function () {\n                    mainGUI.togglePalettes();\n                },\n                modifies: { gui: true },\n            },\n            CPArrangePalettes: {\n                action: function () {\n                    mainGUI.arrangePalettes();\n                },\n                modifies: { gui: true },\n            },\n\n            // Saving\n\n            CPSave: {\n                action: function () {\n                    saveDrawing();\n                },\n                isSupported: function () {\n                    return options.allowDownload !== false;\n                },\n                modifies: { document: true },\n            },\n            CPSend: {\n                action: function () {\n                    sendDrawing();\n                },\n                isSupported: function () {\n                    return !!options.saveUrl;\n                },\n                modifies: { document: true },\n            },\n            CPPost: {\n                action: function () {\n                    //画面移動の関数が定義されている時はユーザーが定義した関数で画面移動\n                    if (typeof handleExit === \"function\") {\n                        return handleExit();\n                    }\n                    window.location = options.postUrl;\n                },\n                isSupported: function () {\n                    return !!(\n                        options.postUrl || typeof handleExit === \"function\"\n                    );\n                },\n                modifies: { document: true },\n            },\n            CPContinue: {\n                action: function () {},\n                isSupported: function () {\n                    return !!options.allowMultipleSends;\n                },\n            },\n            CPExit: {\n                action: function () {\n                    // Exit the drawing session without posting the drawing to the forum\n                    window.location = options.exitUrl;\n                },\n                isSupported: function () {\n                    return !!options.exitUrl;\n                },\n                modifies: {},\n            },\n        };\n\n    function PaletteToggleAction(palName) {\n        this.palName = palName;\n    }\n\n    PaletteToggleAction.prototype.action = function (e) {\n        mainGUI.showPalette(this.palName, e.selected);\n    };\n    PaletteToggleAction.prototype.modifies = { gui: true };\n\n    function ToolChangeAction(toolNum) {\n        this.toolNum = toolNum;\n    }\n\n    ToolChangeAction.prototype.action = function () {\n        setTool(this.toolNum);\n    };\n\n    ToolChangeAction.prototype.modifies = { mode: true, tool: true };\n\n    ToolChangeAction.prototype.requiresDrawable = true;\n\n    function ModeChangeAction(modeNum) {\n        this.modeNum = modeNum;\n    }\n\n    ModeChangeAction.prototype.action = function () {\n        setMode(this.modeNum);\n    };\n    ModeChangeAction.prototype.modifies = { mode: true };\n\n    function onEditModeChanged(newMode) {\n        colorMode =\n            newMode == CPArtwork.EDITING_MODE_IMAGE\n                ? ChickenPaint.COLOR_MODE_RGB\n                : ChickenPaint.COLOR_MODE_GREYSCALE;\n\n        that.emitEvent(\"colorModeChange\", [\n            newMode == CPArtwork.EDITING_MODE_IMAGE ? \"rgb\" : \"greyscale\",\n        ]);\n\n        let newColor;\n\n        switch (colorMode) {\n            case ChickenPaint.COLOR_MODE_RGB:\n                newColor = curColor.clone();\n                break;\n            case ChickenPaint.COLOR_MODE_GREYSCALE:\n                newColor = new CPColor(CPColor.greyToRGB(curMaskColor));\n                break;\n        }\n\n        that.artwork.setForegroundColor(newColor.getRgb());\n        that.emitEvent(\"colorChange\", [newColor]);\n    }\n\n    function showBoxBlurDialog() {\n        if (!boxBlurDialog) {\n            boxBlurDialog = new CPBoxBlurDialog(uiElem, that);\n        }\n\n        boxBlurDialog.show();\n    }\n\n    function showGridOptionsDialog() {\n        if (!gridDialog) {\n            gridDialog = new CPGridDialog(uiElem, canvas);\n        }\n\n        gridDialog.show();\n    }\n\n    function callToolListeners() {\n        that.emitEvent(\"toolChange\", [curBrush, tools[curBrush]]);\n    }\n\n    // TODO make me private\n    this.callToolListeners = function () {\n        callToolListeners();\n    };\n\n    function callModeListeners() {\n        that.emitEvent(\"modeChange\", [curMode]);\n    }\n\n    /**\n     * @returns {CPArtwork}\n     */\n    this.getArtwork = function () {\n        return this.artwork;\n    };\n\n    this.setCanvas = function (_canvas) {\n        canvas = _canvas;\n    };\n\n    /**\n     * Change the interpolation mode used by Free Transform operations\n     *\n     * @param {string} interpolation - Either \"sharp\" or \"smooth\"\n     */\n    this.setTransformInterpolation = function (interpolation) {\n        this.artwork.setTransformInterpolation(interpolation);\n    };\n\n    /**\n     *\n     * @param {CPColor} color\n     */\n    this.setCurColor = function (color) {\n        switch (colorMode) {\n            case ChickenPaint.COLOR_MODE_RGB:\n                if (!curColor.isEqual(color)) {\n                    curColor.copyFrom(color);\n\n                    this.artwork.setForegroundColor(color.getRgb());\n\n                    this.emitEvent(\"colorChange\", [color]);\n                }\n                break;\n            case ChickenPaint.COLOR_MODE_GREYSCALE:\n                let grey = color.getValue();\n\n                if (curMaskColor != grey) {\n                    let greyRGB = CPColor.greyToRGB(grey);\n\n                    this.artwork.setForegroundColor(greyRGB);\n\n                    curMaskColor = grey;\n\n                    this.emitEvent(\"colorChange\", [new CPColor(greyRGB)]);\n                }\n                break;\n        }\n    };\n\n    /**\n     * @returns {CPColor}\n     */\n    this.getCurColor = function () {\n        switch (colorMode) {\n            case ChickenPaint.COLOR_MODE_RGB:\n                return curColor.clone();\n            case ChickenPaint.COLOR_MODE_GREYSCALE:\n                return new CPColor(CPColor.greyToRGB(curMaskColor));\n        }\n    };\n\n    this.setCurGradient = function (gradient) {\n        curGradient = gradient.slice(0); // Clone\n\n        this.emitEvent(\"gradientChange\", [curGradient]);\n    };\n\n    this.getCurGradient = function () {\n        return curGradient.slice(0); // Clone\n    };\n\n    this.setBrushSize = function (size) {\n        tools[curBrush].size = Math.max(1, Math.min(200, size));\n        callToolListeners();\n    };\n\n    this.getBrushSize = function () {\n        return tools[curBrush].size;\n    };\n\n    this.setAlpha = function (alpha) {\n        tools[curBrush].alpha = alpha;\n        callToolListeners();\n    };\n\n    this.getAlpha = function () {\n        return tools[curBrush].alpha;\n    };\n\n    this.getCurMode = function () {\n        return curMode;\n    };\n    /**\n     * キャンバスの中心を基準にズームします。\n     * @param {number} zoom ズーム倍率\n     * @param {boolean} [snap=false] true の場合、1倍/2倍/0.5倍に丸めます\n     */\n    this.zoomOnCenter = function (zoom, snap = false) {\n        canvas.zoomOnCenter(zoom, snap);\n    };\n\n    /**\n     * 現在のキャンバスのズーム倍率を取得します。\n     * @returns {number} 現在のズーム倍率\n     */\n    this.getZoom = function () {\n        return canvas.getZoom();\n    };\n\n    /**\n     * キャンバスの回転角度を度単位で取得します。\n     * - 返される値は [-180, +180] の範囲に正規化されています。\n     * @returns {number} 現在の回転角度（度）\n     */\n    this.getRotationDegrees = function () {\n        return canvas.getRotationDegrees();\n    };\n\n    /**\n     * キャンバスの回転角度を度単位で設定します。\n     * - 内部ではラジアンに変換されてセットされます。\n     * - 指定値は [-180, +180] の範囲でなくても自動的に正規化されます。\n     * @param {number} degrees 設定する角度（度）\n     */\n    this.setRotationDegrees = function (degrees) {\n        canvas.setRotationDegrees(degrees);\n    };\n\n    this.isPanOrRotateMode = function () {\n        return canvas.isPanOrRotateMode();\n    };\n\n    function setMode(newMode) {\n        if (curMode != newMode) {\n            if (newMode == ChickenPaint.M_TRANSFORM) {\n                preTransformMode = curMode;\n            }\n            curMode = newMode;\n            callModeListeners();\n        }\n    }\n\n    this.getCurTool = function () {\n        return curBrush;\n    };\n\n    function setTool(tool) {\n        setMode(ChickenPaint.M_DRAW);\n        curBrush = tool;\n        that.artwork.setBrush(tools[tool]);\n        callToolListeners();\n    }\n\n    this.getBrushInfo = function () {\n        return tools[curBrush];\n    };\n\n    function saveDrawing() {\n        let saver = new CPResourceSaver({\n            artwork: that.getArtwork(),\n            rotation: canvas.getRotation90(),\n            swatches: mainGUI.getSwatches(),\n        });\n\n        saver.on(\"savingComplete\", function () {\n            that.artwork.setHasUnsavedChanges(false);\n        });\n\n        saver.on(\"savingFailure\", function () {\n            alert(\n                _(\n                    \"Sorry, your drawing could not be saved, Please see the error message.\"\n                )\n            );\n        });\n\n        saver.save();\n    }\n\n    function sendDrawing() {\n        if (\n            !that.isActionSupported(\"CPContinue\") &&\n            !confirm(\n                _(\n                    \"Are you sure you want to send your drawing to the server and finish drawing now?\"\n                )\n            )\n        ) {\n            return;\n        }\n\n        let saver = new CPResourceSaver({\n                artwork: that.getArtwork(),\n                rotation: canvas.getRotation90(),\n                swatches: mainGUI.getSwatches(),\n                url: options.saveUrl,\n                post_max_size: options.post_max_size,\n            }),\n            sendDialog = new CPSendDialog(that, uiElem, saver);\n\n        saver.on(\"savingComplete\", function () {\n            that.artwork.setHasUnsavedChanges(false);\n\n            // If we're not allowed to keep editing, we can only go straight to viewing the new post\n            if (\n                !that.isActionSupported(\"CPContinue\") &&\n                that.isActionSupported(\"CPPost\")\n            ) {\n                that.actionPerformed({ action: \"CPPost\" });\n            }\n        });\n\n        saver.on(\"savingFailure\", function () {\n            alert(\n                _(\n                    \"Sorry, your drawing could not be saved, Please see the error message.\"\n                )\n            );\n        });\n\n        // Allow the dialog to show before we begin serialization\n        sendDialog.on(\"shown\", function () {\n            saver.save();\n        });\n\n        sendDialog.show();\n    }\n\n    /**\n     * Not all saving actions will be supported (depending on what options we're configured with). Use this function\n     * to check for support for a given action.\n     *\n     * @param {string} actionName\n     * @returns {boolean}\n     */\n    this.isActionSupported = function (actionName) {\n        if (actions[actionName]) {\n            let supportedType = typeof actions[actionName].isSupported;\n\n            if (supportedType == \"function\") {\n                return actions[actionName].isSupported();\n            } else if (supportedType == \"undefined\") {\n                // If not otherwise specified, an action defaults to supported\n                return true;\n            } else {\n                return actions[actionName].isSupported;\n            }\n        }\n\n        return false;\n    };\n\n    /**\n     * Check if a given action is allowed at the moment (e.g. in the current mode and with the current layer selected).\n     *\n     * @param actionName\n     */\n    this.isActionAllowed = function (actionName) {\n        let action = actions[actionName];\n\n        if (!action) {\n            return false;\n        } else if (typeof action.allowed == \"function\") {\n            return action.allowed();\n        } else if (typeof action.allowed == \"string\") {\n            return this.artwork[action.allowed]();\n        } else {\n            return (\n                !action.requiresDrawable || this.artwork.isActiveLayerDrawable()\n            );\n        }\n    };\n\n    this.showLayerNotification = function (layer, message, where) {\n        this.emitEvent(\"layerNotification\", [layer, message, where]);\n    };\n\n    this.actionPerformed = function (e) {\n        if (this.artwork == null || canvas == null) {\n            return; // this shouldn't happen, but just in case\n        }\n\n        let action = actions[e.action];\n\n        if (action) {\n            if (\n                curMode == ChickenPaint.M_TRANSFORM &&\n                (action.modifies.document || action.modifies.mode) &&\n                [\"CPTransformAccept\", \"CPTransformReject\"].indexOf(e.action) ==\n                    -1\n            ) {\n                if (e.action == \"CPUndo\") {\n                    actions.CPTransformReject.action();\n                } else if (e.action == \"CPTransform\") {\n                    // You're already transforming the selection!\n                } else {\n                    // Prompt the user to finish their transform before starting something else\n                    let dialog = new CPConfirmTransformDialog(uiElem, this);\n\n                    /* If they decide to finish up with the transform, we can apply the original action they\n                     * attempted afterwards.\n                     */\n                    // dialog.on(\"accept\", this.actionPerformed.bind(this, e));\n                    // dialog.on(\"reject\", this.actionPerformed.bind(this, e));\n                    dialog.on(\"accept\", () => {\n                        this.actionPerformed(e); // 元アクション\n                        dialog.hide(); // モーダルを閉じる\n                    });\n                    dialog.on(\"reject\", () => {\n                        this.actionPerformed(e);\n                        dialog.hide();\n                    });\n                    dialog.show();\n                }\n            } else {\n                action.action(e);\n            }\n        }\n\n        // callCPEventListeners(); TODO\n    };\n\n    this.setSmallScreenMode = function (small) {\n        if (smallScreenMode !== small) {\n            smallScreenMode = small;\n\n            uiElem.classList.toggle(\n                \"chickenpaint-small-screen\",\n                smallScreenMode\n            );\n            that.emitEvent(\"smallScreen\", [smallScreenMode]);\n        }\n    };\n\n    this.getSmallScreenMode = function () {\n        return smallScreenMode;\n    };\n\n    this.setFullScreen = function (newVal) {\n        if (isFullScreen !== newVal) {\n            isFullScreen = newVal;\n\n            document.body.classList.toggle(\n                \"chickenpaint-full-screen\",\n                isFullScreen\n            );\n            uiElem.classList.toggle(\"chickenpaint-full-screen\", isFullScreen);\n\n            const viewportMetaTags = document.querySelectorAll(\n                'head meta[name=\"viewport\"]'\n            );\n            const count = viewportMetaTags.length;\n            if (isFullScreen && count === 0) {\n                // Reset page zoom to zero if the host page didn't already set a viewport\n                const metaTag = document.createElement(\"meta\");\n                metaTag.name = \"viewport\";\n                metaTag.content =\n                    \"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,,user-scalable=no\";\n                document.head.appendChild(metaTag);\n\n                // Give the browser time to adjust the viewport before we adapt to the new size\n                setTimeout(\n                    () => that.emitEvent(\"fullScreen\", [isFullScreen]),\n                    200\n                );\n            } else {\n                that.emitEvent(\"fullScreen\", [isFullScreen]);\n            }\n        }\n    };\n\n    this.isFullScreen = function () {\n        return isFullScreen;\n    };\n\n    this.setToolbarStyle = function (styleName) {\n        preferences.set(\"toolbarStyle\", styleName);\n        preferences.save(); // Eager save, so we don't lose it upon a crash\n    };\n\n    this.getToolbarStyle = function () {\n        return preferences.get(\"toolbarStyle\");\n    };\n\n    function installUnsavedWarning() {\n        window.addEventListener(\"beforeunload\", function (e) {\n            if (that.artwork.getHasUnsavedChanges()) {\n                e.preventDefault();\n            }\n        });\n    }\n\n    function startMainGUI(swatches, initialRotation90) {\n        if (!uiElem) {\n            return;\n        }\n\n        // Prevent double-click iOS page zoom events\n        uiElem.addEventListener(\"dblclick\", function (e) {\n            e.preventDefault();\n            e.stopPropagation();\n        });\n\n        that.artwork.on(\"editModeChanged\", onEditModeChanged);\n\n        mainGUI = new CPMainGUI(that, uiElem);\n\n        that.emitEvent(\"fullScreen\", [isFullScreen]);\n        that.emitEvent(\"smallScreen\", [smallScreenMode]);\n\n        preferences.load();\n\n        setTool(ChickenPaint.T_PEN);\n        mainGUI.arrangePalettes();\n\n        if (swatches) {\n            mainGUI.setSwatches(swatches);\n        }\n\n        if (initialRotation90) {\n            mainGUI.setRotation90(initialRotation90);\n        }\n\n        installUnsavedWarning();\n\n        that.artwork.on(\"unsavedChanges\", (unsavedChanges) => {\n            // Only bug users to save if they can actually save multiple times per session.\n            // Otherwise they'll save when they're done with their drawing and not before:\n            if (options.allowMultipleSends) {\n                that.emitEvent(\"unsavedChanges\", [unsavedChanges]);\n            }\n        });\n    }\n\n    this.getResourcesRoot = function () {\n        return options.resourcesRoot;\n    };\n\n    if (uiElem) {\n        uiElem.className +=\n            \" chickenpaint chickenpaint-lang-\" + currentLanguage();\n    }\n\n    options.resourcesRoot = options.resourcesRoot || \"chickenpaint/\";\n\n    this.setSmallScreenMode(isSmallScreen());\n\n    switch (options.fullScreenMode) {\n        case \"force\":\n            this.setFullScreen(true);\n            break;\n        case \"auto\":\n            this.setFullScreen(smallScreenMode);\n            break;\n    }\n\n    preferences.on(\"toolbarStyle\", (newStyle) =>\n        this.emitEvent(\"toolbarStyleChange\", [newStyle])\n    );\n\n    if (options.loadImageUrl || options.loadChibiFileUrl) {\n        let loader = new CPResourceLoader(options);\n\n        new CPSplashScreen(uiElem, loader, options.resourcesRoot);\n\n        loader.on(\"loadingComplete\", function (resources) {\n            that.artwork = resources.layers || resources.flat;\n\n            startMainGUI(resources.swatches, options.rotation);\n            if (options.onLoaded) {\n                options.onLoaded(this);\n            }\n        });\n\n        loader.load();\n    } else {\n        if (options.artwork) {\n            this.artwork = options.artwork;\n        } else {\n            this.artwork = new CPArtwork(\n                options.canvasWidth || 800,\n                options.canvasHeight || 600\n            );\n            this.artwork.addBackgroundLayer();\n            //起動時に透明なレイヤーを1枚追加\n            this.artwork.addDefaultLayer();\n        }\n\n        startMainGUI();\n\n        if (options.onLoaded) {\n            options.onLoaded(this);\n        }\n    }\n}\n\nChickenPaint.prototype = Object.create(EventEmitter.prototype);\nChickenPaint.prototype.constructor = ChickenPaint;\n\nChickenPaint.UnsupportedBrowserException = function (message) {\n    this.message = message;\n};\n\nChickenPaint.UnsupportedBrowserException.prototype.toString = function () {\n    let msg = \"Sorry, your web browser does not support ChickenPaint.\";\n\n    if (this.message) {\n        msg += \" \" + this.message;\n    } else {\n        msg +=\n            \" Please try a modern browser like Chrome, Safari, Firefox, or Edge.\";\n    }\n\n    return msg;\n};\n\n//\n// Definition of all the modes available\n//\n\nChickenPaint.M_DRAW = 0;\nChickenPaint.M_FLOODFILL = 1;\nChickenPaint.M_RECT_SELECTION = 2;\nChickenPaint.M_MOVE_TOOL = 3;\nChickenPaint.M_ROTATE_CANVAS = 4;\nChickenPaint.M_COLOR_PICKER = 5;\nChickenPaint.M_GRADIENTFILL = 6;\nChickenPaint.M_TRANSFORM = 7;\nChickenPaint.M_PAN_CANVAS = 8;\n\n//\n// Definition of all the standard tools available\n//\nChickenPaint.T_PENCIL = 0;\nChickenPaint.T_ERASER = 1;\nChickenPaint.T_PEN = 2;\nChickenPaint.T_SOFTERASER = 3;\nChickenPaint.T_AIRBRUSH = 4;\nChickenPaint.T_DODGE = 5;\nChickenPaint.T_BURN = 6;\nChickenPaint.T_WATER = 7;\nChickenPaint.T_BLUR = 8;\nChickenPaint.T_SMUDGE = 9;\nChickenPaint.T_BLENDER = 10;\nChickenPaint.T_MAX = 11;\n\nChickenPaint.COLOR_MODE_RGB = 0;\nChickenPaint.COLOR_MODE_GREYSCALE = 1;\n\n//ChickenPaintをGlobalに設定\nwindow.ChickenPaint = ChickenPaint;\n","/*\r\n    ChickenPaint\r\n    \r\n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\r\n    by Nicholas Sherlock / Chicken Smoothie.\r\n    \r\n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\r\n\r\n    ChickenPaint is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    ChickenPaint is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n/**\r\n * @param {Object} properties - Non-default properties to set on the brush\r\n *\r\n * @property {int} alpha - The user-chosen alpha of this brush\r\n * @property {float} alphaScale - A scale factor applied to curAlpha before drawing\r\n * @property {int} curAlpha - The current alpha after pen pressure etc. has been applied\r\n *\r\n * @property {int} spacing\r\n * @property {int} minSpacing\r\n * \r\n * @property {int} size - The user-chosen size of this brush\r\n * @property {int} curSize - The current size of the brush after pen pressure has been applied\r\n *\r\n * @property {int} brushMode - Selects the CPBrushTool that will be used to render the brush (CPBrushInfo.BRUSH_MODE_*)\r\n * @property {int} paintMode - Controls how paint builds up on the canvas during painting (for brush modes that don't\r\n * override the default paintDab() function). (CPBrushInfo.PAINT_MODE_*)\r\n * @property {int} strokeMode - How stroke points will be connected during drawing (CPBrushInfo.STROKE_MODE_*)\r\n * @property {int} tip - Kind of brush tip to be used (CPBrushInfo.TIP_*)\r\n *\r\n * @property {number} scattering\r\n * @property {number} curScattering\r\n * @property {number} angle\r\n * @property {number} resat - 0-1.0, controls how much of the user's selected paint color is mixed into the brush while painting.\r\n * @property {number} bleed - 0-1.0, controls how much of the color from the canvas is picked up by the brush.\r\n *\r\n * @property {boolean} isAA\r\n *\r\n * @constructor\r\n */\r\nexport default function CPBrushInfo(properties) {\r\n    var\r\n        propName;\r\n\r\n    // Set brush setting fields with default values, then apply the supplied 'properties' on top\r\n    for (propName in CPBrushInfo.DEFAULTS) {\r\n        if (CPBrushInfo.DEFAULTS.hasOwnProperty(propName)) {\r\n            this[propName] = CPBrushInfo.DEFAULTS[propName];\r\n        }\r\n    }\r\n    \r\n    for (propName in properties) {\r\n        if (properties.hasOwnProperty(propName)) {\r\n            this[propName] = properties[propName];\r\n        }\r\n    }\r\n}\r\n\r\n// Stroke modes\r\nCPBrushInfo.STROKE_MODE_FREEHAND = 0;\r\nCPBrushInfo.STROKE_MODE_LINE = 1;\r\nCPBrushInfo.STROKE_MODE_BEZIER = 2;\r\n\r\n// Brush dab types\r\nCPBrushInfo.TIP_ROUND_PIXEL = 0;\r\nCPBrushInfo.TIP_ROUND_AA = 1;\r\nCPBrushInfo.TIP_ROUND_AIRBRUSH = 2;\r\nCPBrushInfo.TIP_SQUARE_PIXEL = 3;\r\nCPBrushInfo.TIP_SQUARE_AA = 4;\r\n\r\nCPBrushInfo.BRUSH_MODE_PAINT = 0;\r\nCPBrushInfo.BRUSH_MODE_ERASE = 1;\r\nCPBrushInfo.BRUSH_MODE_DODGE = 2;\r\nCPBrushInfo.BRUSH_MODE_BURN = 3;\r\nCPBrushInfo.BRUSH_MODE_WATER = 4;\r\nCPBrushInfo.BRUSH_MODE_BLUR = 5;\r\nCPBrushInfo.BRUSH_MODE_SMUDGE = 6;\r\nCPBrushInfo.BRUSH_MODE_OIL = 7;\r\n\r\nCPBrushInfo.PAINT_MODE_OPACITY = 0;\r\nCPBrushInfo.PAINT_MODE_FLOW = 1;\r\n\r\nCPBrushInfo.DEFAULTS = {\r\n    isAA: false,\r\n    minSpacing: 0, spacing: 0,\r\n    \r\n    pressureSize: true,\r\n    pressureAlpha: false,\r\n    pressureScattering: false,\r\n    alphaScale: 1.0,\r\n    \r\n    tip: CPBrushInfo.TIP_ROUND_PIXEL,\r\n    brushMode: CPBrushInfo.BRUSH_MODE_PAINT, \r\n    paintMode: CPBrushInfo.PAINT_MODE_OPACITY,\r\n    strokeMode: CPBrushInfo.STROKE_MODE_FREEHAND,\r\n    resat: 1.0, bleed: 0.0,\r\n\r\n    texture: 1.0,\r\n    \r\n    // \"cur\" values are current brush settings (once tablet pressure and stuff is applied)\r\n    size: 0, curSize: 0,\r\n    alpha: 0, curAlpha: 0,\r\n    scattering: 0.0, curScattering: 0,\r\n    squeeze: 0.0, curSqueeze: 0,\r\n    angle: Math.PI, curAngle: 0,\r\n    \r\n    smoothing: 0.0\r\n};\r\n\r\nCPBrushInfo.prototype.applyPressure = function(pressure) {\r\n    // FIXME: no variable size for smudge and oil :(\r\n    if (this.pressureSize && this.brushMode != CPBrushInfo.BRUSH_MODE_SMUDGE && this.brushMode != CPBrushInfo.BRUSH_MODE_OIL) {\r\n        this.curSize = Math.max(0.1, this.size * pressure);\r\n    } else {\r\n        this.curSize = Math.max(0.1, this.size);\r\n    }\r\n\r\n    // FIXME: what is the point of doing that?\r\n    if (this.curSize > 16) {\r\n        this.curSize = Math.floor(this.curSize);\r\n    }\r\n\r\n    // Don't allow brush size to exceed that supported by CPBrushManager\r\n    this.curSize = Math.min(this.curSize, 400);\r\n\r\n    this.curAlpha = this.pressureAlpha ? Math.floor(this.alpha * Math.min(pressure, 1.0)) : this.alpha;\r\n    this.curSqueeze = this.squeeze;\r\n    this.curAngle = this.angle;\r\n    this.curScattering = this.scattering * this.curSize * (this.pressureScattering ? pressure : 1.0);\r\n};\r\n\r\nCPBrushInfo.prototype.clone = function() {\r\n    return new CPBrushInfo(this);\r\n};\r\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n","/*\n    ChickenPaint\n    \n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\n    by Nicholas Sherlock / Chicken Smoothie.\n    \n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n    ChickenPaint is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ChickenPaint is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport CPImageLayer from \"./CPImageLayer.js\";\nimport CPLayerGroup from \"./CPLayerGroup.js\";\nimport CPBlend from \"./CPBlend.js\";\nimport \"./CPBlendAdditional.js\";\nimport CPGreyBmp from \"./CPGreyBmp.js\";\nimport CPBlendTree from \"./CPBlendTree.js\";\nimport CPMaskView from \"./CPMaskView.js\";\nimport CPColorBmp from \"./CPColorBmp.js\";\nimport CPBrushManager from \"./CPBrushManager.js\";\nimport CPBrushInfo from \"./CPBrushInfo.js\";\nimport CPUndo from \"./CPUndo.js\";\nimport CPClip from \"./CPClip.js\";\n\nimport CPColor from \"../util/CPColor.js\";\nimport CPRect from \"../util/CPRect.js\";\nimport CPRandom from \"../util/CPRandom.js\";\nimport CPTransform from \"../util/CPTransform.js\";\nimport { setCanvasInterpolation } from \"../util/CPPolyfill.js\";\nimport { createCanvas } from \"../util/Canvas.js\";\n\nimport EventEmitter from \"wolfy87-eventemitter\";\nimport {\n    CPBrushTool,\n    CPBrushToolBlur,\n    CPBrushToolBurn,\n    CPBrushToolDodge,\n    CPBrushToolEraser,\n    CPBrushToolOil,\n    CPBrushToolSmudge,\n    CPBrushToolWatercolor,\n} from \"./CPBrushTool.js\";\n\n/**\n * Capitalize the first letter of the string.\n *\n * @param {string} string\n * @returns {string}\n */\nfunction capitalizeFirst(string) {\n    return string.substring(0, 1).toUpperCase() + string.substring(1);\n}\n\nfunction sum(a, b) {\n    return a + b;\n}\n\nfunction arrayEquals(a, b) {\n    if (a.length != b.length) {\n        return false;\n    }\n\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] != b[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * @param {HTMLCanvasElement} canvas\n * @returns {number}\n */\nfunction memoryUsedByCanvas(canvas) {\n    return canvas ? canvas.width * canvas.height * 4 : 0;\n}\n\n/**\n * Create a new empty artwork with the given dimensions.\n *\n * Note that an artwork with no layers is invalid, so you must call a routine like addBackgroundLayer(), addLayer(), or\n * addLayerObject() before calling any other routines.\n *\n * @param {number} _width\n * @param {number} _height\n * @constructor\n */\nexport default function CPArtwork(_width, _height) {\n    _width = _width | 0;\n    _height = _height | 0;\n\n    const MAX_UNDO = 30,\n        EMPTY_BACKGROUND_COLOR = 0xffffffff,\n        EMPTY_MASK_COLOR = 0x00,\n        EMPTY_LAYER_COLOR = 0x00ffffff,\n        THUMBNAIL_REBUILD_DELAY_MSEC = 1000;\n\n    const /**\n         * The root of the document's hierarchy of layers and layer groups.\n         *\n         * @type {CPLayerGroup}\n         */\n        layersRoot = new CPLayerGroup(\"Root\", CPBlend.LM_NORMAL),\n        /**\n         * Our cached strategy for merging the layers together into one for display.\n         *\n         * @type {CPBlendTree}\n         */\n        blendTree = new CPBlendTree(layersRoot, _width, _height, true),\n        /**\n         * A copy of the current layer's image data that can be used for undo operations.\n         *\n         * @type {CPColorBmp}\n         */\n        undoImage = new CPColorBmp(_width, _height),\n        /**\n         * The region of the undoImage which is out of date with respect to the content of the layer, and needs updated\n         * with prepareForLayerUndo().\n         *\n         * @type {CPRect}\n         */\n        undoImageInvalidRegion = new CPRect(0, 0, _width, _height),\n        /**\n         * A copy of the current layer's mask that can be used for undo operations.\n         *\n         * @type {CPGreyBmp}\n         */\n        undoMask = new CPGreyBmp(_width, _height, 8),\n        /**\n         * The region of the undoMask which is out of date with respect to the content of the layer, and needs updated\n         * with prepareForLayerUndo().\n         *\n         * @type {CPRect}\n         */\n        undoMaskInvalidRegion = new CPRect(0, 0, _width, _height),\n        /**\n         * We use this buffer so we can customize the accumulation of the area painted during a brush stroke.\n         * (e.g. so that brushing over the same area multiple times during one stroke doesn't further increase opacity\n         * there).\n         *\n         * Normally we use it as a 16-bit opacity channel per pixel, but some brushes use the full 32-bits per pixel\n         * as ARGB.\n         *\n         * @type {CPGreyBmp}\n         */\n        strokeBuffer = new CPGreyBmp(_width, _height, 32),\n        /**\n         * The area of dirty data contained by strokeBuffer that should be merged by fusionLayers()\n         *\n         * @type {CPRect}\n         */\n        strokedRegion = new CPRect(0, 0, 0, 0),\n        brushManager = new CPBrushManager(),\n        that = this;\n\n    let paintingModes = [],\n        /**\n         * The currently selected layer (should never be null)\n         *\n         * @type {(CPImageLayer|CPLayerGroup)}\n         */\n        curLayer = layersRoot,\n        /**\n         * True if we're editing the mask of the currently selected layer, false otherwise.\n         *\n         * @type {boolean}\n         */\n        maskEditingMode = false,\n        /**\n         * If the user is viewing a single mask from the document, we cache the view of that here for later invalidation.\n         *\n         * @type {CPMaskView}\n         */\n        maskView = null,\n        /**\n         * Used by CPUndoPaint to keep track of the area of layer data that has been dirtied during a brush stroke\n         * (or other drawing operation) and should be saved for later undo.\n         */\n        paintUndoArea = new CPRect(0, 0, 0, 0),\n        hasUnsavedChanges = false,\n        curSelection = new CPRect(0, 0, 0, 0),\n        /**\n         * Points to a buffer which represents all the layers merged together. Since this buffer might be an actual\n         * layer from the image stack, you must not write to it through here (you'll damage the image).\n         *\n         * @type {CPColorBmp}\n         */\n        fusion = null,\n        rnd = new CPRandom(),\n        previewOperation = null,\n        /**\n         * @type {?CPClip}\n         */\n        clipboard = null,\n        /**\n         * @type {CPUndo[]}\n         */\n        undoList = [],\n        /**\n         * @type {CPUndo[]}\n         */\n        redoList = [],\n        /**\n         * @type {?CPBrushInfo}\n         */\n        curBrush = null,\n        lastX = 0.0,\n        lastY = 0.0,\n        lastPressure = 0.0,\n        sampleAllLayers = false,\n        /**\n         * Set to true when the user is in the middle of a painting operation (so redrawing the thumbnail would be\n         * a waste of time).\n         *\n         * @type {boolean}\n         */\n        drawingInProgress = false,\n        rebuildMaskThumbnail = new Set(),\n        rebuildImageThumbnail = new Set(),\n        thumbnailRebuildTimer = null,\n        /**\n         * @type {number}\n         */\n        curColor = 0x000000, // Black\n        transformInterpolation = \"smooth\";\n\n    /**\n     * We use this routine to suppress the updating of a thumbnail while the user is still drawing.\n     */\n    function beginPaintingInteraction() {\n        drawingInProgress = true;\n    }\n\n    /**\n     *\n     * @param {boolean} immediateUpdateOfThumbnail\n     */\n    function endPaintingInteraction(immediateUpdateOfThumbnail) {\n        drawingInProgress = false;\n\n        if (rebuildImageThumbnail.size > 0 || rebuildMaskThumbnail.size > 0) {\n            if (immediateUpdateOfThumbnail) {\n                buildThumbnails();\n            } else if (!thumbnailRebuildTimer) {\n                setTimeout(buildThumbnails, THUMBNAIL_REBUILD_DELAY_MSEC);\n            }\n        }\n    }\n\n    // When the selected rectangle changes\n    function callListenersSelectionChange() {\n        that.emitEvent(\"changeSelection\", []);\n    }\n\n    /**\n     * Get the root group which contains all the layers of the document.\n     *\n     * @returns {CPLayerGroup}\n     */\n    this.getLayersRoot = function () {\n        return layersRoot;\n    };\n\n    /**\n     * Gets the current selection rect or a rectangle covering the whole canvas if there are no selections\n     *\n     * @returns {CPRect}\n     */\n    this.getSelectionAutoSelect = function () {\n        if (!curSelection.isEmpty()) {\n            return this.getSelection();\n        }\n\n        return this.getBounds();\n    };\n\n    this.getSelection = function () {\n        return curSelection.clone();\n    };\n\n    function callListenersUpdateRegion(region) {\n        that.emitEvent(\"updateRegion\", [region]);\n    }\n\n    /**\n     * Notify listeners that the structure of the document has changed (layers added or removed).\n     */\n    function artworkStructureChanged() {\n        that.emitEvent(\"changeStructure\");\n\n        blendTree.resetTree();\n\n        invalidateUndoBuffers();\n\n        callListenersUpdateRegion(that.getBounds());\n    }\n\n    /**\n     * Notify listeners that the properties of the given layer has changed (opacity, blendMode, etc).\n     *\n     * @param {CPLayer} layer\n     * @param {string} propertyName\n     * @param {boolean} noVisibleEffect - If true, notify listeners that the layer has changed but don't redraw anything.\n     *                                    This is useful for properties like \"expanded\" and \"name\" which don't change the\n     *                                    visual appearance of the layer on the canvas.\n     */\n    function layerPropertyChanged(layer, propertyName, noVisibleEffect) {\n        that.emitEvent(\"changeLayer\", [layer]);\n\n        if (!noVisibleEffect) {\n            blendTree.layerPropertyChanged(layer, propertyName);\n            const bounds = that.getBounds();\n            callListenersUpdateRegion(bounds);\n        }\n    }\n\n    function buildThumbnails() {\n        for (let layer of rebuildImageThumbnail) {\n            layer.rebuildImageThumbnail();\n\n            that.emitEvent(\"changeLayerImageThumb\", [layer]);\n        }\n\n        for (let layer of rebuildMaskThumbnail) {\n            layer.rebuildMaskThumbnail();\n\n            that.emitEvent(\"changeLayerMaskThumb\", [layer]);\n        }\n\n        rebuildImageThumbnail.clear();\n\n        if (thumbnailRebuildTimer) {\n            clearTimeout(thumbnailRebuildTimer);\n            thumbnailRebuildTimer = null;\n        }\n    }\n\n    /**\n     * Mark the given rectangle on the layer as needing to be re-fused (i.e. we've drawn in this region).\n     * Listeners are notified about our updated canvas region.\n     *\n     * @param {(CPLayer|CPLayer[])} layers - Layer or layers to invalidate\n     * @param {CPRect} rect - Rect to invalidate. Must have all integer co-ordinates, and the rectangle must be contained\n     * within the artwork bounds.\n     * @param {boolean} invalidateImage - True if drawing happened on the layer's image data\n     * @param {boolean} invalidateMask - True if drawing happened on the layer's mask\n     */\n    function invalidateLayer(layers, rect, invalidateImage, invalidateMask) {\n        if (!Array.isArray(layers)) {\n            layers = [layers];\n        }\n\n        layers.forEach((layer) => blendTree.invalidateLayerRect(layer, rect));\n\n        let newThumbToRebuild = false;\n\n        if (invalidateImage) {\n            // This updated area will need to be updated in our undo buffer later\n            undoImageInvalidRegion.union(rect);\n\n            // Invalidate changed thumbnails\n            for (let layer of layers) {\n                if (layer instanceof CPImageLayer) {\n                    rebuildImageThumbnail.add(layer);\n                    newThumbToRebuild = true;\n                }\n            }\n        }\n\n        if (invalidateMask) {\n            undoMaskInvalidRegion.union(rect);\n\n            layers.forEach((layer) => {\n                rebuildMaskThumbnail.add(layer);\n\n                if (maskView && maskView.layer == layer) {\n                    maskView.invalidateRect(rect);\n                }\n            });\n\n            newThumbToRebuild = true;\n        }\n\n        // Update layer thumbnails\n        if (newThumbToRebuild) {\n            if (thumbnailRebuildTimer) {\n                clearTimeout(thumbnailRebuildTimer);\n                thumbnailRebuildTimer = null;\n            }\n            if (!drawingInProgress) {\n                thumbnailRebuildTimer = setTimeout(\n                    buildThumbnails,\n                    THUMBNAIL_REBUILD_DELAY_MSEC\n                );\n            }\n        }\n\n        callListenersUpdateRegion(rect);\n    }\n\n    /**\n     * Call when the layer's pixels have been updated as part of a paint operation, to mark it to be redrawn.\n     *\n     * The routine will decide if the layer's image or mask has been modified by using the global 'maskEditingMode'\n     * flag. This is what you want for a typical painting operation (since it'll typically modify only the image the\n     * user selected).\n     *\n     * @param {CPLayer} layer\n     * @param {CPRect} rect\n     */\n    function invalidateLayerPaint(layer, rect) {\n        invalidateLayer(layer, rect, !maskEditingMode, maskEditingMode);\n    }\n\n    /**\n     * Gets the image that the user has selected for drawing onto (a member of the currently active layer).\n     * Can be null if selecting a group's \"image\".\n     *\n     * @returns {?CPColorBmp|CPGreyBmp}\n     */\n    function getActiveImage() {\n        return maskEditingMode ? curLayer.mask : curLayer.image;\n    }\n\n    this.setHasUnsavedChanges = function (value) {\n        if (value != hasUnsavedChanges) {\n            hasUnsavedChanges = value;\n            this.emitEvent(\"unsavedChanges\", [value]);\n        }\n    };\n\n    this.getHasUnsavedChanges = function () {\n        return hasUnsavedChanges;\n    };\n\n    this.isAddLayerMaskAllowed = function () {\n        return !curLayer.mask;\n    };\n\n    /**\n     * Add a layer mask to the current layer.\n     */\n    this.addLayerMask = function () {\n        if (this.isAddLayerMaskAllowed()) {\n            addUndo(new CPActionAddLayerMask(curLayer));\n        }\n    };\n\n    this.isRemoveLayerMaskAllowed = function () {\n        return curLayer.mask !== null;\n    };\n\n    this.removeLayerMask = function () {\n        if (this.isRemoveLayerMaskAllowed()) {\n            addUndo(new CPActionRemoveLayerMask(curLayer, false));\n        }\n    };\n\n    this.isApplyLayerMaskAllowed = function () {\n        return curLayer.mask !== null && curLayer instanceof CPImageLayer;\n    };\n\n    this.applyLayerMask = function (apply) {\n        if (this.isApplyLayerMaskAllowed()) {\n            addUndo(new CPActionRemoveLayerMask(curLayer, true));\n        }\n    };\n\n    /**\n     * Add a layer of the specified type (layer, group) on top of the current layer.\n     *\n     * @param {string} layerType\n     * @returns {CPLayer}\n     */\n    this.addLayer = function (layerType) {\n        let parentGroup, newLayerIndex, newLayer;\n\n        if (curLayer instanceof CPLayerGroup && curLayer.expanded) {\n            parentGroup = curLayer;\n            newLayerIndex = curLayer.layers.length;\n        } else {\n            parentGroup = curLayer.parent;\n            newLayerIndex = parentGroup.layers.indexOf(curLayer) + 1;\n        }\n\n        switch (layerType) {\n            case \"group\":\n                // Attempt to insert above the clipping group if we're trying to insert inside one\n                while (\n                    parentGroup.layers[newLayerIndex] instanceof CPImageLayer &&\n                    parentGroup.layers[newLayerIndex].clip\n                ) {\n                    newLayerIndex++;\n                }\n\n                newLayer = new CPLayerGroup(\n                    this.getDefaultLayerName(true),\n                    CPBlend.LM_PASSTHROUGH\n                );\n                break;\n            default:\n                newLayer = new CPImageLayer(\n                    this.width,\n                    this.height,\n                    this.getDefaultLayerName(false)\n                );\n                newLayer.image.clearAll(EMPTY_LAYER_COLOR);\n        }\n\n        addUndo(new CPActionAddLayer(parentGroup, newLayerIndex, newLayer));\n\n        return newLayer;\n    };\n\n    /**\n     * Effectively an internal method to be called by CPChibiFile to populate the layer stack.\n     *\n     * @param {CPLayerGroup} parent\n     * @param {(CPImageLayer|CPLayerGroup)} layer\n     */\n    this.addLayerObject = function (parent, layer) {\n        parent.addLayer(layer);\n\n        // Select the layer if it's the first one in the document (so we can get a valid curLayer field)\n        if (parent == layersRoot && layersRoot.layers.length == 1) {\n            curLayer = layer;\n        }\n\n        artworkStructureChanged();\n    };\n\n    /**\n     * Internal method for CPChibiFile to call to wrap a group around the given number of children on\n     * the top of the layer stack.\n     *\n     * @param {CPLayerGroup} parent\n     * @param {CPLayerGroup} group\n     * @param {number} numChildren - Number of layers from the parent group to wrap\n     */\n    this.addLayerGroupObject = function (parent, group, numChildren) {\n        let children = [];\n\n        // Grab our child layers off the stack and add them to us.\n        for (let i = 0; i < numChildren; i++) {\n            children.unshift(parent.layers.pop());\n        }\n\n        children.forEach((child) => group.addLayer(child));\n\n        this.addLayerObject(parent, group);\n    };\n\n    this.isRemoveLayerAllowed = function () {\n        if (curLayer instanceof CPImageLayer) {\n            return layersRoot\n                .getLinearizedLayerList(false)\n                .some(\n                    (layer) =>\n                        layer instanceof CPImageLayer && layer != curLayer\n                );\n        }\n        if (curLayer instanceof CPLayerGroup) {\n            return layersRoot\n                .getLinearizedLayerList(false)\n                .some(\n                    (layer) =>\n                        layer instanceof CPImageLayer &&\n                        !layer.hasAncestor(curLayer)\n                );\n        }\n\n        return false;\n    };\n\n    /**\n     * Remove the currently selected layer.\n     *\n     * @return {boolean} True if the layer was removed, or false when removal failed because there would be no image\n     * layers left in the document after deletion.\n     */\n    this.removeLayer = function () {\n        if (this.isRemoveLayerAllowed()) {\n            addUndo(new CPActionRemoveLayer(curLayer));\n\n            return true;\n        }\n\n        return false;\n    };\n\n    this.duplicateLayer = function () {\n        addUndo(new CPActionDuplicateLayer(curLayer));\n    };\n\n    this.isMergeDownAllowed = function () {\n        let layerIndex = curLayer.parent.indexOf(curLayer);\n\n        return (\n            layerIndex > 0 &&\n            curLayer instanceof CPImageLayer &&\n            curLayer.parent.layers[layerIndex - 1] instanceof CPImageLayer\n        );\n    };\n\n    this.mergeDown = function () {\n        if (this.isMergeDownAllowed()) {\n            addUndo(new CPActionMergeDownLayer(curLayer));\n        }\n    };\n\n    this.isMergeGroupAllowed = function () {\n        return (\n            curLayer instanceof CPLayerGroup && curLayer.getEffectiveAlpha() > 0\n        );\n    };\n\n    this.mergeGroup = function () {\n        if (this.isMergeGroupAllowed()) {\n            addUndo(new CPActionMergeGroup(curLayer));\n        }\n    };\n\n    this.isMergeAllLayersAllowed = function () {\n        return layersRoot.getLinearizedLayerList(false).length > 1;\n    };\n\n    this.mergeAllLayers = function (addFlattenedLayer = false) {\n        if (this.isMergeAllLayersAllowed()) {\n            addUndo(new CPActionMergeAllLayers(addFlattenedLayer));\n        }\n    };\n\n    /**\n     * Move a layer in the stack from one index to another.\n     *\n     * @param {(CPImageLayer|CPLayerGroup)} layer\n     * @param {CPLayerGroup} toGroup\n     * @param {number} toIndex\n     */\n    this.relocateLayer = function (layer, toGroup, toIndex) {\n        if (\n            layer &&\n            toGroup &&\n            layer != toGroup &&\n            !toGroup.hasAncestor(layer)\n        ) {\n            addUndo(new CPActionRelocateLayer(layer, toGroup, toIndex));\n        }\n    };\n\n    /**\n     *\n     * @param {CPLayer} layer\n     * @param {boolean} visible\n     */\n    this.setLayerVisibility = function (layer, visible) {\n        let layers = [];\n\n        if (!layer.ancestorsAreVisible()) {\n            // Assume the user wants to make this layer visible by revealing its hidden ancestors (as well as the layer)\n            for (let node = layer; node != null; node = node.parent) {\n                if (!node.visible) {\n                    layers.push(node);\n                }\n            }\n            addUndo(new CPActionChangeLayerVisible(layers, true));\n        } else if (layer.visible != visible) {\n            addUndo(new CPActionChangeLayerVisible(layer, visible));\n        }\n    };\n\n    /**\n     * Expand or collapse the given layer group.\n     *\n     * @param {CPLayerGroup} group\n     * @param {boolean} expand - True to expand, false to collapse\n     */\n    this.expandLayerGroup = function (group, expand) {\n        if (group.expanded != expand) {\n            group.expanded = expand;\n\n            if (!expand && curLayer.hasAncestor(group)) {\n                // Don't allow the selected layer to get hidden in the group\n                this.setActiveLayer(group, false);\n            }\n\n            layerPropertyChanged(group, \"expanded\", true);\n        }\n    };\n\n    this.setLayerAlpha = function (alpha) {\n        if (curLayer.getAlpha() != alpha) {\n            addUndo(new CPActionChangeLayerAlpha(curLayer, alpha));\n        }\n    };\n\n    this.setLayerMaskLinked = function (linked) {\n        if (curLayer.maskLinked != linked) {\n            addUndo(new CPActionChangeLayerMaskLinked(curLayer, linked));\n        }\n    };\n\n    /**\n     *\n     * @param {CPLayer} layer\n     * @param {boolean} visible\n     */\n    this.setLayerMaskVisible = function (layer, visible) {\n        if (layer.maskVisible != visible) {\n            addUndo(new CPActionChangeLayerMaskVisible(layer, visible));\n        }\n    };\n\n    this.setLayerBlendMode = function (blendMode) {\n        if (\n            curLayer.getBlendMode() != blendMode &&\n            (blendMode != CPBlend.LM_PASSTHROUGH ||\n                curLayer instanceof CPLayerGroup)\n        ) {\n            addUndo(new CPActionChangeLayerMode(curLayer, blendMode));\n        }\n    };\n\n    /**\n     * @param {CPLayer} layer\n     * @param {string} name\n     */\n    this.setLayerName = function (layer, name) {\n        if (layer.getName() != name) {\n            addUndo(new CPActionChangeLayerName(layer, name));\n        }\n    };\n\n    /**\n     * Paint a dab of paint to the canvas using the current brush.\n     *\n     * @param {number} x - Position of brush tip\n     * @param {number} y - Position of brush tip\n     * @param {number} pressure - Pen pressure (tablets).\n     */\n    this.paintDab = function (x, y, pressure) {\n        curBrush.applyPressure(pressure);\n\n        if (curBrush.scattering > 0.0) {\n            x += (rnd.nextGaussian() * curBrush.curScattering) / 4.0;\n            y += (rnd.nextGaussian() * curBrush.curScattering) / 4.0;\n        }\n\n        let brushTool = paintingModes[curBrush.brushMode],\n            dab = brushManager.getDab(x, y, curBrush),\n            brushRect = new CPRect(0, 0, dab.width, dab.height),\n            imageRect = new CPRect(0, 0, dab.width, dab.height);\n\n        imageRect.translate(dab.x, dab.y);\n\n        that.getBounds().clipSourceDest(brushRect, imageRect);\n\n        if (imageRect.isEmpty()) {\n            // drawing entirely outside the canvas\n            return;\n        }\n\n        paintUndoArea.union(imageRect);\n\n        let destImage = maskEditingMode ? curLayer.mask : curLayer.image,\n            sampleImage =\n                sampleAllLayers && !maskEditingMode ? fusion : destImage;\n\n        /* The brush will either paint itself directly to the image, or paint itself to the strokeBuffer and update\n         * the strokedRegion (which will be merged to the image later by mergeStrokeBuffer(), perhaps in response\n         * to a call to fusionLayers())\n         */\n        brushTool.paintDab(\n            destImage,\n            imageRect,\n            sampleImage,\n            curBrush,\n            brushRect,\n            dab,\n            curColor\n        );\n\n        if (\n            !maskEditingMode &&\n            brushTool.noMergePhase &&\n            curLayer.getLockAlpha()\n        ) {\n            // This tool painted to the image during paintDab(), so we have to apply image alpha here instead of during merge\n            restoreImageAlpha(destImage, imageRect);\n        }\n\n        if (brushTool.wantsOutputAsInput) {\n            mergeStrokeBuffer();\n\n            if (sampleAllLayers && !maskEditingMode) {\n                that.fusionLayers();\n            }\n        }\n\n        invalidateLayerPaint(curLayer, imageRect);\n    };\n\n    this.getDefaultLayerName = function (isGroup) {\n        let prefix = isGroup ? \"Group \" : \"Layer \",\n            nameRegex = isGroup ? /^Group [0-9]+$/ : /^Layer [0-9]+$/,\n            highestLayerNb = 0,\n            layers = layersRoot.getLinearizedLayerList(false);\n\n        for (let i = 0; i < layers.length; i++) {\n            let layer = layers[i];\n\n            if (nameRegex.test(layer.name)) {\n                highestLayerNb = Math.max(\n                    highestLayerNb,\n                    parseInt(layer.name.substring(prefix.length), 10)\n                );\n            }\n        }\n        return prefix + (highestLayerNb + 1);\n    };\n\n    /**\n     * Restore the alpha channel of the given image from the undoImage (i.e. restore it to what it was before the\n     * current drawing operation started).\n     *\n     * @param {CPColorBmp} image\n     * @param {CPRect} rect\n     */\n    function restoreImageAlpha(image, rect) {\n        image.copyAlphaFrom(undoImage, rect);\n    }\n\n    /**\n     * Merge the brushstroke buffer from the current drawing operation to the active layer.\n     */\n    function mergeStrokeBuffer() {\n        if (!strokedRegion.isEmpty()) {\n            if (maskEditingMode) {\n                let destMask = curLayer.mask;\n\n                // Can't erase on masks, so just paint black instead\n                if (curBrush.brushMode == CPBrushInfo.BRUSH_MODE_ERASE) {\n                    paintingModes[CPBrushInfo.BRUSH_MODE_PAINT].mergeOntoMask(\n                        destMask,\n                        undoMask,\n                        0xff000000\n                    );\n                } else {\n                    paintingModes[curBrush.brushMode].mergeOntoMask(\n                        destMask,\n                        undoMask,\n                        curColor & 0xff\n                    );\n                }\n            } else {\n                let destImage = curLayer.image,\n                    lockAlpha = curLayer.getLockAlpha();\n\n                if (\n                    curBrush.brushMode == CPBrushInfo.BRUSH_MODE_ERASE &&\n                    lockAlpha\n                ) {\n                    // We're erasing with locked alpha, so the only sensible thing to do is paint white...\n\n                    // FIXME: it would be nice to be able to set the paper color\n                    paintingModes[CPBrushInfo.BRUSH_MODE_PAINT].mergeOntoImage(\n                        destImage,\n                        undoImage,\n                        EMPTY_LAYER_COLOR\n                    );\n                } else {\n                    paintingModes[curBrush.brushMode].mergeOntoImage(\n                        destImage,\n                        undoImage,\n                        curColor\n                    );\n                }\n\n                if (lockAlpha) {\n                    restoreImageAlpha(destImage, strokedRegion);\n                }\n            }\n\n            strokedRegion.makeEmpty();\n        }\n    }\n\n    function prepareForFusion() {\n        // The current brush renders out its buffers to the layer stack for us\n        mergeStrokeBuffer();\n\n        blendTree.buildTree();\n    }\n\n    this.addBackgroundLayer = function () {\n        //背景レイヤーを追加\n        let layer = new CPImageLayer(\n            that.width,\n            that.height,\n            this.getDefaultLayerName(false)\n        );\n        layer.image.clearAll(EMPTY_BACKGROUND_COLOR);\n        this.addLayerObject(this.getLayersRoot(), layer);\n    };\n    this.addDefaultLayer = function () {\n        //起動時に透明なレイヤーを1枚追加\n        let layer = new CPImageLayer(\n            that.width,\n            that.height,\n            this.getDefaultLayerName(false)\n        );\n        layer.image.clearAll(EMPTY_LAYER_COLOR);\n        this.addLayerObject(this.getLayersRoot(), layer);\n        //アクティブレイヤーにセット\n        this.setActiveLayer(layer, false);\n    };\n    /**\n     * Merge together the visible layers and return the resulting image for display to the screen.\n     *\n     * The image is cached, so repeat calls are cheap.\n     *\n     * @returns {CPColorBmp}\n     */\n    this.fusionLayers = function () {\n        prepareForFusion();\n\n        fusion = blendTree.blendTree().image;\n\n        return fusion;\n    };\n\n    /**\n     * Old ChibiPaint used a blending operator with a slightly different formula than us for blending onto opaque\n     * canvases. We can fix this in two ways:\n     *\n     * default - If it looks like the original layer would have used the old Opaque Multiply algorithm, keep using that\n     *           one, otherwise upgrade it to the new Multiply2 algorithm.\n     *\n     * bake - modify the pixels of Multiply layers in the document in order to bring their blended appearance to match what\n     *        the old multiply algorithm would have produced.\n     *\n     *        The resulting artwork is not really editable, because the baked-in corrections will only look correct when\n     *        the layers underneath the multiply layers are all the same as they originally were. Any change to layer\n     *        opacities will also ruin the result.\n     *\n     * Either way, this must not be called on new (ChickenPaint 0.10 format) artworks.\n     *\n     * @param {?string} mode\n     */\n    this.upgradeMultiplyLayers = function (mode) {\n        let layers = this.getLayersRoot().getLinearizedLayerList(false, []),\n            lastMultiplyLayerIndex = -1;\n\n        for (let i = 0; i < layers.length; i++) {\n            let layer = layers[i];\n\n            if (\n                !(layer instanceof CPImageLayer) ||\n                layer.mask ||\n                layer.blendMode > CPBlend.LM_LAST_CHIBIPAINT\n            ) {\n                throw new Error(\"Bad layer type during multiply upgrade\");\n            }\n\n            if (layer.blendMode === CPBlend.LM_MULTIPLY) {\n                lastMultiplyLayerIndex = i;\n            }\n        }\n\n        if (lastMultiplyLayerIndex !== -1) {\n            let fusion = new CPColorBmp(this.width, this.height),\n                hasTransparency = true,\n                first = true,\n                blendRect = this.getBounds();\n\n            fusion.clearAll(blendRect, 0x00ffffff); // Transparent white\n\n            for (let i = 0; i <= lastMultiplyLayerIndex; i++) {\n                let layer = layers[i];\n\n                if (!first) {\n                    hasTransparency =\n                        hasTransparency && fusion.hasAlphaInRect(blendRect);\n                }\n\n                if (layer.blendMode === CPBlend.LM_MULTIPLY) {\n                    switch (mode) {\n                        case \"bake\":\n                            /* Don't make changes to hidden multiply layers, we won't support editing the resulting\n                             * artwork to reveal these layers later anyway.\n                             */\n                            if (\n                                !hasTransparency &&\n                                layer.getEffectiveAlpha() > 0\n                            ) {\n                                // The original drawing probably used the old Opaque blend mode, so let's fix it up\n                                if (layer.alpha === 100) {\n                                    CPBlend.upgradeMultiplyOfOpaqueLayer(\n                                        fusion,\n                                        layer.image,\n                                        100,\n                                        blendRect\n                                    );\n                                } else {\n                                    CPBlend.upgradeMultiplyOfTransparentLayer(\n                                        fusion,\n                                        layer.image,\n                                        layer.alpha,\n                                        blendRect\n                                    );\n                                }\n                                layer.setBlendMode(CPBlend.LM_MULTIPLY2);\n                            }\n                            break;\n                        default:\n                            if (hasTransparency) {\n                                /* The original drawing probably wouldn't have used the old Opaque blend mode for this layer,\n                                 * so we can upgrade it.\n                                 */\n                                layer.setBlendMode(CPBlend.LM_MULTIPLY2);\n                            }\n                    }\n                }\n\n                if (layer.getEffectiveAlpha() > 0) {\n                    first = false;\n                    CPBlend.fuseImageOntoImage(\n                        fusion,\n                        hasTransparency,\n                        layer.image,\n                        layer.alpha,\n                        layer.blendMode,\n                        blendRect,\n                        null\n                    );\n                }\n            }\n        }\n    };\n\n    this.isCreateClippingMaskAllowed = function () {\n        let layerIndex = curLayer.parent.indexOf(curLayer),\n            underLayer = curLayer.parent.layers[layerIndex - 1];\n\n        return (\n            curLayer instanceof CPImageLayer &&\n            !curLayer.clip &&\n            underLayer instanceof CPImageLayer\n        );\n    };\n\n    /**\n     * Clip this layer to the one below, if it is not already clipped.\n     */\n    this.createClippingMask = function () {\n        if (this.isCreateClippingMaskAllowed()) {\n            addUndo(new CPActionChangeLayerClip(curLayer, true));\n        }\n    };\n\n    this.isReleaseClippingMaskAllowed = function () {\n        return curLayer instanceof CPImageLayer && curLayer.clip;\n    };\n\n    /**\n     * Clip this layer to the one below, if it is not already clipped.\n     */\n    this.releaseClippingMask = function () {\n        if (this.isReleaseClippingMaskAllowed()) {\n            addUndo(new CPActionChangeLayerClip(curLayer, false));\n        }\n    };\n\n    /**\n     * Change the currently active layer. The layer may not be set to null.\n     *\n     * @param {(CPLayer|CPImageLayer|CPLayerGroup)} newLayer\n     * @param {boolean} selectMask - True to select the layer's mask for editing\n     */\n    this.setActiveLayer = function (newLayer, selectMask) {\n        if (newLayer) {\n            // Ensure the mask really exists if we ask to select it\n            selectMask = newLayer.mask && selectMask;\n\n            let editingModeChanged = selectMask != maskEditingMode;\n\n            if (curLayer != newLayer || editingModeChanged) {\n                let oldLayer = curLayer;\n\n                curLayer = newLayer;\n                maskEditingMode = selectMask;\n\n                invalidateUndoBuffers();\n\n                this.emitEvent(\"changeActiveLayer\", [\n                    oldLayer,\n                    newLayer,\n                    maskEditingMode,\n                ]);\n\n                if (editingModeChanged) {\n                    this.emitEvent(\"editModeChanged\", [\n                        maskEditingMode\n                            ? CPArtwork.EDITING_MODE_MASK\n                            : CPArtwork.EDITING_MODE_IMAGE,\n                    ]);\n                }\n\n                if (maskView && maskView.layer == oldLayer) {\n                    if (selectMask) {\n                        maskView.setLayer(newLayer);\n                    } else {\n                        this.closeMaskView();\n                    }\n                }\n            }\n        }\n    };\n\n    this.closeMaskView = function () {\n        maskView.close();\n        maskView = null;\n    };\n\n    this.toggleMaskView = function () {\n        if (maskView == null || !maskView.isOpen()) {\n            if (curLayer.mask) {\n                maskView = new CPMaskView(curLayer, mergeStrokeBuffer);\n            } else {\n                maskView = null;\n            }\n        } else {\n            this.closeMaskView();\n        }\n\n        return maskView;\n    };\n\n    /**\n     * Select the topmost visible layer, or the topmost layer if none are visible.\n     */\n    this.selectTopmostVisibleLayer = function () {\n        let list = layersRoot.getLinearizedLayerList(false);\n\n        // Find a visible, drawable layer\n        for (let i = list.length - 1; i >= 0; i--) {\n            if (\n                list[i] instanceof CPImageLayer &&\n                list[i].getEffectiveAlpha() > 0\n            ) {\n                this.setActiveLayer(list[i], false);\n                return;\n            }\n        }\n\n        // None? Okay, how about just a drawable layer\n        for (let i = list.length - 1; i >= 0; i--) {\n            if (list[i] instanceof CPImageLayer) {\n                this.setActiveLayer(list[i], false);\n                return;\n            }\n        }\n\n        // Trying to be difficult, huh?\n        this.setActiveLayer(list[list.length - 1], false);\n    };\n\n    /**\n     * Get the currently active layer (the layer that drawing operations will be applied to))\n     *\n     * @returns {CPLayer}\n     */\n    this.getActiveLayer = function () {\n        return curLayer;\n    };\n\n    this.isEditingMask = function () {\n        return maskEditingMode;\n    };\n\n    this.isActiveLayerDrawable = function () {\n        return (\n            (maskEditingMode && curLayer.mask) ||\n            (!maskEditingMode && curLayer instanceof CPImageLayer)\n        );\n    };\n\n    /**\n     *\n     * @returns {number}\n     */\n    this.getUndoMemoryUsed = function () {\n        let total = 0;\n\n        for (let redo of redoList) {\n            total += redo.getMemoryUsed(true, null);\n        }\n\n        for (let undo of undoList) {\n            total += undo.getMemoryUsed(false, null);\n        }\n\n        return total;\n    };\n\n    this.isUndoAllowed = function () {\n        return undoList.length > 0;\n    };\n\n    this.isRedoAllowed = function () {\n        return redoList.length > 0;\n    };\n\n    //\n    // Undo / Redo\n    //\n\n    this.undo = function () {\n        if (!this.isUndoAllowed()) {\n            return;\n        }\n\n        this.setHasUnsavedChanges(true);\n\n        let undo = undoList.pop();\n\n        undo.undo();\n\n        redoList.push(undo);\n    };\n\n    this.redo = function () {\n        if (!this.isRedoAllowed()) {\n            return;\n        }\n\n        this.setHasUnsavedChanges(true);\n\n        let redo = redoList.pop();\n\n        redo.redo();\n\n        undoList.push(redo);\n    };\n\n    function prepareForLayerImageUndo() {\n        if (\n            curLayer instanceof CPImageLayer &&\n            !undoImageInvalidRegion.isEmpty()\n        ) {\n            // console.log(\"Copying \" + undoImageInvalidRegion + \" to the image undo buffer\");\n\n            undoImage.copyBitmapRect(\n                curLayer.image,\n                undoImageInvalidRegion.left,\n                undoImageInvalidRegion.top,\n                undoImageInvalidRegion\n            );\n\n            undoImageInvalidRegion.makeEmpty();\n        }\n    }\n\n    function prepareForLayerMaskUndo() {\n        if (curLayer.mask && !undoMaskInvalidRegion.isEmpty()) {\n            // console.log(\"Copying \" + undoMaskInvalidRegion + \" to the mask undo buffer\");\n\n            undoMask.copyBitmapRect(\n                curLayer.mask,\n                undoMaskInvalidRegion.left,\n                undoMaskInvalidRegion.top,\n                undoMaskInvalidRegion\n            );\n\n            undoMaskInvalidRegion.makeEmpty();\n        }\n    }\n\n    /**\n     * Call before making a paint operation on the current layer, in order to store the state of the layer for\n     * later undo with CPUndoPaint.\n     */\n    function prepareForLayerPaintUndo() {\n        if (maskEditingMode) {\n            prepareForLayerMaskUndo();\n        } else {\n            prepareForLayerImageUndo();\n        }\n    }\n\n    /**\n     * Call when the undo buffer has become completely worthless (e.g. after the active layer index changes, the undo\n     * buffer won't contain any data from the new layer to begin with).\n     */\n    function invalidateUndoBuffers() {\n        let bounds = that.getBounds();\n\n        undoImageInvalidRegion.set(bounds);\n        undoMaskInvalidRegion.set(bounds);\n    }\n\n    /**\n     * The result of some of our operations aren't needed until later, so we can defer them until the user is idle.\n     *\n     * You may call this routine at any time (or never, if you like) as a hint that the user is idle and we should\n     * try to perform pending operations before we will need to block on their results.\n     */\n    this.performIdleTasks = function () {\n        prepareForLayerPaintUndo();\n\n        prepareForFusion();\n    };\n\n    /**\n     *\n     * @param {CPUndo} undo\n     */\n    function addUndo(undo) {\n        that.setHasUnsavedChanges(true);\n\n        if (redoList.length > 0) {\n            redoList = [];\n        }\n\n        if (\n            undoList.length === 0 ||\n            !undoList[undoList.length - 1].merge(undo)\n        ) {\n            if (undoList.length >= MAX_UNDO) {\n                undoList.shift();\n            }\n            that.compactUndo();\n            undoList.push(undo);\n        } else if (undoList[undoList.length - 1].noChange()) {\n            // Two merged changes can mean no change at all\n            // don't leave a useless undo in the list\n            undoList.pop();\n        }\n    }\n\n    /**\n     * Compress the undo action at the top of the stack to save space. Intended for internal calls only.\n     */\n    this.compactUndo = function () {\n        if (undoList.length > 0) {\n            undoList[undoList.length - 1].compact();\n        }\n    };\n\n    this.clearHistory = function () {\n        undoList = [];\n        redoList = [];\n    };\n\n    /**\n     * Sample the color at the given coordinates.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {number}\n     */\n    this.colorPicker = function (x, y) {\n        if (maskEditingMode && curLayer.mask) {\n            return CPColor.greyToRGB(curLayer.mask.getPixel(~~x, ~~y));\n        } else {\n            return fusion.getPixel(~~x, ~~y) & 0xffffff;\n        }\n    };\n\n    this.setSelection = function (rect) {\n        curSelection.set(rect);\n        // Ensure we never have fractional coordinates in our selections:\n        curSelection.roundNearest();\n        curSelection.clipTo(this.getBounds());\n    };\n\n    this.emptySelection = function () {\n        curSelection.makeEmpty();\n    };\n\n    /**\n     * Flood fill the current layer using the current color at the given coordinates.\n     *\n     * @param {number} x\n     * @param {number} y\n     */\n    this.floodFill = function (x, y) {\n        let target = getActiveImage();\n\n        if (target) {\n            prepareForLayerPaintUndo();\n            paintUndoArea = this.getBounds();\n\n            target.floodFill(~~x, ~~y, curColor | 0xff000000);\n\n            addUndo(new CPUndoPaint());\n            invalidateLayerPaint(curLayer, this.getBounds());\n        }\n    };\n\n    this.gradientFill = function (fromX, fromY, toX, toY, gradientPoints) {\n        let r = this.getSelectionAutoSelect(),\n            target = getActiveImage();\n\n        if (target) {\n            prepareForLayerPaintUndo();\n            paintUndoArea = r.clone();\n\n            target.gradient(r, fromX, fromY, toX, toY, gradientPoints, false);\n\n            if (this.getLayerLockAlpha() && target instanceof CPColorBmp) {\n                restoreImageAlpha(target, r);\n            }\n\n            addUndo(new CPUndoPaint());\n            invalidateLayerPaint(curLayer, r);\n        }\n    };\n\n    /**\n     * Replace the pixels in the selection rectangle with the specified color.\n     *\n     * @param {number} color - ARGB color to fill with\n     */\n    this.fill = function (color) {\n        let r = this.getSelectionAutoSelect(),\n            target = getActiveImage();\n\n        if (target) {\n            prepareForLayerPaintUndo();\n            paintUndoArea = r.clone();\n\n            target.clearRect(r, color);\n\n            addUndo(new CPUndoPaint());\n            invalidateLayerPaint(curLayer, r);\n        }\n    };\n\n    this.clear = function () {\n        if (maskEditingMode) {\n            this.fill(EMPTY_MASK_COLOR);\n        } else {\n            this.fill(EMPTY_LAYER_COLOR);\n        }\n    };\n\n    /**\n     *\n     * @param {boolean} horizontal\n     */\n    this.flip = function (horizontal) {\n        let rect = this.getSelection(),\n            flipWholeLayer = rect.isEmpty(),\n            transformBoth =\n                flipWholeLayer &&\n                curLayer instanceof CPImageLayer &&\n                curLayer.mask &&\n                curLayer.maskLinked,\n            transformImage =\n                (!maskEditingMode || transformBoth) &&\n                curLayer instanceof CPImageLayer,\n            transformMask = (maskEditingMode || transformBoth) && curLayer.mask,\n            routine = horizontal ? \"copyRegionHFlip\" : \"copyRegionVFlip\";\n\n        if (!transformImage && !transformMask) {\n            return;\n        }\n\n        if (flipWholeLayer) {\n            rect = this.getBounds();\n        }\n\n        paintUndoArea = rect.clone();\n\n        if (transformImage) {\n            prepareForLayerImageUndo();\n\n            curLayer.image[routine](rect, undoImage);\n        }\n        if (transformMask) {\n            prepareForLayerMaskUndo();\n\n            curLayer.mask[routine](rect, undoMask);\n        }\n\n        addUndo(new CPUndoPaint(transformImage, transformMask));\n        invalidateLayer(curLayer, rect, transformImage, transformMask);\n    };\n\n    this.hFlip = function () {\n        this.flip(true);\n    };\n\n    this.vFlip = function () {\n        this.flip(false);\n    };\n\n    this.monochromaticNoise = function () {\n        let r = this.getSelectionAutoSelect(),\n            target = getActiveImage();\n\n        if (target) {\n            prepareForLayerPaintUndo();\n            paintUndoArea = r.clone();\n\n            target.fillWithNoise(r);\n\n            addUndo(new CPUndoPaint());\n            invalidateLayerPaint(curLayer, r);\n        }\n    };\n\n    this.isColorNoiseAllowed = function () {\n        return !this.isEditingMask() && this.isActiveLayerDrawable();\n    };\n\n    /**\n     * We can only fill layer images with color noise (not masks)\n     */\n    this.colorNoise = function () {\n        if (this.isColorNoiseAllowed()) {\n            let r = this.getSelectionAutoSelect();\n\n            prepareForLayerPaintUndo();\n            paintUndoArea = r.clone();\n\n            curLayer.image.fillWithColorNoise(r);\n\n            addUndo(new CPUndoPaint(true, false));\n            invalidateLayer(curLayer, r, true, false);\n        }\n    };\n\n    this.invert = function () {\n        let r = this.getSelectionAutoSelect(),\n            target = getActiveImage();\n\n        if (target) {\n            prepareForLayerPaintUndo();\n            paintUndoArea = r.clone();\n\n            target.invert(r);\n\n            addUndo(new CPUndoPaint());\n            invalidateLayerPaint(curLayer, r);\n        }\n    };\n\n    this.brightnessToOpacity = function () {\n        let r = this.getSelectionAutoSelect(),\n            target = getActiveImage();\n\n        if (target) {\n            prepareForLayerPaintUndo();\n            paintUndoArea = r.clone();\n\n            target.brightnessToOpacity(r);\n\n            addUndo(new CPUndoPaint());\n            invalidateLayerPaint(curLayer, r);\n        }\n    };\n\n    /**\n     *\n     * @param {number} radiusX\n     * @param {number} radiusY\n     * @param {number} iterations\n     */\n    this.boxBlur = function (radiusX, radiusY, iterations) {\n        let r = this.getSelectionAutoSelect(),\n            target = getActiveImage();\n\n        if (target) {\n            prepareForLayerPaintUndo();\n            paintUndoArea = r.clone();\n\n            for (let i = 0; i < iterations; i++) {\n                target.boxBlur(r, radiusX, radiusY);\n            }\n\n            addUndo(new CPUndoPaint());\n            invalidateLayerPaint(curLayer, r);\n        }\n    };\n\n    this.rectangleSelection = function (r) {\n        let newSelection = r.clone();\n\n        newSelection.clipTo(this.getBounds());\n\n        addUndo(\n            new CPUndoRectangleSelection(this.getSelection(), newSelection)\n        );\n\n        this.setSelection(newSelection);\n    };\n\n    /**\n     * Get the most recently completed operation from the undo list, or null if the undo list is empty.\n     *\n     * @returns {*}\n     */\n    function getActiveOperation() {\n        if (undoList.length > 0) {\n            return undoList[undoList.length - 1];\n        }\n\n        return null;\n    }\n\n    /**\n     * Move the currently selected layer by the given offset.\n     *\n     * @param {number} offsetX\n     * @param {number} offsetY\n     * @param {boolean} copy - Make a copy of the selection instead of moving it.\n     */\n    this.move = function (offsetX, offsetY, copy) {\n        /*\n         * Add rounding to ensure we haven't been given float coordinates (that would cause horrible flow-on effects like\n         * the boundary of the undo rectangle having float coordinates)\n         */\n        offsetX |= 0;\n        offsetY |= 0;\n\n        if (offsetX == 0 && offsetY == 0) {\n            return;\n        }\n\n        let activeOp = getActiveOperation();\n\n        // If we've changed layers since our last move, we want to move the new layer, not the old one, so can't amend\n        if (\n            !copy &&\n            activeOp instanceof CPActionMoveSelection &&\n            activeOp.layer == this.getActiveLayer()\n        ) {\n            activeOp.amend(offsetX, offsetY);\n            redoList = [];\n            this.setHasUnsavedChanges(true);\n        } else {\n            let action = new CPActionMoveSelection(offsetX, offsetY, copy);\n\n            addUndo(action);\n\n            action.redo();\n        }\n    };\n\n    /**\n     * Change the interpolation mode used by Free Transform operations\n     *\n     * @param {string} interpolation - Either \"sharp\" or \"smooth\"\n     */\n    this.setTransformInterpolation = function (interpolation) {\n        transformInterpolation = interpolation;\n        if (previewOperation instanceof CPActionAffineTransformSelection) {\n            previewOperation.setInterpolation(interpolation);\n        }\n    };\n\n    /**\n     * If the current operation is an affine transform, roll it back and remove it from the undo history.\n     */\n    this.transformAffineAbort = function () {\n        if (previewOperation instanceof CPActionAffineTransformSelection) {\n            previewOperation.undo();\n            previewOperation = null;\n            endPaintingInteraction(true);\n        }\n    };\n\n    /**\n     * Begins transforming the current selection/layer, and returns the initial source rectangle and initial transform.\n     * You can update the transform by calling transformAffineAmend().\n     *\n     * You must call transformAffineFinish() or transformAffineAbort() to finish the transformation.\n     *\n     * Returns null if the current selection/layer doesn't contain any non-transparent pixels, and doesn't start\n     * transforming.\n     */\n    this.transformAffineBegin = function () {\n        // Are we already transforming? Continue that instead\n        if (previewOperation instanceof CPActionAffineTransformSelection) {\n            return {\n                transform: previewOperation.getTransform(),\n                rect: previewOperation.getInitialTransformRect(),\n                selection: previewOperation.getInitialSelectionRect(),\n            };\n        }\n\n        let initialTransform = new CPTransform(),\n            operation;\n\n        /* If we introduce other previewOperations, we might want to check we aren't overwriting them here...\n         * Though probably ChickenPaint's global exclusive mode will enforce this for us.\n         */\n        operation = new CPActionAffineTransformSelection(\n            initialTransform,\n            transformInterpolation\n        );\n\n        if (operation.getInitialTransformRect().isEmpty()) {\n            // Tried to transform a selection which contained no pixels\n            return null;\n        }\n\n        previewOperation = operation;\n\n        // No need for an initial .redo() since the transform is the identity\n\n        beginPaintingInteraction();\n\n        return {\n            transform: initialTransform,\n            rect: operation.getInitialTransformRect(),\n            selection: operation.getInitialSelectionRect(),\n        };\n    };\n\n    /**\n     * Finish and save the transform that is currently in progress.\n     */\n    this.transformAffineFinish = function () {\n        if (previewOperation instanceof CPActionAffineTransformSelection) {\n            addUndo(previewOperation);\n            previewOperation = null;\n            endPaintingInteraction(true);\n        }\n    };\n\n    /**\n     * Transform the currently selected layer data using the given AffineTransform.\n     *\n     * @param {CPTransform} affineTransform\n     */\n    this.transformAffineAmend = function (affineTransform) {\n        if (previewOperation instanceof CPActionAffineTransformSelection) {\n            previewOperation.amend(affineTransform);\n        }\n    };\n\n    // Copy/Paste functions\n    this.isCutSelectionAllowed = function () {\n        return !this.getSelection().isEmpty() && getActiveImage() !== null;\n    };\n\n    this.isCopySelectionAllowed = this.isCutSelectionAllowed;\n\n    this.cutSelection = function () {\n        if (this.isCutSelectionAllowed()) {\n            addUndo(\n                new CPActionCut(curLayer, maskEditingMode, this.getSelection())\n            );\n        }\n    };\n\n    this.copySelection = function () {\n        if (this.isCopySelectionAllowed()) {\n            let selection = that.getSelection(),\n                image = getActiveImage();\n\n            clipboard = new CPClip(\n                image.cloneRect(selection),\n                selection.left,\n                selection.top\n            );\n        }\n    };\n\n    this.isCopySelectionMergedAllowed = function () {\n        return !this.getSelection().isEmpty();\n    };\n\n    this.copySelectionMerged = function () {\n        if (this.isCopySelectionMergedAllowed()) {\n            let selection = that.getSelection();\n\n            clipboard = new CPClip(\n                this.fusionLayers().cloneRect(selection),\n                selection.left,\n                selection.top\n            );\n        }\n    };\n\n    this.isPasteClipboardAllowed = function () {\n        return !this.isClipboardEmpty();\n    };\n\n    this.pasteClipboard = function () {\n        if (this.isPasteClipboardAllowed()) {\n            addUndo(new CPActionPaste(clipboard));\n        }\n    };\n\n    /**\n     *\n     * @returns {CPClip}\n     */\n    this.getClipboard = function () {\n        return clipboard;\n    };\n\n    /*\n     * @param {CPClip} clipboard\n     */\n    this.setClipboard = function (newClipboard) {\n        clipboard = newClipboard;\n    };\n\n    this.isClipboardEmpty = function () {\n        return clipboard == null;\n    };\n\n    this.setSampleAllLayers = function (b) {\n        sampleAllLayers = b;\n    };\n\n    this.getLayerLockAlpha = function () {\n        return this.getActiveLayer().getLockAlpha();\n    };\n\n    this.setLayerLockAlpha = function (lock) {\n        if (curLayer.getLockAlpha() != lock) {\n            addUndo(new CPActionChangeLayerLockAlpha(curLayer, lock));\n        }\n    };\n\n    /**\n     * @param {number} color - RGB color\n     */\n    this.setForegroundColor = function (color) {\n        curColor = color;\n    };\n\n    this.setBrush = function (brush) {\n        curBrush = brush;\n    };\n\n    this.setBrushTexture = function (texture) {\n        brushManager.setTexture(texture);\n    };\n\n    /**\n     * Start a painting operation.\n     *\n     * @param {float} x\n     * @param {float} y\n     * @param {float} pressure\n     * @returns {boolean} - true if the painting began successfully, false otherwise (don't call continueStroke or endStroke!)\n     */\n    this.beginStroke = function (x, y, pressure) {\n        if (curBrush === null || !this.isActiveLayerDrawable()) {\n            return false;\n        }\n\n        prepareForLayerPaintUndo();\n        paintUndoArea.makeEmpty();\n\n        strokeBuffer.clearAll(0);\n        strokedRegion.makeEmpty();\n\n        lastX = x;\n        lastY = y;\n        lastPressure = pressure;\n\n        beginPaintingInteraction();\n\n        paintingModes[curBrush.brushMode].beginStroke();\n\n        this.paintDab(x, y, pressure);\n\n        return true;\n    };\n\n    this.continueStroke = function (x, y, pressure) {\n        if (curBrush == null) {\n            return;\n        }\n\n        let dist = Math.sqrt(\n                (lastX - x) * (lastX - x) + (lastY - y) * (lastY - y)\n            ),\n            spacing = Math.max(\n                curBrush.minSpacing,\n                curBrush.curSize * curBrush.spacing\n            );\n\n        if (dist > spacing) {\n            let nx = lastX,\n                ny = lastY,\n                np = lastPressure,\n                df = (spacing - 0.001) / dist;\n\n            for (let f = df; f <= 1.0; f += df) {\n                nx = f * x + (1.0 - f) * lastX;\n                ny = f * y + (1.0 - f) * lastY;\n                np = f * pressure + (1.0 - f) * lastPressure;\n                this.paintDab(nx, ny, np);\n            }\n            lastX = nx;\n            lastY = ny;\n            lastPressure = np;\n        }\n    };\n\n    this.endStroke = function () {\n        if (curBrush == null) {\n            return;\n        }\n\n        mergeStrokeBuffer();\n\n        paintingModes[curBrush.brushMode].endStroke();\n\n        paintUndoArea.clipTo(this.getBounds());\n\n        // Did we end up painting anything?\n        if (!paintUndoArea.isEmpty()) {\n            addUndo(new CPUndoPaint());\n\n            /* Eagerly update the undo buffer for next time so we can avoid this lengthy\n             * prepare at the beginning of a paint stroke\n             */\n            prepareForLayerPaintUndo();\n        }\n\n        endPaintingInteraction(false);\n    };\n\n    this.hasAlpha = function () {\n        return fusion.hasAlpha();\n    };\n\n    /**\n     * Get the artwork as a single flat PNG image.\n     *\n     * Rotation is [0..3] and selects a multiple of 90 degrees of clockwise rotation to be applied to the drawing before\n     * saving.\n     *\n     * @return {string} A binary string of the PNG file data.\n     */\n    this.getFlatPNG = function (rotation) {\n        this.fusionLayers();\n\n        return fusion.getAsPNG(rotation);\n    };\n\n    /**\n     * Get the artwork as a single flat PNG image.\n     *\n     * Rotation is [0..3] and selects a multiple of 90 degrees of clockwise rotation to be applied to the drawing before\n     * saving.\n     *\n     * @return {Buffer}\n     */\n    this.getFlatPNGBuffer = function (rotation) {\n        this.fusionLayers();\n\n        return fusion.getAsPNGBuffer(rotation);\n    };\n\n    /**\n     * Returns true if this artwork can be exactly represented as a simple transparent PNG (i.e. doesn't have multiple\n     * layers, and base layer's opacity is set to 100%).\n     */\n    this.isSimpleDrawing = function () {\n        return (\n            layersRoot.layers.length == 1 &&\n            layersRoot.layers[0] instanceof CPImageLayer &&\n            !layersRoot.layers[0].mask &&\n            layersRoot.layers[0].getEffectiveAlpha() == 100\n        );\n    };\n\n    /**\n     * Save the difference between the current layer and the undoImage / undoMask (within the undoArea) for undo, and\n     * clear the undoArea.\n     *\n     * @constructor\n     */\n    function CPUndoPaint(paintedImage, paintedMask) {\n        if (!paintedImage && !paintedMask) {\n            paintedImage = !maskEditingMode;\n            paintedMask = maskEditingMode;\n        }\n\n        let rect = paintUndoArea.clone(),\n            xorImage = paintedImage\n                ? undoImage.copyRectXOR(curLayer.image, rect)\n                : null,\n            xorMask = paintedMask\n                ? undoMask.copyRectXOR(curLayer.mask, rect)\n                : null;\n\n        this.layer = curLayer;\n\n        paintUndoArea.makeEmpty();\n\n        this.undo = function () {\n            if (xorImage) {\n                this.layer.image.setRectXOR(xorImage, rect);\n            }\n            if (xorMask) {\n                this.layer.mask.setRectXOR(xorMask, rect);\n            }\n\n            invalidateLayer(\n                this.layer,\n                rect,\n                xorImage != null,\n                xorMask != null\n            );\n        };\n\n        this.redo = this.undo;\n\n        this.getMemoryUsed = function (undone, param) {\n            return (\n                (xorImage ? xorImage.length : 0) +\n                (xorMask ? xorMask.length : 0)\n            );\n        };\n    }\n\n    CPUndoPaint.prototype = Object.create(CPUndo.prototype);\n    CPUndoPaint.prototype.constructor = CPUndoPaint;\n\n    /**\n     * Upon creation, adds a layer mask to the given layer.\n     *\n     * @param {CPLayer} layer\n     *\n     * @constructor\n     */\n    function CPActionAddLayerMask(layer) {\n        let oldMaskLinked = layer.maskLinked,\n            oldMaskVisible = layer.maskVisible;\n\n        this.undo = function () {\n            layer.setMask(null);\n\n            layer.maskLinked = oldMaskLinked;\n            layer.maskVisible = oldMaskVisible;\n\n            artworkStructureChanged();\n\n            that.setActiveLayer(layer, false);\n        };\n\n        this.redo = function () {\n            let newMask = new CPGreyBmp(that.width, that.height, 8);\n\n            newMask.clearAll(255);\n\n            layer.maskLinked = true;\n            layer.maskVisible = true;\n\n            layer.setMask(newMask);\n\n            artworkStructureChanged();\n\n            that.setActiveLayer(layer, true);\n        };\n\n        this.redo();\n    }\n\n    CPActionAddLayerMask.prototype = Object.create(CPUndo.prototype);\n    CPActionAddLayerMask.prototype.constructor = CPActionAddLayerMask;\n\n    /**\n     * Upon creation, removes, or applies and removes, the layer mask on the given layer.\n     *\n     * @param {CPLayer} layer\n     * @param {boolean} apply\n     *\n     * @constructor\n     */\n    function CPActionRemoveLayerMask(layer, apply) {\n        let oldMask = layer.mask,\n            oldLayerImage,\n            maskWasSelected = false;\n\n        if (apply && layer instanceof CPImageLayer) {\n            oldLayerImage = layer.image.clone();\n        } else {\n            oldLayerImage = null;\n        }\n\n        maskWasSelected = curLayer == layer && maskEditingMode;\n\n        this.undo = function () {\n            layer.setMask(oldMask);\n\n            if (oldLayerImage) {\n                layer.image.copyPixelsFrom(oldLayerImage);\n                invalidateLayer(layer, layer.image.getBounds(), true, false);\n            }\n\n            if (maskWasSelected) {\n                that.setActiveLayer(layer, true);\n            }\n\n            artworkStructureChanged();\n        };\n\n        this.redo = function () {\n            if (oldLayerImage) {\n                CPBlend.multiplyAlphaByMask(layer.image, 100, layer.mask);\n\n                // Ensure thumbnail is repainted (artworkStructureChanged() doesn't repaint thumbs)\n                invalidateLayer(layer, that.getBounds(), true, false);\n            }\n\n            if (maskWasSelected) {\n                that.setActiveLayer(layer, false);\n            }\n\n            layer.setMask(null);\n\n            artworkStructureChanged();\n        };\n\n        this.redo();\n    }\n\n    CPActionRemoveLayerMask.prototype = Object.create(CPUndo.prototype);\n    CPActionRemoveLayerMask.prototype.constructor = CPActionRemoveLayerMask;\n\n    /**\n     * Upon creation, adds a layer at the given index in the given layer group.\n     *\n     * @param {CPLayerGroup} parentGroup\n     * @param {number} newLayerIndex\n     * @param {CPLayer} newLayer\n     *\n     * @constructor\n     */\n    function CPActionAddLayer(parentGroup, newLayerIndex, newLayer) {\n        const newLayerWasClipped =\n                newLayer instanceof CPImageLayer && newLayer.clip,\n            toBelowLayer = parentGroup.layers[newLayerIndex],\n            toBelowLayerWasClipped =\n                toBelowLayer instanceof CPImageLayer && toBelowLayer.clip,\n            fromMask = maskEditingMode;\n\n        this.undo = function () {\n            parentGroup.removeLayer(newLayer);\n\n            let newSelection =\n                parentGroup.layers[newLayerIndex - 1] ||\n                parentGroup.layers[0] ||\n                parentGroup;\n\n            if (toBelowLayer instanceof CPImageLayer) {\n                toBelowLayer.clip = toBelowLayerWasClipped;\n            }\n            if (newLayer instanceof CPImageLayer) {\n                newLayer.clip = newLayerWasClipped;\n            }\n\n            artworkStructureChanged();\n            that.setActiveLayer(newSelection, fromMask);\n        };\n\n        this.redo = function () {\n            parentGroup.insertLayer(newLayerIndex, newLayer);\n\n            if (toBelowLayerWasClipped) {\n                if (newLayer instanceof CPImageLayer) {\n                    // Join a clipping group if we add an image layer in the middle of it\n                    newLayer.clip = true;\n                } else {\n                    // If we add a group into a clipping group, break it\n                    toBelowLayer.clip = false;\n                }\n            }\n\n            artworkStructureChanged();\n            that.setActiveLayer(newLayer, false);\n        };\n\n        this.redo();\n    }\n\n    CPActionAddLayer.prototype = Object.create(CPUndo.prototype);\n    CPActionAddLayer.prototype.constructor = CPActionAddLayer;\n\n    /**\n     * Make a copy of the currently selected layer and add the new layer on top of the current layer.\n     *\n     * @param {CPLayer} sourceLayer\n     * @constructor\n     */\n    function CPActionDuplicateLayer(sourceLayer) {\n        let newLayer = sourceLayer.clone(),\n            oldMask = maskEditingMode;\n\n        this.undo = function () {\n            newLayer.parent.removeLayer(newLayer);\n\n            artworkStructureChanged();\n            that.setActiveLayer(sourceLayer, oldMask);\n        };\n\n        this.redo = function () {\n            const COPY_SUFFIX = \" Copy\";\n\n            let newLayerName = sourceLayer.name;\n\n            if (!newLayerName.endsWith(COPY_SUFFIX)) {\n                newLayerName += COPY_SUFFIX;\n            }\n\n            newLayer.name = newLayerName;\n\n            sourceLayer.parent.insertLayer(\n                sourceLayer.parent.indexOf(sourceLayer) + 1,\n                newLayer\n            );\n\n            artworkStructureChanged();\n            that.setActiveLayer(newLayer, false);\n        };\n\n        this.redo();\n    }\n\n    CPActionDuplicateLayer.prototype = Object.create(CPUndo.prototype);\n    CPActionDuplicateLayer.prototype.constructor = CPActionDuplicateLayer;\n\n    /**\n     * @param {CPLayer} layer\n     */\n    function CPActionRemoveLayer(layer) {\n        let oldGroup = layer.parent,\n            oldIndex = oldGroup.indexOf(layer),\n            oldMask = maskEditingMode,\n            numLayersClippedAbove = 0;\n\n        if (layer instanceof CPImageLayer && !layer.clip) {\n            for (let i = oldIndex + 1; i < oldGroup.layers.length; i++) {\n                if (\n                    oldGroup.layers[i] instanceof CPImageLayer &&\n                    oldGroup.layers[i].clip\n                ) {\n                    numLayersClippedAbove++;\n                } else {\n                    break;\n                }\n            }\n        }\n        this.undo = function () {\n            oldGroup.insertLayer(oldIndex, layer);\n\n            for (let i = 0; i < numLayersClippedAbove; i++) {\n                oldGroup.layers[i + oldIndex + 1].clip = true;\n            }\n\n            artworkStructureChanged();\n            that.setActiveLayer(layer, oldMask);\n        };\n\n        this.redo = function () {\n            // Release the clip of any layers who had us as their clipping root\n            for (let i = 0; i < numLayersClippedAbove; i++) {\n                oldGroup.layers[i + oldIndex + 1].clip = false;\n            }\n\n            oldGroup.removeLayerAtIndex(oldIndex);\n\n            let newSelectedLayer;\n\n            /* Attempt to select the layer underneath the one that was removed, otherwise the one on top,\n             * otherwise the group that contained the layer.\n             */\n            if (oldGroup.layers.length == 0) {\n                newSelectedLayer = layer.parent;\n            } else {\n                newSelectedLayer = oldGroup.layers[Math.max(oldIndex - 1, 0)];\n            }\n\n            artworkStructureChanged();\n            that.setActiveLayer(newSelectedLayer, false);\n        };\n\n        this.getMemoryUsed = function (undone, param) {\n            return undone ? 0 : layer.getMemoryUsed();\n        };\n\n        this.redo();\n    }\n\n    CPActionRemoveLayer.prototype = Object.create(CPUndo.prototype);\n    CPActionRemoveLayer.prototype.constructor = CPActionRemoveLayer;\n\n    /**\n     * Merge the given group together to form an image layer.\n     *\n     * @param {CPLayerGroup} layerGroup\n     * @constructor\n     */\n    function CPActionMergeGroup(layerGroup) {\n        let oldGroupIndex = layerGroup.parent.indexOf(layerGroup),\n            fromMask = maskEditingMode,\n            mergedLayer = new CPImageLayer(that.width, that.height, \"\");\n\n        this.undo = function () {\n            layerGroup.parent.setLayerAtIndex(oldGroupIndex, layerGroup);\n\n            artworkStructureChanged();\n            that.setActiveLayer(layerGroup, fromMask);\n        };\n\n        this.redo = function () {\n            layerGroup.parent.setLayerAtIndex(oldGroupIndex, mergedLayer);\n\n            artworkStructureChanged();\n            that.setActiveLayer(mergedLayer, false);\n        };\n\n        this.getMemoryUsed = function (undone, param) {\n            return undone ? 0 : layerGroup.getMemoryUsed();\n        };\n\n        let blendTree = new CPBlendTree(\n                layerGroup,\n                that.width,\n                that.height,\n                false\n            ),\n            blended;\n\n        blendTree.buildTree();\n\n        blended = blendTree.blendTree();\n\n        mergedLayer.name = layerGroup.name;\n\n        mergedLayer.alpha = blended.alpha;\n        mergedLayer.image = blended.image;\n        mergedLayer.blendMode = blended.blendMode;\n        mergedLayer.mask = blended.mask;\n\n        if (mergedLayer.blendMode == CPBlend.LM_PASSTHROUGH) {\n            // Passthrough is not a meaningful blend mode for a single layer\n            mergedLayer.blendMode = CPBlend.LM_NORMAL;\n        }\n\n        this.redo();\n    }\n\n    CPActionMergeGroup.prototype = Object.create(CPUndo.prototype);\n    CPActionMergeGroup.prototype.constructor = CPActionMergeGroup;\n\n    /**\n     * Merge the top layer onto the under layer and remove the top layer.\n     *\n     * @param {CPImageLayer} topLayer\n     * @constructor\n     */\n    function CPActionMergeDownLayer(topLayer) {\n        let group = topLayer.parent,\n            underLayer = group.layers[group.indexOf(topLayer) - 1],\n            mergedLayer = new CPImageLayer(that.width, that.height, \"\"),\n            fromMask = maskEditingMode;\n\n        this.undo = function () {\n            let mergedIndex = group.indexOf(mergedLayer);\n\n            group.removeLayerAtIndex(mergedIndex);\n\n            group.insertLayer(mergedIndex, topLayer);\n            group.insertLayer(mergedIndex, underLayer);\n\n            artworkStructureChanged();\n            that.setActiveLayer(topLayer, fromMask);\n        };\n\n        this.redo = function () {\n            // 上のレイヤーがクリッピングされていない時と、下のレイヤーがクリッピングされている時には、クリッピング処理は必要ない。\n            if (underLayer.clip || !topLayer.clip) {\n                // `underLayer` を `mergedLayer` にコピー\n                mergedLayer.copyFrom(underLayer);\n                if (topLayer.getEffectiveAlpha() > 0) {\n                    // Ensure base layer has alpha 100, and apply its mask, ready for blending\n                    if (mergedLayer.mask) {\n                        CPBlend.multiplyAlphaByMask(\n                            mergedLayer.image,\n                            mergedLayer.alpha,\n                            mergedLayer.mask\n                        );\n                    } else {\n                        CPBlend.multiplyAlphaBy(\n                            mergedLayer.image,\n                            mergedLayer.alpha\n                        );\n                    }\n\n                    CPBlend.fuseImageOntoImage(\n                        mergedLayer.image,\n                        true,\n                        topLayer.image,\n                        topLayer.alpha,\n                        topLayer.blendMode,\n                        topLayer.getBounds(),\n                        topLayer.mask\n                    );\n                }\n            } else {\n                // 下のレイヤーと結合する時にクリッピング処理が必要\n                // 上下のレイヤーを含むレイヤーグループを一時的に作成\n                const tempGroup = new CPLayerGroup();\n                tempGroup.layers = [underLayer, topLayer];\n                tempGroup.parent = null; // No parent for this temporary group\n                tempGroup.name = \"Temporary Group\";\n\n                // ブレンドツリーを作成してビルド\n                let blendTree = new CPBlendTree(\n                    tempGroup,\n                    that.width,\n                    that.height,\n                    false\n                );\n                blendTree.buildTree();\n\n                let blended = blendTree.blendTree();\n                // `mergedLayer` の合成結果を設定\n                mergedLayer.image = blended.image;\n            }\n\n            // 合成結果を `mergedLayer` のプロパティに設定する\n            mergedLayer.name = underLayer.name; // 下のレイヤーの名前が残る\n            mergedLayer.alpha = 100;\n            mergedLayer.blendMode = underLayer.blendMode; // 下のレイヤーの合成方法を使用\n            mergedLayer.mask = null; // マスクをクリア\n\n            let underIndex = group.indexOf(underLayer);\n            // 上下のレイヤーを結合されたレイヤーに置き換える\n            group.removeLayerAtIndex(underIndex);\n            group.removeLayerAtIndex(underIndex);\n            // 下のレイヤーの位置に結合したレイヤーを挿入する\n            group.insertLayer(underIndex, mergedLayer);\n\n            artworkStructureChanged();\n            that.setActiveLayer(mergedLayer, false);\n        };\n\n        this.getMemoryUsed = function (undone, param) {\n            return undone\n                ? 0\n                : topLayer.getMemoryUsed() + mergedLayer.getMemoryUsed();\n        };\n\n        this.redo();\n    }\n\n    CPActionMergeDownLayer.prototype = Object.create(CPUndo.prototype);\n    CPActionMergeDownLayer.prototype.constructor = CPActionMergeDownLayer;\n\n    function CPActionMergeAllLayers(addFlattenedLayer = false) {\n        let oldActiveLayer = that.getActiveLayer(),\n            oldRootLayers = layersRoot.layers.slice(0), // 元のレイヤー構造を保存\n            flattenedLayer = new CPImageLayer(that.width, that.height, \"\");\n\n        this.undo = function () {\n            layersRoot.layers = oldRootLayers.slice(0);\n            artworkStructureChanged();\n            that.setActiveLayer(oldActiveLayer, false);\n        };\n\n        this.redo = function () {\n            let mergedImage = that.fusionLayers();\n            flattenedLayer.copyImageFrom(mergedImage);\n            // Generate the name after the document is empty (so it can be \"Layer 1\")\n            flattenedLayer.setName(that.getDefaultLayerName(false));\n\n            if (addFlattenedLayer) {\n                // 元のレイヤーは残して、flattenedLayer を上に追加\n                layersRoot.layers = oldRootLayers.slice(0); // 念のため復元\n                layersRoot.addLayer(flattenedLayer);\n            } else {\n                // 元のレイヤーをすべて削除し、flattenedLayer だけにする\n                layersRoot.clearLayers();\n                layersRoot.addLayer(flattenedLayer);\n            }\n\n            artworkStructureChanged();\n            that.setActiveLayer(flattenedLayer, false);\n        };\n\n        this.getMemoryUsed = function (undone, param) {\n            return oldRootLayers\n                .map((layer) => layer.getMemoryUsed())\n                .reduce(sum, 0);\n        };\n\n        this.redo();\n    }\n\n    CPActionMergeAllLayers.prototype = Object.create(CPUndo.prototype);\n    CPActionMergeAllLayers.prototype.constructor = CPActionMergeAllLayers;\n\n    /**\n     * Move the layer to the given position in the layer tree.\n     *\n     * @param {CPLayer} layer\n     * @param {CPLayerGroup} toGroup - The group that the layer will be a child of after moving\n     * @param {number} toIndex - The index of the layer inside the destination group that the layer will be below after the\n     *                        move.\n     * @constructor\n     */\n    function CPActionRelocateLayer(layer, toGroup, toIndex) {\n        const fromGroup = layer.parent,\n            fromIndex = layer.parent.indexOf(layer),\n            fromMask = maskEditingMode,\n            fromBelowLayer = fromGroup.layers[fromGroup.indexOf(layer) + 1],\n            toBelowLayer = toGroup.layers[toIndex],\n            wasClipped = layer instanceof CPImageLayer && layer.clip,\n            wasClippedTo = wasClipped ? layer.getClippingBase() : false;\n\n        let fromNumLayersClippedAbove = 0,\n            toNumLayersClippedAbove = 0;\n\n        if (layer instanceof CPImageLayer && !layer.clip) {\n            // Release the clip of any layers that had us as their clipping root\n            for (let i = fromIndex + 1; i < fromGroup.layers.length; i++) {\n                if (\n                    fromGroup.layers[i] instanceof CPImageLayer &&\n                    fromGroup.layers[i].clip\n                ) {\n                    fromNumLayersClippedAbove++;\n                } else {\n                    break;\n                }\n            }\n        } else if (layer instanceof CPLayerGroup) {\n            // If we move a group into the middle of a clipping group, release the clip of the layers above\n            for (let i = toIndex; i < toGroup.layers.length; i++) {\n                if (\n                    toGroup.layers[i] instanceof CPImageLayer &&\n                    toGroup.layers[i].clip\n                ) {\n                    toNumLayersClippedAbove++;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        this.undo = function () {\n            layer.parent.removeLayer(layer);\n\n            let newIndex = fromBelowLayer\n                ? fromGroup.indexOf(fromBelowLayer)\n                : fromGroup.layers.length;\n\n            fromGroup.insertLayer(newIndex, layer);\n\n            if (layer instanceof CPImageLayer) {\n                layer.clip = wasClipped;\n            }\n\n            for (let i = 0; i < fromNumLayersClippedAbove; i++) {\n                fromGroup.layers[i + fromIndex + 1].clip = true;\n            }\n\n            for (let i = 0; i < toNumLayersClippedAbove; i++) {\n                toGroup.layers[i + toIndex].clip = true;\n            }\n\n            artworkStructureChanged();\n            that.setActiveLayer(layer, fromMask);\n        };\n\n        this.redo = function () {\n            for (let i = 0; i < fromNumLayersClippedAbove; i++) {\n                fromGroup.layers[i + fromIndex + 1].clip = false;\n            }\n\n            layer.parent.removeLayer(layer);\n\n            let newIndex = toBelowLayer\n                ? toGroup.indexOf(toBelowLayer)\n                : toGroup.layers.length;\n\n            toGroup.insertLayer(newIndex, layer);\n\n            for (let i = 0; i < toNumLayersClippedAbove; i++) {\n                toGroup.layers[i + newIndex + 1].clip = false;\n            }\n\n            if (layer instanceof CPImageLayer) {\n                /*\n                 * Release the layer clip if we move the layer somewhere it won't be clipped onto its original base\n                 */\n                if (layer.clip && layer.getClippingBase() != wasClippedTo) {\n                    layer.clip = false;\n                }\n\n                // If we're moving into the middle of a new clipping group, join the clip\n                if (toBelowLayer instanceof CPImageLayer && toBelowLayer.clip) {\n                    layer.clip = true;\n                }\n            }\n\n            for (let i = 0; i < toNumLayersClippedAbove; i++) {\n                toGroup.layers[i + newIndex + 1].clip = false;\n            }\n\n            artworkStructureChanged();\n\n            // TODO if moving to a collapsed group, select the group rather than the layer\n            that.setActiveLayer(layer, false);\n        };\n\n        this.redo();\n    }\n\n    CPActionRelocateLayer.prototype = Object.create(CPUndo.prototype);\n    CPActionRelocateLayer.prototype.constructor = CPActionRelocateLayer;\n\n    /**\n     * @param {string} propertyName\n     * @param {boolean} invalidatesLayer\n     *\n     * @returns {typeof CPUndo}\n     */\n    function generateLayerPropertyChangeAction(propertyName, invalidatesLayer) {\n        let capitalPropertyName = capitalizeFirst(propertyName),\n            ChangeAction = function (layers, newValue) {\n                if (!Array.isArray(layers)) {\n                    layers = [layers];\n                }\n                this.layers = layers;\n                this.from = this.layers.map((layer) =>\n                    layer[\"get\" + capitalPropertyName]()\n                );\n                this.to = newValue;\n\n                this.redo();\n            };\n\n        ChangeAction.prototype = Object.create(CPUndo.prototype);\n        ChangeAction.prototype.constructor = ChangeAction;\n\n        ChangeAction.prototype.undo = function () {\n            this.layers.forEach((layer, index) =>\n                layer[\"set\" + capitalPropertyName](this.from[index])\n            );\n\n            this.layers.forEach((layer) =>\n                layerPropertyChanged(layer, propertyName, !invalidatesLayer)\n            );\n        };\n\n        ChangeAction.prototype.redo = function () {\n            this.layers.forEach((layer) =>\n                layer[\"set\" + capitalPropertyName](this.to)\n            );\n\n            this.layers.forEach((layer) =>\n                layerPropertyChanged(layer, propertyName, !invalidatesLayer)\n            );\n        };\n\n        ChangeAction.prototype.merge = function (u) {\n            if (\n                u instanceof ChangeAction &&\n                arrayEquals(this.layers, u.layers)\n            ) {\n                this.to = u.to;\n                return true;\n            }\n            return false;\n        };\n\n        ChangeAction.prototype.noChange = function () {\n            for (let i = 0; i < this.from.length; i++) {\n                if (this.from[i] != this.to) {\n                    return false;\n                }\n            }\n            return true;\n        };\n\n        return ChangeAction;\n    }\n\n    let CPActionChangeLayerAlpha = generateLayerPropertyChangeAction(\n            \"alpha\",\n            true\n        ),\n        CPActionChangeLayerMode = generateLayerPropertyChangeAction(\n            \"blendMode\",\n            true\n        ),\n        CPActionChangeLayerVisible = generateLayerPropertyChangeAction(\n            \"visible\",\n            true\n        ),\n        CPActionChangeLayerClip = generateLayerPropertyChangeAction(\n            \"clip\",\n            true\n        ),\n        CPActionChangeLayerMaskVisible = generateLayerPropertyChangeAction(\n            \"maskVisible\",\n            true\n        ),\n        CPActionChangeLayerName = generateLayerPropertyChangeAction(\n            \"name\",\n            false\n        ),\n        CPActionChangeLayerLockAlpha = generateLayerPropertyChangeAction(\n            \"lockAlpha\",\n            false\n        ),\n        CPActionChangeLayerMaskLinked = generateLayerPropertyChangeAction(\n            \"maskLinked\",\n            false\n        );\n\n    /**\n     * @param {CPRect} from\n     * @param {CPRect} to\n     *\n     * @constructor\n     */\n    function CPUndoRectangleSelection(from, to) {\n        from = from.clone();\n        to = to.clone();\n\n        this.undo = function () {\n            that.setSelection(from);\n            // TODO this is just because CPCanvas doesn't know when to repaint the selection box\n            callListenersUpdateRegion(that.getBounds());\n        };\n\n        this.redo = function () {\n            that.setSelection(to);\n            callListenersUpdateRegion(that.getBounds());\n        };\n\n        this.noChange = function () {\n            return from.equals(to);\n        };\n    }\n\n    CPUndoRectangleSelection.prototype = Object.create(CPUndo.prototype);\n    CPUndoRectangleSelection.prototype.constructor = CPUndoRectangleSelection;\n\n    class CPActionTransformSelection extends CPUndo {\n        constructor() {\n            super();\n\n            /**\n             * The layer we're moving (which might be an image layer or a whole group of layers).\n             *\n             * @type {CPLayer}\n             */\n            this.layer = curLayer;\n\n            /**\n             * @type {CPRect}\n             */\n            this.fromSelection = that.getSelection();\n            this.fromMaskMode = maskEditingMode;\n\n            this.movingWholeLayer = this.fromSelection.isEmpty();\n\n            this.movingImage =\n                !maskEditingMode ||\n                (this.movingWholeLayer && this.layer.maskLinked);\n            this.movingMask =\n                maskEditingMode ||\n                (this.movingWholeLayer && this.layer.maskLinked);\n\n            this.hasFullUndo = false;\n\n            /**\n             * Set to true for transformations which will clear the pixels of the source rectangle (i.e. moves)\n             * @type {boolean}\n             */\n            this.erasesSourceRect = false;\n\n            /**\n             * The rectangle we transformed onto in a previous iteration.\n             *\n             * @type {CPRect}\n             */\n            this.dstRect = new CPRect(0, 0, 0, 0);\n\n            /**\n             * @typedef {Object} LayerMoveInfo\n             *\n             * @property {CPLayer} layer\n             * @property {boolean} moveImage\n             * @property {boolean} moveMask\n             *\n             * We either have these full undos which cover the whole layer area:\n             *\n             * @property {?CPColorBmp} imageUndo\n             * @property {?CPGreyBmp} maskUndo\n             *\n             * Or else we have this map from rectangles to images which cover the dirtied areas only.\n             *\n             * @property {Map} imageRect\n             * @property {Map} maskRect\n             */\n\n            /**\n             * A list of the layers we're moving, and their properties.\n             *\n             * @type {LayerMoveInfo[]}\n             */\n            this.movingLayers = [\n                {\n                    layer: this.layer,\n                    moveImage:\n                        this.layer instanceof CPImageLayer && this.movingImage,\n                    moveMask: this.layer.mask !== null && this.movingMask,\n                    imageRect: new Map(),\n                    maskRect: new Map(),\n                },\n            ];\n\n            // Moving the \"image\" of a group means to move all of its children\n            if (\n                this.layer instanceof CPLayerGroup &&\n                this.movingImage &&\n                this.movingWholeLayer\n            ) {\n                this.movingLayers = this.movingLayers.concat(\n                    this.layer.getLinearizedLayerList(false).map((layer) => ({\n                        layer: layer,\n                        moveImage: layer instanceof CPImageLayer,\n                        moveMask: layer.mask !== null && layer.maskLinked,\n                        imageRect: new Map(),\n                        maskRect: new Map(),\n                    }))\n                );\n            }\n\n            // Only need to transform the non-transparent pixels\n            let occupiedSpace = new CPRect(0, 0, 0, 0);\n\n            if (this.movingWholeLayer) {\n                /**\n                 * @type {CPRect}\n                 */\n                this.srcRect = that.getBounds();\n\n                for (\n                    let i = 0;\n                    i < this.movingLayers.length &&\n                    !occupiedSpace.equals(this.srcRect);\n                    i++\n                ) {\n                    let layerInfo = this.movingLayers[i];\n\n                    if (layerInfo.moveMask) {\n                        // Find the non-white pixels, since we'll be erasing the moved area with white\n                        occupiedSpace.union(\n                            layerInfo.layer.mask.getValueBounds(\n                                this.srcRect,\n                                0xff\n                            )\n                        );\n                    }\n\n                    if (layerInfo.moveImage) {\n                        occupiedSpace.union(\n                            layerInfo.layer.image.getNonTransparentBounds(\n                                this.srcRect\n                            )\n                        );\n                    }\n                }\n            } else {\n                this.srcRect = this.fromSelection.clone();\n\n                for (\n                    let i = 0;\n                    i < this.movingLayers.length &&\n                    !occupiedSpace.equals(this.srcRect);\n                    i++\n                ) {\n                    let layerInfo = this.movingLayers[i];\n\n                    if (layerInfo.moveMask) {\n                        // Find the non-black pixels, since we'll be erasing the moved area with black\n                        occupiedSpace.union(\n                            layerInfo.layer.mask.getValueBounds(\n                                this.srcRect,\n                                0x00\n                            )\n                        );\n                    }\n\n                    if (layerInfo.moveImage) {\n                        occupiedSpace.union(\n                            layerInfo.layer.image.getNonTransparentBounds(\n                                this.srcRect\n                            )\n                        );\n                    }\n                }\n            }\n\n            this.srcRect = occupiedSpace;\n        }\n\n        /**\n         * @override\n         */\n        undo() {\n            let // The region we're repainting for undo\n                restoreRegions = [];\n\n            if (!this.dstRect.isEmpty()) {\n                restoreRegions.push(this.dstRect);\n            }\n\n            if (this.erasesSourceRect) {\n                restoreRegions.push(this.srcRect);\n                restoreRegions = CPRect.union(restoreRegions);\n            }\n\n            this.movingLayers.forEach((layerInfo) => {\n                if (this.hasFullUndo) {\n                    restoreRegions.forEach((region) => {\n                        if (layerInfo.moveImage) {\n                            layerInfo.layer.image.copyBitmapRect(\n                                layerInfo.imageUndo,\n                                region.left,\n                                region.top,\n                                region\n                            );\n                        }\n                        if (layerInfo.moveMask) {\n                            layerInfo.layer.mask.copyBitmapRect(\n                                layerInfo.maskUndo,\n                                region.left,\n                                region.top,\n                                region\n                            );\n                        }\n                    });\n                } else {\n                    if (layerInfo.moveImage) {\n                        layerInfo.imageRect.forEach((image, rect) => {\n                            layerInfo.layer.image.copyBitmapRect(\n                                image,\n                                rect.left,\n                                rect.top,\n                                image.getBounds()\n                            );\n                        });\n                    }\n\n                    if (layerInfo.moveMask) {\n                        layerInfo.maskRect.forEach((mask, rect) => {\n                            layerInfo.layer.mask.copyBitmapRect(\n                                mask,\n                                rect.left,\n                                rect.top,\n                                mask.getBounds()\n                            );\n                        });\n                    }\n                }\n            });\n\n            invalidateLayer(\n                this.movingLayers.map((layerInfo) => layerInfo.layer),\n                restoreRegions.reduce(\n                    (a, b) => a.getUnion(b),\n                    new CPRect(0, 0, 0, 0)\n                ),\n                true,\n                true\n            );\n\n            // Call this after we're done with restoreRegions, since it might be a part of that array.\n            this.dstRect.makeEmpty();\n\n            that.setSelection(this.fromSelection);\n            that.setActiveLayer(this.layer, this.fromMaskMode);\n\n            /*\n             * FIXME Required because in the case of a copy, we don't invalidate the source rect in the fusion, so the canvas\n             * won't end up repainting the selection rectangle there.\n             */\n            callListenersSelectionChange();\n        }\n\n        getMemoryUsed(undone, param) {\n            return this.movingLayers\n                .map(function (layerInfo) {\n                    let images = [\n                        layerInfo.imageUndo,\n                        layerInfo.maskUndo,\n                        layerInfo.imageRect,\n                        layerInfo.maskRect,\n                    ];\n\n                    return images\n                        .map((image) => (image ? image.getMemorySize() : 0))\n                        .reduce(sum, 0);\n                })\n                .reduce(sum, 0);\n        }\n\n        /**\n         * Called internally to reverse the effects of compact()\n         */\n        buildFullUndo() {\n            if (!this.hasFullUndo) {\n                this.movingLayers.forEach(function (layerInfo) {\n                    if (layerInfo.moveImage) {\n                        layerInfo.imageUndo = layerInfo.layer.image.clone();\n                    }\n                    if (layerInfo.moveMask) {\n                        layerInfo.maskUndo = layerInfo.layer.mask.clone();\n                    }\n\n                    layerInfo.imageRect.clear();\n                    layerInfo.maskRect.clear();\n                });\n\n                this.hasFullUndo = true;\n            }\n        }\n\n        /**\n         * Called when we're no longer the top operation in the undo stack, so that we can optimize for lower memory\n         * usage instead of faster revision speed\n         */\n        compact() {\n            if (this.hasFullUndo) {\n                // Replace our copy of the whole layers with just a copy of the areas we damaged\n                let damagedRects = [];\n\n                if (!this.dstRect.isEmpty()) {\n                    damagedRects.push(this.dstRect);\n                }\n\n                if (this.erasesSourceRect) {\n                    damagedRects.push(this.srcRect);\n\n                    damagedRects = CPRect.union(damagedRects);\n                }\n\n                this.movingLayers.forEach((layerInfo) => {\n                    layerInfo.imageRect.clear();\n                    layerInfo.maskRect.clear();\n\n                    damagedRects.forEach((rect) => {\n                        if (layerInfo.moveImage) {\n                            layerInfo.imageRect.set(\n                                rect,\n                                layerInfo.imageUndo.cloneRect(rect)\n                            );\n                        }\n                        if (layerInfo.moveMask) {\n                            layerInfo.maskRect.set(\n                                rect,\n                                layerInfo.maskUndo.cloneRect(rect)\n                            );\n                        }\n                    });\n\n                    // Discard the full-size undos\n                    layerInfo.imageUndo = null;\n                    layerInfo.maskUndo = null;\n                });\n\n                this.hasFullUndo = false;\n            }\n        }\n    }\n\n    /**\n     * Transforms the currently selected region of the current layer by the given affine transform.\n     *\n     * @param {CPTransform} affineTransform - Transform to apply\n     * @param {string} interpolation - \"smooth\" or \"sharp\"\n     */\n    class CPActionAffineTransformSelection extends CPActionTransformSelection {\n        constructor(affineTransform, interpolation) {\n            super();\n\n            this.erasesSourceRect = true;\n\n            this.affineTransform = affineTransform.clone();\n            this.interpolation = interpolation || \"smooth\";\n\n            /**\n             * A canvas for composing the transform onto\n             * @type {HTMLCanvasElement}\n             */\n            this.composeCanvas = null;\n\n            /**\n             * @type {CanvasRenderingContext2D}\n             */\n            this.composeCanvasContext = null;\n        }\n\n        /**\n         * @override\n         */\n        buildFullUndo() {\n            if (!this.hasFullUndo) {\n                super.buildFullUndo();\n\n                // Make a copy of just the source rectangles in their own canvases so we can transform them layer with Canvas APIs\n                this.movingLayers.forEach((layerInfo) => {\n                    if (layerInfo.moveImage) {\n                        let canvas = createCanvas(\n                                this.srcRect.getWidth(),\n                                this.srcRect.getHeight()\n                            ),\n                            context = canvas.getContext(\"2d\");\n\n                        context.putImageData(\n                            layerInfo.layer.image.getImageData(),\n                            -this.srcRect.left,\n                            -this.srcRect.top,\n                            this.srcRect.left,\n                            this.srcRect.top,\n                            this.srcRect.getWidth(),\n                            this.srcRect.getHeight()\n                        );\n\n                        layerInfo.imageSourceCanvas = canvas;\n                    }\n\n                    if (layerInfo.moveMask) {\n                        let canvas = createCanvas(\n                                this.srcRect.getWidth(),\n                                this.srcRect.getHeight()\n                            ),\n                            context = canvas.getContext(\"2d\");\n\n                        context.putImageData(\n                            layerInfo.layer.mask.getImageData(\n                                this.srcRect.left,\n                                this.srcRect.top,\n                                this.srcRect.getWidth(),\n                                this.srcRect.getHeight()\n                            ),\n                            0,\n                            0\n                        );\n\n                        layerInfo.maskSourceCanvas = canvas;\n                    }\n                });\n\n                this.composeCanvas = createCanvas(that.width, that.height);\n\n                // willReadFrequently オプションを使用して Canvas コンテキストを取得\n                this.composeCanvasContext = this.composeCanvas.getContext(\n                    \"2d\",\n                    {\n                        willReadFrequently: true,\n                    }\n                );\n                setCanvasInterpolation(\n                    this.composeCanvasContext,\n                    this.interpolation == \"smooth\"\n                );\n\n                /* Calling getImageData on the canvas forces Chrome to disable hardware acceleration for it, see\n                 * GetImageDataForcesNoAcceleration in https://cs.chromium.org/chromium/src/third_party/WebKit/Source/platform/graphics/ExpensiveCanvasHeuristicParameters.h\n                 *\n                 * We normally call this as part of finishing up our redo(), which means that our first redo() would\n                 * use hardware acceleration, and all subsequent redo()s would use software emulation, with subtly\n                 * different pixel results.\n                 *\n                 * Force our results to be consistent by calling that right now:\n                 */\n                this.junk = this.composeCanvasContext.getImageData(0, 0, 1, 1);\n            }\n        }\n\n        redo() {\n            this.buildFullUndo();\n\n            let oldDstRect = this.dstRect.clone(),\n                dstCorners = this.srcRect.toPoints();\n\n            this.affineTransform.transformPoints(dstCorners);\n\n            this.dstRect.set(\n                CPRect.createBoundingBox(dstCorners)\n                    .roundContain()\n                    .clipTo(that.getBounds())\n            );\n\n            const /* The area of original image data that we need to compose the transformed area onto (i.e. excluding the\n                 * source area we're just going to erase)\n                 */\n                composeOntoRects = CPRect.subtract(this.dstRect, this.srcRect),\n                /* We need to erase the area we're moving from.\n                 *\n                 * If this is an amend(), we've already erased the source rectangle (except for the part occupied by the\n                 * old destination rectangle)\n                 *\n                 * We don't need to erase the area we're planning to overwrite later (dstRect)\n                 */\n                eraseRects = CPRect.subtract(\n                    oldDstRect.isEmpty()\n                        ? this.srcRect\n                        : this.srcRect.getIntersection(oldDstRect),\n                    this.dstRect\n                ),\n                // The region of the source rectangle that we want to compose onto\n                srcComposeRect = this.srcRect.getIntersection(this.dstRect),\n                // Regions from oldDstRect in the layer data that we need to clean up after our operation\n                repairOldRects = CPRect.subtract(oldDstRect, [\n                    this.dstRect,\n                    this.srcRect,\n                ]),\n                // The region which needs repainting (from the previous redo() and after our redo())\n                invalidateRect = this.srcRect\n                    .getUnion(this.dstRect)\n                    .getUnion(oldDstRect);\n\n            this.movingLayers.forEach((layerInfo) => {\n                // Erase the source area that won't be replaced by the canvas dest area\n                eraseRects.forEach((rect) => {\n                    if (layerInfo.moveImage) {\n                        layerInfo.layer.image.clearRect(\n                            rect,\n                            EMPTY_LAYER_COLOR\n                        );\n                    }\n\n                    if (layerInfo.moveMask) {\n                        if (this.movingWholeLayer) {\n                            layerInfo.layer.mask.clearRect(rect, 0xff);\n                        } else {\n                            layerInfo.layer.mask.clearRect(\n                                rect,\n                                EMPTY_MASK_COLOR\n                            );\n                        }\n                    }\n                });\n\n                if (!this.dstRect.isEmpty()) {\n                    if (layerInfo.moveImage) {\n                        let imageData = layerInfo.imageUndo.getImageData();\n\n                        /*\n                         * Make a fresh copy of the undo data into the Canvas so we can compose the transformed data on top of\n                         * it (except the source region since we'll just erase that).\n                         */\n                        composeOntoRects.forEach((rect) => {\n                            this.composeCanvasContext.putImageData(\n                                imageData,\n                                0,\n                                0,\n                                rect.left,\n                                rect.top,\n                                rect.getWidth(),\n                                rect.getHeight()\n                            );\n                        });\n\n                        // Erase the portion of the source region that we're going to compose onto\n                        this.composeCanvasContext.clearRect(\n                            srcComposeRect.left,\n                            srcComposeRect.top,\n                            srcComposeRect.getWidth(),\n                            srcComposeRect.getHeight()\n                        );\n\n                        this.composeCanvasContext.save();\n\n                        // Apply the transform when drawing the transformed fragment\n                        this.composeCanvasContext.setTransform(\n                            this.affineTransform.m[0],\n                            this.affineTransform.m[1],\n                            this.affineTransform.m[2],\n                            this.affineTransform.m[3],\n                            this.affineTransform.m[4],\n                            this.affineTransform.m[5]\n                        );\n                        this.composeCanvasContext.drawImage(\n                            layerInfo.imageSourceCanvas,\n                            this.srcRect.left,\n                            this.srcRect.top\n                        );\n\n                        this.composeCanvasContext.restore();\n\n                        // Save that to the layer data\n                        layerInfo.layer.image.copyBitmapRect(\n                            new CPColorBmp(\n                                this.composeCanvasContext.getImageData(\n                                    this.dstRect.left,\n                                    this.dstRect.top,\n                                    this.dstRect.getWidth(),\n                                    this.dstRect.getHeight()\n                                )\n                            ),\n                            this.dstRect.left,\n                            this.dstRect.top,\n                            new CPRect(\n                                0,\n                                0,\n                                this.dstRect.getWidth(),\n                                this.dstRect.getHeight()\n                            )\n                        );\n                    }\n\n                    if (layerInfo.moveMask) {\n                        composeOntoRects.forEach((rect) => {\n                            this.composeCanvasContext.putImageData(\n                                layerInfo.layer.mask.getImageData(\n                                    rect.left,\n                                    rect.top,\n                                    rect.getWidth(),\n                                    rect.getHeight()\n                                ),\n                                rect.left,\n                                rect.top\n                            );\n                        });\n\n                        if (this.movingWholeLayer) {\n                            this.composeCanvasContext.fillStyle = \"#FFF\";\n                        } else {\n                            this.composeCanvasContext.fillStyle = \"#000\";\n                        }\n\n                        this.composeCanvasContext.fillRect(\n                            srcComposeRect.left,\n                            srcComposeRect.top,\n                            srcComposeRect.getWidth(),\n                            srcComposeRect.getHeight()\n                        );\n\n                        this.composeCanvasContext.save();\n\n                        // TODO set blend mode to replace? We don't have any alpha in the source or dest images\n\n                        this.composeCanvasContext.setTransform(\n                            this.affineTransform.m[0],\n                            this.affineTransform.m[1],\n                            this.affineTransform.m[2],\n                            this.affineTransform.m[3],\n                            this.affineTransform.m[4],\n                            this.affineTransform.m[5]\n                        );\n                        this.composeCanvasContext.drawImage(\n                            layerInfo.maskSourceCanvas,\n                            this.srcRect.left,\n                            this.srcRect.top\n                        );\n\n                        this.composeCanvasContext.restore();\n\n                        layerInfo.layer.mask.pasteImageData(\n                            this.composeCanvasContext.getImageData(\n                                this.dstRect.left,\n                                this.dstRect.top,\n                                this.dstRect.getWidth(),\n                                this.dstRect.getHeight()\n                            ),\n                            this.dstRect.left,\n                            this.dstRect.top\n                        );\n                    }\n                }\n\n                /*\n                 * Use the CPColorBmp/CPGreyBmp undo data to erase any leftovers from the previous redo(). We do this\n                 * instead of just copying from the canvas, since Canvas' getImageData/setImageData doesn't round-trip\n                 * (due to premultiplied alpha on some browsers/systems) and we want to avoid damaging areas we don't\n                 * need to touch.\n                 */\n                repairOldRects.forEach((rect) => {\n                    if (layerInfo.moveImage) {\n                        layerInfo.layer.image.copyBitmapRect(\n                            layerInfo.imageUndo,\n                            rect.left,\n                            rect.top,\n                            rect\n                        );\n                    }\n\n                    if (layerInfo.moveMask) {\n                        layerInfo.layer.mask.copyBitmapRect(\n                            layerInfo.maskUndo,\n                            rect.left,\n                            rect.top,\n                            rect\n                        );\n                    }\n                });\n            });\n\n            invalidateLayer(\n                this.movingLayers.map((layerInfo) => layerInfo.layer),\n                invalidateRect,\n                true,\n                true\n            );\n\n            // Transform the selection rect to enclose the transformed selection\n            if (!this.fromSelection.isEmpty()) {\n                let toSelectionPoints = this.fromSelection.toPoints(),\n                    toSelectionRect;\n\n                this.affineTransform.transformPoints(toSelectionPoints);\n\n                toSelectionRect = CPRect.createBoundingBox(toSelectionPoints);\n                toSelectionRect.roundNearest();\n\n                that.setSelection(toSelectionRect);\n                callListenersSelectionChange();\n            }\n\n            that.setActiveLayer(this.layer, this.fromMaskMode);\n        }\n\n        /**\n         * Replace the transform with the given one.\n         *\n         * @override\n         *\n         * @param {CPTransform} affineTransform\n         */\n        amend(affineTransform) {\n            if (!this.hasFullUndo) {\n                /* redo() requires a full undo to be available to update the transform. It'll effectively undo the\n                 * current transform for us while it does the redo.\n                 *\n                 * If there's no full undo, for redo() to be able to generate it we'll have to undo() for them first.\n                 */\n                this.undo();\n            }\n\n            this.affineTransform = affineTransform.clone();\n\n            this.redo();\n        }\n\n        setInterpolation(newInterpolation) {\n            if (newInterpolation != this.interpolation) {\n                this.interpolation = newInterpolation;\n\n                if (this.composeCanvasContext) {\n                    setCanvasInterpolation(\n                        this.composeCanvasContext,\n                        this.interpolation == \"smooth\"\n                    );\n                }\n\n                this.undo();\n                this.redo();\n            }\n        }\n\n        /**\n         * @override\n         */\n        compact() {\n            super.compact();\n\n            // Discard our temporary drawing canvases\n            this.composeCanvas = null;\n            this.composeCanvasContext = null;\n\n            this.movingLayers.forEach(\n                (layerInfo) => (layerInfo.imageSourceCanvas = null)\n            );\n        }\n\n        /**\n         * @override\n         */\n        getMemoryUsed(undone, param) {\n            let result = super.getMemoryUsed(undone, param);\n\n            result += memoryUsedByCanvas(this.composeCanvas);\n\n            result += this.movingLayers\n                .map((layerInfo) =>\n                    memoryUsedByCanvas(layerInfo.imageSourceCanvas)\n                )\n                .reduce(sum, 0);\n\n            return result;\n        }\n\n        /**\n         * Get a copy of the affine transform.\n         */\n        getTransform() {\n            return this.affineTransform.clone();\n        }\n\n        /**\n         * Get a copy of the initial document rectangle (before the transform was applied)\n         *\n         * @returns {CPRect}\n         */\n        getInitialTransformRect() {\n            return this.srcRect.clone();\n        }\n\n        /**\n         * Get a copy of the initial user selection rectangle (before the transform was applied). Can be empty if\n         * the user didn't have anything selected before the transform began.\n         *\n         * @returns {CPRect}\n         */\n        getInitialSelectionRect() {\n            return this.fromSelection.clone();\n        }\n    }\n\n    /**\n     * Upon creation, moves the currently selected region of the current layer by the given offset\n     *\n     * @param {?CPRect} srcRect - Rectangle that will be moved, or an empty rectangle to move whole layer.\n     * @param {number} offsetX\n     * @param {number} offsetY\n     * @param {boolean} copy - True if we should copy to the destination instead of move.\n     * @constructor\n     */\n    class CPActionMoveSelection extends CPActionTransformSelection {\n        constructor(offsetX, offsetY, copy) {\n            super();\n\n            this.offsetX = offsetX;\n            this.offsetY = offsetY;\n\n            this.erasesSourceRect = !copy;\n        }\n\n        redo() {\n            let oldDestRect = this.dstRect.clone(),\n                destRectUnclipped,\n                /**\n                 * Do we have anything to repaint from a previous call to redo()? (if we are called by amend())\n                 * @type {CPRect[]}\n                 */\n                restoreFromUndoAreas,\n                invalidateRegion = oldDestRect.clone(),\n                eraseRegion = null;\n\n            this.buildFullUndo();\n\n            this.dstRect.set(this.srcRect);\n            this.dstRect.translate(this.offsetX, this.offsetY);\n\n            destRectUnclipped = this.dstRect.clone();\n\n            this.dstRect.clipTo(that.getBounds());\n\n            if (this.erasesSourceRect) {\n                // We're moving, so erase the source region we're moving out of.\n                if (oldDestRect.isEmpty()) {\n                    eraseRegion = this.srcRect;\n                } else {\n                    /*\n                     * We've erased the source rect already in a previous redo(), so we only need to erase the damaged\n                     * area.\n                     */\n                    eraseRegion = this.srcRect.getIntersection(oldDestRect);\n                }\n\n                invalidateRegion.union(eraseRegion);\n\n                restoreFromUndoAreas = oldDestRect.subtract(this.srcRect);\n            } else {\n                restoreFromUndoAreas = [oldDestRect];\n            }\n\n            this.movingLayers.forEach((layerInfo) => {\n                if (eraseRegion) {\n                    if (layerInfo.moveImage) {\n                        layerInfo.layer.image.clearRect(\n                            eraseRegion,\n                            EMPTY_LAYER_COLOR\n                        );\n                    }\n                    if (layerInfo.moveMask) {\n                        layerInfo.layer.mask.clearRect(\n                            eraseRegion,\n                            this.movingWholeLayer ? 0xff : EMPTY_MASK_COLOR\n                        );\n                    }\n                }\n\n                restoreFromUndoAreas.forEach(function (restore) {\n                    if (layerInfo.moveImage) {\n                        layerInfo.layer.image.copyBitmapRect(\n                            layerInfo.imageUndo,\n                            restore.left,\n                            restore.top,\n                            restore\n                        );\n                    }\n                    if (layerInfo.moveMask) {\n                        layerInfo.layer.mask.copyBitmapRect(\n                            layerInfo.maskUndo,\n                            restore.left,\n                            restore.top,\n                            restore\n                        );\n                    }\n                });\n\n                /* Note that while we could copy image data from the layer itself onto the layer (instead of sourcing that\n                 * data from the undo buffers), this would require that pasteAlphaRect do the right thing when source and\n                 * dest rectangles overlap, which it doesn't.\n                 */\n                if (layerInfo.moveImage) {\n                    CPBlend.normalFuseImageOntoImageAtPosition(\n                        layerInfo.layer.image,\n                        layerInfo.imageUndo,\n                        destRectUnclipped.left,\n                        destRectUnclipped.top,\n                        this.srcRect\n                    );\n                }\n                if (layerInfo.moveMask) {\n                    layerInfo.layer.mask.copyBitmapRect(\n                        layerInfo.maskUndo,\n                        destRectUnclipped.left,\n                        destRectUnclipped.top,\n                        this.srcRect\n                    );\n                }\n            });\n\n            invalidateRegion.union(this.dstRect);\n\n            invalidateLayer(\n                this.movingLayers.map((layerInfo) => layerInfo.layer),\n                invalidateRegion,\n                true,\n                true\n            );\n\n            if (!this.fromSelection.isEmpty()) {\n                let toSelection = this.fromSelection.clone();\n                toSelection.translate(this.offsetX, this.offsetY);\n                that.setSelection(toSelection);\n                callListenersSelectionChange();\n            }\n        }\n\n        /**\n         * Move further by the given offset on top of the current offset.\n         *\n         * @param {number} offsetX\n         * @param {number} offsetY\n         */\n        amend(offsetX, offsetY) {\n            if (!this.hasFullUndo) {\n                this.undo();\n            }\n\n            this.offsetX += offsetX;\n            this.offsetY += offsetY;\n\n            this.redo();\n        }\n    }\n\n    /**\n     * Cut the selected rectangle from the layer\n     *\n     * @param {CPImageLayer} layer - Layer to cut from\n     * @param {boolean} cutFromMask - True to cut from the mask of the layer, false to cut from the image\n     * @param {CPRect} selection - The cut rectangle co-ordinates\n     */\n    function CPActionCut(layer, cutFromMask, selection) {\n        const fromImage = cutFromMask ? layer.mask : layer.image,\n            cutData = fromImage.cloneRect(selection);\n\n        selection = selection.clone();\n\n        this.undo = function () {\n            fromImage.copyBitmapRect(\n                cutData,\n                selection.left,\n                selection.top,\n                cutData.getBounds()\n            );\n\n            that.setActiveLayer(layer, cutFromMask);\n            that.setSelection(selection);\n            invalidateLayer(layer, selection, !cutFromMask, cutFromMask);\n        };\n\n        this.redo = function () {\n            if (cutFromMask) {\n                fromImage.clearRect(selection, EMPTY_MASK_COLOR);\n            } else {\n                fromImage.clearRect(selection, EMPTY_LAYER_COLOR);\n            }\n\n            clipboard = new CPClip(cutData, selection.left, selection.top);\n\n            that.setActiveLayer(layer, cutFromMask);\n            that.emptySelection();\n            invalidateLayer(layer, selection, !cutFromMask, cutFromMask);\n        };\n\n        this.getMemoryUsed = function (undone, param) {\n            return cutData == param ? 0 : cutData.getMemorySize();\n        };\n\n        this.redo();\n    }\n\n    CPActionCut.prototype = Object.create(CPUndo.prototype);\n    CPActionCut.prototype.constructor = CPActionCut;\n\n    /**\n     * Paste the given clipboard onto the given layer.\n     *\n     * @param {CPClip} clip\n     */\n    function CPActionPaste(clip) {\n        const oldSelection = that.getSelection(),\n            oldMask = maskEditingMode,\n            newLayer = new CPImageLayer(\n                that.width,\n                that.height,\n                that.getDefaultLayerName(false)\n            ),\n            oldLayer = curLayer,\n            parentGroup = oldLayer.parent;\n\n        this.undo = function () {\n            parentGroup.removeLayer(newLayer);\n\n            that.setSelection(oldSelection);\n\n            artworkStructureChanged();\n            that.setActiveLayer(oldLayer, oldMask);\n        };\n\n        this.redo = function () {\n            let layerIndex = parentGroup.indexOf(oldLayer),\n                sourceRect = clip.bmp.getBounds(),\n                x,\n                y;\n\n            parentGroup.insertLayer(layerIndex + 1, newLayer);\n\n            if (sourceRect.isInside(that.getBounds())) {\n                x = clip.x;\n                y = clip.y;\n            } else {\n                x = ((that.width - clip.bmp.width) / 2) | 0;\n                y = ((that.height - clip.bmp.height) / 2) | 0;\n            }\n\n            if (clip.bmp instanceof CPGreyBmp) {\n                // Need to convert greyscale to color before we can paste\n                let clone = new CPColorBmp(clip.bmp.width, clip.bmp.height);\n\n                clone.copyPixelsFromGreyscale(clip.bmp);\n\n                newLayer.image.copyBitmapRect(clone, x, y, sourceRect);\n            } else {\n                newLayer.image.copyBitmapRect(clip.bmp, x, y, sourceRect);\n            }\n\n            that.emptySelection();\n\n            artworkStructureChanged();\n            that.setActiveLayer(newLayer, false);\n        };\n\n        this.getMemoryUsed = function (undone, param) {\n            return clip.bmp == param ? 0 : clip.bmp.getMemorySize();\n        };\n\n        this.redo();\n    }\n\n    CPActionPaste.prototype = Object.create(CPUndo.prototype);\n    CPActionPaste.prototype.constructor = CPActionPaste;\n\n    paintingModes = [\n        CPBrushTool,\n        CPBrushToolEraser,\n        CPBrushToolDodge,\n        CPBrushToolBurn,\n        CPBrushToolWatercolor,\n        CPBrushToolBlur,\n        CPBrushToolSmudge,\n        CPBrushToolOil,\n    ].map((modeFunc) => new modeFunc(strokeBuffer, strokedRegion));\n\n    this.width = _width;\n    this.height = _height;\n}\n\nCPArtwork.prototype = Object.create(EventEmitter.prototype);\nCPArtwork.prototype.constructor = CPArtwork;\n\nCPArtwork.prototype.getBounds = function () {\n    return new CPRect(0, 0, this.width, this.height);\n};\n\nCPArtwork.prototype.isPointWithin = function (x, y) {\n    return x >= 0 && y >= 0 && x < this.width && y < this.height;\n};\n\nCPArtwork.EDITING_MODE_IMAGE = 0;\nCPArtwork.EDITING_MODE_MASK = 1;\n","/*\r\n ChickenPaint\r\n\r\n ChickenPaint is a translation of ChibiPaint from Java to JavaScript\r\n by Nicholas Sherlock / Chicken Smoothie.\r\n\r\n ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\r\n\r\n ChickenPaint is free software: you can redistribute it and/or modify\r\n it under the terms of the GNU General Public License as published by\r\n the Free Software Foundation, either version 3 of the License, or\r\n (at your option) any later version.\r\n\r\n ChickenPaint is distributed in the hope that it will be useful,\r\n but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n GNU General Public License for more details.\r\n\r\n You should have received a copy of the GNU General Public License\r\n along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport CPColorBmp from './CPColorBmp.js';\r\nimport CPLayer from './CPLayer.js';\r\nimport CPRect from \"../util/CPRect.js\";\r\n\r\n/**\r\n * Note layer image data is not cleared to any specific values upon creation, use layer.image.clearAll().\r\n *\r\n * @param {number} width - Width of the bitmap, or zero to start the bitmap out empty (if you're planning to call copyFrom())\r\n * @param {number} height\r\n * @param {String} name\r\n *\r\n * @constructor\r\n * @extends CPLayer\r\n */\r\nexport default function CPImageLayer(width, height, name) {\r\n\tCPLayer.call(this, name);\r\n\r\n\tif (width > 0 && height > 0) {\r\n\t\tthis.image = new CPColorBmp(width, height);\r\n\t} else {\r\n\t\tthis.image = null;\r\n\t}\r\n\r\n\t/**\r\n\t * True if this layer should be clipped onto the CPImageLayer beneath it.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tthis.clip = false;\r\n\r\n\t/**\r\n\t *\r\n\t * @type {?CPColorBmp}\r\n\t */\r\n\tthis.imageThumbnail = null;\r\n}\r\n\r\nCPImageLayer.prototype = Object.create(CPLayer.prototype);\r\nCPImageLayer.prototype.constructor = CPImageLayer;\r\n\r\nCPImageLayer.createFromImage = function(image, name) {\r\n\tlet\r\n\t\tresult = new CPImageLayer(0, 0, name);\r\n\r\n\tresult.image = image;\r\n\r\n\treturn result;\r\n};\r\n\r\n/**\r\n * Returns an independent copy of this layer.\r\n *\r\n * @returns {CPImageLayer}\r\n */\r\nCPImageLayer.prototype.clone = function() {\r\n\tvar\r\n\t\tresult = new CPImageLayer(0, 0, this.name);\r\n\r\n\tresult.copyFrom(this);\r\n\r\n\treturn result;\r\n};\r\n\r\n/**\r\n *\r\n * @param {CPImageLayer} layer\r\n */\r\nCPImageLayer.prototype.copyFrom = function(layer) {\r\n\tCPLayer.prototype.copyFrom.call(this, layer);\r\n\r\n\tthis.clip = layer.clip;\r\n\r\n\tif (!this.image) {\r\n\t\tthis.image = layer.image.clone();\r\n\t} else {\r\n\t\tthis.image.copyPixelsFrom(layer.image);\r\n\t}\r\n};\r\n\r\n/**\r\n * Do we have any non-opaque pixels in the entire layer?\r\n */\r\nCPImageLayer.prototype.hasAlpha = function() {\r\n\tif (this.alpha != 100) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\treturn this.image.hasAlpha();\r\n};\r\n\r\n/**\r\n * Do we have any semi-transparent pixels in the given rectangle?\r\n *\r\n * @param {CPRect} rect\r\n * @returns {boolean}\r\n */\r\nCPImageLayer.prototype.hasAlphaInRect = function(rect) {\r\n\tif (this.alpha != 100) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\treturn this.image.hasAlphaInRect(rect);\r\n};\r\n\r\n/**\r\n *\r\n * @param {CPColorBmp} that\r\n */\r\nCPImageLayer.prototype.copyImageFrom = function(that) {\r\n\tthis.image.copyPixelsFrom(that);\r\n};\r\n\r\n/**\r\n * If this layer is clipped, return the layer that this layer is clipped to, otherwise return null.\r\n *\r\n * @returns {CPImageLayer}\r\n */\r\nCPImageLayer.prototype.getClippingBase = function() {\r\n\tif (this.clip && this.parent) {\r\n\t\tfor (var i = this.parent.indexOf(this) - 1; i >= 0; i--) {\r\n\t\t\tif (this.parent.layers[i] instanceof CPImageLayer) {\r\n\t\t\t\tif (!this.parent.layers[i].clip) {\r\n\t\t\t\t\treturn this.parent.layers[i];\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// We can't clip to non-image layers, so something went wrong here...\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n\r\n};\r\n\r\n/**\r\n *\r\n * @returns {boolean}\r\n */\r\nCPImageLayer.prototype.getClip = function() {\r\n\treturn this.clip;\r\n};\r\n\r\n/**\r\n *\r\n * @param {boolean} clip\r\n */\r\nCPImageLayer.prototype.setClip = function(clip) {\r\n\tthis.clip = clip;\r\n};\r\n\r\n/**\r\n * Get a rectangle that encloses any non-transparent pixels in the layer within the given initialBounds (or an empty\r\n * rect if the pixels inside the given bounds are 100% transparent).\r\n *\r\n * Ignores the layer alpha and visibility properties, you may want to check .getEffectiveAlpha() > 0 before calling.\r\n *\r\n * @param {CPRect} initialBounds - The rect to search within\r\n *\r\n * @returns {CPRect}\r\n */\r\nCPImageLayer.prototype.getNonTransparentBounds = function(initialBounds) {\r\n\treturn this.image.getNonTransparentBounds(initialBounds);\r\n};\r\n\r\n/**\r\n * @returns {CPRect}\r\n */\r\nCPImageLayer.prototype.getBounds = function() {\r\n\treturn new CPRect(0, 0, this.image.width, this.image.height);\r\n};\r\n\r\n/**\r\n * Get an approximation of the number of bytes of memory used by this layer.\r\n *\r\n * @returns {number}\r\n */\r\nCPImageLayer.prototype.getMemoryUsed = function() {\r\n\treturn this.image ? this.image.getMemorySize() : 0;\r\n};\r\n\r\n/**\r\n * Recreate the image thumbnail for this layer.\r\n */\r\nCPImageLayer.prototype.rebuildImageThumbnail = function() {\r\n\tif (!this.imageThumbnail) {\r\n\t\tvar\r\n\t\t\tscaleDivider = Math.ceil(Math.max(this.image.width / CPLayer.LAYER_THUMBNAIL_WIDTH, this.image.height / CPLayer.LAYER_THUMBNAIL_HEIGHT));\r\n\r\n\t\tthis.imageThumbnail = new CPColorBmp(Math.floor(this.image.width / scaleDivider), Math.floor(this.image.height / scaleDivider));\r\n\t}\r\n\r\n\tthis.imageThumbnail.createThumbnailFrom(this.image);\r\n};\r\n\r\n/**\r\n * Get the image thumbnail for this layer (or build one if one was not already built)\r\n *\r\n * @returns {CPColorBmp}\r\n */\r\nCPImageLayer.prototype.getImageThumbnail = function() {\r\n\tif (!this.imageThumbnail) {\r\n\t\tthis.rebuildImageThumbnail();\r\n\t}\r\n\r\n\treturn this.imageThumbnail;\r\n};\r\n","/*\n    ChickenPaint\n    \n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\n    by Nicholas Sherlock / Chicken Smoothie.\n    \n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n    ChickenPaint is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ChickenPaint is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport CPBitmap from \"./CPBitmap.js\";\nimport CPRect from \"../util/CPRect.js\";\nimport {createCanvas} from \"../util/Canvas.js\";\nimport {createImageData} from \"../util/Canvas.js\";\n\n/**\n * A 32bpp bitmap class (one byte per channel in RGBA order)\n *\n * @param {(ImageData|number)} width - The width of the bitmap, or the ImageData object to use by reference\n * @param {?number} height - The height of the bitmap\n *\n * @constructor\n * @extends {CPBitmap}\n *\n * @property {number} width\n * @property {number} height\n * @property {CanvasPixelArray} data - The bitmap data array (one byte per channel in RGBA order). We'd prefer this to\n *                                     be Uint8ClampedArray, but IE 10 doesn't support it\n * @property {ImageData} imageData\n */\nexport default function CPColorBmp(width, height) {\n    if (typeof width == \"number\") {\n        CPBitmap.call(this, width, height);\n\n        this.imageData = createImageData(this.width, this.height);\n    } else {\n        var\n            imageData = width;\n\n        CPBitmap.call(this, imageData.width, imageData.height);\n\n        this.imageData = imageData;\n    }\n\n    this.data = this.imageData.data;\n}\n\nCPColorBmp.prototype = Object.create(CPBitmap.prototype);\nCPColorBmp.prototype.constructor = CPColorBmp;\n\nCPColorBmp.BYTES_PER_PIXEL = 4;\nCPColorBmp.RED_BYTE_OFFSET = 0;\nCPColorBmp.GREEN_BYTE_OFFSET = 1;\nCPColorBmp.BLUE_BYTE_OFFSET = 2;\nCPColorBmp.ALPHA_BYTE_OFFSET = 3;\n\n/**\n * Create an independent copy of this bitmap.\n *\n * @returns {CPColorBmp}\n */\nCPColorBmp.prototype.clone = function() {\n    return this.cloneRect(this.getBounds());\n};\n\n/**\n * Creates a CPColorBmp from a portion of this bitmap\n *\n * @param {CPRect} rect\n * @returns {CPColorBmp}\n */\nCPColorBmp.prototype.cloneRect = function(rect) {\n    var\n        result = new CPColorBmp(rect.getWidth(), rect.getHeight());\n    \n    result.copyBitmapRect(this, 0, 0, rect);\n    \n    return result;\n};\n\n/**\n * Pixel access with friendly clipping.\n *\n * @returns {number} 32-bit integer in ARGB format\n */\nCPColorBmp.prototype.getPixel = function(x, y) {\n    x = Math.max(0, Math.min(this.width - 1, x));\n    y = Math.max(0, Math.min(this.height - 1, y));\n\n    var\n        pixIndex = this.offsetOfPixel(x, y);\n    \n    return (this.data[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] << 24) \n        | (this.data[pixIndex + CPColorBmp.RED_BYTE_OFFSET]    << 16) \n        | (this.data[pixIndex + CPColorBmp.GREEN_BYTE_OFFSET]  << 8) \n        | this.data[pixIndex + CPColorBmp.BLUE_BYTE_OFFSET];\n};\n\n/**\n * Get an r,g,b,a array of the xor of this bitmap and the given one, within the given rectangle\n *\n * @param {CPColorBmp} bmp\n * @param {CPRect} rect\n *\n * @returns {Uint8Array}\n */\nCPColorBmp.prototype.copyRectXOR = function(bmp, rect) {\n    rect = this.getBounds().clipTo(rect);\n    \n    var \n        w = rect.getWidth(),\n        h = rect.getHeight(),\n        \n        buffer = new Uint8Array(w * h * CPColorBmp.BYTES_PER_PIXEL),\n        \n        outputIndex = 0,\n        bmp1Index = this.offsetOfPixel(rect.left, rect.top), \n        bmp2Index = bmp.offsetOfPixel(rect.left, rect.top),\n        \n        bmp1YSkip = (this.width - w) * CPColorBmp.BYTES_PER_PIXEL,\n        bmp2YSkip = (bmp.width - w) * CPColorBmp.BYTES_PER_PIXEL,\n        \n        widthBytes = w * CPColorBmp.BYTES_PER_PIXEL;\n    \n    for (var y = rect.top; y < rect.bottom; y++, bmp1Index += bmp1YSkip, bmp2Index += bmp2YSkip) {\n        for (var x = 0; x < widthBytes; x++, outputIndex++, bmp1Index++, bmp2Index++) {\n            buffer[outputIndex] = this.data[bmp1Index] ^ bmp.data[bmp2Index];\n        }\n    }\n\n    return buffer;\n};\n\nCPColorBmp.prototype.setRectXOR = function(buffer, rect) {\n    rect = this.getBounds().clipTo(rect);\n    \n    var \n        w = rect.getWidth(),\n        h = rect.getHeight(),\n        \n        bmp1Index = this.offsetOfPixel(rect.left, rect.top),\n        bufferIndex = 0,\n        \n        bmp1YSkip = (this.width - w) * CPColorBmp.BYTES_PER_PIXEL,\n        \n        widthBytes = w * CPColorBmp.BYTES_PER_PIXEL;\n    \n    for (var y = 0; y < h; y++) {\n        for (var x = 0; x < widthBytes; x++) {\n            this.data[bmp1Index++] ^= buffer[bufferIndex++];\n        }\n        bmp1Index += bmp1YSkip;\n    }\n};\n\n/** \n * Copy the rectangle at srcRect from bmp onto this image at (dstX, dstY).\n *\n * @param {CPColorBmp} bmp\n * @param {number} dstX\n * @param {number} dstY\n * @param {CPRect} srcRect\n */ \nCPColorBmp.prototype.copyBitmapRect = function(bmp, dstX, dstY, srcRect) {\n    var\n        dstRect = new CPRect(dstX, dstY, 0, 0);\n\n    srcRect = srcRect.clone();\n\n    this.getBounds().clipSourceDest(srcRect, dstRect);\n\n    var \n        w = dstRect.getWidth() | 0,\n        h = dstRect.getHeight() | 0;\n\n    // Are we just trying to duplicate the bitmap?\n    if (dstRect.left == 0 && dstRect.top == 0 && w == this.width && h == this.height && w == bmp.width && h == bmp.height) {\n        this.copyPixelsFrom(bmp);\n    } else {\n        var\n            dstIndex = this.offsetOfPixel(dstRect.left, dstRect.top),\n            dstYSkip = (this.width - w) * CPColorBmp.BYTES_PER_PIXEL,\n\n            srcIndex = bmp.offsetOfPixel(srcRect.left, srcRect.top),\n            srcYSkip = (bmp.width - w) * CPColorBmp.BYTES_PER_PIXEL;\n\n        for (var y = 0; y < h; y++, srcIndex += srcYSkip, dstIndex += dstYSkip) {\n            for (var x = 0; x < w; x++, srcIndex += CPColorBmp.BYTES_PER_PIXEL, dstIndex += CPColorBmp.BYTES_PER_PIXEL) {\n                this.data[dstIndex] = bmp.data[srcIndex];\n                this.data[dstIndex + 1] = bmp.data[srcIndex + 1];\n                this.data[dstIndex + 2] = bmp.data[srcIndex + 2];\n                this.data[dstIndex + 3] = bmp.data[srcIndex + 3];\n            }\n        }\n    }\n};\n\n//\n// Copies the Alpha channel from another bitmap. Assumes both bitmaps are the same width.\n//\nCPColorBmp.prototype.copyAlphaFrom = function(bmp, rect) {\n    rect = this.getBounds().clipTo(rect);\n\n    var \n        w = rect.getWidth() | 0,\n        h = rect.getHeight() | 0,\n        \n        pixIndex = (this.offsetOfPixel(rect.left, rect.top) + CPColorBmp.ALPHA_BYTE_OFFSET) | 0 /* Apply offset here so we don't have to do it per-pixel*/,\n        ySkip = ((this.width - w) * CPColorBmp.BYTES_PER_PIXEL) | 0;\n    \n    for (var y = 0; y < h; y++, pixIndex += ySkip) {\n        for (var x = 0; x < w; x++, pixIndex += CPColorBmp.BYTES_PER_PIXEL) {\n            this.data[pixIndex] = bmp.data[pixIndex];\n        }\n    }\n};\n\n/**\n * Resize this bitmap to be the same size as that one\n *\n * @param {CPBitmap} bmp\n */\nCPColorBmp.prototype.setToSize = function(bmp) {\n    if (bmp.width != this.width || bmp.height != this.height) {\n        this.width = bmp.width;\n        this.height = bmp.height;\n\n        this.imageData = createImageData(this.width, this.height);\n        this.data = this.imageData.data;\n    }\n};\n\n/**\n *\n * @param {CPColorBmp} bmp\n */\nCPColorBmp.prototype.copyPixelsFrom = function(bmp) {\n    this.setToSize(bmp);\n\n    if (\"set\" in this.data) {\n        this.data.set(bmp.data);\n    } else {\n        // IE doesn't use Uint8ClampedArray for ImageData, so set() isn't available\n        for (var i = 0; i < this.data.length; i++) {\n            this.data[i] = bmp.data[i];\n        }\n    }\n};\n\nCPColorBmp.prototype.copyPixelsFromGreyscale = function(bmp) {\n    var\n        srcIndex,\n        dstIndex = 0,\n        pixels = bmp.width * bmp.height;\n\n    this.setToSize(bmp);\n\n    for (srcIndex = 0; srcIndex < pixels; srcIndex++, dstIndex += CPColorBmp.BYTES_PER_PIXEL) {\n        this.data[dstIndex + CPColorBmp.RED_BYTE_OFFSET] = bmp.data[srcIndex];\n        this.data[dstIndex + CPColorBmp.GREEN_BYTE_OFFSET] = bmp.data[srcIndex];\n        this.data[dstIndex + CPColorBmp.BLUE_BYTE_OFFSET] = bmp.data[srcIndex];\n        this.data[dstIndex + CPColorBmp.ALPHA_BYTE_OFFSET] = 0xFF;\n    }\n};\n\n/**\n * Use nearest-neighbor (subsampling) to scale that bitmap to replace the pixels of this one.\n *\n * @param {CPColorBmp} that\n */\nCPColorBmp.prototype.copyScaledNearestNeighbor = function(that) {\n    var\n        destPixIndex = 0,\n\n        xSkip = that.width / this.width,\n        ySkip = that.height / this.height,\n        srcRowStart;\n\n    for (var y = 0, srcRow = 0; y < this.height; y++, srcRow += ySkip) {\n        srcRowStart = that.offsetOfPixel(0, Math.round(srcRow));\n\n        for (var x = 0, srcCol = 0; x < this.width; x++, destPixIndex += CPColorBmp.BYTES_PER_PIXEL, srcCol += xSkip) {\n            var\n                srcPixIndex = srcRowStart + Math.round(srcCol) * CPColorBmp.BYTES_PER_PIXEL;\n\n            this.data[destPixIndex] = that.data[srcPixIndex];\n            this.data[destPixIndex + 1] = that.data[srcPixIndex + 1];\n            this.data[destPixIndex + 2] = that.data[srcPixIndex + 2];\n            this.data[destPixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] = that.data[srcPixIndex + CPColorBmp.ALPHA_BYTE_OFFSET];\n        }\n    }\n};\n\n/**\n * Replace the pixels in this image with a scaled down thumbnail of that image.\n *\n * The thumbnail will attempt to exaggerate the contribution of thin opaque strokes on a transparent background, in order\n * to make lineart layers more visible.\n *\n * @param {CPColorBmp} that\n */\nCPColorBmp.prototype.createThumbnailFrom = function(that) {\n    const\n        MAX_SAMPLES_PER_OUTPUT_PIXEL = 3,\n\n        numSamples = Math.min(Math.floor(that.width / this.width), MAX_SAMPLES_PER_OUTPUT_PIXEL);\n\n    if (numSamples < 2) {\n        // If we only take one sample per output pixel, there's no need for our filtering strategy\n        this.copyScaledNearestNeighbor(that);\n        return;\n    }\n\n    const\n        // Uint16 means we can have up to 16 (since 16*16 ~= 65535/255) times scale reduction without overflow\n        rowBuffer = new Uint16Array(this.width * 5 /* 4 bytes of RGBA plus one to record the max alpha of the samples */),\n        srcRowByteLength = that.width * CPColorBmp.BYTES_PER_PIXEL,\n\n        sourceBytesBetweenOutputCols = Math.floor(that.width / this.width) * CPColorBmp.BYTES_PER_PIXEL,\n        intersampleXByteSpacing = Math.floor(that.width / this.width / numSamples) * CPColorBmp.BYTES_PER_PIXEL,\n\n    /* Due to the floor() in intersampleXByteSkip, it's likely that the gap between the last sample for an output pixel\n     * and the start of the sample for the next pixel will be higher than the intersample gap. So we'll add this between\n     * pixels if needed.\n     */\n        interpixelXByteSkip = sourceBytesBetweenOutputCols - intersampleXByteSpacing * numSamples,\n\n    // Now we do the same for rows...\n        sourceRowsBetweenOutputRows = Math.floor(that.height / this.height),\n        intersampleYRowsSpacing = Math.floor(that.height / this.height / numSamples),\n\n        intersampleYByteSkip = intersampleYRowsSpacing * srcRowByteLength - sourceBytesBetweenOutputCols * this.width,\n        interpixelYByteSkip = (sourceRowsBetweenOutputRows - intersampleYRowsSpacing * numSamples) * srcRowByteLength;\n\n    let\n        srcPixIndex = 0, dstPixIndex = 0;\n\n    // For each output thumbnail row...\n    for (let y = 0; y < this.height; y++, srcPixIndex += interpixelYByteSkip) {\n        let\n            bufferIndex = 0;\n\n        rowBuffer.fill(0);\n\n        // Sum the contributions of the input rows that correspond to this output row\n        for (let y2 = 0; y2 < numSamples; y2++, srcPixIndex += intersampleYByteSkip) {\n            bufferIndex = 0;\n            for (let x = 0; x < this.width; x++, bufferIndex += 5, srcPixIndex += interpixelXByteSkip) {\n                for (let x2 = 0; x2 < numSamples; x2++, srcPixIndex += intersampleXByteSpacing) {\n                    let\n                        sourceAlpha = that.data[srcPixIndex + CPColorBmp.ALPHA_BYTE_OFFSET],\n                        sourceAlphaScale = sourceAlpha / 255;\n\n                    // Accumulate the pre-multiplied pixels in the sample area\n                    rowBuffer[bufferIndex]     += that.data[srcPixIndex] * sourceAlphaScale;\n                    rowBuffer[bufferIndex + 1] += that.data[srcPixIndex + 1] * sourceAlphaScale;\n                    rowBuffer[bufferIndex + 2] += that.data[srcPixIndex + 2] * sourceAlphaScale;\n                    rowBuffer[bufferIndex + CPColorBmp.ALPHA_BYTE_OFFSET] += sourceAlpha;\n\n                    // And keep track of the highest alpha we see\n                    rowBuffer[bufferIndex + 4] = Math.max(rowBuffer[bufferIndex + 4], sourceAlpha);\n                }\n            }\n        }\n\n        // Now this thumbnail row is complete and we can write the buffer to the output\n        bufferIndex = 0;\n        for (let x = 0; x < this.width; x++, bufferIndex += 5, dstPixIndex += CPColorBmp.BYTES_PER_PIXEL) {\n            let\n                maxAlphaForSample = rowBuffer[bufferIndex + 4];\n\n            if (maxAlphaForSample == 0) {\n                this.data[dstPixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] = 0;\n            } else {\n                // Undo the premultiplication of the pixel data, scaling it to the max() alpha we want\n                let\n                    sampleAlphaScale = maxAlphaForSample / rowBuffer[bufferIndex + CPColorBmp.ALPHA_BYTE_OFFSET];\n\n                this.data[dstPixIndex]     = rowBuffer[bufferIndex]     * sampleAlphaScale;\n                this.data[dstPixIndex + 1] = rowBuffer[bufferIndex + 1] * sampleAlphaScale;\n                this.data[dstPixIndex + 2] = rowBuffer[bufferIndex + 2] * sampleAlphaScale;\n\n                this.data[dstPixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] = maxAlphaForSample;\n            }\n        }\n    }\n};\n\n/**\n * Flood fill the given color starting from the given point\n * @param x int\n * @param y int\n * @param color int\n */\nCPColorBmp.prototype.floodFill = function(x, y, color) {\n    if (!this.isInside(x, y)) {\n        return;\n    }\n\n    let\n        oldColor = this.getPixel(x, y),\n        \n        oldAlpha = (oldColor >> 24) & 0xFF,\n        oldRed = (oldColor >> 16) & 0xFF,\n        oldGreen = (oldColor >> 8) & 0xFF,\n        oldBlue = oldColor & 0xFF,\n        \n        colorAlpha = (color >> 24) & 0xFF,\n        colorRed = (color >> 16) & 0xFF,\n        colorGreen = (color >> 8) & 0xFF,\n        colorBlue = color & 0xFF,\n        \n        stack = [],\n        clip = this.getBounds(),\n        \n        data = this.data;\n    \n    // Change the left and right bounds from pixel indexes into byte indexes for easy clipping\n    clip.left *= CPColorBmp.BYTES_PER_PIXEL;\n    clip.right *= CPColorBmp.BYTES_PER_PIXEL;\n    \n    stack.push({x1: x * CPColorBmp.BYTES_PER_PIXEL, x2: x * CPColorBmp.BYTES_PER_PIXEL, y: y, dy: -1});\n    stack.push({x1: x * CPColorBmp.BYTES_PER_PIXEL, x2: x * CPColorBmp.BYTES_PER_PIXEL, y: y + 1, dy: 1});\n    \n    /* \n     * If we are filling 100% transparent areas then we need to ignore the residual color information\n     * (it would also be possible to clear it when erasing, but then the performance impact would be on the eraser \n     * rather than on this low importance flood fill)\n     */\n    if (oldAlpha == 0) {\n        if (colorAlpha == 0) {\n            return;\n        }\n        \n        while (stack.length > 0) {\n            let\n                line = stack.pop();\n    \n            if (line.y < clip.top || line.y >= clip.bottom) {\n                continue;\n            }\n    \n            let\n                lineOffset = this.offsetOfPixel(0, line.y),\n    \n                left = line.x1, next;\n            \n            while (\n                left >= clip.left \n                && data[left + lineOffset + CPColorBmp.ALPHA_BYTE_OFFSET] == 0\n            ) {\n                data[left + lineOffset + CPColorBmp.RED_BYTE_OFFSET] = colorRed;\n                data[left + lineOffset + CPColorBmp.GREEN_BYTE_OFFSET] = colorGreen;\n                data[left + lineOffset + CPColorBmp.BLUE_BYTE_OFFSET] = colorBlue;\n                data[left + lineOffset + CPColorBmp.ALPHA_BYTE_OFFSET] = colorAlpha;\n                \n                left -= CPColorBmp.BYTES_PER_PIXEL;\n            }\n            \n            if (left >= line.x1) {\n                while (\n                    left <= line.x2 \n                    && data[left + lineOffset + CPColorBmp.ALPHA_BYTE_OFFSET] != oldAlpha\n                ) {\n                    left += CPColorBmp.BYTES_PER_PIXEL;\n                }\n                next = left + CPColorBmp.BYTES_PER_PIXEL;\n                if (left > line.x2) {\n                    continue;\n                }\n            } else {\n                left += CPColorBmp.BYTES_PER_PIXEL;\n                if (left < line.x1) {\n                    stack.push({x1: left, x2: line.x1 - CPColorBmp.BYTES_PER_PIXEL, y: line.y - line.dy, dy: -line.dy});\n                }\n                next = line.x1 + CPColorBmp.BYTES_PER_PIXEL;\n            }\n    \n            do {\n                data[left + lineOffset + CPColorBmp.RED_BYTE_OFFSET] = colorRed;\n                data[left + lineOffset + CPColorBmp.GREEN_BYTE_OFFSET] = colorGreen;\n                data[left + lineOffset + CPColorBmp.BLUE_BYTE_OFFSET] = colorBlue;\n                data[left + lineOffset + CPColorBmp.ALPHA_BYTE_OFFSET] = colorAlpha;\n                \n                while (\n                    next < clip.right \n                    && data[next + lineOffset + CPColorBmp.ALPHA_BYTE_OFFSET] == oldAlpha\n                ) {\n                    data[next + lineOffset + CPColorBmp.RED_BYTE_OFFSET] = colorRed;\n                    data[next + lineOffset + CPColorBmp.GREEN_BYTE_OFFSET] = colorGreen;\n                    data[next + lineOffset + CPColorBmp.BLUE_BYTE_OFFSET] = colorBlue;\n                    data[next + lineOffset + CPColorBmp.ALPHA_BYTE_OFFSET] = colorAlpha;\n                    \n                    next += CPColorBmp.BYTES_PER_PIXEL;\n                }\n                stack.push({x1: left, x2: next - CPColorBmp.BYTES_PER_PIXEL, y: line.y + line.dy, dy: line.dy});\n    \n                if (next - CPColorBmp.BYTES_PER_PIXEL > line.x2) {\n                    stack.push({x1: line.x2 + CPColorBmp.BYTES_PER_PIXEL, x2: next - CPColorBmp.BYTES_PER_PIXEL, y: line.y - line.dy, dy: -line.dy});\n                }\n    \n                left = next + CPColorBmp.BYTES_PER_PIXEL;\n                while (\n                    left <= line.x2 && data[left + lineOffset + CPColorBmp.ALPHA_BYTE_OFFSET] != oldAlpha\n                ) {\n                    left += CPColorBmp.BYTES_PER_PIXEL;\n                }\n    \n                next = left + CPColorBmp.BYTES_PER_PIXEL;\n            } while (left <= line.x2);\n        }\n    } else {\n        if (color == oldColor) {\n            return;\n        }\n\n        while (stack.length > 0) {\n            let\n                line = stack.pop();\n\n            if (line.y < clip.top || line.y >= clip.bottom) {\n                continue;\n            }\n\n            let\n                lineOffset = this.offsetOfPixel(0, line.y),\n\n                left = line.x1, next;\n            \n            while (\n                left >= clip.left \n                && data[left + lineOffset + CPColorBmp.RED_BYTE_OFFSET] == oldRed\n                && data[left + lineOffset + CPColorBmp.GREEN_BYTE_OFFSET] == oldGreen\n                && data[left + lineOffset + CPColorBmp.BLUE_BYTE_OFFSET] == oldBlue\n                && data[left + lineOffset + CPColorBmp.ALPHA_BYTE_OFFSET] == oldAlpha\n            ) {\n                data[left + lineOffset + CPColorBmp.RED_BYTE_OFFSET] = colorRed;\n                data[left + lineOffset + CPColorBmp.GREEN_BYTE_OFFSET] = colorGreen;\n                data[left + lineOffset + CPColorBmp.BLUE_BYTE_OFFSET] = colorBlue;\n                data[left + lineOffset + CPColorBmp.ALPHA_BYTE_OFFSET] = colorAlpha;\n                \n                left -= CPColorBmp.BYTES_PER_PIXEL;\n            }\n            \n            if (left >= line.x1) {\n                while (\n                    left <= line.x2 \n                    && !(\n                        data[left + lineOffset + CPColorBmp.RED_BYTE_OFFSET] == oldRed\n                        && data[left + lineOffset + CPColorBmp.GREEN_BYTE_OFFSET] == oldGreen\n                        && data[left + lineOffset + CPColorBmp.BLUE_BYTE_OFFSET] == oldBlue\n                        && data[left + lineOffset + CPColorBmp.ALPHA_BYTE_OFFSET] == oldAlpha\n                    )\n                ) {\n                    left += CPColorBmp.BYTES_PER_PIXEL;\n                }\n                next = left + CPColorBmp.BYTES_PER_PIXEL;\n                if (left > line.x2) {\n                    continue;\n                }\n            } else {\n                left += CPColorBmp.BYTES_PER_PIXEL;\n                if (left < line.x1) {\n                    stack.push({x1: left, x2: line.x1 - CPColorBmp.BYTES_PER_PIXEL, y: line.y - line.dy, dy: -line.dy});\n                }\n                next = line.x1 + CPColorBmp.BYTES_PER_PIXEL;\n            }\n\n            do {\n                data[left + lineOffset + CPColorBmp.RED_BYTE_OFFSET] = colorRed;\n                data[left + lineOffset + CPColorBmp.GREEN_BYTE_OFFSET] = colorGreen;\n                data[left + lineOffset + CPColorBmp.BLUE_BYTE_OFFSET] = colorBlue;\n                data[left + lineOffset + CPColorBmp.ALPHA_BYTE_OFFSET] = colorAlpha;\n                \n                while (\n                    next < clip.right \n                    && data[next + lineOffset + CPColorBmp.RED_BYTE_OFFSET] == oldRed\n                    && data[next + lineOffset + CPColorBmp.GREEN_BYTE_OFFSET] == oldGreen\n                    && data[next + lineOffset + CPColorBmp.BLUE_BYTE_OFFSET] == oldBlue\n                    && data[next + lineOffset + CPColorBmp.ALPHA_BYTE_OFFSET] == oldAlpha\n                ) {\n                    data[next + lineOffset + CPColorBmp.RED_BYTE_OFFSET] = colorRed;\n                    data[next + lineOffset + CPColorBmp.GREEN_BYTE_OFFSET] = colorGreen;\n                    data[next + lineOffset + CPColorBmp.BLUE_BYTE_OFFSET] = colorBlue;\n                    data[next + lineOffset + CPColorBmp.ALPHA_BYTE_OFFSET] = colorAlpha;\n                    \n                    next += CPColorBmp.BYTES_PER_PIXEL;\n                }\n                stack.push({x1: left, x2: next - CPColorBmp.BYTES_PER_PIXEL, y: line.y + line.dy, dy: line.dy});\n\n                if (next - CPColorBmp.BYTES_PER_PIXEL > line.x2) {\n                    stack.push({x1: line.x2 + CPColorBmp.BYTES_PER_PIXEL, x2: next - CPColorBmp.BYTES_PER_PIXEL, y: line.y - line.dy, dy: -line.dy});\n                }\n\n                left = next + CPColorBmp.BYTES_PER_PIXEL;\n                while (\n                    left <= line.x2 && !(\n                        data[left + lineOffset + CPColorBmp.RED_BYTE_OFFSET] == oldRed\n                        && data[left + lineOffset + CPColorBmp.GREEN_BYTE_OFFSET] == oldGreen\n                        && data[left + lineOffset + CPColorBmp.BLUE_BYTE_OFFSET] == oldBlue\n                        && data[left + lineOffset + CPColorBmp.ALPHA_BYTE_OFFSET] == oldAlpha\n                    )\n                ) {\n                    left += CPColorBmp.BYTES_PER_PIXEL;\n                }\n\n                next = left + CPColorBmp.BYTES_PER_PIXEL;\n            } while (left <= line.x2);\n        }\n    }\n};\n\n/**\n * Premultiply the RGB channels in the given R,G,B,A channel buffer with the alpha channel.\n * \n * @param {Uint8Array} buffer - buffer R,G,B,A channel array\n * @param {number} len - Number of pixels in buffer to modify\n */\nfunction multiplyAlpha(buffer, len) {\n    var\n        pixIndex = 0;\n    \n    for (var i = 0; i < len; i++) {\n        var\n            alpha = buffer[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET];\n        \n        // Multiply the RGB channels by alpha\n        for (var j = 0; j < 3; j++, pixIndex++) {\n            buffer[pixIndex] = Math.round(buffer[pixIndex] * alpha / 255);\n        }\n        pixIndex++; // Don't modify alpha channel\n    }\n}\n\n/**\n * Inverse of multiplyAlpha()\n */\nfunction separateAlpha(buffer, len) {\n    var\n        pixIndex = 0;\n    \n    for (var i = 0; i < len; i++) {\n        var\n            alpha = buffer[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET];\n        \n        if (alpha != 0) {\n            var\n                invAlpha = 255 / alpha;\n            \n            for (var j = 0; j < 3; j++, pixIndex++) {\n                buffer[pixIndex] = Math.min(Math.round(buffer[pixIndex] * invAlpha), 255);\n            }\n            // Don't modify alpha channel\n            pixIndex++;\n        } else {\n            pixIndex += CPColorBmp.BYTES_PER_PIXEL;\n        }\n    }\n}\n\n/**\n * Blur the first `len` pixels in the src array by `radius` pixels, and store the result in the `dst` array.\n *\n * @param {Uint8Array} src\n * @param {Uint8Array} dst\n * @param {number} len\n * @param {number} radius - Number of pixels that will be averaged either side of a target pixel.\n */\nfunction boxBlurLine(src, dst, len, radius) {\n    var\n        pixelCount = 0, channelSums = [0, 0, 0, 0],\n        pixIndex, dstIndex;\n\n    pixIndex = 0;\n    for (let i = 0; i < radius && i < len; i++) {\n        for (let j = 0; j < CPColorBmp.BYTES_PER_PIXEL; j++) {\n            channelSums[j] += src[pixIndex++];\n        }\n        pixelCount++;\n    }\n    \n    dstIndex = 0;\n    for (let i = 0; i < len; i++) {\n        // New pixel joins the window at the right\n        if (i + radius < len) {\n            pixIndex = (i + radius) * CPColorBmp.BYTES_PER_PIXEL;\n            \n            for (let j = 0; j < CPColorBmp.BYTES_PER_PIXEL; j++) {\n                channelSums[j] += src[pixIndex++];\n            }\n            pixelCount++;\n        }\n\n        for (let j = 0; j < CPColorBmp.BYTES_PER_PIXEL; j++) {\n            dst[dstIndex++] = Math.round(channelSums[j] / pixelCount);\n        }\n\n        // Old pixel leaves the window at the left\n        if (i - radius >= 0) {\n            pixIndex = (i - radius) * CPColorBmp.BYTES_PER_PIXEL;\n            \n            for (let j = 0; j < CPColorBmp.BYTES_PER_PIXEL; j++) {\n                channelSums[j] -= src[pixIndex++];\n            }\n            pixelCount--;\n        }\n    }\n}\n\n/**\n * Copy a column of pixels in the bitmap to the given R,G,B,A buffer.\n * \n * @param {number} x X-coordinate of column\n * @param {number} y Y-coordinate of top of column to copy\n * @param {number} len Number of pixels to copy\n * @param {Uint8Array} buffer R,G,B,A array\n */\nCPColorBmp.prototype.copyPixelColumnToArray = function(x, y, len, buffer) {\n    var\n        yJump = (this.width - 1) * CPColorBmp.BYTES_PER_PIXEL,\n        dstOffset = 0,\n        srcOffset = this.offsetOfPixel(x, y);\n    \n    for (var i = 0; i < len; i++) {\n        for (var j = 0; j < CPColorBmp.BYTES_PER_PIXEL; j++) {\n            buffer[dstOffset++] = this.data[srcOffset++];\n        }\n        \n        srcOffset += yJump;\n    }\n};\n\n/**\n * Copy the pixels from the given R,G,B,A buffer to a column of pixels in the bitmap.\n * \n * @param {number} x X-coordinate of column\n * @param {number} y Y-coordinate of top of column to copy\n * @param {number} len Number of pixels to copy\n * @param {Uint8Array} buffer R,G,B,A array to copy from\n */\nCPColorBmp.prototype.copyArrayToPixelColumn = function(x, y, len, buffer) {\n    var\n        yJump = (this.width - 1) * CPColorBmp.BYTES_PER_PIXEL,\n        srcOffset = 0,\n        dstOffset = this.offsetOfPixel(x, y);\n    \n    for (var i = 0; i < len; i++) {\n        for (var j = 0; j < CPColorBmp.BYTES_PER_PIXEL; j++) {\n            this.data[dstOffset++] = buffer[srcOffset++];\n        }\n        \n        dstOffset += yJump;\n    }\n};\n\nCPColorBmp.prototype.boxBlur = function(rect, radiusX, radiusY) {\n    rect = this.getBounds().clipTo(rect);\n\n    let\n        rectWidth = rect.getWidth(),\n        rectWidthBytes = rectWidth * CPColorBmp.BYTES_PER_PIXEL,\n        rectHeight = rect.getHeight(),\n        rectLength = Math.max(rectWidth, rectHeight),\n\n        src = new Uint8Array(rectLength * CPColorBmp.BYTES_PER_PIXEL),\n        dst = new Uint8Array(rectLength * CPColorBmp.BYTES_PER_PIXEL);\n\n    // 横方向のぼかし\n    for (let y = rect.top; y < rect.bottom; y++) {\n        var\n            pixOffset = this.offsetOfPixel(rect.left, y);\n        \n        // ピクセルデータをコピー\n        for (let x = 0; x < rectWidthBytes; x++) {\n            src[x] = this.data[pixOffset++];\n        }\n        \n        // 透明部分を考慮してアルファを掛ける\n        multiplyAlpha(src, rectWidth);\n        \n        // ぼかし処理\n        boxBlurLine(src, dst, rectWidth, radiusX);\n        \n        // 結果を元のデータにコピー\n        pixOffset = this.offsetOfPixel(rect.left, y);\n        \n        for (let x = 0; x < rectWidthBytes; x++) {\n            this.data[pixOffset++] = dst[x];\n        }\n    }\n    \n    // 縦方向のぼかし\n    for (let x = rect.left; x < rect.right; x++) {\n        this.copyPixelColumnToArray(x, rect.top, rectHeight, src);\n        \n        // 縦方向のぼかし処理\n        boxBlurLine(src, dst, rectHeight, radiusY);\n        \n        // 透明部分を分離して再設定\n        separateAlpha(dst, rectHeight);\n        \n        this.copyArrayToPixelColumn(x, rect.top, rectHeight, dst);\n    }\n};\n\nCPColorBmp.prototype.offsetOfPixel = function(x, y) {\n    return ((y * this.width + x) * 4) | 0;\n};\n\nCPColorBmp.prototype.getMemorySize = function() {\n    return this.data.length;\n};\n\nCPColorBmp.prototype.getImageData = function() {\n    return this.imageData;\n};\n\n/**\n * Replace the image data with the provided ImageData object (i.e. use it by reference).\n *\n * @param imageData {ImageData}\n */\nCPColorBmp.prototype.setImageData = function(imageData) {\n    this.width = imageData.width;\n    this.height = imageData.height;\n    this.imageData = imageData;\n    this.data = imageData.data;\n};\n\nCPColorBmp.prototype.clearAll = function(color) {\n    if (color == 0 && \"fill\" in this.data) {\n        this.data.fill(0);\n    } else {\n        var\n            a = (color >> 24) & 0xFF,\n            r = (color >> 16) & 0xFF,\n            g = (color >> 8) & 0xFF,\n            b = color & 0xFF;\n\n        for (var i = 0; i < this.width * this.height * CPColorBmp.BYTES_PER_PIXEL;) {\n            this.data[i++] = r;\n            this.data[i++] = g;\n            this.data[i++] = b;\n            this.data[i++] = a;\n        }\n    }\n};\n\n/**\n *\n * @param {CPRect} rect\n * @param {number} color\n */\nCPColorBmp.prototype.clearRect = function(rect, color) {\n    rect = this.getBounds().clipTo(rect);\n\n    var\n        a = (color >> 24) & 0xFF,\n        r = (color >> 16) & 0xFF,\n        g = (color >> 8) & 0xFF,\n        b = color & 0xFF,\n\n        yStride = (this.width - rect.getWidth()) * CPColorBmp.BYTES_PER_PIXEL,\n\n        pixIndex = this.offsetOfPixel(rect.left, rect.top);\n\n    for (var y = rect.top; y < rect.bottom; y++, pixIndex += yStride) {\n        for (var x = rect.left; x < rect.right; x++) {\n            this.data[pixIndex++] = r;\n            this.data[pixIndex++] = g;\n            this.data[pixIndex++] = b;\n            this.data[pixIndex++] = a;\n        }\n    }\n};\n\n/**\n * @param rect CPRect\n * @param source CPColorBmp\n */\nCPColorBmp.prototype.copyRegionHFlip = function(rect, source) {\n    rect = this.getBounds().clipTo(rect);\n\n    for (var y = rect.top; y < rect.bottom; y++) {\n        var\n            dstOffset = this.offsetOfPixel(rect.left, y),\n            srcOffset = source.offsetOfPixel(rect.right - 1, y);\n\n        for (var x = rect.left; x < rect.right; x++, srcOffset -= CPColorBmp.BYTES_PER_PIXEL * 2) {\n            for (var i = 0; i < CPColorBmp.BYTES_PER_PIXEL; i++) {\n                this.data[dstOffset++] = source.data[srcOffset++];\n            }\n        }\n    }\n};\n\n/**\n * @param rect CPRect\n * @param source CPColorBmp\n */\nCPColorBmp.prototype.copyRegionVFlip = function(rect, source) {\n    rect = this.getBounds().clipTo(rect);\n\n    var\n        widthBytes = rect.getWidth() * CPColorBmp.BYTES_PER_PIXEL;\n\n    for (var y = rect.top; y < rect.bottom; y++) {\n        var\n            dstOffset = this.offsetOfPixel(rect.left, y),\n            srcOffset = source.offsetOfPixel(rect.left, rect.bottom - 1 - (y - rect.top));\n\n        for (var x = 0; x < widthBytes; x++) {\n            this.data[dstOffset++] = source.data[srcOffset++];\n        }\n    }\n};\n\n/**\n * @param {CPRect} rect\n */\nCPColorBmp.prototype.fillWithNoise = function(rect) {\n    rect = this.getBounds().clipTo(rect);\n\n    var\n        value,\n        yStride = (this.width - rect.getWidth()) * CPColorBmp.BYTES_PER_PIXEL,\n\n        pixIndex = this.offsetOfPixel(rect.left, rect.top);\n\n    for (var y = rect.top; y < rect.bottom; y++, pixIndex += yStride) {\n        for (var x = rect.left; x < rect.right; x++, pixIndex += CPColorBmp.BYTES_PER_PIXEL) {\n            value = (Math.random() * 0x100) | 0;\n\n            this.data[pixIndex + CPColorBmp.RED_BYTE_OFFSET] = value;\n            this.data[pixIndex + CPColorBmp.GREEN_BYTE_OFFSET] = value;\n            this.data[pixIndex + CPColorBmp.BLUE_BYTE_OFFSET] = value;\n            this.data[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] = 0xFF;\n        }\n    }\n};\n\n/**\n * Replace the pixels in the given rect with the given horizontal gradient.\n *\n * @param rect CPRect\n * @param fromX int\n * @param toX int\n * @param gradientPoints int[]\n */\nCPColorBmp.prototype.gradientHorzReplace = function(rect, fromX, toX, gradientPoints) {\n    var\n        fromColor = {\n            r: (gradientPoints[0] >> 16) & 0xFF,\n            g: (gradientPoints[0] >> 8) & 0xFF,\n            b: gradientPoints[0] & 0xFF,\n            a: (gradientPoints[0] >> 24) & 0xFF\n        },\n        toColor = {\n            r: (gradientPoints[1] >> 16) & 0xFF,\n            g: (gradientPoints[1] >> 8) & 0xFF,\n            b: gradientPoints[1] & 0xFF,\n            a: (gradientPoints[1] >> 24) & 0xFF\n        },\n\n        yStride = (this.width - rect.getWidth()) * CPColorBmp.BYTES_PER_PIXEL,\n        pixIndex = this.offsetOfPixel(rect.left, rect.top) | 0,\n        h = (rect.bottom - rect.top) | 0;\n\n    if (toX < fromX) {\n        var\n            temp = toX;\n        toX = fromX;\n        fromX = temp;\n\n        temp = fromColor;\n        fromColor = toColor;\n        toColor = temp;\n    }\n\n    var\n        gradientRange = (toX - fromX) | 0,\n        rStep = (toColor.r - fromColor.r) / gradientRange,\n        gStep = (toColor.g - fromColor.g) / gradientRange,\n        bStep = (toColor.b - fromColor.b) / gradientRange,\n        aStep = (toColor.a - fromColor.a) / gradientRange,\n\n        jump = Math.max(rect.left - fromX, 0);\n\n    for (var y = 0; y < h; y++, pixIndex += yStride) {\n        // The solid color section before the gradient\n        var\n            x = rect.left;\n\n        for (var xEnd = Math.min(fromX, rect.right) | 0; x < xEnd; x++, pixIndex += CPColorBmp.BYTES_PER_PIXEL) {\n            this.data[pixIndex + CPColorBmp.RED_BYTE_OFFSET] = fromColor.r;\n            this.data[pixIndex + CPColorBmp.GREEN_BYTE_OFFSET] = fromColor.g;\n            this.data[pixIndex + CPColorBmp.BLUE_BYTE_OFFSET] = fromColor.b;\n            this.data[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] = fromColor.a;\n        }\n\n        // In the gradient\n        var\n            r = fromColor.r + rStep * jump,\n            g = fromColor.g + gStep * jump,\n            b = fromColor.b + bStep * jump,\n            a = fromColor.a + aStep * jump;\n\n        for (xEnd = Math.min(toX, rect.right) | 0; x < xEnd; x++, pixIndex += CPColorBmp.BYTES_PER_PIXEL) {\n            this.data[pixIndex + CPColorBmp.RED_BYTE_OFFSET] = r;\n            this.data[pixIndex + CPColorBmp.GREEN_BYTE_OFFSET] = g;\n            this.data[pixIndex + CPColorBmp.BLUE_BYTE_OFFSET] = b;\n            this.data[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] = a;\n\n            r += rStep;\n            g += gStep;\n            b += bStep;\n            a += aStep;\n        }\n\n        // The section after the end of the gradient\n        for (; x < rect.right; x++, pixIndex += CPColorBmp.BYTES_PER_PIXEL) {\n            this.data[pixIndex + CPColorBmp.RED_BYTE_OFFSET] = toColor.r;\n            this.data[pixIndex + CPColorBmp.GREEN_BYTE_OFFSET] = toColor.g;\n            this.data[pixIndex + CPColorBmp.BLUE_BYTE_OFFSET] = toColor.b;\n            this.data[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] = toColor.a;\n        }\n    }\n};\n\n/**\n * Replace the pixels in the given rect with the given vertical gradient.\n *\n * @param {CPRect} rect\n * @param fromY int\n * @param toY int\n * @param gradientPoints int[]\n */\nCPColorBmp.prototype.gradientVertReplace = function(rect, fromY, toY, gradientPoints) {\n    let\n        fromColor = {\n            r: (gradientPoints[0] >> 16) & 0xFF,\n            g: (gradientPoints[0] >> 8) & 0xFF,\n            b: gradientPoints[0] & 0xFF,\n            a: (gradientPoints[0] >> 24) & 0xFF\n        },\n        toColor = {\n            r: (gradientPoints[1] >> 16) & 0xFF,\n            g: (gradientPoints[1] >> 8) & 0xFF,\n            b: gradientPoints[1] & 0xFF,\n            a: (gradientPoints[1] >> 24) & 0xFF\n        },\n\n        yStride = (this.width - rect.getWidth()) * CPColorBmp.BYTES_PER_PIXEL,\n        pixIndex = this.offsetOfPixel(rect.left, rect.top) | 0,\n        w = (rect.right - rect.left) | 0;\n\n    if (toY < fromY) {\n        let\n            temp = toY;\n        toY = fromY;\n        fromY = temp;\n\n        temp = fromColor;\n        fromColor = toColor;\n        toColor = temp;\n    }\n\n    let\n        y = rect.top;\n\n    // The solid color section before the start of the gradient\n    for (let yEnd = Math.min(rect.bottom, fromY) | 0; y < yEnd; y++, pixIndex += yStride) {\n        for (let x = 0; x < w; x++, pixIndex += CPColorBmp.BYTES_PER_PIXEL) {\n            this.data[pixIndex + CPColorBmp.RED_BYTE_OFFSET] = fromColor.r;\n            this.data[pixIndex + CPColorBmp.GREEN_BYTE_OFFSET] = fromColor.g;\n            this.data[pixIndex + CPColorBmp.BLUE_BYTE_OFFSET] = fromColor.b;\n            this.data[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] = fromColor.a;\n        }\n    }\n\n    // Inside the gradient\n    var\n        gradientRange = (toY - fromY) | 0,\n        rStep = (toColor.r - fromColor.r) / gradientRange,\n        gStep = (toColor.g - fromColor.g) / gradientRange,\n        bStep = (toColor.b - fromColor.b) / gradientRange,\n        aStep = (toColor.a - fromColor.a) / gradientRange,\n\n        jump = Math.max(y - fromY, 0),\n        r = fromColor.r + rStep * jump,\n        g = fromColor.g + gStep * jump,\n        b = fromColor.b + bStep * jump,\n        a = fromColor.a + aStep * jump;\n\n    for (let yEnd = Math.min(rect.bottom, toY) | 0; y < yEnd; y++, pixIndex += yStride) {\n        for (let x = 0; x < w; x++, pixIndex += CPColorBmp.BYTES_PER_PIXEL) {\n            this.data[pixIndex + CPColorBmp.RED_BYTE_OFFSET] = r;\n            this.data[pixIndex + CPColorBmp.GREEN_BYTE_OFFSET] = g;\n            this.data[pixIndex + CPColorBmp.BLUE_BYTE_OFFSET] = b;\n            this.data[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] = a;\n        }\n\n        r += rStep;\n        g += gStep;\n        b += bStep;\n        a += aStep;\n    }\n\n    // The section after the end of the gradient\n    for (; y < rect.bottom; y++, pixIndex += yStride) {\n        for (let x = 0; x < w; x++, pixIndex += CPColorBmp.BYTES_PER_PIXEL) {\n            this.data[pixIndex + CPColorBmp.RED_BYTE_OFFSET] = toColor.r;\n            this.data[pixIndex + CPColorBmp.GREEN_BYTE_OFFSET] = toColor.g;\n            this.data[pixIndex + CPColorBmp.BLUE_BYTE_OFFSET] = toColor.b;\n            this.data[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] = toColor.a;\n        }\n    }\n};\n\n/**\n * Replace the pixels in the given rect with the given gradient.\n *\n * @param rect CPRect\n * @param fromX int\n * @param fromY int\n * @param toX int\n * @param toY int\n * @param gradientPoints int[]\n */\nCPColorBmp.prototype.gradientReplace = function(rect, fromX, fromY, toX, toY, gradientPoints) {\n    var\n        yStride = (this.width - rect.getWidth()) * CPColorBmp.BYTES_PER_PIXEL,\n        pixIndex = this.offsetOfPixel(rect.left, rect.top) | 0,\n        w = (rect.right - rect.left) | 0,\n\n        fromColor = {\n            r: (gradientPoints[0] >> 16) & 0xFF,\n            g: (gradientPoints[0] >> 8) & 0xFF,\n            b: gradientPoints[0] & 0xFF,\n            a: (gradientPoints[0] >> 24) & 0xFF\n        },\n        toColor = {\n            r: (gradientPoints[1] >> 16) & 0xFF,\n            g: (gradientPoints[1] >> 8) & 0xFF,\n            b: gradientPoints[1] & 0xFF,\n            a: (gradientPoints[1] >> 24) & 0xFF\n        },\n\n    // How many pixels vertically does the gradient sequence complete over (+infinity for horizontal gradients!)\n        vertRange = (toY - fromY) + ((toX - fromX) * (toX - fromX)) / (toY - fromY),\n    // Same for horizontal\n        horzRange = (toX - fromX) + ((toY - fromY) * (toY - fromY)) / (toX - fromX),\n        horzStep = 1 / horzRange;\n\n    for (var y = rect.top; y < rect.bottom; y++, pixIndex += yStride) {\n        var\n        // The position the row starts at in the gradient [0.0 ... 1.0)\n            prop = (rect.left - fromX) / horzRange + (y - fromY) / vertRange;\n\n        for (var x = 0; x < w; x++, pixIndex += CPColorBmp.BYTES_PER_PIXEL) {\n            var\n                propClamped = Math.min(Math.max(prop, 0.0), 1.0),\n                invPropClamped = 1 - propClamped;\n\n            this.data[pixIndex + CPColorBmp.RED_BYTE_OFFSET] = fromColor.r * invPropClamped + toColor.r * propClamped;\n            this.data[pixIndex + CPColorBmp.GREEN_BYTE_OFFSET] = fromColor.g * invPropClamped + toColor.g * propClamped;\n            this.data[pixIndex + CPColorBmp.BLUE_BYTE_OFFSET] = fromColor.b * invPropClamped + toColor.b * propClamped;\n            this.data[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] = fromColor.a * invPropClamped + toColor.a * propClamped;\n\n            prop += horzStep;\n        }\n    }\n};\n\n/**\n * Alpha blend the given gradient onto the pixels in the given rect.\n *\n * @param rect CPRect\n * @param fromX int\n * @param fromY int\n * @param toX int\n * @param toY int\n * @param gradientPoints int[]\n */\nCPColorBmp.prototype.gradientAlpha = function(rect, fromX, fromY, toX, toY, gradientPoints) {\n    var\n        yStride = (this.width - rect.getWidth()) * CPColorBmp.BYTES_PER_PIXEL,\n        pixIndex = this.offsetOfPixel(rect.left, rect.top) | 0,\n        w = (rect.right - rect.left) | 0,\n\n        fromColor = {\n            r: (gradientPoints[0] >> 16) & 0xFF,\n            g: (gradientPoints[0] >> 8) & 0xFF,\n            b: gradientPoints[0] & 0xFF,\n            a: (gradientPoints[0] >> 24) & 0xFF\n        },\n        toColor = {\n            r: (gradientPoints[1] >> 16) & 0xFF,\n            g: (gradientPoints[1] >> 8) & 0xFF,\n            b: gradientPoints[1] & 0xFF,\n            a: (gradientPoints[1] >> 24) & 0xFF\n        },\n\n    // How many pixels vertically does the gradient sequence complete over (+infinity for horizontal gradients!)\n        vertRange = (toY - fromY) + ((toX - fromX) * (toX - fromX)) / (toY - fromY),\n    // Same for horizontal\n        horzRange = (toX - fromX) + ((toY - fromY) * (toY - fromY)) / (toX - fromX),\n        horzStep = 1 / horzRange;\n\n    for (var y = rect.top; y < rect.bottom; y++, pixIndex += yStride) {\n        var\n        // The position the row starts at in the gradient [0.0 ... 1.0)\n            prop = (rect.left - fromX) / horzRange + (y - fromY) / vertRange;\n\n        for (var x = 0; x < w; x++, pixIndex += CPColorBmp.BYTES_PER_PIXEL) {\n            var\n                propClamped = Math.min(Math.max(prop, 0.0), 1.0),\n                invPropClamped = 1 - propClamped,\n\n            // The gradient color to draw\n                r = fromColor.r * invPropClamped + toColor.r * propClamped,\n                g = fromColor.g * invPropClamped + toColor.g * propClamped,\n                b = fromColor.b * invPropClamped + toColor.b * propClamped,\n                a = fromColor.a * invPropClamped + toColor.a * propClamped,\n\n                alpha2 = this.data[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET],\n                newAlpha = (a + alpha2 - a * alpha2 / 255) | 0;\n\n            if (newAlpha > 0) {\n                var\n                    realAlpha = (a * 255 / newAlpha) | 0,\n                    invAlpha = 255 - realAlpha;\n\n                this.data[pixIndex + CPColorBmp.RED_BYTE_OFFSET] =   ((r * realAlpha + this.data[pixIndex + CPColorBmp.RED_BYTE_OFFSET] * invAlpha) / 255) | 0;\n                this.data[pixIndex + CPColorBmp.GREEN_BYTE_OFFSET] = ((g * realAlpha + this.data[pixIndex + CPColorBmp.GREEN_BYTE_OFFSET] * invAlpha) / 255) | 0;\n                this.data[pixIndex + CPColorBmp.BLUE_BYTE_OFFSET] =  ((b * realAlpha + this.data[pixIndex + CPColorBmp.BLUE_BYTE_OFFSET] * invAlpha) / 255) | 0;\n                this.data[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] = newAlpha;\n            }\n\n            prop += horzStep;\n        }\n    }\n};\n\n/**\n * Draw a gradient which begins at fromX, fromY and ends at toX, toY, clipped to the given rect, on top of the\n * pixels in the bitmap.\n *\n * @param {CPRect} rect\n * @param {Object[]} gradientPoints Array with gradient colors (ARGB integers)\n * @param {number} fromX\n * @param {number} fromY\n * @param {number} toX\n * @param {number} toY\n * @param {boolean} replace - True if the contents of the destination should be ignored (opaque blend)\n */\nCPColorBmp.prototype.gradient = function(rect, fromX, fromY, toX, toY, gradientPoints, replace) {\n    rect = this.getBounds().clipTo(rect);\n\n    // Degenerate case\n    if (fromX == toX && fromY == toY) {\n        return;\n    }\n\n    // Opaque blend if possible\n    if (replace || gradientPoints[0] >>> 24 == 255 && gradientPoints[1] >>> 24 == 255) {\n        if (fromX == toX) {\n            this.gradientVertReplace(rect, fromY, toY, gradientPoints);\n        } else if (fromY == toY) {\n            this.gradientHorzReplace(rect, fromX, toX, gradientPoints);\n        } else {\n            this.gradientReplace(rect, fromX, fromY, toX, toY, gradientPoints);\n        }\n    } else {\n        this.gradientAlpha(rect, fromX, fromY, toX, toY, gradientPoints);\n    }\n};\n\n/**\n * @param {CPRect} rect\n */\nCPColorBmp.prototype.fillWithColorNoise = function(rect) {\n    rect = this.getBounds().clipTo(rect);\n\n    var\n        value,\n        yStride = (this.width - rect.getWidth()) * CPColorBmp.BYTES_PER_PIXEL,\n\n        pixIndex = this.offsetOfPixel(rect.left, rect.top);\n\n    for (var y = rect.top; y < rect.bottom; y++, pixIndex += yStride) {\n        for (var x = rect.left; x < rect.right; x++, pixIndex += CPColorBmp.BYTES_PER_PIXEL) {\n            value = (Math.random() * 0x1000000) | 0;\n\n            this.data[pixIndex + CPColorBmp.RED_BYTE_OFFSET] = (value >> 16) & 0xFF;\n            this.data[pixIndex + CPColorBmp.GREEN_BYTE_OFFSET] = (value >> 8) & 0xFF;\n            this.data[pixIndex + CPColorBmp.BLUE_BYTE_OFFSET] = value & 0xFF;\n            this.data[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] = 0xFF;\n        }\n    }\n};\n\n/**\n * @param {CPRect} rect\n */\nCPColorBmp.prototype.invert = function(rect) {\n    rect = this.getBounds().clipTo(rect);\n\n    var\n        yStride = (this.width - rect.getWidth()) * CPColorBmp.BYTES_PER_PIXEL,\n\n        pixIndex = this.offsetOfPixel(rect.left, rect.top);\n\n    for (var y = rect.top; y < rect.bottom; y++, pixIndex += yStride) {\n        for (var x = rect.left; x < rect.right; x++, pixIndex += CPColorBmp.BYTES_PER_PIXEL) {\n            this.data[pixIndex + CPColorBmp.RED_BYTE_OFFSET] ^= 0xFF;\n            this.data[pixIndex + CPColorBmp.GREEN_BYTE_OFFSET] ^= 0xFF;\n            this.data[pixIndex + CPColorBmp.BLUE_BYTE_OFFSET] ^= 0xFF;\n        }\n    }\n};\n\n/**\n * @param {CPRect} rect\n */\nCPColorBmp.prototype.brightnessToOpacity = function(rect) {\n    rect = this.getBounds().clipTo(rect);\n    const threshold = 250;\n\n    const yStride = (this.width - rect.getWidth()) * CPColorBmp.BYTES_PER_PIXEL;\n    let pixIndex = this.offsetOfPixel(rect.left, rect.top);\n\n    for (let y = rect.top; y < rect.bottom; y++, pixIndex += yStride) {\n        for (let x = rect.left; x < rect.right; x++, pixIndex += CPColorBmp.BYTES_PER_PIXEL) {\n            // 輝度の計算\n            const brightness = (this.data[pixIndex + CPColorBmp.RED_BYTE_OFFSET] +\n                              this.data[pixIndex + CPColorBmp.GREEN_BYTE_OFFSET] +\n                              this.data[pixIndex + CPColorBmp.BLUE_BYTE_OFFSET]) / 3;\n\n            // 元のアルファ値を取得\n            const originalAlpha = this.data[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] / 255;\n\n            // しきい値を基に透明度を設定\n            let newAlpha;\n            if (brightness > threshold) {\n                newAlpha = 0; // 完全に透明\n            } else {\n                // 線形にマッピングして中間の透明度を計算 (輝度が高いほど透明に近づく)\n                newAlpha = Math.round((1 - brightness / threshold) * 255);\n            } \n\n            // 元のアルファ値を考慮して透明度を更新\n            this.data[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] = Math.round(newAlpha * originalAlpha);\n\n            // 不透明な線画の明度を0に\n            if (newAlpha > 0) { // 不透明な部分の明度を0に\n                this.data[pixIndex + CPColorBmp.RED_BYTE_OFFSET] = 0;\n                this.data[pixIndex + CPColorBmp.GREEN_BYTE_OFFSET] = 0;\n                this.data[pixIndex + CPColorBmp.BLUE_BYTE_OFFSET] = 0;\n            }\n        }\n    }\n};\n/**\n * Get a rectangle that encloses any non-transparent pixels in the bitmap within the given initialBounds (or an empty\n * rect if the pixels inside the given bounds are 100% transparent).\n *\n * @param {CPRect} initialBounds - The rect to search within (pass getBounds() to search the whole bitmap)\n *\n * @returns {CPRect}\n */\nCPColorBmp.prototype.getNonTransparentBounds = function(initialBounds) {\n    var\n        pixIndex,\n        result = initialBounds.clone(),\n        x, y,\n        alphaOred,\n        yStride;\n\n    // Find the first non-transparent row\n    yStride = (this.width - result.getWidth()) * CPColorBmp.BYTES_PER_PIXEL;\n    pixIndex = this.offsetOfPixel(result.left, result.top) + CPColorBmp.ALPHA_BYTE_OFFSET;\n\n    for (y = result.top; y < result.bottom; y++, pixIndex += yStride) {\n        alphaOred = 0x00;\n\n        for (x = result.left; x < result.right; x++, pixIndex += CPColorBmp.BYTES_PER_PIXEL) {\n            alphaOred |= this.data[pixIndex];\n        }\n\n        // Only check once per row in order to reduce branching in the inner loop\n        if (alphaOred != 0x00) {\n            break;\n        }\n    }\n\n    result.top = y;\n\n    if (result.top == result.bottom) {\n        // Rect is empty, no opaque pixels in the initialBounds\n        return result;\n    }\n\n    // Now the last non-transparent row\n    pixIndex = this.offsetOfPixel(result.right - 1, result.bottom - 1) + CPColorBmp.ALPHA_BYTE_OFFSET;\n    for (y = result.bottom - 1; y >= result.top; y--, pixIndex -= yStride) {\n        alphaOred = 0x00;\n\n        for (x = result.right - 1; x >= result.left; x--, pixIndex -= CPColorBmp.BYTES_PER_PIXEL) {\n            alphaOred |= this.data[pixIndex];\n        }\n\n        // Only check once per row in order to reduce branching in the inner loop\n        if (alphaOred != 0x00) {\n            break;\n        }\n    }\n\n    result.bottom = y + 1; /* +1 since the bottom/right edges of the rect are exclusive */\n\n    // Now columns from the left\n    yStride = CPColorBmp.BYTES_PER_PIXEL * this.width;\n    for (x = result.left; x < result.right; x++) {\n        pixIndex = this.offsetOfPixel(x, result.top) + CPColorBmp.ALPHA_BYTE_OFFSET;\n        alphaOred = 0x00;\n\n        for (y = result.top; y < result.bottom; y++, pixIndex += yStride) {\n            alphaOred |= this.data[pixIndex];\n        }\n\n        if (alphaOred != 0x00) {\n            break;\n        }\n    }\n\n    result.left = x;\n\n    // And columns from the right\n    for (x = result.right - 1; x >= result.left; x--) {\n        pixIndex = this.offsetOfPixel(x, result.top) + CPColorBmp.ALPHA_BYTE_OFFSET;\n        alphaOred = 0x00;\n\n        for (y = result.top; y < result.bottom; y++, pixIndex += yStride) {\n            alphaOred |= this.data[pixIndex];\n        }\n\n        if (alphaOred != 0x00) {\n            break;\n        }\n    }\n\n    result.right = x + 1;\n\n    return result;\n};\n\n/**\n * Returns a new canvas with a rotated version of the given canvas.\n *\n * @param {HTMLCanvasElement} canvas\n * @param {number} rotation - [0..3], selects a multiple of 90 degrees of clockwise rotation to be applied.\n */\nexport function getRotatedCanvas(canvas, rotation) {\n    rotation = rotation % 4;\n\n    if (rotation == 0) {\n        return canvas;\n    }\n\n    let\n        rotatedCanvas = createCanvas(0, 0),\n        rotatedCanvasContext = rotatedCanvas.getContext(\"2d\");\n\n    if (rotation % 2 == 0) {\n        rotatedCanvas.width = canvas.width;\n        rotatedCanvas.height = canvas.height;\n    } else {\n        //noinspection JSSuspiciousNameCombination\n        rotatedCanvas.width = canvas.height;\n        //noinspection JSSuspiciousNameCombination\n        rotatedCanvas.height = canvas.width;\n    }\n\n    switch (rotation) {\n        case 1:\n            // 90 degree clockwise:\n            rotatedCanvasContext.rotate(Math.PI / 2);\n            rotatedCanvasContext.drawImage(canvas, 0, -canvas.height);\n            break;\n        case 2:\n            rotatedCanvasContext.rotate(Math.PI);\n            rotatedCanvasContext.drawImage(canvas, -canvas.width, -canvas.height);\n            break;\n        case 3:\n            // 90 degree counter-clockwise:\n            rotatedCanvasContext.rotate(-Math.PI / 2);\n            rotatedCanvasContext.drawImage(canvas, -canvas.width, 0);\n            break;\n        case 0:\n        default:\n            return canvas;\n    }\n\n    return rotatedCanvas;\n}\n\nfunction decodeBase64PNGDataURL(url) {\n    if (typeof url !== \"string\" || !url.match(/^data:image\\/png;base64,/i)) {\n        return false;\n    }\n\n    return window.atob(url.substring(\"data:image\\/png;base64,\".length));\n}\n\n/**\n * Get the image as Canvas.\n *\n * Rotation is [0..3] and selects a multiple of 90 degrees of clockwise rotation to be applied, or 0 to leave\n * unrotated.\n *\n * @returns {HTMLCanvasElement}\n */\nCPColorBmp.prototype.getAsCanvas = function(rotation) {\n    var\n        canvas = createCanvas(this.imageData.width, this.imageData.height),\n        canvasContext = canvas.getContext(\"2d\");\n\n    canvasContext.putImageData(this.imageData, 0, 0);\n\n    // Rotate it if needed\n    return getRotatedCanvas(canvas, rotation || 0);\n};\n\n/**\n * Get the image as a PNG image.\n *\n * Rotation is [0..3] and selects a multiple of 90 degrees of clockwise rotation to be applied, or 0 to leave\n * unrotated.\n *\n * @returns {string} - \"Binary string\" representation of the PNG file\n */\nCPColorBmp.prototype.getAsPNG = function(rotation) {\n    let\n        canvas = this.getAsCanvas(rotation);\n\n    return decodeBase64PNGDataURL(canvas.toDataURL('image/png'));\n};\n\n\n/**\n * Get the image as a PNG image.\n *\n * Rotation is [0..3] and selects a multiple of 90 degrees of clockwise rotation to be applied, or 0 to leave\n * unrotated.\n *\n * @returns {Buffer}\n */\nCPColorBmp.prototype.getAsPNGBuffer = function(rotation) {\n    let\n        canvas = this.getAsCanvas(rotation);\n\n    // API provided by node-canvas for running on Node (browsers don't support this)\n    return canvas.toBuffer('image/png');\n};\n\n/**\n * Returns true if any of the pixels in the given rectangle are not opaque.\n *\n * @param {CPRect} rect\n * @returns {boolean}\n */\nCPColorBmp.prototype.hasAlphaInRect = function(rect) {\n    rect = this.getBounds().clipTo(rect);\n\n    var\n        yStride = (this.width - rect.getWidth()) * CPColorBmp.BYTES_PER_PIXEL,\n        pixIndex = this.offsetOfPixel(rect.left, rect.top) + CPColorBmp.ALPHA_BYTE_OFFSET;\n\n    for (var y = rect.top; y < rect.bottom; y++, pixIndex += yStride) {\n        var\n            alphaAnded = 0xFF;\n\n        for (var x = rect.left; x < rect.right; x++, pixIndex += CPColorBmp.BYTES_PER_PIXEL) {\n            alphaAnded &= this.data[pixIndex];\n        }\n\n        // Only check once per row in order to reduce branching in the inner loop\n        if (alphaAnded != 0xFF) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\n/**\n * Returns true if there are any transparent pixels in this image.\n * \n * @returns {boolean}\n */\nCPColorBmp.prototype.hasAlpha = function() {\n    return this.hasAlphaInRect(this.getBounds());\n};\n\n/**\n * Create from a loaded HTML Image object\n *\n * @param {HTMLImageElement} image\n */\nCPColorBmp.createFromImage = function(image) {\n    var\n        imageCanvas = createCanvas(image.width, image.height),\n        imageContext = imageCanvas.getContext(\"2d\");\n\n    imageContext.globalCompositeOperation = \"copy\";\n    imageContext.drawImage(image, 0, 0);\n\n    return new CPColorBmp(imageContext.getImageData(0, 0, image.width, image.height));\n};\n\n/**\n * Are all the pixels in this image identical to those of that?\n *\n * @param {CPColorBmp} that\n */\nCPColorBmp.prototype.equals = function(that) {\n    if (this.width != that.width || this.height != that.height) {\n        return false;\n    }\n\t\n\tfor (let pixIndex = 0; pixIndex < this.data.length; pixIndex += CPColorBmp.BYTES_PER_PIXEL) {\n\t\t// Fully transparent pixels don't need their color channels compared\n\t\tif (this.data[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] != 0 || that.data[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] != 0) {\n\t\t\tif (this.data[pixIndex] != that.data[pixIndex]\n                || this.data[pixIndex + 1] != that.data[pixIndex + 1]\n                || this.data[pixIndex + 2] != that.data[pixIndex + 2]\n                || this.data[pixIndex + 3] != that.data[pixIndex + 3]) {\n                return false;\n            }\n\t\t}\n\t}\n    \n    return true;\n};","/*\r\n    ChickenPaint\r\n    \r\n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\r\n    by Nicholas Sherlock / Chicken Smoothie.\r\n    \r\n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\r\n\r\n    ChickenPaint is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    ChickenPaint is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport CPRect from \"../util/CPRect.js\";\r\n\r\n/**\r\n * \r\n * @param width\r\n * @param height\r\n * @constructor\r\n */\r\nexport default function CPBitmap(width, height) {\r\n    // Width and height forced to integers\r\n    this.width = width | 0;\r\n    this.height = height | 0;\r\n}\r\n\r\nCPBitmap.prototype.getBounds = function() {\r\n    return new CPRect(0, 0, this.width, this.height);\r\n};\r\n\r\nCPBitmap.prototype.isInside = function(x, y) {\r\n    return x >= 0 && y >= 0 && x < this.width && y < this.height;\r\n};","/*\n    ChickenPaint\n    \n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\n    by Nicholas Sherlock / Chicken Smoothie.\n    \n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n    ChickenPaint is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ChickenPaint is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nexport default function CPRect(left, top, right, bottom) {\n    /*\n    if (left === undefined || top === undefined || right === undefined || bottom === undefined) {\n        throw \"Bad rect\";\n    }\n    \n    if (~~left !== left || ~~top !== top || ~~right !== right || ~~bottom !== bottom) {\n        throw \"Bad rect\";\n    }\n    */\n    \n    this.left = left;\n    this.top = top;\n    this.right = right;\n    this.bottom = bottom;\n}\n\nCPRect.prototype.makeEmpty = function() {\n    this.left = 0;\n    this.top = 0;\n    this.right = 0;\n    this.bottom = 0;\n};\n\nCPRect.prototype.union = function(that) {\n    if (this.isEmpty()) {\n        this.set(that);\n    } else if (!that.isEmpty()) {\n        this.left = Math.min(this.left, that.left);\n        this.top = Math.min(this.top, that.top);\n        this.right = Math.max(this.right, that.right);\n        this.bottom = Math.max(this.bottom, that.bottom);\n    }\n};\n\nCPRect.prototype.getUnion = function(that) {\n    var\n        result = this.clone();\n\n    result.union(that);\n\n    return result;\n};\n\n/**\n * Get the intersection (possibly empty) of this rectangle and that.\n *\n * @param {CPRect} that\n * @returns {CPRect}\n */\nCPRect.prototype.getIntersection = function(that) {\n    return new CPRect(\n        Math.max(this.left, that.left),\n        Math.max(this.top, that.top),\n        Math.min(this.right, that.right),\n        Math.min(this.bottom, that.bottom)\n    );\n};\n\n/**\n * Clip this rectangle to fit within `that`.\n * \n * @returns {CPRect} A reference to this rectangle for chaining\n */\nCPRect.prototype.clipTo = function(that) {\n    if (!this.isEmpty()) {\n        if (that.isEmpty()) {\n            this.makeEmpty();\n        } else {\n            this.left = Math.min(Math.max(this.left, that.left), that.right);\n            this.top = Math.min(Math.max(this.top, that.top), that.bottom);\n            this.right = Math.max(Math.min(this.right, that.right), that.left);\n            this.bottom = Math.max(Math.min(this.bottom, that.bottom), that.top);\n        }\n    }\n    \n    return this;\n};\n\nCPRect.prototype.containsPoint = function(p) {\n    return !(p.x < this.left || p.y < this.top || p.x >= this.right || p.y >= this.bottom);\n};\n\nCPRect.prototype.isInside = function(that) {\n    return this.left >= that.left && this.top >= that.top && this.right <= that.right && this.bottom <= that.bottom;\n};\n\n/**\n * Use this rectangle as bounds to clip the placement of the area of srcRect at the position of dstRect inside\n * our bounds.\n *\n * dstRect has its right and bottom set by this operation to match the area that would be copied from the source.\n * srcRect has its coordinates tweaked to match the area that will be copied.\n */\nCPRect.prototype.clipSourceDest = function(srcRect, dstRect) {\n    dstRect.right = dstRect.left + srcRect.getWidth();\n    dstRect.bottom = dstRect.top + srcRect.getHeight();\n\n    if (this.isEmpty() || dstRect.left >= this.right || dstRect.top >= this.bottom || dstRect.right <= this.left || dstRect.bottom <= this.top) {\n        srcRect.makeEmpty();\n        dstRect.makeEmpty();\n    } else {\n        // bottom/right\n        if (dstRect.right > this.right) {\n            srcRect.right -= dstRect.right - this.right;\n            dstRect.right = this.right;\n        }\n    \n        if (dstRect.bottom > this.bottom) {\n            srcRect.bottom -= dstRect.bottom - this.bottom;\n            dstRect.bottom = this.bottom;\n        }\n    \n        // top/left\n        if (dstRect.left < this.left) {\n            srcRect.left += this.left - dstRect.left;\n            dstRect.left = this.left;\n        }\n    \n        if (dstRect.top < this.top) {\n            srcRect.top += this.top - dstRect.top;\n            dstRect.top = this.top;\n        }\n    }\n};\n\nCPRect.prototype.getWidth = function() {\n    return this.right - this.left;\n};\n\nCPRect.prototype.getHeight = function() {\n    return this.bottom - this.top;\n};\n\nCPRect.prototype.getArea = function() {\n    return this.getWidth() * this.getHeight();\n};\n\nCPRect.prototype.isEmpty = function() {\n    return this.right <= this.left || this.bottom <= this.top;\n};\n\n/**\n * Set this rectangle's coordinates to a copy of that ones.\n *\n * @param {CPRect} thatRect\n */\nCPRect.prototype.set = function(thatRect) {\n    this.left = thatRect.left;\n    this.top = thatRect.top;\n    this.right = thatRect.right;\n    this.bottom = thatRect.bottom;\n};\n\n/**\n * Get an independent copy of this rectangle.\n *\n * @returns {CPRect}\n */\nCPRect.prototype.clone = function() {\n    return new CPRect(this.left, this.top, this.right, this.bottom);\n};\n\n/**\n * Move the rectangle by the given offset\n *\n * @param {number} x\n * @param {number} y\n *\n * @returns {CPRect} This rectangle for chaining\n */\nCPRect.prototype.translate = function(x, y) {\n    this.left += x;\n    this.right += x;\n    this.top += y;\n    this.bottom += y;\n\n    return this;\n};\n\nCPRect.prototype.getTranslated = function(x, y) {\n    var\n        result = this.clone();\n\n    result.translate(x, y);\n\n    return result;\n};\n\nCPRect.prototype.moveTo = function(x, y) {\n    this.translate(x - this.left, y - this.top);\n};\n\nCPRect.prototype.equals = function(that) {\n    return this.left == that.left && this.right == that.right && this.top == that.top && this.bottom == that.bottom;\n};\n\n/**\n * Add h pixels to both the left and right sides of the rectangle, and v pixels to both the top and bottom sides.\n *  \n * @param h\n * @param v\n */\nCPRect.prototype.grow = function(h, v) {\n    // TODO checks for rectangles with zero-extent\n    this.left -= h;\n    this.right += h;\n    this.top -= v;\n    this.bottom += v;\n};\n\nCPRect.prototype.toString = function() {\n    return \"(\" + this.left + \",\" + this.top + \",\" + this.right + \",\" + this.bottom + \")\";\n};\n\n/**\n * Convert the rectangle into an array of points of the corners of the rectangle (clockwise starting from the top left\n * point).\n */\nCPRect.prototype.toPoints = function() {\n    return [\n        {x: this.left, y: this.top},\n        {x: this.right, y: this.top},\n        {x: this.right, y: this.bottom},\n        {x: this.left, y: this.bottom}\n    ];\n};\n\n/**\n * Round the rectangle coordinates to the nearest integer.\n *\n * @returns {CPRect} This rectangle for chaining\n */\nCPRect.prototype.roundNearest = function() {\n    this.left = Math.round(this.left);\n    this.top = Math.round(this.top);\n    this.right = Math.round(this.right);\n    this.bottom = Math.round(this.bottom);\n\n    return this;\n};\n\n/**\n * Round the rectangle coordinates to integers so that the old rectangle is contained by the new one.\n *\n * @returns {CPRect} This rectangle for chaining\n */\nCPRect.prototype.roundContain = function() {\n    this.left = Math.floor(this.left);\n    this.top = Math.floor(this.top);\n    this.right = Math.ceil(this.right);\n    this.bottom = Math.ceil(this.bottom);\n\n    return this;\n};\n\n/**\n * Create an AABB CPRect which encloses the given array of points.\n *\n * @param {{x: number, y: number}[]} points\n *\n * @returns {CPRect}\n */\nCPRect.createBoundingBox = function(points) {\n    if (points.length === 0) {\n        return new CPRect(0, 0, 0, 0);\n    }\n    \n    let\n        result = new CPRect(points[0].x, points[0].y, points[0].x, points[0].y);\n\n    for (let i = 1; i < points.length; i++) {\n        result.left = Math.min(result.left, points[i].x);\n        result.top = Math.min(result.top, points[i].y);\n        result.right = Math.max(result.right, points[i].x);\n        result.bottom = Math.max(result.bottom, points[i].y);\n    }\n\n    return result;\n};\n\n/**\n * Subtract that rectangle from this one and return an array of CPRects to represent the resulting area (possibly\n * empty).\n *\n * @param {CPRect} that\n * @returns {CPRect[]}\n */\nCPRect.prototype.subtract = function(that) {\n    return CPRect.subtract(this, that);\n};\n\n/**\n * Subtract the second rectangle or array of rectangles from the first one, and return an array of CPRects to represent\n * the resulting area (possibly empty).\n *\n * @param {(CPRect|CPRect[])} rectsA\n * @param {(CPRect|CPRect[])} rectsB\n * @returns {CPRect[]}\n */\nCPRect.subtract = function(rectsA, rectsB) {\n    if (rectsA instanceof CPRect) {\n        rectsA = [rectsA];\n    }\n    if (rectsB instanceof CPRect) {\n        rectsB = [rectsB];\n    }\n\n    let\n        result = rectsA.slice(0);\n\n    for (let i = 0; i < rectsB.length; i++) {\n        // Don't re-examine any new rectangles we push onto the result, since we know they don't intersect this rectB:\n        let\n            rectB = rectsB[i],\n            resultLength = result.length;\n\n        for (let j = 0; j < resultLength; j++) {\n            let\n                rectA = result[j];\n\n            if (!rectA) {\n                continue;\n            }\n\n            let\n                intersection = rectA.getIntersection(rectB);\n\n            if (!intersection.isEmpty()) {\n                let\n                    newRects = [];\n\n                if (rectA.top < rectB.top) {\n                    newRects.push(new CPRect(rectA.left, rectA.top, rectA.right, intersection.top));\n                }\n                if (rectA.bottom > rectB.bottom) {\n                    newRects.push(new CPRect(rectA.left, intersection.bottom, rectA.right, rectA.bottom));\n                }\n                if (rectA.left < rectB.left) {\n                    newRects.push(new CPRect(rectA.left, intersection.top, intersection.left, intersection.bottom));\n                }\n                if (rectA.right > rectB.right) {\n                    newRects.push(new CPRect(intersection.right, intersection.top, rectA.right, intersection.bottom));\n                }\n\n                newRects = newRects.filter(rect => !rect.isEmpty());\n\n                // Replace the original rectangle in the array with the new fragments\n                if (newRects.length > 0) {\n                    result[j] = newRects[0];\n\n                    for (let k = 1; k < newRects.length; k++) {\n                        result.push(newRects[k]);\n                    }\n                } else {\n                    result[j] = null;\n                }\n            }\n        }\n    }\n\n    return result.filter(rect => rect != null);\n};\n\n/**\n * Create a union of the given rectangles, and return an array of non-overlapping CPRects to represent\n * the resulting shape (possibly empty).\n *\n * @param {(CPRect|CPRect[])} rects\n * @returns {CPRect[]}\n */\nCPRect.union = function(rects) {\n    let\n        result;\n    \n\tif (rects instanceof CPRect) {\n\t\tresult = [rects];\n\t} else {\n\t    result = rects.slice(0); // Clone to avoid damaging the original array\n\t\t\n\t\tfor (let i = 0; i < result.length; i++) {\n\t\t\t// Intersect this rectangle with all the others\n\t\t\tlet\n\t\t\t\trectA = result[i],\n\t\t\t\tresultLength = result.length;\n\t\t\t\n\t\t\tif (!rectA) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\t// Don't re-examine any new rectangles we push onto the result\n\t\t\tfor (let j = i + 1; j < resultLength; j++) {\n\t\t\t\tlet\n\t\t\t\t\trectB = result[j];\n\t\t\t\t\n\t\t\t\tif (!rectB) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlet\n\t\t\t\t\tintersection = rectA.getIntersection(rectB);\n\t\t\t\t\n\t\t\t\tif (!intersection.isEmpty()) {\n                    /* We need to eliminate the overlap between these rectangles. Subtract rectA from rectB and leave\n                     * rectA alone.\n                     */\n\t\t\t\t\t\n\t\t\t\t\tlet\n\t\t\t\t\t\tnewRects = CPRect.subtract(rectB, rectA);\n\t\t\t\t\t\n\t\t\t\t\t// Replace rectB with one of the fragments\n\t\t\t\t\tresult[j] = newRects[0];\n\t\t\t\t\t\n\t\t\t\t\t// And add the rest of the fragments to the end\n\t\t\t\t\tfor (let k = 1; k < newRects.length; k++) {\n\t\t\t\t\t\tresult.push(newRects[k]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result.filter(rect => rect && !rect.isEmpty());\n};\n\n/* \n * Chrome is initially eager to optimize CPRect and users assuming that all the fields are SMIs, then later on decides\n * that they should be tagged numbers after all. This causes all the blending operation functions to be reoptimized\n * a couple of times. \n * \n * Avoid that mess by starting things off with floats in the members.  \n */\nif (typeof window == \"object\") {\n    window.cpRectGarbage = new CPRect(1.5, 2.5, 3.5, 4.5);\n}","/*\n\tChickenPaint\n\t\n\tChickenPaint is a translation of ChibiPaint from Java to JavaScript\n\tby Nicholas Sherlock / Chicken Smoothie.\n\t\n\tChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\t\n\tChickenPaint is free software: you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation, either version 3 of the License, or\n\t(at your option) any later version.\n\t\n\tChickenPaint is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\tGNU General Public License for more details.\n\t\n\tYou should have received a copy of the GNU General Public License\n\talong with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nexport function createCanvas(width, height) {\n\tvar\n\t\tcanvas = document.createElement(\"canvas\");\n\t\n\tcanvas.width = width;\n\tcanvas.height = height;\n\t\n\treturn canvas;\n}\n\nexport function createImageData(width, height) {\n\t// return new ImageData(this.width, this.height); // Doesn't work on old IE\n\tvar\n\t\tcanvas = document.createElement(\"canvas\"),\n\t\tcontext = canvas.getContext(\"2d\");\n\t\n\treturn context.createImageData(width, height);\n}","/*\r\n    ChickenPaint\r\n    \r\n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\r\n    by Nicholas Sherlock / Chicken Smoothie.\r\n    \r\n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\r\n\r\n    ChickenPaint is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    ChickenPaint is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport CPLayerGroup from \"./CPLayerGroup.js\";\r\nimport CPBlend from './CPBlend.js';\r\nimport CPGreyBmp from \"./CPGreyBmp.js\";\r\nimport CPRect from \"../util/CPRect.js\";\r\n\r\n/**\r\n * @param {String} name\r\n *\r\n * @constructor\r\n */\r\nexport default function CPLayer(name) {\r\n\t/**\r\n     *\r\n     * @type {String}\r\n     */\r\n    this.name = name || \"\";\r\n\r\n\t/**\r\n     * The parent of this layer, if this node is in a layer group.\r\n     *\r\n     * @type {?CPLayerGroup}\r\n     */\r\n    this.parent = null;\r\n    \r\n    /**\r\n     * True if drawing operations on the image of this layer should not change the alpha component of the layer.\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    this.lockAlpha = false;\r\n    \r\n\t/**\r\n     * The opacity of this layer (0 = transparent, 100 = opaque)\r\n     *\r\n     * @type {number}\r\n     */\r\n    this.alpha = 100;\r\n\r\n\t/**\r\n     * True if this layer and its children should be drawn.\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    this.visible = true;\r\n\r\n\t/**\r\n     * One of the CMBlend.LM_* constants.\r\n     *\r\n     * @type {number}\r\n     */\r\n    this.blendMode = CPBlend.LM_NORMAL;\r\n\t\r\n\t/**\r\n     * The layer mask (if present)\r\n     * \r\n     * @type {?CPGreyBmp}\r\n     */\r\n    this.mask = null;\r\n\r\n\t/**\r\n     * True if transformations applied to the layer should also be applied to the mask (and vice versa)\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    this.maskLinked = true;\r\n\t\r\n\t/**\r\n     * True if the mask should be applied (if present)\r\n     *\r\n\t * @type {boolean}\r\n\t */\r\n\tthis.maskVisible = true;\r\n\r\n    /**\r\n     * The thumbnail of the mask (if a mask is present and the thumb has been built)\r\n     * @type {?CPGreyBmp}\r\n     */\r\n    this.maskThumbnail = null;\r\n\r\n\t/**\r\n     * True if this layer should use CPBlend.LM_MULTIPLY instead of CPBlend.LM_MULTIPLY2\r\n\t * @type {boolean}\r\n\t */\r\n\tthis.useLegacyMultiply = false;\r\n}\r\n\r\n/**\r\n *\r\n * @param {CPLayer} layer\r\n */\r\nCPLayer.prototype.copyFrom = function(layer) {\r\n    this.name = layer.name;\r\n    this.blendMode = layer.blendMode;\r\n\tthis.useLegacyMultiply = layer.useLegacyMultiply;\r\n\tthis.alpha = layer.alpha;\r\n    this.visible = layer.visible;\r\n    this.parent = layer.parent;\r\n    this.lockAlpha = layer.lockAlpha;\r\n\r\n    if (!layer.mask) {\r\n        this.mask = null;\r\n    } else if (this.mask) {\r\n        this.mask.copyPixelsFrom(layer.mask);\r\n    } else {\r\n        this.mask = layer.mask.clone();\r\n    }\r\n    this.maskLinked = layer.maskLinked;\r\n    this.maskVisible = layer.maskVisible;\r\n\r\n    if (!layer.maskThumbnail) {\r\n        this.maskThumbnail = null;\r\n    } else if (this.maskThumbnail) {\r\n        this.maskThumbnail.copyPixelsFrom(layer.maskThumbnail);\r\n    } else {\r\n        this.maskThumbnail = layer.maskThumbnail.clone();\r\n    }\r\n};\r\n\r\nCPLayer.prototype.setMask = function(mask) {\r\n    this.mask = mask;\r\n    if (!mask) {\r\n        this.maskThumbnail = null;\r\n    }\r\n};\r\n\r\nCPLayer.prototype.setAlpha = function(alpha) {\r\n    this.alpha = alpha;\r\n};\r\n\r\nCPLayer.prototype.getAlpha = function() {\r\n    return this.alpha;\r\n};\r\n\r\n/**\r\n * Get the alpha of this layer, or zero if this layer is hidden.\r\n * \r\n * @returns {number}\r\n */\r\nCPLayer.prototype.getEffectiveAlpha = function() {\r\n    if (this.visible) {\r\n        return this.alpha;\r\n    }\r\n    return 0;\r\n};\r\n\r\n/**\r\n * Get the mask for this layer, or null if the mask is not present or hidden.\r\n *\r\n * @returns {?CPGreyBmp}\r\n */\r\nCPLayer.prototype.getEffectiveMask = function() {\r\n    if (this.maskVisible) {\r\n        return this.mask;\r\n    }\r\n    return null;\r\n};\r\n\r\nCPLayer.prototype.setName = function(name) {\r\n    this.name = name;\r\n};\r\n\r\nCPLayer.prototype.getName = function() {\r\n    return this.name;\r\n};\r\n\r\nCPLayer.prototype.setBlendMode = function(blendMode) {\r\n    this.blendMode = blendMode;\r\n\r\n    if (blendMode === CPBlend.LM_MULTIPLY) {\r\n        /* If the blend mode is ever set to this legacy one, we'll keep this flag set on the layer so that the\r\n         * user can change to a different blending mode, and still be able to change it back to the legacy one.\r\n         */\r\n        this.useLegacyMultiply = true;\r\n    } else if (blendMode === CPBlend.LM_MULTIPLY2) {\r\n        this.useLegacyMultiply = false;\r\n    }\r\n};\r\n\r\nCPLayer.prototype.getBlendMode = function() {\r\n    return this.blendMode;\r\n};\r\n\r\nCPLayer.prototype.getLockAlpha = function () {\r\n    return this.lockAlpha;\r\n};\r\n\r\nCPLayer.prototype.setLockAlpha = function(value) {\r\n    this.lockAlpha = value;\r\n};\r\n\r\nCPLayer.prototype.setVisible = function(visible) {\r\n    this.visible = visible;\r\n};\r\n\r\nCPLayer.prototype.getVisible = function() {\r\n    return this.visible;\r\n};\r\n\r\nCPLayer.prototype.isVisible = CPLayer.prototype.getVisible;\r\n\r\nCPLayer.prototype.setMaskLinked = function(linked) {\r\n    this.maskLinked = linked;\r\n};\r\n\r\nCPLayer.prototype.getMaskLinked = function() {\r\n    return this.maskLinked;\r\n};\r\n\r\nCPLayer.prototype.setMaskVisible = function(visible) {\r\n\tthis.maskVisible = visible;\r\n};\r\n\r\nCPLayer.prototype.getMaskVisible = function() {\r\n\treturn this.maskVisible;\r\n};\r\n\r\nCPLayer.prototype.getMemoryUsed = function() {\r\n    return 0;\r\n};\r\n\r\nCPLayer.prototype.getDepth = function() {\r\n    if (this.parent == null) {\r\n        return 0;\r\n    }\r\n    return this.parent.getDepth() + 1;\r\n};\r\n\r\nCPLayer.prototype.ancestorsAreVisible = function() {\r\n    return this.parent == null || this.parent.visible && this.parent.ancestorsAreVisible();\r\n};\r\n\r\n/**\r\n * Returns true if this layer has the given group as one of its ancestors.\r\n *\r\n * @param {CPLayerGroup} group\r\n * @returns {boolean}\r\n */\r\nCPLayer.prototype.hasAncestor = function(group) {\r\n    return this.parent == group || this.parent && this.parent.hasAncestor(group);\r\n};\r\n\r\nCPLayer.prototype.clone = function() {\r\n    throw \"Pure virtual CPLayer.clone() call\";\r\n};\r\n\r\n/**\r\n * Get a rectangle that encloses any non-transparent pixels in the layer within the given initialBounds (or an empty\r\n * rect if the pixels inside the given bounds are 100% transparent).\r\n *\r\n * @param {CPRect} initialBounds - The rect to search within\r\n *\r\n * @returns {CPRect}\r\n */\r\nCPLayer.prototype.getNonTransparentBounds = function(initialBounds) {\r\n    return new CPRect(0, 0, 0, 0);\r\n};\r\n\r\n/**\r\n * Recreate the image thumbnail for this layer.\r\n */\r\nCPLayer.prototype.rebuildMaskThumbnail = function() {\r\n    if (this.mask) {\r\n        if (!this.maskThumbnail) {\r\n            var\r\n                scaleDivider = Math.ceil(Math.max(this.mask.width / CPLayer.LAYER_THUMBNAIL_WIDTH, this.mask.height / CPLayer.LAYER_THUMBNAIL_HEIGHT));\r\n\r\n            this.maskThumbnail = new CPGreyBmp(Math.floor(this.mask.width / scaleDivider), Math.floor(this.mask.height / scaleDivider), 8);\r\n        }\r\n\r\n        this.maskThumbnail.createThumbnailFrom(this.mask);\r\n    } else {\r\n        this.maskThumbnail = null;\r\n    }\r\n};\r\n\r\n/**\r\n * Get the mask thumbnail for this layer (or build one if one was not already built). If the layer has no mask, null\r\n * is returned.\r\n *\r\n * @returns {?CPGreyBmp}\r\n */\r\nCPLayer.prototype.getMaskThumbnail = function() {\r\n    if (!this.maskThumbnail && this.mask) {\r\n        this.rebuildMaskThumbnail();\r\n    }\r\n\r\n    return this.maskThumbnail;\r\n};\r\n\r\nCPLayer.LAYER_THUMBNAIL_WIDTH = 80;\r\nCPLayer.LAYER_THUMBNAIL_HEIGHT = 50;\r\n","/*\r\n\tChickenPaint\r\n\r\n\tChickenPaint is a translation of ChibiPaint from Java to JavaScript\r\n\tby Nicholas Sherlock / Chicken Smoothie.\r\n\r\n\tChibiPaint is Copyright (c) 2006-2008 Marc Schefer\r\n\r\n\tChickenPaint is free software: you can redistribute it and/or modify\r\n\tit under the terms of the GNU General Public License as published by\r\n\tthe Free Software Foundation, either version 3 of the License, or\r\n\t(at your option) any later version.\r\n\r\n\tChickenPaint is distributed in the hope that it will be useful,\r\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n\tGNU General Public License for more details.\r\n\r\n\tYou should have received a copy of the GNU General Public License\r\n\talong with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport CPLayer from './CPLayer.js';\r\nimport CPRect from \"../util/CPRect.js\";\r\n\r\n/**\r\n *\r\n * @param {string} name\r\n * @param {number} blendMode\r\n * @constructor\r\n */\r\nexport default function CPLayerGroup(name, blendMode) {\r\n\tCPLayer.call(this, name);\r\n\r\n\t/**\r\n\t * @type {CPLayer[]}\r\n\t */\r\n\tthis.layers = [];\r\n\tthis.expanded = true;\r\n\tthis.blendMode = blendMode;\r\n}\r\n\r\nCPLayerGroup.prototype = Object.create(CPLayer.prototype);\r\nCPLayerGroup.prototype.constructor = CPLayerGroup;\r\n\r\n/**\r\n * Returns an array of layers in this group in display order, excluding this group itself.\r\n *\r\n * @param {boolean} respectCollapse - Set to true to omit the children of collapsed groups\r\n * @param {CPLayer[]} list\r\n * @returns {CPLayer[]}\r\n */\r\nCPLayerGroup.prototype.getLinearizedLayerList = function(respectCollapse, list) {\r\n\tlist = list || [];\r\n\r\n\tfor (let layer of this.layers) {\r\n\t\tif (layer instanceof CPLayerGroup && (layer.expanded || !respectCollapse)) {\r\n\t\t\tlayer.getLinearizedLayerList(respectCollapse, list);\r\n\t\t}\r\n\t\tlist.push(layer);\r\n\t}\r\n\r\n\treturn list;\r\n};\r\n\r\nCPLayerGroup.prototype.clearLayers = function() {\r\n\tthis.layers = [];\r\n};\r\n\r\nCPLayerGroup.prototype.addLayer = function(layer) {\r\n\tlayer.parent = this;\r\n\tthis.layers.push(layer);\r\n};\r\n\r\nCPLayerGroup.prototype.insertLayer = function(index, layer) {\r\n\tlayer.parent = this;\r\n\tthis.layers.splice(index, 0, layer);\r\n};\r\n\r\nCPLayerGroup.prototype.removeLayer = function(layer) {\r\n\tvar\r\n\t\tindex = this.layers.indexOf(layer);\r\n\r\n\tif (index > -1) {\r\n\t\tthis.layers.splice(index, 1);\r\n\t}\r\n};\r\n\r\nCPLayerGroup.prototype.removeLayerAtIndex = function(index) {\r\n\tvar\r\n\t\tlayer = this.layers[index];\r\n\r\n\tif (layer) {\r\n\t\tthis.layers.splice(index, 1);\r\n\t}\r\n\r\n\treturn layer;\r\n};\r\n\r\nCPLayerGroup.prototype.setLayerAtIndex = function(index, layer) {\r\n\tvar\r\n\t\toldLayer = this.layers[index];\r\n\r\n\tlayer.parent = this;\r\n\tthis.layers[index] = layer;\r\n\r\n\treturn oldLayer;\r\n};\r\n\r\nCPLayerGroup.prototype.setExpanded = function(expanded) {\r\n\tthis.expanded = expanded;\r\n};\r\n\r\nCPLayerGroup.prototype.getExpanded = function() {\r\n\treturn this.expanded;\r\n};\r\n\r\n/**\r\n * Get the index of the given layer in this group, or -1 if the layer is not in the group.\r\n * \r\n * @param {CPLayer} layer\r\n * @returns {number}\r\n */\r\nCPLayerGroup.prototype.indexOf = function(layer) {\r\n\treturn this.layers.indexOf(layer);\r\n};\r\n\r\nfunction sum(a, b) {\r\n\treturn a + b;\r\n}\r\n\r\n/**\r\n * Get an approximation of the number of bytes of memory used by this layer.\r\n *\r\n * @returns {number}\r\n */\r\nCPLayerGroup.prototype.getMemoryUsed = function() {\r\n\treturn this.layers.map(layer => layer.getMemoryUsed()).reduce(sum, 0);\r\n};\r\n\r\nCPLayerGroup.prototype.clone = function() {\r\n\tvar\r\n\t\tresult = new CPLayerGroup(this.name, this.blendMode);\r\n\r\n\tCPLayer.prototype.copyFrom.call(result, this);\r\n\r\n\tresult.expanded = this.expanded;\r\n\tresult.layers = this.layers.map(layer => layer.clone());\r\n\tresult.layers.forEach(layer => layer.parent = result);\r\n\r\n\treturn result;\r\n};\r\n\r\n/**\r\n * Get a rectangle that encloses any non-transparent pixels in the layer within the given initialBounds (or an empty\r\n * rect if the pixels inside the given bounds are 100% transparent).\r\n *\r\n * @param {CPRect} initialBounds - The rect to search within\r\n *\r\n * @returns {CPRect}\r\n */\r\nCPLayerGroup.prototype.getNonTransparentBounds = function(initialBounds) {\r\n\tvar\r\n\t\tnonTransparentRect = new CPRect(0, 0, 0, 0);\r\n\t\r\n\tthis.layers.forEach(layer => nonTransparentRect.union(layer.getNonTransparentBounds(initialBounds)));\r\n\r\n\treturn nonTransparentRect;\r\n};\r\n","// This file is generated, please see codegenerator/BlendGenerator.js!\n\t\nimport CPColorBmp from './CPColorBmp.js';\nimport CPGreyBmp from './CPGreyBmp.js';\nimport CPLayer from './CPLayer.js';\nimport CPRect from '../util/CPRect.js';\n\nexport default function CPBlend() {\n}\n\nconst\n\tBYTES_PER_PIXEL = 4,\n\tALPHA_BYTE_OFFSET = 3,\n\t\n\tsoftLightLUTSquare = new Array(256),\n\tsoftLightLUTSquareRoot = new Array(256);\n\n\n/**\n * Blend the given layer onto the fusion using the multiply blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.multiplyOntoOpaqueFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = color2 - (((layer.data[pixIndex] ^ 0xFF) * color2 * alpha1) / (255 * 255) | 0);\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = color2 - (((layer.data[pixIndex + 1] ^ 0xFF) * color2 * alpha1) / (255 * 255) | 0);\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = color2 - (((layer.data[pixIndex + 2] ^ 0xFF) * color2 * alpha1) / (255 * 255) | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the multiply blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.multiplyOntoOpaqueFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0),\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = color2 - (((layer.data[pixIndex] ^ 0xFF) * color2 * alpha1) / (255 * 255) | 0);\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = color2 - (((layer.data[pixIndex + 1] ^ 0xFF) * color2 * alpha1) / (255 * 255) | 0);\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = color2 - (((layer.data[pixIndex + 2] ^ 0xFF) * color2 * alpha1) / (255 * 255) | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the multiply blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.multiplyOntoTransparentFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t                    newAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\r\n\t\t\t\t                    alpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t                    alpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t                    alphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((color1 * alpha1n2 + color2 * alphan12 + ((color1 * color2 * alpha12) / 255 | 0)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((color1 * alpha1n2 + color2 * alphan12 + ((color1 * color2 * alpha12) / 255 | 0)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((color1 * alpha1n2 + color2 * alphan12 + ((color1 * color2 * alpha12) / 255 | 0)) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the multiply blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.multiplyOntoTransparentFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t                    newAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\r\n\t\t\t\t                    alpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t                    alpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t                    alphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((color1 * alpha1n2 + color2 * alphan12 + ((color1 * color2 * alpha12) / 255 | 0)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((color1 * alpha1n2 + color2 * alphan12 + ((color1 * color2 * alpha12) / 255 | 0)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((color1 * alpha1n2 + color2 * alphan12 + ((color1 * color2 * alpha12) / 255 | 0)) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the multiply blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion pixels must be opaque.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.multiplyOntoOpaqueFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0),\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = color2 - (((layer.data[pixIndex] ^ 0xFF) * color2 * alpha1) / (255 * 255) | 0);\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = color2 - (((layer.data[pixIndex + 1] ^ 0xFF) * color2 * alpha1) / (255 * 255) | 0);\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = color2 - (((layer.data[pixIndex + 2] ^ 0xFF) * color2 * alpha1) / (255 * 255) | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the multiply blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.multiplyOntoOpaqueFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0),\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = color2 - (((layer.data[pixIndex] ^ 0xFF) * color2 * alpha1) / (255 * 255) | 0);\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = color2 - (((layer.data[pixIndex + 1] ^ 0xFF) * color2 * alpha1) / (255 * 255) | 0);\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = color2 - (((layer.data[pixIndex + 2] ^ 0xFF) * color2 * alpha1) / (255 * 255) | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the multiply blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion can contain transparent pixels.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.multiplyOntoTransparentFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t                    newAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\r\n\t\t\t\t                    alpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t                    alpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t                    alphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((color1 * alpha1n2 + color2 * alphan12 + ((color1 * color2 * alpha12) / 255 | 0)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((color1 * alpha1n2 + color2 * alphan12 + ((color1 * color2 * alpha12) / 255 | 0)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((color1 * alpha1n2 + color2 * alphan12 + ((color1 * color2 * alpha12) / 255 | 0)) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the multiply blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.multiplyOntoTransparentFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t                    newAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\r\n\t\t\t\t                    alpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t                    alpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t                    alphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((color1 * alpha1n2 + color2 * alphan12 + ((color1 * color2 * alpha12) / 255 | 0)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((color1 * alpha1n2 + color2 * alphan12 + ((color1 * color2 * alpha12) / 255 | 0)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((color1 * alpha1n2 + color2 * alphan12 + ((color1 * color2 * alpha12) / 255 | 0)) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the multiply blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.multiply2OntoOpaqueFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = color2 - Math.ceil(((layer.data[pixIndex] ^ 0xFF) * color2 * alpha1) / (255 * 255));\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = color2 - Math.ceil(((layer.data[pixIndex + 1] ^ 0xFF) * color2 * alpha1) / (255 * 255));\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = color2 - Math.ceil(((layer.data[pixIndex + 2] ^ 0xFF) * color2 * alpha1) / (255 * 255));\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the multiply blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.multiply2OntoOpaqueFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0),\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = color2 - Math.ceil(((layer.data[pixIndex] ^ 0xFF) * color2 * alpha1) / (255 * 255));\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = color2 - Math.ceil(((layer.data[pixIndex + 1] ^ 0xFF) * color2 * alpha1) / (255 * 255));\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = color2 - Math.ceil(((layer.data[pixIndex + 2] ^ 0xFF) * color2 * alpha1) / (255 * 255));\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the multiply blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.multiply2OntoTransparentFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((color1 * alpha1n2 + color2 * alphan12 + ((color1 * color2 * alpha12) / 255 | 0)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((color1 * alpha1n2 + color2 * alphan12 + ((color1 * color2 * alpha12) / 255 | 0)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((color1 * alpha1n2 + color2 * alphan12 + ((color1 * color2 * alpha12) / 255 | 0)) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the multiply blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.multiply2OntoTransparentFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((color1 * alpha1n2 + color2 * alphan12 + ((color1 * color2 * alpha12) / 255 | 0)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((color1 * alpha1n2 + color2 * alphan12 + ((color1 * color2 * alpha12) / 255 | 0)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((color1 * alpha1n2 + color2 * alphan12 + ((color1 * color2 * alpha12) / 255 | 0)) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the multiply blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion pixels must be opaque.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.multiply2OntoOpaqueFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0),\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = color2 - Math.ceil(((layer.data[pixIndex] ^ 0xFF) * color2 * alpha1) / (255 * 255));\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = color2 - Math.ceil(((layer.data[pixIndex + 1] ^ 0xFF) * color2 * alpha1) / (255 * 255));\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = color2 - Math.ceil(((layer.data[pixIndex + 2] ^ 0xFF) * color2 * alpha1) / (255 * 255));\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the multiply blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.multiply2OntoOpaqueFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0),\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = color2 - Math.ceil(((layer.data[pixIndex] ^ 0xFF) * color2 * alpha1) / (255 * 255));\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = color2 - Math.ceil(((layer.data[pixIndex + 1] ^ 0xFF) * color2 * alpha1) / (255 * 255));\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = color2 - Math.ceil(((layer.data[pixIndex + 2] ^ 0xFF) * color2 * alpha1) / (255 * 255));\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the multiply blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion can contain transparent pixels.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.multiply2OntoTransparentFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((color1 * alpha1n2 + color2 * alphan12 + ((color1 * color2 * alpha12) / 255 | 0)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((color1 * alpha1n2 + color2 * alphan12 + ((color1 * color2 * alpha12) / 255 | 0)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((color1 * alpha1n2 + color2 * alphan12 + ((color1 * color2 * alpha12) / 255 | 0)) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the multiply blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.multiply2OntoTransparentFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((color1 * alpha1n2 + color2 * alphan12 + ((color1 * color2 * alpha12) / 255 | 0)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((color1 * alpha1n2 + color2 * alphan12 + ((color1 * color2 * alpha12) / 255 | 0)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((color1 * alpha1n2 + color2 * alphan12 + ((color1 * color2 * alpha12) / 255 | 0)) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the normal blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.normalOntoOpaqueFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\tcolor1;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tif (alpha1 == 255) {\rfusion.data[pixIndex] = layer.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex + 1] = layer.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 2] = layer.data[pixIndex + 2];\n\t\t\t\t\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\t\tinvAlpha1 = 255 - alpha1;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((color1 * alpha1 + fusion.data[pixIndex] * invAlpha1) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((color1 * alpha1 + fusion.data[pixIndex + 1] * invAlpha1) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((color1 * alpha1 + fusion.data[pixIndex + 2] * invAlpha1) / 255 | 0);\n\t\t\t\t\r\n\t\t\t\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the normal blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.normalOntoOpaqueFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0),\n\t\t\t\tcolor1;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tif (false) {\rfusion.data[pixIndex] = layer.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex + 1] = layer.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 2] = layer.data[pixIndex + 2];\n\t\t\t\t\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\t\tinvAlpha1 = 255 - alpha1;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((color1 * alpha1 + fusion.data[pixIndex] * invAlpha1) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((color1 * alpha1 + fusion.data[pixIndex + 1] * invAlpha1) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((color1 * alpha1 + fusion.data[pixIndex + 2] * invAlpha1) / 255 | 0);\n\t\t\t\t\r\n\t\t\t\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the normal blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.normalOntoTransparentFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\talpha2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\trealAlpha = ((alpha1 * 255) / newAlpha | 0),\r\n\t\t\t\t\t\t\t\t\tinvAlpha = 255 - realAlpha;\rfusion.data[pixIndex] = ((layer.data[pixIndex] * realAlpha + fusion.data[pixIndex] * invAlpha) / 255 | 0);\n\t\t\t\tfusion.data[pixIndex + 1] = ((layer.data[pixIndex + 1] * realAlpha + fusion.data[pixIndex + 1] * invAlpha) / 255 | 0);\n\t\t\t\tfusion.data[pixIndex + 2] = ((layer.data[pixIndex + 2] * realAlpha + fusion.data[pixIndex + 2] * invAlpha) / 255 | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the normal blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.normalOntoTransparentFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0),\n\t\t\t\talpha2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\trealAlpha = ((alpha1 * 255) / newAlpha | 0),\r\n\t\t\t\t\t\t\t\t\tinvAlpha = 255 - realAlpha;\rfusion.data[pixIndex] = ((layer.data[pixIndex] * realAlpha + fusion.data[pixIndex] * invAlpha) / 255 | 0);\n\t\t\t\tfusion.data[pixIndex + 1] = ((layer.data[pixIndex + 1] * realAlpha + fusion.data[pixIndex + 1] * invAlpha) / 255 | 0);\n\t\t\t\tfusion.data[pixIndex + 2] = ((layer.data[pixIndex + 2] * realAlpha + fusion.data[pixIndex + 2] * invAlpha) / 255 | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the normal blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion pixels must be opaque.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.normalOntoOpaqueFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0),\n\t\t\t\tcolor1;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tif (alpha1 == 255) {\rfusion.data[pixIndex] = layer.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex + 1] = layer.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 2] = layer.data[pixIndex + 2];\n\t\t\t\t\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\t\tinvAlpha1 = 255 - alpha1;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((color1 * alpha1 + fusion.data[pixIndex] * invAlpha1) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((color1 * alpha1 + fusion.data[pixIndex + 1] * invAlpha1) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((color1 * alpha1 + fusion.data[pixIndex + 2] * invAlpha1) / 255 | 0);\n\t\t\t\t\r\n\t\t\t\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the normal blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.normalOntoOpaqueFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0),\n\t\t\t\tcolor1;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tif (false) {\rfusion.data[pixIndex] = layer.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex + 1] = layer.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 2] = layer.data[pixIndex + 2];\n\t\t\t\t\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\t\tinvAlpha1 = 255 - alpha1;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((color1 * alpha1 + fusion.data[pixIndex] * invAlpha1) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((color1 * alpha1 + fusion.data[pixIndex + 1] * invAlpha1) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((color1 * alpha1 + fusion.data[pixIndex + 2] * invAlpha1) / 255 | 0);\n\t\t\t\t\r\n\t\t\t\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the normal blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion can contain transparent pixels.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.normalOntoTransparentFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0),\n\t\t\t\talpha2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\trealAlpha = ((alpha1 * 255) / newAlpha | 0),\r\n\t\t\t\t\t\t\t\t\tinvAlpha = 255 - realAlpha;\rfusion.data[pixIndex] = ((layer.data[pixIndex] * realAlpha + fusion.data[pixIndex] * invAlpha) / 255 | 0);\n\t\t\t\tfusion.data[pixIndex + 1] = ((layer.data[pixIndex + 1] * realAlpha + fusion.data[pixIndex + 1] * invAlpha) / 255 | 0);\n\t\t\t\tfusion.data[pixIndex + 2] = ((layer.data[pixIndex + 2] * realAlpha + fusion.data[pixIndex + 2] * invAlpha) / 255 | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the normal blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.normalOntoTransparentFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0),\n\t\t\t\talpha2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\trealAlpha = ((alpha1 * 255) / newAlpha | 0),\r\n\t\t\t\t\t\t\t\t\tinvAlpha = 255 - realAlpha;\rfusion.data[pixIndex] = ((layer.data[pixIndex] * realAlpha + fusion.data[pixIndex] * invAlpha) / 255 | 0);\n\t\t\t\tfusion.data[pixIndex + 1] = ((layer.data[pixIndex + 1] * realAlpha + fusion.data[pixIndex + 1] * invAlpha) / 255 | 0);\n\t\t\t\tfusion.data[pixIndex + 2] = ((layer.data[pixIndex + 2] * realAlpha + fusion.data[pixIndex + 2] * invAlpha) / 255 | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the add blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.addOntoOpaqueFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tfusion.data[pixIndex] = (fusion.data[pixIndex] + alpha1 * layer.data[pixIndex] / 255) | 0;\n\t\t\t\tfusion.data[pixIndex + 1] = (fusion.data[pixIndex + 1] + alpha1 * layer.data[pixIndex + 1] / 255) | 0;\n\t\t\t\tfusion.data[pixIndex + 2] = (fusion.data[pixIndex + 2] + alpha1 * layer.data[pixIndex + 2] / 255) | 0;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the add blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.addOntoOpaqueFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0);\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tfusion.data[pixIndex] = (fusion.data[pixIndex] + alpha1 * layer.data[pixIndex] / 255) | 0;\n\t\t\t\tfusion.data[pixIndex + 1] = (fusion.data[pixIndex + 1] + alpha1 * layer.data[pixIndex + 1] / 255) | 0;\n\t\t\t\tfusion.data[pixIndex + 2] = (fusion.data[pixIndex + 2] + alpha1 * layer.data[pixIndex + 2] / 255) | 0;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the add blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.addOntoTransparentFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\talpha2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// No need to clamp the color to 0...255 since we're writing to a clamped array anyway\rfusion.data[pixIndex] = ((alpha2 * fusion.data[pixIndex] + alpha1 * layer.data[pixIndex]) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + 1] = ((alpha2 * fusion.data[pixIndex + 1] + alpha1 * layer.data[pixIndex + 1]) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + 2] = ((alpha2 * fusion.data[pixIndex + 2] + alpha1 * layer.data[pixIndex + 2]) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the add blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.addOntoTransparentFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0),\n\t\t\t\talpha2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// No need to clamp the color to 0...255 since we're writing to a clamped array anyway\rfusion.data[pixIndex] = ((alpha2 * fusion.data[pixIndex] + alpha1 * layer.data[pixIndex]) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + 1] = ((alpha2 * fusion.data[pixIndex + 1] + alpha1 * layer.data[pixIndex + 1]) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + 2] = ((alpha2 * fusion.data[pixIndex + 2] + alpha1 * layer.data[pixIndex + 2]) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the add blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion pixels must be opaque.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.addOntoOpaqueFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0);\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tfusion.data[pixIndex] = (fusion.data[pixIndex] + alpha1 * layer.data[pixIndex] / 255) | 0;\n\t\t\t\tfusion.data[pixIndex + 1] = (fusion.data[pixIndex + 1] + alpha1 * layer.data[pixIndex + 1] / 255) | 0;\n\t\t\t\tfusion.data[pixIndex + 2] = (fusion.data[pixIndex + 2] + alpha1 * layer.data[pixIndex + 2] / 255) | 0;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the add blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.addOntoOpaqueFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0);\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tfusion.data[pixIndex] = (fusion.data[pixIndex] + alpha1 * layer.data[pixIndex] / 255) | 0;\n\t\t\t\tfusion.data[pixIndex + 1] = (fusion.data[pixIndex + 1] + alpha1 * layer.data[pixIndex + 1] / 255) | 0;\n\t\t\t\tfusion.data[pixIndex + 2] = (fusion.data[pixIndex + 2] + alpha1 * layer.data[pixIndex + 2] / 255) | 0;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the add blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion can contain transparent pixels.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.addOntoTransparentFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0),\n\t\t\t\talpha2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// No need to clamp the color to 0...255 since we're writing to a clamped array anyway\rfusion.data[pixIndex] = ((alpha2 * fusion.data[pixIndex] + alpha1 * layer.data[pixIndex]) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + 1] = ((alpha2 * fusion.data[pixIndex + 1] + alpha1 * layer.data[pixIndex + 1]) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + 2] = ((alpha2 * fusion.data[pixIndex + 2] + alpha1 * layer.data[pixIndex + 2]) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the add blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.addOntoTransparentFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0),\n\t\t\t\talpha2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// No need to clamp the color to 0...255 since we're writing to a clamped array anyway\rfusion.data[pixIndex] = ((alpha2 * fusion.data[pixIndex] + alpha1 * layer.data[pixIndex]) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + 1] = ((alpha2 * fusion.data[pixIndex + 1] + alpha1 * layer.data[pixIndex + 1]) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + 2] = ((alpha2 * fusion.data[pixIndex + 2] + alpha1 * layer.data[pixIndex + 2]) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the subtract blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.subtractOntoOpaqueFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tfusion.data[pixIndex] = (fusion.data[pixIndex] + alpha1 * layer.data[pixIndex] / 255 - alpha1) | 0;\n\t\t\t\tfusion.data[pixIndex + 1] = (fusion.data[pixIndex + 1] + alpha1 * layer.data[pixIndex + 1] / 255 - alpha1) | 0;\n\t\t\t\tfusion.data[pixIndex + 2] = (fusion.data[pixIndex + 2] + alpha1 * layer.data[pixIndex + 2] / 255 - alpha1) | 0;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the subtract blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.subtractOntoOpaqueFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0);\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tfusion.data[pixIndex] = (fusion.data[pixIndex] + alpha1 * layer.data[pixIndex] / 255 - alpha1) | 0;\n\t\t\t\tfusion.data[pixIndex + 1] = (fusion.data[pixIndex + 1] + alpha1 * layer.data[pixIndex + 1] / 255 - alpha1) | 0;\n\t\t\t\tfusion.data[pixIndex + 2] = (fusion.data[pixIndex + 2] + alpha1 * layer.data[pixIndex + 2] / 255 - alpha1) | 0;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the subtract blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.subtractOntoTransparentFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\talpha2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\talpha12 = alpha1 * alpha2;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// No need to clamp the color to 255 since we're writing to a clamped array anyway\rfusion.data[pixIndex] = ((alpha2 * fusion.data[pixIndex] + alpha1 * layer.data[pixIndex] - alpha12) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + 1] = ((alpha2 * fusion.data[pixIndex + 1] + alpha1 * layer.data[pixIndex + 1] - alpha12) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + 2] = ((alpha2 * fusion.data[pixIndex + 2] + alpha1 * layer.data[pixIndex + 2] - alpha12) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the subtract blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.subtractOntoTransparentFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0),\n\t\t\t\talpha2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\talpha12 = alpha1 * alpha2;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// No need to clamp the color to 255 since we're writing to a clamped array anyway\rfusion.data[pixIndex] = ((alpha2 * fusion.data[pixIndex] + alpha1 * layer.data[pixIndex] - alpha12) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + 1] = ((alpha2 * fusion.data[pixIndex + 1] + alpha1 * layer.data[pixIndex + 1] - alpha12) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + 2] = ((alpha2 * fusion.data[pixIndex + 2] + alpha1 * layer.data[pixIndex + 2] - alpha12) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the subtract blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion pixels must be opaque.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.subtractOntoOpaqueFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0);\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tfusion.data[pixIndex] = (fusion.data[pixIndex] + alpha1 * layer.data[pixIndex] / 255 - alpha1) | 0;\n\t\t\t\tfusion.data[pixIndex + 1] = (fusion.data[pixIndex + 1] + alpha1 * layer.data[pixIndex + 1] / 255 - alpha1) | 0;\n\t\t\t\tfusion.data[pixIndex + 2] = (fusion.data[pixIndex + 2] + alpha1 * layer.data[pixIndex + 2] / 255 - alpha1) | 0;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the subtract blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.subtractOntoOpaqueFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0);\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tfusion.data[pixIndex] = (fusion.data[pixIndex] + alpha1 * layer.data[pixIndex] / 255 - alpha1) | 0;\n\t\t\t\tfusion.data[pixIndex + 1] = (fusion.data[pixIndex + 1] + alpha1 * layer.data[pixIndex + 1] / 255 - alpha1) | 0;\n\t\t\t\tfusion.data[pixIndex + 2] = (fusion.data[pixIndex + 2] + alpha1 * layer.data[pixIndex + 2] / 255 - alpha1) | 0;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the subtract blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion can contain transparent pixels.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.subtractOntoTransparentFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0),\n\t\t\t\talpha2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\talpha12 = alpha1 * alpha2;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// No need to clamp the color to 255 since we're writing to a clamped array anyway\rfusion.data[pixIndex] = ((alpha2 * fusion.data[pixIndex] + alpha1 * layer.data[pixIndex] - alpha12) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + 1] = ((alpha2 * fusion.data[pixIndex + 1] + alpha1 * layer.data[pixIndex + 1] - alpha12) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + 2] = ((alpha2 * fusion.data[pixIndex + 2] + alpha1 * layer.data[pixIndex + 2] - alpha12) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the subtract blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.subtractOntoTransparentFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0),\n\t\t\t\talpha2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\talpha12 = alpha1 * alpha2;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// No need to clamp the color to 255 since we're writing to a clamped array anyway\rfusion.data[pixIndex] = ((alpha2 * fusion.data[pixIndex] + alpha1 * layer.data[pixIndex] - alpha12) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + 1] = ((alpha2 * fusion.data[pixIndex + 1] + alpha1 * layer.data[pixIndex + 1] - alpha12) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + 2] = ((alpha2 * fusion.data[pixIndex + 2] + alpha1 * layer.data[pixIndex + 2] - alpha12) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the screen blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.screenOntoOpaqueFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xFF;\rcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = 0xFF ^ (\r\n\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\t(color2 ^ 0xFF) * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ (layer.data[pixIndex] ^ 0xFF) * (color2 ^ 0xFF) * alpha1 / 255\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t/ 255\r\n\t\t\t\t\t\t\t\t);\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = 0xFF ^ (\r\n\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\t(color2 ^ 0xFF) * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ (layer.data[pixIndex + 1] ^ 0xFF) * (color2 ^ 0xFF) * alpha1 / 255\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t/ 255\r\n\t\t\t\t\t\t\t\t);\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = 0xFF ^ (\r\n\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\t(color2 ^ 0xFF) * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ (layer.data[pixIndex + 2] ^ 0xFF) * (color2 ^ 0xFF) * alpha1 / 255\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t/ 255\r\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the screen blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.screenOntoOpaqueFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0),\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xFF;\rcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = 0xFF ^ (\r\n\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\t(color2 ^ 0xFF) * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ (layer.data[pixIndex] ^ 0xFF) * (color2 ^ 0xFF) * alpha1 / 255\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t/ 255\r\n\t\t\t\t\t\t\t\t);\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = 0xFF ^ (\r\n\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\t(color2 ^ 0xFF) * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ (layer.data[pixIndex + 1] ^ 0xFF) * (color2 ^ 0xFF) * alpha1 / 255\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t/ 255\r\n\t\t\t\t\t\t\t\t);\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = 0xFF ^ (\r\n\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\t(color2 ^ 0xFF) * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ (layer.data[pixIndex + 2] ^ 0xFF) * (color2 ^ 0xFF) * alpha1 / 255\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t/ 255\r\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the screen blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.screenOntoTransparentFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = 0xFF ^ (\r\n\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\t(color1 ^ 0xFF) * alpha1n2\r\n\t\t\t\t\t\t\t\t\t\t+ (color2 ^ 0xFF) * alphan12\r\n\t\t\t\t\t\t\t\t\t\t+ (color1 ^ 0xFF) * (color2 ^ 0xFF) * alpha12 / 255\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t/ newAlpha\r\n\t\t\t\t\t\t\t\t);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = 0xFF ^ (\r\n\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\t(color1 ^ 0xFF) * alpha1n2\r\n\t\t\t\t\t\t\t\t\t\t+ (color2 ^ 0xFF) * alphan12\r\n\t\t\t\t\t\t\t\t\t\t+ (color1 ^ 0xFF) * (color2 ^ 0xFF) * alpha12 / 255\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t/ newAlpha\r\n\t\t\t\t\t\t\t\t);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = 0xFF ^ (\r\n\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\t(color1 ^ 0xFF) * alpha1n2\r\n\t\t\t\t\t\t\t\t\t\t+ (color2 ^ 0xFF) * alphan12\r\n\t\t\t\t\t\t\t\t\t\t+ (color1 ^ 0xFF) * (color2 ^ 0xFF) * alpha12 / 255\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t/ newAlpha\r\n\t\t\t\t\t\t\t\t);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the screen blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.screenOntoTransparentFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = 0xFF ^ (\r\n\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\t(color1 ^ 0xFF) * alpha1n2\r\n\t\t\t\t\t\t\t\t\t\t+ (color2 ^ 0xFF) * alphan12\r\n\t\t\t\t\t\t\t\t\t\t+ (color1 ^ 0xFF) * (color2 ^ 0xFF) * alpha12 / 255\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t/ newAlpha\r\n\t\t\t\t\t\t\t\t);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = 0xFF ^ (\r\n\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\t(color1 ^ 0xFF) * alpha1n2\r\n\t\t\t\t\t\t\t\t\t\t+ (color2 ^ 0xFF) * alphan12\r\n\t\t\t\t\t\t\t\t\t\t+ (color1 ^ 0xFF) * (color2 ^ 0xFF) * alpha12 / 255\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t/ newAlpha\r\n\t\t\t\t\t\t\t\t);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = 0xFF ^ (\r\n\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\t(color1 ^ 0xFF) * alpha1n2\r\n\t\t\t\t\t\t\t\t\t\t+ (color2 ^ 0xFF) * alphan12\r\n\t\t\t\t\t\t\t\t\t\t+ (color1 ^ 0xFF) * (color2 ^ 0xFF) * alpha12 / 255\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t/ newAlpha\r\n\t\t\t\t\t\t\t\t);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the screen blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion pixels must be opaque.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.screenOntoOpaqueFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0),\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xFF;\rcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = 0xFF ^ (\r\n\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\t(color2 ^ 0xFF) * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ (layer.data[pixIndex] ^ 0xFF) * (color2 ^ 0xFF) * alpha1 / 255\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t/ 255\r\n\t\t\t\t\t\t\t\t);\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = 0xFF ^ (\r\n\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\t(color2 ^ 0xFF) * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ (layer.data[pixIndex + 1] ^ 0xFF) * (color2 ^ 0xFF) * alpha1 / 255\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t/ 255\r\n\t\t\t\t\t\t\t\t);\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = 0xFF ^ (\r\n\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\t(color2 ^ 0xFF) * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ (layer.data[pixIndex + 2] ^ 0xFF) * (color2 ^ 0xFF) * alpha1 / 255\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t/ 255\r\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the screen blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.screenOntoOpaqueFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0),\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xFF;\rcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = 0xFF ^ (\r\n\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\t(color2 ^ 0xFF) * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ (layer.data[pixIndex] ^ 0xFF) * (color2 ^ 0xFF) * alpha1 / 255\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t/ 255\r\n\t\t\t\t\t\t\t\t);\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = 0xFF ^ (\r\n\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\t(color2 ^ 0xFF) * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ (layer.data[pixIndex + 1] ^ 0xFF) * (color2 ^ 0xFF) * alpha1 / 255\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t/ 255\r\n\t\t\t\t\t\t\t\t);\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = 0xFF ^ (\r\n\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\t(color2 ^ 0xFF) * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ (layer.data[pixIndex + 2] ^ 0xFF) * (color2 ^ 0xFF) * alpha1 / 255\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t/ 255\r\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the screen blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion can contain transparent pixels.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.screenOntoTransparentFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = 0xFF ^ (\r\n\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\t(color1 ^ 0xFF) * alpha1n2\r\n\t\t\t\t\t\t\t\t\t\t+ (color2 ^ 0xFF) * alphan12\r\n\t\t\t\t\t\t\t\t\t\t+ (color1 ^ 0xFF) * (color2 ^ 0xFF) * alpha12 / 255\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t/ newAlpha\r\n\t\t\t\t\t\t\t\t);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = 0xFF ^ (\r\n\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\t(color1 ^ 0xFF) * alpha1n2\r\n\t\t\t\t\t\t\t\t\t\t+ (color2 ^ 0xFF) * alphan12\r\n\t\t\t\t\t\t\t\t\t\t+ (color1 ^ 0xFF) * (color2 ^ 0xFF) * alpha12 / 255\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t/ newAlpha\r\n\t\t\t\t\t\t\t\t);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = 0xFF ^ (\r\n\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\t(color1 ^ 0xFF) * alpha1n2\r\n\t\t\t\t\t\t\t\t\t\t+ (color2 ^ 0xFF) * alphan12\r\n\t\t\t\t\t\t\t\t\t\t+ (color1 ^ 0xFF) * (color2 ^ 0xFF) * alpha12 / 255\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t/ newAlpha\r\n\t\t\t\t\t\t\t\t);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the screen blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.screenOntoTransparentFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = 0xFF ^ (\r\n\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\t(color1 ^ 0xFF) * alpha1n2\r\n\t\t\t\t\t\t\t\t\t\t+ (color2 ^ 0xFF) * alphan12\r\n\t\t\t\t\t\t\t\t\t\t+ (color1 ^ 0xFF) * (color2 ^ 0xFF) * alpha12 / 255\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t/ newAlpha\r\n\t\t\t\t\t\t\t\t);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = 0xFF ^ (\r\n\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\t(color1 ^ 0xFF) * alpha1n2\r\n\t\t\t\t\t\t\t\t\t\t+ (color2 ^ 0xFF) * alphan12\r\n\t\t\t\t\t\t\t\t\t\t+ (color1 ^ 0xFF) * (color2 ^ 0xFF) * alpha12 / 255\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t/ newAlpha\r\n\t\t\t\t\t\t\t\t);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = 0xFF ^ (\r\n\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\t(color1 ^ 0xFF) * alpha1n2\r\n\t\t\t\t\t\t\t\t\t\t+ (color2 ^ 0xFF) * alphan12\r\n\t\t\t\t\t\t\t\t\t\t+ (color1 ^ 0xFF) * (color2 ^ 0xFF) * alpha12 / 255\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t/ newAlpha\r\n\t\t\t\t\t\t\t\t);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the lighten blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.lightenOntoOpaqueFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xFF;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = color2 >= color1 ? color2 : ((color2 * invAlpha1 + color1 * alpha1) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = color2 >= color1 ? color2 : ((color2 * invAlpha1 + color1 * alpha1) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = color2 >= color1 ? color2 : ((color2 * invAlpha1 + color1 * alpha1) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the lighten blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.lightenOntoOpaqueFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0),\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xFF;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = color2 >= color1 ? color2 : ((color2 * invAlpha1 + color1 * alpha1) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = color2 >= color1 ? color2 : ((color2 * invAlpha1 + color1 * alpha1) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = color2 >= color1 ? color2 : ((color2 * invAlpha1 + color1 * alpha1) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the lighten blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.lightenOntoTransparentFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// This alpha is used when color1 > color2\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha2 * (alpha1 ^ 0xFF)) / newAlpha | 0),\r\n\t\t\t\t\t\t\t\t\tinvAlpha12 = alpha12 ^ 0xFF,\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// This alpha is used when color2 > color1\r\n\t\t\t\t\t\t\t\t\talpha21 = ((alpha1 * (alpha2 ^ 0xFF)) / newAlpha | 0),\r\n\t\t\t\t\t\t\t\t\tinvAlpha21 = alpha21 ^ 0xFF;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = (((color2 >= color1) ? (color1 * alpha21 + color2 * invAlpha21) : (color2 * alpha12 + color1 * invAlpha12)) / 255) | 0;\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = (((color2 >= color1) ? (color1 * alpha21 + color2 * invAlpha21) : (color2 * alpha12 + color1 * invAlpha12)) / 255) | 0;\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = (((color2 >= color1) ? (color1 * alpha21 + color2 * invAlpha21) : (color2 * alpha12 + color1 * invAlpha12)) / 255) | 0;\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the lighten blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.lightenOntoTransparentFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// This alpha is used when color1 > color2\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha2 * (alpha1 ^ 0xFF)) / newAlpha | 0),\r\n\t\t\t\t\t\t\t\t\tinvAlpha12 = alpha12 ^ 0xFF,\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// This alpha is used when color2 > color1\r\n\t\t\t\t\t\t\t\t\talpha21 = ((alpha1 * (alpha2 ^ 0xFF)) / newAlpha | 0),\r\n\t\t\t\t\t\t\t\t\tinvAlpha21 = alpha21 ^ 0xFF;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = (((color2 >= color1) ? (color1 * alpha21 + color2 * invAlpha21) : (color2 * alpha12 + color1 * invAlpha12)) / 255) | 0;\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = (((color2 >= color1) ? (color1 * alpha21 + color2 * invAlpha21) : (color2 * alpha12 + color1 * invAlpha12)) / 255) | 0;\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = (((color2 >= color1) ? (color1 * alpha21 + color2 * invAlpha21) : (color2 * alpha12 + color1 * invAlpha12)) / 255) | 0;\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the lighten blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion pixels must be opaque.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.lightenOntoOpaqueFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0),\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xFF;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = color2 >= color1 ? color2 : ((color2 * invAlpha1 + color1 * alpha1) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = color2 >= color1 ? color2 : ((color2 * invAlpha1 + color1 * alpha1) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = color2 >= color1 ? color2 : ((color2 * invAlpha1 + color1 * alpha1) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the lighten blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.lightenOntoOpaqueFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0),\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xFF;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = color2 >= color1 ? color2 : ((color2 * invAlpha1 + color1 * alpha1) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = color2 >= color1 ? color2 : ((color2 * invAlpha1 + color1 * alpha1) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = color2 >= color1 ? color2 : ((color2 * invAlpha1 + color1 * alpha1) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the lighten blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion can contain transparent pixels.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.lightenOntoTransparentFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// This alpha is used when color1 > color2\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha2 * (alpha1 ^ 0xFF)) / newAlpha | 0),\r\n\t\t\t\t\t\t\t\t\tinvAlpha12 = alpha12 ^ 0xFF,\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// This alpha is used when color2 > color1\r\n\t\t\t\t\t\t\t\t\talpha21 = ((alpha1 * (alpha2 ^ 0xFF)) / newAlpha | 0),\r\n\t\t\t\t\t\t\t\t\tinvAlpha21 = alpha21 ^ 0xFF;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = (((color2 >= color1) ? (color1 * alpha21 + color2 * invAlpha21) : (color2 * alpha12 + color1 * invAlpha12)) / 255) | 0;\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = (((color2 >= color1) ? (color1 * alpha21 + color2 * invAlpha21) : (color2 * alpha12 + color1 * invAlpha12)) / 255) | 0;\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = (((color2 >= color1) ? (color1 * alpha21 + color2 * invAlpha21) : (color2 * alpha12 + color1 * invAlpha12)) / 255) | 0;\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the lighten blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.lightenOntoTransparentFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// This alpha is used when color1 > color2\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha2 * (alpha1 ^ 0xFF)) / newAlpha | 0),\r\n\t\t\t\t\t\t\t\t\tinvAlpha12 = alpha12 ^ 0xFF,\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// This alpha is used when color2 > color1\r\n\t\t\t\t\t\t\t\t\talpha21 = ((alpha1 * (alpha2 ^ 0xFF)) / newAlpha | 0),\r\n\t\t\t\t\t\t\t\t\tinvAlpha21 = alpha21 ^ 0xFF;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = (((color2 >= color1) ? (color1 * alpha21 + color2 * invAlpha21) : (color2 * alpha12 + color1 * invAlpha12)) / 255) | 0;\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = (((color2 >= color1) ? (color1 * alpha21 + color2 * invAlpha21) : (color2 * alpha12 + color1 * invAlpha12)) / 255) | 0;\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = (((color2 >= color1) ? (color1 * alpha21 + color2 * invAlpha21) : (color2 * alpha12 + color1 * invAlpha12)) / 255) | 0;\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the darken blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.darkenOntoOpaqueFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xFF;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = color2 >= color1 ? ((color2 * invAlpha1 + color1 * alpha1) / 255 | 0) : color2;\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = color2 >= color1 ? ((color2 * invAlpha1 + color1 * alpha1) / 255 | 0) : color2;\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = color2 >= color1 ? ((color2 * invAlpha1 + color1 * alpha1) / 255 | 0) : color2;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the darken blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.darkenOntoOpaqueFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0),\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xFF;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = color2 >= color1 ? ((color2 * invAlpha1 + color1 * alpha1) / 255 | 0) : color2;\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = color2 >= color1 ? ((color2 * invAlpha1 + color1 * alpha1) / 255 | 0) : color2;\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = color2 >= color1 ? ((color2 * invAlpha1 + color1 * alpha1) / 255 | 0) : color2;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the darken blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.darkenOntoTransparentFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// This alpha is used when color1 > color2\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * (alpha2 ^ 0xFF)) / newAlpha | 0),\r\n\t\t\t\t\t\t\t\t\tinvAlpha12 = alpha12 ^ 0xFF,\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// This alpha is used when color2 > color1\r\n\t\t\t\t\t\t\t\t\talpha21 = ((alpha2 * (alpha1 ^ 0xFF)) / newAlpha | 0),\r\n\t\t\t\t\t\t\t\t\tinvAlpha21 = alpha21 ^ 0xFF;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = (((color2 >= color1) ? (color2 * alpha21 + color1 * invAlpha21) : (color1 * alpha12 + color2 * invAlpha12)) / 255) | 0;\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = (((color2 >= color1) ? (color2 * alpha21 + color1 * invAlpha21) : (color1 * alpha12 + color2 * invAlpha12)) / 255) | 0;\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = (((color2 >= color1) ? (color2 * alpha21 + color1 * invAlpha21) : (color1 * alpha12 + color2 * invAlpha12)) / 255) | 0;\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the darken blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.darkenOntoTransparentFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// This alpha is used when color1 > color2\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * (alpha2 ^ 0xFF)) / newAlpha | 0),\r\n\t\t\t\t\t\t\t\t\tinvAlpha12 = alpha12 ^ 0xFF,\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// This alpha is used when color2 > color1\r\n\t\t\t\t\t\t\t\t\talpha21 = ((alpha2 * (alpha1 ^ 0xFF)) / newAlpha | 0),\r\n\t\t\t\t\t\t\t\t\tinvAlpha21 = alpha21 ^ 0xFF;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = (((color2 >= color1) ? (color2 * alpha21 + color1 * invAlpha21) : (color1 * alpha12 + color2 * invAlpha12)) / 255) | 0;\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = (((color2 >= color1) ? (color2 * alpha21 + color1 * invAlpha21) : (color1 * alpha12 + color2 * invAlpha12)) / 255) | 0;\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = (((color2 >= color1) ? (color2 * alpha21 + color1 * invAlpha21) : (color1 * alpha12 + color2 * invAlpha12)) / 255) | 0;\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the darken blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion pixels must be opaque.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.darkenOntoOpaqueFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0),\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xFF;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = color2 >= color1 ? ((color2 * invAlpha1 + color1 * alpha1) / 255 | 0) : color2;\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = color2 >= color1 ? ((color2 * invAlpha1 + color1 * alpha1) / 255 | 0) : color2;\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = color2 >= color1 ? ((color2 * invAlpha1 + color1 * alpha1) / 255 | 0) : color2;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the darken blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.darkenOntoOpaqueFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0),\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xFF;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = color2 >= color1 ? ((color2 * invAlpha1 + color1 * alpha1) / 255 | 0) : color2;\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = color2 >= color1 ? ((color2 * invAlpha1 + color1 * alpha1) / 255 | 0) : color2;\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = color2 >= color1 ? ((color2 * invAlpha1 + color1 * alpha1) / 255 | 0) : color2;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the darken blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion can contain transparent pixels.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.darkenOntoTransparentFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// This alpha is used when color1 > color2\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * (alpha2 ^ 0xFF)) / newAlpha | 0),\r\n\t\t\t\t\t\t\t\t\tinvAlpha12 = alpha12 ^ 0xFF,\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// This alpha is used when color2 > color1\r\n\t\t\t\t\t\t\t\t\talpha21 = ((alpha2 * (alpha1 ^ 0xFF)) / newAlpha | 0),\r\n\t\t\t\t\t\t\t\t\tinvAlpha21 = alpha21 ^ 0xFF;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = (((color2 >= color1) ? (color2 * alpha21 + color1 * invAlpha21) : (color1 * alpha12 + color2 * invAlpha12)) / 255) | 0;\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = (((color2 >= color1) ? (color2 * alpha21 + color1 * invAlpha21) : (color1 * alpha12 + color2 * invAlpha12)) / 255) | 0;\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = (((color2 >= color1) ? (color2 * alpha21 + color1 * invAlpha21) : (color1 * alpha12 + color2 * invAlpha12)) / 255) | 0;\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the darken blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.darkenOntoTransparentFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// This alpha is used when color1 > color2\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * (alpha2 ^ 0xFF)) / newAlpha | 0),\r\n\t\t\t\t\t\t\t\t\tinvAlpha12 = alpha12 ^ 0xFF,\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// This alpha is used when color2 > color1\r\n\t\t\t\t\t\t\t\t\talpha21 = ((alpha2 * (alpha1 ^ 0xFF)) / newAlpha | 0),\r\n\t\t\t\t\t\t\t\t\tinvAlpha21 = alpha21 ^ 0xFF;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = (((color2 >= color1) ? (color2 * alpha21 + color1 * invAlpha21) : (color1 * alpha12 + color2 * invAlpha12)) / 255) | 0;\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = (((color2 >= color1) ? (color2 * alpha21 + color1 * invAlpha21) : (color1 * alpha12 + color2 * invAlpha12)) / 255) | 0;\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = (((color2 >= color1) ? (color2 * alpha21 + color1 * invAlpha21) : (color1 * alpha12 + color2 * invAlpha12)) / 255) | 0;\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the dodge blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.dodgeOntoOpaqueFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xFF;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((color2 * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (color1 == 255 ? 255 : Math.min(255, ((255 * color2) / (color1 ^ 0xFF) | 0)))) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((color2 * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (color1 == 255 ? 255 : Math.min(255, ((255 * color2) / (color1 ^ 0xFF) | 0)))) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((color2 * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (color1 == 255 ? 255 : Math.min(255, ((255 * color2) / (color1 ^ 0xFF) | 0)))) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the dodge blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.dodgeOntoOpaqueFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0),\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xFF;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((color2 * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (color1 == 255 ? 255 : Math.min(255, ((255 * color2) / (color1 ^ 0xFF) | 0)))) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((color2 * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (color1 == 255 ? 255 : Math.min(255, ((255 * color2) / (color1 ^ 0xFF) | 0)))) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((color2 * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (color1 == 255 ? 255 : Math.min(255, ((255 * color2) / (color1 ^ 0xFF) | 0)))) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the dodge blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.dodgeOntoTransparentFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = (((color1 * alpha1n2)\r\n\t\t\t\t\t\t\t\t\t\t+ (color2 * alphan12)\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * (color1 == 255 ? 255 : Math.min(255, ((255 * color2) / (color1 ^ 0xFF) | 0)))) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = (((color1 * alpha1n2)\r\n\t\t\t\t\t\t\t\t\t\t+ (color2 * alphan12)\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * (color1 == 255 ? 255 : Math.min(255, ((255 * color2) / (color1 ^ 0xFF) | 0)))) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = (((color1 * alpha1n2)\r\n\t\t\t\t\t\t\t\t\t\t+ (color2 * alphan12)\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * (color1 == 255 ? 255 : Math.min(255, ((255 * color2) / (color1 ^ 0xFF) | 0)))) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the dodge blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.dodgeOntoTransparentFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = (((color1 * alpha1n2)\r\n\t\t\t\t\t\t\t\t\t\t+ (color2 * alphan12)\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * (color1 == 255 ? 255 : Math.min(255, ((255 * color2) / (color1 ^ 0xFF) | 0)))) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = (((color1 * alpha1n2)\r\n\t\t\t\t\t\t\t\t\t\t+ (color2 * alphan12)\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * (color1 == 255 ? 255 : Math.min(255, ((255 * color2) / (color1 ^ 0xFF) | 0)))) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = (((color1 * alpha1n2)\r\n\t\t\t\t\t\t\t\t\t\t+ (color2 * alphan12)\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * (color1 == 255 ? 255 : Math.min(255, ((255 * color2) / (color1 ^ 0xFF) | 0)))) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the dodge blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion pixels must be opaque.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.dodgeOntoOpaqueFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0),\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xFF;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((color2 * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (color1 == 255 ? 255 : Math.min(255, ((255 * color2) / (color1 ^ 0xFF) | 0)))) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((color2 * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (color1 == 255 ? 255 : Math.min(255, ((255 * color2) / (color1 ^ 0xFF) | 0)))) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((color2 * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (color1 == 255 ? 255 : Math.min(255, ((255 * color2) / (color1 ^ 0xFF) | 0)))) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the dodge blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.dodgeOntoOpaqueFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0),\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xFF;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((color2 * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (color1 == 255 ? 255 : Math.min(255, ((255 * color2) / (color1 ^ 0xFF) | 0)))) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((color2 * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (color1 == 255 ? 255 : Math.min(255, ((255 * color2) / (color1 ^ 0xFF) | 0)))) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((color2 * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (color1 == 255 ? 255 : Math.min(255, ((255 * color2) / (color1 ^ 0xFF) | 0)))) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the dodge blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion can contain transparent pixels.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.dodgeOntoTransparentFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = (((color1 * alpha1n2)\r\n\t\t\t\t\t\t\t\t\t\t+ (color2 * alphan12)\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * (color1 == 255 ? 255 : Math.min(255, ((255 * color2) / (color1 ^ 0xFF) | 0)))) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = (((color1 * alpha1n2)\r\n\t\t\t\t\t\t\t\t\t\t+ (color2 * alphan12)\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * (color1 == 255 ? 255 : Math.min(255, ((255 * color2) / (color1 ^ 0xFF) | 0)))) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = (((color1 * alpha1n2)\r\n\t\t\t\t\t\t\t\t\t\t+ (color2 * alphan12)\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * (color1 == 255 ? 255 : Math.min(255, ((255 * color2) / (color1 ^ 0xFF) | 0)))) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the dodge blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.dodgeOntoTransparentFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = (((color1 * alpha1n2)\r\n\t\t\t\t\t\t\t\t\t\t+ (color2 * alphan12)\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * (color1 == 255 ? 255 : Math.min(255, ((255 * color2) / (color1 ^ 0xFF) | 0)))) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = (((color1 * alpha1n2)\r\n\t\t\t\t\t\t\t\t\t\t+ (color2 * alphan12)\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * (color1 == 255 ? 255 : Math.min(255, ((255 * color2) / (color1 ^ 0xFF) | 0)))) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = (((color1 * alpha1n2)\r\n\t\t\t\t\t\t\t\t\t\t+ (color2 * alphan12)\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * (color1 == 255 ? 255 : Math.min(255, ((255 * color2) / (color1 ^ 0xFF) | 0)))) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the burn blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.burnOntoOpaqueFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xFF;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((color2 * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((color2 * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((color2 * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the burn blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.burnOntoOpaqueFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0),\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xFF;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((color2 * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((color2 * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((color2 * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the burn blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.burnOntoTransparentFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((color1 * alpha1n2\r\n\t\t\t\t\t\t\t\t\t\t+ color2 * alphan12\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((color1 * alpha1n2\r\n\t\t\t\t\t\t\t\t\t\t+ color2 * alphan12\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((color1 * alpha1n2\r\n\t\t\t\t\t\t\t\t\t\t+ color2 * alphan12\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the burn blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.burnOntoTransparentFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((color1 * alpha1n2\r\n\t\t\t\t\t\t\t\t\t\t+ color2 * alphan12\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((color1 * alpha1n2\r\n\t\t\t\t\t\t\t\t\t\t+ color2 * alphan12\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((color1 * alpha1n2\r\n\t\t\t\t\t\t\t\t\t\t+ color2 * alphan12\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the burn blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion pixels must be opaque.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.burnOntoOpaqueFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0),\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xFF;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((color2 * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((color2 * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((color2 * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the burn blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.burnOntoOpaqueFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0),\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xFF;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((color2 * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((color2 * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((color2 * invAlpha1\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the burn blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion can contain transparent pixels.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.burnOntoTransparentFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((color1 * alpha1n2\r\n\t\t\t\t\t\t\t\t\t\t+ color2 * alphan12\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((color1 * alpha1n2\r\n\t\t\t\t\t\t\t\t\t\t+ color2 * alphan12\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((color1 * alpha1n2\r\n\t\t\t\t\t\t\t\t\t\t+ color2 * alphan12\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the burn blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.burnOntoTransparentFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((color1 * alpha1n2\r\n\t\t\t\t\t\t\t\t\t\t+ color2 * alphan12\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((color1 * alpha1n2\r\n\t\t\t\t\t\t\t\t\t\t+ color2 * alphan12\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((color1 * alpha1n2\r\n\t\t\t\t\t\t\t\t\t\t+ color2 * alphan12\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the overlay blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.overlayOntoOpaqueFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xFF;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor2 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor2 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor2 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the overlay blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.overlayOntoOpaqueFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0),\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xFF;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor2 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor2 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor2 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the overlay blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.overlayOntoTransparentFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor2 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor2 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor2 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the overlay blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.overlayOntoTransparentFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor2 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor2 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor2 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the overlay blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion pixels must be opaque.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.overlayOntoOpaqueFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0),\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xFF;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor2 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor2 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor2 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the overlay blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.overlayOntoOpaqueFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0),\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xFF;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor2 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor2 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor2 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the overlay blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion can contain transparent pixels.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.overlayOntoTransparentFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor2 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor2 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor2 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the overlay blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.overlayOntoTransparentFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor2 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor2 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor2 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the hard light blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.hardLightOntoOpaqueFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xff;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the hard light blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.hardLightOntoOpaqueFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0),\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xff;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the hard light blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.hardLightOntoTransparentFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the hard light blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.hardLightOntoTransparentFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the hard light blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion pixels must be opaque.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.hardLightOntoOpaqueFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0),\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xff;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the hard light blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.hardLightOntoOpaqueFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0),\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xff;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the hard light blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion can contain transparent pixels.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.hardLightOntoTransparentFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the hard light blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.hardLightOntoTransparentFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * 2 * color1 * color2 / 255)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * ((2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255) ^ 0xff))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the soft light blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.softLightOntoOpaqueFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xff;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? ((((2 * color1 - 255) * softLightLUTSquare[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: ((((2 * color1 - 255) * softLightLUTSquareRoot[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? ((((2 * color1 - 255) * softLightLUTSquare[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: ((((2 * color1 - 255) * softLightLUTSquareRoot[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? ((((2 * color1 - 255) * softLightLUTSquare[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: ((((2 * color1 - 255) * softLightLUTSquareRoot[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the soft light blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.softLightOntoOpaqueFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0),\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xff;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? ((((2 * color1 - 255) * softLightLUTSquare[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: ((((2 * color1 - 255) * softLightLUTSquareRoot[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? ((((2 * color1 - 255) * softLightLUTSquare[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: ((((2 * color1 - 255) * softLightLUTSquareRoot[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? ((((2 * color1 - 255) * softLightLUTSquare[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: ((((2 * color1 - 255) * softLightLUTSquareRoot[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the soft light blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.softLightOntoTransparentFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? alpha12 * ((((2 * color1 - 255) * softLightLUTSquare[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: alpha12 * ((((2 * color1 - 255) * softLightLUTSquareRoot[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? alpha12 * ((((2 * color1 - 255) * softLightLUTSquare[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: alpha12 * ((((2 * color1 - 255) * softLightLUTSquareRoot[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? alpha12 * ((((2 * color1 - 255) * softLightLUTSquare[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: alpha12 * ((((2 * color1 - 255) * softLightLUTSquareRoot[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the soft light blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.softLightOntoTransparentFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? alpha12 * ((((2 * color1 - 255) * softLightLUTSquare[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: alpha12 * ((((2 * color1 - 255) * softLightLUTSquareRoot[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? alpha12 * ((((2 * color1 - 255) * softLightLUTSquare[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: alpha12 * ((((2 * color1 - 255) * softLightLUTSquareRoot[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? alpha12 * ((((2 * color1 - 255) * softLightLUTSquare[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: alpha12 * ((((2 * color1 - 255) * softLightLUTSquareRoot[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the soft light blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion pixels must be opaque.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.softLightOntoOpaqueFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0),\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xff;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? ((((2 * color1 - 255) * softLightLUTSquare[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: ((((2 * color1 - 255) * softLightLUTSquareRoot[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? ((((2 * color1 - 255) * softLightLUTSquare[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: ((((2 * color1 - 255) * softLightLUTSquareRoot[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? ((((2 * color1 - 255) * softLightLUTSquare[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: ((((2 * color1 - 255) * softLightLUTSquareRoot[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the soft light blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.softLightOntoOpaqueFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0),\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xff;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? ((((2 * color1 - 255) * softLightLUTSquare[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: ((((2 * color1 - 255) * softLightLUTSquareRoot[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? ((((2 * color1 - 255) * softLightLUTSquare[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: ((((2 * color1 - 255) * softLightLUTSquareRoot[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? ((((2 * color1 - 255) * softLightLUTSquare[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: ((((2 * color1 - 255) * softLightLUTSquareRoot[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the soft light blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion can contain transparent pixels.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.softLightOntoTransparentFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? alpha12 * ((((2 * color1 - 255) * softLightLUTSquare[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: alpha12 * ((((2 * color1 - 255) * softLightLUTSquareRoot[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? alpha12 * ((((2 * color1 - 255) * softLightLUTSquare[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: alpha12 * ((((2 * color1 - 255) * softLightLUTSquareRoot[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? alpha12 * ((((2 * color1 - 255) * softLightLUTSquare[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: alpha12 * ((((2 * color1 - 255) * softLightLUTSquareRoot[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the soft light blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.softLightOntoTransparentFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? alpha12 * ((((2 * color1 - 255) * softLightLUTSquare[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: alpha12 * ((((2 * color1 - 255) * softLightLUTSquareRoot[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? alpha12 * ((((2 * color1 - 255) * softLightLUTSquare[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: alpha12 * ((((2 * color1 - 255) * softLightLUTSquareRoot[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? alpha12 * ((((2 * color1 - 255) * softLightLUTSquare[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: alpha12 * ((((2 * color1 - 255) * softLightLUTSquareRoot[color2]) / 255 | 0) + color2)\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the vivid light blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.vividLightOntoOpaqueFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xff;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * ((color1 == 0) ? 0 : 255 - Math.min(255, (((255 - color2) * 255) / (2 * color1) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * (color1 == 255 ? 255 : Math.min(255, ((color2 * 255) / (2 * (255 - color1)) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * ((color1 == 0) ? 0 : 255 - Math.min(255, (((255 - color2) * 255) / (2 * color1) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * (color1 == 255 ? 255 : Math.min(255, ((color2 * 255) / (2 * (255 - color1)) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * ((color1 == 0) ? 0 : 255 - Math.min(255, (((255 - color2) * 255) / (2 * color1) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * (color1 == 255 ? 255 : Math.min(255, ((color2 * 255) / (2 * (255 - color1)) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the vivid light blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.vividLightOntoOpaqueFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0),\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xff;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * ((color1 == 0) ? 0 : 255 - Math.min(255, (((255 - color2) * 255) / (2 * color1) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * (color1 == 255 ? 255 : Math.min(255, ((color2 * 255) / (2 * (255 - color1)) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * ((color1 == 0) ? 0 : 255 - Math.min(255, (((255 - color2) * 255) / (2 * color1) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * (color1 == 255 ? 255 : Math.min(255, ((color2 * 255) / (2 * (255 - color1)) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * ((color1 == 0) ? 0 : 255 - Math.min(255, (((255 - color2) * 255) / (2 * color1) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * (color1 == 255 ? 255 : Math.min(255, ((color2 * 255) / (2 * (255 - color1)) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the vivid light blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.vividLightOntoTransparentFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * ((color1 == 0) ? 0 : 255 - Math.min(255, (((255 - color2) * 255) / (2 * color1) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * (color1 == 255 ? 255 : Math.min(255, ((color2 * 255) / (2 * (255 - color1)) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * ((color1 == 0) ? 0 : 255 - Math.min(255, (((255 - color2) * 255) / (2 * color1) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * (color1 == 255 ? 255 : Math.min(255, ((color2 * 255) / (2 * (255 - color1)) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * ((color1 == 0) ? 0 : 255 - Math.min(255, (((255 - color2) * 255) / (2 * color1) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * (color1 == 255 ? 255 : Math.min(255, ((color2 * 255) / (2 * (255 - color1)) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the vivid light blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.vividLightOntoTransparentFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * ((color1 == 0) ? 0 : 255 - Math.min(255, (((255 - color2) * 255) / (2 * color1) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * (color1 == 255 ? 255 : Math.min(255, ((color2 * 255) / (2 * (255 - color1)) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * ((color1 == 0) ? 0 : 255 - Math.min(255, (((255 - color2) * 255) / (2 * color1) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * (color1 == 255 ? 255 : Math.min(255, ((color2 * 255) / (2 * (255 - color1)) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * ((color1 == 0) ? 0 : 255 - Math.min(255, (((255 - color2) * 255) / (2 * color1) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * (color1 == 255 ? 255 : Math.min(255, ((color2 * 255) / (2 * (255 - color1)) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the vivid light blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion pixels must be opaque.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.vividLightOntoOpaqueFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0),\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xff;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * ((color1 == 0) ? 0 : 255 - Math.min(255, (((255 - color2) * 255) / (2 * color1) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * (color1 == 255 ? 255 : Math.min(255, ((color2 * 255) / (2 * (255 - color1)) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * ((color1 == 0) ? 0 : 255 - Math.min(255, (((255 - color2) * 255) / (2 * color1) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * (color1 == 255 ? 255 : Math.min(255, ((color2 * 255) / (2 * (255 - color1)) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * ((color1 == 0) ? 0 : 255 - Math.min(255, (((255 - color2) * 255) / (2 * color1) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * (color1 == 255 ? 255 : Math.min(255, ((color2 * 255) / (2 * (255 - color1)) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the vivid light blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.vividLightOntoOpaqueFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0),\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xff;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * ((color1 == 0) ? 0 : 255 - Math.min(255, (((255 - color2) * 255) / (2 * color1) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * (color1 == 255 ? 255 : Math.min(255, ((color2 * 255) / (2 * (255 - color1)) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * ((color1 == 0) ? 0 : 255 - Math.min(255, (((255 - color2) * 255) / (2 * color1) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * (color1 == 255 ? 255 : Math.min(255, ((color2 * 255) / (2 * (255 - color1)) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha1 * ((color1 == 0) ? 0 : 255 - Math.min(255, (((255 - color2) * 255) / (2 * color1) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha1 * (color1 == 255 ? 255 : Math.min(255, ((color2 * 255) / (2 * (255 - color1)) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t)) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the vivid light blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion can contain transparent pixels.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.vividLightOntoTransparentFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * ((color1 == 0) ? 0 : 255 - Math.min(255, (((255 - color2) * 255) / (2 * color1) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * (color1 == 255 ? 255 : Math.min(255, ((color2 * 255) / (2 * (255 - color1)) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * ((color1 == 0) ? 0 : 255 - Math.min(255, (((255 - color2) * 255) / (2 * color1) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * (color1 == 255 ? 255 : Math.min(255, ((color2 * 255) / (2 * (255 - color1)) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * ((color1 == 0) ? 0 : 255 - Math.min(255, (((255 - color2) * 255) / (2 * color1) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * (color1 == 255 ? 255 : Math.min(255, ((color2 * 255) / (2 * (255 - color1)) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the vivid light blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.vividLightOntoTransparentFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * ((color1 == 0) ? 0 : 255 - Math.min(255, (((255 - color2) * 255) / (2 * color1) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * (color1 == 255 ? 255 : Math.min(255, ((color2 * 255) / (2 * (255 - color1)) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * ((color1 == 0) ? 0 : 255 - Math.min(255, (((255 - color2) * 255) / (2 * color1) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * (color1 == 255 ? 255 : Math.min(255, ((color2 * 255) / (2 * (255 - color1)) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ (\r\n\t\t\t\t\t\t\t\t\t\t\tcolor1 <= 127\r\n\t\t\t\t\t\t\t\t\t\t\t\t? (alpha12 * ((color1 == 0) ? 0 : 255 - Math.min(255, (((255 - color2) * 255) / (2 * color1) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t\t\t: (alpha12 * (color1 == 255 ? 255 : Math.min(255, ((color2 * 255) / (2 * (255 - color1)) | 0))))\r\n\t\t\t\t\t\t\t\t\t\t)) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the linear light blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.linearLightOntoOpaqueFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xff;\rcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * Math.min(255, Math.max(0, color2 + 2 * layer.data[pixIndex] - 255))) / 255 | 0);\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * Math.min(255, Math.max(0, color2 + 2 * layer.data[pixIndex + 1] - 255))) / 255 | 0);\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * Math.min(255, Math.max(0, color2 + 2 * layer.data[pixIndex + 2] - 255))) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the linear light blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.linearLightOntoOpaqueFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0),\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xff;\rcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * Math.min(255, Math.max(0, color2 + 2 * layer.data[pixIndex] - 255))) / 255 | 0);\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * Math.min(255, Math.max(0, color2 + 2 * layer.data[pixIndex + 1] - 255))) / 255 | 0);\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * Math.min(255, Math.max(0, color2 + 2 * layer.data[pixIndex + 2] - 255))) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the linear light blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.linearLightOntoTransparentFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * Math.min(255, Math.max(0, color2 + 2 * color1 - 255))) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * Math.min(255, Math.max(0, color2 + 2 * color1 - 255))) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * Math.min(255, Math.max(0, color2 + 2 * color1 - 255))) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the linear light blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.linearLightOntoTransparentFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * Math.min(255, Math.max(0, color2 + 2 * color1 - 255))) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * Math.min(255, Math.max(0, color2 + 2 * color1 - 255))) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * Math.min(255, Math.max(0, color2 + 2 * color1 - 255))) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the linear light blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion pixels must be opaque.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.linearLightOntoOpaqueFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0),\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xff;\rcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * Math.min(255, Math.max(0, color2 + 2 * layer.data[pixIndex] - 255))) / 255 | 0);\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * Math.min(255, Math.max(0, color2 + 2 * layer.data[pixIndex + 1] - 255))) / 255 | 0);\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * Math.min(255, Math.max(0, color2 + 2 * layer.data[pixIndex + 2] - 255))) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the linear light blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.linearLightOntoOpaqueFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0),\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xff;\rcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * Math.min(255, Math.max(0, color2 + 2 * layer.data[pixIndex] - 255))) / 255 | 0);\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * Math.min(255, Math.max(0, color2 + 2 * layer.data[pixIndex + 1] - 255))) / 255 | 0);\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * Math.min(255, Math.max(0, color2 + 2 * layer.data[pixIndex + 2] - 255))) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the linear light blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion can contain transparent pixels.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.linearLightOntoTransparentFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * Math.min(255, Math.max(0, color2 + 2 * color1 - 255))) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * Math.min(255, Math.max(0, color2 + 2 * color1 - 255))) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * Math.min(255, Math.max(0, color2 + 2 * color1 - 255))) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the linear light blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.linearLightOntoTransparentFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * Math.min(255, Math.max(0, color2 + 2 * color1 - 255))) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * Math.min(255, Math.max(0, color2 + 2 * color1 - 255))) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * Math.min(255, Math.max(0, color2 + 2 * color1 - 255))) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the pin light blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.pinLightOntoOpaqueFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xff;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * ((color2 >= 2 * color1) ? (2 * color1) : (color2 <= 2 * color1 - 255) ? (2 * color1 - 255) : color2)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * ((color2 >= 2 * color1) ? (2 * color1) : (color2 <= 2 * color1 - 255) ? (2 * color1 - 255) : color2)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * ((color2 >= 2 * color1) ? (2 * color1) : (color2 <= 2 * color1 - 255) ? (2 * color1 - 255) : color2)) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the pin light blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.pinLightOntoOpaqueFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0),\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xff;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * ((color2 >= 2 * color1) ? (2 * color1) : (color2 <= 2 * color1 - 255) ? (2 * color1 - 255) : color2)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * ((color2 >= 2 * color1) ? (2 * color1) : (color2 <= 2 * color1 - 255) ? (2 * color1 - 255) : color2)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * ((color2 >= 2 * color1) ? (2 * color1) : (color2 <= 2 * color1 - 255) ? (2 * color1 - 255) : color2)) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the pin light blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.pinLightOntoTransparentFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * ((color2 >= 2 * color1) ? (2 * color1) : (color2 <= 2 * color1 - 255) ? (2 * color1 - 255) : color2)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * ((color2 >= 2 * color1) ? (2 * color1) : (color2 <= 2 * color1 - 255) ? (2 * color1 - 255) : color2)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * ((color2 >= 2 * color1) ? (2 * color1) : (color2 <= 2 * color1 - 255) ? (2 * color1 - 255) : color2)) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the pin light blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.pinLightOntoTransparentFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * ((color2 >= 2 * color1) ? (2 * color1) : (color2 <= 2 * color1 - 255) ? (2 * color1 - 255) : color2)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * ((color2 >= 2 * color1) ? (2 * color1) : (color2 <= 2 * color1 - 255) ? (2 * color1 - 255) : color2)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * ((color2 >= 2 * color1) ? (2 * color1) : (color2 <= 2 * color1 - 255) ? (2 * color1 - 255) : color2)) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the pin light blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion pixels must be opaque.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.pinLightOntoOpaqueFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0),\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xff;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * ((color2 >= 2 * color1) ? (2 * color1) : (color2 <= 2 * color1 - 255) ? (2 * color1 - 255) : color2)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * ((color2 >= 2 * color1) ? (2 * color1) : (color2 <= 2 * color1 - 255) ? (2 * color1 - 255) : color2)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * ((color2 >= 2 * color1) ? (2 * color1) : (color2 <= 2 * color1 - 255) ? (2 * color1 - 255) : color2)) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the pin light blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.pinLightOntoOpaqueFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0),\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tinvAlpha1 = alpha1 ^ 0xff;\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * ((color2 >= 2 * color1) ? (2 * color1) : (color2 <= 2 * color1 - 255) ? (2 * color1 - 255) : color2)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * ((color2 >= 2 * color1) ? (2 * color1) : (color2 <= 2 * color1 - 255) ? (2 * color1 - 255) : color2)) / 255 | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((invAlpha1 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha1 * ((color2 >= 2 * color1) ? (2 * color1) : (color2 <= 2 * color1 - 255) ? (2 * color1 - 255) : color2)) / 255 | 0);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the pin light blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion can contain transparent pixels.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.pinLightOntoTransparentFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * ((color2 >= 2 * color1) ? (2 * color1) : (color2 <= 2 * color1 - 255) ? (2 * color1 - 255) : color2)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * ((color2 >= 2 * color1) ? (2 * color1) : (color2 <= 2 * color1 - 255) ? (2 * color1 - 255) : color2)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * ((color2 >= 2 * color1) ? (2 * color1) : (color2 <= 2 * color1 - 255) ? (2 * color1 - 255) : color2)) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Blend the given layer onto the fusion using the pin light blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.pinLightOntoTransparentFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0),\n\t\t\t\talpha2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\talpha12 = ((alpha1 * alpha2) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talpha1n2 = ((alpha1 * (alpha2 ^ 0xFF)) / 255 | 0),\r\n\t\t\t\t\t\t\t\t\talphan12 = (((alpha1 ^ 0xFF) * alpha2) / 255 | 0);\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tfusion.data[pixIndex] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * ((color2 >= 2 * color1) ? (2 * color1) : (color2 <= 2 * color1 - 255) ? (2 * color1 - 255) : color2)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tfusion.data[pixIndex + 1] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * ((color2 >= 2 * color1) ? (2 * color1) : (color2 <= 2 * color1 - 255) ? (2 * color1 - 255) : color2)) / newAlpha | 0);\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tfusion.data[pixIndex + 2] = ((alpha1n2 * color1\r\n\t\t\t\t\t\t\t\t\t\t+ alphan12 * color2\r\n\t\t\t\t\t\t\t\t\t\t+ alpha12 * ((color2 >= 2 * color1) ? (2 * color1) : (color2 <= 2 * color1 - 255) ? (2 * color1 - 255) : color2)) / newAlpha | 0);\n\t\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n\n// Blending operations with non-standard variants \n\n\n/**\n * Blend the given layer onto the fusion using the passthrough blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.passthroughOntoOpaqueFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\talpha2 = 255,\n\t\t\t\talphaMix = (layerAlpha / 100),\n\t\t\t\tinvAlphaMix = 1.0 - alphaMix;\n\t\t\t\n\t\t\tlet\r\n\t\t\t\t\t\t\trealAlpha = alpha1 * alphaMix + alpha2 * invAlphaMix;\r\n\t\t\t\r\n\t\t\t\t\t\t// Effectively use pre-multiplied alpha so that fully transparent colors have no effect on the result\rfusion.data[pixIndex] = ((layer.data[pixIndex] * alpha1 * alphaMix + fusion.data[pixIndex] * alpha2 * invAlphaMix) / realAlpha | 0);\n\t\t\tfusion.data[pixIndex + 1] = ((layer.data[pixIndex + 1] * alpha1 * alphaMix + fusion.data[pixIndex + 1] * alpha2 * invAlphaMix) / realAlpha | 0);\n\t\t\tfusion.data[pixIndex + 2] = ((layer.data[pixIndex + 2] * alpha1 * alphaMix + fusion.data[pixIndex + 2] * alpha2 * invAlphaMix) / realAlpha | 0);\n\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = realAlpha;\n\t\t\t\n\t\t}\n\t}\n};\n\n\nCPBlend.passthroughOntoOpaqueFusionWithOpaqueLayer = CPBlend.passthroughOntoOpaqueFusionWithTransparentLayer;\n\t\n\n/**\n * Blend the given layer onto the fusion using the passthrough blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.passthroughOntoTransparentFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\talphaMix = (layerAlpha / 100),\n\t\t\t\tinvAlphaMix = 1.0 - alphaMix;\n\t\t\t\n\t\t\tlet\r\n\t\t\t\t\t\t\trealAlpha = alpha1 * alphaMix + alpha2 * invAlphaMix;\r\n\t\t\t\r\n\t\t\t\t\t\t// Effectively use pre-multiplied alpha so that fully transparent colors have no effect on the result\rfusion.data[pixIndex] = ((layer.data[pixIndex] * alpha1 * alphaMix + fusion.data[pixIndex] * alpha2 * invAlphaMix) / realAlpha | 0);\n\t\t\tfusion.data[pixIndex + 1] = ((layer.data[pixIndex + 1] * alpha1 * alphaMix + fusion.data[pixIndex + 1] * alpha2 * invAlphaMix) / realAlpha | 0);\n\t\t\tfusion.data[pixIndex + 2] = ((layer.data[pixIndex + 2] * alpha1 * alphaMix + fusion.data[pixIndex + 2] * alpha2 * invAlphaMix) / realAlpha | 0);\n\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = realAlpha;\n\t\t\t\n\t\t}\n\t}\n};\n\n\nCPBlend.passthroughOntoTransparentFusionWithOpaqueLayer = CPBlend.passthroughOntoTransparentFusionWithTransparentLayer;\n\n\n/**\n * Blend the given layer onto the fusion using the passthrough blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.passthroughOntoOpaqueFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\talpha2 = 255,\n\t\t\t\talphaMix = (mask.data[maskIndex] * layerAlpha / 25500),\n\t\t\t\tinvAlphaMix = 1.0 - alphaMix;\n\t\t\t\n\t\t\tlet\r\n\t\t\t\t\t\t\trealAlpha = alpha1 * alphaMix + alpha2 * invAlphaMix;\r\n\t\t\t\r\n\t\t\t\t\t\t// Effectively use pre-multiplied alpha so that fully transparent colors have no effect on the result\rfusion.data[pixIndex] = ((layer.data[pixIndex] * alpha1 * alphaMix + fusion.data[pixIndex] * alpha2 * invAlphaMix) / realAlpha | 0);\n\t\t\tfusion.data[pixIndex + 1] = ((layer.data[pixIndex + 1] * alpha1 * alphaMix + fusion.data[pixIndex + 1] * alpha2 * invAlphaMix) / realAlpha | 0);\n\t\t\tfusion.data[pixIndex + 2] = ((layer.data[pixIndex + 2] * alpha1 * alphaMix + fusion.data[pixIndex + 2] * alpha2 * invAlphaMix) / realAlpha | 0);\n\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = realAlpha;\n\t\t\t\n\t\t}\n\t}\n};\n\n\nCPBlend.passthroughOntoOpaqueFusionWithOpaqueLayerMasked = CPBlend.passthroughOntoOpaqueFusionWithTransparentLayerMasked;\n\t\n\n/**\n * Blend the given layer onto the fusion using the passthrough blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion can contain transparent pixels.\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.passthroughOntoTransparentFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\talpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\talphaMix = (mask.data[maskIndex] * layerAlpha / 25500),\n\t\t\t\tinvAlphaMix = 1.0 - alphaMix;\n\t\t\t\n\t\t\tlet\r\n\t\t\t\t\t\t\trealAlpha = alpha1 * alphaMix + alpha2 * invAlphaMix;\r\n\t\t\t\r\n\t\t\t\t\t\t// Effectively use pre-multiplied alpha so that fully transparent colors have no effect on the result\rfusion.data[pixIndex] = ((layer.data[pixIndex] * alpha1 * alphaMix + fusion.data[pixIndex] * alpha2 * invAlphaMix) / realAlpha | 0);\n\t\t\tfusion.data[pixIndex + 1] = ((layer.data[pixIndex + 1] * alpha1 * alphaMix + fusion.data[pixIndex + 1] * alpha2 * invAlphaMix) / realAlpha | 0);\n\t\t\tfusion.data[pixIndex + 2] = ((layer.data[pixIndex + 2] * alpha1 * alphaMix + fusion.data[pixIndex + 2] * alpha2 * invAlphaMix) / realAlpha | 0);\n\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = realAlpha;\n\t\t\t\n\t\t}\n\t}\n};\n\n\nCPBlend.passthroughOntoTransparentFusionWithOpaqueLayerMasked = CPBlend.passthroughOntoTransparentFusionWithTransparentLayerMasked;\n\n// These \"replace\" routines disregard the original contents of the fusion, so we need not make both an opaque and transparent fusion variant\n\n\n/**\n * Blend the given layer onto the fusion using the replace blending operator.\n * \n * The layer alpha must be less than 100\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.replaceOntoFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0);\n\t\t\t\n\t\t\tfusion.data[pixIndex] = layer.data[pixIndex];\n\t\t\tfusion.data[pixIndex + 1] = layer.data[pixIndex + 1];\n\t\t\tfusion.data[pixIndex + 2] = layer.data[pixIndex + 2];\n\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = alpha1;\n\t\t\t\n\t\t}\n\t}\n};\n\n\n\n/**\n * Blend the given layer onto the fusion using the replace blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.replaceOntoFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\n\t\t\tfusion.data[pixIndex] = layer.data[pixIndex];\n\t\t\tfusion.data[pixIndex + 1] = layer.data[pixIndex + 1];\n\t\t\tfusion.data[pixIndex + 2] = layer.data[pixIndex + 2];\n\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = alpha1;\n\t\t\t\n\t\t}\n\t}\n};\n\n\n\n/**\n * Blend the given layer onto the fusion using the replace blending operator.\n * \n * The layer alpha must be less than 100\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.replaceOntoFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0);\n\t\t\t\n\t\t\tfusion.data[pixIndex] = layer.data[pixIndex];\n\t\t\tfusion.data[pixIndex + 1] = layer.data[pixIndex + 1];\n\t\t\tfusion.data[pixIndex + 2] = layer.data[pixIndex + 2];\n\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = alpha1;\n\t\t\t\n\t\t}\n\t}\n};\n\n\n\n/**\n * Blend the given layer onto the fusion using the replace blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.replaceOntoFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0);\n\t\t\t\n\t\t\tfusion.data[pixIndex] = layer.data[pixIndex];\n\t\t\tfusion.data[pixIndex + 1] = layer.data[pixIndex + 1];\n\t\t\tfusion.data[pixIndex + 2] = layer.data[pixIndex + 2];\n\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = alpha1;\n\t\t\t\n\t\t}\n\t}\n};\n\n\n\n/**\n * Blend the given layer onto the fusion using the replaceAlpha blending operator.\n * \n * The layer alpha must be less than 100\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.replaceAlphaOntoFusionWithTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0);\n\t\t\t\n\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = alpha1;\n\t\t\t\n\t\t}\n\t}\n};\n\n\n\n/**\n * Blend the given layer onto the fusion using the replaceAlpha blending operator.\n * \n * The layer alpha must be less than 100\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.replaceAlphaOntoFusionWithTransparentLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] * layerAlpha / 25500)  | 0);\n\t\t\t\n\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = alpha1;\n\t\t\t\n\t\t}\n\t}\n};\n\n\t\n\n/**\n * Blend the given layer onto the fusion using the replaceAlpha blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.replaceAlphaOntoFusionWithOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET];\n\t\t\t\n\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = alpha1;\n\t\t\t\n\t\t}\n\t}\n};\n\n\n\n/**\n * Blend the given layer onto the fusion using the replaceAlpha blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * The given alpha mask will be multiplied with the layer alpha before blending.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {CPGreyBmp} mask\n * \n */\nCPBlend.replaceAlphaOntoFusionWithOpaqueLayerMasked = function(fusion, layer, layerAlpha, srcRect, mask) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideMask = (mask.width - w) | 0,\n\t\tmaskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * mask.data[maskIndex] / 255)  | 0);\n\t\t\t\n\t\t\tfusion.data[pixIndex + ALPHA_BYTE_OFFSET] = alpha1;\n\t\t\t\n\t\t}\n\t}\n};\n\n\n\n/**\n * Modify the given layer using the multiplyUpgrade blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.upgradeMultiplyOfOpaqueLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\t// Legacy formula: color2 - Math.floor(((color1 ^ 0xFF) * color2 * alpha1) / (255 * 255))\r\n\t\t\t\t\t\t\t// New formula:    color2 -  Math.ceil(((color1 ^ 0xFF) * color2 * alpha1) / (255 * 255))\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tlayer.data[pixIndex] = color1 + Math.ceil((((255 - color1) * color2 * alpha1) % (255 * 255)) / (color2 * alpha1));\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tlayer.data[pixIndex + 1] = color1 + Math.ceil((((255 - color1) * color2 * alpha1) % (255 * 255)) / (color2 * alpha1));\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tlayer.data[pixIndex + 2] = color1 + Math.ceil((((255 - color1) * color2 * alpha1) % (255 * 255)) / (color2 * alpha1));\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n\n\n/**\n * Modify the given layer using the multiplyUpgrade blending operator.\n * \n * The layer alpha must be less than 100\n * \n * Fusion pixels must be opaque.\n * \n * The destination co-ordinates will be the same as the source ones, so both fusion and layer\n * must be the same dimensions.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * \n */\nCPBlend.upgradeMultiplyOfTransparentLayer = function(fusion, layer, layerAlpha, srcRect) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = (((layer.data[pixIndex + ALPHA_BYTE_OFFSET]) * layerAlpha / 100)  | 0),\n\t\t\t\tcolor1,\n\t\t\t\tcolor2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\t// Legacy formula: color2 - Math.floor(((color1 ^ 0xFF) * color2 * alpha1) / (255 * 255))\r\n\t\t\t\t\t\t\t// New formula:    color2 -  Math.ceil(((color1 ^ 0xFF) * color2 * alpha1) / (255 * 255))\rcolor1 = layer.data[pixIndex];\n\t\t\t\tcolor2 = fusion.data[pixIndex];\n\t\t\t\tlayer.data[pixIndex] = color1 + Math.ceil((((255 - color1) * color2 * alpha1) % (255 * 255)) / (color2 * alpha1));\n\t\t\t\tcolor1 = layer.data[pixIndex + 1];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 1];\n\t\t\t\tlayer.data[pixIndex + 1] = color1 + Math.ceil((((255 - color1) * color2 * alpha1) % (255 * 255)) / (color2 * alpha1));\n\t\t\t\tcolor1 = layer.data[pixIndex + 2];\n\t\t\t\tcolor2 = fusion.data[pixIndex + 2];\n\t\t\t\tlayer.data[pixIndex + 2] = color1 + Math.ceil((((255 - color1) * color2 * alpha1) % (255 * 255)) / (color2 * alpha1));\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n\n\n/**\n * Blend the given layer onto the fusion using the normal blending operator.\n * \n * The layer must have its layer alpha set to 100\n * \n * Fusion can contain transparent pixels.\n * \n * The destination's top left will be at destX, destY. The fusion can be a different size to\n * the layer.\n * \n * @param {CPColorBmp} fusion\n * @param {CPColorBmp} layer\n * @param {int} layerAlpha\n * @param {CPRect} srcRect\n * @param {int} destX\n * @param {int} destY\n * \n */\nCPBlend._normalFuseImageOntoImageAtPosition = function(fusion, layer, layerAlpha, srcRect, destX, destY) {\n\tlet\n\t\th = srcRect.getHeight() | 0,\n\t\tw = srcRect.getWidth() | 0,\n\t\tyStride = ((layer.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,\n\t\tyStrideDest = ((fusion.width - w) * BYTES_PER_PIXEL) | 0,\n\t\tpixIndexDest = fusion.offsetOfPixel(destX, destY) | 0;\n\t\t\n\tfor (let y = 0 ; y < h; y++, pixIndex += yStride, pixIndexDest += yStrideDest) {\n\t\tfor (let x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, pixIndexDest += BYTES_PER_PIXEL) {\n\t\t\tlet\n\t\t\t\talpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],\n\t\t\t\talpha2;\n\t\t\t\n\t\t\tif (alpha1) {\n\t\t\t\talpha2 = fusion.data[pixIndexDest + ALPHA_BYTE_OFFSET];\n\t\t\t\tlet\r\n\t\t\t\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - ((alpha1 * alpha2) / 255 | 0)) | 0,\r\n\t\t\t\t\t\t\t\t\trealAlpha = ((alpha1 * 255) / newAlpha | 0),\r\n\t\t\t\t\t\t\t\t\tinvAlpha = 255 - realAlpha;\rfusion.data[pixIndexDest] = ((layer.data[pixIndex] * realAlpha + fusion.data[pixIndexDest] * invAlpha) / 255 | 0);\n\t\t\t\tfusion.data[pixIndexDest + 1] = ((layer.data[pixIndex + 1] * realAlpha + fusion.data[pixIndexDest + 1] * invAlpha) / 255 | 0);\n\t\t\t\tfusion.data[pixIndexDest + 2] = ((layer.data[pixIndex + 2] * realAlpha + fusion.data[pixIndexDest + 2] * invAlpha) / 255 | 0);\n\t\t\t\tfusion.data[pixIndexDest + ALPHA_BYTE_OFFSET] = newAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\n\nfunction makeLookupTables() {\r\n\t// V - V^2 table\r\n\tfor (let i = 0; i < 256; i++) {\r\n\t\tlet\r\n\t\t\tv = i / 255;\r\n\r\n\t\tsoftLightLUTSquare[i] = ((v - v * v) * 255) | 0;\r\n\t}\r\n\r\n\t// sqrt(V) - V table\r\n\tfor (let i = 0; i < 256; i++) {\r\n\t\tlet\r\n\t\t\tv = i / 255;\r\n\r\n\t\tsoftLightLUTSquareRoot[i] = ((Math.sqrt(v) - v) * 255) | 0;\r\n\t}\r\n}\n\t\nCPBlend.LM_NORMAL = 0;\nCPBlend.LM_MULTIPLY = 1;\nCPBlend.LM_ADD = 2;\nCPBlend.LM_SCREEN = 3;\nCPBlend.LM_LIGHTEN = 4;\nCPBlend.LM_DARKEN = 5;\nCPBlend.LM_SUBTRACT = 6;\nCPBlend.LM_DODGE = 7;\nCPBlend.LM_BURN = 8;\nCPBlend.LM_OVERLAY = 9;\nCPBlend.LM_HARDLIGHT = 10;\nCPBlend.LM_SOFTLIGHT = 11;\nCPBlend.LM_VIVIDLIGHT = 12;\nCPBlend.LM_LINEARLIGHT = 13;\nCPBlend.LM_PINLIGHT = 14;\n\nCPBlend.LM_PASSTHROUGH = 15;\nCPBlend.LM_MULTIPLY2 = 16;\n\nCPBlend.LM_FIRST = 0;\nCPBlend.LM_LAST = 16;\nCPBlend.LM_LAST_CHIBIPAINT = CPBlend.LM_PINLIGHT;\n\nCPBlend.BLEND_MODE_CODENAMES = [\n\t\"normal\",\n\t\"multiply\",\n\t\"add\",\n\t\"screen\",\n\t\"lighten\",\n\t\"darken\",\n\t\"subtract\",\n\t\"dodge\",\n\t\"burn\",\n\t\"overlay\",\n\t\"hardLight\",\n\t\"softLight\",\n\t\"vividLight\",\n\t\"linearLight\",\n\t\"pinLight\",\n\t\"passthrough\",\n\t\"multiply2\"\n];\n\nCPBlend.BLEND_MODE_DISPLAY_NAMES = [\n\t  \"Normal\", \"Multiply\", \"Add\", \"Screen\", \"Lighten\", \"Darken\", \"Subtract\", \"Dodge\", \"Burn\",\n\t  \"Overlay\", \"Hard Light\", \"Soft Light\", \"Vivid Light\", \"Linear Light\", \"Pin Light\", \"Passthrough\", \"Multiply\"\n];\n\nmakeLookupTables();\n\n","/*\r\n    ChickenPaint\r\n    \r\n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\r\n    by Nicholas Sherlock / Chicken Smoothie.\r\n    \r\n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\r\n\r\n    ChickenPaint is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    ChickenPaint is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport CPBitmap from \"./CPBitmap.js\";\r\nimport CPRect from \"../util/CPRect.js\";\r\nimport {createCanvas, createImageData} from \"../util/Canvas.js\";\r\nimport {getRotatedCanvas} from \"./CPColorBmp.js\";\r\n\r\n/**\r\n * Create a new greyscale bitmap with the given parameters. The bitmap will be filled with black upon creation.\r\n *\r\n * @param {number} width\r\n * @param {number} height\r\n * @param {number} bitDepth - Bits per channel\r\n *\r\n * @constructor\r\n * @extends CPBitmap\r\n */\r\nexport default function CPGreyBmp(width, height, bitDepth) {\r\n    CPBitmap.call(this, width, height);\r\n\r\n    this.createBitmap(width, height, bitDepth);\r\n}\r\n\r\nCPGreyBmp.prototype = Object.create(CPBitmap.prototype);\r\nCPGreyBmp.prototype.constructor = CPGreyBmp;\r\n\r\nCPGreyBmp.prototype.createBitmap = function(width, height, bitDepth) {\r\n    this.bitDepth = bitDepth;\r\n\r\n    switch (bitDepth) {\r\n        case 32:\r\n            this.data = new Uint32Array(width * height);\r\n            break;\r\n        case 16:\r\n            this.data = new Uint16Array(width * height);\r\n            break;\r\n        case 8:\r\n        default:\r\n            this.data = new Uint8Array(width * height);\r\n    }\r\n};\r\n\r\nCPGreyBmp.prototype.clone = function() {\r\n    var\r\n        result = new CPGreyBmp(this.width, this.height, this.bitDepth);\r\n\r\n    result.copyPixelsFrom(this);\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Creates a CPGreyBmp from a portion of this bitmap\r\n *\r\n * @param {CPRect} rect\r\n * @returns {CPGreyBmp}\r\n */\r\nCPGreyBmp.prototype.cloneRect = function(rect) {\r\n    var\r\n        result = new CPGreyBmp(rect.getWidth(), rect.getHeight(), this.bitDepth);\r\n\r\n    result.copyBitmapRect(this, 0, 0, rect);\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Pixel access with friendly clipping.\r\n *\r\n * @returns {int} Pixel value\r\n */\r\nCPGreyBmp.prototype.getPixel = function(x, y) {\r\n    x = Math.max(0, Math.min(this.width - 1, x));\r\n    y = Math.max(0, Math.min(this.height - 1, y));\r\n\r\n    return this.data[this.offsetOfPixel(x, y)];\r\n};\r\n\r\nCPGreyBmp.prototype.clearAll = function(value) {\r\n    this.data.fill(value);\r\n};\r\n\r\n/**\r\n * Fill the given rectangle with the given value\r\n *\r\n * @param {CPRect} rect\r\n * @param {number} value\r\n */\r\nCPGreyBmp.prototype.clearRect = function(rect, value) {\r\n    rect = this.getBounds().clipTo(rect);\r\n\r\n    if (rect.equals(this.getBounds())) {\r\n        this.clearAll(value);\r\n    } else {\r\n        let\r\n            yStride = this.width,\r\n            fillWidth = rect.right - rect.left,\r\n            rowStartIndex = this.offsetOfPixel(rect.left, rect.top);\r\n\r\n        for (let y = rect.top; y < rect.bottom; y++, rowStartIndex += yStride) {\r\n            this.data.fill(value, rowStartIndex, rowStartIndex + fillWidth);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Use nearest-neighbor (subsampling) to scale that bitmap to replace the pixels of this one.\r\n *\r\n * @param {CPGreyBmp} that\r\n */\r\nCPGreyBmp.prototype.copyScaledNearestNeighbor = function(that) {\r\n    var\r\n        destPixIndex = 0,\r\n\r\n        xSkip = that.width / this.width,\r\n        ySkip = that.height / this.height,\r\n        srcRowStart;\r\n\r\n    for (var y = 0, srcRow = 0; y < this.height; y++, srcRow += ySkip) {\r\n        srcRowStart = that.offsetOfPixel(0, Math.round(srcRow));\r\n\r\n        for (var x = 0, srcCol = 0; x < this.width; x++, destPixIndex++, srcCol += xSkip) {\r\n            var\r\n                srcPixIndex = srcRowStart + Math.round(srcCol);\r\n\r\n            this.data[destPixIndex] = that.data[srcPixIndex];\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Flood fill the given color starting from the given point\r\n * @param {number} x\r\n * @param {number} y\r\n * @param {number} color\r\n */\r\nCPGreyBmp.prototype.floodFill = function(x, y, color) {\r\n    if (!this.isInside(x, y)) {\r\n        return;\r\n    }\r\n\r\n    color = color & 0xFF;\r\n\r\n    let\r\n        oldColor = this.getPixel(x, y),\r\n\r\n        stack = [],\r\n        clip = this.getBounds(),\r\n\r\n        data = this.data;\r\n\r\n    stack.push({x1: x, x2: x, y: y, dy: -1});\r\n    stack.push({x1: x, x2: x, y: y + 1, dy: 1});\r\n\r\n    if (color == oldColor) {\r\n        return;\r\n    }\r\n\r\n    while (stack.length > 0) {\r\n        let\r\n            line = stack.pop();\r\n\r\n        if (line.y < clip.top || line.y >= clip.bottom) {\r\n            continue;\r\n        }\r\n\r\n        let\r\n            lineOffset = this.offsetOfPixel(0, line.y),\r\n\r\n            left = line.x1, next;\r\n\r\n        while (left >= clip.left && data[left + lineOffset] == oldColor) {\r\n            data[left + lineOffset] = color;\r\n\r\n            left--;\r\n        }\r\n\r\n        if (left >= line.x1) {\r\n            while (left <= line.x2 && data[left + lineOffset] != oldColor) {\r\n                left++;\r\n            }\r\n            next = left + 1;\r\n            if (left > line.x2) {\r\n                continue;\r\n            }\r\n        } else {\r\n            left++;\r\n            if (left < line.x1) {\r\n                stack.push({x1: left, x2: line.x1 - 1, y: line.y - line.dy, dy: -line.dy});\r\n            }\r\n            next = line.x1 + 1;\r\n        }\r\n\r\n        do {\r\n            data[left + lineOffset] = color;\r\n\r\n            while (next < clip.right && data[next + lineOffset] == oldColor) {\r\n                data[next + lineOffset] = color;\r\n\r\n                next++;\r\n            }\r\n            stack.push({x1: left, x2: next - 1, y: line.y + line.dy, dy: line.dy});\r\n\r\n            if (next - 1 > line.x2) {\r\n                stack.push({x1: line.x2 + 1, x2: next - 1, y: line.y - line.dy, dy: -line.dy});\r\n            }\r\n\r\n            left = next + 1;\r\n            while (left <= line.x2 && data[left + lineOffset] != oldColor) {\r\n                left++;\r\n            }\r\n\r\n            next = left + 1;\r\n        } while (left <= line.x2);\r\n    }\r\n};\r\n\r\n/**\r\n * Replace the pixels in this image with a scaled down thumbnail of that image.\r\n *\r\n * @param {CPGreyBmp} that\r\n */\r\nCPGreyBmp.prototype.createThumbnailFrom = function(that) {\r\n    const\r\n        MAX_SAMPLES_PER_OUTPUT_PIXEL = 3,\r\n\r\n        numSamples = Math.min(Math.floor(that.width / this.width), MAX_SAMPLES_PER_OUTPUT_PIXEL);\r\n\r\n    if (numSamples < 2) {\r\n        // If we only take one sample per output pixel, there's no need for our filtering strategy\r\n        this.copyScaledNearestNeighbor(that);\r\n        return;\r\n    }\r\n\r\n    const\r\n        rowBuffer = new Uint16Array(this.width),\r\n        srcRowByteLength = that.width,\r\n\r\n        sourceBytesBetweenOutputCols = Math.floor(that.width / this.width),\r\n        intersampleXByteSpacing = Math.floor(that.width / this.width / numSamples),\r\n\r\n    /* Due to the floor() in intersampleXByteSkip, it's likely that the gap between the last sample for an output pixel\r\n     * and the start of the sample for the next pixel will be higher than the intersample gap. So we'll add this between\r\n     * pixels if needed.\r\n     */\r\n        interpixelXByteSkip = sourceBytesBetweenOutputCols - intersampleXByteSpacing * numSamples,\r\n\r\n    // Now we do the same for rows...\r\n        sourceRowsBetweenOutputRows = Math.floor(that.height / this.height),\r\n        intersampleYRowsSpacing = Math.floor(that.height / this.height / numSamples),\r\n\r\n        intersampleYByteSkip = intersampleYRowsSpacing * srcRowByteLength - sourceBytesBetweenOutputCols * this.width,\r\n        interpixelYByteSkip = (sourceRowsBetweenOutputRows - intersampleYRowsSpacing * numSamples) * srcRowByteLength;\r\n\r\n    let\r\n        srcPixIndex = 0, dstPixIndex = 0;\r\n\r\n    // For each output thumbnail row...\r\n    for (let y = 0; y < this.height; y++, srcPixIndex += interpixelYByteSkip) {\r\n        let\r\n            bufferIndex = 0;\r\n\r\n        rowBuffer.fill(0);\r\n\r\n        // Sum the contributions of the input rows that correspond to this output row\r\n        for (let y2 = 0; y2 < numSamples; y2++, srcPixIndex += intersampleYByteSkip) {\r\n            bufferIndex = 0;\r\n            for (let x = 0; x < this.width; x++, bufferIndex++, srcPixIndex += interpixelXByteSkip) {\r\n                for (let x2 = 0; x2 < numSamples; x2++, srcPixIndex += intersampleXByteSpacing) {\r\n                    rowBuffer[bufferIndex] += that.data[srcPixIndex];\r\n                }\r\n            }\r\n        }\r\n\r\n        // Now this thumbnail row is complete and we can write the buffer to the output\r\n        bufferIndex = 0;\r\n        for (let x = 0; x < this.width; x++, bufferIndex++, dstPixIndex++) {\r\n            this.data[dstPixIndex] = rowBuffer[bufferIndex] / (numSamples * numSamples);\r\n        }\r\n    }\r\n};\r\n\r\nCPGreyBmp.prototype.mirrorHorizontally = function() {\r\n    let\r\n        width = this.width,\r\n        height = this.height,\r\n        newData = new Uint8Array(width * height),\r\n        dstOffset = 0,\r\n        srcOffset = width;\r\n\r\n    for (let y = 0; y < height; y++, srcOffset += width + width) {\r\n        for (let x = 0; x < width; x++) {\r\n            newData[dstOffset++] = this.data[--srcOffset];\r\n        }\r\n    }\r\n\r\n    this.data = newData;\r\n};\r\n\r\nCPGreyBmp.prototype.applyLUT = function(lut) {\r\n    for (var i = 0; i < this.data.length; i++) {\r\n        this.data[i] = lut.table[this.data[i]];\r\n    }\r\n};\r\n\r\n/**\r\n * Get the image as Canvas.\r\n *\r\n * @param {int?} imageRotation - 90 degree clockwise rotations to apply to image\r\n * @returns {HTMLCanvasElement}\r\n */\r\nCPGreyBmp.prototype.getAsCanvas = function(imageRotation) {\r\n    var\r\n        imageData = this.getImageData(0, 0, this.width, this.height),\r\n\r\n        canvas = createCanvas(this.width, this.height),\r\n        context = canvas.getContext(\"2d\");\r\n\r\n    context.putImageData(imageData, 0, 0);\r\n\r\n    return getRotatedCanvas(canvas, imageRotation || 0);\r\n};\r\n\r\n/**\r\n * Get the image data within the given rectangle as an opaque RGBA ImageData object.\r\n *\r\n * @param {number} x\r\n * @param {number} y\r\n * @param {number} width\r\n * @param {number} height\r\n *\r\n * @returns {ImageData}\r\n */\r\nCPGreyBmp.prototype.getImageData = function(x, y, width, height) {\r\n    let\r\n        imageData = createImageData(width, height),\r\n\r\n        srcIndex = this.offsetOfPixel(x, y),\r\n        dstIndex = 0,\r\n\r\n        ySkip = this.width - width;\r\n\r\n    for (let y = 0; y < height; y++, srcIndex += ySkip) {\r\n        for (let x = 0; x < width; x++, srcIndex++) {\r\n            imageData.data[dstIndex++] = this.data[srcIndex];\r\n            imageData.data[dstIndex++] = this.data[srcIndex];\r\n            imageData.data[dstIndex++] = this.data[srcIndex];\r\n            imageData.data[dstIndex++] = 0xFF;\r\n        }\r\n    }\r\n\r\n    return imageData;\r\n};\r\n\r\n/**\r\n * Replace the pixels at the given coordinates with the red channel from the given image data.\r\n *\r\n * @param {ImageData} imageData\r\n * @param {number} x\r\n * @param {number} y\r\n */\r\nCPGreyBmp.prototype.pasteImageData = function(imageData, x, y) {\r\n    let\r\n        srcIndex = 0,\r\n        dstIndex = this.offsetOfPixel(x, y),\r\n\r\n        ySkip = this.width - imageData.width;\r\n\r\n    for (let y = 0; y < imageData.height; y++, dstIndex += ySkip) {\r\n        for (let x = 0; x < imageData.width; x++, srcIndex += 4, dstIndex++) {\r\n            this.data[dstIndex] = imageData.data[srcIndex]; // Use the first (red) channel as the intensity\r\n        }\r\n    }\r\n\r\n    return imageData;\r\n};\r\n\r\n/**\r\n * Copy pixels from that bitmap.\r\n *\r\n * @param {CPGreyBmp} bmp\r\n */\r\nCPGreyBmp.prototype.copyPixelsFrom = function(bmp) {\r\n    if (bmp.width != this.width || bmp.height != this.height || bmp.bitDepth != this.bitDepth) {\r\n        this.data = bmp.data.slice(0);\r\n\r\n        this.width = bmp.width;\r\n        this.height = bmp.height;\r\n        this.bitDepth = bmp.bitDepth;\r\n    } else {\r\n        this.data.set(bmp.data);\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * Get a pixel array of the xor of this bitmap and the given one, within the given rectangle\r\n *\r\n * @param {CPGreyBmp} bmp\r\n * @param {CPRect} rect\r\n *\r\n * @returns {Uint8Array}\r\n */\r\nCPGreyBmp.prototype.copyRectXOR = function(bmp, rect) {\r\n    rect = this.getBounds().clipTo(rect);\r\n\r\n    var\r\n        w = rect.getWidth(),\r\n        h = rect.getHeight(),\r\n\r\n        buffer = new Uint8Array(w * h),\r\n\r\n        outputIndex = 0,\r\n        bmp1Index = this.offsetOfPixel(rect.left, rect.top),\r\n        bmp2Index = bmp.offsetOfPixel(rect.left, rect.top),\r\n\r\n        bmp1YSkip = this.width - w,\r\n        bmp2YSkip = bmp.width - w;\r\n\r\n    for (var y = rect.top; y < rect.bottom; y++, bmp1Index += bmp1YSkip, bmp2Index += bmp2YSkip) {\r\n        for (var x = 0; x < w; x++, outputIndex++, bmp1Index++, bmp2Index++) {\r\n            buffer[outputIndex] = this.data[bmp1Index] ^ bmp.data[bmp2Index];\r\n        }\r\n    }\r\n\r\n    return buffer;\r\n};\r\n\r\nCPGreyBmp.prototype.setRectXOR = function(buffer, rect) {\r\n    rect = this.getBounds().clipTo(rect);\r\n\r\n    var\r\n        w = rect.getWidth(),\r\n        h = rect.getHeight(),\r\n\r\n        bmp1Index = this.offsetOfPixel(rect.left, rect.top),\r\n        bufferIndex = 0,\r\n\r\n        bmp1YSkip = this.width - w;\r\n\r\n    for (var y = 0; y < h; y++) {\r\n        for (var x = 0; x < w; x++) {\r\n            this.data[bmp1Index++] ^= buffer[bufferIndex++];\r\n        }\r\n        bmp1Index += bmp1YSkip;\r\n    }\r\n};\r\n\r\n/**\r\n * Copy the rectangle at srcRect from bmp onto this image at (dstX, dstY).\r\n *\r\n * @param {CPGreyBmp} bmp\r\n * @param {number} dstX\r\n * @param {number} dstY\r\n * @param {CPRect} srcRect\r\n */\r\nCPGreyBmp.prototype.copyBitmapRect = function(bmp, dstX, dstY, srcRect) {\r\n    var\r\n        dstRect = new CPRect(dstX, dstY, 0, 0);\r\n\r\n    srcRect = srcRect.clone();\r\n\r\n    this.getBounds().clipSourceDest(srcRect, dstRect);\r\n\r\n    var\r\n        w = dstRect.getWidth() | 0,\r\n        h = dstRect.getHeight() | 0;\r\n\r\n    // Are we just trying to duplicate the bitmap?\r\n    if (dstRect.left == 0 && dstRect.top == 0 && w == this.width && h == this.height && w == bmp.width && h == bmp.height) {\r\n        this.copyPixelsFrom(bmp);\r\n    } else {\r\n        var\r\n            dstIndex = this.offsetOfPixel(dstRect.left, dstRect.top),\r\n            dstYSkip = this.width - w,\r\n\r\n            srcIndex = bmp.offsetOfPixel(srcRect.left, srcRect.top),\r\n            srcYSkip = bmp.width - w;\r\n\r\n        for (var y = 0; y < h; y++, srcIndex += srcYSkip, dstIndex += dstYSkip) {\r\n            for (var x = 0; x < w; x++, srcIndex++, dstIndex++) {\r\n                this.data[dstIndex] = bmp.data[srcIndex];\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * @param rect CPRect\r\n * @param source CPColorBmp\r\n */\r\nCPGreyBmp.prototype.copyRegionHFlip = function(rect, source) {\r\n    rect = this.getBounds().clipTo(rect);\r\n\r\n    for (var y = rect.top; y < rect.bottom; y++) {\r\n        var\r\n            dstOffset = this.offsetOfPixel(rect.left, y),\r\n            srcOffset = source.offsetOfPixel(rect.right - 1, y);\r\n\r\n        for (var x = rect.left; x < rect.right; x++, srcOffset -= 2) {\r\n            this.data[dstOffset++] = source.data[srcOffset++];\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * @param rect CPRect\r\n * @param source CPColorBmp\r\n */\r\nCPGreyBmp.prototype.copyRegionVFlip = function(rect, source) {\r\n    rect = this.getBounds().clipTo(rect);\r\n\r\n    var\r\n        width = rect.getWidth();\r\n\r\n    for (var y = rect.top; y < rect.bottom; y++) {\r\n        var\r\n            dstOffset = this.offsetOfPixel(rect.left, y),\r\n            srcOffset = source.offsetOfPixel(rect.left, rect.bottom - 1 - (y - rect.top));\r\n\r\n        for (var x = 0; x < width; x++) {\r\n            this.data[dstOffset++] = source.data[srcOffset++];\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Blur the first `len` pixels in the src array by `radius` pixels, and store the result in the `dst` array.\r\n *\r\n * @param {Uint8Array} src\r\n * @param {Uint8Array} dst\r\n * @param {number} len\r\n * @param {number} radius - Number of pixels that will be averaged either side of a target pixel.\r\n */\r\nfunction boxBlurLine(src, dst, len, radius) {\r\n    var\r\n        pixelCount = 0, pixelSum = 0,\r\n        dstIndex;\r\n\r\n    for (let i = 0; i < radius && i < len; i++) {\r\n        pixelSum += src[i];\r\n        pixelCount++;\r\n    }\r\n\r\n    dstIndex = 0;\r\n    for (let i = 0; i < len; i++) {\r\n        // New pixel joins the window at the right\r\n        if (i + radius < len) {\r\n            pixelSum += src[i + radius];\r\n            pixelCount++;\r\n        }\r\n\r\n        dst[dstIndex++] = Math.round(pixelSum / pixelCount);\r\n\r\n        // Old pixel leaves the window at the left\r\n        if (i - radius >= 0) {\r\n            pixelSum -= src[i - radius];\r\n            pixelCount--;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Copy a column of pixels in the bitmap to the given R,G,B,A buffer.\r\n *\r\n * @param {number} x X-coordinate of column\r\n * @param {number} y Y-coordinate of top of column to copy\r\n * @param {number} len Number of pixels to copy\r\n * @param {TypedArray} buffer Pixel array\r\n */\r\nCPGreyBmp.prototype.copyPixelColumnToArray = function(x, y, len, buffer) {\r\n    var\r\n        yJump = this.width,\r\n        dstOffset = 0,\r\n        srcOffset = this.offsetOfPixel(x, y);\r\n\r\n    for (var i = 0; i < len; i++) {\r\n        buffer[dstOffset] = this.data[srcOffset];\r\n\r\n        srcOffset += yJump;\r\n        dstOffset++;\r\n    }\r\n};\r\n\r\n/**\r\n * Copy the pixels from the buffer to a column of pixels in the bitmap.\r\n *\r\n * @param {number} x X-coordinate of column\r\n * @param {number} y Y-coordinate of top of column to copy\r\n * @param {number} len Number of pixels to copy\r\n * @param {TypedArray} buffer Pixel array to copy from\r\n */\r\nCPGreyBmp.prototype.copyArrayToPixelColumn = function(x, y, len, buffer) {\r\n    var\r\n        yJump = this.width,\r\n        srcOffset = 0,\r\n        dstOffset = this.offsetOfPixel(x, y);\r\n\r\n    for (var i = 0; i < len; i++) {\r\n        this.data[dstOffset] = buffer[srcOffset];\r\n\r\n        dstOffset += yJump;\r\n        srcOffset++;\r\n    }\r\n};\r\n\r\nCPGreyBmp.prototype.boxBlur = function(rect, radiusX, radiusY) {\r\n    rect = this.getBounds().clipTo(rect);\r\n\r\n    let\r\n        rectWidth = rect.getWidth(),\r\n        rectHeight = rect.getHeight(),\r\n        rectLength = Math.max(rectWidth, rectHeight),\r\n\r\n        src = new this.data.constructor(rectLength),\r\n        dst = new this.data.constructor(rectLength);\r\n\r\n    for (let y = rect.top; y < rect.bottom; y++) {\r\n        var\r\n            pixOffset = this.offsetOfPixel(rect.left, y);\r\n\r\n        for (let x = 0; x < rectWidth; x++) {\r\n            src[x] = this.data[pixOffset++];\r\n        }\r\n\r\n        boxBlurLine(src, dst, rectWidth, radiusX);\r\n\r\n        pixOffset = this.offsetOfPixel(rect.left, y);\r\n\r\n        for (let x = 0; x < rectWidth; x++) {\r\n            this.data[pixOffset++] = dst[x];\r\n        }\r\n    }\r\n\r\n    for (let x = rect.left; x < rect.right; x++) {\r\n        this.copyPixelColumnToArray(x, rect.top, rectHeight, src);\r\n\r\n        boxBlurLine(src, dst, rectHeight, radiusY);\r\n\r\n        this.copyArrayToPixelColumn(x, rect.top, rectHeight, dst);\r\n    }\r\n};\r\n\r\nCPGreyBmp.prototype.offsetOfPixel = function(x, y) {\r\n    return y * this.width + x;\r\n};\r\n\r\n/**\r\n * @param {CPRect} rect\r\n */\r\nCPGreyBmp.prototype.fillWithNoise = function(rect) {\r\n    rect = this.getBounds().clipTo(rect);\r\n\r\n    var\r\n        yStride = this.width - rect.getWidth(),\r\n        pixIndex = this.offsetOfPixel(rect.left, rect.top);\r\n\r\n    for (var y = rect.top; y < rect.bottom; y++, pixIndex += yStride) {\r\n        for (var x = rect.left; x < rect.right; x++, pixIndex++) {\r\n            this.data[pixIndex] = (Math.random() * 0x100) | 0; // TODO we might usefully support bitmaps > 8 bits/channel here?\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * @param {CPRect} rect\r\n */\r\nCPGreyBmp.prototype.invert = function(rect) {\r\n    rect = this.getBounds().clipTo(rect);\r\n\r\n    var\r\n        yStride = this.width - rect.getWidth(),\r\n\r\n        pixIndex = this.offsetOfPixel(rect.left, rect.top);\r\n\r\n    for (var y = rect.top; y < rect.bottom; y++, pixIndex += yStride) {\r\n        for (var x = rect.left; x < rect.right; x++, pixIndex++) {\r\n            this.data[pixIndex] = ~this.data[pixIndex];\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * @param {CPRect} rect\r\n */\r\nCPGreyBmp.prototype.brightnessToOpacity = function(rect) {\r\n    rect = this.getBounds().clipTo(rect);\r\n    const threshold = 250;\r\n\r\n    const yStride = (this.width - rect.getWidth()) * CPGreyBmp.BYTES_PER_PIXEL;\r\n    let pixIndex = this.offsetOfPixel(rect.left, rect.top);\r\n\r\n    for (let y = rect.top; y < rect.bottom; y++, pixIndex += yStride) {\r\n        for (let x = rect.left; x < rect.right; x++, pixIndex++) { // CPGreyBmp は1チャンネルなのでインデックスを1つだけ増やす\r\n            // 輝度の計算（グレースケール画像なので直接値を使用）\r\n            const brightness = this.data[pixIndex];\r\n\r\n            // 元のアルファ値を取得\r\n            const originalAlpha = this.data[pixIndex + CPGreyBmp.ALPHA_BYTE_OFFSET] / 255;\r\n\r\n            // しきい値を基に透明度を設定\r\n            let newAlpha;\r\n            if (brightness > threshold) {\r\n                newAlpha = 0; // 完全に透明\r\n            } else {\r\n                // 線形にマッピングして中間の透明度を計算 (輝度が高いほど透明に近づく)\r\n                newAlpha = Math.round((1 - brightness / threshold) * 255);\r\n            }\r\n\r\n            // 元のアルファ値を考慮して透明度を更新\r\n            this.data[pixIndex + CPGreyBmp.ALPHA_BYTE_OFFSET] = Math.round(newAlpha * originalAlpha);\r\n\r\n            // 不透明な線画の明度を低下させる\r\n            if (newAlpha > 0) { // 不透明な部分の明度を0に\r\n                this.data[pixIndex] = 0;\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Get a rectangle that encloses pixels in the bitmap which don't match the given value within the given initialBounds\r\n * (or an empty rect if all pixels inside the given bounds match the value).\r\n *\r\n * This can be used to find a rectangle which encloses the non-white pixels of a mask.\r\n *\r\n * @param {CPRect} initialBounds - The rect to search within (pass getBounds() to search the whole bitmap)\r\n * @param {number} value\r\n *\r\n * @returns {CPRect}\r\n */\r\nCPGreyBmp.prototype.getValueBounds = function(initialBounds, value) {\r\n    var\r\n        pixIndex,\r\n        result = initialBounds.clone(),\r\n        x, y,\r\n        yStride,\r\n        found;\r\n\r\n    // Find the first non-matching row\r\n    yStride = this.width - result.getWidth();\r\n    pixIndex = this.offsetOfPixel(result.left, result.top);\r\n\r\n    for (y = result.top; y < result.bottom; y++, pixIndex += yStride) {\r\n        found = false;\r\n\r\n        for (x = result.left; x < result.right; x++, pixIndex++) {\r\n            if (this.data[pixIndex] != value) {\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (found) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    result.top = y;\r\n\r\n    if (result.top == result.bottom) {\r\n        // Rect is empty, no opaque pixels in the initialBounds\r\n        return result;\r\n    }\r\n\r\n    // Now the last non-matching row\r\n    pixIndex = this.offsetOfPixel(result.right - 1, result.bottom - 1);\r\n    for (y = result.bottom - 1; y >= result.top; y--, pixIndex -= yStride) {\r\n        found = false;\r\n        for (x = result.right - 1; x >= result.left; x--, pixIndex--) {\r\n            if (this.data[pixIndex] != value) {\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (found) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    result.bottom = y + 1; /* +1 since the bottom/right edges of the rect are exclusive */\r\n\r\n    // Now columns from the left\r\n    yStride = this.width;\r\n    for (x = result.left; x < result.right; x++) {\r\n        pixIndex = this.offsetOfPixel(x, result.top);\r\n\r\n        found = false;\r\n        for (y = result.top; y < result.bottom; y++, pixIndex += yStride) {\r\n            if (this.data[pixIndex] != value) {\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (found) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    result.left = x;\r\n\r\n    // And columns from the right\r\n    for (x = result.right - 1; x >= result.left; x--) {\r\n        pixIndex = this.offsetOfPixel(x, result.top);\r\n\r\n        found = false;\r\n        for (y = result.top; y < result.bottom; y++, pixIndex += yStride) {\r\n            if (this.data[pixIndex] != value) {\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (found) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    result.right = x + 1;\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Replace the pixels in the given rect with the given horizontal gradient.\r\n *\r\n * @param rect CPRect\r\n * @param fromX int\r\n * @param toX int\r\n * @param gradientPoints int[]\r\n */\r\nCPGreyBmp.prototype.gradientHorzReplace = function(rect, fromX, toX, gradientPoints) {\r\n    var\r\n        fromColor = gradientPoints[0] & 0xFF,\r\n        toColor = gradientPoints[1] & 0xFF,\r\n\r\n        yStride = this.width - rect.getWidth(),\r\n        pixIndex = this.offsetOfPixel(rect.left, rect.top) | 0,\r\n        h = (rect.bottom - rect.top) | 0;\r\n\r\n    if (toX < fromX) {\r\n        var\r\n            temp = toX;\r\n        toX = fromX;\r\n        fromX = temp;\r\n\r\n        temp = fromColor;\r\n        fromColor = toColor;\r\n        toColor = temp;\r\n    }\r\n\r\n    var\r\n        gradientRange = (toX - fromX) | 0,\r\n        colorStep = (toColor - fromColor) / gradientRange,\r\n\r\n        jump = Math.max(rect.left - fromX, 0);\r\n\r\n    for (var y = 0; y < h; y++, pixIndex += yStride) {\r\n        // The solid color section before the gradient\r\n        var\r\n            x = rect.left;\r\n\r\n        for (var xEnd = Math.min(fromX, rect.right) | 0; x < xEnd; x++, pixIndex++) {\r\n            this.data[pixIndex] = fromColor;\r\n        }\r\n\r\n        // In the gradient\r\n        var\r\n            color1 = fromColor + colorStep * jump;\r\n\r\n        for (xEnd = Math.min(toX, rect.right) | 0; x < xEnd; x++, pixIndex++) {\r\n            this.data[pixIndex] = color1;\r\n\r\n            color1 += colorStep;\r\n        }\r\n\r\n        // The section after the end of the gradient\r\n        for (; x < rect.right; x++, pixIndex++) {\r\n            this.data[pixIndex] = toColor;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Replace the pixels in the given rect with the given vertical gradient.\r\n *\r\n * @param {CPRect} rect\r\n * @param fromY int\r\n * @param toY int\r\n * @param gradientPoints int[]\r\n */\r\nCPGreyBmp.prototype.gradientVertReplace = function(rect, fromY, toY, gradientPoints) {\r\n    let\r\n        fromColor = gradientPoints[0] & 0xFF,\r\n        toColor = gradientPoints[1] & 0xFF,\r\n\r\n        yStride = this.width - rect.getWidth(),\r\n        pixIndex = this.offsetOfPixel(rect.left, rect.top) | 0,\r\n        w = (rect.right - rect.left) | 0;\r\n\r\n    if (toY < fromY) {\r\n        let\r\n            temp = toY;\r\n        toY = fromY;\r\n        fromY = temp;\r\n\r\n        temp = fromColor;\r\n        fromColor = toColor;\r\n        toColor = temp;\r\n    }\r\n\r\n    let\r\n        y = rect.top;\r\n\r\n    // The solid color section before the start of the gradient\r\n    for (let yEnd = Math.min(rect.bottom, fromY) | 0; y < yEnd; y++, pixIndex += yStride) {\r\n        for (let x = 0; x < w; x++, pixIndex++) {\r\n            this.data[pixIndex] = fromColor;\r\n        }\r\n    }\r\n\r\n    // Inside the gradient\r\n    var\r\n        gradientRange = (toY - fromY) | 0,\r\n        colorStep = (toColor - fromColor) / gradientRange,\r\n\r\n        jump = Math.max(y - fromY, 0),\r\n        color1 = fromColor + colorStep * jump;\r\n\r\n    for (let yEnd = Math.min(rect.bottom, toY) | 0; y < yEnd; y++, pixIndex += yStride) {\r\n        for (let x = 0; x < w; x++, pixIndex++) {\r\n            this.data[pixIndex] = color1;\r\n        }\r\n\r\n        color1 += colorStep;\r\n    }\r\n\r\n    // The section after the end of the gradient\r\n    for (; y < rect.bottom; y++, pixIndex += yStride) {\r\n        for (let x = 0; x < w; x++, pixIndex++) {\r\n            this.data[pixIndex] = toColor;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Replace the pixels in the given rect with the given gradient.\r\n *\r\n * @param rect CPRect\r\n * @param fromX int\r\n * @param fromY int\r\n * @param toX int\r\n * @param toY int\r\n * @param gradientPoints int[]\r\n */\r\nCPGreyBmp.prototype.gradientReplace = function(rect, fromX, fromY, toX, toY, gradientPoints) {\r\n    var\r\n        yStride = this.width - rect.getWidth(),\r\n        pixIndex = this.offsetOfPixel(rect.left, rect.top) | 0,\r\n        w = (rect.right - rect.left) | 0,\r\n\r\n        fromColor = gradientPoints[0] & 0xFF,\r\n        toColor = gradientPoints[1] & 0xFF,\r\n\r\n    // How many pixels vertically does the gradient sequence complete over (+infinity for horizontal gradients!)\r\n        vertRange = (toY - fromY) + ((toX - fromX) * (toX - fromX)) / (toY - fromY),\r\n    // Same for horizontal\r\n        horzRange = (toX - fromX) + ((toY - fromY) * (toY - fromY)) / (toX - fromX),\r\n        horzStep = 1 / horzRange;\r\n\r\n    for (var y = rect.top; y < rect.bottom; y++, pixIndex += yStride) {\r\n        var\r\n        // The position the row starts at in the gradient [0.0 ... 1.0)\r\n            prop = (rect.left - fromX) / horzRange + (y - fromY) / vertRange;\r\n\r\n        for (var x = 0; x < w; x++, pixIndex++) {\r\n            var\r\n                propClamped = Math.min(Math.max(prop, 0.0), 1.0),\r\n                invPropClamped = 1 - propClamped;\r\n\r\n            this.data[pixIndex] = fromColor * invPropClamped + toColor * propClamped;\r\n\r\n            prop += horzStep;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Alpha blend the given gradient onto the pixels in the given rect.\r\n *\r\n * @param rect CPRect\r\n * @param fromX int\r\n * @param fromY int\r\n * @param toX int\r\n * @param toY int\r\n * @param gradientPoints int[]\r\n */\r\nCPGreyBmp.prototype.gradientAlpha = function(rect, fromX, fromY, toX, toY, gradientPoints) {\r\n    var\r\n        yStride = this.width - rect.getWidth(),\r\n        pixIndex = this.offsetOfPixel(rect.left, rect.top) | 0,\r\n        w = (rect.right - rect.left) | 0,\r\n\r\n        fromColor = {\r\n            c: gradientPoints[0] & 0xFF,\r\n            a: (gradientPoints[0] >> 24) & 0xFF\r\n        },\r\n        toColor = {\r\n            c: gradientPoints[1] & 0xFF,\r\n            a: (gradientPoints[1] >> 24) & 0xFF\r\n        },\r\n\r\n    // How many pixels vertically does the gradient sequence complete over (+infinity for horizontal gradients!)\r\n        vertRange = (toY - fromY) + ((toX - fromX) * (toX - fromX)) / (toY - fromY),\r\n    // Same for horizontal\r\n        horzRange = (toX - fromX) + ((toY - fromY) * (toY - fromY)) / (toX - fromX),\r\n        horzStep = 1 / horzRange;\r\n\r\n    for (var y = rect.top; y < rect.bottom; y++, pixIndex += yStride) {\r\n        var\r\n        // The position the row starts at in the gradient [0.0 ... 1.0)\r\n            prop = (rect.left - fromX) / horzRange + (y - fromY) / vertRange;\r\n\r\n        for (var x = 0; x < w; x++, pixIndex++) {\r\n            var\r\n                propClamped = Math.min(Math.max(prop, 0.0), 1.0),\r\n                invPropClamped = 1 - propClamped,\r\n\r\n            // The gradient color to draw\r\n                color1 = fromColor.c * invPropClamped + toColor.c * propClamped,\r\n                alpha1 = fromColor.a * invPropClamped + toColor.a * propClamped;\r\n\r\n            var\r\n                invAlpha = 255 - alpha1;\r\n\r\n            this.data[pixIndex] = ((color1 * alpha1 + this.data[pixIndex] * invAlpha) / 255) | 0;\r\n\r\n            prop += horzStep;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Draw a gradient which begins at fromX, fromY and ends at toX, toY, clipped to the given rect, on top of the\r\n * pixels in the bitmap.\r\n *\r\n * @param {CPRect} rect\r\n * @param {Object[]} gradientPoints Array with gradient colors (ARGB integers)\r\n * @param {number} fromX\r\n * @param {number} fromY\r\n * @param {number} toX\r\n * @param {number} toY\r\n * @param {boolean} replace - True if the contents of the destination should be ignored (opaque blend)\r\n */\r\nCPGreyBmp.prototype.gradient = function(rect, fromX, fromY, toX, toY, gradientPoints, replace) {\r\n    rect = this.getBounds().clipTo(rect);\r\n\r\n    // Degenerate case\r\n    if (fromX == toX && fromY == toY) {\r\n        return;\r\n    }\r\n\r\n    // Opaque blend if possible\r\n    if (replace || gradientPoints[0] >>> 24 == 255 && gradientPoints[1] >>> 24 == 255) {\r\n        if (fromX == toX) {\r\n            this.gradientVertReplace(rect, fromY, toY, gradientPoints);\r\n        } else if (fromY == toY) {\r\n            this.gradientHorzReplace(rect, fromX, toX, gradientPoints);\r\n        } else {\r\n            this.gradientReplace(rect, fromX, fromY, toX, toY, gradientPoints);\r\n        }\r\n    } else {\r\n        this.gradientAlpha(rect, fromX, fromY, toX, toY, gradientPoints);\r\n    }\r\n};\r\n\r\nCPGreyBmp.prototype.equals = function(that) {\r\n\tif (this.width != that.width || this.height != that.height) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tfor (let pixIndex = 0; pixIndex < this.data.length; pixIndex++) {\r\n\t\tif (this.data[pixIndex] != that.data[pixIndex]) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\treturn true;\r\n};","/*\r\n\tChickenPaint\r\n\r\n\tChickenPaint is a translation of ChibiPaint from Java to JavaScript\r\n\tby Nicholas Sherlock / Chicken Smoothie.\r\n\r\n\tChibiPaint is Copyright (c) 2006-2008 Marc Schefer\r\n\r\n\tChickenPaint is free software: you can redistribute it and/or modify\r\n\tit under the terms of the GNU General Public License as published by\r\n\tthe Free Software Foundation, either version 3 of the License, or\r\n\t(at your option) any later version.\r\n\r\n\tChickenPaint is distributed in the hope that it will be useful,\r\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n\tGNU General Public License for more details.\r\n\r\n\tYou should have received a copy of the GNU General Public License\r\n\talong with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n/**\r\n * Extra functions for CPBlend that don't need to be generated dynamically.\r\n */\r\n\r\nimport CPBlend from './CPBlend.js';\r\nimport CPRect from '../util/CPRect.js';\r\nimport CPColorBmp from \"./CPColorBmp.js\";\r\nimport CPGreyBmp from \"./CPGreyBmp.js\";\r\n\r\nconst\r\n\tBYTES_PER_PIXEL = 4,\r\n\tALPHA_BYTE_OFFSET = 3;\r\n\r\nCPBlend.blendFunctionNameForParameters = function(fusionHasTransparency, imageAlpha, imageBlendMode, hasMask) {\r\n    var\r\n        funcName = CPBlend.BLEND_MODE_CODENAMES[imageBlendMode] + \"Onto\";\r\n\r\n    if (fusionHasTransparency) {\r\n        funcName += \"TransparentFusion\";\r\n    } else {\r\n        funcName += \"OpaqueFusion\";\r\n    }\r\n\r\n    if (imageAlpha == 100) {\r\n        funcName += \"WithOpaqueLayer\";\r\n    } else {\r\n        funcName += \"WithTransparentLayer\";\r\n    }\r\n\r\n    if (hasMask) {\r\n        funcName += \"Masked\";\r\n    }\r\n\r\n    return funcName;\r\n};\r\n\r\n/**\r\n * Blends the given image on top of the fusion.\r\n *\r\n * @param {CPColorBmp} fusion - Image to fuse on top of\r\n * @param {boolean} fusionHasTransparency - True if the fusion layer has alpha < 100, or any transparent pixels.\r\n * @param {CPColorBmp} image - Image that should be drawn on top of the fusion\r\n * @param {number} imageAlpha - Alpha [0...100] to apply to the image\r\n * @param {number} imageBlendMode - Blending mode (CPBlend.LM_*) to apply to the image\r\n * @param {CPRect} rect - The rectangle of pixels that should be fused.\r\n * @param {?CPGreyBmp} mask - An optional mask to apply to the image\r\n */\r\nCPBlend.fuseImageOntoImage = function (fusion, fusionHasTransparency, image, imageAlpha, imageBlendMode, rect, mask) {\r\n\tif (imageAlpha <= 0) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tlet\r\n\t\tfuncName = CPBlend.blendFunctionNameForParameters(fusionHasTransparency, imageAlpha, imageBlendMode, mask != null);\r\n\r\n\trect = fusion.getBounds().clipTo(rect);\r\n\r\n\tthis[funcName](fusion, image, imageAlpha, rect, mask);\r\n};\r\n\r\nCPBlend.normalFuseImageOntoImageAtPosition = function(fusion, image, destX, destY, sourceRect) {\r\n\tvar\r\n\t\tsourceRectCopy = sourceRect.clone(),\r\n\t\tdestRect = new CPRect(destX, destY, 0, 0);\r\n\r\n\tfusion.getBounds().clipSourceDest(sourceRectCopy, destRect);\r\n\r\n\tthis._normalFuseImageOntoImageAtPosition(fusion, image, 100, sourceRectCopy, destRect.left, destRect.top);\r\n};\r\n\r\n/**\r\n * Multiplies the given alpha into the alpha of the individual pixels of the image.\r\n *\r\n * @param {CPColorBmp} image\r\n * @param {number} alpha - [0...100] alpha to apply\r\n */\r\nCPBlend.multiplyAlphaBy = function (image, alpha) {\r\n\tif (alpha < 100) {\r\n\t\tif (alpha == 0) {\r\n\t\t\timage.clearAll(0);\r\n\t\t} else {\r\n\t\t\tvar\r\n\t\t\t\timageData = image.data;\r\n\r\n\t\t\tfor (var pixIndex = ALPHA_BYTE_OFFSET; pixIndex < imageData.length; pixIndex += BYTES_PER_PIXEL) {\r\n\t\t\t\timageData[pixIndex] = Math.round(imageData[pixIndex] * alpha / 100);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * Multiplies the values from the mask, and the given overall alpha, into the alpha channel of the image.\r\n *\r\n * @param {CPColorBmp} image\r\n * @param {number} alpha\r\n * @param {CPGreyBmp} mask\r\n */\r\nCPBlend.multiplyAlphaByMask = function(image, alpha, mask) {\r\n\tvar\r\n\t\tscale = alpha / (100 * 255);\r\n\t\r\n\tfor (var dstIndex = CPColorBmp.ALPHA_BYTE_OFFSET, srcIndex = 0; dstIndex < image.data.length; dstIndex += CPColorBmp.BYTES_PER_PIXEL, srcIndex++) {\r\n\t\timage.data[dstIndex] = Math.round(image.data[dstIndex] * mask.data[srcIndex] * scale);\r\n\t}\r\n};\r\n\r\n/**\r\n * Multiplies the given alpha into the alpha of the individual pixels of the image and stores the\r\n * resulting pixels into the specified image.\r\n *\r\n * @param {CPColorBmp} dest\r\n * @param {CPColorBmp} image\r\n * @param {number} alpha - [0...100] alpha to apply\r\n * @param {CPRect} rect\r\n */\r\nCPBlend.copyAndMultiplyAlphaBy = function (dest, image, alpha, rect) {\r\n\tif (alpha == 100) {\r\n\t\tdest.copyBitmapRect(image, rect.left, rect.top, rect);\r\n\t} else if (alpha == 0) {\r\n\t\tdest.clearRect(rect, 0);\r\n\t} else {\r\n\t\tvar\r\n\t\t\timageData = image.data;\r\n\r\n\t\tfor (var pixIndex = 0; pixIndex < imageData.length; pixIndex += BYTES_PER_PIXEL) {\r\n\t\t\timageData[pixIndex] = imageData[pixIndex];\r\n\t\t\timageData[pixIndex + 1] = imageData[pixIndex + 1];\r\n\t\t\timageData[pixIndex + 2] = imageData[pixIndex + 2];\r\n\r\n\t\t\timageData[pixIndex + ALPHA_BYTE_OFFSET] = Math.round(imageData[pixIndex + ALPHA_BYTE_OFFSET] * alpha / 100);\r\n\t\t}\r\n\t}\r\n};\r\n","/*\r\n\tChickenPaint\r\n\r\n\tChickenPaint is a translation of ChibiPaint from Java to JavaScript\r\n\tby Nicholas Sherlock / Chicken Smoothie.\r\n\r\n\tChibiPaint is Copyright (c) 2006-2008 Marc Schefer\r\n\r\n\tChickenPaint is free software: you can redistribute it and/or modify\r\n\tit under the terms of the GNU General Public License as published by\r\n\tthe Free Software Foundation, either version 3 of the License, or\r\n\t(at your option) any later version.\r\n\r\n\tChickenPaint is distributed in the hope that it will be useful,\r\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n\tGNU General Public License for more details.\r\n\r\n\tYou should have received a copy of the GNU General Public License\r\n\talong with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport CPBlend from './CPBlend.js';\r\nimport './CPBlendAdditional.js';\r\nimport CPLayer from './CPLayer.js';\r\nimport CPLayerGroup from './CPLayerGroup.js';\r\nimport CPColorBmp from \"./CPColorBmp.js\";\r\nimport CPImageLayer from \"./CPImageLayer.js\";\r\nimport CPRect from \"../util/CPRect.js\";\r\n\r\n/**\r\n *\r\n * @param {number} width\r\n * @param {number} height\r\n * @param {(CPLayer|CPLayerGroup)} layer\r\n * @constructor\r\n */\r\nfunction CPBlendNode(width, height, layer) {\r\n\tif (layer) {\r\n\t\tthis.isGroup = layer instanceof CPLayerGroup;\r\n\t\tthis.image = layer.image;\r\n\t\tthis.mask = layer.getEffectiveMask();\r\n\t\tthis.layer = layer;\r\n\t\tthis.blendMode = layer.blendMode;\r\n\t\tthis.alpha = layer.alpha;\r\n\t\tthis.visible = layer.visible;\r\n\t} else {\r\n\t\tthis.isGroup = true;\r\n\t\tthis.image = null;\r\n\t\tthis.mask = null;\r\n\t\tthis.layer = null;\r\n\t\tthis.blendMode = CPBlend.LM_PASSTHROUGH;\r\n\t\tthis.alpha = 100;\r\n\t\tthis.visible = true;\r\n\t}\r\n\r\n\t/**\r\n\t * For group nodes, this is the rectangle of data which is dirty (due to changes in child nodes) and needs to be re-merged\r\n\t *\r\n\t * @type {CPRect}\r\n\t */\r\n\tthis.dirtyRect = new CPRect(0, 0, width, height);\r\n\t\r\n\t/**\r\n\t *\r\n\t * @type {CPBlendNode[]}\r\n\t */\r\n\tthis.layers = [];\r\n\t\r\n\t/**\r\n\t * @type {?CPBlendNode}\r\n\t */\r\n\tthis.parent = null;\r\n\r\n\t/**\r\n\t * When true, we should clip the layers in this group to the bottom layer of the stack\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tthis.clip = false;\r\n}\r\n\r\n/**\r\n * Add zero (null), one (CPBlendNode) or more (CPBlendNode[]) children to this node.\r\n *\r\n * @param {(?CPBlendNode|CPBlendNode[])} children\r\n */\r\nCPBlendNode.prototype.addChildren = function(children) {\r\n\tif (children != null) {\r\n\t\tif (Array.isArray(children)) {\r\n\t\t\tchildren.forEach(child => (child.parent = this));\r\n\r\n\t\t\tthis.layers = this.layers.concat(children);\r\n\t\t} else {\r\n\t\t\tlet\r\n\t\t\t\tchild = children;\r\n\r\n\t\t\tchild.parent = this;\r\n\r\n\t\t\tthis.layers.push(child);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * Analyses a stack of layers in a CPLayerGroup and optimizes a drawing scheme for them. Then you can reuse that\r\n * scheme to blend all the layers together.\r\n *\r\n * @param {CPLayerGroup} drawingRootGroup - The root of the layer stack.\r\n * @param {number} width - Dimension of layers and final merge result.\r\n * @param {number} height\r\n * @param {boolean} requireSimpleFusion - Set to true if the result must have alpha 100 and no mask.\r\n *\r\n * @constructor\r\n */\r\nexport default function CPBlendTree(drawingRootGroup, width, height, requireSimpleFusion) {\r\n\tconst\r\n\t\tDEBUG = false;\r\n\r\n\tlet\r\n\t\t/**\r\n\t\t * @type {CPBlendNode}\r\n\t\t */\r\n\t\tdrawTree,\r\n\r\n\t\t/**\r\n\t\t * Unused buffers we could re-use instead of allocating more memory.\r\n\t\t *\r\n \t\t * @type {CPColorBmp[]}\r\n\t\t */\r\n\t\tspareBuffers = [],\r\n\r\n\t\t/**\r\n\t\t * @type {Map}\r\n\t\t */\r\n\t\tnodeForLayer = new Map();\r\n\r\n\tfunction allocateBuffer() {\r\n\t\tif (spareBuffers.length > 0) {\r\n\t\t\treturn spareBuffers.pop();\r\n\t\t}\r\n\r\n\t\treturn new CPColorBmp(width, height);\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param {CPBlendNode} groupNode\r\n\t * @returns {?CPBlendNode|CPBlendNode[]}\r\n\t */\r\n\tfunction optimizeGroupNode(groupNode) {\r\n\t\tif (groupNode.layers.length == 0) {\r\n\t\t\t// Group was empty, so omit it\r\n\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tif (groupNode.layers.length == 1 && (groupNode.mask == null || groupNode.layers[0].mask == null)) {\r\n\t\t\t/*\r\n\t\t\t * Replace this group with the layer it contains (combine the alpha of the two layers)\r\n\t\t\t * At most one of the two layers may have a mask, so that we can use that mask for both of them.\r\n\t\t\t */\r\n\t\t\tlet\r\n\t\t\t\tflattenedNode = groupNode.layers[0];\r\n\r\n\t\t\tflattenedNode.alpha = Math.round(groupNode.alpha * flattenedNode.alpha / 100);\r\n\t\t\tif (groupNode.blendMode != CPBlend.LM_PASSTHROUGH) {\r\n\t\t\t\tflattenedNode.blendMode = groupNode.blendMode;\r\n\t\t\t}\r\n\r\n\t\t\tflattenedNode.mask = groupNode.mask || flattenedNode.mask;\r\n\r\n\t\t\t/* However, make sure that if someone invalidates the group node (i.e. draws on its mask) we invalidate this\r\n\t\t\t * new merged node too.\r\n\t\t\t */\r\n\t\t\tif (groupNode.layer) {\r\n\t\t\t\tnodeForLayer.set(groupNode.layer, flattenedNode);\r\n\t\t\t}\r\n\r\n\t\t\treturn flattenedNode;\r\n\t\t}\r\n\r\n\t\t// Replace logically-transparent pass-through groups with their contents\r\n\t\tif (groupNode.blendMode == CPBlend.LM_PASSTHROUGH && groupNode.alpha == 100 && groupNode.mask == null) {\r\n\t\t\treturn groupNode.layers;\r\n\t\t}\r\n\r\n\t\t// Since we didn't fall into any of the optimized cases, our group must need a temporary buffer to merge its children into\r\n\t\tgroupNode.image = allocateBuffer();\r\n\r\n\t\treturn groupNode;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param {CPLayer} layer\r\n\t * @returns {CPBlendNode}\r\n\t */\r\n\tfunction createNodeForLayer(layer) {\r\n\t\tlet\r\n\t\t\tnode = new CPBlendNode(width, height, layer);\r\n\r\n\t\tnodeForLayer.set(layer, node);\r\n\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * Build a CPBlendNode for this CPLayerGroup and return it, or null if this group doesn't draw anything.\r\n\t *\r\n\t * @param {CPLayerGroup} layerGroup\r\n\t * @returns {?CPBlendNode|CPBlendNode[]}\r\n\t */\r\n\tfunction buildTreeInternal(layerGroup) {\r\n\t\tif (layerGroup.getEffectiveAlpha() == 0) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tlet\r\n\t\t\ttreeNode = createNodeForLayer(layerGroup);\r\n\r\n\t\tfor (let i = 0; i < layerGroup.layers.length; i++) {\r\n\t\t\tlet\r\n\t\t\t\tchildLayer = layerGroup.layers[i],\r\n\t\t\t\tnextChild = layerGroup.layers[i + 1];\r\n\r\n\t\t\t// Do we need to create a clipping group?\r\n\t\t\tif (childLayer instanceof CPImageLayer && nextChild && nextChild.clip) {\r\n\t\t\t\tlet\r\n\t\t\t\t\tclippingGroupNode = new CPBlendNode(width, height, null),\r\n\t\t\t\t\tj;\r\n\r\n\t\t\t\tclippingGroupNode.blendMode = childLayer.blendMode;\r\n\t\t\t\tclippingGroupNode.alpha = 100;\r\n\t\t\t\tclippingGroupNode.clip = true;\r\n\r\n\t\t\t\tclippingGroupNode.addChildren(createNodeForLayer(childLayer));\r\n\r\n\t\t\t\t// All the contiguous layers above us with \"clip\" set will become the children of the new group\r\n\t\t\t\tfor (j = i + 1; j < layerGroup.layers.length; j++) {\r\n\t\t\t\t\tif (layerGroup.layers[j].clip) {\r\n\t\t\t\t\t\tif (layerGroup.layers[j].getEffectiveAlpha() > 0) {\r\n\t\t\t\t\t\t\tclippingGroupNode.addChildren(createNodeForLayer(layerGroup.layers[j]));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If the clipping base is invisible, so will the children be (so drop them here by not adding them anywhere)\r\n\t\t\t\tif (childLayer.getEffectiveAlpha() > 0) {\r\n\t\t\t\t\ttreeNode.addChildren(optimizeGroupNode(clippingGroupNode));\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Skip the layers we just added\r\n\t\t\t\ti = j - 1;\r\n\t\t\t} else if (childLayer instanceof CPLayerGroup) {\r\n\t\t\t\ttreeNode.addChildren(buildTreeInternal(childLayer));\r\n\t\t\t} else if (childLayer.getEffectiveAlpha() > 0) {\r\n\t\t\t\ttreeNode.addChildren(createNodeForLayer(childLayer));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn optimizeGroupNode(treeNode);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {CPBlendNode} node\r\n\t * @param {CPRect} rect\r\n\t */\r\n\tfunction invalidateNodeRect(node, rect) {\r\n\t\tif (node) {\r\n\t\t\tnode.dirtyRect.union(rect);\r\n\r\n\t\t\tinvalidateNodeRect(node.parent, rect);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Mark an area of a layer as updated (so next time fusion is called, it must be redrawn).\r\n\t *\r\n\t * @param {CPLayer} layer\r\n\t * @param {CPRect} rect\r\n\t */\r\n\tthis.invalidateLayerRect = function(layer, rect) {\r\n\t\tlet\r\n\t\t\tnode = nodeForLayer.get(layer);\r\n\r\n\t\tinvalidateNodeRect(node, rect);\r\n\t};\r\n\r\n\t/**\r\n\t * Build and optimize the blend tree if it was not already built.\r\n\t */\r\n\tthis.buildTree = function() {\r\n\t\tif (!drawTree) {\r\n\t\t\tdrawTree = buildTreeInternal(drawingRootGroup);\r\n\r\n\t\t\tif (!drawTree) {\r\n\t\t\t\t/*\r\n\t\t\t\t * No layers in the image to draw, so clear a buffer to transparent and use that.\r\n\t\t\t\t * This doesn't need to be fast because documents with no visible layers are not useful at all.\r\n\t\t\t\t */\r\n\t\t\t\tdrawTree = new CPBlendNode(width, height, {\r\n\t\t\t\t\timage: allocateBuffer(),\r\n\t\t\t\t\tblendMode: CPBlend.LM_NORMAL,\r\n\t\t\t\t\talpha: 100,\r\n\t\t\t\t\tgetEffectiveMask: () => null,\r\n\t\t\t\t\tvisible: true\r\n\t\t\t\t});\r\n\t\t\t\tdrawTree.image.clearAll(0);\r\n\t\t\t} else {\r\n\t\t\t\t/*\r\n\t\t\t\t * Caller wants fusion to be a single opaque node, so add a group node as a wrapper if needed (to hold\r\n\t\t\t\t * a buffer for the merged children).\r\n\t\t\t\t */\r\n\t\t\t\tif (Array.isArray(drawTree) || requireSimpleFusion && (drawTree.alpha < 100 || drawTree.mask)) {\r\n\t\t\t\t\tlet\r\n\t\t\t\t\t\toldNode = drawTree;\r\n\r\n\t\t\t\t\tdrawTree = new CPBlendNode(width, height);\r\n\t\t\t\t\tdrawTree.blendMode = Array.isArray(oldNode) ? CPBlend.LM_NORMAL : oldNode.blendMode;\r\n\t\t\t\t\tdrawTree.alpha = 100;\r\n\t\t\t\t\tdrawTree.image = allocateBuffer();\r\n\t\t\t\t\tdrawTree.addChildren(oldNode);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t/* Assume we'll have re-used most of the buffers we were ever going to, so we can trim our memory usage\r\n\t\t\t * to fit now.\r\n\t\t\t */\r\n\t\t\tspareBuffers = [];\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Give back temporary merge buffers to our buffer pool.\r\n\t *\r\n\t * @param {CPBlendNode} root\r\n\t */\r\n\tfunction resetTreeInternal(root) {\r\n\t\tif (root.isGroup) {\r\n\t\t\tif (root.image) {\r\n\t\t\t\tspareBuffers.push(root.image);\r\n\t\t\t}\r\n\r\n\t\t\tfor (let child of root.layers) {\r\n\t\t\t\tresetTreeInternal(child);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Clear the blend tree (so it can be re-built to reflect changes in the layer structure)\r\n\t */\r\n\tthis.resetTree = function() {\r\n\t\tif (drawTree) {\r\n\t\t\tresetTreeInternal(drawTree);\r\n\t\t\tdrawTree = null;\r\n\t\t\tnodeForLayer.clear();\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Call when a property of the layer has changed (opacity, blendMode, visibility)\r\n\t *\r\n\t * @param {CPLayer} layer\r\n\t * @param {string} propertyName\r\n\t */\r\n\tthis.layerPropertyChanged = function(layer, propertyName) {\r\n\t\tlet\r\n\t\t\tlayerNode = nodeForLayer.get(layer);\r\n\r\n\t\t/*\r\n\t\t * If only the blendMode changed, we won't have to reconstruct our blend tree, since none of our\r\n\t\t * tree structure depends on this (as long as it isn't \"passthrough\").\r\n\t\t */\r\n\t\tif (!layerNode\r\n\t\t\t\t|| layerNode.visible != layer.visible || layerNode.alpha != layer.alpha || (layerNode.mask == null) != (layer.getEffectiveMask() == null)\r\n\t\t\t\t|| (layerNode.blendMode == CPBlend.LM_PASSTHROUGH) != (layer.blendMode == CPBlend.LM_PASSTHROUGH)\r\n\t\t\t\t|| propertyName === \"clip\") {\r\n\t\t\tthis.resetTree();\r\n\t\t} else {\r\n\t\t\tlayerNode.blendMode = layer.blendMode;\r\n\t\t\tinvalidateNodeRect(layerNode, new CPRect(0, 0, width, height));\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t *\r\n\t * @param {CPColorBmp} dest\r\n\t * @param {CPColorBmp} source\r\n\t * @param {CPRect} rect\r\n\t */\r\n\tfunction copyOpaqueImageRect(dest, source, rect) {\r\n\t\tif (rect.getWidth() == dest.width && rect.getHeight() == dest.height) {\r\n\t\t\t/*\r\n\t\t\t * If we're copying the whole image at alpha 100, we're just doing a linear byte copy.\r\n\t\t\t * We have a fast version for that!\r\n\t\t\t */\r\n\t\t\tif (DEBUG) {\r\n\t\t\t\tconsole.log(\"CPColorBmp.copyDataFrom(source);\");\r\n\t\t\t}\r\n\t\t\tdest.copyPixelsFrom(source);\r\n\t\t} else {\r\n\t\t\t// Otherwise use the CPBlend version which only blends the specified rectangle\r\n\t\t\tif (DEBUG) {\r\n\t\t\t\tconsole.log(`CPBlend.replaceOntoFusionWithOpaqueLayer(dest, source, 100, ${rect});`);\r\n\t\t\t}\r\n\t\t\tCPBlend.replaceOntoFusionWithOpaqueLayer(dest, source, 100, rect);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param {CPColorBmp} dest\r\n\t * @param {CPColorBmp} source\r\n\t * @param {number} sourceAlpha\r\n\t * @param {CPRect} rect\r\n\t * @param {?CPGreyBmp} mask\r\n\t */\r\n\tfunction copyImageRect(dest, source, sourceAlpha, rect, mask) {\r\n\t\t// Use a plain copy if possible\r\n\t\tif (sourceAlpha == 100 && !mask && rect.getWidth() == dest.width && rect.getHeight() == dest.height) {\r\n\t\t\tif (DEBUG) {\r\n\t\t\t\tconsole.log(\"CPColorBmp.copyDataFrom(source);\");\r\n\t\t\t}\r\n\t\t\tdest.copyPixelsFrom(source);\r\n\t\t} else {\r\n\t\t\t// Otherwise do some blending\r\n\t\t\tlet\r\n\t\t\t\troutineName = \"replaceOntoFusionWith\";\r\n\r\n\t\t\tif (sourceAlpha == 100) {\r\n\t\t\t\troutineName += \"OpaqueLayer\";\r\n\t\t\t} else {\r\n\t\t\t\troutineName += \"TransparentLayer\";\r\n\t\t\t}\r\n\r\n\t\t\tif (mask) {\r\n\t\t\t\troutineName += \"Masked\";\r\n\t\t\t}\r\n\r\n\t\t\tif (DEBUG) {\r\n\t\t\t\tconsole.log(`CPBlend.${routineName}(dest, source, sourceAlpha = ${sourceAlpha}, rect = ${rect}, mask = ${mask});`);\r\n\t\t\t}\r\n\r\n\t\t\tCPBlend[routineName](dest, source, sourceAlpha, rect, mask);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Blend the given tree node and return the tree node that contains the resulting blend, or null if the tree is empty.\r\n\t * \r\n\t * @param {?CPBlendNode} treeNode\r\n\t */\r\n\tfunction blendTreeInternal(treeNode) {\r\n\t\tif (!treeNode || !treeNode.isGroup) {\r\n\t\t\t// Tree is empty, or it's just a layer and doesn't need further blending\r\n\t\t\treturn treeNode;\r\n\t\t}\r\n\r\n\t\tlet\r\n\t\t\tblendArea = treeNode.dirtyRect,\r\n\t\t\tgroupIsEmpty = true,\r\n\t\t\tfusionHasTransparency = true;\r\n\r\n\t\tif (treeNode.blendMode == CPBlend.LM_PASSTHROUGH && treeNode.parent) {\r\n\t\t\t/* With passthrough blending, the contents of the group are also dependent on the fusion it sits on top of,\r\n\t\t\t * so invalidating the parent must invalidate the passthrough child.\r\n\t\t\t */\r\n\t\t\tblendArea.union(treeNode.parent.dirtyRect);\r\n\t\t}\r\n\r\n\t\tif (blendArea.isEmpty()) {\r\n\t\t\t// Nothing to draw!\r\n\t\t\treturn treeNode;\r\n\t\t}\r\n\t\t\r\n\t\tif (treeNode.blendMode == CPBlend.LM_PASSTHROUGH && treeNode.parent) {\r\n\t\t\t// We need to fuse our children layers onto a copy of our parents fusion, so make that copy now\r\n\t\t\tgroupIsEmpty = false;\r\n\r\n\t\t\tcopyOpaqueImageRect(treeNode.image, treeNode.parent.image, blendArea);\r\n\t\t}\r\n\r\n\t\t// Avoid using an iterator here because Chrome refuses to optimize when a \"finally\" clause is present (caused by Babel iterator codegen)\r\n\t\tfor (let i = 0; i < treeNode.layers.length; i++) {\r\n            let\r\n                child = treeNode.layers[i],\r\n                childNode = blendTreeInternal(child);\r\n\r\n            if (groupIsEmpty) {\r\n                // If the fusion is currently empty then there's nothing to blend, replace the fusion with the contents of the bottom layer instead\r\n\r\n                copyImageRect(treeNode.image, childNode.image, childNode.alpha, blendArea, childNode.mask);\r\n                groupIsEmpty = false;\r\n            } else {\r\n                fusionHasTransparency = fusionHasTransparency && treeNode.image.hasAlphaInRect(blendArea);\r\n\r\n                if (DEBUG) {\r\n                    console.log(`CPBlend.fuseImageOntoImage(treeNode.image, fusionHasTransparency == ${fusionHasTransparency}, childNode.image, childNode.alpha == ${childNode.alpha}, childNode.blendMode == ${childNode.blendMode}, ${blendArea}, ${childNode.mask});`);\r\n                }\r\n\r\n                CPBlend.fuseImageOntoImage(treeNode.image, fusionHasTransparency, childNode.image, childNode.alpha, childNode.blendMode, blendArea, childNode.mask);\r\n            }\r\n        }\r\n\r\n\t\tif (treeNode.clip) {\r\n\t\t\t// Need to restore the original alpha from the base layer we're clipping onto\r\n\t\t\tlet\r\n\t\t\t\tbaseLayer = treeNode.layers[0];\r\n\r\n\t\t\tif (baseLayer.alpha < 100) {\r\n\t\t\t\tif (baseLayer.mask) {\r\n                    if (DEBUG) {\r\n                        console.log(`CPBlend.replaceAlphaOntoFusionWithTransparentLayerMasked(treeNode.image, baseLayer.image, treeNode.layers[0].alpha == ${treeNode.layers[0].alpha}, ${blendArea});`);\r\n                    }\r\n                    CPBlend.replaceAlphaOntoFusionWithTransparentLayerMasked(treeNode.image, baseLayer.image, baseLayer.alpha, blendArea, baseLayer.mask);\r\n\t\t\t\t} else {\r\n                    if (DEBUG) {\r\n                        console.log(`CPBlend.replaceAlphaOntoFusionWithTransparentLayer(treeNode.image, baseLayer.image, treeNode.layers[0].alpha == ${treeNode.layers[0].alpha}, ${blendArea});`);\r\n                    }\r\n                    CPBlend.replaceAlphaOntoFusionWithTransparentLayer(treeNode.image, baseLayer.image, baseLayer.alpha, blendArea);\r\n                }\r\n\t\t\t} else {\r\n\t\t\t\tif (baseLayer.mask) {\r\n                    if (DEBUG) {\r\n                        console.log(`CPBlend.replaceAlphaOntoFusionWithOpaqueLayerMasked(treeNode.image, baseLayer.image, 100, ${blendArea});`);\r\n                    }\r\n                    CPBlend.replaceAlphaOntoFusionWithOpaqueLayerMasked(treeNode.image, baseLayer.image, 100, blendArea, baseLayer.mask);\r\n                } else {\r\n                    if (DEBUG) {\r\n                        console.log(`CPBlend.replaceAlphaOntoFusionWithOpaqueLayer(treeNode.image, baseLayer.image, 100, ${blendArea});`);\r\n                    }\r\n                    CPBlend.replaceAlphaOntoFusionWithOpaqueLayer(treeNode.image, baseLayer.image, 100, blendArea);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\ttreeNode.dirtyRect.makeEmpty();\r\n\r\n\t\treturn treeNode;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Blend the layers in the tree and return the resulting image.\r\n\t * \r\n\t * @returns An object with blendMode, alpha and image (CPColorBmp) properties.\r\n\t */\r\n\tthis.blendTree = function() {\r\n\t\tif (DEBUG) {\r\n\t\t\tconsole.log(\"Fusing layers...\");\r\n\t\t}\r\n\r\n\t\treturn blendTreeInternal(drawTree);\r\n\t};\r\n\r\n}","/*\r\n    ChickenPaint\r\n\r\n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\r\n    by Nicholas Sherlock / Chicken Smoothie.\r\n\r\n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\r\n\r\n    ChickenPaint is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    ChickenPaint is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport CPRect from \"../util/CPRect.js\";\r\nimport CPColorBmp from \"./CPColorBmp.js\";\r\nimport CPGreyBmp from \"./CPGreyBmp.js\";\r\n\r\nimport EventEmitter from \"wolfy87-eventemitter\";\r\n\r\n/**\r\n * Copy the rectangle from the single-channel `greyscale` to the RGBA `imageData` as greyscale pixels with full alpha.\r\n * Both images must be the same size.\r\n *\r\n * @param {ImageData} imageData\r\n * @param {CPGreyBmp} greyscale\r\n * @param {CPRect} rect\r\n */\r\nfunction copyGreyscaleRectToImageData(imageData, greyscale, rect) {\r\n\tvar\r\n\t\tsrcIndex = rect.top * greyscale.width + rect.left,\r\n\t\tdstIndex = srcIndex * CPColorBmp.BYTES_PER_PIXEL,\r\n\r\n\t\twidth = rect.getWidth(),\r\n\t\theight = rect.getHeight(),\r\n\r\n\t\tsrcYSkip = greyscale.width - width,\r\n\t\tdstYSkip = srcYSkip * CPColorBmp.BYTES_PER_PIXEL;\r\n\r\n\tfor (let y = 0; y < height; y++, srcIndex += srcYSkip, dstIndex += dstYSkip) {\r\n\t\tfor (let x = 0; x < width; x++, srcIndex++, dstIndex += CPColorBmp.BYTES_PER_PIXEL) {\r\n\t\t\timageData.data[dstIndex + CPColorBmp.RED_BYTE_OFFSET] = greyscale.data[srcIndex];\r\n\t\t\timageData.data[dstIndex + CPColorBmp.GREEN_BYTE_OFFSET] = greyscale.data[srcIndex];\r\n\t\t\timageData.data[dstIndex + CPColorBmp.BLUE_BYTE_OFFSET] = greyscale.data[srcIndex];\r\n\t\t\timageData.data[dstIndex + CPColorBmp.ALPHA_BYTE_OFFSET] = 0xFF;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Allows a ImageData-view to be created of a layer's mask, with the artwork able to change the target of the view\r\n * when needed, and keep the pixels up to date.\r\n *\r\n * Emits a \"changeLayer\" event if the mask view attaches to a different target layer.\r\n */\r\nexport default class CPMaskView extends EventEmitter {\r\n\t\r\n\t/**\r\n\t * @param {CPLayer} layer\r\n\t * @param {function} prepareMask\r\n\t */\r\n\tconstructor(layer, prepareMask) {\r\n\t\tsuper();\r\n\r\n\t\tthis.layer = layer;\r\n\t\tthis.buffer = layer.mask.getImageData(0, 0, layer.mask.width, layer.mask.height);\r\n\t\tthis.invalidRect = new CPRect(0, 0, 0, 0); // Buffer starts off valid\r\n\r\n\t\t/**\r\n\t\t * Routine that must be called before the pixels in the mask will be valid.\r\n\t\t *\r\n\t\t * @type {Function}\r\n\t\t */\r\n\t\tthis.prepareMask = prepareMask;\r\n\t}\r\n\r\n\tclose() {\r\n\t\tthis.buffer = null;\r\n\t\tthis.layer = null;\r\n\r\n\t\tthis.emitEvent(\"changeLayer\");\r\n\t}\r\n\r\n\tsetLayer(layer) {\r\n\t\tthis.layer = layer;\r\n\t\tthis.invalidRect = layer.getBounds();\r\n\r\n\t\tthis.emitEvent(\"changeLayer\");\r\n\t}\r\n\r\n\tisOpen() {\r\n\t\treturn this.layer != null;\r\n\t}\r\n\r\n\t/**\r\n\t * Mark a rectangle as changed (the mask has been painted on)\r\n\t *\r\n\t * @param {CPRect} rect\r\n\t */\r\n\tinvalidateRect(rect) {\r\n\t\tthis.invalidRect.union(rect);\r\n\t}\r\n\r\n\t/**\r\n\t * Get the pixels of the mask as an ImageData object, or null if this view has already been closed.\r\n\t *\r\n\t * @returns {ImageData}\r\n\t */\r\n\tgetImageData() {\r\n\t\tthis.prepareMask();\r\n\r\n\t\tif (!this.invalidRect.isEmpty() && this.layer && this.layer.mask) {\r\n\t\t\tcopyGreyscaleRectToImageData(this.buffer, this.layer.mask, this.invalidRect);\r\n\r\n\t\t\tthis.invalidRect.makeEmpty();\r\n\t\t}\r\n\r\n\t\treturn this.buffer;\r\n\t}\r\n}","/*!\n * EventEmitter v5.2.9 - git.io/ee\n * Unlicense - http://unlicense.org/\n * Oliver Caldwell - https://oli.me.uk/\n * @preserve\n */\n\n;(function (exports) {\n    'use strict';\n\n    /**\n     * Class for managing events.\n     * Can be extended to provide event functionality in other classes.\n     *\n     * @class EventEmitter Manages event registering and emitting.\n     */\n    function EventEmitter() {}\n\n    // Shortcuts to improve speed and size\n    var proto = EventEmitter.prototype;\n    var originalGlobalValue = exports.EventEmitter;\n\n    /**\n     * Finds the index of the listener for the event in its storage array.\n     *\n     * @param {Function[]} listeners Array of listeners to search through.\n     * @param {Function} listener Method to look for.\n     * @return {Number} Index of the specified listener, -1 if not found\n     * @api private\n     */\n    function indexOfListener(listeners, listener) {\n        var i = listeners.length;\n        while (i--) {\n            if (listeners[i].listener === listener) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n    /**\n     * Alias a method while keeping the context correct, to allow for overwriting of target method.\n     *\n     * @param {String} name The name of the target method.\n     * @return {Function} The aliased method\n     * @api private\n     */\n    function alias(name) {\n        return function aliasClosure() {\n            return this[name].apply(this, arguments);\n        };\n    }\n\n    /**\n     * Returns the listener array for the specified event.\n     * Will initialise the event object and listener arrays if required.\n     * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.\n     * Each property in the object response is an array of listener functions.\n     *\n     * @param {String|RegExp} evt Name of the event to return the listeners from.\n     * @return {Function[]|Object} All listener functions for the event.\n     */\n    proto.getListeners = function getListeners(evt) {\n        var events = this._getEvents();\n        var response;\n        var key;\n\n        // Return a concatenated array of all matching events if\n        // the selector is a regular expression.\n        if (evt instanceof RegExp) {\n            response = {};\n            for (key in events) {\n                if (events.hasOwnProperty(key) && evt.test(key)) {\n                    response[key] = events[key];\n                }\n            }\n        }\n        else {\n            response = events[evt] || (events[evt] = []);\n        }\n\n        return response;\n    };\n\n    /**\n     * Takes a list of listener objects and flattens it into a list of listener functions.\n     *\n     * @param {Object[]} listeners Raw listener objects.\n     * @return {Function[]} Just the listener functions.\n     */\n    proto.flattenListeners = function flattenListeners(listeners) {\n        var flatListeners = [];\n        var i;\n\n        for (i = 0; i < listeners.length; i += 1) {\n            flatListeners.push(listeners[i].listener);\n        }\n\n        return flatListeners;\n    };\n\n    /**\n     * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.\n     *\n     * @param {String|RegExp} evt Name of the event to return the listeners from.\n     * @return {Object} All listener functions for an event in an object.\n     */\n    proto.getListenersAsObject = function getListenersAsObject(evt) {\n        var listeners = this.getListeners(evt);\n        var response;\n\n        if (listeners instanceof Array) {\n            response = {};\n            response[evt] = listeners;\n        }\n\n        return response || listeners;\n    };\n\n    function isValidListener (listener) {\n        if (typeof listener === 'function' || listener instanceof RegExp) {\n            return true\n        } else if (listener && typeof listener === 'object') {\n            return isValidListener(listener.listener)\n        } else {\n            return false\n        }\n    }\n\n    /**\n     * Adds a listener function to the specified event.\n     * The listener will not be added if it is a duplicate.\n     * If the listener returns true then it will be removed after it is called.\n     * If you pass a regular expression as the event name then the listener will be added to all events that match it.\n     *\n     * @param {String|RegExp} evt Name of the event to attach the listener to.\n     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.addListener = function addListener(evt, listener) {\n        if (!isValidListener(listener)) {\n            throw new TypeError('listener must be a function');\n        }\n\n        var listeners = this.getListenersAsObject(evt);\n        var listenerIsWrapped = typeof listener === 'object';\n        var key;\n\n        for (key in listeners) {\n            if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {\n                listeners[key].push(listenerIsWrapped ? listener : {\n                    listener: listener,\n                    once: false\n                });\n            }\n        }\n\n        return this;\n    };\n\n    /**\n     * Alias of addListener\n     */\n    proto.on = alias('addListener');\n\n    /**\n     * Semi-alias of addListener. It will add a listener that will be\n     * automatically removed after its first execution.\n     *\n     * @param {String|RegExp} evt Name of the event to attach the listener to.\n     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.addOnceListener = function addOnceListener(evt, listener) {\n        return this.addListener(evt, {\n            listener: listener,\n            once: true\n        });\n    };\n\n    /**\n     * Alias of addOnceListener.\n     */\n    proto.once = alias('addOnceListener');\n\n    /**\n     * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.\n     * You need to tell it what event names should be matched by a regex.\n     *\n     * @param {String} evt Name of the event to create.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.defineEvent = function defineEvent(evt) {\n        this.getListeners(evt);\n        return this;\n    };\n\n    /**\n     * Uses defineEvent to define multiple events.\n     *\n     * @param {String[]} evts An array of event names to define.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.defineEvents = function defineEvents(evts) {\n        for (var i = 0; i < evts.length; i += 1) {\n            this.defineEvent(evts[i]);\n        }\n        return this;\n    };\n\n    /**\n     * Removes a listener function from the specified event.\n     * When passed a regular expression as the event name, it will remove the listener from all events that match it.\n     *\n     * @param {String|RegExp} evt Name of the event to remove the listener from.\n     * @param {Function} listener Method to remove from the event.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.removeListener = function removeListener(evt, listener) {\n        var listeners = this.getListenersAsObject(evt);\n        var index;\n        var key;\n\n        for (key in listeners) {\n            if (listeners.hasOwnProperty(key)) {\n                index = indexOfListener(listeners[key], listener);\n\n                if (index !== -1) {\n                    listeners[key].splice(index, 1);\n                }\n            }\n        }\n\n        return this;\n    };\n\n    /**\n     * Alias of removeListener\n     */\n    proto.off = alias('removeListener');\n\n    /**\n     * Adds listeners in bulk using the manipulateListeners method.\n     * If you pass an object as the first argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.\n     * You can also pass it a regular expression to add the array of listeners to all events that match it.\n     * Yeah, this function does quite a bit. That's probably a bad thing.\n     *\n     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.\n     * @param {Function[]} [listeners] An optional array of listener functions to add.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.addListeners = function addListeners(evt, listeners) {\n        // Pass through to manipulateListeners\n        return this.manipulateListeners(false, evt, listeners);\n    };\n\n    /**\n     * Removes listeners in bulk using the manipulateListeners method.\n     * If you pass an object as the first argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.\n     * You can also pass it an event name and an array of listeners to be removed.\n     * You can also pass it a regular expression to remove the listeners from all events that match it.\n     *\n     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.\n     * @param {Function[]} [listeners] An optional array of listener functions to remove.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.removeListeners = function removeListeners(evt, listeners) {\n        // Pass through to manipulateListeners\n        return this.manipulateListeners(true, evt, listeners);\n    };\n\n    /**\n     * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.\n     * The first argument will determine if the listeners are removed (true) or added (false).\n     * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.\n     * You can also pass it an event name and an array of listeners to be added/removed.\n     * You can also pass it a regular expression to manipulate the listeners of all events that match it.\n     *\n     * @param {Boolean} remove True if you want to remove listeners, false if you want to add.\n     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.\n     * @param {Function[]} [listeners] An optional array of listener functions to add/remove.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {\n        var i;\n        var value;\n        var single = remove ? this.removeListener : this.addListener;\n        var multiple = remove ? this.removeListeners : this.addListeners;\n\n        // If evt is an object then pass each of its properties to this method\n        if (typeof evt === 'object' && !(evt instanceof RegExp)) {\n            for (i in evt) {\n                if (evt.hasOwnProperty(i) && (value = evt[i])) {\n                    // Pass the single listener straight through to the singular method\n                    if (typeof value === 'function') {\n                        single.call(this, i, value);\n                    }\n                    else {\n                        // Otherwise pass back to the multiple function\n                        multiple.call(this, i, value);\n                    }\n                }\n            }\n        }\n        else {\n            // So evt must be a string\n            // And listeners must be an array of listeners\n            // Loop over it and pass each one to the multiple method\n            i = listeners.length;\n            while (i--) {\n                single.call(this, evt, listeners[i]);\n            }\n        }\n\n        return this;\n    };\n\n    /**\n     * Removes all listeners from a specified event.\n     * If you do not specify an event then all listeners will be removed.\n     * That means every event will be emptied.\n     * You can also pass a regex to remove all events that match it.\n     *\n     * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.removeEvent = function removeEvent(evt) {\n        var type = typeof evt;\n        var events = this._getEvents();\n        var key;\n\n        // Remove different things depending on the state of evt\n        if (type === 'string') {\n            // Remove all listeners for the specified event\n            delete events[evt];\n        }\n        else if (evt instanceof RegExp) {\n            // Remove all events matching the regex.\n            for (key in events) {\n                if (events.hasOwnProperty(key) && evt.test(key)) {\n                    delete events[key];\n                }\n            }\n        }\n        else {\n            // Remove all listeners in all events\n            delete this._events;\n        }\n\n        return this;\n    };\n\n    /**\n     * Alias of removeEvent.\n     *\n     * Added to mirror the node API.\n     */\n    proto.removeAllListeners = alias('removeEvent');\n\n    /**\n     * Emits an event of your choice.\n     * When emitted, every listener attached to that event will be executed.\n     * If you pass the optional argument array then those arguments will be passed to every listener upon execution.\n     * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.\n     * So they will not arrive within the array on the other side, they will be separate.\n     * You can also pass a regular expression to emit to all events that match it.\n     *\n     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.\n     * @param {Array} [args] Optional array of arguments to be passed to each listener.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.emitEvent = function emitEvent(evt, args) {\n        var listenersMap = this.getListenersAsObject(evt);\n        var listeners;\n        var listener;\n        var i;\n        var key;\n        var response;\n\n        for (key in listenersMap) {\n            if (listenersMap.hasOwnProperty(key)) {\n                listeners = listenersMap[key].slice(0);\n\n                for (i = 0; i < listeners.length; i++) {\n                    // If the listener returns true then it shall be removed from the event\n                    // The function is executed either with a basic call or an apply if there is an args array\n                    listener = listeners[i];\n\n                    if (listener.once === true) {\n                        this.removeListener(evt, listener.listener);\n                    }\n\n                    response = listener.listener.apply(this, args || []);\n\n                    if (response === this._getOnceReturnValue()) {\n                        this.removeListener(evt, listener.listener);\n                    }\n                }\n            }\n        }\n\n        return this;\n    };\n\n    /**\n     * Alias of emitEvent\n     */\n    proto.trigger = alias('emitEvent');\n\n    /**\n     * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.\n     * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.\n     *\n     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.\n     * @param {...*} Optional additional arguments to be passed to each listener.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.emit = function emit(evt) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        return this.emitEvent(evt, args);\n    };\n\n    /**\n     * Sets the current value to check against when executing listeners. If a\n     * listeners return value matches the one set here then it will be removed\n     * after execution. This value defaults to true.\n     *\n     * @param {*} value The new value to check for when executing listeners.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.setOnceReturnValue = function setOnceReturnValue(value) {\n        this._onceReturnValue = value;\n        return this;\n    };\n\n    /**\n     * Fetches the current value to check against when executing listeners. If\n     * the listeners return value matches this one then it should be removed\n     * automatically. It will return true by default.\n     *\n     * @return {*|Boolean} The current value to check for or the default, true.\n     * @api private\n     */\n    proto._getOnceReturnValue = function _getOnceReturnValue() {\n        if (this.hasOwnProperty('_onceReturnValue')) {\n            return this._onceReturnValue;\n        }\n        else {\n            return true;\n        }\n    };\n\n    /**\n     * Fetches the events object and creates one if required.\n     *\n     * @return {Object} The events storage object.\n     * @api private\n     */\n    proto._getEvents = function _getEvents() {\n        return this._events || (this._events = {});\n    };\n\n    /**\n     * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.\n     *\n     * @return {Function} Non conflicting EventEmitter class.\n     */\n    EventEmitter.noConflict = function noConflict() {\n        exports.EventEmitter = originalGlobalValue;\n        return EventEmitter;\n    };\n\n    // Expose the class either via AMD, CommonJS or the global object\n    if (typeof define === 'function' && define.amd) {\n        define(function () {\n            return EventEmitter;\n        });\n    }\n    else if (typeof module === 'object' && module.exports){\n        module.exports = EventEmitter;\n    }\n    else {\n        exports.EventEmitter = EventEmitter;\n    }\n}(typeof window !== 'undefined' ? window : this || {}));\n","/*\r\n    ChickenPaint\r\n    \r\n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\r\n    by Nicholas Sherlock / Chicken Smoothie.\r\n    \r\n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\r\n\r\n    ChickenPaint is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    ChickenPaint is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport CPBrushInfo from \"./CPBrushInfo.js\";\r\n\r\nconst\r\n    MAX_SQUEEZE = 10;\r\n\r\n/**\r\n *\r\n * @param {Uint8Array} brush\r\n * @param {CPBrushInfo} brushInfo\r\n */\r\nfunction buildBrush(brush, brushInfo) {\r\n    let\r\n        intSize = Math.ceil(brushInfo.curSize),\r\n\r\n        center = intSize / 2.0,\r\n        sqrRadius = (brushInfo.curSize / 2) * (brushInfo.curSize / 2),\r\n\r\n        xFactor = 1.0 + brushInfo.curSqueeze * MAX_SQUEEZE,\r\n        cosA = Math.cos(brushInfo.curAngle),\r\n        sinA = Math.sin(brushInfo.curAngle),\r\n\r\n        offset = 0;\r\n\r\n    for (let j = 0; j < intSize; j++) {\r\n        for (let i = 0; i < intSize; i++) {\r\n            let\r\n                x = (i + 0.5 - center),\r\n                y = (j + 0.5 - center),\r\n                dx = (x * cosA - y * sinA) * xFactor,\r\n                dy = (y * cosA + x * sinA),\r\n\r\n                sqrDist = dx * dx + dy * dy;\r\n\r\n            if (sqrDist <= sqrRadius) {\r\n                brush[offset++] = 0xFF;\r\n            } else {\r\n                brush[offset++] = 0;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @param {Uint8Array} brush\r\n * @param {CPBrushInfo} brushInfo\r\n */\r\nfunction buildBrushAA(brush, brushInfo) {\r\n    let\r\n        intSize = Math.ceil(brushInfo.curSize),\r\n\r\n        center = intSize / 2.0,\r\n        sqrRadius = (brushInfo.curSize / 2) * (brushInfo.curSize / 2),\r\n        sqrRadiusInner = ((brushInfo.curSize - 2) / 2) * ((brushInfo.curSize - 2) / 2),\r\n        sqrRadiusOuter = ((brushInfo.curSize + 2) / 2) * ((brushInfo.curSize + 2) / 2),\r\n\r\n        xFactor = 1.0 + brushInfo.curSqueeze * MAX_SQUEEZE,\r\n        cosA = Math.cos(brushInfo.curAngle),\r\n        sinA = Math.sin(brushInfo.curAngle),\r\n\r\n        offset = 0;\r\n\r\n    for (let j = 0; j < intSize; j++) {\r\n        for (let i = 0; i < intSize; i++) {\r\n            let\r\n                x = (i + 0.5 - center),\r\n                y = (j + 0.5 - center),\r\n                dx = (x * cosA - y * sinA) * xFactor,\r\n                dy = (y * cosA + x * sinA),\r\n\r\n                sqrDist = dx * dx + dy * dy;\r\n\r\n            if (sqrDist <= sqrRadiusInner) {\r\n                brush[offset++] = 0xFF;\r\n            } else if (sqrDist > sqrRadiusOuter) {\r\n                brush[offset++] = 0;\r\n            } else {\r\n                let\r\n                    count = 0;\r\n\r\n                for (let oy = 0; oy < 4; oy++) {\r\n                    for (let ox = 0; ox < 4; ox++) {\r\n                        x = i + ox * (1.0 / 4.0) - center;\r\n                        y = j + oy * (1.0 / 4.0) - center;\r\n                        dx = (x * cosA - y * sinA) * xFactor;\r\n                        dy = (y * cosA + x * sinA);\r\n\r\n                        sqrDist = dx * dx + dy * dy;\r\n                        if (sqrDist <= sqrRadius) {\r\n                            count += 1;\r\n                        }\r\n                    }\r\n                }\r\n                brush[offset++] = Math.min(count * 16, 255);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @param {Uint8Array} brush\r\n * @param {CPBrushInfo} brushInfo\r\n */\r\nfunction buildBrushSquare(brush, brushInfo) {\r\n    let\r\n        intSize = Math.ceil(brushInfo.curSize),\r\n        center = intSize / 2.0,\r\n\r\n        size = brushInfo.curSize * Math.sin(Math.PI / 4),\r\n        sizeX = (size / 2) / (1.0 + brushInfo.curSqueeze * MAX_SQUEEZE),\r\n        sizeY = (size / 2),\r\n\r\n        cosA = Math.cos(brushInfo.curAngle),\r\n        sinA = Math.sin(brushInfo.curAngle),\r\n\r\n        offset = 0;\r\n\r\n    for (let j = 0; j < intSize; j++) {\r\n        for (let i = 0; i < intSize; i++) {\r\n            let\r\n                x = (i + 0.5 - center),\r\n                y = (j + 0.5 - center),\r\n                dx = Math.abs(x * cosA - y * sinA),\r\n                dy = Math.abs(y * cosA + x * sinA);\r\n\r\n            if (dx <= sizeX && dy <= sizeY) {\r\n                brush[offset++] = 0xFF;\r\n            } else {\r\n                brush[offset++] = 0;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @param {Uint8Array} brush\r\n * @param {CPBrushInfo} brushInfo\r\n */\r\nfunction buildBrushSquareAA(brush, brushInfo) {\r\n    let\r\n        intSize = Math.ceil(brushInfo.curSize),\r\n        center = intSize / 2.0,\r\n\r\n        size = brushInfo.curSize * Math.sin(Math.PI / 4),\r\n        sizeX = (size / 2) / (1.0 + brushInfo.curSqueeze * MAX_SQUEEZE),\r\n        sizeY = (size / 2),\r\n\r\n        sizeXInner = sizeX - 1,\r\n        sizeYInner = sizeY - 1,\r\n\r\n        sizeXOuter = sizeX + 1,\r\n        sizeYOuter = sizeY + 1,\r\n\r\n        cosA = Math.cos(brushInfo.curAngle),\r\n        sinA = Math.sin(brushInfo.curAngle),\r\n\r\n        offset = 0;\r\n\r\n    for (let j = 0; j < intSize; j++) {\r\n        for (let i = 0; i < intSize; i++) {\r\n            let\r\n                x = (i + 0.5 - center),\r\n                y = (j + 0.5 - center),\r\n                dx = Math.abs(x * cosA - y * sinA),\r\n                dy = Math.abs(y * cosA + x * sinA);\r\n\r\n            if (dx <= sizeXInner && dy <= sizeYInner) {\r\n                brush[offset++] = 0xFF;\r\n            } else if (dx > sizeXOuter || dy > sizeYOuter) {\r\n                brush[offset++] = 0;\r\n            } else {\r\n                let\r\n                    count = 0;\r\n\r\n                for (let oy = 0; oy < 4; oy++) {\r\n                    for (let ox = 0; ox < 4; ox++) {\r\n                        x = i + ox * (1.0 / 4.0) - center;\r\n                        y = j + oy * (1.0 / 4.0) - center;\r\n                        dx = Math.abs(x * cosA - y * sinA);\r\n                        dy = Math.abs(y * cosA + x * sinA);\r\n\r\n                        if (dx <= sizeX && dy <= sizeY) {\r\n                            count++;\r\n                        }\r\n                    }\r\n                }\r\n                brush[offset++] = Math.min(count * 16, 255);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @param {Uint8Array} brush\r\n * @param {CPBrushInfo} brushInfo\r\n */\r\nfunction buildBrushSoft(brush, brushInfo) {\r\n    let\r\n        intSize = Math.ceil(brushInfo.curSize),\r\n        center = intSize / 2.0,\r\n        sqrRadius = (brushInfo.curSize / 2) * (brushInfo.curSize / 2),\r\n\r\n        xFactor = 1.0 + brushInfo.curSqueeze * MAX_SQUEEZE,\r\n        cosA = Math.cos(brushInfo.curAngle),\r\n        sinA = Math.sin(brushInfo.curAngle),\r\n\r\n        offset = 0;\r\n\r\n    for (let j = 0; j < intSize; j++) {\r\n        for (let i = 0; i < intSize; i++) {\r\n            let\r\n                x = (i + 0.5 - center),\r\n                y = (j + 0.5 - center),\r\n                dx = (x * cosA - y * sinA) * xFactor,\r\n                dy = (y * cosA + x * sinA),\r\n\r\n                sqrDist = dx * dx + dy * dy;\r\n\r\n            if (sqrDist <= sqrRadius) {\r\n                brush[offset++] = ~~(255 * (1 - (sqrDist / sqrRadius)));\r\n            } else {\r\n                brush[offset++] = 0;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * A brush spot\r\n *\r\n * @typedef {Object} CPBrushDab\r\n *\r\n * @property {Uint8Array} brush - The brush image mask\r\n * @property {number} width - The size of the brush image (note, it need not occupy the entire brush array).\r\n * @property {number} height\r\n * @property {number} x - Pixel in the document where the brush will be applied\r\n * @property {number} y\r\n * @property {number} alpha\r\n */\r\n\r\n/**\r\n * Creates and holds one cached brush at a time, with the given parameters.\r\n *\r\n * @constructor\r\n */\r\nexport default function CPBrushManager() {\r\n    const\r\n        BRUSH_MAX_DIM = 401,\r\n        BRUSH_AA_MAX_DIM = 402;\r\n    \r\n    let\r\n        brush = new Uint8Array(BRUSH_MAX_DIM * BRUSH_MAX_DIM),\r\n        brushAA = new Uint8Array(BRUSH_AA_MAX_DIM * BRUSH_AA_MAX_DIM),\r\n        brushAARows = [new Float32Array(BRUSH_AA_MAX_DIM), new Float32Array(BRUSH_AA_MAX_DIM)],\r\n\r\n        cacheBrush = null,\r\n        cacheSize, cacheSqueeze, cacheAngle, cacheTip,\r\n\r\n        that = this;\r\n\r\n    /**\r\n     * Shift a brush by a positive sub-pixel amount (dx, dy) [0..1), and return the new brush.\r\n     *\r\n     * The resulting brush array is 1 pixel larger than the original one in both dimensions.\r\n     *\r\n     * @param {CPBrushInfo} brushInfo\r\n     * @param {number} dx\r\n     * @param {number} dy\r\n     *\r\n     * @returns {Uint8Array}\r\n     */\r\n    function createSubpixelShiftedBrush(brushInfo, dx, dy) {\r\n        let\r\n            nonAABrush = getBrush(brushInfo),\r\n\r\n            intSize = Math.ceil(brushInfo.curSize),\r\n            intSizeAA = Math.ceil(brushInfo.curSize) + 1;\r\n\r\n        let\r\n            invdx_invdy = (1 - dx) * (1 - dy),\r\n            dx_invdy = dx * (1 - dy),\r\n            dx_dy = dx * dy,\r\n            invdx_dy = (1 - dx) * dy,\r\n\r\n            srcIndex = 0,\r\n            dstIndex = 0,\r\n\r\n            curRow = brushAARows[0],\r\n            nextRow = brushAARows[1],\r\n            swap;\r\n\r\n        curRow.fill(0); // Since it will be dirty from a previous call\r\n\r\n        for (let y = 0; y < intSize; y++) {\r\n            let x;\r\n\r\n            nextRow[0] = 0; // We overwrite all the subsequent values in the loop, but we do need to clear this one for the first iteration's benefit\r\n\r\n            // For all the source pixels in the row:\r\n            for (x = 0; x < intSize; x++, srcIndex++, dstIndex++) {\r\n                let\r\n                    brushAlpha = nonAABrush[srcIndex];\r\n\r\n                /*\r\n                 * Use a weighted sum to shift the source pixels's position by a sub-pixel amount dx, dy and accumulate\r\n                 * it into the final brushAA array.\r\n                 */\r\n\r\n                // We have the contribution from our previous 3 neighbours now so we can complete this output pixel\r\n                brushAA[dstIndex] = (curRow[x] + (brushAlpha * invdx_invdy) + 0.5) | 0;\r\n\r\n                curRow[x + 1]  += brushAlpha * dx_invdy;\r\n                nextRow[x]     += brushAlpha * invdx_dy;\r\n                nextRow[x + 1] = brushAlpha * dx_dy; // We're the first iteration that writes to this pixel so we needn't +=\r\n            }\r\n\r\n            // The final output pixel of the row doesn't have a source pixel of its own (it just gets the contribution from the previous ones)\r\n            brushAA[dstIndex++] = (curRow[x] + 0.5) | 0;\r\n\r\n            swap = curRow;\r\n            curRow = nextRow;\r\n            nextRow = swap;\r\n        }\r\n\r\n        // Output final residual row\r\n        for (let x = 0; x < intSizeAA; x++, dstIndex++) {\r\n            brushAA[dstIndex] = (curRow[x] + 0.5) | 0;\r\n        }\r\n\r\n        return brushAA;\r\n    }\r\n\r\n    /**\r\n     * Build and return a brush that conforms to the given brush settings.\r\n     *\r\n     * @param {CPBrushInfo} brushInfo\r\n     *\r\n     * @returns {Uint8Array}\r\n     */ \r\n    function getBrush(brushInfo) {\r\n        if (cacheBrush != null && brushInfo.curSize == cacheSize && brushInfo.curSqueeze == cacheSqueeze\r\n                && brushInfo.curAngle == cacheAngle && brushInfo.tip == cacheTip) {\r\n            return cacheBrush;\r\n        }\r\n        \r\n        switch (brushInfo.tip) {\r\n            case CPBrushInfo.TIP_ROUND_AIRBRUSH:\r\n                buildBrushSoft(brush, brushInfo);\r\n            break;\r\n            case CPBrushInfo.TIP_ROUND_AA:\r\n                buildBrushAA(brush, brushInfo);\r\n            break;\r\n            case CPBrushInfo.TIP_ROUND_PIXEL:\r\n                buildBrush(brush, brushInfo);\r\n            break;\r\n            case CPBrushInfo.TIP_SQUARE_AA:\r\n                buildBrushSquareAA(brush, brushInfo);\r\n            break;\r\n            case CPBrushInfo.TIP_SQUARE_PIXEL:\r\n                buildBrushSquare(brush, brushInfo);\r\n            break;\r\n        }\r\n\r\n        cacheBrush = brush;\r\n        cacheSize = brushInfo.curSize;\r\n        cacheTip = brushInfo.tip;\r\n        cacheSqueeze = brushInfo.curSqueeze;\r\n        cacheAngle = brushInfo.curAngle;\r\n\r\n        return brush;\r\n    }\r\n\r\n\t/**\r\n     *\r\n     * @param {CPBrushDab} dab\r\n     * @param {number} textureAmount\r\n     */\r\n    function applyTexture(dab, textureAmount) {\r\n        let\r\n            amount = Math.floor(textureAmount * 255),\r\n            texture = that.texture,\r\n            \r\n            textureX = dab.x % texture.width,\r\n            textureY = dab.y % texture.height,\r\n            \r\n            brushPos = 0,\r\n            texturePos, textureEOL;\r\n\r\n        if (textureX < 0) {\r\n            textureX += texture.width;\r\n        }\r\n\r\n        if (textureY < 0) {\r\n            textureY += texture.height;\r\n        }\r\n        \r\n        for (let y = 0; y < dab.height; y++) {\r\n            texturePos = textureY * texture.width + textureX;\r\n            textureEOL = textureY * texture.width + texture.width;\r\n            \r\n            for (let x = 0; x < dab.width; x++) {\r\n                let\r\n                    brushValue = dab.brush[brushPos],\r\n                    textureValue = texture.data[texturePos];\r\n                \r\n                dab.brush[brushPos] = ~~(brushValue * ((textureValue * amount / 255) ^ 0xff) / 255);\r\n                \r\n                brushPos++;\r\n                \r\n                texturePos++;\r\n                if (texturePos == textureEOL) {\r\n                    // Wrap to left side of texture\r\n                    texturePos -= texture.width;\r\n                }\r\n            }\r\n            \r\n            textureY++;\r\n            if (textureY == texture.height) {\r\n                textureY = 0;\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Create a paint dab using the given brush at the given image co-ordinates.\r\n     *\r\n     * @param {number} x - Image coordinate of center of brush dab\r\n     * @param {number} y - Image coordinate of center of brush dab\r\n     * @param {CPBrushInfo} brushInfo - Brush appearance parameters\r\n     *\r\n     * @returns {CPBrushDab}\r\n     */\r\n    this.getDab = function(x, y, brushInfo) {\r\n        let\r\n            dab = {\r\n                alpha: brushInfo.curAlpha,\r\n                width: Math.ceil(brushInfo.curSize),\r\n                height: Math.ceil(brushInfo.curSize)\r\n            };\r\n\r\n        // FIXME: I don't like this special case for ROUND_PIXEL\r\n        // it would be better to have brush presets for working with pixels\r\n        let\r\n            useSubpixelShift = brushInfo.isAA && brushInfo.tip != CPBrushInfo.TIP_ROUND_PIXEL;\r\n\r\n        if (useSubpixelShift) {\r\n            dab.width++;\r\n            dab.height++;\r\n        }\r\n\r\n        let\r\n            // The top left corner of the brush dab\r\n            dabX = x - dab.width / 2.0 + 0.5,\r\n            dabY = y - dab.height / 2.0 + 0.5,\r\n\r\n            // The pixel the top left corner lies in\r\n            dabXInt = Math.floor(dabX),\r\n            dabYInt = Math.floor(dabY);\r\n\r\n        if (useSubpixelShift) {\r\n            let\r\n                subpixelX = dabX - dabXInt,\r\n                subpixelY = dabY - dabYInt;\r\n            \r\n            dab.brush = createSubpixelShiftedBrush(brushInfo, subpixelX, subpixelY);\r\n        } else {\r\n            dab.brush = getBrush(brushInfo);\r\n        }\r\n\r\n        dab.x = dabXInt;\r\n        dab.y = dabYInt;\r\n\r\n        if (brushInfo.texture > 0.0 && this.texture != null) {\r\n            // we need a brush bitmap that can be modified everytime\r\n            // the one in \"brush\" can be kept in cache so if we are using it, make a copy\r\n            if (dab.brush == brush) {\r\n                brushAA.set(brush);\r\n                dab.brush = brushAA;\r\n            }\r\n            applyTexture(dab, brushInfo.texture);\r\n        }\r\n        \r\n        return dab;\r\n    };\r\n\r\n    this.setTexture = function(texture) {\r\n        this.texture = texture;\r\n    }\r\n}\r\n","/*\r\n    ChickenPaint\r\n    \r\n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\r\n    by Nicholas Sherlock / Chicken Smoothie.\r\n    \r\n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\r\n\r\n    ChickenPaint is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    ChickenPaint is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nexport default class CPUndo {\r\n    /**\r\n     * Attempt to merge the given undo into this one, and return true if successful.\r\n     *\r\n     * @param undo\r\n     * @returns {boolean}\r\n     */\r\n    merge(undo) {\r\n        return false;\r\n    };\r\n    \r\n    /**\r\n     * Return true if this undo didn't modify the document.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    noChange() {\r\n        return false;\r\n    };\r\n    \r\n    /**\r\n     * Return the number of bytes of memory used by this undo, or 0 if it cannot be estimated.\r\n     *\r\n     * @param undone\r\n     * @param param\r\n     * @returns {number}\r\n     */\r\n    getMemoryUsed(undone, param) {\r\n        return 0;\r\n    };\r\n    \r\n    /**\r\n     * Call when this undo is no longer on the top of the stack, so it can optimize its memory usage.\r\n     */\r\n    compact() {\r\n    }\r\n}","/*\r\n    ChickenPaint\r\n\r\n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\r\n    by Nicholas Sherlock / Chicken Smoothie.\r\n\r\n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\r\n\r\n    ChickenPaint is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    ChickenPaint is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n/**\r\n *\r\n * @param {(CPColorBmp|CPGreyBmp)} bmp\r\n * @param int x - Position of the clipboard bmp within the document\r\n * @param int y\r\n * @constructor\r\n */\r\nexport default function CPClip(bmp, x, y) {\r\n    this.bmp = bmp;\r\n    \r\n    this.x = x;\r\n    this.y = y;\r\n};","/*\n    ChickenPaint\n    \n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\n    by Nicholas Sherlock / Chicken Smoothie.\n    \n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n    ChickenPaint is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ChickenPaint is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n *\n * @param {number} rgb\n * @param {Object} hsv\n */\nfunction convertRgbToHsv(rgb, hsv) {\n    var\n        r = (rgb >> 16) & 0xff,\n        g = (rgb >> 8) & 0xff,\n        b = rgb & 0xff;\n\n    // Value\n    hsv.value = Math.max(r, Math.max(g, b));\n\n    // Saturation\n    var\n        mini = Math.min(r, Math.min(g, b));\n\n    if (hsv.value == 0) {\n        hsv.saturation = 0;\n    } else {\n        hsv.saturation = ~~((hsv.value - mini) / hsv.value * 255);\n    }\n\n    // Hue\n    if (hsv.saturation == 0) {\n        hsv.hue = 0;\n    } else {\n        var\n            cr = (hsv.value - r) / (hsv.value - mini),\n            cg = (hsv.value - g) / (hsv.value - mini),\n            cb = (hsv.value - b) / (hsv.value - mini);\n\n        var\n            _hue = 0;\n\n        if (hsv.value == r) {\n            _hue = cb - cg;\n        }\n        if (hsv.value == g) {\n            _hue = 2 + cr - cb;\n        }\n        if (hsv.value == b) {\n            _hue = 4 + cg - cr;\n        }\n\n        _hue *= 60;\n        if (_hue < 0) {\n            _hue += 360;\n        }\n\n        hsv.hue = ~~_hue;\n    }\n}\n\n/**\n *\n * @param {Object} hsv\n * @returns {int}\n */\nfunction convertHsvToRgb(hsv) {\n    // no saturation means it's just a shade of grey\n    if (hsv.saturation == 0) {\n        return (hsv.value << 16) | (hsv.value << 8) | hsv.value;\n    } else {\n        var\n            f = hsv.hue / 60;\n\n        f = f - Math.floor(f);\n\n        var\n            s = hsv.saturation / 255,\n            m = ~~(hsv.value * (1 - s)),\n            n = ~~(hsv.value * (1 - s * f)),\n            k = ~~(hsv.value * (1 - s * (1 - f)));\n\n        switch (~~(hsv.hue / 60)) {\n            case 0:\n                return (hsv.value << 16) | (k << 8) | m;\n            case 1:\n                return (n << 16) | (hsv.value << 8) | m;\n            case 2:\n                return (m << 16) | (hsv.value << 8) | k;\n            case 3:\n                return (m << 16) | (n << 8) | hsv.value;\n            case 4:\n                return (k << 16) | (m << 8) | hsv.value;\n            case 5:\n                return (hsv.value << 16) | (m << 8) | n;\n            default:\n                return 0; // invalid hue\n        }\n    }\n}\n\n/**\n *\n * @param {number} rgb - Initial color\n * @constructor\n */\nexport default function CPColor(rgb) {\n    /**\n     * Color in RGB byte order (no alpha component)\n     *\n     * @type {int}\n     */\n    this.rgb = 0;\n\n    /**\n     * Hue 0-359 degrees\n     *\n     * @type {int}\n     */\n    this.hue = 0;\n\n    /**\n     * Color saturation 0 - 255\n     * @type {int}\n     */\n    this.saturation = 0;\n\n    /**\n     * Brightness 0 - 255\n     *\n     * @type {int}\n     */\n    this.value = 0;\n\n    this.setRgb(rgb || 0);\n}\n\nCPColor.prototype.getRgb = function() {\n    return this.rgb;\n};\n\nCPColor.prototype.getSaturation = function() {\n    return this.saturation;\n};\n\nCPColor.prototype.getHue = function() {\n    return this.hue;\n};\n\nCPColor.prototype.getValue = function() {\n    return this.value;\n};\n\nCPColor.prototype.setRgbComponents = function(r, g, b) {\n    this.setRgb((r << 16) | (g << 8) | b);\n};\n\nCPColor.prototype.setRgb = function(rgb) {\n    this.rgb = rgb;\n    convertRgbToHsv(rgb, this);\n};\n\nCPColor.prototype.setHsv = function(hue, saturation, value) {\n    this.hue = hue;\n    this.saturation = saturation;\n    this.value = value;\n\n    this.rgb = convertHsvToRgb(this);\n};\n\nCPColor.prototype.setHue = function(hue) {\n    this.hue = hue;\n    this.rgb = convertHsvToRgb(this);\n};\n\nCPColor.prototype.setSaturation = function(saturation) {\n    this.saturation = saturation;\n    this.rgb = convertHsvToRgb(this);\n};\n\nCPColor.prototype.setValue = function(value) {\n    this.value = value;\n    this.rgb = convertHsvToRgb(this);\n};\n\nCPColor.prototype.setGreyscale = function(value) {\n    this.rgb = CPColor.greyToRGB(value);\n    this.hue = 0;\n    this.saturation = 0;\n    this.value = value;\n};\n\nCPColor.prototype.clone = function() {\n    var\n        result = new CPColor(0);\n\n    result.copyFrom(this);\n\n    return result;\n};\n\n/**\n *\n * @param {CPColor} that\n */\nCPColor.prototype.copyFrom = function(that) {\n    this.rgb = that.rgb;\n    this.hue = that.hue;\n    this.saturation = that.saturation;\n    this.value = that.value;\n};\n\n/**\n *\n * @param {CPColor} color\n * @returns {boolean}\n */\nCPColor.prototype.isEqual = function(color) {\n    return this.rgb == color.rgb && this.hue == color.hue && this.saturation == color.saturation && this.value == color.value;\n};\n\nCPColor.greyToRGB = function(grey) {\n    return grey | (grey << 8) | (grey << 16);\n};","/*\n    ChickenPaint\n    \n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\n    by Nicholas Sherlock / Chicken Smoothie.\n    \n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n    ChickenPaint is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ChickenPaint is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nexport default function CPRandom() {\n    var \n        nextNextGaussian, \n        haveNextNextGaussian = false;\n\n    /**\n     * Definition from Java, mean of 0.0 and standard deviation 1.0.\n     */\n    this.nextGaussian = function() {\n        if (haveNextNextGaussian) {\n            haveNextNextGaussian = false;\n            return nextNextGaussian;\n        } else {\n            \n            var\n                v1, v2, s;\n            \n            do {\n                v1 = 2 * Math.random() - 1; // between -1.0 and 1.0\n                v2 = 2 * Math.random() - 1; // between -1.0 and 1.0\n                s = v1 * v1 + v2 * v2;\n            } while (s >= 1 || s == 0);\n            \n            var\n                multiplier = Math.sqrt(-2 * Math.log(s) / s);\n            \n            nextNextGaussian = v2 * multiplier;\n            haveNextNextGaussian = true;\n            \n            return v1 * multiplier;\n        }\n    };\n};","// Modifications by Nicholas Sherlock. Original docs below:\n\n// Last updated November 2011\n// By Simon Sarris\n// www.simonsarris.com\n// sarris@acm.org\n//\n// Free to use and distribute at will\n// So long as you are nice to people, etc\n\n// Simple class for keeping track of the current transformation matrix\n\n// For instance:\n//    var t = new Transform();\n//    t.rotate(5);\n//    var m = t.m;\n//    ctx.setTransform(m[0], m[1], m[2], m[3], m[4], m[5]);\n\n// Is equivalent to:\n//    ctx.rotate(5);\n\n// But now you can retrieve it :)\n\n// Remember that this does not account for any CSS transforms applied to the canvas\n\nexport default function CPTransform() {\n    this.setToIdentity();\n}\n\nCPTransform.prototype.setToIdentity = function() {\n    /* Matrix components are stored in this order in 'm':\n     * [0 2 4]\n     * [1 3 5]\n     * [x x x]\n     *\n     * Last row is always 0, 0, 1 so we don't store it.\n     */\n    this.m = [ 1, 0, 0, 1, 0, 0 ];\n};\n\n/**\n * Multiply this matrix with the given transformation one like so:\n *\n * [this] = [this] * [matrix]\n *\n * @param {CPTransform} matrix\n */\nCPTransform.prototype.multiply = function(matrix) {\n    var \n        m11 = this.m[0] * matrix.m[0] + this.m[2] * matrix.m[1],\n        m12 = this.m[1] * matrix.m[0] + this.m[3] * matrix.m[1],\n\n        m21 = this.m[0] * matrix.m[2] + this.m[2] * matrix.m[3],\n        m22 = this.m[1] * matrix.m[2] + this.m[3] * matrix.m[3],\n\n        dx = this.m[0] * matrix.m[4] + this.m[2] * matrix.m[5] + this.m[4],\n        dy = this.m[1] * matrix.m[4] + this.m[3] * matrix.m[5] + this.m[5];\n\n    this.m[0] = m11;\n    this.m[1] = m12;\n    this.m[2] = m21;\n    this.m[3] = m22;\n    this.m[4] = dx;\n    this.m[5] = dy;\n};\n\n/**\n * Multiply this matrix with the given transformation one like so:\n *\n * [this] = [matrix] * [this]\n *\n * @param {CPTransform} matrix\n */\nCPTransform.prototype.preMultiply = function(matrix) {\n    var\n        m11 = matrix.m[0] * this.m[0] + matrix.m[2] * this.m[1],\n        m12 = matrix.m[1] * this.m[0] + matrix.m[3] * this.m[1],\n\n        m21 = matrix.m[0] * this.m[2] + matrix.m[2] * this.m[3],\n        m22 = matrix.m[1] * this.m[2] + matrix.m[3] * this.m[3],\n\n        dx = matrix.m[0] * this.m[4] + matrix.m[2] * this.m[5] + matrix.m[4],\n        dy = matrix.m[1] * this.m[4] + matrix.m[3] * this.m[5] + matrix.m[5];\n\n    this.m[0] = m11;\n    this.m[1] = m12;\n    this.m[2] = m21;\n    this.m[3] = m22;\n    this.m[4] = dx;\n    this.m[5] = dy;\n};\n\nCPTransform.prototype.invert = function() {\n    var \n        d = 1 / (this.m[0] * this.m[3] - this.m[1] * this.m[2]),\n        m0 = this.m[3] * d,\n        m1 = -this.m[1] * d,\n        m2 = -this.m[2] * d,\n        m3 = this.m[0] * d,\n        m4 = d * (this.m[2] * this.m[5] - this.m[3] * this.m[4]),\n        m5 = d * (this.m[1] * this.m[4] - this.m[0] * this.m[5]);\n    \n    this.m[0] = m0;\n    this.m[1] = m1;\n    this.m[2] = m2;\n    this.m[3] = m3;\n    this.m[4] = m4;\n    this.m[5] = m5;\n};\n\nCPTransform.prototype.getInverted = function() {\n    var\n        result = new CPTransform();\n    \n    result.m[0] = this.m[0];\n    result.m[1] = this.m[1];\n    result.m[2] = this.m[2];\n    result.m[3] = this.m[3];\n    result.m[4] = this.m[4];\n    result.m[5] = this.m[5];\n    \n    result.invert();\n    \n    return result;\n};\n\n/**\n * Multiply this transform by a rotation matrix for the given angle:\n *\n * [ cos(a) -sin(a) 0]\n * [ sin(a)  cos(a) 0]\n * [   0       0    1]\n */\nCPTransform.prototype.rotate = function(rad) {\n    var \n        c = Math.cos(rad),\n        s = Math.sin(rad),\n\n        m11 = this.m[0] * c + this.m[2] * s,\n        m12 = this.m[1] * c + this.m[3] * s,\n        m21 = this.m[0] * -s + this.m[2] * c,\n        m22 = this.m[1] * -s + this.m[3] * c;\n    \n    this.m[0] = m11;\n    this.m[1] = m12;\n    this.m[2] = m21;\n    this.m[3] = m22;\n};\n\nCPTransform.prototype.rotateAroundPoint = function(rad, x, y) {\n    this.translate(x, y);\n    this.rotate(rad);\n    this.translate(-x, -y);\n};\n\n/**\n * Multiply this transform by a translation matrix:\n *\n * [1  0  x]\n * [0  1  y]\n * [0  0  1]\n *\n * @param x\n * @param y\n */\nCPTransform.prototype.translate = function(x, y) {\n    this.m[4] += this.m[0] * x + this.m[2] * y;\n    this.m[5] += this.m[1] * x + this.m[3] * y;\n};\n\n/**\n * Multiply this transform by a scale matrix:\n *\n * [sx 0  0]\n * [0  sy 0]\n * [0  0  1]\n *\n * @param sx\n * @param sy\n */\nCPTransform.prototype.scale = function(sx, sy) {\n    this.m[0] *= sx;\n    this.m[1] *= sx;\n    this.m[2] *= sy;\n    this.m[3] *= sy;\n};\n\nCPTransform.prototype.scaleAroundPoint = function(sx, sy, px, py) {\n    this.translate(px, py);\n    this.scale(sx, sy);\n    this.translate(-px, -py);\n};\n\n/**\n * Multiply this transform by a shear matrix:\n *\n * [1  sx 0]\n * [sy 1  0]\n * [0  0  1]\n *\n * @param {number} x\n * @param {number} y\n */\nCPTransform.prototype.shear = function(x, y) {\n  var\n      m11 = this.m[0] + this.m[2] * y,\n      m12 = this.m[1] + this.m[3] * y,\n      m21 = this.m[2] + this.m[0] * x,\n      m22 = this.m[3] + this.m[1] * x;\n\n    this.m[0] = m11;\n    this.m[1] = m12;\n    this.m[2] = m21;\n    this.m[3] = m22;\n};\n\nCPTransform.prototype.getTransformedPoint = function(p) {\n    return {\n        x: p.x * this.m[0] + p.y * this.m[2] + this.m[4],\n        y: p.x * this.m[1] + p.y * this.m[3] + this.m[5]\n    };\n};\n\nCPTransform.prototype.transformPoints = function(points) {\n    for (var i = 0; i < points.length; i++) {\n        points[i] = this.getTransformedPoint(points[i]);\n    }\n};\n\nCPTransform.prototype.getTranslateX = function() {\n    return this.m[4];\n};\n\nCPTransform.prototype.getTranslateY = function() {\n    return this.m[5];\n};\n\nCPTransform.prototype.clone = function() {\n    var\n        result = new CPTransform();\n    \n    result.m[0] = this.m[0];\n    result.m[1] = this.m[1];\n    result.m[2] = this.m[2];\n    result.m[3] = this.m[3];\n    result.m[4] = this.m[4];\n    result.m[5] = this.m[5];\n    \n    return result;\n};\n\nCPTransform.prototype.getDeterminant = function() {\n    return this.m[0] * this.m[3] - this.m[1] * this.m[2];\n};\n\n/**\n * Break down the matrix into a translation, scale, rotation, then shear operation.\n *\n * x or y scale must not be zero.\n *\n * http://www.maths-informatique-jeux.com/blog/frederic/?post/2013/12/01/Decomposition-of-2D-transform-matrices\n */\nCPTransform.prototype.decompose = function() {\n    var\n        determinant = this.getDeterminant(),\n        r = Math.sqrt(this.m[0] * this.m[0] + this.m[1] * this.m[1]);\n\n    return {\n        translate: {x: this.m[4], y: this.m[5]},\n        rotate: Math.sign(this.m[1]) * Math.acos(this.m[0] / r),\n        scale: {x: r, y: determinant / r},\n        shear: {x: Math.atan((this.m[0] * this.m[2] + this.m[1] * this.m[3]) / (r * r)), y: 0}\n    };\n};\n\nCPTransform.prototype.toString = function() {\n    const\n        PLACES = 2;\n\n    return (\"[\" + this.m[0].toFixed(PLACES) + \" \" + this.m[2].toFixed(PLACES) + \" \" + this.m[4].toFixed(PLACES) + \"]\\n\" +\n           \"[\" + this.m[1].toFixed(PLACES) + \" \" + this.m[3].toFixed(PLACES) + \" \" + this.m[5].toFixed(PLACES) + \"]\\n\" +\n           \"[0.00 0.00 1.00]\");\n};\n\nMath.sign = Math.sign || function(x) {\n    x = +x; // convert to a number\n    if (x === 0 || isNaN(x)) {\n        return x;\n    }\n    return x > 0 ? 1 : -1;\n};","/*\n\tChickenPaint\n\n\tChickenPaint is a translation of ChibiPaint from Java to JavaScript\n\tby Nicholas Sherlock / Chicken Smoothie.\n\n\tChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n\tChickenPaint is free software: you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation, either version 3 of the License, or\n\t(at your option) any later version.\n\n\tChickenPaint is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport {createCanvas} from \"./Canvas.js\";\n\nfunction getCanvasInterpolationPropName(canvasContext) {\n\tvar\n\t\tbrowserProperties = [\n\t\t\t\"imageSmoothingEnabled\", \"mozImageSmoothingEnabled\", \"webkitImageSmoothingEnabled\",\n\t\t\t\"msImageSmoothingEnabled\"\n\t\t];\n\n\tfor (var i = 0; i < browserProperties.length; i++) {\n\t\tif (browserProperties[i] in canvasContext) {\n\t\t\treturn browserProperties[i];\n\t\t}\n\t}\n\n\treturn null;\n}\n\nexport function isCanvasInterpolationSupported() {\n\tvar\n\t\tcanvas = createCanvas(0, 0),\n\t\tcanvasContext = canvas.getContext(\"2d\");\n\n\treturn !!getCanvasInterpolationPropName(canvasContext);\n}\n\nexport function setCanvasInterpolation(canvasContext, enabled) {\n\tvar\n\t\tpropName = getCanvasInterpolationPropName(canvasContext);\n\n\tif (propName) {\n\t\tcanvasContext[propName] = enabled;\n\t}\n}\n","/*\r\n    ChickenPaint\r\n\r\n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\r\n    by Nicholas Sherlock / Chicken Smoothie.\r\n\r\n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\r\n\r\n    ChickenPaint is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    ChickenPaint is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport CPColorBmp from \"./CPColorBmp.js\";\r\nimport CPGreyBmp from \"./CPGreyBmp.js\";\r\nimport CPBrushInfo from \"./CPBrushInfo.js\";\r\n\r\nimport CPColorFloat from \"../util/CPColorFloat.js\";\r\n\r\n/**\r\n * @param {number[]} array\r\n * @returns {number}\r\n */\r\nfunction average(array) {\r\n\tlet\r\n\t\taccumulator = 0;\r\n\r\n\tfor (let i = 0; i < array.length; i++) {\r\n\t\taccumulator += array[i];\r\n\t}\r\n\r\n\treturn accumulator / array.length;\r\n}\r\n\r\n/**\r\n * @param {CPColorFloat[]} array\r\n * @returns {CPColorFloat}\r\n */\r\nfunction averageColorFloat(array) {\r\n\tlet\r\n\t\taverage = new CPColorFloat(0, 0, 0);\r\n\r\n\tfor (let i = 0; i < array.length; i++) {\r\n\t\tlet\r\n\t\t\tsample = array[i];\r\n\r\n\t\taverage.r += sample.r;\r\n\t\taverage.g += sample.g;\r\n\t\taverage.b += sample.b;\r\n\t}\r\n\r\n\taverage.r /= array.length;\r\n\taverage.g /= array.length;\r\n\taverage.b /= array.length;\r\n\r\n\treturn average;\r\n}\r\n\r\nfunction lerp(from, to, prop) {\r\n\treturn from * (1 - prop) + to * prop;\r\n}\r\n\r\nexport class CPBrushTool {\r\n\r\n\t/**\r\n\t * @param {CPGreyBmp} strokeBuffer - A 32-bit image we can use for buffering paint operations to be merged later.\r\n\t * @param {CPRect} strokedRegion - The area of the strokeBuffer we've painted on.\r\n\t */\r\n\tconstructor(strokeBuffer, strokedRegion) {\r\n\t\tthis._strokeBuffer = strokeBuffer;\r\n\t\tthis._strokedRegion = strokedRegion;\r\n\r\n\t\t/**\r\n\t\t * Set to true if the brush wants to be able to sample its output\r\n\t\t * from the layer as input for its next drawing operation (i.e. please merge the stroke buffer through to the\r\n\t\t * layer before the next call).\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t */\r\n\t\tthis.wantsOutputAsInput = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {CPColorBmp|CPGreyBmp} destImage - Image to paint to (for those brushes not using the strokeBuffer)\r\n\t * @param {CPRect} imageRect - The area on the canvas that will be painted to\r\n\t * @param {CPBrushInfo} brushConfig - The current brush tip configuration\r\n\t * @param {CPRect} brushRect - The rectangle from the dab which will be painted to the canvas\r\n\t * @param {CPBrushDab} dab\r\n\t * @param {CPColorBmp|CPGreyBmp} sampleImage - Image to sample from (either the current layer/mask or the fusion depending on user's\r\n\t * choice of \"sample all layers\"\r\n\t * @param {number} color - RGB current brush color\r\n\t */\r\n\tpaintDab(destImage, imageRect, sampleImage, brushConfig, brushRect, dab, color) {\r\n\t\tlet\r\n\t\t\talpha = Math.max(1, Math.ceil(dab.alpha * brushConfig.alphaScale));\r\n\r\n\t\tswitch (brushConfig.paintMode) {\r\n\t\t\tcase CPBrushInfo.PAINT_MODE_FLOW:\r\n\t\t\t\tthis._paintFlow(brushRect, imageRect, dab.brush, dab.width, alpha);\r\n\t\t\tbreak;\r\n\t\t\tcase CPBrushInfo.PAINT_MODE_OPACITY:\r\n\t\t\t\tthis._paintOpacity(brushRect, imageRect, dab.brush, dab.width, alpha);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Blends the brush data from the current stroke (strokeBuffer, strokedRegion) onto the original (pre-stroke)\r\n\t * image data (from undoData) and stores the result in destImage.\r\n\t *\r\n\t * @param {CPColorBmp} destImage - The layer to draw onto\r\n\t * @param {CPColorBmp} undoImage - The original pixels for the layer before the stroke began\r\n\t * @param {number} color - RGB color of the current brush\r\n\t */\r\n\tmergeOntoImage(destImage, undoImage, color) {\r\n\t\tlet\r\n\t\t\tstrokeData = this._strokeBuffer.data,\r\n\t\t\tstrokedRegion = this._strokedRegion,\r\n\r\n\t\t\tundoData = undoImage.data,\r\n\t\t\tdestData = destImage.data,\r\n\r\n\t\t\tred = (color >> 16) & 0xFF,\r\n\t\t\tgreen = (color >> 8) & 0xFF,\r\n\t\t\tblue = color & 0xFF,\r\n\r\n\t\t\twidth = strokedRegion.getWidth() | 0,\r\n\t\t\theight = strokedRegion.getHeight() | 0,\r\n\r\n\t\t\tsrcOffset = this._strokeBuffer.offsetOfPixel(strokedRegion.left, strokedRegion.top),\r\n\t\t\tdstOffset = destImage.offsetOfPixel(strokedRegion.left, strokedRegion.top),\r\n\r\n\t\t\tsrcYStride = (this._strokeBuffer.width - width) | 0,\r\n\t\t\tdstYStride = ((destImage.width - width) * CPColorBmp.BYTES_PER_PIXEL) | 0;\r\n\r\n\t\tfor (let y = 0; y < height; y++, srcOffset += srcYStride, dstOffset += dstYStride) {\r\n\t\t\tfor (let x = 0; x < width; x++, srcOffset++, dstOffset += CPColorBmp.BYTES_PER_PIXEL) {\r\n\t\t\t\tlet\r\n\t\t\t\t\tstrokeAlpha = (strokeData[srcOffset] / 255 + 0.5) | 0; // Round nearest so it's easier to achieve 255 opacity\r\n\r\n\t\t\t\tif (strokeAlpha > 0) {\r\n\t\t\t\t\tlet\r\n\t\t\t\t\t\tdestAlpha = undoData[dstOffset + CPColorBmp.ALPHA_BYTE_OFFSET],\r\n\r\n\t\t\t\t\t\tnewLayerAlpha = (strokeAlpha + destAlpha * (255 - strokeAlpha) / 255) | 0,\r\n\t\t\t\t\t\trealAlpha = (255 * strokeAlpha / newLayerAlpha) | 0,\r\n\t\t\t\t\t\tinvAlpha = 255 - realAlpha;\r\n\r\n\t\t\t\t\tdestData[dstOffset] = ((red * realAlpha + undoData[dstOffset] * invAlpha) / 255) & 0xff;\r\n\t\t\t\t\tdestData[dstOffset + 1] = ((green * realAlpha + undoData[dstOffset + 1] * invAlpha) / 255) & 0xff;\r\n\t\t\t\t\tdestData[dstOffset + 2] = ((blue * realAlpha + undoData[dstOffset + 2] * invAlpha) / 255) & 0xff;\r\n\t\t\t\t\tdestData[dstOffset + 3] = newLayerAlpha;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Uses the strokeBuffer as an alpha mask to paint the given color onto the original (pre-stroke) mask data (undoMask)\r\n\t * and stores the result in destMask.\r\n\t *\r\n\t * @param {CPGreyBmp} destMask - The destination to write to\r\n\t * @param {CPGreyBmp} undoMask - The original contents of the mask\r\n\t * @param {number} color - Intensity to paint (0-255)\r\n\t */\r\n\tmergeOntoMask(destMask, undoMask, color) {\r\n\t\tlet\r\n\t\t\tstrokeData = this._strokeBuffer.data,\r\n\t\t\tstrokedRegion = this._strokedRegion,\r\n\r\n\t\t\tundoMaskData = undoMask.data,\r\n\t\t\tdestMaskData = destMask.data,\r\n\r\n\t\t\twidth = strokedRegion.getWidth() | 0,\r\n\t\t\theight = strokedRegion.getHeight() | 0,\r\n\r\n\t\t\tdstOffset = destMask.offsetOfPixel(strokedRegion.left, strokedRegion.top),\r\n\t\t\tsrcOffset = this._strokeBuffer.offsetOfPixel(strokedRegion.left, strokedRegion.top),\r\n\r\n\t\t\tsrcYStride = (this._strokeBuffer.width - width) | 0,\r\n\t\t\tdstYStride = (destMask.width - width) | 0;\r\n\r\n\t\tfor (let y = 0; y < height; y++, srcOffset += srcYStride, dstOffset += dstYStride) {\r\n\t\t\tfor (let x = 0; x < width; x++, srcOffset++, dstOffset++) {\r\n\t\t\t\tlet\r\n\t\t\t\t\tstrokeAlpha = (strokeData[srcOffset] / 255) | 0;\r\n\r\n\t\t\t\tif (strokeAlpha > 0) {\r\n\t\t\t\t\tlet\r\n\t\t\t\t\t\tinvAlpha = 255 - strokeAlpha;\r\n\r\n\t\t\t\t\tdestMaskData[dstOffset] = (color * strokeAlpha + undoMaskData[dstOffset] * invAlpha) / 255;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Paint the brush into the strokeBuffer at the given position.\r\n\t *\r\n\t * If the brush covers the same area multiple times, ink builds up until the area becomes opaque.\r\n\t *\r\n\t * @param {CPRect} brushRect - Rectangle from brushShape array to paint\r\n\t * @param {CPRect} imageRect - Rectangle of the destination image that corresponds to brushRect\r\n\t * @param {Uint8Array} brushShape - An opacity mask for the brush tip shape\r\n\t * @param {number} brushWidth - Width of the brush buffer (bytes per row)\r\n\t * @param {number} alpha - Alpha to apply to the brush (0-255)\r\n\t */\r\n\t_paintFlow(brushRect, imageRect, brushShape, brushWidth, alpha) {\r\n\t\tlet\r\n\t\t\tstrokeData = this._strokeBuffer.data,\r\n\r\n\t\t\tbrushOffset = brushRect.left + brushRect.top * brushWidth,\r\n\t\t\tstrokeOffset = this._strokeBuffer.offsetOfPixel(imageRect.left, imageRect.top),\r\n\r\n\t\t\tdstHeight = imageRect.getHeight(),\r\n\t\t\tdstWidth = imageRect.getWidth(),\r\n\r\n\t\t\tsrcYStride = brushWidth - dstWidth,\r\n\t\t\tdstYStride = this._strokeBuffer.width - dstWidth;\r\n\r\n\t\tthis._strokedRegion.union(imageRect);\r\n\r\n\t\tfor (let y = 0; y < dstHeight; y++, brushOffset += srcYStride, strokeOffset += dstYStride) {\r\n\t\t\tfor (let x = 0; x < dstWidth; x++, brushOffset++, strokeOffset++) {\r\n\t\t\t\tlet\r\n\t\t\t\t\tbrushAlpha = brushShape[brushOffset] * alpha;\r\n\r\n\t\t\t\tif (brushAlpha != 0) {\r\n\t\t\t\t\tstrokeData[strokeOffset] = Math.min(255 * 255, strokeData[strokeOffset] + (255 - strokeData[strokeOffset] / 255) * brushAlpha / 255);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * The shape of the brush is combined with the alpha in the strokeBuffer with a simple max()\r\n\t * operation. Effectively, the brush just sets the opacity of the buffer.\r\n\t *\r\n\t * Painting the same area multiple times during a single stroke does not increase the opacity.\r\n\t *\r\n\t * @param {CPRect} brushRect\r\n\t * @param {CPRect} imageRect\r\n\t * @param {Uint8Array} brush\r\n\t * @param {number} brushWidth\r\n\t * @param {number} alpha\r\n\t */\r\n\t_paintOpacity(brushRect, imageRect, brush, brushWidth, alpha) {\r\n\t\tlet\r\n\t\t\tstrokeData = this._strokeBuffer.data,\r\n\r\n\t\t\tbrushOffset = brushRect.left + brushRect.top * brushWidth,\r\n\t\t\timageOffset = this._strokeBuffer.offsetOfPixel(imageRect.left, imageRect.top),\r\n\r\n\t\t\timageWidth = imageRect.getWidth(),\r\n\r\n\t\t\tsrcYStride = brushWidth - imageWidth,\r\n\t\t\tdstYStride = this._strokeBuffer.width - imageWidth;\r\n\r\n\t\talpha = Math.min(255, alpha);\r\n\r\n\t\tthis._strokedRegion.union(imageRect);\r\n\r\n\t\tfor (let y = imageRect.top; y < imageRect.bottom; y++, brushOffset += srcYStride, imageOffset += dstYStride) {\r\n\t\t\tfor (let x = 0; x < imageWidth; x++, brushOffset++, imageOffset++) {\r\n\t\t\t\tstrokeData[imageOffset] = Math.max(brush[brushOffset] * alpha, strokeData[imageOffset]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Allows setup to be performed when a stroke begins\r\n\t */\r\n\tbeginStroke() {\r\n\t}\r\n\r\n\t/**\r\n\t * Allows teardown to be performed when a stroke ends\r\n\t */\r\n\tendStroke() {\r\n\t}\r\n}\r\n\r\nexport class CPBrushToolEraser extends CPBrushTool {\r\n\t/**\r\n\t * @override\r\n\t */\r\n\tmergeOntoImage(destImage, undoImage, color) {\r\n\t\tlet\r\n\t\t\tstrokeData = this._strokeBuffer.data,\r\n\t\t\tstrokedRegion = this._strokedRegion,\r\n\r\n\t\t\tundoData = undoImage.data,\r\n\t\t\tdestData = destImage.data;\r\n\r\n\t\tfor (let y = strokedRegion.top; y < strokedRegion.bottom; y++) {\r\n\t\t\tlet\r\n\t\t\t\tdstOffset = destImage.offsetOfPixel(strokedRegion.left, y) + CPColorBmp.ALPHA_BYTE_OFFSET,\r\n\t\t\t\tsrcOffset = this._strokeBuffer.offsetOfPixel(strokedRegion.left, y);\r\n\r\n\t\t\tfor (let x = strokedRegion.left; x < strokedRegion.right; x++, dstOffset += CPColorBmp.BYTES_PER_PIXEL) {\r\n\t\t\t\tlet\r\n\t\t\t\t\tstrokeAlpha = (strokeData[srcOffset++] / 255) | 0;\r\n\r\n\t\t\t\tif (strokeAlpha > 0) {\r\n\t\t\t\t\tlet\r\n\t\t\t\t\t\tdestAlpha = undoData[dstOffset];\r\n\r\n\t\t\t\t\tdestData[dstOffset] = destAlpha * (255 - strokeAlpha) / 255;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class CPBrushToolDodge extends CPBrushTool {\r\n\t/**\r\n\t * Uses the opacity data in the strokeBuffer to brighten non-transparent pixels from the original image.\r\n\t *\r\n\t * @override\r\n\t */\r\n\tmergeOntoImage(destImage, undoImage, color) {\r\n\t\tlet\r\n\t\t\tstrokeData = this._strokeBuffer.data,\r\n\t\t\tstrokedRegion = this._strokedRegion,\r\n\r\n\t\t\twidth = strokedRegion.getWidth(),\r\n\t\t\theight = strokedRegion.getHeight(),\r\n\r\n\t\t\tdstOffset = destImage.offsetOfPixel(strokedRegion.left, strokedRegion.top),\r\n\t\t\tsrcOffset = this._strokeBuffer.offsetOfPixel(strokedRegion.left, strokedRegion.top),\r\n\r\n\t\t\tdstYSkip = (destImage.width - width) * CPColorBmp.BYTES_PER_PIXEL,\r\n\t\t\tsrcYSkip = this._strokeBuffer.width - width,\r\n\r\n\t\t\tundoData = undoImage.data,\r\n\t\t\tdestImageData = destImage.data;\r\n\r\n\t\tfor (let y = 0; y < height; y++, srcOffset += srcYSkip, dstOffset += dstYSkip) {\r\n\t\t\tfor (let x = 0; x < width; x++, srcOffset++, dstOffset += CPColorBmp.BYTES_PER_PIXEL) {\r\n\t\t\t\tlet\r\n\t\t\t\t\tstrokeAlpha = (strokeData[srcOffset] / 255) | 0;\r\n\r\n\t\t\t\tif (strokeAlpha > 0 && undoData[dstOffset + CPColorBmp.ALPHA_BYTE_OFFSET] != 0) {\r\n\t\t\t\t\tlet\r\n\t\t\t\t\t\tscale = (strokeAlpha + 255) / 255;\r\n\r\n\t\t\t\t\tdestImageData[dstOffset + CPColorBmp.RED_BYTE_OFFSET] = undoData[dstOffset + CPColorBmp.RED_BYTE_OFFSET] * scale;\r\n\t\t\t\t\tdestImageData[dstOffset + CPColorBmp.GREEN_BYTE_OFFSET] = undoData[dstOffset + CPColorBmp.GREEN_BYTE_OFFSET] * scale;\r\n\t\t\t\t\tdestImageData[dstOffset + CPColorBmp.BLUE_BYTE_OFFSET] = undoData[dstOffset + CPColorBmp.BLUE_BYTE_OFFSET] * scale;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t */\r\n\tmergeOntoMask(destMask, undoMask, color) {\r\n\t\tlet\r\n\t\t\tstrokeData = this._strokeBuffer.data,\r\n\t\t\tstrokedRegion = this._strokedRegion,\r\n\r\n\t\t\twidth = strokedRegion.getWidth(),\r\n\t\t\theight = strokedRegion.getHeight(),\r\n\r\n\t\t\tdstOffset = destMask.offsetOfPixel(strokedRegion.left, strokedRegion.top),\r\n\t\t\tsrcOffset = this._strokeBuffer.offsetOfPixel(strokedRegion.left, strokedRegion.top),\r\n\r\n\t\t\tdstYSkip = destMask.width - width,\r\n\t\t\tsrcYSkip = this._strokeBuffer.width - width,\r\n\r\n\t\t\tundoMaskData = undoMask.data,\r\n\t\t\tdestMaskData = destMask.data;\r\n\r\n\t\tfor (let y = 0; y < height; y++, srcOffset += srcYSkip, dstOffset += dstYSkip) {\r\n\t\t\tfor (let x = 0; x < width; x++, srcOffset++, dstOffset++) {\r\n\t\t\t\tlet\r\n\t\t\t\t\tstrokeAlpha = (strokeData[srcOffset] / 255) | 0;\r\n\r\n\t\t\t\tif (strokeAlpha > 0) {\r\n\t\t\t\t\tlet\r\n\t\t\t\t\t\tscale = (strokeAlpha + 255) / 255;\r\n\r\n\t\t\t\t\tdestMaskData[dstOffset] = Math.min(undoMaskData[dstOffset] * scale, 255);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nconst\r\n\tBURN_CONSTANT = 260;\r\n\r\nexport class CPBrushToolBurn extends CPBrushTool {\r\n\t/**\r\n\t * Uses the opacity data in the strokeBuffer to brighten non-transparent pixels from the original image.\r\n\t *\r\n\t * @override\r\n\t */\r\n\tmergeOntoImage(destImage, undoImage, color) {\r\n\t\tlet\r\n\t\t\tstrokeData = this._strokeBuffer.data,\r\n\t\t\tstrokedRegion = this._strokedRegion,\r\n\r\n\t\t\twidth = strokedRegion.getWidth(),\r\n\t\t\theight = strokedRegion.getHeight(),\r\n\r\n\t\t\tdstOffset = destImage.offsetOfPixel(strokedRegion.left, strokedRegion.top),\r\n\t\t\tsrcOffset = this._strokeBuffer.offsetOfPixel(strokedRegion.left, strokedRegion.top),\r\n\r\n\t\t\tdstYSkip = (destImage.width - width) * CPColorBmp.BYTES_PER_PIXEL,\r\n\t\t\tsrcYSkip = this._strokeBuffer.width - width,\r\n\r\n\t\t\tundoData = undoImage.data,\r\n\t\t\tdestImageData = destImage.data;\r\n\r\n\t\tfor (let y = 0; y < height; y++, srcOffset += srcYSkip, dstOffset += dstYSkip) {\r\n\t\t\tfor (let x = 0; x < width; x++, srcOffset++, dstOffset += CPColorBmp.BYTES_PER_PIXEL) {\r\n\t\t\t\tlet\r\n\t\t\t\t\tstrokeAlpha = (strokeData[srcOffset] / 255) | 0;\r\n\r\n\t\t\t\tif (strokeAlpha > 0 && undoData[dstOffset + CPColorBmp.ALPHA_BYTE_OFFSET] != 0) {\r\n\t\t\t\t\tdestImageData[dstOffset + CPColorBmp.RED_BYTE_OFFSET]   = (undoData[dstOffset + CPColorBmp.RED_BYTE_OFFSET]   - (BURN_CONSTANT - undoData[dstOffset + CPColorBmp.RED_BYTE_OFFSET])   * strokeAlpha / 255) | 0;\r\n\t\t\t\t\tdestImageData[dstOffset + CPColorBmp.GREEN_BYTE_OFFSET] = (undoData[dstOffset + CPColorBmp.GREEN_BYTE_OFFSET] - (BURN_CONSTANT - undoData[dstOffset + CPColorBmp.GREEN_BYTE_OFFSET]) * strokeAlpha / 255) | 0;\r\n\t\t\t\t\tdestImageData[dstOffset + CPColorBmp.BLUE_BYTE_OFFSET]  = (undoData[dstOffset + CPColorBmp.BLUE_BYTE_OFFSET]  - (BURN_CONSTANT - undoData[dstOffset + CPColorBmp.BLUE_BYTE_OFFSET])  * strokeAlpha / 255) | 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t */\r\n\tmergeOntoMask(destMask, undoMask, color) {\r\n\t\tlet\r\n\t\t\tstrokeData = this._strokeBuffer.data,\r\n\t\t\tstrokedRegion = this._strokedRegion,\r\n\r\n\t\t\twidth = strokedRegion.getWidth(),\r\n\t\t\theight = strokedRegion.getHeight(),\r\n\r\n\t\t\tdstOffset = destMask.offsetOfPixel(strokedRegion.left, strokedRegion.top),\r\n\t\t\tsrcOffset = this._strokeBuffer.offsetOfPixel(strokedRegion.left, strokedRegion.top),\r\n\r\n\t\t\tdstYSkip = destMask.width - width,\r\n\t\t\tsrcYSkip = this._strokeBuffer.width - width,\r\n\r\n\t\t\tundoMaskData = undoMask.data,\r\n\t\t\tdestMaskData = destMask.data;\r\n\r\n\t\tfor (let y = 0; y < height; y++, srcOffset += srcYSkip, dstOffset += dstYSkip) {\r\n\t\t\tfor (let x = 0; x < width; x++, srcOffset++, dstOffset++) {\r\n\t\t\t\tlet\r\n\t\t\t\t\tstrokeAlpha = (strokeData[srcOffset] / 255) | 0;\r\n\r\n\t\t\t\tif (strokeAlpha > 0) {\r\n\t\t\t\t\tdestMaskData[dstOffset] = Math.max(undoMaskData[dstOffset] - (BURN_CONSTANT - undoMaskData[dstOffset]) * strokeAlpha / 255, 0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nconst\r\n\tBLUR_MIN = 64,\r\n\tBLUR_MAX = 1;\r\n\r\n/**\r\n * Blends a pixel with its nearest 4 neighbors using a weighted sum. The opacity accumulated in the stroke buffer decides\r\n * how much weight the central pixel should have in the sum (higher opacities cause the central pixel to have lower weight,\r\n * increasing the contribution of those on the edges)\r\n */\r\nexport class CPBrushToolBlur extends CPBrushTool {\r\n\t/**\r\n\t * @override\r\n\t */\r\n\tmergeOntoImage(destImage, undoImage, color) {\r\n\t\tlet\r\n\t\t\tstrokeData = this._strokeBuffer.data,\r\n\t\t\tstrokedRegion = this._strokedRegion,\r\n\r\n\t\t\tundoData = undoImage.data,\r\n\t\t\tdestImageData = destImage.data,\r\n\r\n\t\t\twidth = strokedRegion.getWidth(),\r\n\r\n\t\t\tdestYStride = undoImage.width * CPColorBmp.BYTES_PER_PIXEL,\r\n\r\n\t\t\tdestOffset = undoImage.offsetOfPixel(strokedRegion.left, strokedRegion.top),\r\n\t\t\tsrcOffset = this._strokeBuffer.offsetOfPixel(strokedRegion.left, strokedRegion.top),\r\n\r\n\t\t\tdestYSkip = (undoImage.width - width) * CPColorBmp.BYTES_PER_PIXEL,\r\n\t\t\tsrcYSkip = this._strokeBuffer.width - width,\r\n\r\n\t\t\tr, g, b, a,\r\n\r\n\t\t\taddSample = function(sampleOffset) {\r\n\t\t\t\tr += undoData[sampleOffset + CPColorBmp.RED_BYTE_OFFSET];\r\n\t\t\t\tg += undoData[sampleOffset + CPColorBmp.GREEN_BYTE_OFFSET];\r\n\t\t\t\tb += undoData[sampleOffset + CPColorBmp.BLUE_BYTE_OFFSET];\r\n\t\t\t\ta += undoData[sampleOffset + CPColorBmp.ALPHA_BYTE_OFFSET];\r\n\t\t\t};\r\n\r\n\t\tfor (let y = strokedRegion.top; y < strokedRegion.bottom; y++, destOffset += destYSkip, srcOffset += srcYSkip) {\r\n\t\t\tfor (let x = strokedRegion.left; x < strokedRegion.right; x++, destOffset += CPColorBmp.BYTES_PER_PIXEL, srcOffset++) {\r\n\t\t\t\tlet\r\n\t\t\t\t\tstrokeAlpha = (strokeData[srcOffset] / 255) | 0;\r\n\r\n\t\t\t\tif (strokeAlpha > 0) {\r\n\t\t\t\t\tlet\r\n\t\t\t\t\t\tcentralSampleWeight = (BLUR_MIN + (BLUR_MAX - BLUR_MIN) * strokeAlpha / 255) | 0,\r\n\r\n\t\t\t\t\t\tweightSum = centralSampleWeight + 4;\r\n\r\n\t\t\t\t\t// Center pixel has a custom weighting\r\n\t\t\t\t\tr = centralSampleWeight * undoData[destOffset + CPColorBmp.RED_BYTE_OFFSET];\r\n\t\t\t\t\tg = centralSampleWeight * undoData[destOffset + CPColorBmp.GREEN_BYTE_OFFSET];\r\n\t\t\t\t\tb = centralSampleWeight * undoData[destOffset + CPColorBmp.BLUE_BYTE_OFFSET];\r\n\t\t\t\t\ta = centralSampleWeight * undoData[destOffset + CPColorBmp.ALPHA_BYTE_OFFSET];\r\n\r\n\t\t\t\t\t// The other pixels have a unit weighting\r\n\r\n\t\t\t\t\t// x, y - 1\r\n\t\t\t\t\taddSample(y > 0 ? destOffset - destYStride : destOffset);\r\n\t\t\t\t\t// x, y + 1\r\n\t\t\t\t\taddSample(y < undoImage.height - 1 ? destOffset + destYStride : destOffset);\r\n\t\t\t\t\t// x - 1, y\r\n\t\t\t\t\taddSample(x > 0 ? destOffset - CPColorBmp.BYTES_PER_PIXEL : destOffset);\r\n\t\t\t\t\t// x + 1, y\r\n\t\t\t\t\taddSample(x < undoImage.width - 1 ? destOffset + CPColorBmp.BYTES_PER_PIXEL : destOffset);\r\n\r\n\t\t\t\t\ta /= weightSum;\r\n\t\t\t\t\tr /= weightSum;\r\n\t\t\t\t\tg /= weightSum;\r\n\t\t\t\t\tb /= weightSum;\r\n\r\n\t\t\t\t\tdestImageData[destOffset + CPColorBmp.RED_BYTE_OFFSET] = r | 0;\r\n\t\t\t\t\tdestImageData[destOffset + CPColorBmp.GREEN_BYTE_OFFSET] = g | 0;\r\n\t\t\t\t\tdestImageData[destOffset + CPColorBmp.BLUE_BYTE_OFFSET] = b | 0;\r\n\t\t\t\t\tdestImageData[destOffset + CPColorBmp.ALPHA_BYTE_OFFSET] = a | 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t */\r\n\tmergeOntoMask(destMask, undoMask, color) {\r\n\t\tlet\r\n\t\t\tstrokeData = this._strokeBuffer.data,\r\n\t\t\tstrokedRegion = this._strokedRegion,\r\n\r\n\t\t\tundoMaskData = undoMask.data,\r\n\t\t\tdestMaskData = destMask.data,\r\n\r\n\t\t\twidth = strokedRegion.getWidth(),\r\n\r\n\t\t\tdestYStride = undoMask.width,\r\n\r\n\t\t\tdestOffset = undoMask.offsetOfPixel(strokedRegion.left, strokedRegion.top),\r\n\t\t\tsrcOffset = this._strokeBuffer.offsetOfPixel(strokedRegion.left, strokedRegion.top),\r\n\r\n\t\t\tdestYSkip = undoMask.width - width,\r\n\t\t\tsrcYSkip = this._strokeBuffer.width - width,\r\n\r\n\t\t\tsampleSum;\r\n\r\n\t\tfor (let y = strokedRegion.top; y < strokedRegion.bottom; y++, destOffset += destYSkip, srcOffset += srcYSkip) {\r\n\t\t\tfor (let x = strokedRegion.left; x < strokedRegion.right; x++, destOffset++, srcOffset++) {\r\n\t\t\t\tlet\r\n\t\t\t\t\tstrokeAlpha = (strokeData[srcOffset] / 255) | 0;\r\n\r\n\t\t\t\tif (strokeAlpha > 0) {\r\n\t\t\t\t\tlet\r\n\t\t\t\t\t\tcentralSampleWeight = (BLUR_MIN + (BLUR_MAX - BLUR_MIN) * strokeAlpha / 255) | 0,\r\n\r\n\t\t\t\t\t\tweightSum = centralSampleWeight + 4;\r\n\r\n\t\t\t\t\t// Center pixel has a custom weighting\r\n\t\t\t\t\tsampleSum = centralSampleWeight * undoMaskData[destOffset];\r\n\r\n\t\t\t\t\t// The other pixels have a unit weighting\r\n\r\n\t\t\t\t\t// x, y - 1\r\n\t\t\t\t\tsampleSum += undoMaskData[y > 0 ? destOffset - destYStride : destOffset];\r\n\t\t\t\t\t// x, y + 1\r\n\t\t\t\t\tsampleSum += undoMaskData[y < undoMask.height - 1 ? destOffset + destYStride : destOffset];\r\n\t\t\t\t\t// x - 1, y\r\n\t\t\t\t\tsampleSum += undoMaskData[x > 0 ? destOffset - 1 : destOffset];\r\n\t\t\t\t\t// x + 1, y\r\n\t\t\t\t\tsampleSum += undoMaskData[x < undoMask.width - 1 ? destOffset + 1 : destOffset];\r\n\r\n\t\t\t\t\tdestMaskData[destOffset] = (sampleSum / weightSum) | 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Brushes derived from this class use the strokeBuffer as a ARGB or AG (greyscale) layer.\r\n *\r\n * The undoBuffer (pre-stroke image data) is restored to the layer, then the pixels from strokeBuffer are blended\r\n * on top of that.\r\n */\r\nclass CPBrushToolDirectBrush extends CPBrushTool {\r\n\t/**\r\n\t * @override\r\n\t */\r\n\tmergeOntoImage(destImage, undoImage, color) {\r\n\t\tlet\r\n\t\t\tstrokeData = this._strokeBuffer.data,\r\n\t\t\tstrokedRegion = this._strokedRegion,\r\n\r\n\t\t\tundoData = undoImage.data,\r\n\t\t\tdestImageData = destImage.data,\r\n\r\n\t\t\tsrcOffset = this._strokeBuffer.offsetOfPixel(strokedRegion.left, strokedRegion.top),\r\n\t\t\tdstOffset = destImage.offsetOfPixel(strokedRegion.left, strokedRegion.top),\r\n\r\n\t\t\twidth = strokedRegion.getWidth() | 0,\r\n\t\t\theight = strokedRegion.getHeight() | 0,\r\n\r\n\t\t\tsrcYStride = (this._strokeBuffer.width - width) | 0,\r\n\t\t\tdstYStride = ((destImage.width - width) * CPColorBmp.BYTES_PER_PIXEL) | 0;\r\n\r\n\t\tfor (let y = 0; y < height; y++, srcOffset += srcYStride, dstOffset += dstYStride) {\r\n\t\t\tfor (let x = 0; x < width; x++, srcOffset++, dstOffset += CPColorBmp.BYTES_PER_PIXEL) {\r\n\t\t\t\tlet\r\n\t\t\t\t\tcolor1 = strokeData[srcOffset],\r\n\t\t\t\t\talpha1 = color1 >>> 24;\r\n\r\n\t\t\t\tif (alpha1 > 0) {\r\n\t\t\t\t\tlet\r\n\t\t\t\t\t\talpha2 = undoData[dstOffset + CPColorBmp.ALPHA_BYTE_OFFSET],\r\n\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - alpha1 * alpha2 / 255) | 0,\r\n\r\n\t\t\t\t\t\trealAlpha = (alpha1 * 255 / newAlpha) | 0,\r\n\t\t\t\t\t\tinvAlpha = 255 - realAlpha;\r\n\r\n\t\t\t\t\tdestImageData[dstOffset] = ((((color1 >> 16) & 0xFF) * realAlpha + undoData[dstOffset] * invAlpha) / 255) | 0;\r\n\t\t\t\t\tdestImageData[dstOffset + 1] = ((((color1 >> 8) & 0xFF) * realAlpha + undoData[dstOffset + 1] * invAlpha) / 255) | 0;\r\n\t\t\t\t\tdestImageData[dstOffset + 2] = (((color1 & 0xFF) * realAlpha + undoData[dstOffset + 2] * invAlpha) / 255) | 0;\r\n\t\t\t\t\tdestImageData[dstOffset + 3] = newAlpha;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t */\r\n\tmergeOntoMask(destMask, undoMask, color) {\r\n\t\tlet\r\n\t\t\tstrokeData = this._strokeBuffer.data,\r\n\t\t\tstrokedRegion = this._strokedRegion,\r\n\t\t\tundoMaskData = undoMask.data,\r\n\t\t\tdestMaskData = destMask.data,\r\n\r\n\t\t\tsrcOffset = this._strokeBuffer.offsetOfPixel(strokedRegion.left, strokedRegion.top),\r\n\t\t\tdstOffset = destMask.offsetOfPixel(strokedRegion.left, strokedRegion.top),\r\n\r\n\t\t\twidth = strokedRegion.getWidth() | 0,\r\n\t\t\theight = strokedRegion.getHeight() | 0,\r\n\r\n\t\t\tsrcYStride = (this._strokeBuffer.width - width) | 0,\r\n\t\t\tdstYStride = (destMask.width - width) | 0;\r\n\r\n\t\tfor (let y = 0; y < height; y++, srcOffset += srcYStride, dstOffset += dstYStride) {\r\n\t\t\tfor (let x = 0; x < width; x++, srcOffset++, dstOffset++) {\r\n\t\t\t\tlet\r\n\t\t\t\t\tcolor1 = strokeData[srcOffset],\r\n\t\t\t\t\talpha1 = color1 >> 8;\r\n\r\n\t\t\t\tif (alpha1 > 0) {\r\n\t\t\t\t\tlet\r\n\t\t\t\t\t\tinvAlpha = 255 - alpha1;\r\n\r\n\t\t\t\t\tdestMaskData[dstOffset] = (((color1 & 0xFF) * alpha1 + undoMaskData[dstOffset] * invAlpha) / 255) | 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nconst\r\n\tWATERCOLOR_NUM_SAMPLES = 50,\r\n\tWATERCOLOR_SAMPLE_RADIUS = 64,\r\n\tWATERCOLOR_SPREAD_FACTOR = 2 / 6;\r\n\r\nexport class CPBrushToolWatercolor extends CPBrushToolDirectBrush {\r\n\r\n\tconstructor(strokeBuffer, strokedRegion) {\r\n\t\tsuper(strokeBuffer, strokedRegion);\r\n\r\n\t\tthis.wantsOutputAsInput = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Average out a bunch of samples from around the given pixel.\r\n\t *\r\n\t * @param {CPGreyBmp} mask\r\n\t * @param {number} x - Center of sample\r\n\t * @param {number} y\r\n\t * @param {number} dx - Spread of samples from center\r\n\t * @param {number} dy\r\n\t *\r\n\t * @returns {number}\r\n\t */\r\n\tstatic _sampleGrey(mask, x, y, dx, dy) {\r\n\t\tx = x | 0;\r\n\t\ty = y | 0;\r\n\r\n\t\tlet\r\n\t\t\tsamples = [\r\n\t\t\t\t{x: x, y: y}\r\n\t\t\t];\r\n\r\n\t\tfor (let r = 0.25; r < 1.001; r += .25) {\r\n\t\t\tArray.prototype.push.apply(samples, [\r\n\t\t\t\t{x: ~~(x + r * dx), y: y},\r\n\t\t\t\t{x: ~~(x - r * dx), y: y},\r\n\t\t\t\t{x: x, y: ~~(y + r * dy)},\r\n\t\t\t\t{x: x, y: ~~(y - r * dy)},\r\n\r\n\t\t\t\t{x: ~~(x + r * 0.7 * dx), y: ~~(y + r * 0.7 * dy)},\r\n\t\t\t\t{x: ~~(x + r * 0.7 * dx), y: ~~(y - r * 0.7 * dy)},\r\n\t\t\t\t{x: ~~(x - r * 0.7 * dx), y: ~~(y + r * 0.7 * dy)},\r\n\t\t\t\t{x: ~~(x - r * 0.7 * dx), y: ~~(y - r * 0.7 * dy)}\r\n\t\t\t]);\r\n\t\t}\r\n\r\n\t\treturn average(samples.map(coord => mask.getPixel(coord.x, coord.y)));\r\n\t}\r\n\r\n\t/**\r\n\t * Average out a bunch of samples from around the given pixel.\r\n\t *\r\n\t * @param {CPColorBmp} image\r\n\t * @param {number} x - Center of sample\r\n\t * @param {number} y\r\n\t * @param {number} dx - Spread of samples from center\r\n\t * @param {number} dy\r\n\t *\r\n\t * @returns {CPColorFloat}\r\n\t */\r\n\tstatic _sampleRGB(image, x, y, dx, dy) {\r\n\t\tx = x | 0;\r\n\t\ty = y | 0;\r\n\r\n\t\tlet\r\n\t\t\tsamples = [\r\n\t\t\t\t{x: x, y: y}\r\n\t\t\t];\r\n\r\n\t\tfor (let r = 0.25; r < 1.001; r += .25) {\r\n\t\t\tArray.prototype.push.apply(samples, [\r\n\t\t\t\t{x: ~~(x + r * dx), y: y},\r\n\t\t\t\t{x: ~~(x - r * dx), y: y},\r\n\t\t\t\t{x: x, y: ~~(y + r * dy)},\r\n\t\t\t\t{x: x, y: ~~(y - r * dy)},\r\n\r\n\t\t\t\t{x: ~~(x + r * 0.7 * dx), y: ~~(y + r * 0.7 * dy)},\r\n\t\t\t\t{x: ~~(x + r * 0.7 * dx), y: ~~(y - r * 0.7 * dy)},\r\n\t\t\t\t{x: ~~(x - r * 0.7 * dx), y: ~~(y + r * 0.7 * dy)},\r\n\t\t\t\t{x: ~~(x - r * 0.7 * dx), y: ~~(y - r * 0.7 * dy)}\r\n\t\t\t]);\r\n\t\t}\r\n\r\n\t\treturn averageColorFloat(samples.map(coord => CPColorFloat.createFromInt(image.getPixel(coord.x, coord.y))));\r\n\t}\r\n\r\n\t/**\r\n\t * Blend the brush stroke with full color into the strokeBuffer\r\n\t *\r\n\t * @param {CPRect} brushRect\r\n\t * @param {CPRect} imageRect\r\n\t * @param {Uint8Array} brushShape\r\n\t * @param {number} brushWidth\r\n\t * @param {number} alpha\r\n\t * @param {number} color1 - RGB brush color\r\n\t */\r\n\t_paintToColorStrokeBuffer(brushRect, imageRect, brushShape, brushWidth, alpha, color1) {\r\n\t\tlet\r\n\t\t\tstrokeData = this._strokeBuffer.data,\r\n\r\n\t\t\twidth = imageRect.getWidth(),\r\n\t\t\theight = imageRect.getHeight(),\r\n\r\n\t\t\timageYSkip = this._strokeBuffer.width - width,\r\n\t\t\tbrushYSkip = brushWidth - width,\r\n\r\n\t\t\tbrushOffset = brushRect.left + brushRect.top * brushWidth,\r\n\t\t\timageOffset = this._strokeBuffer.offsetOfPixel(imageRect.left, imageRect.top);\r\n\r\n\t\tthis._strokedRegion.union(imageRect);\r\n\r\n\t\tfor (let y = 0; y < height; y++, brushOffset += brushYSkip, imageOffset += imageYSkip) {\r\n\t\t\tfor (let x = 0; x < width; x++, brushOffset++, imageOffset++) {\r\n\t\t\t\tlet\r\n\t\t\t\t\talpha1 = (brushShape[brushOffset] * alpha / 255) | 0;\r\n\r\n\t\t\t\tif (alpha1 > 0) {\r\n\t\t\t\t\tlet\r\n\t\t\t\t\t\tcolor2 = strokeData[imageOffset],\r\n\t\t\t\t\t\talpha2 = color2 >>> 24,\r\n\r\n\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - alpha1 * alpha2 / 255) | 0,\r\n\t\t\t\t\t\trealAlpha = (alpha1 * 255 / newAlpha) | 0,\r\n\t\t\t\t\t\tinvAlpha = 255 - realAlpha;\r\n\r\n\t\t\t\t\t// The usual alpha blending formula C = A * alpha + B * (1 - alpha)\r\n\t\t\t\t\t// has to rewritten in the form C = A + (1 - alpha) * B - (1 - alpha) *A\r\n\t\t\t\t\t// that way the rounding up errors won't cause problems\r\n\t\t\t\t\tstrokeData[imageOffset] = (newAlpha << 24)\r\n\t\t\t\t\t\t| ((color1 >> 16 & 0xff) + (((color2 >> 16 & 0xff) * invAlpha - (color1 >> 16 & 0xff) * invAlpha) / 255)) << 16\r\n\t\t\t\t\t\t| ((color1 >> 8 & 0xff) + (((color2 >> 8 & 0xff) * invAlpha - (color1 >> 8 & 0xff) * invAlpha) / 255)) << 8\r\n\t\t\t\t\t\t| ((color1 & 0xff) + (((color2 & 0xff) * invAlpha - (color1 & 0xff) * invAlpha) / 255))\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Blend a brush stroke into the strokeBuffer\r\n\t *\r\n\t * @param {CPRect} brushRect\r\n\t * @param {CPRect} imageRect\r\n\t * @param {Uint8Array} brushShape - Defines the shape of the brush tip\r\n\t * @param {number} brushWidth - Width of the brushShape array\r\n\t * @param {number} alpha - 0 - 255 alpha of the brush stroke\r\n\t * @param {number} color1 - Greyscale intensity (0 - 255)\r\n\t */\r\n\t_paintToGreyscaleStrokeBuffer(brushRect, imageRect, brushShape, brushWidth, alpha, color1) {\r\n\t\tlet\r\n\t\t\tstrokeData = this._strokeBuffer.data;\r\n\r\n\t\tthis._strokedRegion.union(imageRect);\r\n\r\n\t\tfor (let destY = imageRect.top, brushY = brushRect.top; destY < imageRect.bottom; destY++, brushY++) {\r\n\t\t\tlet\r\n\t\t\t\tsrcOffset = brushRect.left + brushY * brushWidth,\r\n\t\t\t\tdstOffset = this._strokeBuffer.offsetOfPixel(imageRect.left, destY);\r\n\r\n\t\t\tfor (let destX = imageRect.left; destX < imageRect.right; destX++, srcOffset++, dstOffset++) {\r\n\t\t\t\tlet\r\n\t\t\t\t\talpha1 = (brushShape[srcOffset] * alpha / 255) | 0;\r\n\r\n\t\t\t\tif (alpha1 <= 0) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet\r\n\t\t\t\t\tcolor2 = strokeData[dstOffset],\r\n\t\t\t\t\talpha2 = color2 >> 8,\r\n\r\n\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - alpha1 * alpha2 / 255) | 0;\r\n\r\n\t\t\t\tif (newAlpha > 0) {\r\n\t\t\t\t\tlet\r\n\t\t\t\t\t\trealAlpha = (alpha1 * 255 / newAlpha) | 0,\r\n\t\t\t\t\t\tinvAlpha = 255 - realAlpha;\r\n\r\n\t\t\t\t\t// The usual alpha blending formula C = A * alpha + B * (1 - alpha)\r\n\t\t\t\t\t// has to rewritten in the form C = A + (1 - alpha) * B - (1 - alpha) *A\r\n\t\t\t\t\t// that way the rounding up errors won't cause problems\r\n\r\n\t\t\t\t\tstrokeData[dstOffset] =\r\n\t\t\t\t\t\t(newAlpha << 8)\r\n\t\t\t\t\t\t| (color1 + (((color2 & 0xFF) * invAlpha - color1 * invAlpha) / 255));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t */\r\n\tbeginStroke() {\r\n\t\tthis._previousSamples = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t */\r\n\tpaintDab(destImage, imageRect, sampleImage, brushConfig, brushRect, dab, color) {\r\n\t\tvar\r\n\t\t\tpaintAlpha = Math.max(1, dab.alpha / 4),\r\n\t\t\tsampleX = (imageRect.left + imageRect.right) / 2,\r\n\t\t\tsampleY = (imageRect.top + imageRect.bottom) / 2,\r\n\t\t\tdx = Math.max(1, Math.min(WATERCOLOR_SAMPLE_RADIUS, imageRect.getWidth() * WATERCOLOR_SPREAD_FACTOR)),\r\n\t\t\tdy = Math.max(1, Math.min(WATERCOLOR_SAMPLE_RADIUS, imageRect.getHeight() * WATERCOLOR_SPREAD_FACTOR));\r\n\r\n\t\tif (sampleImage instanceof CPGreyBmp) {\r\n\t\t\t// Mask editing\r\n\t\t\tif (this._previousSamples == null) {\r\n\t\t\t\t// Seed the previousSamples list to capacity with a bunch of copies of one sample to get us started\r\n\t\t\t\tthis._previousSamples = new Array(WATERCOLOR_NUM_SAMPLES);\r\n\r\n\t\t\t\tthis._previousSamples.fill(CPBrushToolWatercolor._sampleGrey(\r\n\t\t\t\t\tsampleImage,\r\n\t\t\t\t\tsampleX, sampleY,\r\n\t\t\t\t\tdx, dy\r\n\t\t\t\t));\r\n\t\t\t}\r\n\r\n\t\t\tlet\r\n\t\t\t\twcColor = average(this._previousSamples),\r\n\t\t\t\tnewColor;\r\n\r\n\t\t\t// resaturation\r\n\t\t\twcColor = lerp(wcColor, color & 0xFF, brushConfig.resat * brushConfig.resat);\r\n\r\n\t\t\tnewColor = wcColor;\r\n\r\n\t\t\t// bleed\r\n\t\t\twcColor = lerp(wcColor, CPBrushToolWatercolor._sampleGrey(\r\n\t\t\t\tsampleImage,\r\n\t\t\t\tsampleX, sampleY,\r\n\t\t\t\tdx, dy\r\n\t\t\t), brushConfig.bleed);\r\n\r\n\t\t\tthis._previousSamples.push(wcColor);\r\n\t\t\tthis._previousSamples.shift();\r\n\r\n\t\t\tthis._paintToGreyscaleStrokeBuffer(brushRect, imageRect, dab.brush, dab.width, paintAlpha, Math.round(newColor));\r\n\t\t} else {\r\n\t\t\tif (this._previousSamples == null) {\r\n\t\t\t\t// Seed the previousSamples list to capacity with a bunch of copies of one sample to get us started\r\n\t\t\t\tthis._previousSamples = new Array(WATERCOLOR_NUM_SAMPLES);\r\n\r\n\t\t\t\tthis._previousSamples.fill(CPBrushToolWatercolor._sampleRGB(\r\n\t\t\t\t\tsampleImage,\r\n\t\t\t\t\tsampleX, sampleY,\r\n\t\t\t\t\tdx, dy\r\n\t\t\t\t));\r\n\t\t\t}\r\n\r\n\t\t\tlet\r\n\t\t\t\twcColor = averageColorFloat(this._previousSamples);\r\n\r\n\t\t\t// resaturation - add the brush's color to the mixture\r\n\t\t\twcColor.mixWith(CPColorFloat.createFromInt(color), brushConfig.resat * brushConfig.resat);\r\n\r\n\t\t\tlet\r\n\t\t\t\tnewColor = wcColor.toInt();\r\n\r\n\t\t\t// bleed\r\n\t\t\twcColor.mixWith(\r\n\t\t\t\tCPBrushToolWatercolor._sampleRGB(\r\n\t\t\t\t\tsampleImage,\r\n\t\t\t\t\tsampleX, sampleY,\r\n\t\t\t\t\tdx, dy\r\n\t\t\t\t),\r\n\t\t\t\tbrushConfig.bleed\r\n\t\t\t);\r\n\r\n\t\t\tthis._previousSamples.push(wcColor);\r\n\t\t\tthis._previousSamples.shift();\r\n\r\n\t\t\tthis._paintToColorStrokeBuffer(brushRect, imageRect, dab.brush, dab.width, paintAlpha, newColor);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class CPBrushToolOil extends CPBrushToolDirectBrush {\r\n\r\n\tconstructor(strokeBuffer, strokedRegion) {\r\n\t\tsuper(strokeBuffer, strokedRegion);\r\n\r\n\t\tthis.wantsOutputAsInput = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Sample intensities from the image and mix them into the brush.\r\n\t *\r\n\t * @param {CPColorBmp} maskToSample\r\n\t * @param {CPRect} brushRect\r\n\t * @param {CPRect} imageRect\r\n\t * @param {number} alpha1 - 0-255 controls how much paint is picked up from the image\r\n\t */\r\n\t_accumulatePaintFromMask(maskToSample, brushRect, imageRect, alpha1) {\r\n\t\tlet\r\n\t\t\tbrushData = this._brushBuffer.data,\r\n\t\t\tsampleData = maskToSample.data,\r\n\r\n\t\t\twidth = imageRect.getWidth(),\r\n\t\t\theight = imageRect.getHeight(),\r\n\r\n\t\t\tsrcOffset = brushRect.left + brushRect.top * this._brushBuffer.width,\r\n\t\t\tdstOffset = maskToSample.offsetOfPixel(imageRect.left, imageRect.top),\r\n\r\n\t\t\tsrcYSkip = this._brushBuffer.width - width,\r\n\t\t\tdstYSkip = maskToSample.width - width;\r\n\r\n\t\tif (alpha1 <= 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tfor (let y = 0; y < height; y++, srcOffset += srcYSkip, dstOffset += dstYSkip) {\r\n\t\t\tfor (let x = 0; x < width; x++, srcOffset++, dstOffset++) {\r\n\t\t\t\tlet\r\n\t\t\t\t\tgrey1 = sampleData[dstOffset],\r\n\r\n\t\t\t\t\tgrey2 = brushData[srcOffset],\r\n\t\t\t\t\talpha2 = grey2 >> 8,\r\n\r\n\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - alpha1 * alpha2 / 255) | 0,\r\n\r\n\t\t\t\t\trealAlpha = (alpha1 * 255 / newAlpha) | 0,\r\n\t\t\t\t\tinvAlpha = 255 - realAlpha;\r\n\r\n\t\t\t\tbrushData[srcOffset] = (newAlpha << 8) | (grey1 + ((grey2 & 0xff) * invAlpha - grey1 * invAlpha) / 255);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Add some of the given grey value back into the brush.\r\n\t *\r\n\t * @param {CPRect} brushRect\r\n\t * @param {number} alpha1 - Strength of resaturation (0-255)\r\n\t * @param {number} grey1 - Intensity to resaturate brush tip with\r\n\t */\r\n\t_resaturateBrushWithGrey(brushRect, alpha1, grey1) {\r\n\t\tif (alpha1 <= 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet\r\n\t\t\tbrushData = this._brushBuffer.data,\r\n\r\n\t\t\twidth = brushRect.getWidth(),\r\n\t\t\theight = brushRect.getHeight(),\r\n\r\n\t\t\tbrushOffset = brushRect.left + brushRect.top * this._brushBuffer.width,\r\n\t\t\tbrushYSkip = this._brushBuffer.width - width;\r\n\r\n\t\tfor (let y = 0; y < height; y++, brushOffset += brushYSkip) {\r\n\t\t\tfor (let x = 0; x < width; x++, brushOffset++) {\r\n\t\t\t\tlet\r\n\t\t\t\t\tgrey2 = brushData[brushOffset],\r\n\t\t\t\t\talpha2 = grey2 >> 8,\r\n\r\n\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - alpha1 * alpha2 / 255) | 0,\r\n\r\n\t\t\t\t\trealAlpha = (alpha1 * 255 / newAlpha) | 0,\r\n\t\t\t\t\tinvAlpha = 255 - realAlpha;\r\n\r\n\t\t\t\tbrushData[brushOffset] = (newAlpha << 8) | (grey1 + ((grey2 & 0xff) * invAlpha - grey1 * invAlpha) / 255);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Mixes the paint on the current brush with the pixels of the layer, and writes the result into the\r\n\t * AG strokeBuffer.\r\n\t *\r\n\t * @param {CPGreyBmp} destImage - Image that is being drawn onto\r\n\t * @param {CPRect} brushRect\r\n\t * @param {CPRect} imageRect\r\n\t * @param {Uint8Array} brushShape - Brush opacity map which defines its shape, of the same width as brushBuffer\r\n\t * @param {number} alpha 0-255 brush alpha\r\n\t */\r\n\t_paintToGreyscaleStrokeBuffer(destImage, brushRect, imageRect, brushShape, alpha) {\r\n\t\tlet\r\n\t\t\tstrokeData = this._strokeBuffer.data,\r\n\t\t\tbrushData = this._brushBuffer.data,\r\n\t\t\tdestImageData = destImage.data;\r\n\r\n\t\tthis._strokedRegion.union(imageRect);\r\n\r\n\t\tfor (let y = imageRect.top, brushY = brushRect.top; y < imageRect.bottom; y++, brushY++) {\r\n\t\t\tlet\r\n\t\t\t\tbufferOffset = this._brushBuffer.offsetOfPixel(brushRect.left, brushY),\r\n\t\t\t\tstrokeOffset = this._strokeBuffer.offsetOfPixel(imageRect.left, y),\r\n\t\t\t\tlayerOffset = destImage.offsetOfPixel(imageRect.left, y);\r\n\r\n\t\t\tfor (let x = imageRect.left; x < imageRect.right; x++, bufferOffset++, layerOffset++, strokeOffset++) {\r\n\t\t\t\tlet\r\n\t\t\t\t\tgrey1 = brushData[bufferOffset],\r\n\t\t\t\t\talpha1 = ((grey1 >> 8) * brushShape[bufferOffset] * alpha / (255 * 255)) | 0;\r\n\r\n\t\t\t\tif (alpha1 > 0) {\r\n\t\t\t\t\tlet\r\n\t\t\t\t\t\tgrey2 = destImageData[layerOffset],\r\n\t\t\t\t\t\tinvAlpha = 255 - alpha1;\r\n\r\n\t\t\t\t\tstrokeData[strokeOffset] = (255 << 8) | ((grey1 & 0xff) + ((grey2 * invAlpha - (grey1 & 0xff) * invAlpha) / 255));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sample colors from the image and mix them into the brush.\r\n\t *\r\n\t * @param {CPColorBmp} imageToSample\r\n\t * @param {CPRect} brushRect\r\n\t * @param {CPRect} imageRect\r\n\t * @param {number} alpha - 0-255 controls how much paint is picked up from the image\r\n\t */\r\n\t_accumulatePaintFromImage(imageToSample, brushRect, imageRect, alpha) {\r\n\t\tlet\r\n\t\t\tbrushData = this._brushBuffer.data,\r\n\t\t\tsampleData = imageToSample.data,\r\n\r\n\t\t\twidth = imageRect.getWidth(),\r\n\t\t\theight = imageRect.getHeight(),\r\n\r\n\t\t\tsrcOffset = brushRect.left + brushRect.top * this._brushBuffer.width,\r\n\t\t\tdstOffset = imageToSample.offsetOfPixel(imageRect.left, imageRect.top),\r\n\r\n\t\t\tsrcYSkip = this._brushBuffer.width - width,\r\n\t\t\tdstYSkip = (imageToSample.width - width) * CPColorBmp.BYTES_PER_PIXEL;\r\n\r\n\t\tfor (let y = 0; y < height; y++, srcOffset += srcYSkip, dstOffset += dstYSkip) {\r\n\t\t\tfor (let x = 0; x < width; x++, srcOffset++, dstOffset += CPColorBmp.BYTES_PER_PIXEL) {\r\n\t\t\t\tlet\r\n\t\t\t\t\talpha1 = (sampleData[dstOffset + CPColorBmp.ALPHA_BYTE_OFFSET] * alpha / 255) | 0;\r\n\r\n\t\t\t\tif (alpha1 > 0) {\r\n\t\t\t\t\tlet\r\n\t\t\t\t\t\tcolor2 = brushData[srcOffset],\r\n\t\t\t\t\t\talpha2 = color2 >>> 24,\r\n\r\n\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - alpha1 * alpha2 / 255) | 0,\r\n\r\n\t\t\t\t\t\trealAlpha = (alpha1 * 255 / newAlpha) | 0,\r\n\t\t\t\t\t\tinvAlpha = 255 - realAlpha,\r\n\r\n\t\t\t\t\t\tcolor1Red = sampleData[dstOffset + CPColorBmp.RED_BYTE_OFFSET],\r\n\t\t\t\t\t\tcolor1Green = sampleData[dstOffset + CPColorBmp.GREEN_BYTE_OFFSET],\r\n\t\t\t\t\t\tcolor1Blue = sampleData[dstOffset + CPColorBmp.BLUE_BYTE_OFFSET];\r\n\r\n\t\t\t\t\tbrushData[srcOffset] = newAlpha << 24\r\n\t\t\t\t\t\t| (color1Red + (((color2 >> 16 & 0xff) * invAlpha - color1Red * invAlpha) / 255)) << 16\r\n\t\t\t\t\t\t| (color1Green + (((color2 >> 8 & 0xff) * invAlpha - color1Green * invAlpha) / 255)) << 8\r\n\t\t\t\t\t\t| (color1Blue + (((color2 & 0xff) * invAlpha - color1Blue * invAlpha) / 255));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Add some of the given color back into the brush.\r\n\t *\r\n\t * @param {CPRect} brushRect\r\n\t * @param {number} alpha1 - Strength of resaturation (0-255)\r\n\t * @param {number} color1 - RGB color to resaturate brush tip with\r\n\t */\r\n\t_resaturateBrushWithColor(brushRect, alpha1, color1) {\r\n\t\tif (alpha1 <= 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet\r\n\t\t\tbrushData = this._brushBuffer.data,\r\n\r\n\t\t\twidth = brushRect.getWidth(),\r\n\t\t\theight = brushRect.getHeight(),\r\n\r\n\t\t\tbrushOffset = brushRect.left + brushRect.top * this._brushBuffer.width,\r\n\t\t\tbrushYSkip = this._brushBuffer.width - width;\r\n\r\n\t\tfor (let y = 0; y < height; y++, brushOffset += brushYSkip) {\r\n\t\t\tfor (let x = 0; x < width; x++, brushOffset++) {\r\n\t\t\t\tlet\r\n\t\t\t\t\tcolor2 = brushData[brushOffset],\r\n\t\t\t\t\talpha2 = (color2 >>> 24),\r\n\r\n\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - alpha1 * alpha2 / 255) | 0,\r\n\r\n\t\t\t\t\trealAlpha = (alpha1 * 255 / newAlpha) | 0,\r\n\t\t\t\t\tinvAlpha = 255 - realAlpha;\r\n\r\n\t\t\t\tbrushData[brushOffset] = newAlpha << 24\r\n\t\t\t\t\t| ((color1 >>> 16 & 0xff) + (((color2 >>> 16 & 0xff) * invAlpha - (color1 >>> 16 & 0xff) * invAlpha) / 255)) << 16\r\n\t\t\t\t\t| ((color1 >>> 8 & 0xff) + (((color2 >>> 8 & 0xff) * invAlpha - (color1 >>> 8 & 0xff) * invAlpha) / 255)) << 8\r\n\t\t\t\t\t| ((color1 & 0xff) + (((color2 & 0xff) * invAlpha - (color1 & 0xff) * invAlpha) / 255));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Mixes the paint on the current brush with the pixels of the layer, and writes the result into the\r\n\t * strokeBuffer.\r\n\t *\r\n\t * @param {CPColorBmp} destImage - Image that is being drawn onto\r\n\t * @param {CPRect} brushRect\r\n\t * @param {CPRect} imageRect\r\n\t * @param {Uint8Array} brushShape - Brush opacity map which defines its shape, of the same width as brushBuffer\r\n\t * @param {number} alpha 0-255 brush alpha\r\n\t */\r\n\t_paintToColorStrokeBuffer(destImage, brushRect, imageRect, brushShape, alpha) {\r\n\t\tlet\r\n\t\t\tstrokeData = this._strokeBuffer.data,\r\n\t\t\tbrushData = this._brushBuffer.data,\r\n\t\t\tdestImageData = destImage.data;\r\n\r\n\t\tthis._strokedRegion.union(imageRect);\r\n\r\n\t\tfor (let y = imageRect.top, brushY = brushRect.top; y < imageRect.bottom; y++, brushY++) {\r\n\t\t\tlet\r\n\t\t\t\tbufferOffset = this._brushBuffer.offsetOfPixel(brushRect.left, brushY),\r\n\t\t\t\tstrokeOffset = this._strokeBuffer.offsetOfPixel(imageRect.left, y),\r\n\t\t\t\tlayerOffset = destImage.offsetOfPixel(imageRect.left, y);\r\n\r\n\t\t\tfor (let x = imageRect.left; x < imageRect.right; x++, bufferOffset++, layerOffset += CPColorBmp.BYTES_PER_PIXEL, strokeOffset++) {\r\n\t\t\t\tlet\r\n\t\t\t\t\tcolor1 = brushData[bufferOffset],\r\n\t\t\t\t\talpha1 = ((color1 >>> 24) * brushShape[bufferOffset] * alpha / (255 * 255)) | 0;\r\n\r\n\t\t\t\tif (alpha1 > 0) {\r\n\t\t\t\t\tlet\r\n\t\t\t\t\t\talpha2 = destImageData[layerOffset + CPColorBmp.ALPHA_BYTE_OFFSET],\r\n\r\n\t\t\t\t\t\tnewAlpha = (alpha1 + alpha2 - alpha1 * alpha2 / 255) | 0,\r\n\r\n\t\t\t\t\t\tcolor2Red = destImageData[layerOffset + CPColorBmp.RED_BYTE_OFFSET],\r\n\t\t\t\t\t\tcolor2Green = destImageData[layerOffset + CPColorBmp.GREEN_BYTE_OFFSET],\r\n\t\t\t\t\t\tcolor2Blue = destImageData[layerOffset + CPColorBmp.BLUE_BYTE_OFFSET],\r\n\r\n\t\t\t\t\t\trealAlpha = (alpha1 * 255 / newAlpha) | 0,\r\n\t\t\t\t\t\tinvAlpha = 255 - realAlpha;\r\n\r\n\t\t\t\t\tstrokeData[strokeOffset] =\r\n\t\t\t\t\t\tnewAlpha << 24\r\n\t\t\t\t\t\t| ((color1 >> 16 & 0xff) + ((color2Red * invAlpha - (color1 >> 16 & 0xff) * invAlpha) / 255)) << 16\r\n\t\t\t\t\t\t| ((color1 >> 8 & 0xff) + ((color2Green * invAlpha - (color1 >> 8 & 0xff) * invAlpha) / 255)) << 8\r\n\t\t\t\t\t\t| ((color1 & 0xff) + ((color2Blue * invAlpha - (color1 & 0xff) * invAlpha) / 255));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t */\r\n\tpaintDab(destImage, imageRect, sampleImage, brushConfig, brushRect, dab, color) {\r\n\t\tif (destImage instanceof CPColorBmp) {\r\n\t\t\tif (this._brushBuffer == null) {\r\n\t\t\t\t// TODO this means we can't have pressure sensitive tip sizes for Oil (see CPBrushInfo.applyPressure)\r\n\t\t\t\tthis._brushBuffer = new CPGreyBmp(dab.width, dab.height, 32); // Initialized to 0 for us by the browser\r\n\r\n\t\t\t\tthis._accumulatePaintFromImage(sampleImage, brushRect, imageRect, 255);\r\n\t\t\t} else {\r\n\t\t\t\tthis._resaturateBrushWithColor(brushRect, ~~((brushConfig.resat <= 0.0) ? 0 : Math.max(1, (brushConfig.resat * brushConfig.resat) * 255)), color & 0xFFFFFF);\r\n\t\t\t\tthis._paintToColorStrokeBuffer(destImage, brushRect, imageRect, dab.brush, dab.alpha);\r\n\t\t\t\tthis._accumulatePaintFromImage(sampleImage, brushRect, imageRect, ~~(brushConfig.bleed * 255));\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (this._brushBuffer == null) {\r\n\t\t\t\tthis._brushBuffer = new CPGreyBmp(dab.width, dab.height, 16); // Initialized to 0 for us by the browser\r\n\r\n\t\t\t\tthis._accumulatePaintFromMask(sampleImage, brushRect, imageRect, 255);\r\n\t\t\t} else {\r\n\t\t\t\tthis._resaturateBrushWithGrey(brushRect, ~~((brushConfig.resat <= 0.0) ? 0 : Math.max(1, (brushConfig.resat * brushConfig.resat) * 255)), color & 0xFF);\r\n\t\t\t\tthis._paintToGreyscaleStrokeBuffer(destImage, brushRect, imageRect, dab.brush, dab.alpha);\r\n\t\t\t\tthis._accumulatePaintFromMask(sampleImage, brushRect, imageRect, ~~(brushConfig.bleed * 255));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tendStroke() {\r\n\t\tthis._brushBuffer = null;\r\n\t}\r\n}\r\n\r\n/**\r\n * Spread the image pixels within the given rectangle outwards to fill the image with pixels.\r\n *\r\n * @param {CPGreyBmp} image\r\n * @param {CPRect} rect\r\n */\r\nfunction stretchRectToFillBuffer(image, rect) {\r\n\tconst\r\n\t\timageData = image.data;\r\n\r\n\t// First stretch the source rect pixels out horizontally to fill W and E areas\r\n\tif (rect.left > 0) {\r\n\t\tfor (let y = rect.top; y < rect.bottom; y++) {\r\n\t\t\tlet\r\n\t\t\t\trowStartOffset = y * image.width,\r\n\r\n\t\t\t\tdstOffset = rowStartOffset,\r\n\t\t\t\tfillColor = imageData[rowStartOffset + rect.left];\r\n\r\n\t\t\tfor (let x = 0; x < rect.left; x++, dstOffset++) {\r\n\t\t\t\timageData[dstOffset] = fillColor;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tif (rect.right < image.width) {\r\n\t\tfor (let y = rect.top; y < rect.bottom; y++) {\r\n\t\t\tlet\r\n\t\t\t\trowStartOffset = y * image.width,\r\n\r\n\t\t\t\tdstOffset = rowStartOffset + rect.right,\r\n\t\t\t\tfillColor = imageData[dstOffset - 1];\r\n\r\n\t\t\tfor (let x = rect.right; x < image.width; x++, dstOffset++) {\r\n\t\t\t\timageData[dstOffset] = fillColor;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Then stretch those rows upwards and downwards (to fill NW, N, NE, SW, S, SE areas)\r\n\tlet\r\n\t\tdstOffset = 0;\r\n\r\n\tfor (let y = 0; y < rect.top; y++) {\r\n\t\tlet\r\n\t\t\tsrcOffset = rect.top * image.width;\r\n\r\n\t\tfor (let x = 0; x < image.width; x++, srcOffset++, dstOffset++) {\r\n\t\t\timageData[dstOffset] = imageData[srcOffset];\r\n\t\t}\r\n\t}\r\n\r\n\tdstOffset = rect.bottom * image.width;\r\n\r\n\tfor (let y = rect.bottom; y < image.width; y++) {\r\n\t\tlet\r\n\t\t\tsrcOffset = (rect.bottom - 1) * image.width;\r\n\r\n\t\tfor (let x = 0; x < image.width; x++, srcOffset++, dstOffset++) {\r\n\t\t\timageData[dstOffset] = imageData[srcOffset];\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class CPBrushToolSmudge extends CPBrushToolDirectBrush {\r\n\r\n\tconstructor(strokeBuffer, strokedRegion) {\r\n\t\tsuper(strokeBuffer, strokedRegion);\r\n\r\n\t\tthis._brushBuffer = null;\r\n\t\tthis.wantsOutputAsInput = true;\r\n\t\tthis.noMergePhase = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Pick up paint from the given image and store into the AG brush buffer.\r\n\t *\r\n\t * @param {CPGreyBmp} sampleMask - Mask to sample from\r\n\t * @param {CPRect} maskRect - Rectangle of the canvas that our brush covers\r\n\t * @param {CPRect} brushRect - The corresponding rectangle within the brush buffer\r\n\t * @param {number} alpha - Alpha of brush (0-255)\r\n\t */\r\n\t_sampleFromMask(sampleMask, brushRect, maskRect, alpha) {\r\n\t\tlet\r\n\t\t\tbrushData = this._brushBuffer.data,\r\n\r\n\t\t\twidth = brushRect.getWidth(),\r\n\t\t\theight = brushRect.getHeight(),\r\n\r\n\t\t\tbrushOffset = this._brushBuffer.offsetOfPixel(brushRect.left, brushRect.top),\r\n\t\t\tmaskOffset = sampleMask.offsetOfPixel(maskRect.left, maskRect.top),\r\n\r\n\t\t\tbrushYSkip = this._brushBuffer.width - width,\r\n\t\t\tmaskYSkip = sampleMask.width - width,\r\n\r\n\t\t\tinvAlpha = 255 - alpha;\r\n\r\n\t\tif (alpha == 255) {\r\n\t\t\t// Brush doesn't sample from the image\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Blend pixels (in the area where the brush overlaps the canvas) into the brush buffer\r\n\t\tfor (let y = 0; y < height; y++, brushOffset += brushYSkip, maskOffset += maskYSkip) {\r\n\t\t\tfor (let x = 0; x < width; x++, brushOffset++, maskOffset++) {\r\n\t\t\t\tlet\r\n\t\t\t\t\tsampleGrey = sampleMask.data[maskOffset],\r\n\r\n\t\t\t\t\toldBrushColor = brushData[brushOffset],\r\n\t\t\t\t\tnewBrushGrey = ((sampleGrey * invAlpha + (oldBrushColor & 0xff) * alpha) / 255),\r\n\r\n\t\t\t\t\tnewBrushColor =\r\n\t\t\t\t\t\t((255 * invAlpha + (oldBrushColor >> 8) * alpha) / 255) << 8\r\n\t\t\t\t\t\t| newBrushGrey;\r\n\r\n\t\t\t\t/* If low-alpha rounding caused us to not even update the brush color, take a 1-unit step\r\n\t\t\t\t * in the direction of the sample color.\r\n\t\t\t\t */\r\n\t\t\t\tif (newBrushColor == oldBrushColor) {\r\n\t\t\t\t\tif (sampleGrey > newBrushGrey) {\r\n\t\t\t\t\t\tnewBrushColor++;\r\n\t\t\t\t\t} else if (sampleGrey < newBrushGrey) {\r\n\t\t\t\t\t\tnewBrushColor--;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbrushData[brushOffset] = newBrushColor;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t * The areas of the brush buffer that lay outside the canvas haven't been filled yet. Stretch the pixels\r\n\t\t * around the edge of the area we did sample to fill in the gaps.\r\n\t\t */\r\n\t\tstretchRectToFillBuffer(this._brushBuffer, brushRect);\r\n\t}\r\n\r\n\t/**\r\n\t * Replace the destination mask with the smudge buffer within the shape of the brush tip.\r\n\t *\r\n\t * @param {CPGreyBmp} destMask\r\n\t * @param {CPRect} brushRect\r\n\t * @param {CPRect} imageRect\r\n\t * @param {Uint8Array} brushShape - Of the same width as this._brushBuffer\r\n\t */\r\n\t_paintToMask(destMask, brushRect, imageRect, brushShape) {\r\n\t\tlet\r\n\t\t\twidth = brushRect.getWidth(),\r\n\t\t\theight = brushRect.getHeight(),\r\n\r\n\t\t\tsrcOffset = this._brushBuffer.offsetOfPixel(brushRect.left, brushRect.top),\r\n\t\t\tdstOffset = destMask.offsetOfPixel(imageRect.left, imageRect.top),\r\n\r\n\t\t\tsrcYSkip = this._brushBuffer.width - width,\r\n\t\t\tdstYSkip = destMask.width - width,\r\n\r\n\t\t\tdestMaskData = destMask.data,\r\n\t\t\tbrushPaintData = this._brushBuffer.data;\r\n\r\n\t\tfor (let y = 0; y < height; y++, dstOffset += dstYSkip, srcOffset += srcYSkip) {\r\n\t\t\tfor (let x = 0; x < width; x++, srcOffset++, dstOffset++) {\r\n\t\t\t\tlet\r\n\t\t\t\t\tpaintValue = brushPaintData[srcOffset],\r\n\r\n\t\t\t\t\tstrokeAlpha = ((paintValue >> 8) * brushShape[srcOffset] / 255) | 0,\r\n\t\t\t\t\tstrokeColor = paintValue & 0xff;\r\n\r\n\t\t\t\tif (strokeAlpha > 0) {\r\n\t\t\t\t\tdestMaskData[dstOffset] = strokeColor;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Pick up paint from the given image and store into the brush buffer.\r\n\t *\r\n\t * @param {CPColorBmp} sampleImage - Image to sample from\r\n\t * @param {CPRect} imageRect - Rectangle of the canvas that our brush covers\r\n\t * @param {CPRect} brushRect - The corresponding rectangle within the brush buffer\r\n\t * @param {number} alpha - Alpha of brush (0-255)\r\n\t */\r\n\t_sampleFromImage(sampleImage, brushRect, imageRect, alpha) {\r\n\t\tlet\r\n\t\t\tbrushData = this._brushBuffer.data,\r\n\r\n\t\t\twidth = brushRect.getWidth(),\r\n\t\t\theight = brushRect.getHeight(),\r\n\r\n\t\t\tbrushOffset = this._brushBuffer.offsetOfPixel(brushRect.left, brushRect.top),\r\n\t\t\timageOffset = sampleImage.offsetOfPixel(imageRect.left, imageRect.top),\r\n\r\n\t\t\tbrushYSkip = this._brushBuffer.width - width,\r\n\t\t\timageYSkip = (sampleImage.width - width) * CPColorBmp.BYTES_PER_PIXEL,\r\n\r\n\t\t\tinvAlpha = 255 - alpha;\r\n\r\n\t\tif (alpha == 255) {\r\n\t\t\t// Brush doesn't sample from the image\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Blend pixels (in the area where the brush overlaps the canvas) into the brush buffer\r\n\t\tfor (let y = 0; y < height; y++, brushOffset += brushYSkip, imageOffset += imageYSkip) {\r\n\t\t\tfor (let x = 0; x < width; x++, brushOffset++, imageOffset += CPColorBmp.BYTES_PER_PIXEL) {\r\n\t\t\t\tlet\r\n\t\t\t\t\tsampleRed = sampleImage.data[imageOffset + CPColorBmp.RED_BYTE_OFFSET],\r\n\t\t\t\t\tsampleGreen = sampleImage.data[imageOffset + CPColorBmp.GREEN_BYTE_OFFSET],\r\n\t\t\t\t\tsampleBlue = sampleImage.data[imageOffset + CPColorBmp.BLUE_BYTE_OFFSET],\r\n\t\t\t\t\tsampleAlpha = sampleImage.data[imageOffset + CPColorBmp.ALPHA_BYTE_OFFSET],\r\n\r\n\t\t\t\t\toldBrushColor = brushData[brushOffset],\r\n\r\n\t\t\t\t\tnewBrushColor =\r\n\t\t\t\t\t\t((sampleAlpha * invAlpha + (oldBrushColor >> 24 & 0xff) * alpha) / 255) << 24 & 0xff000000\r\n\t\t\t\t\t\t| ((sampleRed * invAlpha + (oldBrushColor >> 16 & 0xff) * alpha) / 255) << 16 & 0xff0000\r\n\t\t\t\t\t\t| ((sampleGreen * invAlpha + (oldBrushColor >> 8 & 0xff) * alpha) / 255) << 8 & 0xff00\r\n\t\t\t\t\t\t| ((sampleBlue * invAlpha + (oldBrushColor & 0xff) * alpha) / 255) & 0xff;\r\n\r\n\t\t\t\t/* If low-alpha rounding caused us to not even update the brush color, take a 1-unit step\r\n\t\t\t\t * in the direction of the sample color.\r\n\t\t\t\t */\r\n\t\t\t\tif (newBrushColor == oldBrushColor) {\r\n\t\t\t\t\tlet\r\n\t\t\t\t\t\tnewBrushRed   = (newBrushColor & 0xff0000) >> 16,\r\n\t\t\t\t\t\tnewBrushGreen = (newBrushColor & 0x00ff00) >> 8,\r\n\t\t\t\t\t\tnewBrushBlue  =  newBrushColor & 0x0000ff;\r\n\r\n\t\t\t\t\tif (sampleRed > newBrushRed) {\r\n\t\t\t\t\t\tnewBrushColor += 1 << 16;\r\n\t\t\t\t\t} else if (sampleRed < newBrushRed) {\r\n\t\t\t\t\t\tnewBrushColor -= 1 << 16;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (sampleGreen > newBrushGreen) {\r\n\t\t\t\t\t\tnewBrushColor += 1 << 8;\r\n\t\t\t\t\t} else if (sampleGreen < newBrushGreen) {\r\n\t\t\t\t\t\tnewBrushColor -= 1 << 8;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (sampleBlue > newBrushBlue) {\r\n\t\t\t\t\t\tnewBrushColor += 1;\r\n\t\t\t\t\t} else if (sampleBlue < newBrushBlue) {\r\n\t\t\t\t\t\tnewBrushColor -= 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbrushData[brushOffset] = newBrushColor;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t * The areas of the brush buffer that lay outside the canvas haven't been filled yet. Stretch the pixels\r\n\t\t * around the edge of the area we did sample to fill in the gaps.\r\n\t\t */\r\n\t\tstretchRectToFillBuffer(this._brushBuffer, brushRect);\r\n\t}\r\n\r\n\t/**\r\n\t * Replace the layer's image with the smudge buffer within the shape of the brush tip.\r\n\t *\r\n\t * @param {CPColorBmp} destImage\r\n\t * @param {CPRect} brushRect\r\n\t * @param {CPRect} imageRect\r\n\t * @param {Uint8Array} brushShape - Of the same width as this._brushBuffer\r\n\t */\r\n\t _paintToImage(destImage, brushRect, imageRect, brushShape) {\r\n\t\tlet\r\n\t\t\twidth = brushRect.getWidth(),\r\n\t\t\theight = brushRect.getHeight(),\r\n\r\n\t\t\tsrcOffset = this._brushBuffer.offsetOfPixel(brushRect.left, brushRect.top),\r\n\t\t\tdstOffset = destImage.offsetOfPixel(imageRect.left, imageRect.top),\r\n\r\n\t\t\tsrcYSkip = this._brushBuffer.width - width,\r\n\t\t\tdstYSkip = (destImage.width - width) * CPColorBmp.BYTES_PER_PIXEL,\r\n\r\n\t\t\tdestImageData = destImage.data,\r\n\t\t\tbrushPaintData = this._brushBuffer.data;\r\n\r\n\t\tfor (let y = 0; y < height; y++, dstOffset += dstYSkip, srcOffset += srcYSkip) {\r\n\t\t\tfor (let x = 0; x < width; x++, srcOffset++, dstOffset += CPColorBmp.BYTES_PER_PIXEL) {\r\n\t\t\t\tlet\r\n\t\t\t\t\tpaintColor = brushPaintData[srcOffset],\r\n\t\t\t\t\tstrokeAlpha = ((paintColor >>> 24) * brushShape[srcOffset] / 255) | 0;\r\n\r\n\t\t\t\tif (strokeAlpha > 0) {\r\n\t\t\t\t\tdestImageData[dstOffset + CPColorBmp.RED_BYTE_OFFSET] = (paintColor >> 16) & 0xff;\r\n\t\t\t\t\tdestImageData[dstOffset + CPColorBmp.GREEN_BYTE_OFFSET] = (paintColor >> 8) & 0xff;\r\n\t\t\t\t\tdestImageData[dstOffset + CPColorBmp.BLUE_BYTE_OFFSET] = paintColor & 0xff;\r\n\t\t\t\t\tdestImageData[dstOffset + CPColorBmp.ALPHA_BYTE_OFFSET] = (paintColor >> 24) & 0xff;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t */\r\n\tpaintDab(destImage, imageRect, sampleImage, brushConfig, brushRect, dab, color) {\r\n\t\tif (destImage instanceof CPColorBmp) {\r\n\t\t\tif (this._brushBuffer == null) {\r\n\t\t\t\tthis._brushBuffer = new CPGreyBmp(dab.width, dab.height, 32);\r\n\t\t\t\tthis._sampleFromImage(sampleImage, brushRect, imageRect, 0);\r\n\t\t\t} else {\r\n\t\t\t\tthis._sampleFromImage(sampleImage, brushRect, imageRect, dab.alpha);\r\n\t\t\t\tthis._paintToImage(destImage, brushRect, imageRect, dab.brush);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (this._brushBuffer == null) {\r\n\t\t\t\tthis._brushBuffer = new CPGreyBmp(dab.width, dab.height, 16);\r\n\t\t\t\tthis._sampleFromMask(sampleImage, brushRect, imageRect, 0);\r\n\t\t\t} else {\r\n\t\t\t\tthis._sampleFromMask(sampleImage, brushRect, imageRect, dab.alpha);\r\n\t\t\t\tthis._paintToMask(destImage, brushRect, imageRect, dab.brush);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A no-op since our paint implementation paints directly to the underlying image during the stroke.\r\n\t *\r\n\t * @override\r\n\t */\r\n\tmergeOntoImage(destImage, undoImage, color) {\r\n\t}\r\n\r\n\tmergeOntoMask(destMask, undoMask, color) {\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t */\r\n\tbeginStroke() {\r\n\t\tthis._brushBuffer = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t */\r\n\tendStroke() {\r\n\t\tthis._brushBuffer = null;\r\n\t}\r\n}\r\n","/*\n    ChickenPaint\n    \n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\n    by Nicholas Sherlock / Chicken Smoothie.\n    \n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n    ChickenPaint is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ChickenPaint is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * An RGB color with floating point values for each channel (between 0.0 and 1.0)\n *\n * @param {number} r\n * @param {number} g\n * @param {number} b\n *\n * @constructor\n */\nexport default function CPColorFloat(r, g, b) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n}\n\nCPColorFloat.prototype.toInt = function() {\n    return (Math.max(0, Math.min(255, Math.round(this.r * 255))) << 16) \n        | (Math.max(0, Math.min(255, Math.round(this.g * 255))) << 8)\n        | Math.max(0, Math.min(255, Math.round(this.b * 255)));\n};\n\nCPColorFloat.prototype.mixWith = function(color, alpha) {\n    this.r = this.r * (1.0 - alpha) + color.r * alpha;\n    this.g = this.g * (1.0 - alpha) + color.g * alpha;\n    this.b = this.b * (1.0 - alpha) + color.b * alpha;\n};\n\nCPColorFloat.prototype.clone = function() {\n    return new CPColorFloat(this.r, this.g, this.b);\n};\n\nCPColorFloat.createFromInt = function(color) {\n    return new CPColorFloat(\n        ((color >>> 16) & 0xff) / 255,\n        ((color >>> 8) & 0xff) / 255,\n        (color & 0xff) / 255\n    );\n};","import {load as chiLoad} from \"./CPChibiFile.js\";\r\nimport CPArtwork from \"./CPArtwork.js\";\r\nimport CPColorBmp from \"./CPColorBmp.js\";\r\nimport CPImageLayer from \"./CPImageLayer.js\";\r\nimport AdobeColorTable from \"../util/AdobeColorTable.js\";\r\n\r\nimport EventEmitter from \"wolfy87-eventemitter\";\r\n\r\n/**\r\n * Loads ChickenPaint resources from a remote server and emits progress events.\r\n *\r\n * loadImageURL - URL of PNG/JPEG image to load for editing (optional)\r\n * loadChibiFileURL - URL of .chi file to load for editing (optional). Used in preference to loadImage.\r\n * loadSwatchesURL - URL of an .aco palette to load (optional)\r\n */\r\nexport default function CPResourceLoader(options) {\r\n    var\r\n        resources = [],\r\n        completed = {},\r\n        that = this;\r\n\r\n    if (options.loadChibiFileUrl && (\"\" + options.loadChibiFileUrl).length > 0) {\r\n        resources.push({\r\n            url: options.loadChibiFileUrl,\r\n            friendly: \"drawing layers\",\r\n            name: \"layers\",\r\n            required: true\r\n        });\r\n    } else {\r\n        if (options.loadImageUrl && (\"\" + options.loadImageUrl).length > 0) {\r\n            resources.push({\r\n                url: options.loadImageUrl,\r\n                friendly: \"drawing\",\r\n                name: \"flat\",\r\n                required: true\r\n            });\r\n        }\r\n    }\r\n    \r\n    if (options.loadSwatchesUrl) {\r\n        resources.push({\r\n            url: options.loadSwatchesUrl,\r\n            friendly: \"color swatches\",\r\n            name: \"swatches\",\r\n            required: false,\r\n            noProgress: true // So short that we may as well keep the smoothie drained\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param resource\r\n     * @param resourceData\r\n     * @returns {Promise}\r\n     */\r\n    function decodeResource(resource, resourceData) {\r\n        switch (resource.name) {\r\n            case \"flat\":\r\n                return new Promise(function(resolve, reject) {\r\n                    let\r\n                        blob = new Blob([resourceData], {type: \"image/png\"}),\r\n                        imageUrl = window.URL.createObjectURL(blob);\r\n\r\n                    if (imageUrl) {\r\n                        let\r\n                            image = new Image();\r\n\r\n                        image.onload = function () {\r\n                            let\r\n                                artwork = new CPArtwork(this.width, this.height),\r\n                                layer = new CPImageLayer(0, 0, \"Layer 1\");\r\n\r\n                            layer.image = CPColorBmp.createFromImage(image);\r\n                            artwork.addLayerObject(artwork.getLayersRoot(), layer);\r\n\r\n                            image = null;\r\n                            window.URL.revokeObjectURL(imageUrl);\r\n\r\n                            resolve(artwork);\r\n                        };\r\n\r\n                        image.src = imageUrl;\r\n                    } else {\r\n                        reject(null);\r\n                    }\r\n                });\r\n\r\n            case \"swatches\":\r\n                let\r\n                    reader = new AdobeColorTable(),\r\n                    colors = reader.read(resourceData);\r\n\r\n                if (colors) {\r\n                    return Promise.resolve(colors);\r\n                } else {\r\n                    return Promise.reject(null);\r\n                }\r\n\r\n            case \"layers\":\r\n                return chiLoad(resourceData);\r\n\r\n            default:\r\n                return Promise.reject(\"Unexpected resource type '\" + resource.name + \"'\");\r\n        }\r\n    }\r\n\r\n    function reportProgress(resource, progress) {\r\n        if (progress === null) {\r\n            that.emitEvent(\"loadingProgress\", [1.0, \"Loading your \" + resource.friendly + \"...\"]);\r\n        } else {\r\n            that.emitEvent(\"loadingProgress\", [progress, \"Loading your \" + resource.friendly + \" (\" + Math.round(progress * 100) + \"%)...\"]);\r\n        }\r\n    }\r\n    \r\n    this.load = function() {\r\n        if (resources.length == 0) {\r\n            that.emitEvent(\"loadingComplete\", [completed]);\r\n            return;\r\n        }\r\n\r\n        var\r\n            resource = resources.shift(),\r\n            xhr = new XMLHttpRequest();\r\n\r\n        xhr.addEventListener(\"progress\", function(evt) {\r\n            var\r\n                progress;\r\n            \r\n            if (evt.lengthComputable && !resource.noProgress) {\r\n                progress = evt.loaded / evt.total;\r\n            } else {\r\n                progress = null;\r\n            }\r\n            \r\n            reportProgress(resource, progress);\r\n        }, false);\r\n\r\n        function handleFatal() {\r\n            if (resource.required) {\r\n                that.emitEvent(\"loadingFailure\", [\"Failed to load your \" + resource.friendly + \", please try again later.\"]);\r\n            } else {\r\n                // Skip unimportant resources\r\n                that.load();\r\n            }\r\n        }\r\n        \r\n        xhr.addEventListener(\"load\", function(evt) {\r\n            if (this.status == 200) {\r\n                let\r\n                    response = this.response;\r\n                \r\n                that.emitEvent(\"loadingProgress\", [1.0, \"Starting ChickenPaint...\"]);\r\n    \r\n                // Yield to the DOM to give it a chance to paint the loaded message before we begin decoding\r\n                setTimeout(\r\n                    function() {\r\n                        decodeResource(resource, response).then(\r\n                            function(decoded) {\r\n                                completed[resource.name] = decoded;\r\n\r\n                                // Move on to the next file\r\n                                that.load();\r\n                            },\r\n                            function() {\r\n                                that.emitEvent(\"loadingFailure\", [\"Failed to read your \" + resource.friendly]);\r\n                            }\r\n                        );\r\n                    },\r\n                    0\r\n                );\r\n            } else {\r\n                handleFatal();\r\n            }\r\n        }, false);\r\n\r\n        xhr.addEventListener(\"error\", handleFatal);\r\n\r\n        reportProgress(resource, resource.noProgress ? null : 0.0);\r\n\r\n        xhr.open(\"GET\", resource.url, true);\r\n        \r\n        xhr.responseType = 'arraybuffer';\r\n\r\n        xhr.send();\r\n    }\r\n}\r\n\r\nCPResourceLoader.prototype = Object.create(EventEmitter.prototype);\r\nCPResourceLoader.prototype.constructor = CPResourceLoader;\r\n","/*\r\n    ChickenPaint\r\n\r\n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\r\n    by Nicholas Sherlock / Chicken Smoothie.\r\n\r\n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\r\n\r\n    ChickenPaint is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    ChickenPaint is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport CPArtwork from \"./CPArtwork.js\";\r\nimport CPImageLayer from \"./CPImageLayer.js\";\r\nimport CPColorBmp from \"./CPColorBmp.js\";\r\nimport ArrayDataStream from \"../util/ArrayDataStream.js\";\r\nimport CPLayerGroup from \"./CPLayerGroup.js\";\r\nimport CPGreyBmp from \"./CPGreyBmp.js\";\r\nimport CPBlend from \"./CPBlend.js\";\r\n\r\nimport pako from \"pako\";\r\n\r\n/**\r\n * Concat two Uint8Arrays to make a new one and return it.\r\n *\r\n * Either one may be set to null. If either one is null, the other is returned. If both are null, null is\r\n * returned.\r\n */\r\nfunction concatBuffers(one, two) {\r\n    if (one === null || one.length === 0) {\r\n        return two;\r\n    }\r\n    if (two === null || two.length === 0) {\r\n        return one;\r\n    }\r\n\r\n    let\r\n        result = new Uint8Array(one.length + two.length);\r\n\r\n    result.set(one, 0);\r\n    result.set(two, one.length);\r\n\r\n    return result;\r\n}\r\n\r\nconst\r\n    OUR_MAJOR_VERSION = 0,\r\n    OUR_MINOR_VERSION = 10,\r\n\r\n\tMAX_SUPPORTED_MAJOR_VERSION = OUR_MAJOR_VERSION,\r\n\r\n\tCHI_MAGIC = \"CHIBIOEK\",\r\n\r\n    CHUNK_TAG_HEAD = \"HEAD\",\r\n    CHUNK_TAG_LAYER = \"LAYR\",\r\n    CHUNK_TAG_GROUP = \"GRUP\",\r\n    CHUNK_TAG_END = \"ZEND\";\r\n\r\nfunction CPChibiFileHeader(stream) {\r\n    this.version = stream.readU32BE();\r\n    this.width = stream.readU32BE();\r\n    this.height = stream.readU32BE();\r\n    this.layersNb = stream.readU32BE();\r\n}\r\n\r\nCPChibiFileHeader.FIXED_HEADER_LENGTH = 4 * 4;\r\n\r\nfunction ChibiChunkHeader(stream) {\r\n    let\r\n        chunkType = new Array(4);\r\n\r\n    for (let i = 0; i < chunkType.length; i++) {\r\n        chunkType[i] = String.fromCharCode(stream.readByte());\r\n    }\r\n\r\n    this.chunkType = chunkType.join(\"\");\r\n    this.chunkSize = stream.readU32BE();\r\n\r\n    if (stream.eof) {\r\n        throw \"Truncated chunk\";\r\n    }\r\n}\r\n\r\nChibiChunkHeader.HEADER_LENGTH = 8;\r\n\r\nconst\r\n    LAYER_FLAG_VISIBLE      = 1,\r\n    LAYER_FLAG_CLIP         = 2,\r\n    LAYER_FLAG_HAS_MASK     = 4,\r\n    LAYER_FLAG_MASK_LINKED  = 8,\r\n\tLAYER_FLAG_MASK_VISIBLE = 16,\r\n\tLAYER_FLAG_EXPANDED     = 32,\r\n    LAYER_FLAG_ALPHA_LOCKED = 64,\r\n\t// Set if the LM_MULTIPLY2 blend mode should be used instead of the LM_MULTIPLY noted in the layer's blend mode\r\n    LAYER_FLAG_MULTIPLY2    = 128,\r\n\r\n    LAYER_DECODE_STATE_FIXED_HEADER    = 0,\r\n    LAYER_DECODE_STATE_VARIABLE_HEADER = 1,\r\n    LAYER_DECODE_STATE_IMAGE_DATA      = 3,\r\n    LAYER_DECODE_STATE_MASK_DATA       = 4,\r\n    LAYER_DECODE_STATE_SKIP_TRAILING   = 5,\r\n    LAYER_DECODE_STATE_COMPLETE        = 6;\r\n\r\nclass ChibiLayerDecoder {\r\n    /**\r\n     * @param {ChibiChunkHeader} chunkHeader - The header for the layer chunk to decode\r\n     * @param {number} width - The width of the document\r\n     * @param {number} height - The height of the document\r\n     */\r\n    constructor(chunkHeader, width, height) {\r\n        this.chunkHeader = chunkHeader;\r\n        this.width = width;\r\n        this.height = height;\r\n        \r\n        this.state = LAYER_DECODE_STATE_FIXED_HEADER;\r\n        this.payloadOffset = 0;\r\n        this.skipBytes = 0;\r\n        this.nameLength = 0;\r\n        this.done = false;\r\n        \r\n        this.colorDecoder = null;\r\n        this.maskDecoder = null;\r\n    }\r\n    \r\n    readFixedHeader(stream) {\r\n        this.payloadOffset = stream.readU32BE();\r\n        \r\n        this.blendMode = stream.readU32BE();\r\n        this.alpha = stream.readU32BE();\r\n        \r\n        let\r\n            layerFlags = stream.readU32BE();\r\n        \r\n        this.visible = (layerFlags & LAYER_FLAG_VISIBLE) != 0;\r\n        this.clip = (layerFlags & LAYER_FLAG_CLIP) != 0;\r\n        this.hasMask = (layerFlags & LAYER_FLAG_HAS_MASK) != 0;\r\n        this.maskLinked = (layerFlags & LAYER_FLAG_MASK_LINKED) != 0;\r\n\t    this.maskVisible = (layerFlags & LAYER_FLAG_MASK_VISIBLE) != 0;\r\n\t    this.expanded = (layerFlags & LAYER_FLAG_EXPANDED) != 0;\r\n        this.lockAlpha = (layerFlags & LAYER_FLAG_ALPHA_LOCKED) != 0;\r\n\r\n        if (this.blendMode === CPBlend.LM_MULTIPLY && (layerFlags & LAYER_FLAG_MULTIPLY2) !== 0) {\r\n            this.blendMode = CPBlend.LM_MULTIPLY2;\r\n        }\r\n        \r\n        this.nameLength = stream.readU32BE();\r\n    }\r\n    \r\n    getFixedHeaderLen() {\r\n        return 5 * 4;\r\n    }\r\n    \r\n    getVariableHeaderLen() {\r\n        return this.nameLength;\r\n    }\r\n    \r\n    readVariableSizeHeader(stream) {\r\n        this.name = stream.readString(this.nameLength);\r\n    }\r\n    \r\n    /**\r\n     * Decode some layer data from the beginning of the given block. Returns any non-layer data\r\n     * that was left over from that block, or null if the block was read completely.\r\n     *\r\n     * Keep calling with more data until the .done property is set to true.\r\n     *\r\n     * @param {Uint8Array} block\r\n     * @returns {?Uint8Array}\r\n     */\r\n    decode(block) {\r\n        let\r\n            stream;\r\n        \r\n        // Dummy loop so we can re-enter the switch statement with \"continue\"\r\n        while (true) {\r\n            if (this.skipBytes > 0) {\r\n                if (this.skipBytes >= block.length) {\r\n                    this.skipBytes -= block.length;\r\n                    return null;\r\n                } else {\r\n                    block = block.subarray(this.skipBytes);\r\n                    this.skipBytes = 0;\r\n                }\r\n            }\r\n            \r\n            switch (this.state) {\r\n                case LAYER_DECODE_STATE_FIXED_HEADER:\r\n                    // Wait for first part of header to arrive\r\n                    if (block.length < this.getFixedHeaderLen()) {\r\n                        break;\r\n                    }\r\n                    \r\n                    stream = new ArrayDataStream(block);\r\n                    this.readFixedHeader(stream);\r\n                    \r\n                    block = block.subarray(stream.pos);\r\n                    \r\n                    this.state = LAYER_DECODE_STATE_VARIABLE_HEADER;\r\n                    continue;\r\n                \r\n                case LAYER_DECODE_STATE_VARIABLE_HEADER:\r\n                    // Wait for variable part of header to arrive\r\n                    if (block.length < this.getVariableHeaderLen()) {\r\n                        break;\r\n                    }\r\n                    \r\n                    stream = new ArrayDataStream(block);\r\n                    this.readVariableSizeHeader(stream);\r\n                    \r\n                    this.layer = this.createLayer();\r\n                    \r\n                    if (this.hasMask) {\r\n                        this.layer.setMask(new CPGreyBmp(this.width, this.height, 8));\r\n                        this.maskDecoder = new CPMaskDecoder(this.layer.mask);\r\n                    }\r\n                    \r\n                    if (this.layer instanceof CPImageLayer) {\r\n                        this.colorDecoder = new CPColorPixelsDecoder(this.layer.image);\r\n                    }\r\n                    \r\n                    this.skipBytes = this.payloadOffset - this.getFixedHeaderLen();\r\n                    \r\n                    if (this.colorDecoder) {\r\n                        this.state = LAYER_DECODE_STATE_IMAGE_DATA;\r\n                    } else if (this.maskDecoder) {\r\n                        this.state = LAYER_DECODE_STATE_MASK_DATA;\r\n                    } else {\r\n                        this.state = LAYER_DECODE_STATE_SKIP_TRAILING;\r\n                    }\r\n                    \r\n                    continue;\r\n                \r\n                case LAYER_DECODE_STATE_IMAGE_DATA:\r\n                    block = this.colorDecoder.decode(block);\r\n                    \r\n                    if (this.colorDecoder.done) {\r\n                        if (this.maskDecoder) {\r\n                            this.state = LAYER_DECODE_STATE_MASK_DATA;\r\n                        } else {\r\n                            this.state = LAYER_DECODE_STATE_SKIP_TRAILING;\r\n                        }\r\n                        continue;\r\n                    }\r\n                    break;\r\n                \r\n                case LAYER_DECODE_STATE_MASK_DATA:\r\n                    block = this.maskDecoder.decode(block);\r\n                    \r\n                    if (this.maskDecoder.done) {\r\n                        this.state = LAYER_DECODE_STATE_SKIP_TRAILING;\r\n                        continue;\r\n                    }\r\n                    break;\r\n                \r\n                case LAYER_DECODE_STATE_SKIP_TRAILING:\r\n                    let\r\n                        bytesRead = this.payloadOffset;\r\n                    \r\n                    if (this.colorDecoder) {\r\n                        bytesRead += this.colorDecoder.bytesTotal;\r\n                    }\r\n                    \r\n                    if (this.maskDecoder) {\r\n                        bytesRead += this.maskDecoder.bytesTotal;\r\n                    }\r\n                    \r\n                    this.state = LAYER_DECODE_STATE_COMPLETE;\r\n                    this.skipBytes = this.chunkHeader.chunkSize - bytesRead;\r\n                    continue;\r\n                \r\n                case LAYER_DECODE_STATE_COMPLETE:\r\n                    this.done = true;\r\n            }\r\n            break;\r\n        }\r\n        \r\n        return block;\r\n    }\r\n}\r\n\r\nclass ChibiImageLayerDecoder extends ChibiLayerDecoder {\r\n    /**\r\n     * Create a layer using the properties previously read into this decoder.\r\n     *\r\n     * @returns {CPImageLayer}\r\n     */\r\n    createLayer() {\r\n        let\r\n            layer = new CPImageLayer(this.width, this.height, this.name);\r\n        \r\n        layer.setBlendMode(this.blendMode);\r\n        layer.setAlpha(this.alpha);\r\n        \r\n        layer.setVisible(this.visible);\r\n        layer.setClip(this.clip);\r\n        \r\n        layer.setMaskLinked(this.maskLinked);\r\n        layer.setMaskVisible(this.maskVisible);\r\n        layer.setLockAlpha(this.lockAlpha);\r\n        \r\n        return layer;\r\n    }\r\n}\r\n\r\nclass ChibiLayerGroupDecoder extends ChibiLayerDecoder {\r\n    constructor(chunkHeader, width, height) {\r\n        super(chunkHeader, width, height);\r\n        \r\n        this.childLayers = 0;\r\n    }\r\n    \r\n    readFixedHeader(stream) {\r\n        super.readFixedHeader.call(this, stream);\r\n        \r\n        this.childLayers = stream.readU32BE();\r\n    }\r\n    \r\n    getFixedHeaderLen() {\r\n        return super.getFixedHeaderLen.call(this) + 4;\r\n    }\r\n    \r\n    /**\r\n     * Create a group using the properties previously read into this decoder.\r\n     *\r\n     * @returns {CPLayerGroup}\r\n     */\r\n    createLayer() {\r\n        let\r\n            group = new CPLayerGroup(this.name, this.blendMode);\r\n        \r\n        group.setAlpha(this.alpha);\r\n        \r\n        group.setVisible(this.visible);\r\n        group.setExpanded(this.expanded);\r\n        \r\n        group.setMaskLinked(this.maskLinked);\r\n        group.setMaskVisible(this.maskVisible);\r\n        \r\n        return group;\r\n    }\r\n}\r\n\r\n/**\r\n * Write the RGBA pixels of the given bitmap to the stream in ARGB order to match the Chibi specs.\r\n *\r\n * @param {ArrayDataStream} stream\r\n * @param {CPColorBmp} bitmap\r\n */\r\nfunction writeColorBitmapToStream(stream, bitmap) {\r\n    let\r\n        pos = stream.pos,\r\n        buffer = stream.data,\r\n        bitmapData = bitmap.data;\r\n    \r\n    for (let i = 0; i < bitmapData.length; i += CPColorBmp.BYTES_PER_PIXEL) {\r\n        buffer[pos++] = bitmapData[i + CPColorBmp.ALPHA_BYTE_OFFSET];\r\n        buffer[pos++] = bitmapData[i + CPColorBmp.RED_BYTE_OFFSET];\r\n        buffer[pos++] = bitmapData[i + CPColorBmp.GREEN_BYTE_OFFSET];\r\n        buffer[pos++] = bitmapData[i + CPColorBmp.BLUE_BYTE_OFFSET];\r\n    }\r\n    \r\n    stream.pos = pos;\r\n}\r\n\r\n/**\r\n * Write the 8-bit greyscale pixels of the given bitmap to the stream.\r\n *\r\n * @param {ArrayDataStream} stream\r\n * @param {CPGreyBmp} bitmap\r\n */\r\nfunction writeMaskToStream(stream, bitmap) {\r\n    stream.data.set(bitmap.data, stream.pos);\r\n    stream.pos += bitmap.data.length;\r\n}\r\n\r\nclass CPColorPixelsDecoder {\r\n    /**\r\n     * @param {CPColorBmp} destImage - Image to decode into.\r\n     */\r\n    constructor(destImage) {\r\n        this.bytesRead = 0;\r\n        this.bytesTotal = destImage.width * destImage.height * CPColorBmp.BYTES_PER_PIXEL;\r\n        this.output = destImage.data;\r\n        this.done = false;\r\n    }\r\n    \r\n    /**\r\n     * Decode A,R,G,B pixels from the given buffer into the R,G,B,A destination image.\r\n     *\r\n     * Returns the buffer with the read bytes removed from the front, or null if the buffer was read in its entirety.\r\n     *\r\n     * @param {Uint8Array} buffer\r\n     */\r\n    decode(buffer) {\r\n        if (buffer == null) {\r\n            return null;\r\n        }\r\n        \r\n        let\r\n            subpixel = this.bytesRead % CPColorBmp.BYTES_PER_PIXEL,\r\n            dstPixelStartOffset = this.bytesRead - subpixel,\r\n            bufferPos = 0,\r\n            \r\n            // Map from source channel order to CPLayer's dest order\r\n            channelMap = [\r\n                CPColorBmp.ALPHA_BYTE_OFFSET,\r\n                CPColorBmp.RED_BYTE_OFFSET,\r\n                CPColorBmp.GREEN_BYTE_OFFSET,\r\n                CPColorBmp.BLUE_BYTE_OFFSET\r\n            ];\r\n        \r\n        // The first pixel might be a partial one, since we might be continuing a pixel split over buffers\r\n        for (; subpixel < CPColorBmp.BYTES_PER_PIXEL && bufferPos < buffer.length; subpixel++) {\r\n            this.output[dstPixelStartOffset + channelMap[subpixel]] = buffer[bufferPos];\r\n            bufferPos++;\r\n        }\r\n        \r\n        this.bytesRead += bufferPos;\r\n        \r\n        // How many more pixels are we to read in this buffer?\r\n        let\r\n            bytesRemain = Math.min(buffer.length - bufferPos, this.bytesTotal - this.bytesRead) | 0,\r\n            fullPixelsRemain = (bytesRemain / CPColorBmp.BYTES_PER_PIXEL) | 0,\r\n            subpixelsRemain = bytesRemain % CPColorBmp.BYTES_PER_PIXEL;\r\n        \r\n        for (let i = 0; i < fullPixelsRemain; i++) {\r\n            this.output[this.bytesRead + CPColorBmp.ALPHA_BYTE_OFFSET] = buffer[bufferPos];\r\n            this.output[this.bytesRead + CPColorBmp.RED_BYTE_OFFSET] = buffer[bufferPos + 1];\r\n            this.output[this.bytesRead + CPColorBmp.GREEN_BYTE_OFFSET] = buffer[bufferPos + 2];\r\n            this.output[this.bytesRead + CPColorBmp.BLUE_BYTE_OFFSET] = buffer[bufferPos + 3];\r\n            this.bytesRead += CPColorBmp.BYTES_PER_PIXEL;\r\n            bufferPos += CPColorBmp.BYTES_PER_PIXEL;\r\n        }\r\n        \r\n        // Read a fractional pixel at the end of the buffer\r\n        dstPixelStartOffset = this.bytesRead;\r\n        for (subpixel = 0; subpixel < subpixelsRemain; subpixel++) {\r\n            this.output[dstPixelStartOffset + channelMap[subpixel]] = buffer[bufferPos];\r\n            bufferPos++;\r\n        }\r\n        \r\n        this.bytesRead += subpixelsRemain;\r\n        \r\n        if (this.bytesRead >= this.bytesTotal) {\r\n            this.done = true;\r\n        }\r\n        \r\n        if (bufferPos < buffer.length) {\r\n            // Layer was completed before the end of the buffer, there is buffer left over for someone else to use\r\n            return buffer.subarray(bufferPos);\r\n        } else {\r\n            // Buffer exhausted\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nclass CPMaskDecoder {\r\n    /**\r\n     *\r\n     * @param {CPGreyBmp} mask - The destination to decode pixels into, must already be the correct size.\r\n     */\r\n    constructor(mask) {\r\n        this.bytesRead = 0;\r\n        this.bytesTotal = mask.width * mask.height;\r\n        this.output = mask.data;\r\n        this.done = false;\r\n    }\r\n    \r\n    /**\r\n     * Read 8-bit greyscale pixels from the given buffer into destination pixel array.\r\n     *\r\n     * Returns the buffer with the read bytes removed from the front, or null if the buffer was read in its entirety.\r\n     *\r\n     * @param {Uint8Array} buffer\r\n     */\r\n    decode(buffer) {\r\n        if (buffer == null) {\r\n            return null;\r\n        }\r\n        \r\n        let\r\n            // How many more pixels are we to read from this buffer?\r\n            bytesRemain = Math.min(buffer.length, this.bytesTotal - this.bytesRead) | 0,\r\n            dstIndex = this.bytesRead,\r\n            srcIndex;\r\n        \r\n        for (srcIndex = 0; srcIndex < bytesRemain; srcIndex++, dstIndex++) {\r\n            this.output[dstIndex] = buffer[srcIndex];\r\n        }\r\n        \r\n        this.bytesRead = dstIndex;\r\n        \r\n        if (this.bytesRead >= this.bytesTotal) {\r\n            this.done = true;\r\n        }\r\n        \r\n        if (srcIndex < buffer.length) {\r\n            // Layer was completed before the end of the buffer, there is buffer left over for someone else to use\r\n            return buffer.subarray(srcIndex);\r\n        } else {\r\n            // Buffer exhausted\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Make a 32-bit Chibi file-version value for storing in the file header.\r\n *\r\n * @param {number} major\r\n * @param {number} minor\r\n * @returns {number}\r\n */\r\nfunction makeChibiVersion(major, minor) {\r\n    return (major << 16) | minor;\r\n}\r\n\r\nfunction decomposeChibiVersion(version) {\r\n    return {major: (version >> 16) & 0xFFFF, minor: version & 0xFFFF};\r\n}\r\n\r\nfunction chibiVersionToString(version) {\r\n    let\r\n        decomposed = decomposeChibiVersion(version);\r\n\r\n    if (decomposed.major === 0 && decomposed.minor === 0) {\r\n        return \"ChibiPaint v0.0\";\r\n    } else {\r\n        return \"ChickenPaint v\" + decomposed.major + \".\" + decomposed.minor;\r\n    }\r\n}\r\n\r\n/**\r\n * Decides which Chibi file version will be required to support the features used by the given artwork, and returns\r\n * the corresponding version number header.\r\n *\r\n * @param {CPArtwork} artwork\r\n * @returns {number}\r\n */\r\nfunction minimumVersionForArtwork(artwork) {\r\n    for (let layer of artwork.getLayersRoot().getLinearizedLayerList(false)) {\r\n        if (layer instanceof CPLayerGroup || layer.mask || layer.clip || layer.blendMode > CPBlend.LM_LAST_CHIBIPAINT || layer.blendMode === CPBlend.LM_MULTIPLY) {\r\n            /*\r\n             * We'll claim to be compatible with ChibiPaint (by not incrementing the major version number), since\r\n             * ChibiPaint will at least be able to open the file, even though it'll lose information in doing so.\r\n             */\r\n            return makeChibiVersion(OUR_MAJOR_VERSION, OUR_MINOR_VERSION);\r\n        }\r\n    }\r\n    \r\n    return makeChibiVersion(0, 0); // The version used by the original ChibiPaint\r\n}\r\n\r\nfunction writeChunkHeader(stream, tag, chunkSize) {\r\n    stream.writeString(tag);\r\n    stream.writeU32BE(chunkSize);\r\n}\r\n\r\n/**\r\n * Allocate a fixed-size buffer to represent the chunk with the given tag and size, and return a stream which\r\n * points to the body of the chunk (with the chunk header already written).\r\n *\r\n * @param {string} chunkTag\r\n * @param {number} chunkBodySize\r\n * @returns {ArrayDataStream}\r\n */\r\nfunction allocateChunkStream(chunkTag, chunkBodySize) {\r\n    let\r\n        buffer = new Uint8Array(ChibiChunkHeader.HEADER_LENGTH + chunkBodySize),\r\n        stream = new ArrayDataStream(buffer);\r\n\r\n    writeChunkHeader(stream, chunkTag, chunkBodySize);\r\n\r\n    return stream;\r\n}\r\n\r\n/**\r\n * @param {CPArtwork} artwork\r\n * @param {number} version\r\n * @param {number} numLayers\r\n *\r\n * @returns Uint8Array\r\n */\r\nfunction serializeFileHeaderChunk(artwork, version, numLayers) {\r\n    let\r\n        stream = allocateChunkStream(CHUNK_TAG_HEAD, CPChibiFileHeader.FIXED_HEADER_LENGTH);\r\n    \r\n    stream.writeU32BE(version);\r\n    stream.writeU32BE(artwork.width);\r\n    stream.writeU32BE(artwork.height);\r\n    stream.writeU32BE(numLayers);\r\n\r\n    return stream.getAsDataArray();\r\n}\r\n\r\n/**\r\n * @returns {Uint8Array}\r\n */\r\nfunction serializeEndChunk() {\r\n    return allocateChunkStream(CHUNK_TAG_END, 0).getAsDataArray();\r\n}\r\n\r\n/**\r\n * Serialize an layer's header and image data into a byte array buffer, and return it.\r\n *\r\n * @param {CPImageLayer|CPLayerGroup} layer\r\n */\r\nfunction serializeLayerChunk(layer) {\r\n\tconst\r\n        isImageLayer = layer instanceof CPImageLayer,\r\n\r\n\t\tFIXED_HEADER_LENGTH = 4 * (isImageLayer ? 5 : 6),\r\n        VARIABLE_HEADER_LENGTH = layer.name.length,\r\n        COMBINED_HEADER_LENGTH = FIXED_HEADER_LENGTH + VARIABLE_HEADER_LENGTH,\r\n\r\n        PAYLOAD_LENGTH = (isImageLayer ? layer.image.data.length : 0) + (layer.mask ? layer.mask.data.length : 0),\r\n\r\n\t\tstream = allocateChunkStream(\r\n\t\t    isImageLayer ? CHUNK_TAG_LAYER : CHUNK_TAG_GROUP,\r\n            FIXED_HEADER_LENGTH + VARIABLE_HEADER_LENGTH + PAYLOAD_LENGTH\r\n        );\r\n\r\n\tlet\r\n        layerFlags = 0,\r\n        blendMode;\r\n\r\n\tif (layer.visible) {\r\n\t\tlayerFlags |= LAYER_FLAG_VISIBLE;\r\n\t}\r\n\tif (isImageLayer && layer.clip) {\r\n\t\tlayerFlags |= LAYER_FLAG_CLIP;\r\n\t}\r\n\tif (layer.mask) {\r\n\t\tlayerFlags |= LAYER_FLAG_HAS_MASK;\r\n\t}\r\n\tif (layer.maskLinked) {\r\n\t\tlayerFlags |= LAYER_FLAG_MASK_LINKED;\r\n\t}\r\n\tif (layer.maskVisible) {\r\n\t\tlayerFlags |= LAYER_FLAG_MASK_VISIBLE;\r\n\t}\r\n\tif (layer.lockAlpha) {\r\n\t\tlayerFlags |= LAYER_FLAG_ALPHA_LOCKED;\r\n\t}\r\n\tif (!isImageLayer && layer.expanded) {\r\n\t\tlayerFlags |= LAYER_FLAG_EXPANDED;\r\n\t}\r\n\r\n\tif (layer.blendMode === CPBlend.LM_MULTIPLY2) {\r\n\t    /* So that ChibiPaint can still open files that use our new blending routine, re-label it as the original\r\n\t     * multiply mode, but add a flag so that we know it's supposed to use the new version.\r\n\t     */\r\n\t    blendMode = CPBlend.LM_MULTIPLY;\r\n\t    layerFlags |= LAYER_FLAG_MULTIPLY2;\r\n    } else {\r\n\t    blendMode = layer.blendMode;\r\n    }\r\n\r\n\t// Fixed length header portion\r\n\tstream.writeU32BE(COMBINED_HEADER_LENGTH); // Offset to layer data from start of header\r\n\r\n\tstream.writeU32BE(blendMode);\r\n\tstream.writeU32BE(layer.alpha);\r\n\r\n\tstream.writeU32BE(layerFlags);\r\n\tstream.writeU32BE(layer.name.length);\r\n\r\n\tif (!isImageLayer) {\r\n\t\tstream.writeU32BE(layer.layers.length);\r\n\t}\r\n\r\n\t// Variable length header portion\r\n\tstream.writeString(layer.name);\r\n\r\n\t// Payload:\r\n    if (isImageLayer) {\r\n\t\twriteColorBitmapToStream(stream, layer.image);\r\n    }\r\n\r\n\tif (layer.mask) {\r\n\t\twriteMaskToStream(stream, layer.mask);\r\n\t}\r\n\r\n\treturn stream.getAsDataArray();\r\n}\r\n\r\n/**\r\n *\r\n * @param {Uint8Array} array\r\n * @returns {boolean}\r\n */\r\nfunction hasChibiMagicMarker(array) {\r\n\tfor (let i = 0; i < CHI_MAGIC.length; i++) {\r\n\t\tif (array[i] != CHI_MAGIC.charCodeAt(i)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn true;\r\n}\r\n\r\n/**\r\n * @typedef {Object} SerializeResult\r\n * @property {(Blob|Uint8Array)} SerializeResult.bytes - A Blob when called in the browser, or a Uint8Array in Node.\r\n * @property {String} SerializeResult.version - Version string of created artwork, \"ChibiPaint v0.0\" or \"ChickenPaint v0.10\"\r\n */\r\n\r\n/**\r\n * Serialize the given artwork to Chibifile format.\r\n *\r\n * @param {CPArtwork} artwork\r\n * @param {?Object} options\r\n * @param {boolean} options.forceOldVersion - Mark this as a version 0.0 (ChibiPaint) drawing even if it uses new features\r\n *\r\n * @returns {Promise.<SerializeResult>}\r\n */\r\nexport function save(artwork, options) {\r\n    options = options || {};\r\n\r\n    return Promise.resolve().then(() => {\r\n        const\r\n            deflator = new pako.Deflate({\r\n                level: 7\r\n            }),\r\n            /**\r\n             * The fragments that make up the completed .chi file:\r\n             * @type {Uint8Array[]}\r\n             */\r\n            blobParts = [],\r\n            magic = new Uint8Array(CHI_MAGIC.length),\r\n            layers = artwork.getLayersRoot().getLinearizedLayerList(false),\r\n\t\t\tversion = options.forceOldVersion ? makeChibiVersion(0, 0) : minimumVersionForArtwork(artwork),\r\n            versionString = chibiVersionToString(version);\r\n\r\n        let\r\n            layerWritePromise = Promise.resolve();\r\n\r\n\t\tdeflator.onData = function(chunk) {\r\n\t\t\tblobParts.push(chunk);\r\n\t\t};\r\n\r\n        // The magic file signature is not ZLIB compressed:\r\n        for (let i = 0; i < CHI_MAGIC.length; i++) {\r\n            magic[i] = CHI_MAGIC.charCodeAt(i);\r\n        }\r\n        blobParts.push(magic);\r\n\r\n        // The rest gets compressed\r\n        deflator.push(serializeFileHeaderChunk(artwork, version, layers.length), false);\r\n\r\n        for (let layer of layers) {\r\n            layerWritePromise = layerWritePromise.then(() => new Promise(function(resolve) {\r\n                deflator.push(serializeLayerChunk(layer), false);\r\n\r\n                // Insert a setTimeout between each serialized layer, so we can maintain browser responsiveness\r\n                setTimeout(resolve, 10);\r\n            }));\r\n        }\r\n\r\n        return layerWritePromise.then(() => new Promise((resolve, reject) => {\r\n            deflator.onEnd = function(status) {\r\n                if (status === 0) {\r\n\t\t\t\t\tif (typeof Blob !== \"undefined\") {\r\n\t\t\t\t\t\t// In the browser\r\n\t\t\t\t\t\tresolve({bytes: new Blob(blobParts, {type: \"application/octet-stream\"}), version: versionString});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// In Node.js\r\n\t\t\t\t\t\tlet\r\n\t\t\t\t\t\t\ttotalSize = blobParts.map(part => part.byteLength).reduce((total, size) => {\r\n\t\t\t\t\t\t\t\treturn total + size;\r\n\t\t\t\t\t\t\t}, 0),\r\n\r\n\t\t\t\t\t\t\tbuffer = new Uint8Array(totalSize),\r\n\t\t\t\t\t\t\toffset = 0;\r\n\r\n\t\t\t\t\t\tfor (let part of blobParts) {\r\n\t\t\t\t\t\t\tbuffer.set(part, offset);\r\n\t\t\t\t\t\t\toffset += part.byteLength;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tresolve({bytes: buffer, version: versionString});\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n                    reject(status);\r\n                }\r\n            };\r\n\r\n            deflator.push(serializeEndChunk(), true);\r\n        }));\r\n    });\r\n}\r\n\r\n/**\r\n * Attempt to load a chibifile from the given source.\r\n *\r\n * @param {ArrayBuffer|Blob} source\r\n * @param {?Object}        options\r\n * @param {boolean|string} options.upgradeMultiplyLayers - false to leave all multiply layers alone, \"bake\" to modify\r\n *                                                         pixel values to use LM_MULTIPLY2 blending. Anything else to\r\n *                                                         set blendMode to LM_MULTIPLY or LM_MULTIPLY2 as needed.\r\n *\r\n * @returns {Promise.<CPArtwork>}\r\n */\r\nexport function load(source, options) {\r\n    options = options || {};\r\n\r\n\tconst\r\n\t\tSTATE_WAIT_FOR_CHUNK = 0,\r\n\t\t\r\n\t\tSTATE_DECODE_FILE_HEADER = 1,\r\n\t\t\r\n\t\tSTATE_DECODE_LAYER = 2,\r\n\t\tSTATE_DECODE_GROUP = 3,\r\n\t\t\r\n\t\tSTATE_SUCCESS = 45,\r\n\t\tSTATE_FATAL = 5;\r\n\t\r\n\tlet\r\n\t\tinflator = new pako.Inflate({}),\r\n\t\tstate = STATE_WAIT_FOR_CHUNK,\r\n\t\t\r\n\t\t/**\r\n\t\t * Destination artwork\r\n\t\t *\r\n\t\t * @type {CPArtwork}\r\n\t\t */\r\n\t\tartwork = null,\r\n\t\t\r\n\t\t/**\r\n\t\t * Group we're currently loading layers into\r\n\t\t *\r\n\t\t * @type {CPLayerGroup}\r\n\t\t */\r\n\t\tdestGroup = null,\r\n\t\t\r\n\t\t/**\r\n\t\t * Decoder we're currently using to read a layer.\r\n\t\t *\r\n\t\t * @type {ChibiLayerDecoder}\r\n\t\t */\r\n\t\tlayerDecoder,\r\n\t\t\r\n\t\t/**\r\n\t\t * Number of bytes we should skip in the stream before resuming decoding.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tskipCount = 0,\r\n\t\t\r\n\t\t/**\r\n\t\t * The overall file descriptor\r\n\t\t *\r\n\t\t * @type {CPChibiFileHeader}\r\n\t\t */\r\n\t\tfileHeader = null,\r\n\t\t\r\n\t\t/**\r\n\t\t *\r\n\t\t * @type {ChibiChunkHeader}\r\n\t\t */\r\n\t\tcurChunkHeader = null,\r\n\t\t\r\n\t\t/**\r\n\t\t * Here we store data that we weren't able to process in previous iterations due to not enough\r\n\t\t * data being available at once.\r\n\t\t *\r\n\t\t * @type {Uint8Array}\r\n\t\t */\r\n\t\taccumulator = null;\r\n\t\r\n\t/**\r\n\t * Called by the Pako Zlib decompressor each time a block of data is ready for processing.\r\n\t *\r\n\t * @param {Uint8Array} block\r\n\t */\r\n\tfunction processBlock(block) {\r\n\t\tlet\r\n\t\t\tstream;\r\n\t\t\r\n\t\taccumulator = concatBuffers(accumulator, block);\r\n\t\tblock = null;\r\n\t\t\r\n\t\t// Add a loop here so we can re-enter the switch with 'continue'\r\n\t\twhile (true) {\r\n\t\t\tif (accumulator) {\r\n\t\t\t\tif (skipCount < accumulator.length) {\r\n\t\t\t\t\taccumulator = accumulator.subarray(skipCount);\r\n\t\t\t\t\tskipCount = 0;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tskipCount -= accumulator.length;\r\n\t\t\t\t\taccumulator = null;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Decode some data from the accumulator\r\n\t\t\tswitch (state) {\r\n\t\t\t\tcase STATE_WAIT_FOR_CHUNK:\r\n\t\t\t\t\t// Wait for whole chunk header to become available\r\n\t\t\t\t\tif (accumulator.length < ChibiChunkHeader.HEADER_LENGTH) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t// Decode chunk header\r\n\t\t\t\t\tstream = new ArrayDataStream(accumulator);\r\n\t\t\t\t\tcurChunkHeader = new ChibiChunkHeader(stream);\r\n\t\t\t\t\t\r\n\t\t\t\t\t// Remove the chunk header from the start of the accumulator\r\n\t\t\t\t\taccumulator = accumulator.subarray(stream.pos);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (fileHeader) {\r\n\t\t\t\t\t\tif (curChunkHeader.chunkType == CHUNK_TAG_END) {\r\n\t\t\t\t\t\t\tstate = STATE_SUCCESS;\r\n\t\t\t\t\t\t} else if (curChunkHeader.chunkType == CHUNK_TAG_LAYER) {\r\n\t\t\t\t\t\t\tstate = STATE_DECODE_LAYER;\r\n\t\t\t\t\t\t\tlayerDecoder = new ChibiImageLayerDecoder(curChunkHeader, fileHeader.width, fileHeader.height);\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t} else if (curChunkHeader.chunkType == CHUNK_TAG_GROUP) {\r\n\t\t\t\t\t\t\tstate = STATE_DECODE_GROUP;\r\n\t\t\t\t\t\t\tlayerDecoder = new ChibiLayerGroupDecoder(curChunkHeader, fileHeader.width, fileHeader.height);\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tconsole.log(\"Unknown chunk type '\" + curChunkHeader.chunkType + \"', attempting to skip...\");\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tskipCount = curChunkHeader.chunkSize;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (curChunkHeader.chunkType == CHUNK_TAG_HEAD) {\r\n\t\t\t\t\t\tstate = STATE_DECODE_FILE_HEADER;\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// File didn't start with image header chunk\r\n\t\t\t\t\t\tstate = STATE_FATAL;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\t\tcase STATE_DECODE_FILE_HEADER:\r\n\t\t\t\t\t// Wait for whole chunk to be available\r\n\t\t\t\t\tif (accumulator.length < curChunkHeader.chunkSize) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tstream = new ArrayDataStream(accumulator);\r\n\t\t\t\t\tfileHeader = new CPChibiFileHeader(stream);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (decomposeChibiVersion(fileHeader.version).major > MAX_SUPPORTED_MAJOR_VERSION) {\r\n\t\t\t\t\t\tstate = STATE_FATAL; // the file version is higher than what we can deal with, bail out\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tartwork = new CPArtwork(fileHeader.width, fileHeader.height);\r\n\t\t\t\t\tdestGroup = artwork.getLayersRoot();\r\n\t\t\t\t\t\r\n\t\t\t\t\t// Skip the header chunk along with any trailing bytes\r\n\t\t\t\t\tskipCount = curChunkHeader.chunkSize;\r\n\t\t\t\t\tstate = STATE_WAIT_FOR_CHUNK;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t\r\n\t\t\t\tcase STATE_DECODE_LAYER:\r\n\t\t\t\t\taccumulator = layerDecoder.decode(accumulator);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (layerDecoder.done) {\r\n\t\t\t\t\t\tartwork.addLayerObject(destGroup, layerDecoder.layer);\r\n\t\t\t\t\t\tstate = STATE_WAIT_FOR_CHUNK;\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\t\tcase STATE_DECODE_GROUP:\r\n\t\t\t\t\taccumulator = layerDecoder.decode(accumulator);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (layerDecoder.done) {\r\n\t\t\t\t\t\tartwork.addLayerGroupObject(destGroup, layerDecoder.layer, layerDecoder.childLayers);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tstate = STATE_WAIT_FOR_CHUNK;\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn new Promise(function(resolve) {\r\n\t\tif (source instanceof ArrayBuffer) {\r\n\t\t\tresolve(source);\r\n\t\t} else {\r\n\t\t    // Assume source is a Blob\r\n\t\t\tlet\r\n\t\t\t\treader = new FileReader();\r\n\t\t\t\r\n\t\t\treader.onload = function() {\r\n\t\t\t    resolve(this.result);\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\treader.readAsArrayBuffer(source);\r\n        }\r\n    }).then(arrayBuffer => new Promise(function(resolve, reject) {\r\n        let\r\n            byteArray = new Uint8Array(arrayBuffer);\r\n        \r\n\t\tif (!hasChibiMagicMarker(byteArray)) {\r\n\t\t\treject(\"This doesn't appear to be a ChibiPaint layers file, is it damaged?\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\t// Remove the magic header\r\n\t\tbyteArray = byteArray.subarray(CHI_MAGIC.length);\r\n\t\t\r\n\t\tinflator.onData = processBlock;\r\n\t\t\r\n\t\tinflator.onEnd = function (status) {\r\n\t\t\tif (status === 0 && state == STATE_SUCCESS) {\r\n\t\t\t    if (options.upgradeMultiplyLayers !== false && fileHeader.version < makeChibiVersion(OUR_MAJOR_VERSION, OUR_MINOR_VERSION)) {\r\n\t\t\t\t\tartwork.upgradeMultiplyLayers(options.upgradeMultiplyLayers);\r\n                }\r\n\r\n\t\t\t\tartwork.selectTopmostVisibleLayer();\r\n\t\t\t\t\r\n\t\t\t\tresolve(artwork);\r\n\t\t\t} else {\r\n\t\t\t\treject(\"Fatal error decoding ChibiFile: \" + status);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Begin decompression/decoding\r\n\t\tinflator.push(byteArray, true);\r\n\t}));\r\n}\r\n","/**\n * A tool for presenting a Uint8Array as a stream for reading and writing some simple data types.\n * \n * By Nicholas Sherlock <n.sherlock@gmail.com> 2016, released under the WTFPL license.\n */\n\nvar EOF = -1;\n\nfunction signExtend16Bit(word) {\n    //If sign bit is set, fill the top bits with 1s to sign-extend\n    return (word & 0x8000) ? (word | 0xFFFF0000) : word;\n}\n\nfunction signExtend8Bit(byte) {\n    //If sign bit is set, fill the top bits with 1s to sign-extend\n    return (byte & 0x80) ? (byte | 0xFFFFFF00) : byte;\n}\n\n/**\n * Create a stream on existing array of unsigned byte data (i.e. hopefully Uint8Array).\n * \n * @param {Uint8Array} data - Array to stream data from\n * @param {int=} start - The index of the byte in the array that will be read first, or leave undefined to begin at the\n *              beginning of the array\n * @param {int=} end - The index of the end of the stream, or leave undefined to use the end of the array as the end of\n *            the stream.\n */\nexport default function ArrayDataStream(data, start, end) {\n    this.data = data;\n    this.eof = false;\n    this.start = start === undefined ? 0 : start;\n    this.end = end === undefined ? data.length : end;\n    this.pos = this.start;\n};\n\n/**\n * Read a single byte from the stream and turn it into a JavaScript string (assuming ASCII).\n * \n * @returns {String|number} String containing one character, or EOF if the end of file was reached (eof flag\n * is set).\n */\nArrayDataStream.prototype.readChar = function() {\n    if (this.pos < this.end) {\n        return String.fromCharCode(this.data[this.pos++]);\n    }\n\n    this.eof = true;\n    return EOF;\n};\n\n/**\n * Read one unsigned byte from the stream\n * \n * @returns {number} Unsigned byte, or EOF if the end of file was reached (eof flag is set).\n */\nArrayDataStream.prototype.readByte = function() {\n    if (this.pos < this.end) {\n        return this.data[this.pos++];\n    }\n\n    this.eof = true;\n    return EOF;\n};\n\n//Synonym:\nArrayDataStream.prototype.readU8 = ArrayDataStream.prototype.readByte;\n\nArrayDataStream.prototype.readS8 = function() {\n    return signExtend8Bit(this.readByte());\n};\n\nArrayDataStream.prototype.unreadChar = function(c) {\n    this.pos--;\n};\n    \nArrayDataStream.prototype.peekChar = function() {\n    if (this.pos < this.end) {\n        return String.fromCharCode(this.data[this.pos]);\n    }\n\n    this.eof = true;\n    return EOF;\n};\n\nArrayDataStream.prototype.readString = function(length) {\n    var \n        chars = new Array(length),\n        i;\n    \n    for (i = 0; i < length; i++) {\n        chars[i] = this.readChar();\n    }\n    \n    return chars.join(\"\");\n};\n\nArrayDataStream.prototype.readS16 = function() {\n    var \n        b1 = this.readByte(),\n        b2 = this.readByte();\n    \n    return signExtend16Bit((b1 << 8) | b2); \n};\n\nArrayDataStream.prototype.readU16BE = function() {\n    var \n        b1 = this.readByte(),\n        b2 = this.readByte();\n    \n    return (b1 << 8) | b2; \n};\n\nArrayDataStream.prototype.readU16LE = function() {\n    var \n        b1 = this.readByte(),\n        b2 = this.readByte();\n    \n    return (b2 << 8) | b1; \n};\n\nArrayDataStream.prototype.readU32BE = function() {\n    var \n        b1 = this.readByte(),\n        b2 = this.readByte(),\n        b3 = this.readByte(),\n        b4 = this.readByte();\n    return ((b1 << 24) | (b2 << 16) | (b3 << 8) | b4) >>> 0; \n};\n\nArrayDataStream.prototype.readU32LE = function() {\n    var \n        b1 = this.readByte(),\n        b2 = this.readByte(),\n        b3 = this.readByte(),\n        b4 = this.readByte();\n    return ((b4 << 24) | (b3 << 16) | (b2 << 8) | b1) >>> 0; \n};\n\nArrayDataStream.prototype.readBytes = function(count) {\n    var\n        result = this.data.subarray(this.pos, this.pos + count);\n    \n    this.pos += count;\n    \n    if (this.pos > this.end) {\n        this.eof = true;\n    }\n    \n    return result;\n};\n\nArrayDataStream.prototype.skip = function(numBytes) {\n    this.pos += numBytes;\n    \n    if (this.pos > this.end) {\n        this.eof = true;\n    }\n};\n\nArrayDataStream.prototype.seek = function(offset) {\n    this.pos = offset;\n};\n\nArrayDataStream.prototype.writeBytes = function(arr) {\n    for (var i = 0; i < arr.length; i++) {\n        this.data[this.pos++] = arr[i];\n    }\n};\n\nArrayDataStream.prototype.writeByte = function(b) {\n    this.data[this.pos++] = b;\n};\n\n//Synonym:\nArrayDataStream.prototype.writeU8 = ArrayDataStream.prototype.writeByte;\n\nArrayDataStream.prototype.writeU16LE = function(u) {\n    this.data[this.pos++] = u;\n    this.data[this.pos++] = u >> 8;\n};\n\nArrayDataStream.prototype.writeU16BE = function(u) {\n    this.data[this.pos++] = u >> 8;\n    this.data[this.pos++] = u;\n};\n\nArrayDataStream.prototype.writeU32BE = function(u) {\n    this.data[this.pos++] = u >> 24;\n    this.data[this.pos++] = u >> 16;\n    this.data[this.pos++] = u >> 8;\n    this.data[this.pos++] = u;\n};\n\nArrayDataStream.prototype.writeU32LE = function(u) {\n    this.data[this.pos++] = u;\n    this.data[this.pos++] = u >> 8;\n    this.data[this.pos++] = u >> 16;\n    this.data[this.pos++] = u >> 24;\n};\n\nArrayDataStream.prototype.writeDoubleBE = function(d) {\n    var \n        bytes = new Uint8Array(new Float64Array([d]).buffer);\n    \n    for (var i = bytes.length - 1; i >= 0; i--) {\n        this.writeByte(bytes[i]);\n    }\n};\n\nArrayDataStream.prototype.writeFloatBE = function(d) {\n    var \n        bytes = new Uint8Array(new Float32Array([d]).buffer);\n    \n    for (var i = bytes.length - 1; i >= 0; i--) {\n        this.writeByte(bytes[i]);\n    }\n};\n\n/**\n * Write an ASCII string to the stream\n */\nArrayDataStream.prototype.writeString = function(s) {\n    for (var i = 0; i < s.length; i++) {\n        this.data[this.pos++] = s.charCodeAt(i);\n    }\n};\n\n/**\n * Write the given unsigned 32-bit integer to the stream in big-endian order using the given byte width.\n * No error checking is performed to ensure that the supplied width is correct for the integer.\n * \n * Omit the width parameter to have it determined automatically for you.\n * \n * @param u Unsigned integer to be written\n * @param width Number of bytes to write to the stream\n */\nArrayDataStream.prototype.writeUnsignedIntBE = function(u, width) {\n    if (width === undefined) {\n        width = this.measureUnsignedInt(u);\n    }\n    \n    // Each case falls through:\n    //noinspection FallThroughInSwitchStatementJS\n    switch (width) {\n        case 5:\n            this.writeU8(Math.floor(u / 4294967296)); // Need to use division to access >32 bits of floating point var\n        case 4:\n            this.writeU8(u >> 24);\n        case 3:\n            this.writeU8(u >> 16);\n        case 2:\n            this.writeU8(u >> 8);\n        case 1:\n            this.writeU8(u);\n        break;\n        default:\n            throw \"Bad UINT size \" + width;\n    }\n};\n\n/**\n * Return the number of bytes needed to hold the non-zero bits of the given unsigned integer.\n */\nArrayDataStream.prototype.measureUnsignedInt = function(val) {\n    // Force to 32-bit unsigned integer\n    if (val < (1 << 8)) {\n        return 1;\n    } else if (val < (1 << 16)) {\n        return 2;\n    } else if (val < (1 << 24)) {\n        return 3;\n    } else if (val < 4294967296) {\n        return 4;\n    } else {\n        return 5;\n    }\n};\n\n/**\n * Return a view on the portion of the buffer from the beginning to the current seek position as a Uint8Array.\n */\nArrayDataStream.prototype.getAsDataArray = function() {\n    if (this.pos < this.data.byteLength) {\n        return this.data.subarray(0, this.pos);\n    } else if (this.pos == this.data.byteLength) {\n        return this.data;\n    } else {\n        throw \"ArrayDataStream's pos lies beyond end of buffer\"; \n        // Chance is pretty good that you overflowed the end of the buffer during writing and your file is trash \n    }\n};\n\nArrayDataStream.prototype.EOF = EOF;","// Top level file is just a mixin of submodules & constants\n'use strict';\n\nvar assign    = require('./lib/utils/common').assign;\n\nvar deflate   = require('./lib/deflate');\nvar inflate   = require('./lib/inflate');\nvar constants = require('./lib/zlib/constants');\n\nvar pako = {};\n\nassign(pako, deflate, inflate, constants);\n\nmodule.exports = pako;\n","'use strict';\n\n\nvar TYPED_OK =  (typeof Uint8Array !== 'undefined') &&\n                (typeof Uint16Array !== 'undefined') &&\n                (typeof Int32Array !== 'undefined');\n\nfunction _has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexports.assign = function (obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    var source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (var p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// reduce buffer size, avoiding mem copy\nexports.shrinkBuf = function (buf, size) {\n  if (buf.length === size) { return buf; }\n  if (buf.subarray) { return buf.subarray(0, size); }\n  buf.length = size;\n  return buf;\n};\n\n\nvar fnTyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    if (src.subarray && dest.subarray) {\n      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);\n      return;\n    }\n    // Fallback to ordinary array\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    var i, l, len, pos, chunk, result;\n\n    // calculate data length\n    len = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      len += chunks[i].length;\n    }\n\n    // join chunks\n    result = new Uint8Array(len);\n    pos = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      chunk = chunks[i];\n      result.set(chunk, pos);\n      pos += chunk.length;\n    }\n\n    return result;\n  }\n};\n\nvar fnUntyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    return [].concat.apply([], chunks);\n  }\n};\n\n\n// Enable/Disable typed arrays use, for testing\n//\nexports.setTyped = function (on) {\n  if (on) {\n    exports.Buf8  = Uint8Array;\n    exports.Buf16 = Uint16Array;\n    exports.Buf32 = Int32Array;\n    exports.assign(exports, fnTyped);\n  } else {\n    exports.Buf8  = Array;\n    exports.Buf16 = Array;\n    exports.Buf32 = Array;\n    exports.assign(exports, fnUntyped);\n  }\n};\n\nexports.setTyped(TYPED_OK);\n","'use strict';\n\n\nvar zlib_deflate = require('./zlib/deflate');\nvar utils        = require('./utils/common');\nvar strings      = require('./utils/strings');\nvar msg          = require('./zlib/messages');\nvar ZStream      = require('./zlib/zstream');\n\nvar toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nvar Z_NO_FLUSH      = 0;\nvar Z_FINISH        = 4;\n\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_SYNC_FLUSH    = 2;\n\nvar Z_DEFAULT_COMPRESSION = -1;\n\nvar Z_DEFAULT_STRATEGY    = 0;\n\nvar Z_DEFLATED  = 8;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array|Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you\n * push a chunk with explicit flush (call [[Deflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate(options) {\n  if (!(this instanceof Deflate)) return new Deflate(options);\n\n  this.options = utils.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status = zlib_deflate.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  if (opt.header) {\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    var dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK) {\n      throw new Error(msg[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the compression context.\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * array format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var status, _mode;\n\n  if (this.ended) { return false; }\n\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */\n\n    if (status !== Z_STREAM_END && status !== Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {\n      if (this.options.to === 'string') {\n        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));\n      } else {\n        this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n      }\n    }\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);\n\n  // Finalize on the last chunk.\n  if (_mode === Z_FINISH) {\n    status = zlib_deflate.deflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === Z_SYNC_FLUSH) {\n    this.onEnd(Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate(input, options) {\n  var deflator = new Deflate(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate(input, options);\n}\n\n\nexports.Deflate = Deflate;\nexports.deflate = deflate;\nexports.deflateRaw = deflateRaw;\nexports.gzip = gzip;\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils   = require('../utils/common');\nvar trees   = require('./trees');\nvar adler32 = require('./adler32');\nvar crc32   = require('./crc32');\nvar msg     = require('./messages');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\nvar Z_NO_FLUSH      = 0;\nvar Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\nvar Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\n//var Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\n//var Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\n//var Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n\n/* compression levels */\n//var Z_NO_COMPRESSION      = 0;\n//var Z_BEST_SPEED          = 1;\n//var Z_BEST_COMPRESSION    = 9;\nvar Z_DEFAULT_COMPRESSION = -1;\n\n\nvar Z_FILTERED            = 1;\nvar Z_HUFFMAN_ONLY        = 2;\nvar Z_RLE                 = 3;\nvar Z_FIXED               = 4;\nvar Z_DEFAULT_STRATEGY    = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\n//var Z_BINARY              = 0;\n//var Z_TEXT                = 1;\n//var Z_ASCII               = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n/*============================================================================*/\n\n\nvar MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_MEM_LEVEL = 8;\n\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nvar D_CODES       = 30;\n/* number of distance codes */\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nvar MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar MIN_MATCH = 3;\nvar MAX_MATCH = 258;\nvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nvar PRESET_DICT = 0x20;\n\nvar INIT_STATE = 42;\nvar EXTRA_STATE = 69;\nvar NAME_STATE = 73;\nvar COMMENT_STATE = 91;\nvar HCRC_STATE = 103;\nvar BUSY_STATE = 113;\nvar FINISH_STATE = 666;\n\nvar BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nvar BS_BLOCK_DONE     = 2; /* block flush performed */\nvar BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nvar BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nvar OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nfunction err(strm, errorCode) {\n  strm.msg = msg[errorCode];\n  return errorCode;\n}\n\nfunction rank(f) {\n  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n}\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */\nfunction flush_pending(strm) {\n  var s = strm.state;\n\n  //_tr_flush_bits(s);\n  var len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n}\n\n\nfunction flush_block_only(s, last) {\n  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n}\n\n\nfunction put_byte(s, b) {\n  s.pending_buf[s.pending++] = b;\n}\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nfunction putShortMSB(s, b) {\n//  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n}\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nfunction read_buf(strm, buf, start, size) {\n  var len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  utils.arraySet(buf, strm.input, strm.next_in, len, start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n}\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nfunction longest_match(s, cur_match) {\n  var chain_length = s.max_chain_length;      /* max hash chain length */\n  var scan = s.strstart; /* current string */\n  var match;                       /* matched string */\n  var len;                           /* length of current match */\n  var best_len = s.prev_length;              /* best match length so far */\n  var nice_match = s.nice_match;             /* stop if match long enough */\n  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  var _win = s.window; // shortcut\n\n  var wmask = s.w_mask;\n  var prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  var strend = s.strstart + MAX_MATCH;\n  var scan_end1  = _win[scan + best_len - 1];\n  var scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n}\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nfunction fill_window(s) {\n  var _w_size = s.w_size;\n  var p, n, m, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n\n      /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */\n\n      n = s.hash_size;\n      p = n;\n      do {\n        m = s.head[--p];\n        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n      } while (--n);\n\n      n = _w_size;\n      p = n;\n      do {\n        m = s.prev[--p];\n        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n        /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */\n      } while (--n);\n\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    var curr = s.strstart + s.lookahead;\n//    var init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n}\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */\nfunction deflate_stored(s, flush) {\n  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */\n  var max_block_size = 0xffff;\n\n  if (max_block_size > s.pending_buf_size - 5) {\n    max_block_size = s.pending_buf_size - 5;\n  }\n\n  /* Copy as much as possible from input to output: */\n  for (;;) {\n    /* Fill the window as much as possible: */\n    if (s.lookahead <= 1) {\n\n      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n      //  s->block_start >= (long)s->w_size, \"slide too late\");\n//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n//        s.block_start >= s.w_size)) {\n//        throw  new Error(\"slide too late\");\n//      }\n\n      fill_window(s);\n      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n\n      if (s.lookahead === 0) {\n        break;\n      }\n      /* flush the current block */\n    }\n    //Assert(s->block_start >= 0L, \"block gone\");\n//    if (s.block_start < 0) throw new Error(\"block gone\");\n\n    s.strstart += s.lookahead;\n    s.lookahead = 0;\n\n    /* Emit a stored block if pending_buf will be full: */\n    var max_start = s.block_start + max_block_size;\n\n    if (s.strstart === 0 || s.strstart >= max_start) {\n      /* strstart == 0 is possible when wraparound on 16-bit machine */\n      s.lookahead = s.strstart - max_start;\n      s.strstart = max_start;\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n\n\n    }\n    /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */\n    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n\n  if (s.strstart > s.block_start) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_NEED_MORE;\n}\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nfunction deflate_fast(s, flush) {\n  var hash_head;        /* head of the hash chain */\n  var bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nfunction deflate_slow(s, flush) {\n  var hash_head;          /* head of hash chain */\n  var bflush;              /* set if current block must be flushed */\n\n  var max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n}\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nfunction deflate_rle(s, flush) {\n  var bflush;            /* set if current block must be flushed */\n  var prev;              /* byte at distance one to match */\n  var scan, strend;      /* scan goes up to strend for length of run */\n\n  var _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nfunction deflate_huff(s, flush) {\n  var bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nvar configuration_table;\n\nconfiguration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nfunction lm_init(s) {\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n}\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);\n  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new utils.Buf16(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.l_buf = 0;          /* buffer index for literals or lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.last_lit = 0;      /* running index in l_buf */\n\n  this.d_buf = 0;\n  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\nfunction deflateResetKeep(strm) {\n  var s;\n\n  if (!strm || !strm.state) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = Z_NO_FLUSH;\n  trees._tr_init(s);\n  return Z_OK;\n}\n\n\nfunction deflateReset(strm) {\n  var ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n}\n\n\nfunction deflateSetHeader(strm, head) {\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }\n  strm.state.gzhead = head;\n  return Z_OK;\n}\n\n\nfunction deflateInit2(strm, level, method, windowBits, memLevel, strategy) {\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  var wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  var s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new utils.Buf8(s.w_size * 2);\n  s.head = new utils.Buf16(s.hash_size);\n  s.prev = new utils.Buf16(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n\n  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);\n  //s->pending_buf = (uchf *) overlay;\n  s.pending_buf = new utils.Buf8(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);\n  s.d_buf = 1 * s.lit_bufsize;\n\n  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;\n  s.l_buf = (1 + 2) * s.lit_bufsize;\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n}\n\nfunction deflateInit(strm, level) {\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n}\n\n\nfunction deflate(strm, flush) {\n  var old_flush, s;\n  var beg, val; // for gzip header write only\n\n  if (!strm || !strm.state ||\n    flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n\n  if (!strm.output ||\n      (!strm.input && strm.avail_in !== 0) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  s.strm = strm; /* just in case */\n  old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Write the header */\n  if (s.status === INIT_STATE) {\n\n    if (s.wrap === 2) { // GZIP header\n      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n      put_byte(s, 31);\n      put_byte(s, 139);\n      put_byte(s, 8);\n      if (!s.gzhead) { // s->gzhead == Z_NULL\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, OS_CODE);\n        s.status = BUSY_STATE;\n      }\n      else {\n        put_byte(s, (s.gzhead.text ? 1 : 0) +\n                    (s.gzhead.hcrc ? 2 : 0) +\n                    (!s.gzhead.extra ? 0 : 4) +\n                    (!s.gzhead.name ? 0 : 8) +\n                    (!s.gzhead.comment ? 0 : 16)\n        );\n        put_byte(s, s.gzhead.time & 0xff);\n        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, s.gzhead.os & 0xff);\n        if (s.gzhead.extra && s.gzhead.extra.length) {\n          put_byte(s, s.gzhead.extra.length & 0xff);\n          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n        }\n        if (s.gzhead.hcrc) {\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n        }\n        s.gzindex = 0;\n        s.status = EXTRA_STATE;\n      }\n    }\n    else // DEFLATE header\n    {\n      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n      var level_flags = -1;\n\n      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n        level_flags = 0;\n      } else if (s.level < 6) {\n        level_flags = 1;\n      } else if (s.level === 6) {\n        level_flags = 2;\n      } else {\n        level_flags = 3;\n      }\n      header |= (level_flags << 6);\n      if (s.strstart !== 0) { header |= PRESET_DICT; }\n      header += 31 - (header % 31);\n\n      s.status = BUSY_STATE;\n      putShortMSB(s, header);\n\n      /* Save the adler32 of the preset dictionary: */\n      if (s.strstart !== 0) {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n      }\n      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    }\n  }\n\n//#ifdef GZIP\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n\n      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            break;\n          }\n        }\n        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n        s.gzindex++;\n      }\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (s.gzindex === s.gzhead.extra.length) {\n        s.gzindex = 0;\n        s.status = NAME_STATE;\n      }\n    }\n    else {\n      s.status = NAME_STATE;\n    }\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.gzindex = 0;\n        s.status = COMMENT_STATE;\n      }\n    }\n    else {\n      s.status = COMMENT_STATE;\n    }\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.status = HCRC_STATE;\n      }\n    }\n    else {\n      s.status = HCRC_STATE;\n    }\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n      }\n      if (s.pending + 2 <= s.pending_buf_size) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        s.status = BUSY_STATE;\n      }\n    }\n    else {\n      s.status = BUSY_STATE;\n    }\n  }\n//#endif\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n        configuration_table[s.level].func(s, flush));\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        trees._tr_align(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        trees._tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n  //Assert(strm->avail_out > 0, \"bug2\");\n  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n}\n\nfunction deflateEnd(strm) {\n  var status;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  status = strm.state.status;\n  if (status !== INIT_STATE &&\n    status !== EXTRA_STATE &&\n    status !== NAME_STATE &&\n    status !== COMMENT_STATE &&\n    status !== HCRC_STATE &&\n    status !== BUSY_STATE &&\n    status !== FINISH_STATE\n  ) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n}\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nfunction deflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var s;\n  var str, n;\n  var wrap;\n  var avail;\n  var next;\n  var input;\n  var tmpDict;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n  wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    tmpDict = new utils.Buf8(s.w_size);\n    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  avail = strm.avail_in;\n  next = strm.next_in;\n  input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    str = s.strstart;\n    n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK;\n}\n\n\nexports.deflateInit = deflateInit;\nexports.deflateInit2 = deflateInit2;\nexports.deflateReset = deflateReset;\nexports.deflateResetKeep = deflateResetKeep;\nexports.deflateSetHeader = deflateSetHeader;\nexports.deflate = deflate;\nexports.deflateEnd = deflateEnd;\nexports.deflateSetDictionary = deflateSetDictionary;\nexports.deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nexports.deflateBound = deflateBound;\nexports.deflateCopy = deflateCopy;\nexports.deflateParams = deflateParams;\nexports.deflatePending = deflatePending;\nexports.deflatePrime = deflatePrime;\nexports.deflateTune = deflateTune;\n*/\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\nvar utils = require('../utils/common');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//var Z_FILTERED          = 1;\n//var Z_HUFFMAN_ONLY      = 2;\n//var Z_RLE               = 3;\nvar Z_FIXED               = 4;\n//var Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nvar Z_BINARY              = 0;\nvar Z_TEXT                = 1;\n//var Z_ASCII             = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n/*============================================================================*/\n\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nvar STORED_BLOCK = 0;\nvar STATIC_TREES = 1;\nvar DYN_TREES    = 2;\n/* The three kinds of block type */\n\nvar MIN_MATCH    = 3;\nvar MAX_MATCH    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\n\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nvar D_CODES       = 30;\n/* number of distance codes */\n\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\n\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\n\nvar MAX_BITS      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nvar MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nvar END_BLOCK   = 256;\n/* end of block literal code */\n\nvar REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nvar REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nvar REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nvar extra_lbits =   /* extra bits for each length code */\n  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];\n\nvar extra_dbits =   /* extra bits for each distance code */\n  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];\n\nvar extra_blbits =  /* extra bits for each bit length code */\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];\n\nvar bl_order =\n  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nvar DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nvar static_ltree  = new Array((L_CODES + 2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nvar static_dtree  = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nvar _dist_code    = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nvar _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nvar base_length   = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nvar base_dist     = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nvar static_l_desc;\nvar static_d_desc;\nvar static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nfunction d_code(dist) {\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n}\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nfunction put_short(s, w) {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n}\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nfunction send_bits(s, value, length) {\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n}\n\n\nfunction send_code(s, c, tree) {\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n}\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nfunction bi_reverse(code, len) {\n  var res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nfunction bi_flush(s) {\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n}\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nfunction gen_bitlen(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n{\n  var tree            = desc.dyn_tree;\n  var max_code        = desc.max_code;\n  var stree           = desc.stat_desc.static_tree;\n  var has_stree       = desc.stat_desc.has_stree;\n  var extra           = desc.stat_desc.extra_bits;\n  var base            = desc.stat_desc.extra_base;\n  var max_length      = desc.stat_desc.max_length;\n  var h;              /* heap index */\n  var n, m;           /* iterate over the tree elements */\n  var bits;           /* bit length */\n  var xbits;          /* extra bits */\n  var f;              /* frequency */\n  var overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Trace((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nfunction gen_codes(tree, max_code, bl_count)\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n{\n  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */\n  var code = 0;              /* running code value */\n  var bits;                  /* bit index */\n  var n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    var len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n}\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nfunction tr_static_init() {\n  var n;        /* iterates over tree elements */\n  var bits;     /* bit counter */\n  var length;   /* length value */\n  var code;     /* code value */\n  var dist;     /* distance index */\n  var bl_count = new Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\n  //static_init_done = true;\n}\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nfunction init_block(s) {\n  var n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.last_lit = s.matches = 0;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nfunction bi_windup(s)\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n}\n\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */\nfunction copy_block(s, buf, len, header)\n//DeflateState *s;\n//charf    *buf;    /* the input data */\n//unsigned len;     /* its length */\n//int      header;  /* true if block header must be written */\n{\n  bi_windup(s);        /* align on byte boundary */\n\n  if (header) {\n    put_short(s, len);\n    put_short(s, ~len);\n  }\n//  while (len--) {\n//    put_byte(s, *buf++);\n//  }\n  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);\n  s.pending += len;\n}\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nfunction smaller(tree, n, m, depth) {\n  var _n2 = n * 2;\n  var _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n}\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nfunction pqdownheap(s, tree, k)\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n{\n  var v = s.heap[k];\n  var j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n}\n\n\n// inlined manually\n// var SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nfunction compress_block(s, ltree, dtree)\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n{\n  var dist;           /* distance of matched string */\n  var lc;             /* match length or unmatched char (if dist == 0) */\n  var lx = 0;         /* running index in l_buf */\n  var code;           /* the code to send */\n  var extra;          /* number of extra bits to send */\n\n  if (s.last_lit !== 0) {\n    do {\n      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);\n      lc = s.pending_buf[s.l_buf + lx];\n      lx++;\n\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n      //       \"pendingBuf overflow\");\n\n    } while (lx < s.last_lit);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n}\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nfunction build_tree(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n{\n  var tree     = desc.dyn_tree;\n  var stree    = desc.stat_desc.static_tree;\n  var has_stree = desc.stat_desc.has_stree;\n  var elems    = desc.stat_desc.elems;\n  var n, m;          /* iterate over heap elements */\n  var max_code = -1; /* largest code with non zero frequency */\n  var node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n}\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nfunction scan_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nfunction send_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nfunction build_bl_tree(s) {\n  var max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n}\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nfunction send_all_trees(s, lcodes, dcodes, blcodes)\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n{\n  var rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n}\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nfunction detect_data_type(s) {\n  /* black_mask is the bit mask of black-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  var black_mask = 0xf3ffc07f;\n  var n;\n\n  /* Check for non-textual (\"black-listed\") bytes. */\n  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"white-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"black-listed\" or \"white-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n}\n\n\nvar static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nfunction _tr_init(s)\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n}\n\n\n/* ===========================================================================\n * Send a stored block\n */\nfunction _tr_stored_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  copy_block(s, buf, stored_len, true); /* with header */\n}\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nfunction _tr_align(s) {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n}\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */\nfunction _tr_flush_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  var max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->last_lit));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n}\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nfunction _tr_tally(s, dist, lc)\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n{\n  //var out_length, in_length, dcode;\n\n  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\n  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n  s.last_lit++;\n\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n\n//#ifdef TRUNCATE_BLOCK\n//  /* Try to guess if it is profitable to stop the current block here */\n//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n//    /* Compute an upper bound for the compressed length */\n//    out_length = s.last_lit*8;\n//    in_length = s.strstart - s.block_start;\n//\n//    for (dcode = 0; dcode < D_CODES; dcode++) {\n//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n//    }\n//    out_length >>>= 3;\n//    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n//    //       s->last_lit, in_length, out_length,\n//    //       100L - out_length*100L/in_length));\n//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n//      return true;\n//    }\n//  }\n//#endif\n\n  return (s.last_lit === s.lit_bufsize - 1);\n  /* We avoid equality with lit_bufsize because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n}\n\nexports._tr_init  = _tr_init;\nexports._tr_stored_block = _tr_stored_block;\nexports._tr_flush_block  = _tr_flush_block;\nexports._tr_tally = _tr_tally;\nexports._tr_align = _tr_align;\n","'use strict';\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction adler32(adler, buf, len, pos) {\n  var s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n}\n\n\nmodule.exports = adler32;\n","'use strict';\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nfunction makeTable() {\n  var c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n}\n\n// Create table on load. Just 255 signed longs. Not a problem.\nvar crcTable = makeTable();\n\n\nfunction crc32(crc, buf, len, pos) {\n  var t = crcTable,\n      end = pos + len;\n\n  crc ^= -1;\n\n  for (var i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n}\n\n\nmodule.exports = crc32;\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n","// String encode/decode helpers\n'use strict';\n\n\nvar utils = require('./common');\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nvar STR_APPLY_OK = true;\nvar STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar _utf8len = new utils.Buf8(256);\nfor (var q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nexports.string2buf = function (str) {\n  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new utils.Buf8(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper (used in 2 places)\nfunction buf2binstring(buf, len) {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {\n      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));\n    }\n  }\n\n  var result = '';\n  for (var i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n}\n\n\n// Convert byte array to binary string\nexports.buf2binstring = function (buf) {\n  return buf2binstring(buf, buf.length);\n};\n\n\n// Convert binary string (typed, when possible)\nexports.binstring2buf = function (str) {\n  var buf = new utils.Buf8(str.length);\n  for (var i = 0, len = buf.length; i < len; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n};\n\n\n// convert array to string\nexports.buf2string = function (buf, max) {\n  var i, out, c, c_len;\n  var len = max || buf.length;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  var utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nexports.utf8border = function (buf, max) {\n  var pos;\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nmodule.exports = ZStream;\n","'use strict';\n\n\nvar zlib_inflate = require('./zlib/inflate');\nvar utils        = require('./utils/common');\nvar strings      = require('./utils/strings');\nvar c            = require('./zlib/constants');\nvar msg          = require('./zlib/messages');\nvar ZStream      = require('./zlib/zstream');\nvar GZheader     = require('./zlib/gzheader');\n\nvar toString = Object.prototype.toString;\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you\n * push a chunk with explicit flush (call [[Inflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate(options) {\n  if (!(this instanceof Inflate)) return new Inflate(options);\n\n  this.options = utils.assign({\n    chunkSize: 16384,\n    windowBits: 0,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status  = zlib_inflate.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== c.Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  this.header = new GZheader();\n\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== c.Z_OK) {\n        throw new Error(msg[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the decompression context.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var dictionary = this.options.dictionary;\n  var status, _mode;\n  var next_out_utf8, tail, utf8str;\n\n  // Flag to properly process Z_BUF_ERROR on testing inflate call\n  // when we check that all output data was flushed.\n  var allowBufError = false;\n\n  if (this.ended) { return false; }\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // Only binary strings can be decompressed on practice\n    strm.input = strings.binstring2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */\n\n    if (status === c.Z_NEED_DICT && dictionary) {\n      status = zlib_inflate.inflateSetDictionary(this.strm, dictionary);\n    }\n\n    if (status === c.Z_BUF_ERROR && allowBufError === true) {\n      status = c.Z_OK;\n      allowBufError = false;\n    }\n\n    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {\n\n        if (this.options.to === 'string') {\n\n          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          tail = strm.next_out - next_out_utf8;\n          utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n        }\n      }\n    }\n\n    // When no more input data, we should check that internal inflate buffers\n    // are flushed. The only way to do it when avail_out = 0 - run one more\n    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.\n    // Here we set flag to process this error properly.\n    //\n    // NOTE. Deflate does not return error in this case and does not needs such\n    // logic.\n    if (strm.avail_in === 0 && strm.avail_out === 0) {\n      allowBufError = true;\n    }\n\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);\n\n  if (status === c.Z_STREAM_END) {\n    _mode = c.Z_FINISH;\n  }\n\n  // Finalize on the last chunk.\n  if (_mode === c.Z_FINISH) {\n    status = zlib_inflate.inflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === c.Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === c.Z_SYNC_FLUSH) {\n    this.onEnd(c.Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === c.Z_OK) {\n    if (this.options.to === 'string') {\n      // Glue & convert here, until we teach pako to send\n      // utf8 aligned strings to onData\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])\n *   , output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err)\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n  var inflator = new Inflate(options);\n\n  inflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) { throw inflator.msg || msg[inflator.err]; }\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nexports.Inflate = Inflate;\nexports.inflate = inflate;\nexports.inflateRaw = inflateRaw;\nexports.ungzip  = inflate;\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils         = require('../utils/common');\nvar adler32       = require('./adler32');\nvar crc32         = require('./crc32');\nvar inflate_fast  = require('./inffast');\nvar inflate_table = require('./inftrees');\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\n//var Z_NO_FLUSH      = 0;\n//var Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\n//var Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\nvar Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\nvar Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nvar    HEAD = 1;       /* i: waiting for magic header */\nvar    FLAGS = 2;      /* i: waiting for method and flags (gzip) */\nvar    TIME = 3;       /* i: waiting for modification time (gzip) */\nvar    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */\nvar    EXLEN = 5;      /* i: waiting for extra length (gzip) */\nvar    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */\nvar    NAME = 7;       /* i: waiting for end of file name (gzip) */\nvar    COMMENT = 8;    /* i: waiting for end of comment (gzip) */\nvar    HCRC = 9;       /* i: waiting for header crc (gzip) */\nvar    DICTID = 10;    /* i: waiting for dictionary check value */\nvar    DICT = 11;      /* waiting for inflateSetDictionary() call */\nvar        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\nvar        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */\nvar        STORED = 14;    /* i: waiting for stored size (length and complement) */\nvar        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */\nvar        COPY = 16;      /* i/o: waiting for input or output to copy stored block */\nvar        TABLE = 17;     /* i: waiting for dynamic block table lengths */\nvar        LENLENS = 18;   /* i: waiting for code length code lengths */\nvar        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */\nvar            LEN_ = 20;      /* i: same as LEN below, but only first time in */\nvar            LEN = 21;       /* i: waiting for length/lit/eob code */\nvar            LENEXT = 22;    /* i: waiting for length extra bits */\nvar            DIST = 23;      /* i: waiting for distance code */\nvar            DISTEXT = 24;   /* i: waiting for distance extra bits */\nvar            MATCH = 25;     /* o: waiting for output space to copy string */\nvar            LIT = 26;       /* o: waiting for output space to write literal */\nvar    CHECK = 27;     /* i: waiting for 32-bit check value */\nvar    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */\nvar    DONE = 29;      /* finished check, done -- remain here until reset */\nvar    BAD = 30;       /* got a data error -- remain here until reset */\nvar    MEM = 31;       /* got an inflate() memory error -- remain here until reset */\nvar    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_WBITS = MAX_WBITS;\n\n\nfunction zswap32(q) {\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n}\n\n\nfunction InflateState() {\n  this.mode = 0;             /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib) */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */\n  this.work = new utils.Buf16(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\nfunction inflateResetKeep(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);\n  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK;\n}\n\nfunction inflateReset(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n}\n\nfunction inflateReset2(strm, windowBits) {\n  var wrap;\n  var state;\n\n  /* get the state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 1;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n}\n\nfunction inflateInit2(strm, windowBits) {\n  var ret;\n  var state;\n\n  if (!strm) { return Z_STREAM_ERROR; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.window = null/*Z_NULL*/;\n  ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n}\n\nfunction inflateInit(strm) {\n  return inflateInit2(strm, DEF_WBITS);\n}\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nvar virgin = true;\n\nvar lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\nfunction fixedtables(state) {\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    var sym;\n\n    lenfix = new utils.Buf32(512);\n    distfix = new utils.Buf32(32);\n\n    /* literal/length table */\n    sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n}\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nfunction updatewindow(strm, src, end, copy) {\n  var dist;\n  var state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new utils.Buf8(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    utils.arraySet(state.window, src, end - copy, dist, state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      utils.arraySet(state.window, src, end - copy, copy, 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n}\n\nfunction inflate(strm, flush) {\n  var state;\n  var input, output;          // input/output buffers\n  var next;                   /* next input INDEX */\n  var put;                    /* next output INDEX */\n  var have, left;             /* available input and output */\n  var hold;                   /* bit buffer */\n  var bits;                   /* bits in bit buffer */\n  var _in, _out;              /* save starting available input and output */\n  var copy;                   /* number of stored or match bytes to copy */\n  var from;                   /* where to copy match bytes from */\n  var from_source;\n  var here = 0;               /* current decoding table entry */\n  var here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //var last;                   /* parent table entry */\n  var last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  var len;                    /* length to copy for repeats, bits to drop */\n  var ret;                    /* return code */\n  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */\n  var opts;\n\n  var n; // temporary var for NEED_BITS\n\n  var order = /* permutation of code lengths */\n    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\n\n\n  if (!strm || !strm.state || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        state.flags = 0;           /* expect zlib header */\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        else if (len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n        state.dmax = 1 << len;\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if (state.flags & 0x0200) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Array(state.head.extra_len);\n              }\n              utils.arraySet(\n                state.head.extra,\n                input,\n                next,\n                // extra field is limited to 65536 bytes\n                // - no need for additional size check\n                copy,\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if (state.flags & 0x0200) {\n              state.check = crc32(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          utils.arraySet(output, input, next, copy, put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inflate_fast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if (_out) {\n            strm.adler = state.check =\n                /*UPDATE(state.check, put - _out, _out);*/\n                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\n      state.mode = MEM;\n      return Z_MEM_ERROR;\n    }\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if (state.wrap && _out) {\n    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n}\n\nfunction inflateEnd(strm) {\n\n  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  var state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK;\n}\n\nfunction inflateGetHeader(strm, head) {\n  var state;\n\n  /* check state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK;\n}\n\nfunction inflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var state;\n  var dictid;\n  var ret;\n\n  /* check state */\n  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK;\n}\n\nexports.inflateReset = inflateReset;\nexports.inflateReset2 = inflateReset2;\nexports.inflateResetKeep = inflateResetKeep;\nexports.inflateInit = inflateInit;\nexports.inflateInit2 = inflateInit2;\nexports.inflate = inflate;\nexports.inflateEnd = inflateEnd;\nexports.inflateGetHeader = inflateGetHeader;\nexports.inflateSetDictionary = inflateSetDictionary;\nexports.inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nexports.inflateCopy = inflateCopy;\nexports.inflateGetDictionary = inflateGetDictionary;\nexports.inflateMark = inflateMark;\nexports.inflatePrime = inflatePrime;\nexports.inflateSync = inflateSync;\nexports.inflateSyncPoint = inflateSyncPoint;\nexports.inflateUndermine = inflateUndermine;\n*/\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nvar BAD = 30;       /* got a data error -- remain here until reset */\nvar TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nmodule.exports = function inflate_fast(strm, start) {\n  var state;\n  var _in;                    /* local strm.input */\n  var last;                   /* have enough input while in < last */\n  var _out;                   /* local strm.output */\n  var beg;                    /* inflate()'s initial strm.output */\n  var end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  var dmax;                   /* maximum distance from zlib header */\n//#endif\n  var wsize;                  /* window size or zero if not using window */\n  var whave;                  /* valid bytes in the window */\n  var wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  var s_window;               /* allocated sliding window, if wsize != 0 */\n  var hold;                   /* local strm.hold */\n  var bits;                   /* local strm.bits */\n  var lcode;                  /* local strm.lencode */\n  var dcode;                  /* local strm.distcode */\n  var lmask;                  /* mask for first level of length codes */\n  var dmask;                  /* mask for first level of distance codes */\n  var here;                   /* retrieved table entry */\n  var op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  var len;                    /* match length, unused bytes */\n  var dist;                   /* match distance */\n  var from;                   /* where to copy match from */\n  var from_source;\n\n\n  var input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils = require('../utils/common');\n\nvar MAXBITS = 15;\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\nvar lbase = [ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n];\n\nvar lext = [ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n];\n\nvar dbase = [ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n];\n\nvar dext = [ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n];\n\nmodule.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)\n{\n  var bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  var len = 0;               /* a code's length in bits */\n  var sym = 0;               /* index of code symbols */\n  var min = 0, max = 0;          /* minimum and maximum code lengths */\n  var root = 0;              /* number of index bits for root table */\n  var curr = 0;              /* number of index bits for current table */\n  var drop = 0;              /* code bits to drop for sub-table */\n  var left = 0;                   /* number of prefix codes available */\n  var used = 0;              /* code entries in table used */\n  var huff = 0;              /* Huffman code */\n  var incr;              /* for incrementing code, index */\n  var fill;              /* index for replicating entries */\n  var low;               /* low bits for current root entry */\n  var mask;              /* mask for low root bits */\n  var next;             /* next available space in table */\n  var base = null;     /* base value table to use */\n  var base_index = 0;\n//  var shoextra;    /* extra bits table to use */\n  var end;                    /* use base and extra for symbol > end */\n  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  var extra = null;\n  var extra_index = 0;\n\n  var here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES) {\n    base = extra = work;    /* dummy value--not used */\n    end = 19;\n\n  } else if (type === LENS) {\n    base = lbase;\n    base_index -= 257;\n    extra = lext;\n    extra_index -= 257;\n    end = 256;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    end = -1;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS && used > ENOUGH_LENS) ||\n    (type === DISTS && used > ENOUGH_DISTS)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] < end) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] > end) {\n      here_op = extra[extra_index + work[sym]];\n      here_val = base[base_index + work[sym]];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS && used > ENOUGH_LENS) ||\n        (type === DISTS && used > ENOUGH_DISTS)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  //Z_MEM_ERROR:     -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nmodule.exports = GZheader;\n","/* \n * By Nicholas Sherlock <n.sherlock@gmail.com>\n * \n * Released under the WTFPLv2 https://en.wikipedia.org/wiki/WTFPL\n */\n\nimport ArrayDataStream from \"./ArrayDataStream.js\";\n\nvar \n    ACO_COLORSPACE_RGB = 0,\n    ACO_COLORSPACE_HSB = 1,\n    ACO_COLORSPACE_CMYK = 2,\n    ACO_COLORSPACE_LAB = 7,\n    ACO_COLORSPACE_GRAYSCALE = 8;\n\nexport default function AdobeColorTable() {\n}\n\n/**\n * Read an .aco (Adobe COlor) swatches file and return an array of RGB colors.\n * \n * Supports version 1 palettes, only RGB format.\n * \n * @param {Uint8Array} input - The .aco file contents\n * @return {?Object[]} An array of colours, or null if the file was not supported.\n */\nAdobeColorTable.prototype.read = function(input) {\n    if (input == null) {\n        return null;\n    }\n    \n    var\n        stream = new ArrayDataStream(new Uint8Array(input)),\n        version, count,\n        result = [];\n\n    version = stream.readU16BE();\n    if (version != 1) {\n        return null;\n    }\n    count = stream.readU16BE();\n\n    for (var i = 0; i < count; i++) {\n        var\n            colorSpace = stream.readU16BE();\n\n        if (colorSpace != ACO_COLORSPACE_RGB) {\n            continue; // Drop unsupported colours silently\n        }\n\n        // Scale back down from 16-bit to 8-bit\n        var\n            r = (stream.readU16BE() * 255) / 65535,\n            g = (stream.readU16BE() * 255) / 65535,\n            b = (stream.readU16BE() * 255) / 65535;\n        \n        stream.readU16BE(); // third value unused\n\n        result.push(r << 16 | g << 8 | b);\n    }\n\n    return result;\n};\n\n/**\n * Write an .aco (Adobe COlor) swatches file of the given array of RGB colours (colors are integers with the\n * blue channel in the least-significant position).\n */\nAdobeColorTable.prototype.write = function(colours) {\n    var\n        buffer = new Uint8Array(2 * 2 + colours.length * 10),\n        stream = new ArrayDataStream(buffer);\n    \n    stream.writeU16BE(1); // Version 1\n    stream.writeU16BE(colours.length); // Number of colours\n    \n    for (var i = 0; i < colours.length; i++) {\n        var\n            colour = colours[i];\n        \n        stream.writeU16BE(ACO_COLORSPACE_RGB);\n\n        // Scale up colours to 16-bits (65535/255 = 257)\n        stream.writeU16BE(((colour >> 16) & 0xFF) * 257);\n        stream.writeU16BE(((colour >> 8) & 0xFF) * 257);\n        stream.writeU16BE((colour & 0xFF) * 257);\n        stream.writeU16BE(0);\n    }\n    \n    return stream.getAsDataArray();\n};\n","import { save as chiSave } from \"./CPChibiFile.js\";\r\nimport AdobeColorTable from \"../util/AdobeColorTable.js\";\r\nimport EventEmitter from \"wolfy87-eventemitter\";\r\nimport FileSaver from \"file-saver\";\r\n\r\nimport { _ } from \"../languages/lang.js\";\r\n\r\n/**\r\n * We generally can't do much with binary strings because various methods will try to UTF-8 mangle them.\r\n * This function converts such a string to a Uint8Array instead.\r\n */\r\nexport function binaryStringToByteArray(s) {\r\n    var result = new Uint8Array(s.length);\r\n\r\n    for (var i = 0; i < s.length; i++) {\r\n        result[i] = s.charCodeAt(i);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Saves ChickenPaint resources to a remote server or to the disk and emits progress events.\r\n *\r\n * Options:\r\n *     url - URL to send to. If omitted, will save to the disk instead.\r\n *     artwork - Artwork to send\r\n *     rotation - Integer [0..3] of the number of 90 degree rotation steps that should be applied to canvas upon opening.\r\n *     swatches - Array of ARGB integer colors to save as the image swatches (optional)\r\n */\r\nexport default function CPResourceSaver(options) {\r\n    var that = this,\r\n        cancelled = false;\r\n\r\n    options.rotation = options.rotation || 0;\r\n\r\n    function reportProgress(progress) {\r\n        if (progress === null) {\r\n            that.emitEvent(\"savingProgress\", [1.0, _(\"Saving drawing...\")]);\r\n        } else {\r\n            that.emitEvent(\"savingProgress\", [\r\n                progress,\r\n                _(\"Saving drawing...\") +\r\n                    \" (\" +\r\n                    Math.round(progress * 100) +\r\n                    \"%)\",\r\n            ]);\r\n        }\r\n    }\r\n\r\n    function reportFatal(serverMessage) {\r\n        that.emitEvent(\"savingFailure\", [serverMessage]);\r\n    }\r\n\r\n    async function postDrawing(formData) {\r\n        // FormDataサイズを取得してチェック\r\n        try {\r\n            const size = await getFormDataSize(formData);\r\n            const total_size = `${(size / 1024 / 1024).toFixed(3)}MB`;\r\n            const limit_size = `${options.post_max_size}MB`;\r\n            console.log(\"Total size of FormData:\", total_size);\r\n            console.log(\"post_max_size:\", limit_size);\r\n\r\n            if (\r\n                options &&\r\n                options.post_max_size &&\r\n                size &&\r\n                !isNaN(size) &&\r\n                size > options.post_max_size * 1024 * 1024\r\n            ) {\r\n                reportFatal(\r\n                    `${_(\"The file size exceeds the server limit.\")}\\n${_(\r\n                        \"Limit size\"\r\n                    )}:${limit_size}\\n${_(\"Current size\")}:${total_size}`\r\n                );\r\n                return; // サイズ超過の場合は中断\r\n            } else {\r\n                console.log(\r\n                    _(\r\n                        \"The total size of FormData is within the acceptable range.\"\r\n                    )\r\n                );\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error details:\", error);\r\n            reportFatal(\"An error occurred in the getFormDataSize function.\");\r\n            return;\r\n        }\r\n\r\n        var requestOptions = {\r\n            method: \"POST\",\r\n            mode: \"same-origin\",\r\n            headers: {\r\n                \"X-Requested-With\": \"chickenpaint\",\r\n            },\r\n            body: formData,\r\n        };\r\n        reportProgress(0.5);\r\n        // リクエストを送信\r\n        fetch(options.url, requestOptions)\r\n            .then((response) => {\r\n                if (!response.ok) {\r\n                    let httpErrorMessag = \"\";\r\n                    switch (response.status) {\r\n                        case 400:\r\n                            httpErrorMessag = \"Bad Request\";\r\n                            break;\r\n                        case 401:\r\n                            httpErrorMessag = \"Unauthorized\";\r\n                            break;\r\n                        case 403:\r\n                            httpErrorMessag = \"Forbidden\";\r\n                            break;\r\n                        case 404:\r\n                            httpErrorMessag = \"Not Found\";\r\n                            break;\r\n                        case 500:\r\n                            httpErrorMessag = \"Internal Server Error\";\r\n                            break;\r\n                        case 502:\r\n                            httpErrorMessag = \"Bad Gateway\";\r\n                            break;\r\n                        case 503:\r\n                            httpErrorMessag = \"Service Unavailable\";\r\n                            break;\r\n                        default:\r\n                            httpErrorMessag = \"Unknown Error\";\r\n                            break;\r\n                    }\r\n\r\n                    throw new Error(\r\n                        `${_(\"Network response was not OK\")} ( ${_(\r\n                            \"HTTP status code\"\r\n                        )} ${response.status} : ${httpErrorMessag} )`\r\n                    );\r\n                }\r\n\r\n                return response.text();\r\n            })\r\n            .then((responseText) => {\r\n                if (/^CHIBIOK/.test(responseText)) {\r\n                    reportProgress(1.0);\r\n                    that.emitEvent(\"savingComplete\");\r\n                } else {\r\n                    reportFatal(responseText);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                reportFatal(error.message);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Calculates the total size of a FormData object in bytes.\r\n     * This function iterates over each entry in the FormData object,\r\n     * converting string values to Blobs to measure their size consistently.\r\n     * Blob entries are used directly. All entries are then combined into a single Blob,\r\n     * whose size is returned as the total FormData size.\r\n     *\r\n     * Note: This function is asynchronous to ensure compatibility across\r\n     * all environments where Blob size calculation might be non-blocking.\r\n     *\r\n     * @param {FormData} formData - The FormData object containing data to be measured.\r\n     * @returns {Promise<number>} The total size of the FormData data in bytes.\r\n     */\r\n    async function getFormDataSize(formData) {\r\n        if (!options.post_max_size) {\r\n            return;\r\n        }\r\n\r\n        const entries = Array.from(formData.entries());\r\n        const blobs = entries.map(([key, value]) => {\r\n            if (typeof value === \"string\") {\r\n                return new Blob([`${key}=${value}`]);\r\n            } else {\r\n                return value;\r\n            }\r\n        });\r\n        const totalBlob = new Blob(blobs);\r\n        return totalBlob.size;\r\n    }\r\n    // \tfunction postDrawing(formData) {\r\n    //     var\r\n    //         xhr = new XMLHttpRequest();\r\n\r\n    //     xhr.upload.addEventListener(\"progress\", function(evt) {\r\n    //         var\r\n    //             progress;\r\n\r\n    //         if (evt.lengthComputable) {\r\n    //             progress = evt.loaded / evt.total;\r\n    //         } else {\r\n    //             progress = null;\r\n    //         }\r\n\r\n    //         reportProgress(progress);\r\n    //     }, false);\r\n\r\n    //     xhr.addEventListener(\"load\", function(evt) {\r\n    //         reportProgress(1.0);\r\n\r\n    //         if (this.status == 200 && /^CHIBIOK/.test(this.response)) {\r\n    //             that.emitEvent(\"savingComplete\");\r\n    //         } else {\r\n    //             reportFatal(this.response);\r\n    //         }\r\n    //     }, false);\r\n\r\n    //     xhr.addEventListener(\"error\", function() {\r\n    //         reportFatal(this.response);\r\n    //     }, false);\r\n\r\n    //     reportProgress(0);\r\n\r\n    //     xhr.open(\"POST\", options.url, true);\r\n\r\n    //     xhr.responseType = \"text\";\r\n\r\n    //     xhr.send(formData);\r\n    // }\r\n\r\n    /**\r\n     * Begin saving the data provided in the constructor. Returns immediately, and fires these events to report the\r\n     * saving progress:\r\n     *\r\n     * savingProgress(progress) - Progress is [0.0 ... 1.0] and reports how much has uploaded so far, or null if the\r\n     *                            total progress could not be determined.\r\n     * savingFailure(error)     - When saving fails, along with a string error message to display to the user.\r\n     * savingComplete()         - When saving completes succesfully\r\n     */\r\n    this.save = function () {\r\n        var flat, flatBlob, swatchesBlob;\r\n\r\n        flat = binaryStringToByteArray(\r\n            options.artwork.getFlatPNG(options.rotation)\r\n        );\r\n        flatBlob = new Blob([flat], { type: \"image/png\" });\r\n        flat = null; // Don't need this any more\r\n\r\n        var serializeLayers;\r\n\r\n        if (options.artwork.isSimpleDrawing()) {\r\n            serializeLayers = Promise.resolve(null);\r\n        } else {\r\n            serializeLayers = chiSave(options.artwork);\r\n        }\r\n\r\n        serializeLayers\r\n            .then(function (chibiResult) {\r\n                if (cancelled) {\r\n                    that.emitEvent(\"savingFailure\");\r\n                    return;\r\n                }\r\n\r\n                if (options.swatches) {\r\n                    var aco = new AdobeColorTable();\r\n\r\n                    swatchesBlob = new Blob([aco.write(options.swatches)], {\r\n                        type: \"application/octet-stream\",\r\n                    });\r\n                } else {\r\n                    swatchesBlob = null;\r\n                }\r\n\r\n                if (options.url) {\r\n                    let marker =\r\n                            \"This marker ensures the upload wasn't truncated\",\r\n                        formData = new FormData();\r\n\r\n                    formData.append(\"beginMarker\", marker);\r\n\r\n                    formData.append(\"painter\", \"ChickenPaint v2.0\");\r\n\r\n                    formData.append(\"picture\", flatBlob);\r\n                    flatBlob = null;\r\n\r\n                    if (chibiResult) {\r\n                        formData.append(\"chibifileFormat\", chibiResult.version);\r\n\r\n                        formData.append(\"chibifile\", chibiResult.bytes);\r\n                        chibiResult = null;\r\n\r\n                        // Layers will need to be rotated upon opening\r\n                        formData.append(\"rotation\", \"\" + options.rotation);\r\n                    } else {\r\n                        /*\r\n                         * Because the image is a flat PNG, we rotate it before we saved it and it doesn't need further\r\n                         * rotation upon opening.\r\n                         */\r\n                        formData.append(\"rotation\", \"0\");\r\n                    }\r\n\r\n                    if (swatchesBlob) {\r\n                        formData.append(\"swatches\", swatchesBlob);\r\n                        swatchesBlob = null;\r\n                    }\r\n\r\n                    formData.append(\"endMarker\", marker);\r\n\r\n                    postDrawing(formData);\r\n                } else {\r\n                    const saveFilename =\r\n                        \"oekaki_\" +\r\n                        new Date()\r\n                            .toISOString()\r\n                            .split(\".\")[0]\r\n                            .replace(/[^0-9]/g, \"_\");\r\n\r\n                    FileSaver.saveAs(flatBlob, saveFilename + \".png\");\r\n\r\n                    if (chibiResult) {\r\n                        FileSaver.saveAs(\r\n                            chibiResult.bytes,\r\n                            saveFilename + \".chi\"\r\n                        );\r\n                    }\r\n                    if (swatchesBlob) {\r\n                        FileSaver.saveAs(swatchesBlob, saveFilename + \".aco\");\r\n                    }\r\n                }\r\n            })\r\n            .catch(function (e) {\r\n                that.emitEvent(\"savingFailure\");\r\n            });\r\n    };\r\n\r\n    this.cancel = function () {\r\n        cancelled = true;\r\n    };\r\n}\r\n\r\nCPResourceSaver.prototype = Object.create(EventEmitter.prototype);\r\nCPResourceSaver.prototype.constructor = CPResourceSaver;\r\n",null,"/*\n* FileSaver.js\n* A saveAs() FileSaver implementation.\n*\n* By Eli Grey, http://eligrey.com\n*\n* License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)\n* source  : http://purl.eligrey.com/github/FileSaver.js\n*/\n\n// The one and only way of getting global scope in all environments\n// https://stackoverflow.com/q/3277182/1008999\nvar _global = typeof window === 'object' && window.window === window\n  ? window : typeof self === 'object' && self.self === self\n  ? self : typeof global === 'object' && global.global === global\n  ? global\n  : this\n\nfunction bom (blob, opts) {\n  if (typeof opts === 'undefined') opts = { autoBom: false }\n  else if (typeof opts !== 'object') {\n    console.warn('Deprecated: Expected third argument to be a object')\n    opts = { autoBom: !opts }\n  }\n\n  // prepend BOM for UTF-8 XML and text/* types (including HTML)\n  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n  if (opts.autoBom && /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n    return new Blob([String.fromCharCode(0xFEFF), blob], { type: blob.type })\n  }\n  return blob\n}\n\nfunction download (url, name, opts) {\n  var xhr = new XMLHttpRequest()\n  xhr.open('GET', url)\n  xhr.responseType = 'blob'\n  xhr.onload = function () {\n    saveAs(xhr.response, name, opts)\n  }\n  xhr.onerror = function () {\n    console.error('could not download file')\n  }\n  xhr.send()\n}\n\nfunction corsEnabled (url) {\n  var xhr = new XMLHttpRequest()\n  // use sync to avoid popup blocker\n  xhr.open('HEAD', url, false)\n  try {\n    xhr.send()\n  } catch (e) {}\n  return xhr.status >= 200 && xhr.status <= 299\n}\n\n// `a.click()` doesn't work for all browsers (#465)\nfunction click (node) {\n  try {\n    node.dispatchEvent(new MouseEvent('click'))\n  } catch (e) {\n    var evt = document.createEvent('MouseEvents')\n    evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80,\n                          20, false, false, false, false, 0, null)\n    node.dispatchEvent(evt)\n  }\n}\n\n// Detect WebView inside a native macOS app by ruling out all browsers\n// We just need to check for 'Safari' because all other browsers (besides Firefox) include that too\n// https://www.whatismybrowser.com/guides/the-latest-user-agent/macos\nvar isMacOSWebView = _global.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent)\n\nvar saveAs = _global.saveAs || (\n  // probably in some web worker\n  (typeof window !== 'object' || window !== _global)\n    ? function saveAs () { /* noop */ }\n\n  // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView\n  : ('download' in HTMLAnchorElement.prototype && !isMacOSWebView)\n  ? function saveAs (blob, name, opts) {\n    var URL = _global.URL || _global.webkitURL\n    var a = document.createElement('a')\n    name = name || blob.name || 'download'\n\n    a.download = name\n    a.rel = 'noopener' // tabnabbing\n\n    // TODO: detect chrome extensions & packaged apps\n    // a.target = '_blank'\n\n    if (typeof blob === 'string') {\n      // Support regular links\n      a.href = blob\n      if (a.origin !== location.origin) {\n        corsEnabled(a.href)\n          ? download(blob, name, opts)\n          : click(a, a.target = '_blank')\n      } else {\n        click(a)\n      }\n    } else {\n      // Support blobs\n      a.href = URL.createObjectURL(blob)\n      setTimeout(function () { URL.revokeObjectURL(a.href) }, 4E4) // 40s\n      setTimeout(function () { click(a) }, 0)\n    }\n  }\n\n  // Use msSaveOrOpenBlob as a second approach\n  : 'msSaveOrOpenBlob' in navigator\n  ? function saveAs (blob, name, opts) {\n    name = name || blob.name || 'download'\n\n    if (typeof blob === 'string') {\n      if (corsEnabled(blob)) {\n        download(blob, name, opts)\n      } else {\n        var a = document.createElement('a')\n        a.href = blob\n        a.target = '_blank'\n        setTimeout(function () { click(a) })\n      }\n    } else {\n      navigator.msSaveOrOpenBlob(bom(blob, opts), name)\n    }\n  }\n\n  // Fallback to using FileReader and a popup\n  : function saveAs (blob, name, opts, popup) {\n    // Open a popup immediately do go around popup blocker\n    // Mostly only available on user interaction and the fileReader is async so...\n    popup = popup || open('', '_blank')\n    if (popup) {\n      popup.document.title =\n      popup.document.body.innerText = 'downloading...'\n    }\n\n    if (typeof blob === 'string') return download(blob, name, opts)\n\n    var force = blob.type === 'application/octet-stream'\n    var isSafari = /constructor/i.test(_global.HTMLElement) || _global.safari\n    var isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent)\n\n    if ((isChromeIOS || (force && isSafari) || isMacOSWebView) && typeof FileReader !== 'undefined') {\n      // Safari doesn't allow downloading of blob URLs\n      var reader = new FileReader()\n      reader.onloadend = function () {\n        var url = reader.result\n        url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, 'data:attachment/file;')\n        if (popup) popup.location.href = url\n        else location = url\n        popup = null // reverse-tabnabbing #460\n      }\n      reader.readAsDataURL(blob)\n    } else {\n      var URL = _global.URL || _global.webkitURL\n      var url = URL.createObjectURL(blob)\n      if (popup) popup.location = url\n      else location.href = url\n      popup = null // reverse-tabnabbing #460\n      setTimeout(function () { URL.revokeObjectURL(url) }, 4E4) // 40s\n    }\n  }\n)\n\n_global.saveAs = saveAs.saveAs = saveAs\n\nif (typeof module !== 'undefined') {\n  module.exports = saveAs;\n}\n","import * as en from \"./en.json\";\nimport * as ja from \"./ja.json\";\n\nconst\n    languages = {\n        ja,\n        en\n    };\n\nlet\n    currentLang = en,\n    currentLangName = \"en\";\n\nexport function setLanguage(languageCode) {\n\t//取得した言語がja-jpなら、jaのみにする\n\tlanguageCode = languageCode.split(/[-_]/, 1)[0].toLowerCase();\n\n    if (languageCode in languages) {\n        currentLang = languages[languageCode];\n        currentLangName = languageCode;\n    } else {\n        currentLang = en;\n        currentLangName = \"en\";\n    }\n}\n\nexport function currentLanguage() {\n    return currentLangName;\n}\n\nexport function guessLanguage() {\n    try {\n        if (typeof navigator !== \"undefined\") {\n            let\n                navLanguages = navigator.languages;\n\n            if (!Array.isArray(navLanguages)) {\n                navLanguages = [navLanguages];\n            }\n            \n            for (let language of navLanguages) {\n                let\n                    matches = /^(..)([-_].+)?$/.exec(language);\n                \n                if (matches) {\n                    matches[1] = matches[1].toLowerCase();\n                    \n                    if (matches[1] in languages) {\n                        setLanguage(language);\n\n                        return;\n                    }\n                    \n                    if (matches[1] === \"en\") {\n                        setLanguage(\"en\");\n                        \n                        return;\n                    } \n                }\n            }\n        }\n    } catch (e) {\n        // We don't care about failures here because we're only doing this as a best-effort anyway\n        console.error(e);\n    }\n}\n\nexport function _(originalText) {\n    if (originalText in currentLang) {\n        return currentLang[originalText];\n    } \n    \n    return originalText;\n}","{\n  \"Dodge (tool)\": \"Dodge\",\n  \"Burn (tool)\": \"Burn\",\n  \"Color (picker)\": \"Color\",\n  \n  \"Color swatches (shorter)\": \"Swatches\"\n}","{\n    \"File\": \"ファイル\",\n    \"Save to my computer\": \"PCに保存\",\n    \"Post Oekaki\": \"画像を投稿\",\n\n    \"Edit\": \"編集\",\n    \"Undo\": \"取り消し\",\n    \"Redo\": \"やり直し\",\n    \"Cut\": \"切り取り\",\n    \"Copy\": \"コピー\",\n    \"Clear history\": \"履歴消去\",\n    \"Copy merged\": \"結合コピー\",\n    \"Paste\": \"貼り付け\",\n    \"Select all\": \"すべて選択\",\n    \"Deselect\": \"選択解除\",\n    \"Transform\": \"変形\",\n    \"Selection\": \"選択範囲\",\n    \"Constrain\": \"縦横比を維持\",\n\n    \"Layers\": \"レイヤー\",\n    \"Duplicate\": \"複製\",\n    \"Merge down\": \"下のレイヤーと結合\",\n    \"Merge group\": \"グループ結合\",\n    \"Merge all layers\": \"全レイヤー結合\",\n    \"Add Merged Layer\": \"結合レイヤーを追加\",\n    \"Add layer mask\": \"レイヤーマスク追加\",\n    \"Delete mask\": \"レイヤーマスク削除\",\n    \"Delete layer mask\": \"レイヤーマスク削除\",\n    \"Apply mask\": \"レイヤーマスク適用\",\n    \"Apply layer mask\": \"レイヤーマスク適用\",\n    \"Disable mask\": \"レイヤーマスク無効化\",\n    \"Enable mask\": \"レイヤーマスク有効化\",\n    \"Clip to the layer below\": \"下のレイヤーでクリッピング\",\n    \"Unclip from the layer below\": \"クリッピング解除\",\n\n    \"Effects\": \"効果\",\n    \"Clear\": \"消去\",\n    \"Fill\": \"塗り潰し\",\n    \"Flip horizontal\": \"左右反転\",\n    \"Flip vertical\": \"上下反転\",\n    \"Invert\": \"ネガポジ反転\",\n    \"Convert brightness to opacity\": \"輝度を透明度に変換\",\n    \"Box blur...\": \"ぼかし\",\n    \"Box blur\": \"ぼかし\",\n    \"Blur amount (pixels)\": \"ぼかし量(ピクセル単位)\",\n    \"Iterations (1-8, larger gives smoother blur)\": \"反復(1-8,大きいほどぼかしが滑らか)\",\n    \"Monochromatic noise\": \"単色ノイズ\",\n    \"Color noise\": \"カラーノイズ\",\n\n    \"View\": \"表示\",\n    \"Full-screen mode\": \"フルスクリーンモード\",\n    \"Zoom in\": \"拡大\",\n    \"Zoom out\": \"縮小\",\n    \"Zoom 100%\": \"100%\",\n    \"Reset Rotation\": \"回転をリセット\",\n    \"Smooth-out zoomed canvas\": \"ズームをなめらかに表示する\",\n    \"Show grid\": \"グリッドを表示\",\n    \"Grid options...\": \"グリッドの設定\",\n\n    \"Palettes\": \"パレット\",\n    \"Rearrange\": \"初期化\",\n    \"Toggle palettes\": \"表示非表示切り替え\",\n    \"Use old icons\": \"古いアイコン\",\n\n    \"Show tool options\": \"ツールオプション\",\n    \"Show color\": \"カラー\",\n    \"Show layers\": \"レイヤー\",\n    \"Show misc\": \"操作\",\n    \"Show stroke\": \"ストローク\",\n    \"Show swatches\": \"カラーセット\",\n    \"Show textures\": \"テクスチャ\",\n    \"Show tools\": \"ツール\",\n\n    \"Help\": \"ヘルプ\",\n    \"Tablet support\": \"タブレットサポート\",\n    \"Shortcuts\": \"ショートカット\",\n    \"About\": \"ChickenPaint Beについて\",\n\n    \"Removes all undo/redo information to regain memory\": \"履歴をクリアしてメモリを開放します\",\n    \"Clears the selected area\": \"消去\",\n    \"Invert the image colors\": \"ネガポジ反転\",\n    \"Blur effect\": \"ぼかしフィルタ\",\n    \"Fills the selection with noise\": \"単色ノイズで塗り潰し\",\n    \"Fills the selection with colored noise\": \"カラーノイズで塗り潰し\",\n    \"Linear interpolation is used to give a smoothed looked to the picture when zoomed in\": \"画像の拡大時に補完して滑らかに表示します\",\n    \"Rearrange the palette windows\": \"パレットを再配置\",\n    \"Hides or shows all palettes\": \"パレットの表示/非表示\",\n\n    \"You're about to clear the current Undo/Redo history.\\nThis operation cannot be undone, are you sure you want to do that?\": \"アンドゥ・リドゥの履歴を消去しようとしています。\\nこの操作は元に戻すことができません。本当に実行しますか?\",\n\n    \"Misc\": \"操作\",\n\n    \"Round Pixelated\": \"円ピクセル\",\n    \"Round Hard Edge\": \"円ハードエッジ\",\n    \"Round Soft\": \"円ソフト\",\n    \"Square Pixelated\": \"角ピクセル\",\n    \"Square Hard Edge\": \"角ハードエッジ\",\n\n    \"Color (picker)\": \"カラー\",\n\n    \"Tool options\": \"ツールオプション\",\n    \"Brush size\": \"ブラシサイズ\",\n    \"Opacity\": \"不透明度\",\n    \"Color\": \"色補充\",\n    \"Blend\": \"混色\",\n    \"Spacing\": \"間隔\",\n    \"Scattering\": \"散乱\",\n    \"Smoothing\": \"手ぶれ補正\",\n\n    \"Rotation\": \"角度\",\n\n    \"Color swatches\": \"カラーセット\",\n    \"Color swatches (shorter)\": \"カラーセット\",\n    \"Remove\": \"削除\",\n    \"Replace with current color\": \"選択中の色に置き換え\",\n    \"Save swatches to your computer...\": \"カラーセットをPCに保存\",\n    \"Load swatches from your computer...\": \"カラーセットをPCから読み込み\",\n    \"Add the current brush color as a new swatch\": \"選択中の色を追加\",\n\n    \"Sample all layers\": \"全レイヤー混合\",\n    \"Lock transparency\": \"透明部分を保護\",\n\n    \"Textures\": \"テクスチャ\",\n    \"Customize\": \"カスタマイズ\",\n    \"Inverse\": \"ネガポジ反転\",\n    \"Mirror\": \"左右反転\",\n    \"Brightness\": \"輝度\",\n    \"Contrast\": \"コントラスト\",\n    \"Reset\": \"リセット\",\n\n    \"Layer blending mode\": \"合成モード\",\n    \"Normal\": \"通常\",\n    \"Multiply\": \"乗算\",\n    \"Add\": \"加算\",\n    \"Screen\": \"スクリーン\",\n    \"Lighten\": \"比較(明)\",\n    \"Darken\": \"比較(暗)\",\n    \"Subtract\": \"減算\",\n    \"Dodge\": \"覆い焼き\",\n    \"Burn\": \"焼き込み\",\n    \"Overlay\": \"オーバーレイ\",\n    \"Hard Light\": \"ハードライト\",\n    \"Soft Light\": \"ソフトライト\",\n    \"Vivid Light\": \"ビビッドライト\",\n    \"Linear Light\": \"リニアライト\",\n    \"Pin Light\": \"ピンライト\",\n    \"Passthrough\": \"通過\",\n\n    \"Stroke\": \"ストローク\",\n    \"Free-hand\": \"フリーハンド\",\n    \"Straight line\": \"直線\",\n    \"Bezier curve\": \"Bz（ベジェ）曲線\",\n\n    \"Tools\": \"ツール\",\n    \"Marquee\": \"選択範囲\",\n    \"Move tool\": \"移動\",\n    \"Flood fill\": \"塗り潰し\",\n    \"Gradient fill\": \"グラデーション\",\n    \"Color picker\": \"スポイト\",\n    \"Rotate canvas\": \"キャンバスの回転\",\n    \"Grab canvas\": \"キャンバスの位置\",\n    \"Pencil\": \"鉛筆\",\n    \"Pen\": \"ペン\",\n    \"Airbrush\": \"エアブラシ\",\n    \"Waterpaint\": \"水彩\",\n    \"Eraser\": \"消しゴム\",\n    \"Soft eraser\": \"薄消し\",\n    \"Smudge\": \"指先\",\n    \"Blender\": \"混色\",\n    \"Dodge (tool)\": \"覆い焼き\",\n    \"Burn (tool)\": \"焼き込み\",\n    \"Blur\": \"ぼかし\",\n\n    \"Grid options\": \"グリッドの設定\",\n    \"Grid size\": \"グリッドサイズ\",\n\n    \"Rename...\": \"名前を変更\",\n    \"Add layer\": \"新規レイヤー\",\n    \"Delete layer\": \"レイヤー削除\",\n    \"Add group\": \"新規グループ\",\n    \"Delete group\": \"グループ削除\",\n    \"Add mask\": \"レイヤーマスク追加\",\n\n    \"Gradient\": \"グラデーション作成\",\n    \"Zoom and Rotate\": \"ズームと回転\",\n    \"Reset View\": \"表示を初期化\",\n    \"Transform style\": \"変形スタイル\",\n    \"Apply transform\": \"変形確定\",\n    \"Complete transform\": \"変形を完了\",\n    \"Undo transform\": \"取り消し\",\n    \"You need to finish transforming this layer before you can do that. What would you like to do with the transform?\": \"続行するために変形を完了します。\",\n    \"Smooth\": \"スムーズ\",\n    \"Sharp\": \"シャープ\",\n    \"Opacity: \": \"不透明度:\",\n\n    \"Please enter a color in hex format\": \"16進形式で色を入力してください（#xxxxxxの形）\",\n\n    \"Cancel\": \"キャンセル\",\n    \"Ok\": \"OK\",\n    \"Okay\": \"OK\",\n    \"OK\": \"OK\",\n\n    \"Whoops! This layer is currently hidden\": \"非表示レイヤーです。\",\n    \"Whoops! This layer's opacity is currently 0%\": \"レイヤーの不透明度が0%です\",\n    \"Whoops! You can't draw on a group\": \"グループフォルダには描けません\",\n    \"Whoops! All of the selected pixels are transparent!\": \"レイヤーが空です\",\n\n    \"Image\": \"画像\",\n    \"Layer mask\": \"レイヤーマスク\",\n\n    \"Sorry, you can't remove the last remaining layer in the drawing.\": \"最後の1つなので削除できません。\",\n\n    \"Are you sure you want to send your drawing to the server and finish drawing now?\": \"画像をサーバーに送信します。終了してもよろしいですか？\",\n    \"Your drawing has unsaved changes! Are you sure to want to navigate away?\": \"画像に未保存の変更があります。終了してもよろしいですか？\",\n\n    \"Many of the menu options and painting tools have keyboard shortcuts which are written next to them or appear when you hover.\": \"利用可能なキーボードショートカットのいくつかはメニューの横やツールチップに表示されています。\",\n\n    \"Here are some other shortcuts which are not as obvious!\": \"この一覧はそれ以外のショートカットをまとめたものです。\",\n\n    \"Right\": \"右\",\n    \"Left\": \"左\",\n    \"Middle\": \"中\",\n    \"or\": \"または\",\n    \"Double click\": \"ダブルクリック\",\n\n    \"Color swatches palette\": \"カラーセット\",\n    \"Use as the drawing color\": \"パレットの色を取得\",\n    \"Remove or replace a color swatch\": \"パレットの変更･削除\",\n\n    \"Line drawing mode\": \"直線モード\",\n    \"Snap line to nearest 45 degrees\": \"45°単位でスナップ\",\n\n    \"Painting tools\": \"ツール\",\n    \"Change brush opacity\": \"ブラシの不透明度\",\n    \"Change brush size\": \"ブラシサイズ\",\n\n    \"Brush palette\": \"ブラシパレット\",\n    \"Adjust brush sliders more precisely\": \"ブラシスライダーをより細かく調整\",\n\n    \"Drawing canvas\": \"キャンバス\",\n\n    \"Move the canvas around\": \"キャンバスの移動\",\n    \"Rotate the canvas\": \"キャンバスの回転\",\n    \"Zoom\": \"ズーム\",\n    \"Zoom the canvas\": \"キャンバスの拡大縮小\",\n    \"Sample the color under the cursor\": \"キャンバスの色をスポイト\",\n    \"Flip View Horizontal\": \"表示の左右反転\",\n    \"Layers palette\": \"レイヤーパレット\",\n    \"Rename layer\": \"レイヤー名変更\",\n    \"Toggle mask enable/disable\": \"マスクの有効/無効切り替え\",\n    \"Toggle mask View\": \"マスクの表示/非表示切り替え\",\n\n    \"Save Oekaki\": \"保存\",\n\n    \"Saving drawing...\": \"画像を保存中…\",\n    \"Preparing your drawing to be saved, please wait...\": \"画像を保存する準備をしています。しばらくお待ちください…\",\n    \"Drawing saved!\": \"画像を保存しました！\",\n\n    \"Your drawing has been saved, would you like to post it to the forum now?\": \"画像の保存に成功しました。フォーラムへ投稿しますか？\",\n    \"Yes, post it now\": \"はい、投稿します\",\n    \"No, keep drawing\": \"まだ描きます\",\n    \"No, quit and I'll finish it later\": \"アプリを終了して続きを後で描く\",\n\n    \"Your drawing has been saved, would you like to view it on the forum now?\": \"画像の保存に成功しました。フォーラムへ投稿しますか？\",\n    \"Yes, view the post\": \"はい、投稿します。\",\n\n    \"Your drawing has been saved, redirecting you to view your new post now...\": \"画像の保存に成功しました。投稿先に移動します。\",\n\n    \"Sorry, your drawing could not be saved, Please see the error message.\": \"画像を保存できませんでした。エラーメッセージをご確認ください。\",\n    \"Sorry, your drawing could not be saved, please try again later.\": \"画像を保存できませんでした。時間を置いて再度投稿してみてください。\",\n\n    \"The error returned from the server was\": \"サーバーから返って来たエラー\",\n\n    \"The file size exceeds the server limit.\": \"ファイルサイズがサーバーの上限を超えています。\",\n\n    \"The total size of FormData is within the acceptable range.\": \"FormDataの合計サイズは制限範囲内です。\",\n\n    \"Limit size\": \"上限サイズ\",\n    \"Current size\": \"現在のサイズ\",\n\n    \"Network response was not OK\": \"通信エラー\",\n    \"HTTP status code\": \"HTTPステータスコード\"\n}\n","export default function CPSplashScreen(uiParent, loader, resourcesRoot) {\n    const\n        MAX_SMOOTHIE_OFFSET = 170;\n\n    var\n        canvas = document.createElement(\"canvas\"),\n        canvasContext = canvas.getContext(\"2d\"),\n\n        cup = new Image(),\n        lid = new Image(),\n        outlines = new Image(),\n        text = new Image(),\n\n        shading = new Image(),\n        highlights = new Image(),\n        smoothie = new Image(),\n\n        images = [cup, lid, outlines, text, shading, highlights, smoothie],\n        loadedCount = 0,\n\n        cupComposite, smoothieComposite,\n        cupCompositeContext, smoothieCompositeContext,\n\n        progress = 0.0,\n        message = \"\",\n\n        fontHeight = 14;\n\n    var imageRoot = resourcesRoot + \"splash/\";\n\n    for (var i = 0; i < images.length; i++) {\n        images[i].onload = function() {\n            loadedCount++;\n\n            if (loadedCount == images.length) {\n                repaint();\n            }\n        }\n    }\n\n    cup.src = imageRoot + \"cup.png\";\n    highlights.src = imageRoot + \"highlights.png\";\n    lid.src = imageRoot + \"lid.png\";\n    outlines.src = imageRoot + \"lines.png\";\n    shading.src = imageRoot + \"shading.png\";\n    smoothie.src = imageRoot + \"smoothie.png\";\n    text.src = imageRoot + \"text.png\";\n\n    function buildSmoothieComposite(imgWidth, imgHeight, progress) {\n        if (!smoothieComposite) {\n            smoothieComposite = document.createElement(\"canvas\");\n\n            smoothieComposite.width = imgWidth;\n            smoothieComposite.height = imgHeight;\n\n            smoothieCompositeContext = smoothieComposite.getContext(\"2d\");\n        }\n\n        // First draw the smoothie in its mask position:\n        smoothieCompositeContext.globalCompositeOperation = \"copy\";\n        smoothieCompositeContext.drawImage(smoothie, 0, 0);\n\n        // Now shift the smoothie downwards and use the original position as a mask\n        smoothieCompositeContext.globalCompositeOperation = \"source-in\";\n        smoothieCompositeContext.drawImage(smoothie, 0, Math.round(progress * MAX_SMOOTHIE_OFFSET));\n    }\n\n    function buildCupComposite(imgWidth, imgHeight, progress) {\n        if (!cupComposite) {\n            cupComposite = document.createElement(\"canvas\");\n\n            cupComposite.width = imgWidth;\n            cupComposite.height = imgHeight;\n\n            cupCompositeContext = cupComposite.getContext(\"2d\");\n        }\n\n        cupCompositeContext.globalCompositeOperation = \"copy\";\n        cupCompositeContext.drawImage(cup, 0, 0);\n\n        buildSmoothieComposite(imgWidth, imgHeight, progress);\n\n        cupCompositeContext.globalCompositeOperation = \"source-over\";\n        cupCompositeContext.drawImage(smoothieComposite, 0, 0);\n\n        cupCompositeContext.drawImage(lid, 0, 0);\n\n        cupCompositeContext.globalCompositeOperation = \"screen\";\n        cupCompositeContext.drawImage(highlights, 0, 0);\n\n        cupCompositeContext.globalCompositeOperation = \"multiply\";\n        cupCompositeContext.drawImage(shading, 0, 0);\n\n        return cupComposite;\n    }\n\n    function repaint() {\n        var\n            centerX = canvas.width / 2,\n            centerY = canvas.height / 2;\n\n        canvasContext.fillStyle = 'white';\n        canvasContext.fillRect(0, 0, canvas.width, canvas.height);\n\n        if (loadedCount == images.length) {\n            var\n                imgWidth = text.width,\n                imgHeight = text.height,\n                left = Math.round(centerX - imgWidth / 2),\n                top = Math.round(centerY - imgHeight / 2);\n\n            canvasContext.drawImage(text, left, top);\n\n            buildCupComposite(imgWidth, imgHeight, progress);\n\n            //The whole cup composite is slightly transparent\n            canvasContext.globalAlpha = 0.88;\n            canvasContext.drawImage(cupComposite, left, top);\n\n            canvasContext.globalAlpha = 1.0;\n\n            canvasContext.drawImage(outlines, left, top);\n\n            centerY = Math.round(centerY + imgHeight / 2 + 2);\n        }\n\n        if (message != \"\") {\n            canvasContext.fillStyle = \"black\";\n\n            var\n                lines = message.split(\"\\n\");\n\n            for (var i = 0; i < lines.length; i++) {\n                var\n                    line = lines[i],\n                    lineWidth = canvasContext.measureText(line).width;\n\n                centerY += fontHeight * 2;\n\n                canvasContext.fillText(line, centerX - lineWidth / 2, centerY);\n            }\n        }\n    }\n\n    function resize() {\n        // Use the canvas dimensions set by the CSS styles\n        canvas.width = canvas.clientWidth;\n        canvas.height = canvas.clientHeight;\n\n        canvasContext.font = fontHeight + \"pt sans-serif\";\n\n        repaint();\n    }\n\n    loader.on(\"loadingProgress\", function(_progress, _message) {\n        progress = _progress;\n        message = _message;\n\n        repaint();\n    });\n\n    loader.on(\"loadingFailure\", function(_message) {\n        progress = 0;\n        message = _message;\n\n        repaint();\n    });\n\n    loader.on(\"loadingComplete\", function() {\n        window.removeEventListener(\"resize\", resize);\n        uiParent.removeChild(canvas);\n    });\n\n    window.addEventListener(\"resize\", resize);\n\n    canvas.className = \"chickenpaint-splash-screen\";\n\n    uiParent.appendChild(canvas);\n\n    resize();\n}\n","/*\n    ChickenPaint\n    \n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\n    by Nicholas Sherlock / Chicken Smoothie.\n    \n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n    ChickenPaint is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ChickenPaint is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport * as bootstrap from \"bootstrap/dist/js/bootstrap.bundle.min.js\";\n\nimport CPCanvas from \"./CPCanvas.js\";\nimport CPPaletteManager from \"./CPPaletteManager.js\";\nimport CPMainMenu from \"./CPMainMenu.js\";\n\nimport EventEmitter from \"wolfy87-eventemitter\";\n\nexport default function CPMainGUI(controller, uiElem) {\n    let lowerArea = document.createElement(\"div\"),\n        canvas = new CPCanvas(controller),\n        paletteManager = new CPPaletteManager(controller),\n        menuBar,\n        fullScreenMode = false,\n        that = this;\n\n    this.togglePalettes = function () {\n        paletteManager.togglePalettes();\n    };\n\n    this.arrangePalettes = function () {\n        // Give the browser a chance to do the sizing of the palettes before we try to rearrange them\n        setTimeout(paletteManager.arrangePalettes.bind(paletteManager), 0);\n    };\n\n    this.constrainPalettes = function () {\n        paletteManager.constrainPalettes();\n    };\n\n    this.showPalette = function (paletteName, show) {\n        paletteManager.showPaletteByName(paletteName, show);\n    };\n\n    this.getSwatches = function () {\n        return paletteManager.palettes.swatches.getSwatches();\n    };\n\n    this.setSwatches = function (swatches) {\n        paletteManager.palettes.swatches.setSwatches(swatches);\n    };\n\n    this.getPaletteManager = function () {\n        return paletteManager;\n    };\n\n    /**\n     *\n     * @param {number} rotation - in 90 degree increments\n     */\n    this.setRotation90 = function (rotation) {\n        canvas.setRotation((rotation * Math.PI) / 2);\n        paletteManager.palettes.layers.setRotation90(rotation);\n    };\n\n    this.setFullScreenMode = function (value) {\n        if (fullScreenMode !== value) {\n            fullScreenMode = value;\n\n            that.resize();\n            that.arrangePalettes();\n        }\n    };\n\n    this.resize = function (doConstrain = true) {\n        let newHeight;\n\n        let windowHeight = window.innerHeight,\n            menuBarHeight = menuBar.getElement().getBoundingClientRect().height;\n\n        if (fullScreenMode) {\n            newHeight = windowHeight - menuBarHeight;\n        } else {\n            newHeight = Math.min(\n                Math.max(windowHeight - menuBarHeight - 65, 500),\n                850\n            );\n        }\n\n        canvas.resize(newHeight, false);\n        if( doConstrain ) {// パレットの再配置を行う\n            that.constrainPalettes();\n        }\n    };\n\n    menuBar = new CPMainMenu(controller, this);\n\n    this.getMainMenu = function () {\n        return menuBar;\n    };\n\n    uiElem.appendChild(menuBar.getElement());\n\n    lowerArea.className = \"chickenpaint-main-section\";\n\n    lowerArea.appendChild(canvas.getElement());\n    lowerArea.appendChild(paletteManager.getElement());\n\n    uiElem.appendChild(lowerArea);\n\n    canvas.on(\"canvasRotated90\", function (newAngle) {\n        paletteManager.palettes.layers.setRotation90(newAngle);\n    });\n\n    // デバイスの向きの変更時にパレットの配置を初期化\n    if (screen.orientation) {\n        //非対応ブラウザ対策\n        screen.orientation.addEventListener(\"change\", (e) => {\n            //何通りも、試してどれかが有効になる事を期待\n            this.resize();\n            // パレット初期化\n            controller.actionPerformed({ action: \"CPArrangePalettes\" });\n            setTimeout(() => {\n                this.resize();\n                // パレット初期化\n                controller.actionPerformed({ action: \"CPArrangePalettes\" });\n            }, 10);\n            Promise.resolve()\n                .then(() => {\n                    this.resize();\n                })\n                .then(() => {\n                    // パレット初期化\n                    controller.actionPerformed({ action: \"CPArrangePalettes\" });\n                });\n        });\n    }\n    // ハンバガーメニューとモーダルの二重表示防止\n    const collapseElement = document.getElementById(\n        \"chickenpaint-main-menu-content\"\n    );\n    document.addEventListener(\"show.bs.modal\", () => {\n        // chickenpaint-main-menu-contentのIDを持つcollapse要素を閉じる\n        if (collapseElement && collapseElement.classList.contains(\"show\")) {\n            const bsCollapse = new bootstrap.Collapse(collapseElement, {\n                toggle: false, // すでに閉じている場合のエラーを防ぐ\n            });\n            bsCollapse.hide();\n        }\n    });\n    if (collapseElement) {\n        const WidgetNav = document.querySelector(\".chickenpaint .widget-nav\");\n        if (WidgetNav) {\n            collapseElement.addEventListener(\"show.bs.collapse\", (e) => {\n                //ハンバガーメニューを表示する時に\n                // .navbar-nav を非表示にする\n                WidgetNav.classList.add(\"hidden\");\n            });\n            collapseElement.addEventListener(\"hidden.bs.collapse\", (e) => {\n                //ハンバガーメニューを閉じる時に\n                // .navbar-nav を表示する\n                WidgetNav.classList.remove(\"hidden\");\n            });\n        }\n        window.addEventListener(\"resize\", () => {\n            // .navbar-nav を表示する\n            WidgetNav?.classList.remove(\"hidden\");\n        });\n    }\n\n    //Bootstrap5のコラプスでメニューバーが閉じる時にリサイズする\n    document.addEventListener(\"hidden.bs.collapse\", this.resize.bind(this));\n    window.addEventListener(\"resize\", this.resize.bind(this));\n\n    let lastScrollbarVisible = null;\n    let resizeScheduled = false;\n\n    //縦スクロールバーの表示を監視してリサイズする\n    const observer = new ResizeObserver(() => {\n        const scrollbarVisible = window.innerWidth > document.documentElement.clientWidth;\n\n        if (scrollbarVisible !== lastScrollbarVisible) {\n            lastScrollbarVisible = scrollbarVisible;\n            // console.log('Scrollbar visibility changed:', scrollbarVisible);\n            if (!resizeScheduled) {\n                resizeScheduled = true;\n                requestAnimationFrame(() => {\n                    resizeScheduled = false;\n                    //doConstrain = false\n                    //キャンバスのリサイズは行うがパレットの再配置は行わない\n                    this.resize(false);\n                });\n            }\n        }\n    });\n    observer.observe(document.body);\n\n    controller.on(\"fullScreen\", (fullscreen) =>\n        this.setFullScreenMode(fullscreen)\n    );\n\n    controller.on(\"unsavedChanges\", (unsaved) => {\n        uiElem.classList.toggle(\"chickenpaint-unsaved\", unsaved);\n    });\n\n    setTimeout(this.resize.bind(this), 0);\n}\n\nCPMainGUI.prototype = Object.create(EventEmitter.prototype);\nCPMainGUI.prototype.constructor = CPMainGUI;\n",null,"/**\n * --------------------------------------------------------------------------\n * Bootstrap dom/data.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n/**\n * Constants\n */\n\nconst elementMap = new Map()\n\nexport default {\n  set(element, key, instance) {\n    if (!elementMap.has(element)) {\n      elementMap.set(element, new Map())\n    }\n\n    const instanceMap = elementMap.get(element)\n\n    // make it clear we only want one instance per element\n    // can be removed later when multiple key/instances are fine to be used\n    if (!instanceMap.has(key) && instanceMap.size !== 0) {\n      // eslint-disable-next-line no-console\n      console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(instanceMap.keys())[0]}.`)\n      return\n    }\n\n    instanceMap.set(key, instance)\n  },\n\n  get(element, key) {\n    if (elementMap.has(element)) {\n      return elementMap.get(element).get(key) || null\n    }\n\n    return null\n  },\n\n  remove(element, key) {\n    if (!elementMap.has(element)) {\n      return\n    }\n\n    const instanceMap = elementMap.get(element)\n\n    instanceMap.delete(key)\n\n    // free up element references if there are no instances left for an element\n    if (instanceMap.size === 0) {\n      elementMap.delete(element)\n    }\n  }\n}\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap util/index.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nconst MAX_UID = 1_000_000\nconst MILLISECONDS_MULTIPLIER = 1000\nconst TRANSITION_END = 'transitionend'\n\n/**\n * Properly escape IDs selectors to handle weird IDs\n * @param {string} selector\n * @returns {string}\n */\nconst parseSelector = selector => {\n  if (selector && window.CSS && window.CSS.escape) {\n    // document.querySelector needs escaping to handle IDs (html5+) containing for instance /\n    selector = selector.replace(/#([^\\s\"#']+)/g, (match, id) => `#${CSS.escape(id)}`)\n  }\n\n  return selector\n}\n\n// Shout-out Angus Croll (https://goo.gl/pxwQGp)\nconst toType = object => {\n  if (object === null || object === undefined) {\n    return `${object}`\n  }\n\n  return Object.prototype.toString.call(object).match(/\\s([a-z]+)/i)[1].toLowerCase()\n}\n\n/**\n * Public Util API\n */\n\nconst getUID = prefix => {\n  do {\n    prefix += Math.floor(Math.random() * MAX_UID)\n  } while (document.getElementById(prefix))\n\n  return prefix\n}\n\nconst getTransitionDurationFromElement = element => {\n  if (!element) {\n    return 0\n  }\n\n  // Get transition-duration of the element\n  let { transitionDuration, transitionDelay } = window.getComputedStyle(element)\n\n  const floatTransitionDuration = Number.parseFloat(transitionDuration)\n  const floatTransitionDelay = Number.parseFloat(transitionDelay)\n\n  // Return 0 if element or transition duration is not found\n  if (!floatTransitionDuration && !floatTransitionDelay) {\n    return 0\n  }\n\n  // If multiple durations are defined, take the first\n  transitionDuration = transitionDuration.split(',')[0]\n  transitionDelay = transitionDelay.split(',')[0]\n\n  return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER\n}\n\nconst triggerTransitionEnd = element => {\n  element.dispatchEvent(new Event(TRANSITION_END))\n}\n\nconst isElement = object => {\n  if (!object || typeof object !== 'object') {\n    return false\n  }\n\n  if (typeof object.jquery !== 'undefined') {\n    object = object[0]\n  }\n\n  return typeof object.nodeType !== 'undefined'\n}\n\nconst getElement = object => {\n  // it's a jQuery object or a node element\n  if (isElement(object)) {\n    return object.jquery ? object[0] : object\n  }\n\n  if (typeof object === 'string' && object.length > 0) {\n    return document.querySelector(parseSelector(object))\n  }\n\n  return null\n}\n\nconst isVisible = element => {\n  if (!isElement(element) || element.getClientRects().length === 0) {\n    return false\n  }\n\n  const elementIsVisible = getComputedStyle(element).getPropertyValue('visibility') === 'visible'\n  // Handle `details` element as its content may falsie appear visible when it is closed\n  const closedDetails = element.closest('details:not([open])')\n\n  if (!closedDetails) {\n    return elementIsVisible\n  }\n\n  if (closedDetails !== element) {\n    const summary = element.closest('summary')\n    if (summary && summary.parentNode !== closedDetails) {\n      return false\n    }\n\n    if (summary === null) {\n      return false\n    }\n  }\n\n  return elementIsVisible\n}\n\nconst isDisabled = element => {\n  if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n    return true\n  }\n\n  if (element.classList.contains('disabled')) {\n    return true\n  }\n\n  if (typeof element.disabled !== 'undefined') {\n    return element.disabled\n  }\n\n  return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false'\n}\n\nconst findShadowRoot = element => {\n  if (!document.documentElement.attachShadow) {\n    return null\n  }\n\n  // Can find the shadow root otherwise it'll return the document\n  if (typeof element.getRootNode === 'function') {\n    const root = element.getRootNode()\n    return root instanceof ShadowRoot ? root : null\n  }\n\n  if (element instanceof ShadowRoot) {\n    return element\n  }\n\n  // when we don't find a shadow root\n  if (!element.parentNode) {\n    return null\n  }\n\n  return findShadowRoot(element.parentNode)\n}\n\nconst noop = () => {}\n\n/**\n * Trick to restart an element's animation\n *\n * @param {HTMLElement} element\n * @return void\n *\n * @see https://www.harrytheo.com/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation\n */\nconst reflow = element => {\n  element.offsetHeight // eslint-disable-line no-unused-expressions\n}\n\nconst getjQuery = () => {\n  if (window.jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {\n    return window.jQuery\n  }\n\n  return null\n}\n\nconst DOMContentLoadedCallbacks = []\n\nconst onDOMContentLoaded = callback => {\n  if (document.readyState === 'loading') {\n    // add listener on the first call when the document is in loading state\n    if (!DOMContentLoadedCallbacks.length) {\n      document.addEventListener('DOMContentLoaded', () => {\n        for (const callback of DOMContentLoadedCallbacks) {\n          callback()\n        }\n      })\n    }\n\n    DOMContentLoadedCallbacks.push(callback)\n  } else {\n    callback()\n  }\n}\n\nconst isRTL = () => document.documentElement.dir === 'rtl'\n\nconst defineJQueryPlugin = plugin => {\n  onDOMContentLoaded(() => {\n    const $ = getjQuery()\n    /* istanbul ignore if */\n    if ($) {\n      const name = plugin.NAME\n      const JQUERY_NO_CONFLICT = $.fn[name]\n      $.fn[name] = plugin.jQueryInterface\n      $.fn[name].Constructor = plugin\n      $.fn[name].noConflict = () => {\n        $.fn[name] = JQUERY_NO_CONFLICT\n        return plugin.jQueryInterface\n      }\n    }\n  })\n}\n\nconst execute = (possibleCallback, args = [], defaultValue = possibleCallback) => {\n  return typeof possibleCallback === 'function' ? possibleCallback.call(...args) : defaultValue\n}\n\nconst executeAfterTransition = (callback, transitionElement, waitForTransition = true) => {\n  if (!waitForTransition) {\n    execute(callback)\n    return\n  }\n\n  const durationPadding = 5\n  const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding\n\n  let called = false\n\n  const handler = ({ target }) => {\n    if (target !== transitionElement) {\n      return\n    }\n\n    called = true\n    transitionElement.removeEventListener(TRANSITION_END, handler)\n    execute(callback)\n  }\n\n  transitionElement.addEventListener(TRANSITION_END, handler)\n  setTimeout(() => {\n    if (!called) {\n      triggerTransitionEnd(transitionElement)\n    }\n  }, emulatedDuration)\n}\n\n/**\n * Return the previous/next element of a list.\n *\n * @param {array} list    The list of elements\n * @param activeElement   The active element\n * @param shouldGetNext   Choose to get next or previous element\n * @param isCycleAllowed\n * @return {Element|elem} The proper element\n */\nconst getNextActiveElement = (list, activeElement, shouldGetNext, isCycleAllowed) => {\n  const listLength = list.length\n  let index = list.indexOf(activeElement)\n\n  // if the element does not exist in the list return an element\n  // depending on the direction and if cycle is allowed\n  if (index === -1) {\n    return !shouldGetNext && isCycleAllowed ? list[listLength - 1] : list[0]\n  }\n\n  index += shouldGetNext ? 1 : -1\n\n  if (isCycleAllowed) {\n    index = (index + listLength) % listLength\n  }\n\n  return list[Math.max(0, Math.min(index, listLength - 1))]\n}\n\nexport {\n  defineJQueryPlugin,\n  execute,\n  executeAfterTransition,\n  findShadowRoot,\n  getElement,\n  getjQuery,\n  getNextActiveElement,\n  getTransitionDurationFromElement,\n  getUID,\n  isDisabled,\n  isElement,\n  isRTL,\n  isVisible,\n  noop,\n  onDOMContentLoaded,\n  parseSelector,\n  reflow,\n  triggerTransitionEnd,\n  toType\n}\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap dom/event-handler.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport { getjQuery } from '../util/index.js'\n\n/**\n * Constants\n */\n\nconst namespaceRegex = /[^.]*(?=\\..*)\\.|.*/\nconst stripNameRegex = /\\..*/\nconst stripUidRegex = /::\\d+$/\nconst eventRegistry = {} // Events storage\nlet uidEvent = 1\nconst customEvents = {\n  mouseenter: 'mouseover',\n  mouseleave: 'mouseout'\n}\n\nconst nativeEvents = new Set([\n  'click',\n  'dblclick',\n  'mouseup',\n  'mousedown',\n  'contextmenu',\n  'mousewheel',\n  'DOMMouseScroll',\n  'mouseover',\n  'mouseout',\n  'mousemove',\n  'selectstart',\n  'selectend',\n  'keydown',\n  'keypress',\n  'keyup',\n  'orientationchange',\n  'touchstart',\n  'touchmove',\n  'touchend',\n  'touchcancel',\n  'pointerdown',\n  'pointermove',\n  'pointerup',\n  'pointerleave',\n  'pointercancel',\n  'gesturestart',\n  'gesturechange',\n  'gestureend',\n  'focus',\n  'blur',\n  'change',\n  'reset',\n  'select',\n  'submit',\n  'focusin',\n  'focusout',\n  'load',\n  'unload',\n  'beforeunload',\n  'resize',\n  'move',\n  'DOMContentLoaded',\n  'readystatechange',\n  'error',\n  'abort',\n  'scroll'\n])\n\n/**\n * Private methods\n */\n\nfunction makeEventUid(element, uid) {\n  return (uid && `${uid}::${uidEvent++}`) || element.uidEvent || uidEvent++\n}\n\nfunction getElementEvents(element) {\n  const uid = makeEventUid(element)\n\n  element.uidEvent = uid\n  eventRegistry[uid] = eventRegistry[uid] || {}\n\n  return eventRegistry[uid]\n}\n\nfunction bootstrapHandler(element, fn) {\n  return function handler(event) {\n    hydrateObj(event, { delegateTarget: element })\n\n    if (handler.oneOff) {\n      EventHandler.off(element, event.type, fn)\n    }\n\n    return fn.apply(element, [event])\n  }\n}\n\nfunction bootstrapDelegationHandler(element, selector, fn) {\n  return function handler(event) {\n    const domElements = element.querySelectorAll(selector)\n\n    for (let { target } = event; target && target !== this; target = target.parentNode) {\n      for (const domElement of domElements) {\n        if (domElement !== target) {\n          continue\n        }\n\n        hydrateObj(event, { delegateTarget: target })\n\n        if (handler.oneOff) {\n          EventHandler.off(element, event.type, selector, fn)\n        }\n\n        return fn.apply(target, [event])\n      }\n    }\n  }\n}\n\nfunction findHandler(events, callable, delegationSelector = null) {\n  return Object.values(events)\n    .find(event => event.callable === callable && event.delegationSelector === delegationSelector)\n}\n\nfunction normalizeParameters(originalTypeEvent, handler, delegationFunction) {\n  const isDelegated = typeof handler === 'string'\n  // TODO: tooltip passes `false` instead of selector, so we need to check\n  const callable = isDelegated ? delegationFunction : (handler || delegationFunction)\n  let typeEvent = getTypeEvent(originalTypeEvent)\n\n  if (!nativeEvents.has(typeEvent)) {\n    typeEvent = originalTypeEvent\n  }\n\n  return [isDelegated, callable, typeEvent]\n}\n\nfunction addHandler(element, originalTypeEvent, handler, delegationFunction, oneOff) {\n  if (typeof originalTypeEvent !== 'string' || !element) {\n    return\n  }\n\n  let [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction)\n\n  // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position\n  // this prevents the handler from being dispatched the same way as mouseover or mouseout does\n  if (originalTypeEvent in customEvents) {\n    const wrapFunction = fn => {\n      return function (event) {\n        if (!event.relatedTarget || (event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget))) {\n          return fn.call(this, event)\n        }\n      }\n    }\n\n    callable = wrapFunction(callable)\n  }\n\n  const events = getElementEvents(element)\n  const handlers = events[typeEvent] || (events[typeEvent] = {})\n  const previousFunction = findHandler(handlers, callable, isDelegated ? handler : null)\n\n  if (previousFunction) {\n    previousFunction.oneOff = previousFunction.oneOff && oneOff\n\n    return\n  }\n\n  const uid = makeEventUid(callable, originalTypeEvent.replace(namespaceRegex, ''))\n  const fn = isDelegated ?\n    bootstrapDelegationHandler(element, handler, callable) :\n    bootstrapHandler(element, callable)\n\n  fn.delegationSelector = isDelegated ? handler : null\n  fn.callable = callable\n  fn.oneOff = oneOff\n  fn.uidEvent = uid\n  handlers[uid] = fn\n\n  element.addEventListener(typeEvent, fn, isDelegated)\n}\n\nfunction removeHandler(element, events, typeEvent, handler, delegationSelector) {\n  const fn = findHandler(events[typeEvent], handler, delegationSelector)\n\n  if (!fn) {\n    return\n  }\n\n  element.removeEventListener(typeEvent, fn, Boolean(delegationSelector))\n  delete events[typeEvent][fn.uidEvent]\n}\n\nfunction removeNamespacedHandlers(element, events, typeEvent, namespace) {\n  const storeElementEvent = events[typeEvent] || {}\n\n  for (const [handlerKey, event] of Object.entries(storeElementEvent)) {\n    if (handlerKey.includes(namespace)) {\n      removeHandler(element, events, typeEvent, event.callable, event.delegationSelector)\n    }\n  }\n}\n\nfunction getTypeEvent(event) {\n  // allow to get the native events from namespaced events ('click.bs.button' --> 'click')\n  event = event.replace(stripNameRegex, '')\n  return customEvents[event] || event\n}\n\nconst EventHandler = {\n  on(element, event, handler, delegationFunction) {\n    addHandler(element, event, handler, delegationFunction, false)\n  },\n\n  one(element, event, handler, delegationFunction) {\n    addHandler(element, event, handler, delegationFunction, true)\n  },\n\n  off(element, originalTypeEvent, handler, delegationFunction) {\n    if (typeof originalTypeEvent !== 'string' || !element) {\n      return\n    }\n\n    const [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction)\n    const inNamespace = typeEvent !== originalTypeEvent\n    const events = getElementEvents(element)\n    const storeElementEvent = events[typeEvent] || {}\n    const isNamespace = originalTypeEvent.startsWith('.')\n\n    if (typeof callable !== 'undefined') {\n      // Simplest case: handler is passed, remove that listener ONLY.\n      if (!Object.keys(storeElementEvent).length) {\n        return\n      }\n\n      removeHandler(element, events, typeEvent, callable, isDelegated ? handler : null)\n      return\n    }\n\n    if (isNamespace) {\n      for (const elementEvent of Object.keys(events)) {\n        removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1))\n      }\n    }\n\n    for (const [keyHandlers, event] of Object.entries(storeElementEvent)) {\n      const handlerKey = keyHandlers.replace(stripUidRegex, '')\n\n      if (!inNamespace || originalTypeEvent.includes(handlerKey)) {\n        removeHandler(element, events, typeEvent, event.callable, event.delegationSelector)\n      }\n    }\n  },\n\n  trigger(element, event, args) {\n    if (typeof event !== 'string' || !element) {\n      return null\n    }\n\n    const $ = getjQuery()\n    const typeEvent = getTypeEvent(event)\n    const inNamespace = event !== typeEvent\n\n    let jQueryEvent = null\n    let bubbles = true\n    let nativeDispatch = true\n    let defaultPrevented = false\n\n    if (inNamespace && $) {\n      jQueryEvent = $.Event(event, args)\n\n      $(element).trigger(jQueryEvent)\n      bubbles = !jQueryEvent.isPropagationStopped()\n      nativeDispatch = !jQueryEvent.isImmediatePropagationStopped()\n      defaultPrevented = jQueryEvent.isDefaultPrevented()\n    }\n\n    const evt = hydrateObj(new Event(event, { bubbles, cancelable: true }), args)\n\n    if (defaultPrevented) {\n      evt.preventDefault()\n    }\n\n    if (nativeDispatch) {\n      element.dispatchEvent(evt)\n    }\n\n    if (evt.defaultPrevented && jQueryEvent) {\n      jQueryEvent.preventDefault()\n    }\n\n    return evt\n  }\n}\n\nfunction hydrateObj(obj, meta = {}) {\n  for (const [key, value] of Object.entries(meta)) {\n    try {\n      obj[key] = value\n    } catch {\n      Object.defineProperty(obj, key, {\n        configurable: true,\n        get() {\n          return value\n        }\n      })\n    }\n  }\n\n  return obj\n}\n\nexport default EventHandler\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap dom/manipulator.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nfunction normalizeData(value) {\n  if (value === 'true') {\n    return true\n  }\n\n  if (value === 'false') {\n    return false\n  }\n\n  if (value === Number(value).toString()) {\n    return Number(value)\n  }\n\n  if (value === '' || value === 'null') {\n    return null\n  }\n\n  if (typeof value !== 'string') {\n    return value\n  }\n\n  try {\n    return JSON.parse(decodeURIComponent(value))\n  } catch {\n    return value\n  }\n}\n\nfunction normalizeDataKey(key) {\n  return key.replace(/[A-Z]/g, chr => `-${chr.toLowerCase()}`)\n}\n\nconst Manipulator = {\n  setDataAttribute(element, key, value) {\n    element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value)\n  },\n\n  removeDataAttribute(element, key) {\n    element.removeAttribute(`data-bs-${normalizeDataKey(key)}`)\n  },\n\n  getDataAttributes(element) {\n    if (!element) {\n      return {}\n    }\n\n    const attributes = {}\n    const bsKeys = Object.keys(element.dataset).filter(key => key.startsWith('bs') && !key.startsWith('bsConfig'))\n\n    for (const key of bsKeys) {\n      let pureKey = key.replace(/^bs/, '')\n      pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1)\n      attributes[pureKey] = normalizeData(element.dataset[key])\n    }\n\n    return attributes\n  },\n\n  getDataAttribute(element, key) {\n    return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`))\n  }\n}\n\nexport default Manipulator\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap util/config.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport Manipulator from '../dom/manipulator.js'\nimport { isElement, toType } from './index.js'\n\n/**\n * Class definition\n */\n\nclass Config {\n  // Getters\n  static get Default() {\n    return {}\n  }\n\n  static get DefaultType() {\n    return {}\n  }\n\n  static get NAME() {\n    throw new Error('You have to implement the static method \"NAME\", for each component!')\n  }\n\n  _getConfig(config) {\n    config = this._mergeConfigObj(config)\n    config = this._configAfterMerge(config)\n    this._typeCheckConfig(config)\n    return config\n  }\n\n  _configAfterMerge(config) {\n    return config\n  }\n\n  _mergeConfigObj(config, element) {\n    const jsonConfig = isElement(element) ? Manipulator.getDataAttribute(element, 'config') : {} // try to parse\n\n    return {\n      ...this.constructor.Default,\n      ...(typeof jsonConfig === 'object' ? jsonConfig : {}),\n      ...(isElement(element) ? Manipulator.getDataAttributes(element) : {}),\n      ...(typeof config === 'object' ? config : {})\n    }\n  }\n\n  _typeCheckConfig(config, configTypes = this.constructor.DefaultType) {\n    for (const [property, expectedTypes] of Object.entries(configTypes)) {\n      const value = config[property]\n      const valueType = isElement(value) ? 'element' : toType(value)\n\n      if (!new RegExp(expectedTypes).test(valueType)) {\n        throw new TypeError(\n          `${this.constructor.NAME.toUpperCase()}: Option \"${property}\" provided type \"${valueType}\" but expected type \"${expectedTypes}\".`\n        )\n      }\n    }\n  }\n}\n\nexport default Config\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap base-component.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport Data from './dom/data.js'\nimport EventHandler from './dom/event-handler.js'\nimport Config from './util/config.js'\nimport { executeAfterTransition, getElement } from './util/index.js'\n\n/**\n * Constants\n */\n\nconst VERSION = '5.3.7'\n\n/**\n * Class definition\n */\n\nclass BaseComponent extends Config {\n  constructor(element, config) {\n    super()\n\n    element = getElement(element)\n    if (!element) {\n      return\n    }\n\n    this._element = element\n    this._config = this._getConfig(config)\n\n    Data.set(this._element, this.constructor.DATA_KEY, this)\n  }\n\n  // Public\n  dispose() {\n    Data.remove(this._element, this.constructor.DATA_KEY)\n    EventHandler.off(this._element, this.constructor.EVENT_KEY)\n\n    for (const propertyName of Object.getOwnPropertyNames(this)) {\n      this[propertyName] = null\n    }\n  }\n\n  // Private\n  _queueCallback(callback, element, isAnimated = true) {\n    executeAfterTransition(callback, element, isAnimated)\n  }\n\n  _getConfig(config) {\n    config = this._mergeConfigObj(config, this._element)\n    config = this._configAfterMerge(config)\n    this._typeCheckConfig(config)\n    return config\n  }\n\n  // Static\n  static getInstance(element) {\n    return Data.get(getElement(element), this.DATA_KEY)\n  }\n\n  static getOrCreateInstance(element, config = {}) {\n    return this.getInstance(element) || new this(element, typeof config === 'object' ? config : null)\n  }\n\n  static get VERSION() {\n    return VERSION\n  }\n\n  static get DATA_KEY() {\n    return `bs.${this.NAME}`\n  }\n\n  static get EVENT_KEY() {\n    return `.${this.DATA_KEY}`\n  }\n\n  static eventName(name) {\n    return `${name}${this.EVENT_KEY}`\n  }\n}\n\nexport default BaseComponent\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap dom/selector-engine.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport { isDisabled, isVisible, parseSelector } from '../util/index.js'\n\nconst getSelector = element => {\n  let selector = element.getAttribute('data-bs-target')\n\n  if (!selector || selector === '#') {\n    let hrefAttribute = element.getAttribute('href')\n\n    // The only valid content that could double as a selector are IDs or classes,\n    // so everything starting with `#` or `.`. If a \"real\" URL is used as the selector,\n    // `document.querySelector` will rightfully complain it is invalid.\n    // See https://github.com/twbs/bootstrap/issues/32273\n    if (!hrefAttribute || (!hrefAttribute.includes('#') && !hrefAttribute.startsWith('.'))) {\n      return null\n    }\n\n    // Just in case some CMS puts out a full URL with the anchor appended\n    if (hrefAttribute.includes('#') && !hrefAttribute.startsWith('#')) {\n      hrefAttribute = `#${hrefAttribute.split('#')[1]}`\n    }\n\n    selector = hrefAttribute && hrefAttribute !== '#' ? hrefAttribute.trim() : null\n  }\n\n  return selector ? selector.split(',').map(sel => parseSelector(sel)).join(',') : null\n}\n\nconst SelectorEngine = {\n  find(selector, element = document.documentElement) {\n    return [].concat(...Element.prototype.querySelectorAll.call(element, selector))\n  },\n\n  findOne(selector, element = document.documentElement) {\n    return Element.prototype.querySelector.call(element, selector)\n  },\n\n  children(element, selector) {\n    return [].concat(...element.children).filter(child => child.matches(selector))\n  },\n\n  parents(element, selector) {\n    const parents = []\n    let ancestor = element.parentNode.closest(selector)\n\n    while (ancestor) {\n      parents.push(ancestor)\n      ancestor = ancestor.parentNode.closest(selector)\n    }\n\n    return parents\n  },\n\n  prev(element, selector) {\n    let previous = element.previousElementSibling\n\n    while (previous) {\n      if (previous.matches(selector)) {\n        return [previous]\n      }\n\n      previous = previous.previousElementSibling\n    }\n\n    return []\n  },\n  // TODO: this is now unused; remove later along with prev()\n  next(element, selector) {\n    let next = element.nextElementSibling\n\n    while (next) {\n      if (next.matches(selector)) {\n        return [next]\n      }\n\n      next = next.nextElementSibling\n    }\n\n    return []\n  },\n\n  focusableChildren(element) {\n    const focusables = [\n      'a',\n      'button',\n      'input',\n      'textarea',\n      'select',\n      'details',\n      '[tabindex]',\n      '[contenteditable=\"true\"]'\n    ].map(selector => `${selector}:not([tabindex^=\"-\"])`).join(',')\n\n    return this.find(focusables, element).filter(el => !isDisabled(el) && isVisible(el))\n  },\n\n  getSelectorFromElement(element) {\n    const selector = getSelector(element)\n\n    if (selector) {\n      return SelectorEngine.findOne(selector) ? selector : null\n    }\n\n    return null\n  },\n\n  getElementFromSelector(element) {\n    const selector = getSelector(element)\n\n    return selector ? SelectorEngine.findOne(selector) : null\n  },\n\n  getMultipleElementsFromSelector(element) {\n    const selector = getSelector(element)\n\n    return selector ? SelectorEngine.find(selector) : []\n  }\n}\n\nexport default SelectorEngine\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap util/component-functions.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport EventHandler from '../dom/event-handler.js'\nimport SelectorEngine from '../dom/selector-engine.js'\nimport { isDisabled } from './index.js'\n\nconst enableDismissTrigger = (component, method = 'hide') => {\n  const clickEvent = `click.dismiss${component.EVENT_KEY}`\n  const name = component.NAME\n\n  EventHandler.on(document, clickEvent, `[data-bs-dismiss=\"${name}\"]`, function (event) {\n    if (['A', 'AREA'].includes(this.tagName)) {\n      event.preventDefault()\n    }\n\n    if (isDisabled(this)) {\n      return\n    }\n\n    const target = SelectorEngine.getElementFromSelector(this) || this.closest(`.${name}`)\n    const instance = component.getOrCreateInstance(target)\n\n    // Method argument is left, for Alert and only, as it doesn't implement the 'hide' method\n    instance[method]()\n  })\n}\n\nexport {\n  enableDismissTrigger\n}\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap alert.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport BaseComponent from './base-component.js'\nimport EventHandler from './dom/event-handler.js'\nimport { enableDismissTrigger } from './util/component-functions.js'\nimport { defineJQueryPlugin } from './util/index.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'alert'\nconst DATA_KEY = 'bs.alert'\nconst EVENT_KEY = `.${DATA_KEY}`\n\nconst EVENT_CLOSE = `close${EVENT_KEY}`\nconst EVENT_CLOSED = `closed${EVENT_KEY}`\nconst CLASS_NAME_FADE = 'fade'\nconst CLASS_NAME_SHOW = 'show'\n\n/**\n * Class definition\n */\n\nclass Alert extends BaseComponent {\n  // Getters\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  close() {\n    const closeEvent = EventHandler.trigger(this._element, EVENT_CLOSE)\n\n    if (closeEvent.defaultPrevented) {\n      return\n    }\n\n    this._element.classList.remove(CLASS_NAME_SHOW)\n\n    const isAnimated = this._element.classList.contains(CLASS_NAME_FADE)\n    this._queueCallback(() => this._destroyElement(), this._element, isAnimated)\n  }\n\n  // Private\n  _destroyElement() {\n    this._element.remove()\n    EventHandler.trigger(this._element, EVENT_CLOSED)\n    this.dispose()\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Alert.getOrCreateInstance(this)\n\n      if (typeof config !== 'string') {\n        return\n      }\n\n      if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n        throw new TypeError(`No method named \"${config}\"`)\n      }\n\n      data[config](this)\n    })\n  }\n}\n\n/**\n * Data API implementation\n */\n\nenableDismissTrigger(Alert, 'close')\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Alert)\n\nexport default Alert\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap button.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport BaseComponent from './base-component.js'\nimport EventHandler from './dom/event-handler.js'\nimport { defineJQueryPlugin } from './util/index.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'button'\nconst DATA_KEY = 'bs.button'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst DATA_API_KEY = '.data-api'\n\nconst CLASS_NAME_ACTIVE = 'active'\nconst SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"button\"]'\nconst EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`\n\n/**\n * Class definition\n */\n\nclass Button extends BaseComponent {\n  // Getters\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  toggle() {\n    // Toggle class and sync the `aria-pressed` attribute with the return value of the `.toggle()` method\n    this._element.setAttribute('aria-pressed', this._element.classList.toggle(CLASS_NAME_ACTIVE))\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Button.getOrCreateInstance(this)\n\n      if (config === 'toggle') {\n        data[config]()\n      }\n    })\n  }\n}\n\n/**\n * Data API implementation\n */\n\nEventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, event => {\n  event.preventDefault()\n\n  const button = event.target.closest(SELECTOR_DATA_TOGGLE)\n  const data = Button.getOrCreateInstance(button)\n\n  data.toggle()\n})\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Button)\n\nexport default Button\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap util/swipe.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport EventHandler from '../dom/event-handler.js'\nimport Config from './config.js'\nimport { execute } from './index.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'swipe'\nconst EVENT_KEY = '.bs.swipe'\nconst EVENT_TOUCHSTART = `touchstart${EVENT_KEY}`\nconst EVENT_TOUCHMOVE = `touchmove${EVENT_KEY}`\nconst EVENT_TOUCHEND = `touchend${EVENT_KEY}`\nconst EVENT_POINTERDOWN = `pointerdown${EVENT_KEY}`\nconst EVENT_POINTERUP = `pointerup${EVENT_KEY}`\nconst POINTER_TYPE_TOUCH = 'touch'\nconst POINTER_TYPE_PEN = 'pen'\nconst CLASS_NAME_POINTER_EVENT = 'pointer-event'\nconst SWIPE_THRESHOLD = 40\n\nconst Default = {\n  endCallback: null,\n  leftCallback: null,\n  rightCallback: null\n}\n\nconst DefaultType = {\n  endCallback: '(function|null)',\n  leftCallback: '(function|null)',\n  rightCallback: '(function|null)'\n}\n\n/**\n * Class definition\n */\n\nclass Swipe extends Config {\n  constructor(element, config) {\n    super()\n    this._element = element\n\n    if (!element || !Swipe.isSupported()) {\n      return\n    }\n\n    this._config = this._getConfig(config)\n    this._deltaX = 0\n    this._supportPointerEvents = Boolean(window.PointerEvent)\n    this._initEvents()\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  dispose() {\n    EventHandler.off(this._element, EVENT_KEY)\n  }\n\n  // Private\n  _start(event) {\n    if (!this._supportPointerEvents) {\n      this._deltaX = event.touches[0].clientX\n\n      return\n    }\n\n    if (this._eventIsPointerPenTouch(event)) {\n      this._deltaX = event.clientX\n    }\n  }\n\n  _end(event) {\n    if (this._eventIsPointerPenTouch(event)) {\n      this._deltaX = event.clientX - this._deltaX\n    }\n\n    this._handleSwipe()\n    execute(this._config.endCallback)\n  }\n\n  _move(event) {\n    this._deltaX = event.touches && event.touches.length > 1 ?\n      0 :\n      event.touches[0].clientX - this._deltaX\n  }\n\n  _handleSwipe() {\n    const absDeltaX = Math.abs(this._deltaX)\n\n    if (absDeltaX <= SWIPE_THRESHOLD) {\n      return\n    }\n\n    const direction = absDeltaX / this._deltaX\n\n    this._deltaX = 0\n\n    if (!direction) {\n      return\n    }\n\n    execute(direction > 0 ? this._config.rightCallback : this._config.leftCallback)\n  }\n\n  _initEvents() {\n    if (this._supportPointerEvents) {\n      EventHandler.on(this._element, EVENT_POINTERDOWN, event => this._start(event))\n      EventHandler.on(this._element, EVENT_POINTERUP, event => this._end(event))\n\n      this._element.classList.add(CLASS_NAME_POINTER_EVENT)\n    } else {\n      EventHandler.on(this._element, EVENT_TOUCHSTART, event => this._start(event))\n      EventHandler.on(this._element, EVENT_TOUCHMOVE, event => this._move(event))\n      EventHandler.on(this._element, EVENT_TOUCHEND, event => this._end(event))\n    }\n  }\n\n  _eventIsPointerPenTouch(event) {\n    return this._supportPointerEvents && (event.pointerType === POINTER_TYPE_PEN || event.pointerType === POINTER_TYPE_TOUCH)\n  }\n\n  // Static\n  static isSupported() {\n    return 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0\n  }\n}\n\nexport default Swipe\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap carousel.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport BaseComponent from './base-component.js'\nimport EventHandler from './dom/event-handler.js'\nimport Manipulator from './dom/manipulator.js'\nimport SelectorEngine from './dom/selector-engine.js'\nimport {\n  defineJQueryPlugin,\n  getNextActiveElement,\n  isRTL,\n  isVisible,\n  reflow,\n  triggerTransitionEnd\n} from './util/index.js'\nimport Swipe from './util/swipe.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'carousel'\nconst DATA_KEY = 'bs.carousel'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst DATA_API_KEY = '.data-api'\n\nconst ARROW_LEFT_KEY = 'ArrowLeft'\nconst ARROW_RIGHT_KEY = 'ArrowRight'\nconst TOUCHEVENT_COMPAT_WAIT = 500 // Time for mouse compat events to fire after touch\n\nconst ORDER_NEXT = 'next'\nconst ORDER_PREV = 'prev'\nconst DIRECTION_LEFT = 'left'\nconst DIRECTION_RIGHT = 'right'\n\nconst EVENT_SLIDE = `slide${EVENT_KEY}`\nconst EVENT_SLID = `slid${EVENT_KEY}`\nconst EVENT_KEYDOWN = `keydown${EVENT_KEY}`\nconst EVENT_MOUSEENTER = `mouseenter${EVENT_KEY}`\nconst EVENT_MOUSELEAVE = `mouseleave${EVENT_KEY}`\nconst EVENT_DRAG_START = `dragstart${EVENT_KEY}`\nconst EVENT_LOAD_DATA_API = `load${EVENT_KEY}${DATA_API_KEY}`\nconst EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`\n\nconst CLASS_NAME_CAROUSEL = 'carousel'\nconst CLASS_NAME_ACTIVE = 'active'\nconst CLASS_NAME_SLIDE = 'slide'\nconst CLASS_NAME_END = 'carousel-item-end'\nconst CLASS_NAME_START = 'carousel-item-start'\nconst CLASS_NAME_NEXT = 'carousel-item-next'\nconst CLASS_NAME_PREV = 'carousel-item-prev'\n\nconst SELECTOR_ACTIVE = '.active'\nconst SELECTOR_ITEM = '.carousel-item'\nconst SELECTOR_ACTIVE_ITEM = SELECTOR_ACTIVE + SELECTOR_ITEM\nconst SELECTOR_ITEM_IMG = '.carousel-item img'\nconst SELECTOR_INDICATORS = '.carousel-indicators'\nconst SELECTOR_DATA_SLIDE = '[data-bs-slide], [data-bs-slide-to]'\nconst SELECTOR_DATA_RIDE = '[data-bs-ride=\"carousel\"]'\n\nconst KEY_TO_DIRECTION = {\n  [ARROW_LEFT_KEY]: DIRECTION_RIGHT,\n  [ARROW_RIGHT_KEY]: DIRECTION_LEFT\n}\n\nconst Default = {\n  interval: 5000,\n  keyboard: true,\n  pause: 'hover',\n  ride: false,\n  touch: true,\n  wrap: true\n}\n\nconst DefaultType = {\n  interval: '(number|boolean)', // TODO:v6 remove boolean support\n  keyboard: 'boolean',\n  pause: '(string|boolean)',\n  ride: '(boolean|string)',\n  touch: 'boolean',\n  wrap: 'boolean'\n}\n\n/**\n * Class definition\n */\n\nclass Carousel extends BaseComponent {\n  constructor(element, config) {\n    super(element, config)\n\n    this._interval = null\n    this._activeElement = null\n    this._isSliding = false\n    this.touchTimeout = null\n    this._swipeHelper = null\n\n    this._indicatorsElement = SelectorEngine.findOne(SELECTOR_INDICATORS, this._element)\n    this._addEventListeners()\n\n    if (this._config.ride === CLASS_NAME_CAROUSEL) {\n      this.cycle()\n    }\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  next() {\n    this._slide(ORDER_NEXT)\n  }\n\n  nextWhenVisible() {\n    // FIXME TODO use `document.visibilityState`\n    // Don't call next when the page isn't visible\n    // or the carousel or its parent isn't visible\n    if (!document.hidden && isVisible(this._element)) {\n      this.next()\n    }\n  }\n\n  prev() {\n    this._slide(ORDER_PREV)\n  }\n\n  pause() {\n    if (this._isSliding) {\n      triggerTransitionEnd(this._element)\n    }\n\n    this._clearInterval()\n  }\n\n  cycle() {\n    this._clearInterval()\n    this._updateInterval()\n\n    this._interval = setInterval(() => this.nextWhenVisible(), this._config.interval)\n  }\n\n  _maybeEnableCycle() {\n    if (!this._config.ride) {\n      return\n    }\n\n    if (this._isSliding) {\n      EventHandler.one(this._element, EVENT_SLID, () => this.cycle())\n      return\n    }\n\n    this.cycle()\n  }\n\n  to(index) {\n    const items = this._getItems()\n    if (index > items.length - 1 || index < 0) {\n      return\n    }\n\n    if (this._isSliding) {\n      EventHandler.one(this._element, EVENT_SLID, () => this.to(index))\n      return\n    }\n\n    const activeIndex = this._getItemIndex(this._getActive())\n    if (activeIndex === index) {\n      return\n    }\n\n    const order = index > activeIndex ? ORDER_NEXT : ORDER_PREV\n\n    this._slide(order, items[index])\n  }\n\n  dispose() {\n    if (this._swipeHelper) {\n      this._swipeHelper.dispose()\n    }\n\n    super.dispose()\n  }\n\n  // Private\n  _configAfterMerge(config) {\n    config.defaultInterval = config.interval\n    return config\n  }\n\n  _addEventListeners() {\n    if (this._config.keyboard) {\n      EventHandler.on(this._element, EVENT_KEYDOWN, event => this._keydown(event))\n    }\n\n    if (this._config.pause === 'hover') {\n      EventHandler.on(this._element, EVENT_MOUSEENTER, () => this.pause())\n      EventHandler.on(this._element, EVENT_MOUSELEAVE, () => this._maybeEnableCycle())\n    }\n\n    if (this._config.touch && Swipe.isSupported()) {\n      this._addTouchEventListeners()\n    }\n  }\n\n  _addTouchEventListeners() {\n    for (const img of SelectorEngine.find(SELECTOR_ITEM_IMG, this._element)) {\n      EventHandler.on(img, EVENT_DRAG_START, event => event.preventDefault())\n    }\n\n    const endCallBack = () => {\n      if (this._config.pause !== 'hover') {\n        return\n      }\n\n      // If it's a touch-enabled device, mouseenter/leave are fired as\n      // part of the mouse compatibility events on first tap - the carousel\n      // would stop cycling until user tapped out of it;\n      // here, we listen for touchend, explicitly pause the carousel\n      // (as if it's the second time we tap on it, mouseenter compat event\n      // is NOT fired) and after a timeout (to allow for mouse compatibility\n      // events to fire) we explicitly restart cycling\n\n      this.pause()\n      if (this.touchTimeout) {\n        clearTimeout(this.touchTimeout)\n      }\n\n      this.touchTimeout = setTimeout(() => this._maybeEnableCycle(), TOUCHEVENT_COMPAT_WAIT + this._config.interval)\n    }\n\n    const swipeConfig = {\n      leftCallback: () => this._slide(this._directionToOrder(DIRECTION_LEFT)),\n      rightCallback: () => this._slide(this._directionToOrder(DIRECTION_RIGHT)),\n      endCallback: endCallBack\n    }\n\n    this._swipeHelper = new Swipe(this._element, swipeConfig)\n  }\n\n  _keydown(event) {\n    if (/input|textarea/i.test(event.target.tagName)) {\n      return\n    }\n\n    const direction = KEY_TO_DIRECTION[event.key]\n    if (direction) {\n      event.preventDefault()\n      this._slide(this._directionToOrder(direction))\n    }\n  }\n\n  _getItemIndex(element) {\n    return this._getItems().indexOf(element)\n  }\n\n  _setActiveIndicatorElement(index) {\n    if (!this._indicatorsElement) {\n      return\n    }\n\n    const activeIndicator = SelectorEngine.findOne(SELECTOR_ACTIVE, this._indicatorsElement)\n\n    activeIndicator.classList.remove(CLASS_NAME_ACTIVE)\n    activeIndicator.removeAttribute('aria-current')\n\n    const newActiveIndicator = SelectorEngine.findOne(`[data-bs-slide-to=\"${index}\"]`, this._indicatorsElement)\n\n    if (newActiveIndicator) {\n      newActiveIndicator.classList.add(CLASS_NAME_ACTIVE)\n      newActiveIndicator.setAttribute('aria-current', 'true')\n    }\n  }\n\n  _updateInterval() {\n    const element = this._activeElement || this._getActive()\n\n    if (!element) {\n      return\n    }\n\n    const elementInterval = Number.parseInt(element.getAttribute('data-bs-interval'), 10)\n\n    this._config.interval = elementInterval || this._config.defaultInterval\n  }\n\n  _slide(order, element = null) {\n    if (this._isSliding) {\n      return\n    }\n\n    const activeElement = this._getActive()\n    const isNext = order === ORDER_NEXT\n    const nextElement = element || getNextActiveElement(this._getItems(), activeElement, isNext, this._config.wrap)\n\n    if (nextElement === activeElement) {\n      return\n    }\n\n    const nextElementIndex = this._getItemIndex(nextElement)\n\n    const triggerEvent = eventName => {\n      return EventHandler.trigger(this._element, eventName, {\n        relatedTarget: nextElement,\n        direction: this._orderToDirection(order),\n        from: this._getItemIndex(activeElement),\n        to: nextElementIndex\n      })\n    }\n\n    const slideEvent = triggerEvent(EVENT_SLIDE)\n\n    if (slideEvent.defaultPrevented) {\n      return\n    }\n\n    if (!activeElement || !nextElement) {\n      // Some weirdness is happening, so we bail\n      // TODO: change tests that use empty divs to avoid this check\n      return\n    }\n\n    const isCycling = Boolean(this._interval)\n    this.pause()\n\n    this._isSliding = true\n\n    this._setActiveIndicatorElement(nextElementIndex)\n    this._activeElement = nextElement\n\n    const directionalClassName = isNext ? CLASS_NAME_START : CLASS_NAME_END\n    const orderClassName = isNext ? CLASS_NAME_NEXT : CLASS_NAME_PREV\n\n    nextElement.classList.add(orderClassName)\n\n    reflow(nextElement)\n\n    activeElement.classList.add(directionalClassName)\n    nextElement.classList.add(directionalClassName)\n\n    const completeCallBack = () => {\n      nextElement.classList.remove(directionalClassName, orderClassName)\n      nextElement.classList.add(CLASS_NAME_ACTIVE)\n\n      activeElement.classList.remove(CLASS_NAME_ACTIVE, orderClassName, directionalClassName)\n\n      this._isSliding = false\n\n      triggerEvent(EVENT_SLID)\n    }\n\n    this._queueCallback(completeCallBack, activeElement, this._isAnimated())\n\n    if (isCycling) {\n      this.cycle()\n    }\n  }\n\n  _isAnimated() {\n    return this._element.classList.contains(CLASS_NAME_SLIDE)\n  }\n\n  _getActive() {\n    return SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element)\n  }\n\n  _getItems() {\n    return SelectorEngine.find(SELECTOR_ITEM, this._element)\n  }\n\n  _clearInterval() {\n    if (this._interval) {\n      clearInterval(this._interval)\n      this._interval = null\n    }\n  }\n\n  _directionToOrder(direction) {\n    if (isRTL()) {\n      return direction === DIRECTION_LEFT ? ORDER_PREV : ORDER_NEXT\n    }\n\n    return direction === DIRECTION_LEFT ? ORDER_NEXT : ORDER_PREV\n  }\n\n  _orderToDirection(order) {\n    if (isRTL()) {\n      return order === ORDER_PREV ? DIRECTION_LEFT : DIRECTION_RIGHT\n    }\n\n    return order === ORDER_PREV ? DIRECTION_RIGHT : DIRECTION_LEFT\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Carousel.getOrCreateInstance(this, config)\n\n      if (typeof config === 'number') {\n        data.to(config)\n        return\n      }\n\n      if (typeof config === 'string') {\n        if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n          throw new TypeError(`No method named \"${config}\"`)\n        }\n\n        data[config]()\n      }\n    })\n  }\n}\n\n/**\n * Data API implementation\n */\n\nEventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_SLIDE, function (event) {\n  const target = SelectorEngine.getElementFromSelector(this)\n\n  if (!target || !target.classList.contains(CLASS_NAME_CAROUSEL)) {\n    return\n  }\n\n  event.preventDefault()\n\n  const carousel = Carousel.getOrCreateInstance(target)\n  const slideIndex = this.getAttribute('data-bs-slide-to')\n\n  if (slideIndex) {\n    carousel.to(slideIndex)\n    carousel._maybeEnableCycle()\n    return\n  }\n\n  if (Manipulator.getDataAttribute(this, 'slide') === 'next') {\n    carousel.next()\n    carousel._maybeEnableCycle()\n    return\n  }\n\n  carousel.prev()\n  carousel._maybeEnableCycle()\n})\n\nEventHandler.on(window, EVENT_LOAD_DATA_API, () => {\n  const carousels = SelectorEngine.find(SELECTOR_DATA_RIDE)\n\n  for (const carousel of carousels) {\n    Carousel.getOrCreateInstance(carousel)\n  }\n})\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Carousel)\n\nexport default Carousel\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap collapse.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport BaseComponent from './base-component.js'\nimport EventHandler from './dom/event-handler.js'\nimport SelectorEngine from './dom/selector-engine.js'\nimport {\n  defineJQueryPlugin,\n  getElement,\n  reflow\n} from './util/index.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'collapse'\nconst DATA_KEY = 'bs.collapse'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst DATA_API_KEY = '.data-api'\n\nconst EVENT_SHOW = `show${EVENT_KEY}`\nconst EVENT_SHOWN = `shown${EVENT_KEY}`\nconst EVENT_HIDE = `hide${EVENT_KEY}`\nconst EVENT_HIDDEN = `hidden${EVENT_KEY}`\nconst EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`\n\nconst CLASS_NAME_SHOW = 'show'\nconst CLASS_NAME_COLLAPSE = 'collapse'\nconst CLASS_NAME_COLLAPSING = 'collapsing'\nconst CLASS_NAME_COLLAPSED = 'collapsed'\nconst CLASS_NAME_DEEPER_CHILDREN = `:scope .${CLASS_NAME_COLLAPSE} .${CLASS_NAME_COLLAPSE}`\nconst CLASS_NAME_HORIZONTAL = 'collapse-horizontal'\n\nconst WIDTH = 'width'\nconst HEIGHT = 'height'\n\nconst SELECTOR_ACTIVES = '.collapse.show, .collapse.collapsing'\nconst SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"collapse\"]'\n\nconst Default = {\n  parent: null,\n  toggle: true\n}\n\nconst DefaultType = {\n  parent: '(null|element)',\n  toggle: 'boolean'\n}\n\n/**\n * Class definition\n */\n\nclass Collapse extends BaseComponent {\n  constructor(element, config) {\n    super(element, config)\n\n    this._isTransitioning = false\n    this._triggerArray = []\n\n    const toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE)\n\n    for (const elem of toggleList) {\n      const selector = SelectorEngine.getSelectorFromElement(elem)\n      const filterElement = SelectorEngine.find(selector)\n        .filter(foundElement => foundElement === this._element)\n\n      if (selector !== null && filterElement.length) {\n        this._triggerArray.push(elem)\n      }\n    }\n\n    this._initializeChildren()\n\n    if (!this._config.parent) {\n      this._addAriaAndCollapsedClass(this._triggerArray, this._isShown())\n    }\n\n    if (this._config.toggle) {\n      this.toggle()\n    }\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  toggle() {\n    if (this._isShown()) {\n      this.hide()\n    } else {\n      this.show()\n    }\n  }\n\n  show() {\n    if (this._isTransitioning || this._isShown()) {\n      return\n    }\n\n    let activeChildren = []\n\n    // find active children\n    if (this._config.parent) {\n      activeChildren = this._getFirstLevelChildren(SELECTOR_ACTIVES)\n        .filter(element => element !== this._element)\n        .map(element => Collapse.getOrCreateInstance(element, { toggle: false }))\n    }\n\n    if (activeChildren.length && activeChildren[0]._isTransitioning) {\n      return\n    }\n\n    const startEvent = EventHandler.trigger(this._element, EVENT_SHOW)\n    if (startEvent.defaultPrevented) {\n      return\n    }\n\n    for (const activeInstance of activeChildren) {\n      activeInstance.hide()\n    }\n\n    const dimension = this._getDimension()\n\n    this._element.classList.remove(CLASS_NAME_COLLAPSE)\n    this._element.classList.add(CLASS_NAME_COLLAPSING)\n\n    this._element.style[dimension] = 0\n\n    this._addAriaAndCollapsedClass(this._triggerArray, true)\n    this._isTransitioning = true\n\n    const complete = () => {\n      this._isTransitioning = false\n\n      this._element.classList.remove(CLASS_NAME_COLLAPSING)\n      this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW)\n\n      this._element.style[dimension] = ''\n\n      EventHandler.trigger(this._element, EVENT_SHOWN)\n    }\n\n    const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1)\n    const scrollSize = `scroll${capitalizedDimension}`\n\n    this._queueCallback(complete, this._element, true)\n    this._element.style[dimension] = `${this._element[scrollSize]}px`\n  }\n\n  hide() {\n    if (this._isTransitioning || !this._isShown()) {\n      return\n    }\n\n    const startEvent = EventHandler.trigger(this._element, EVENT_HIDE)\n    if (startEvent.defaultPrevented) {\n      return\n    }\n\n    const dimension = this._getDimension()\n\n    this._element.style[dimension] = `${this._element.getBoundingClientRect()[dimension]}px`\n\n    reflow(this._element)\n\n    this._element.classList.add(CLASS_NAME_COLLAPSING)\n    this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW)\n\n    for (const trigger of this._triggerArray) {\n      const element = SelectorEngine.getElementFromSelector(trigger)\n\n      if (element && !this._isShown(element)) {\n        this._addAriaAndCollapsedClass([trigger], false)\n      }\n    }\n\n    this._isTransitioning = true\n\n    const complete = () => {\n      this._isTransitioning = false\n      this._element.classList.remove(CLASS_NAME_COLLAPSING)\n      this._element.classList.add(CLASS_NAME_COLLAPSE)\n      EventHandler.trigger(this._element, EVENT_HIDDEN)\n    }\n\n    this._element.style[dimension] = ''\n\n    this._queueCallback(complete, this._element, true)\n  }\n\n  // Private\n  _isShown(element = this._element) {\n    return element.classList.contains(CLASS_NAME_SHOW)\n  }\n\n  _configAfterMerge(config) {\n    config.toggle = Boolean(config.toggle) // Coerce string values\n    config.parent = getElement(config.parent)\n    return config\n  }\n\n  _getDimension() {\n    return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT\n  }\n\n  _initializeChildren() {\n    if (!this._config.parent) {\n      return\n    }\n\n    const children = this._getFirstLevelChildren(SELECTOR_DATA_TOGGLE)\n\n    for (const element of children) {\n      const selected = SelectorEngine.getElementFromSelector(element)\n\n      if (selected) {\n        this._addAriaAndCollapsedClass([element], this._isShown(selected))\n      }\n    }\n  }\n\n  _getFirstLevelChildren(selector) {\n    const children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent)\n    // remove children if greater depth\n    return SelectorEngine.find(selector, this._config.parent).filter(element => !children.includes(element))\n  }\n\n  _addAriaAndCollapsedClass(triggerArray, isOpen) {\n    if (!triggerArray.length) {\n      return\n    }\n\n    for (const element of triggerArray) {\n      element.classList.toggle(CLASS_NAME_COLLAPSED, !isOpen)\n      element.setAttribute('aria-expanded', isOpen)\n    }\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    const _config = {}\n    if (typeof config === 'string' && /show|hide/.test(config)) {\n      _config.toggle = false\n    }\n\n    return this.each(function () {\n      const data = Collapse.getOrCreateInstance(this, _config)\n\n      if (typeof config === 'string') {\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(`No method named \"${config}\"`)\n        }\n\n        data[config]()\n      }\n    })\n  }\n}\n\n/**\n * Data API implementation\n */\n\nEventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {\n  // preventDefault only for <a> elements (which change the URL) not inside the collapsible element\n  if (event.target.tagName === 'A' || (event.delegateTarget && event.delegateTarget.tagName === 'A')) {\n    event.preventDefault()\n  }\n\n  for (const element of SelectorEngine.getMultipleElementsFromSelector(this)) {\n    Collapse.getOrCreateInstance(element, { toggle: false }).toggle()\n  }\n})\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Collapse)\n\nexport default Collapse\n","export var top = 'top';\nexport var bottom = 'bottom';\nexport var right = 'right';\nexport var left = 'left';\nexport var auto = 'auto';\nexport var basePlacements = [top, bottom, right, left];\nexport var start = 'start';\nexport var end = 'end';\nexport var clippingParents = 'clippingParents';\nexport var viewport = 'viewport';\nexport var popper = 'popper';\nexport var reference = 'reference';\nexport var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {\n  return acc.concat([placement + \"-\" + start, placement + \"-\" + end]);\n}, []);\nexport var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {\n  return acc.concat([placement, placement + \"-\" + start, placement + \"-\" + end]);\n}, []); // modifiers that need to read the DOM\n\nexport var beforeRead = 'beforeRead';\nexport var read = 'read';\nexport var afterRead = 'afterRead'; // pure-logic modifiers\n\nexport var beforeMain = 'beforeMain';\nexport var main = 'main';\nexport var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)\n\nexport var beforeWrite = 'beforeWrite';\nexport var write = 'write';\nexport var afterWrite = 'afterWrite';\nexport var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];","export default function getNodeName(element) {\n  return element ? (element.nodeName || '').toLowerCase() : null;\n}","export default function getWindow(node) {\n  if (node == null) {\n    return window;\n  }\n\n  if (node.toString() !== '[object Window]') {\n    var ownerDocument = node.ownerDocument;\n    return ownerDocument ? ownerDocument.defaultView || window : window;\n  }\n\n  return node;\n}","import getWindow from \"./getWindow.js\";\n\nfunction isElement(node) {\n  var OwnElement = getWindow(node).Element;\n  return node instanceof OwnElement || node instanceof Element;\n}\n\nfunction isHTMLElement(node) {\n  var OwnElement = getWindow(node).HTMLElement;\n  return node instanceof OwnElement || node instanceof HTMLElement;\n}\n\nfunction isShadowRoot(node) {\n  // IE 11 has no ShadowRoot\n  if (typeof ShadowRoot === 'undefined') {\n    return false;\n  }\n\n  var OwnElement = getWindow(node).ShadowRoot;\n  return node instanceof OwnElement || node instanceof ShadowRoot;\n}\n\nexport { isElement, isHTMLElement, isShadowRoot };","import getNodeName from \"../dom-utils/getNodeName.js\";\nimport { isHTMLElement } from \"../dom-utils/instanceOf.js\"; // This modifier takes the styles prepared by the `computeStyles` modifier\n// and applies them to the HTMLElements such as popper and arrow\n\nfunction applyStyles(_ref) {\n  var state = _ref.state;\n  Object.keys(state.elements).forEach(function (name) {\n    var style = state.styles[name] || {};\n    var attributes = state.attributes[name] || {};\n    var element = state.elements[name]; // arrow is optional + virtual elements\n\n    if (!isHTMLElement(element) || !getNodeName(element)) {\n      return;\n    } // Flow doesn't support to extend this property, but it's the most\n    // effective way to apply styles to an HTMLElement\n    // $FlowFixMe[cannot-write]\n\n\n    Object.assign(element.style, style);\n    Object.keys(attributes).forEach(function (name) {\n      var value = attributes[name];\n\n      if (value === false) {\n        element.removeAttribute(name);\n      } else {\n        element.setAttribute(name, value === true ? '' : value);\n      }\n    });\n  });\n}\n\nfunction effect(_ref2) {\n  var state = _ref2.state;\n  var initialStyles = {\n    popper: {\n      position: state.options.strategy,\n      left: '0',\n      top: '0',\n      margin: '0'\n    },\n    arrow: {\n      position: 'absolute'\n    },\n    reference: {}\n  };\n  Object.assign(state.elements.popper.style, initialStyles.popper);\n  state.styles = initialStyles;\n\n  if (state.elements.arrow) {\n    Object.assign(state.elements.arrow.style, initialStyles.arrow);\n  }\n\n  return function () {\n    Object.keys(state.elements).forEach(function (name) {\n      var element = state.elements[name];\n      var attributes = state.attributes[name] || {};\n      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them\n\n      var style = styleProperties.reduce(function (style, property) {\n        style[property] = '';\n        return style;\n      }, {}); // arrow is optional + virtual elements\n\n      if (!isHTMLElement(element) || !getNodeName(element)) {\n        return;\n      }\n\n      Object.assign(element.style, style);\n      Object.keys(attributes).forEach(function (attribute) {\n        element.removeAttribute(attribute);\n      });\n    });\n  };\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'applyStyles',\n  enabled: true,\n  phase: 'write',\n  fn: applyStyles,\n  effect: effect,\n  requires: ['computeStyles']\n};","import { auto } from \"../enums.js\";\nexport default function getBasePlacement(placement) {\n  return placement.split('-')[0];\n}","export var max = Math.max;\nexport var min = Math.min;\nexport var round = Math.round;","export default function getUAString() {\n  var uaData = navigator.userAgentData;\n\n  if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {\n    return uaData.brands.map(function (item) {\n      return item.brand + \"/\" + item.version;\n    }).join(' ');\n  }\n\n  return navigator.userAgent;\n}","import getUAString from \"../utils/userAgent.js\";\nexport default function isLayoutViewport() {\n  return !/^((?!chrome|android).)*safari/i.test(getUAString());\n}","import { isElement, isHTMLElement } from \"./instanceOf.js\";\nimport { round } from \"../utils/math.js\";\nimport getWindow from \"./getWindow.js\";\nimport isLayoutViewport from \"./isLayoutViewport.js\";\nexport default function getBoundingClientRect(element, includeScale, isFixedStrategy) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n\n  var clientRect = element.getBoundingClientRect();\n  var scaleX = 1;\n  var scaleY = 1;\n\n  if (includeScale && isHTMLElement(element)) {\n    scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;\n    scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;\n  }\n\n  var _ref = isElement(element) ? getWindow(element) : window,\n      visualViewport = _ref.visualViewport;\n\n  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;\n  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;\n  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;\n  var width = clientRect.width / scaleX;\n  var height = clientRect.height / scaleY;\n  return {\n    width: width,\n    height: height,\n    top: y,\n    right: x + width,\n    bottom: y + height,\n    left: x,\n    x: x,\n    y: y\n  };\n}","import getBoundingClientRect from \"./getBoundingClientRect.js\"; // Returns the layout rect of an element relative to its offsetParent. Layout\n// means it doesn't take into account transforms.\n\nexport default function getLayoutRect(element) {\n  var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.\n  // Fixes https://github.com/popperjs/popper-core/issues/1223\n\n  var width = element.offsetWidth;\n  var height = element.offsetHeight;\n\n  if (Math.abs(clientRect.width - width) <= 1) {\n    width = clientRect.width;\n  }\n\n  if (Math.abs(clientRect.height - height) <= 1) {\n    height = clientRect.height;\n  }\n\n  return {\n    x: element.offsetLeft,\n    y: element.offsetTop,\n    width: width,\n    height: height\n  };\n}","import { isShadowRoot } from \"./instanceOf.js\";\nexport default function contains(parent, child) {\n  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method\n\n  if (parent.contains(child)) {\n    return true;\n  } // then fallback to custom implementation with Shadow DOM support\n  else if (rootNode && isShadowRoot(rootNode)) {\n      var next = child;\n\n      do {\n        if (next && parent.isSameNode(next)) {\n          return true;\n        } // $FlowFixMe[prop-missing]: need a better way to handle this...\n\n\n        next = next.parentNode || next.host;\n      } while (next);\n    } // Give up, the result is false\n\n\n  return false;\n}","import getWindow from \"./getWindow.js\";\nexport default function getComputedStyle(element) {\n  return getWindow(element).getComputedStyle(element);\n}","import getNodeName from \"./getNodeName.js\";\nexport default function isTableElement(element) {\n  return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;\n}","import { isElement } from \"./instanceOf.js\";\nexport default function getDocumentElement(element) {\n  // $FlowFixMe[incompatible-return]: assume body is always available\n  return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]\n  element.document) || window.document).documentElement;\n}","import getNodeName from \"./getNodeName.js\";\nimport getDocumentElement from \"./getDocumentElement.js\";\nimport { isShadowRoot } from \"./instanceOf.js\";\nexport default function getParentNode(element) {\n  if (getNodeName(element) === 'html') {\n    return element;\n  }\n\n  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle\n    // $FlowFixMe[incompatible-return]\n    // $FlowFixMe[prop-missing]\n    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node\n    element.parentNode || ( // DOM Element detected\n    isShadowRoot(element) ? element.host : null) || // ShadowRoot detected\n    // $FlowFixMe[incompatible-call]: HTMLElement is a Node\n    getDocumentElement(element) // fallback\n\n  );\n}","import getWindow from \"./getWindow.js\";\nimport getNodeName from \"./getNodeName.js\";\nimport getComputedStyle from \"./getComputedStyle.js\";\nimport { isHTMLElement, isShadowRoot } from \"./instanceOf.js\";\nimport isTableElement from \"./isTableElement.js\";\nimport getParentNode from \"./getParentNode.js\";\nimport getUAString from \"../utils/userAgent.js\";\n\nfunction getTrueOffsetParent(element) {\n  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837\n  getComputedStyle(element).position === 'fixed') {\n    return null;\n  }\n\n  return element.offsetParent;\n} // `.offsetParent` reports `null` for fixed elements, while absolute elements\n// return the containing block\n\n\nfunction getContainingBlock(element) {\n  var isFirefox = /firefox/i.test(getUAString());\n  var isIE = /Trident/i.test(getUAString());\n\n  if (isIE && isHTMLElement(element)) {\n    // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport\n    var elementCss = getComputedStyle(element);\n\n    if (elementCss.position === 'fixed') {\n      return null;\n    }\n  }\n\n  var currentNode = getParentNode(element);\n\n  if (isShadowRoot(currentNode)) {\n    currentNode = currentNode.host;\n  }\n\n  while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {\n    var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that\n    // create a containing block.\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n\n    if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {\n      return currentNode;\n    } else {\n      currentNode = currentNode.parentNode;\n    }\n  }\n\n  return null;\n} // Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\n\n\nexport default function getOffsetParent(element) {\n  var window = getWindow(element);\n  var offsetParent = getTrueOffsetParent(element);\n\n  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {\n    offsetParent = getTrueOffsetParent(offsetParent);\n  }\n\n  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static')) {\n    return window;\n  }\n\n  return offsetParent || getContainingBlock(element) || window;\n}","export default function getMainAxisFromPlacement(placement) {\n  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';\n}","import { max as mathMax, min as mathMin } from \"./math.js\";\nexport function within(min, value, max) {\n  return mathMax(min, mathMin(value, max));\n}\nexport function withinMaxClamp(min, value, max) {\n  var v = within(min, value, max);\n  return v > max ? max : v;\n}","import getFreshSideObject from \"./getFreshSideObject.js\";\nexport default function mergePaddingObject(paddingObject) {\n  return Object.assign({}, getFreshSideObject(), paddingObject);\n}","export default function getFreshSideObject() {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  };\n}","export default function expandToHashMap(value, keys) {\n  return keys.reduce(function (hashMap, key) {\n    hashMap[key] = value;\n    return hashMap;\n  }, {});\n}","import getBasePlacement from \"../utils/getBasePlacement.js\";\nimport getLayoutRect from \"../dom-utils/getLayoutRect.js\";\nimport contains from \"../dom-utils/contains.js\";\nimport getOffsetParent from \"../dom-utils/getOffsetParent.js\";\nimport getMainAxisFromPlacement from \"../utils/getMainAxisFromPlacement.js\";\nimport { within } from \"../utils/within.js\";\nimport mergePaddingObject from \"../utils/mergePaddingObject.js\";\nimport expandToHashMap from \"../utils/expandToHashMap.js\";\nimport { left, right, basePlacements, top, bottom } from \"../enums.js\"; // eslint-disable-next-line import/no-unused-modules\n\nvar toPaddingObject = function toPaddingObject(padding, state) {\n  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {\n    placement: state.placement\n  })) : padding;\n  return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));\n};\n\nfunction arrow(_ref) {\n  var _state$modifiersData$;\n\n  var state = _ref.state,\n      name = _ref.name,\n      options = _ref.options;\n  var arrowElement = state.elements.arrow;\n  var popperOffsets = state.modifiersData.popperOffsets;\n  var basePlacement = getBasePlacement(state.placement);\n  var axis = getMainAxisFromPlacement(basePlacement);\n  var isVertical = [left, right].indexOf(basePlacement) >= 0;\n  var len = isVertical ? 'height' : 'width';\n\n  if (!arrowElement || !popperOffsets) {\n    return;\n  }\n\n  var paddingObject = toPaddingObject(options.padding, state);\n  var arrowRect = getLayoutRect(arrowElement);\n  var minProp = axis === 'y' ? top : left;\n  var maxProp = axis === 'y' ? bottom : right;\n  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];\n  var startDiff = popperOffsets[axis] - state.rects.reference[axis];\n  var arrowOffsetParent = getOffsetParent(arrowElement);\n  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is\n  // outside of the popper bounds\n\n  var min = paddingObject[minProp];\n  var max = clientSize - arrowRect[len] - paddingObject[maxProp];\n  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;\n  var offset = within(min, center, max); // Prevents breaking syntax highlighting...\n\n  var axisProp = axis;\n  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);\n}\n\nfunction effect(_ref2) {\n  var state = _ref2.state,\n      options = _ref2.options;\n  var _options$element = options.element,\n      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;\n\n  if (arrowElement == null) {\n    return;\n  } // CSS selector\n\n\n  if (typeof arrowElement === 'string') {\n    arrowElement = state.elements.popper.querySelector(arrowElement);\n\n    if (!arrowElement) {\n      return;\n    }\n  }\n\n  if (!contains(state.elements.popper, arrowElement)) {\n    return;\n  }\n\n  state.elements.arrow = arrowElement;\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'arrow',\n  enabled: true,\n  phase: 'main',\n  fn: arrow,\n  effect: effect,\n  requires: ['popperOffsets'],\n  requiresIfExists: ['preventOverflow']\n};","export default function getVariation(placement) {\n  return placement.split('-')[1];\n}","import { top, left, right, bottom, end } from \"../enums.js\";\nimport getOffsetParent from \"../dom-utils/getOffsetParent.js\";\nimport getWindow from \"../dom-utils/getWindow.js\";\nimport getDocumentElement from \"../dom-utils/getDocumentElement.js\";\nimport getComputedStyle from \"../dom-utils/getComputedStyle.js\";\nimport getBasePlacement from \"../utils/getBasePlacement.js\";\nimport getVariation from \"../utils/getVariation.js\";\nimport { round } from \"../utils/math.js\"; // eslint-disable-next-line import/no-unused-modules\n\nvar unsetSides = {\n  top: 'auto',\n  right: 'auto',\n  bottom: 'auto',\n  left: 'auto'\n}; // Round the offsets to the nearest suitable subpixel based on the DPR.\n// Zooming can change the DPR, but it seems to report a value that will\n// cleanly divide the values into the appropriate subpixels.\n\nfunction roundOffsetsByDPR(_ref, win) {\n  var x = _ref.x,\n      y = _ref.y;\n  var dpr = win.devicePixelRatio || 1;\n  return {\n    x: round(x * dpr) / dpr || 0,\n    y: round(y * dpr) / dpr || 0\n  };\n}\n\nexport function mapToStyles(_ref2) {\n  var _Object$assign2;\n\n  var popper = _ref2.popper,\n      popperRect = _ref2.popperRect,\n      placement = _ref2.placement,\n      variation = _ref2.variation,\n      offsets = _ref2.offsets,\n      position = _ref2.position,\n      gpuAcceleration = _ref2.gpuAcceleration,\n      adaptive = _ref2.adaptive,\n      roundOffsets = _ref2.roundOffsets,\n      isFixed = _ref2.isFixed;\n  var _offsets$x = offsets.x,\n      x = _offsets$x === void 0 ? 0 : _offsets$x,\n      _offsets$y = offsets.y,\n      y = _offsets$y === void 0 ? 0 : _offsets$y;\n\n  var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({\n    x: x,\n    y: y\n  }) : {\n    x: x,\n    y: y\n  };\n\n  x = _ref3.x;\n  y = _ref3.y;\n  var hasX = offsets.hasOwnProperty('x');\n  var hasY = offsets.hasOwnProperty('y');\n  var sideX = left;\n  var sideY = top;\n  var win = window;\n\n  if (adaptive) {\n    var offsetParent = getOffsetParent(popper);\n    var heightProp = 'clientHeight';\n    var widthProp = 'clientWidth';\n\n    if (offsetParent === getWindow(popper)) {\n      offsetParent = getDocumentElement(popper);\n\n      if (getComputedStyle(offsetParent).position !== 'static' && position === 'absolute') {\n        heightProp = 'scrollHeight';\n        widthProp = 'scrollWidth';\n      }\n    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it\n\n\n    offsetParent = offsetParent;\n\n    if (placement === top || (placement === left || placement === right) && variation === end) {\n      sideY = bottom;\n      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]\n      offsetParent[heightProp];\n      y -= offsetY - popperRect.height;\n      y *= gpuAcceleration ? 1 : -1;\n    }\n\n    if (placement === left || (placement === top || placement === bottom) && variation === end) {\n      sideX = right;\n      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]\n      offsetParent[widthProp];\n      x -= offsetX - popperRect.width;\n      x *= gpuAcceleration ? 1 : -1;\n    }\n  }\n\n  var commonStyles = Object.assign({\n    position: position\n  }, adaptive && unsetSides);\n\n  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({\n    x: x,\n    y: y\n  }, getWindow(popper)) : {\n    x: x,\n    y: y\n  };\n\n  x = _ref4.x;\n  y = _ref4.y;\n\n  if (gpuAcceleration) {\n    var _Object$assign;\n\n    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? \"translate(\" + x + \"px, \" + y + \"px)\" : \"translate3d(\" + x + \"px, \" + y + \"px, 0)\", _Object$assign));\n  }\n\n  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + \"px\" : '', _Object$assign2[sideX] = hasX ? x + \"px\" : '', _Object$assign2.transform = '', _Object$assign2));\n}\n\nfunction computeStyles(_ref5) {\n  var state = _ref5.state,\n      options = _ref5.options;\n  var _options$gpuAccelerat = options.gpuAcceleration,\n      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,\n      _options$adaptive = options.adaptive,\n      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,\n      _options$roundOffsets = options.roundOffsets,\n      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;\n  var commonStyles = {\n    placement: getBasePlacement(state.placement),\n    variation: getVariation(state.placement),\n    popper: state.elements.popper,\n    popperRect: state.rects.popper,\n    gpuAcceleration: gpuAcceleration,\n    isFixed: state.options.strategy === 'fixed'\n  };\n\n  if (state.modifiersData.popperOffsets != null) {\n    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {\n      offsets: state.modifiersData.popperOffsets,\n      position: state.options.strategy,\n      adaptive: adaptive,\n      roundOffsets: roundOffsets\n    })));\n  }\n\n  if (state.modifiersData.arrow != null) {\n    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {\n      offsets: state.modifiersData.arrow,\n      position: 'absolute',\n      adaptive: false,\n      roundOffsets: roundOffsets\n    })));\n  }\n\n  state.attributes.popper = Object.assign({}, state.attributes.popper, {\n    'data-popper-placement': state.placement\n  });\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'computeStyles',\n  enabled: true,\n  phase: 'beforeWrite',\n  fn: computeStyles,\n  data: {}\n};","import getWindow from \"../dom-utils/getWindow.js\"; // eslint-disable-next-line import/no-unused-modules\n\nvar passive = {\n  passive: true\n};\n\nfunction effect(_ref) {\n  var state = _ref.state,\n      instance = _ref.instance,\n      options = _ref.options;\n  var _options$scroll = options.scroll,\n      scroll = _options$scroll === void 0 ? true : _options$scroll,\n      _options$resize = options.resize,\n      resize = _options$resize === void 0 ? true : _options$resize;\n  var window = getWindow(state.elements.popper);\n  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);\n\n  if (scroll) {\n    scrollParents.forEach(function (scrollParent) {\n      scrollParent.addEventListener('scroll', instance.update, passive);\n    });\n  }\n\n  if (resize) {\n    window.addEventListener('resize', instance.update, passive);\n  }\n\n  return function () {\n    if (scroll) {\n      scrollParents.forEach(function (scrollParent) {\n        scrollParent.removeEventListener('scroll', instance.update, passive);\n      });\n    }\n\n    if (resize) {\n      window.removeEventListener('resize', instance.update, passive);\n    }\n  };\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'eventListeners',\n  enabled: true,\n  phase: 'write',\n  fn: function fn() {},\n  effect: effect,\n  data: {}\n};","var hash = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nexport default function getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash[matched];\n  });\n}","var hash = {\n  start: 'end',\n  end: 'start'\n};\nexport default function getOppositeVariationPlacement(placement) {\n  return placement.replace(/start|end/g, function (matched) {\n    return hash[matched];\n  });\n}","import getWindow from \"./getWindow.js\";\nexport default function getWindowScroll(node) {\n  var win = getWindow(node);\n  var scrollLeft = win.pageXOffset;\n  var scrollTop = win.pageYOffset;\n  return {\n    scrollLeft: scrollLeft,\n    scrollTop: scrollTop\n  };\n}","import getBoundingClientRect from \"./getBoundingClientRect.js\";\nimport getDocumentElement from \"./getDocumentElement.js\";\nimport getWindowScroll from \"./getWindowScroll.js\";\nexport default function getWindowScrollBarX(element) {\n  // If <html> has a CSS width greater than the viewport, then this will be\n  // incorrect for RTL.\n  // Popper 1 is broken in this case and never had a bug report so let's assume\n  // it's not an issue. I don't think anyone ever specifies width on <html>\n  // anyway.\n  // Browsers where the left scrollbar doesn't cause an issue report `0` for\n  // this (e.g. Edge 2019, IE11, Safari)\n  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;\n}","import getComputedStyle from \"./getComputedStyle.js\";\nexport default function isScrollParent(element) {\n  // Firefox wants us to check `-x` and `-y` variations as well\n  var _getComputedStyle = getComputedStyle(element),\n      overflow = _getComputedStyle.overflow,\n      overflowX = _getComputedStyle.overflowX,\n      overflowY = _getComputedStyle.overflowY;\n\n  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);\n}","import getParentNode from \"./getParentNode.js\";\nimport isScrollParent from \"./isScrollParent.js\";\nimport getNodeName from \"./getNodeName.js\";\nimport { isHTMLElement } from \"./instanceOf.js\";\nexport default function getScrollParent(node) {\n  if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {\n    // $FlowFixMe[incompatible-return]: assume body is always available\n    return node.ownerDocument.body;\n  }\n\n  if (isHTMLElement(node) && isScrollParent(node)) {\n    return node;\n  }\n\n  return getScrollParent(getParentNode(node));\n}","import getScrollParent from \"./getScrollParent.js\";\nimport getParentNode from \"./getParentNode.js\";\nimport getWindow from \"./getWindow.js\";\nimport isScrollParent from \"./isScrollParent.js\";\n/*\ngiven a DOM element, return the list of all scroll parents, up the list of ancesors\nuntil we get to the top window object. This list is what we attach scroll listeners\nto, because if any of these parent elements scroll, we'll need to re-calculate the\nreference element's position.\n*/\n\nexport default function listScrollParents(element, list) {\n  var _element$ownerDocumen;\n\n  if (list === void 0) {\n    list = [];\n  }\n\n  var scrollParent = getScrollParent(element);\n  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);\n  var win = getWindow(scrollParent);\n  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;\n  var updatedList = list.concat(target);\n  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here\n  updatedList.concat(listScrollParents(getParentNode(target)));\n}","export default function rectToClientRect(rect) {\n  return Object.assign({}, rect, {\n    left: rect.x,\n    top: rect.y,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  });\n}","import { viewport } from \"../enums.js\";\nimport getViewportRect from \"./getViewportRect.js\";\nimport getDocumentRect from \"./getDocumentRect.js\";\nimport listScrollParents from \"./listScrollParents.js\";\nimport getOffsetParent from \"./getOffsetParent.js\";\nimport getDocumentElement from \"./getDocumentElement.js\";\nimport getComputedStyle from \"./getComputedStyle.js\";\nimport { isElement, isHTMLElement } from \"./instanceOf.js\";\nimport getBoundingClientRect from \"./getBoundingClientRect.js\";\nimport getParentNode from \"./getParentNode.js\";\nimport contains from \"./contains.js\";\nimport getNodeName from \"./getNodeName.js\";\nimport rectToClientRect from \"../utils/rectToClientRect.js\";\nimport { max, min } from \"../utils/math.js\";\n\nfunction getInnerBoundingClientRect(element, strategy) {\n  var rect = getBoundingClientRect(element, false, strategy === 'fixed');\n  rect.top = rect.top + element.clientTop;\n  rect.left = rect.left + element.clientLeft;\n  rect.bottom = rect.top + element.clientHeight;\n  rect.right = rect.left + element.clientWidth;\n  rect.width = element.clientWidth;\n  rect.height = element.clientHeight;\n  rect.x = rect.left;\n  rect.y = rect.top;\n  return rect;\n}\n\nfunction getClientRectFromMixedType(element, clippingParent, strategy) {\n  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));\n} // A \"clipping parent\" is an overflowable container with the characteristic of\n// clipping (or hiding) overflowing elements with a position different from\n// `initial`\n\n\nfunction getClippingParents(element) {\n  var clippingParents = listScrollParents(getParentNode(element));\n  var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;\n  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;\n\n  if (!isElement(clipperElement)) {\n    return [];\n  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414\n\n\n  return clippingParents.filter(function (clippingParent) {\n    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';\n  });\n} // Gets the maximum area that the element is visible in due to any number of\n// clipping parents\n\n\nexport default function getClippingRect(element, boundary, rootBoundary, strategy) {\n  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);\n  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);\n  var firstClippingParent = clippingParents[0];\n  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {\n    var rect = getClientRectFromMixedType(element, clippingParent, strategy);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromMixedType(element, firstClippingParent, strategy));\n  clippingRect.width = clippingRect.right - clippingRect.left;\n  clippingRect.height = clippingRect.bottom - clippingRect.top;\n  clippingRect.x = clippingRect.left;\n  clippingRect.y = clippingRect.top;\n  return clippingRect;\n}","import getWindow from \"./getWindow.js\";\nimport getDocumentElement from \"./getDocumentElement.js\";\nimport getWindowScrollBarX from \"./getWindowScrollBarX.js\";\nimport isLayoutViewport from \"./isLayoutViewport.js\";\nexport default function getViewportRect(element, strategy) {\n  var win = getWindow(element);\n  var html = getDocumentElement(element);\n  var visualViewport = win.visualViewport;\n  var width = html.clientWidth;\n  var height = html.clientHeight;\n  var x = 0;\n  var y = 0;\n\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    var layoutViewport = isLayoutViewport();\n\n    if (layoutViewport || !layoutViewport && strategy === 'fixed') {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n\n  return {\n    width: width,\n    height: height,\n    x: x + getWindowScrollBarX(element),\n    y: y\n  };\n}","import getDocumentElement from \"./getDocumentElement.js\";\nimport getComputedStyle from \"./getComputedStyle.js\";\nimport getWindowScrollBarX from \"./getWindowScrollBarX.js\";\nimport getWindowScroll from \"./getWindowScroll.js\";\nimport { max } from \"../utils/math.js\"; // Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable\n\nexport default function getDocumentRect(element) {\n  var _element$ownerDocumen;\n\n  var html = getDocumentElement(element);\n  var winScroll = getWindowScroll(element);\n  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;\n  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);\n  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);\n  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);\n  var y = -winScroll.scrollTop;\n\n  if (getComputedStyle(body || html).direction === 'rtl') {\n    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;\n  }\n\n  return {\n    width: width,\n    height: height,\n    x: x,\n    y: y\n  };\n}","import getBasePlacement from \"./getBasePlacement.js\";\nimport getVariation from \"./getVariation.js\";\nimport getMainAxisFromPlacement from \"./getMainAxisFromPlacement.js\";\nimport { top, right, bottom, left, start, end } from \"../enums.js\";\nexport default function computeOffsets(_ref) {\n  var reference = _ref.reference,\n      element = _ref.element,\n      placement = _ref.placement;\n  var basePlacement = placement ? getBasePlacement(placement) : null;\n  var variation = placement ? getVariation(placement) : null;\n  var commonX = reference.x + reference.width / 2 - element.width / 2;\n  var commonY = reference.y + reference.height / 2 - element.height / 2;\n  var offsets;\n\n  switch (basePlacement) {\n    case top:\n      offsets = {\n        x: commonX,\n        y: reference.y - element.height\n      };\n      break;\n\n    case bottom:\n      offsets = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n\n    case right:\n      offsets = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n\n    case left:\n      offsets = {\n        x: reference.x - element.width,\n        y: commonY\n      };\n      break;\n\n    default:\n      offsets = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n\n  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;\n\n  if (mainAxis != null) {\n    var len = mainAxis === 'y' ? 'height' : 'width';\n\n    switch (variation) {\n      case start:\n        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);\n        break;\n\n      case end:\n        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);\n        break;\n\n      default:\n    }\n  }\n\n  return offsets;\n}","import getClippingRect from \"../dom-utils/getClippingRect.js\";\nimport getDocumentElement from \"../dom-utils/getDocumentElement.js\";\nimport getBoundingClientRect from \"../dom-utils/getBoundingClientRect.js\";\nimport computeOffsets from \"./computeOffsets.js\";\nimport rectToClientRect from \"./rectToClientRect.js\";\nimport { clippingParents, reference, popper, bottom, top, right, basePlacements, viewport } from \"../enums.js\";\nimport { isElement } from \"../dom-utils/instanceOf.js\";\nimport mergePaddingObject from \"./mergePaddingObject.js\";\nimport expandToHashMap from \"./expandToHashMap.js\"; // eslint-disable-next-line import/no-unused-modules\n\nexport default function detectOverflow(state, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$placement = _options.placement,\n      placement = _options$placement === void 0 ? state.placement : _options$placement,\n      _options$strategy = _options.strategy,\n      strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,\n      _options$boundary = _options.boundary,\n      boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,\n      _options$rootBoundary = _options.rootBoundary,\n      rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,\n      _options$elementConte = _options.elementContext,\n      elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,\n      _options$altBoundary = _options.altBoundary,\n      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,\n      _options$padding = _options.padding,\n      padding = _options$padding === void 0 ? 0 : _options$padding;\n  var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));\n  var altContext = elementContext === popper ? reference : popper;\n  var popperRect = state.rects.popper;\n  var element = state.elements[altBoundary ? altContext : elementContext];\n  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);\n  var referenceClientRect = getBoundingClientRect(state.elements.reference);\n  var popperOffsets = computeOffsets({\n    reference: referenceClientRect,\n    element: popperRect,\n    strategy: 'absolute',\n    placement: placement\n  });\n  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));\n  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect\n  // 0 or negative = within the clipping rect\n\n  var overflowOffsets = {\n    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,\n    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,\n    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,\n    right: elementClientRect.right - clippingClientRect.right + paddingObject.right\n  };\n  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element\n\n  if (elementContext === popper && offsetData) {\n    var offset = offsetData[placement];\n    Object.keys(overflowOffsets).forEach(function (key) {\n      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;\n      var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';\n      overflowOffsets[key] += offset[axis] * multiply;\n    });\n  }\n\n  return overflowOffsets;\n}","import getVariation from \"./getVariation.js\";\nimport { variationPlacements, basePlacements, placements as allPlacements } from \"../enums.js\";\nimport detectOverflow from \"./detectOverflow.js\";\nimport getBasePlacement from \"./getBasePlacement.js\";\nexport default function computeAutoPlacement(state, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      placement = _options.placement,\n      boundary = _options.boundary,\n      rootBoundary = _options.rootBoundary,\n      padding = _options.padding,\n      flipVariations = _options.flipVariations,\n      _options$allowedAutoP = _options.allowedAutoPlacements,\n      allowedAutoPlacements = _options$allowedAutoP === void 0 ? allPlacements : _options$allowedAutoP;\n  var variation = getVariation(placement);\n  var placements = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {\n    return getVariation(placement) === variation;\n  }) : basePlacements;\n  var allowedPlacements = placements.filter(function (placement) {\n    return allowedAutoPlacements.indexOf(placement) >= 0;\n  });\n\n  if (allowedPlacements.length === 0) {\n    allowedPlacements = placements;\n  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...\n\n\n  var overflows = allowedPlacements.reduce(function (acc, placement) {\n    acc[placement] = detectOverflow(state, {\n      placement: placement,\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      padding: padding\n    })[getBasePlacement(placement)];\n    return acc;\n  }, {});\n  return Object.keys(overflows).sort(function (a, b) {\n    return overflows[a] - overflows[b];\n  });\n}","import getOppositePlacement from \"../utils/getOppositePlacement.js\";\nimport getBasePlacement from \"../utils/getBasePlacement.js\";\nimport getOppositeVariationPlacement from \"../utils/getOppositeVariationPlacement.js\";\nimport detectOverflow from \"../utils/detectOverflow.js\";\nimport computeAutoPlacement from \"../utils/computeAutoPlacement.js\";\nimport { bottom, top, start, right, left, auto } from \"../enums.js\";\nimport getVariation from \"../utils/getVariation.js\"; // eslint-disable-next-line import/no-unused-modules\n\nfunction getExpandedFallbackPlacements(placement) {\n  if (getBasePlacement(placement) === auto) {\n    return [];\n  }\n\n  var oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];\n}\n\nfunction flip(_ref) {\n  var state = _ref.state,\n      options = _ref.options,\n      name = _ref.name;\n\n  if (state.modifiersData[name]._skip) {\n    return;\n  }\n\n  var _options$mainAxis = options.mainAxis,\n      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,\n      _options$altAxis = options.altAxis,\n      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,\n      specifiedFallbackPlacements = options.fallbackPlacements,\n      padding = options.padding,\n      boundary = options.boundary,\n      rootBoundary = options.rootBoundary,\n      altBoundary = options.altBoundary,\n      _options$flipVariatio = options.flipVariations,\n      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,\n      allowedAutoPlacements = options.allowedAutoPlacements;\n  var preferredPlacement = state.options.placement;\n  var basePlacement = getBasePlacement(preferredPlacement);\n  var isBasePlacement = basePlacement === preferredPlacement;\n  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));\n  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {\n    return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {\n      placement: placement,\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      padding: padding,\n      flipVariations: flipVariations,\n      allowedAutoPlacements: allowedAutoPlacements\n    }) : placement);\n  }, []);\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var checksMap = new Map();\n  var makeFallbackChecks = true;\n  var firstFittingPlacement = placements[0];\n\n  for (var i = 0; i < placements.length; i++) {\n    var placement = placements[i];\n\n    var _basePlacement = getBasePlacement(placement);\n\n    var isStartVariation = getVariation(placement) === start;\n    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;\n    var len = isVertical ? 'width' : 'height';\n    var overflow = detectOverflow(state, {\n      placement: placement,\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      altBoundary: altBoundary,\n      padding: padding\n    });\n    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;\n\n    if (referenceRect[len] > popperRect[len]) {\n      mainVariationSide = getOppositePlacement(mainVariationSide);\n    }\n\n    var altVariationSide = getOppositePlacement(mainVariationSide);\n    var checks = [];\n\n    if (checkMainAxis) {\n      checks.push(overflow[_basePlacement] <= 0);\n    }\n\n    if (checkAltAxis) {\n      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);\n    }\n\n    if (checks.every(function (check) {\n      return check;\n    })) {\n      firstFittingPlacement = placement;\n      makeFallbackChecks = false;\n      break;\n    }\n\n    checksMap.set(placement, checks);\n  }\n\n  if (makeFallbackChecks) {\n    // `2` may be desired in some cases – research later\n    var numberOfChecks = flipVariations ? 3 : 1;\n\n    var _loop = function _loop(_i) {\n      var fittingPlacement = placements.find(function (placement) {\n        var checks = checksMap.get(placement);\n\n        if (checks) {\n          return checks.slice(0, _i).every(function (check) {\n            return check;\n          });\n        }\n      });\n\n      if (fittingPlacement) {\n        firstFittingPlacement = fittingPlacement;\n        return \"break\";\n      }\n    };\n\n    for (var _i = numberOfChecks; _i > 0; _i--) {\n      var _ret = _loop(_i);\n\n      if (_ret === \"break\") break;\n    }\n  }\n\n  if (state.placement !== firstFittingPlacement) {\n    state.modifiersData[name]._skip = true;\n    state.placement = firstFittingPlacement;\n    state.reset = true;\n  }\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'flip',\n  enabled: true,\n  phase: 'main',\n  fn: flip,\n  requiresIfExists: ['offset'],\n  data: {\n    _skip: false\n  }\n};","import { top, bottom, left, right } from \"../enums.js\";\nimport detectOverflow from \"../utils/detectOverflow.js\";\n\nfunction getSideOffsets(overflow, rect, preventedOffsets) {\n  if (preventedOffsets === void 0) {\n    preventedOffsets = {\n      x: 0,\n      y: 0\n    };\n  }\n\n  return {\n    top: overflow.top - rect.height - preventedOffsets.y,\n    right: overflow.right - rect.width + preventedOffsets.x,\n    bottom: overflow.bottom - rect.height + preventedOffsets.y,\n    left: overflow.left - rect.width - preventedOffsets.x\n  };\n}\n\nfunction isAnySideFullyClipped(overflow) {\n  return [top, right, bottom, left].some(function (side) {\n    return overflow[side] >= 0;\n  });\n}\n\nfunction hide(_ref) {\n  var state = _ref.state,\n      name = _ref.name;\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var preventedOffsets = state.modifiersData.preventOverflow;\n  var referenceOverflow = detectOverflow(state, {\n    elementContext: 'reference'\n  });\n  var popperAltOverflow = detectOverflow(state, {\n    altBoundary: true\n  });\n  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);\n  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);\n  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);\n  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);\n  state.modifiersData[name] = {\n    referenceClippingOffsets: referenceClippingOffsets,\n    popperEscapeOffsets: popperEscapeOffsets,\n    isReferenceHidden: isReferenceHidden,\n    hasPopperEscaped: hasPopperEscaped\n  };\n  state.attributes.popper = Object.assign({}, state.attributes.popper, {\n    'data-popper-reference-hidden': isReferenceHidden,\n    'data-popper-escaped': hasPopperEscaped\n  });\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'hide',\n  enabled: true,\n  phase: 'main',\n  requiresIfExists: ['preventOverflow'],\n  fn: hide\n};","import getBasePlacement from \"../utils/getBasePlacement.js\";\nimport { top, left, right, placements } from \"../enums.js\"; // eslint-disable-next-line import/no-unused-modules\n\nexport function distanceAndSkiddingToXY(placement, rects, offset) {\n  var basePlacement = getBasePlacement(placement);\n  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;\n\n  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {\n    placement: placement\n  })) : offset,\n      skidding = _ref[0],\n      distance = _ref[1];\n\n  skidding = skidding || 0;\n  distance = (distance || 0) * invertDistance;\n  return [left, right].indexOf(basePlacement) >= 0 ? {\n    x: distance,\n    y: skidding\n  } : {\n    x: skidding,\n    y: distance\n  };\n}\n\nfunction offset(_ref2) {\n  var state = _ref2.state,\n      options = _ref2.options,\n      name = _ref2.name;\n  var _options$offset = options.offset,\n      offset = _options$offset === void 0 ? [0, 0] : _options$offset;\n  var data = placements.reduce(function (acc, placement) {\n    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);\n    return acc;\n  }, {});\n  var _data$state$placement = data[state.placement],\n      x = _data$state$placement.x,\n      y = _data$state$placement.y;\n\n  if (state.modifiersData.popperOffsets != null) {\n    state.modifiersData.popperOffsets.x += x;\n    state.modifiersData.popperOffsets.y += y;\n  }\n\n  state.modifiersData[name] = data;\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'offset',\n  enabled: true,\n  phase: 'main',\n  requires: ['popperOffsets'],\n  fn: offset\n};","import computeOffsets from \"../utils/computeOffsets.js\";\n\nfunction popperOffsets(_ref) {\n  var state = _ref.state,\n      name = _ref.name;\n  // Offsets are the actual position the popper needs to have to be\n  // properly positioned near its reference element\n  // This is the most basic placement, and will be adjusted by\n  // the modifiers in the next step\n  state.modifiersData[name] = computeOffsets({\n    reference: state.rects.reference,\n    element: state.rects.popper,\n    strategy: 'absolute',\n    placement: state.placement\n  });\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'popperOffsets',\n  enabled: true,\n  phase: 'read',\n  fn: popperOffsets,\n  data: {}\n};","import { top, left, right, bottom, start } from \"../enums.js\";\nimport getBasePlacement from \"../utils/getBasePlacement.js\";\nimport getMainAxisFromPlacement from \"../utils/getMainAxisFromPlacement.js\";\nimport getAltAxis from \"../utils/getAltAxis.js\";\nimport { within, withinMaxClamp } from \"../utils/within.js\";\nimport getLayoutRect from \"../dom-utils/getLayoutRect.js\";\nimport getOffsetParent from \"../dom-utils/getOffsetParent.js\";\nimport detectOverflow from \"../utils/detectOverflow.js\";\nimport getVariation from \"../utils/getVariation.js\";\nimport getFreshSideObject from \"../utils/getFreshSideObject.js\";\nimport { min as mathMin, max as mathMax } from \"../utils/math.js\";\n\nfunction preventOverflow(_ref) {\n  var state = _ref.state,\n      options = _ref.options,\n      name = _ref.name;\n  var _options$mainAxis = options.mainAxis,\n      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,\n      _options$altAxis = options.altAxis,\n      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,\n      boundary = options.boundary,\n      rootBoundary = options.rootBoundary,\n      altBoundary = options.altBoundary,\n      padding = options.padding,\n      _options$tether = options.tether,\n      tether = _options$tether === void 0 ? true : _options$tether,\n      _options$tetherOffset = options.tetherOffset,\n      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;\n  var overflow = detectOverflow(state, {\n    boundary: boundary,\n    rootBoundary: rootBoundary,\n    padding: padding,\n    altBoundary: altBoundary\n  });\n  var basePlacement = getBasePlacement(state.placement);\n  var variation = getVariation(state.placement);\n  var isBasePlacement = !variation;\n  var mainAxis = getMainAxisFromPlacement(basePlacement);\n  var altAxis = getAltAxis(mainAxis);\n  var popperOffsets = state.modifiersData.popperOffsets;\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {\n    placement: state.placement\n  })) : tetherOffset;\n  var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {\n    mainAxis: tetherOffsetValue,\n    altAxis: tetherOffsetValue\n  } : Object.assign({\n    mainAxis: 0,\n    altAxis: 0\n  }, tetherOffsetValue);\n  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;\n  var data = {\n    x: 0,\n    y: 0\n  };\n\n  if (!popperOffsets) {\n    return;\n  }\n\n  if (checkMainAxis) {\n    var _offsetModifierState$;\n\n    var mainSide = mainAxis === 'y' ? top : left;\n    var altSide = mainAxis === 'y' ? bottom : right;\n    var len = mainAxis === 'y' ? 'height' : 'width';\n    var offset = popperOffsets[mainAxis];\n    var min = offset + overflow[mainSide];\n    var max = offset - overflow[altSide];\n    var additive = tether ? -popperRect[len] / 2 : 0;\n    var minLen = variation === start ? referenceRect[len] : popperRect[len];\n    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go\n    // outside the reference bounds\n\n    var arrowElement = state.elements.arrow;\n    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {\n      width: 0,\n      height: 0\n    };\n    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();\n    var arrowPaddingMin = arrowPaddingObject[mainSide];\n    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want\n    // to include its full size in the calculation. If the reference is small\n    // and near the edge of a boundary, the popper can overflow even if the\n    // reference is not overflowing as well (e.g. virtual elements with no\n    // width or height)\n\n    var arrowLen = within(0, referenceRect[len], arrowRect[len]);\n    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;\n    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;\n    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);\n    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;\n    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;\n    var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;\n    var tetherMax = offset + maxOffset - offsetModifierValue;\n    var preventedOffset = within(tether ? mathMin(min, tetherMin) : min, offset, tether ? mathMax(max, tetherMax) : max);\n    popperOffsets[mainAxis] = preventedOffset;\n    data[mainAxis] = preventedOffset - offset;\n  }\n\n  if (checkAltAxis) {\n    var _offsetModifierState$2;\n\n    var _mainSide = mainAxis === 'x' ? top : left;\n\n    var _altSide = mainAxis === 'x' ? bottom : right;\n\n    var _offset = popperOffsets[altAxis];\n\n    var _len = altAxis === 'y' ? 'height' : 'width';\n\n    var _min = _offset + overflow[_mainSide];\n\n    var _max = _offset - overflow[_altSide];\n\n    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;\n\n    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;\n\n    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;\n\n    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;\n\n    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);\n\n    popperOffsets[altAxis] = _preventedOffset;\n    data[altAxis] = _preventedOffset - _offset;\n  }\n\n  state.modifiersData[name] = data;\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'preventOverflow',\n  enabled: true,\n  phase: 'main',\n  fn: preventOverflow,\n  requiresIfExists: ['offset']\n};","export default function getAltAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}","import getBoundingClientRect from \"./getBoundingClientRect.js\";\nimport getNodeScroll from \"./getNodeScroll.js\";\nimport getNodeName from \"./getNodeName.js\";\nimport { isHTMLElement } from \"./instanceOf.js\";\nimport getWindowScrollBarX from \"./getWindowScrollBarX.js\";\nimport getDocumentElement from \"./getDocumentElement.js\";\nimport isScrollParent from \"./isScrollParent.js\";\nimport { round } from \"../utils/math.js\";\n\nfunction isElementScaled(element) {\n  var rect = element.getBoundingClientRect();\n  var scaleX = round(rect.width) / element.offsetWidth || 1;\n  var scaleY = round(rect.height) / element.offsetHeight || 1;\n  return scaleX !== 1 || scaleY !== 1;\n} // Returns the composite rect of an element relative to its offsetParent.\n// Composite means it takes into account transforms as well as layout.\n\n\nexport default function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n\n  var isOffsetParentAnElement = isHTMLElement(offsetParent);\n  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);\n  var documentElement = getDocumentElement(offsetParent);\n  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);\n  var scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  var offsets = {\n    x: 0,\n    y: 0\n  };\n\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078\n    isScrollParent(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n\n    if (isHTMLElement(offsetParent)) {\n      offsets = getBoundingClientRect(offsetParent, true);\n      offsets.x += offsetParent.clientLeft;\n      offsets.y += offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n\n  return {\n    x: rect.left + scroll.scrollLeft - offsets.x,\n    y: rect.top + scroll.scrollTop - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n}","import getWindowScroll from \"./getWindowScroll.js\";\nimport getWindow from \"./getWindow.js\";\nimport { isHTMLElement } from \"./instanceOf.js\";\nimport getHTMLElementScroll from \"./getHTMLElementScroll.js\";\nexport default function getNodeScroll(node) {\n  if (node === getWindow(node) || !isHTMLElement(node)) {\n    return getWindowScroll(node);\n  } else {\n    return getHTMLElementScroll(node);\n  }\n}","export default function getHTMLElementScroll(element) {\n  return {\n    scrollLeft: element.scrollLeft,\n    scrollTop: element.scrollTop\n  };\n}","import { modifierPhases } from \"../enums.js\"; // source: https://stackoverflow.com/questions/49875255\n\nfunction order(modifiers) {\n  var map = new Map();\n  var visited = new Set();\n  var result = [];\n  modifiers.forEach(function (modifier) {\n    map.set(modifier.name, modifier);\n  }); // On visiting object, check for its dependencies and visit them recursively\n\n  function sort(modifier) {\n    visited.add(modifier.name);\n    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);\n    requires.forEach(function (dep) {\n      if (!visited.has(dep)) {\n        var depModifier = map.get(dep);\n\n        if (depModifier) {\n          sort(depModifier);\n        }\n      }\n    });\n    result.push(modifier);\n  }\n\n  modifiers.forEach(function (modifier) {\n    if (!visited.has(modifier.name)) {\n      // check for visited object\n      sort(modifier);\n    }\n  });\n  return result;\n}\n\nexport default function orderModifiers(modifiers) {\n  // order based on dependencies\n  var orderedModifiers = order(modifiers); // order based on phase\n\n  return modifierPhases.reduce(function (acc, phase) {\n    return acc.concat(orderedModifiers.filter(function (modifier) {\n      return modifier.phase === phase;\n    }));\n  }, []);\n}","import getCompositeRect from \"./dom-utils/getCompositeRect.js\";\nimport getLayoutRect from \"./dom-utils/getLayoutRect.js\";\nimport listScrollParents from \"./dom-utils/listScrollParents.js\";\nimport getOffsetParent from \"./dom-utils/getOffsetParent.js\";\nimport orderModifiers from \"./utils/orderModifiers.js\";\nimport debounce from \"./utils/debounce.js\";\nimport mergeByName from \"./utils/mergeByName.js\";\nimport detectOverflow from \"./utils/detectOverflow.js\";\nimport { isElement } from \"./dom-utils/instanceOf.js\";\nvar DEFAULT_OPTIONS = {\n  placement: 'bottom',\n  modifiers: [],\n  strategy: 'absolute'\n};\n\nfunction areValidElements() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return !args.some(function (element) {\n    return !(element && typeof element.getBoundingClientRect === 'function');\n  });\n}\n\nexport function popperGenerator(generatorOptions) {\n  if (generatorOptions === void 0) {\n    generatorOptions = {};\n  }\n\n  var _generatorOptions = generatorOptions,\n      _generatorOptions$def = _generatorOptions.defaultModifiers,\n      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,\n      _generatorOptions$def2 = _generatorOptions.defaultOptions,\n      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;\n  return function createPopper(reference, popper, options) {\n    if (options === void 0) {\n      options = defaultOptions;\n    }\n\n    var state = {\n      placement: 'bottom',\n      orderedModifiers: [],\n      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),\n      modifiersData: {},\n      elements: {\n        reference: reference,\n        popper: popper\n      },\n      attributes: {},\n      styles: {}\n    };\n    var effectCleanupFns = [];\n    var isDestroyed = false;\n    var instance = {\n      state: state,\n      setOptions: function setOptions(setOptionsAction) {\n        var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;\n        cleanupModifierEffects();\n        state.options = Object.assign({}, defaultOptions, state.options, options);\n        state.scrollParents = {\n          reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],\n          popper: listScrollParents(popper)\n        }; // Orders the modifiers based on their dependencies and `phase`\n        // properties\n\n        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers\n\n        state.orderedModifiers = orderedModifiers.filter(function (m) {\n          return m.enabled;\n        });\n        runModifierEffects();\n        return instance.update();\n      },\n      // Sync update – it will always be executed, even if not necessary. This\n      // is useful for low frequency updates where sync behavior simplifies the\n      // logic.\n      // For high frequency updates (e.g. `resize` and `scroll` events), always\n      // prefer the async Popper#update method\n      forceUpdate: function forceUpdate() {\n        if (isDestroyed) {\n          return;\n        }\n\n        var _state$elements = state.elements,\n            reference = _state$elements.reference,\n            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements\n        // anymore\n\n        if (!areValidElements(reference, popper)) {\n          return;\n        } // Store the reference and popper rects to be read by modifiers\n\n\n        state.rects = {\n          reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),\n          popper: getLayoutRect(popper)\n        }; // Modifiers have the ability to reset the current update cycle. The\n        // most common use case for this is the `flip` modifier changing the\n        // placement, which then needs to re-run all the modifiers, because the\n        // logic was previously ran for the previous placement and is therefore\n        // stale/incorrect\n\n        state.reset = false;\n        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier\n        // is filled with the initial data specified by the modifier. This means\n        // it doesn't persist and is fresh on each update.\n        // To ensure persistent data, use `${name}#persistent`\n\n        state.orderedModifiers.forEach(function (modifier) {\n          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);\n        });\n\n        for (var index = 0; index < state.orderedModifiers.length; index++) {\n          if (state.reset === true) {\n            state.reset = false;\n            index = -1;\n            continue;\n          }\n\n          var _state$orderedModifie = state.orderedModifiers[index],\n              fn = _state$orderedModifie.fn,\n              _state$orderedModifie2 = _state$orderedModifie.options,\n              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,\n              name = _state$orderedModifie.name;\n\n          if (typeof fn === 'function') {\n            state = fn({\n              state: state,\n              options: _options,\n              name: name,\n              instance: instance\n            }) || state;\n          }\n        }\n      },\n      // Async and optimistically optimized update – it will not be executed if\n      // not necessary (debounced to run at most once-per-tick)\n      update: debounce(function () {\n        return new Promise(function (resolve) {\n          instance.forceUpdate();\n          resolve(state);\n        });\n      }),\n      destroy: function destroy() {\n        cleanupModifierEffects();\n        isDestroyed = true;\n      }\n    };\n\n    if (!areValidElements(reference, popper)) {\n      return instance;\n    }\n\n    instance.setOptions(options).then(function (state) {\n      if (!isDestroyed && options.onFirstUpdate) {\n        options.onFirstUpdate(state);\n      }\n    }); // Modifiers have the ability to execute arbitrary code before the first\n    // update cycle runs. They will be executed in the same order as the update\n    // cycle. This is useful when a modifier adds some persistent data that\n    // other modifiers need to use, but the modifier is run after the dependent\n    // one.\n\n    function runModifierEffects() {\n      state.orderedModifiers.forEach(function (_ref) {\n        var name = _ref.name,\n            _ref$options = _ref.options,\n            options = _ref$options === void 0 ? {} : _ref$options,\n            effect = _ref.effect;\n\n        if (typeof effect === 'function') {\n          var cleanupFn = effect({\n            state: state,\n            name: name,\n            instance: instance,\n            options: options\n          });\n\n          var noopFn = function noopFn() {};\n\n          effectCleanupFns.push(cleanupFn || noopFn);\n        }\n      });\n    }\n\n    function cleanupModifierEffects() {\n      effectCleanupFns.forEach(function (fn) {\n        return fn();\n      });\n      effectCleanupFns = [];\n    }\n\n    return instance;\n  };\n}\nexport var createPopper = /*#__PURE__*/popperGenerator(); // eslint-disable-next-line import/no-unused-modules\n\nexport { detectOverflow };","export default function debounce(fn) {\n  var pending;\n  return function () {\n    if (!pending) {\n      pending = new Promise(function (resolve) {\n        Promise.resolve().then(function () {\n          pending = undefined;\n          resolve(fn());\n        });\n      });\n    }\n\n    return pending;\n  };\n}","export default function mergeByName(modifiers) {\n  var merged = modifiers.reduce(function (merged, current) {\n    var existing = merged[current.name];\n    merged[current.name] = existing ? Object.assign({}, existing, current, {\n      options: Object.assign({}, existing.options, current.options),\n      data: Object.assign({}, existing.data, current.data)\n    }) : current;\n    return merged;\n  }, {}); // IE11 does not support Object.values\n\n  return Object.keys(merged).map(function (key) {\n    return merged[key];\n  });\n}","import { popperGenerator, detectOverflow } from \"./createPopper.js\";\nimport eventListeners from \"./modifiers/eventListeners.js\";\nimport popperOffsets from \"./modifiers/popperOffsets.js\";\nimport computeStyles from \"./modifiers/computeStyles.js\";\nimport applyStyles from \"./modifiers/applyStyles.js\";\nvar defaultModifiers = [eventListeners, popperOffsets, computeStyles, applyStyles];\nvar createPopper = /*#__PURE__*/popperGenerator({\n  defaultModifiers: defaultModifiers\n}); // eslint-disable-next-line import/no-unused-modules\n\nexport { createPopper, popperGenerator, defaultModifiers, detectOverflow };","import { popperGenerator, detectOverflow } from \"./createPopper.js\";\nimport eventListeners from \"./modifiers/eventListeners.js\";\nimport popperOffsets from \"./modifiers/popperOffsets.js\";\nimport computeStyles from \"./modifiers/computeStyles.js\";\nimport applyStyles from \"./modifiers/applyStyles.js\";\nimport offset from \"./modifiers/offset.js\";\nimport flip from \"./modifiers/flip.js\";\nimport preventOverflow from \"./modifiers/preventOverflow.js\";\nimport arrow from \"./modifiers/arrow.js\";\nimport hide from \"./modifiers/hide.js\";\nvar defaultModifiers = [eventListeners, popperOffsets, computeStyles, applyStyles, offset, flip, preventOverflow, arrow, hide];\nvar createPopper = /*#__PURE__*/popperGenerator({\n  defaultModifiers: defaultModifiers\n}); // eslint-disable-next-line import/no-unused-modules\n\nexport { createPopper, popperGenerator, defaultModifiers, detectOverflow }; // eslint-disable-next-line import/no-unused-modules\n\nexport { createPopper as createPopperLite } from \"./popper-lite.js\"; // eslint-disable-next-line import/no-unused-modules\n\nexport * from \"./modifiers/index.js\";","/**\n * --------------------------------------------------------------------------\n * Bootstrap dropdown.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport * as Popper from '@popperjs/core'\nimport BaseComponent from './base-component.js'\nimport EventHandler from './dom/event-handler.js'\nimport Manipulator from './dom/manipulator.js'\nimport SelectorEngine from './dom/selector-engine.js'\nimport {\n  defineJQueryPlugin,\n  execute,\n  getElement,\n  getNextActiveElement,\n  isDisabled,\n  isElement,\n  isRTL,\n  isVisible,\n  noop\n} from './util/index.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'dropdown'\nconst DATA_KEY = 'bs.dropdown'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst DATA_API_KEY = '.data-api'\n\nconst ESCAPE_KEY = 'Escape'\nconst TAB_KEY = 'Tab'\nconst ARROW_UP_KEY = 'ArrowUp'\nconst ARROW_DOWN_KEY = 'ArrowDown'\nconst RIGHT_MOUSE_BUTTON = 2 // MouseEvent.button value for the secondary button, usually the right button\n\nconst EVENT_HIDE = `hide${EVENT_KEY}`\nconst EVENT_HIDDEN = `hidden${EVENT_KEY}`\nconst EVENT_SHOW = `show${EVENT_KEY}`\nconst EVENT_SHOWN = `shown${EVENT_KEY}`\nconst EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`\nconst EVENT_KEYDOWN_DATA_API = `keydown${EVENT_KEY}${DATA_API_KEY}`\nconst EVENT_KEYUP_DATA_API = `keyup${EVENT_KEY}${DATA_API_KEY}`\n\nconst CLASS_NAME_SHOW = 'show'\nconst CLASS_NAME_DROPUP = 'dropup'\nconst CLASS_NAME_DROPEND = 'dropend'\nconst CLASS_NAME_DROPSTART = 'dropstart'\nconst CLASS_NAME_DROPUP_CENTER = 'dropup-center'\nconst CLASS_NAME_DROPDOWN_CENTER = 'dropdown-center'\n\nconst SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"dropdown\"]:not(.disabled):not(:disabled)'\nconst SELECTOR_DATA_TOGGLE_SHOWN = `${SELECTOR_DATA_TOGGLE}.${CLASS_NAME_SHOW}`\nconst SELECTOR_MENU = '.dropdown-menu'\nconst SELECTOR_NAVBAR = '.navbar'\nconst SELECTOR_NAVBAR_NAV = '.navbar-nav'\nconst SELECTOR_VISIBLE_ITEMS = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)'\n\nconst PLACEMENT_TOP = isRTL() ? 'top-end' : 'top-start'\nconst PLACEMENT_TOPEND = isRTL() ? 'top-start' : 'top-end'\nconst PLACEMENT_BOTTOM = isRTL() ? 'bottom-end' : 'bottom-start'\nconst PLACEMENT_BOTTOMEND = isRTL() ? 'bottom-start' : 'bottom-end'\nconst PLACEMENT_RIGHT = isRTL() ? 'left-start' : 'right-start'\nconst PLACEMENT_LEFT = isRTL() ? 'right-start' : 'left-start'\nconst PLACEMENT_TOPCENTER = 'top'\nconst PLACEMENT_BOTTOMCENTER = 'bottom'\n\nconst Default = {\n  autoClose: true,\n  boundary: 'clippingParents',\n  display: 'dynamic',\n  offset: [0, 2],\n  popperConfig: null,\n  reference: 'toggle'\n}\n\nconst DefaultType = {\n  autoClose: '(boolean|string)',\n  boundary: '(string|element)',\n  display: 'string',\n  offset: '(array|string|function)',\n  popperConfig: '(null|object|function)',\n  reference: '(string|element|object)'\n}\n\n/**\n * Class definition\n */\n\nclass Dropdown extends BaseComponent {\n  constructor(element, config) {\n    super(element, config)\n\n    this._popper = null\n    this._parent = this._element.parentNode // dropdown wrapper\n    // TODO: v6 revert #37011 & change markup https://getbootstrap.com/docs/5.3/forms/input-group/\n    this._menu = SelectorEngine.next(this._element, SELECTOR_MENU)[0] ||\n      SelectorEngine.prev(this._element, SELECTOR_MENU)[0] ||\n      SelectorEngine.findOne(SELECTOR_MENU, this._parent)\n    this._inNavbar = this._detectNavbar()\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  toggle() {\n    return this._isShown() ? this.hide() : this.show()\n  }\n\n  show() {\n    if (isDisabled(this._element) || this._isShown()) {\n      return\n    }\n\n    const relatedTarget = {\n      relatedTarget: this._element\n    }\n\n    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW, relatedTarget)\n\n    if (showEvent.defaultPrevented) {\n      return\n    }\n\n    this._createPopper()\n\n    // If this is a touch-enabled device we add extra\n    // empty mouseover listeners to the body's immediate children;\n    // only needed because of broken event delegation on iOS\n    // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n    if ('ontouchstart' in document.documentElement && !this._parent.closest(SELECTOR_NAVBAR_NAV)) {\n      for (const element of [].concat(...document.body.children)) {\n        EventHandler.on(element, 'mouseover', noop)\n      }\n    }\n\n    this._element.focus()\n    this._element.setAttribute('aria-expanded', true)\n\n    this._menu.classList.add(CLASS_NAME_SHOW)\n    this._element.classList.add(CLASS_NAME_SHOW)\n    EventHandler.trigger(this._element, EVENT_SHOWN, relatedTarget)\n  }\n\n  hide() {\n    if (isDisabled(this._element) || !this._isShown()) {\n      return\n    }\n\n    const relatedTarget = {\n      relatedTarget: this._element\n    }\n\n    this._completeHide(relatedTarget)\n  }\n\n  dispose() {\n    if (this._popper) {\n      this._popper.destroy()\n    }\n\n    super.dispose()\n  }\n\n  update() {\n    this._inNavbar = this._detectNavbar()\n    if (this._popper) {\n      this._popper.update()\n    }\n  }\n\n  // Private\n  _completeHide(relatedTarget) {\n    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE, relatedTarget)\n    if (hideEvent.defaultPrevented) {\n      return\n    }\n\n    // If this is a touch-enabled device we remove the extra\n    // empty mouseover listeners we added for iOS support\n    if ('ontouchstart' in document.documentElement) {\n      for (const element of [].concat(...document.body.children)) {\n        EventHandler.off(element, 'mouseover', noop)\n      }\n    }\n\n    if (this._popper) {\n      this._popper.destroy()\n    }\n\n    this._menu.classList.remove(CLASS_NAME_SHOW)\n    this._element.classList.remove(CLASS_NAME_SHOW)\n    this._element.setAttribute('aria-expanded', 'false')\n    Manipulator.removeDataAttribute(this._menu, 'popper')\n    EventHandler.trigger(this._element, EVENT_HIDDEN, relatedTarget)\n\n    // Explicitly return focus to the trigger element\n    this._element.focus()\n  }\n\n  _getConfig(config) {\n    config = super._getConfig(config)\n\n    if (typeof config.reference === 'object' && !isElement(config.reference) &&\n      typeof config.reference.getBoundingClientRect !== 'function'\n    ) {\n      // Popper virtual elements require a getBoundingClientRect method\n      throw new TypeError(`${NAME.toUpperCase()}: Option \"reference\" provided type \"object\" without a required \"getBoundingClientRect\" method.`)\n    }\n\n    return config\n  }\n\n  _createPopper() {\n    if (typeof Popper === 'undefined') {\n      throw new TypeError('Bootstrap\\'s dropdowns require Popper (https://popper.js.org/docs/v2/)')\n    }\n\n    let referenceElement = this._element\n\n    if (this._config.reference === 'parent') {\n      referenceElement = this._parent\n    } else if (isElement(this._config.reference)) {\n      referenceElement = getElement(this._config.reference)\n    } else if (typeof this._config.reference === 'object') {\n      referenceElement = this._config.reference\n    }\n\n    const popperConfig = this._getPopperConfig()\n    this._popper = Popper.createPopper(referenceElement, this._menu, popperConfig)\n  }\n\n  _isShown() {\n    return this._menu.classList.contains(CLASS_NAME_SHOW)\n  }\n\n  _getPlacement() {\n    const parentDropdown = this._parent\n\n    if (parentDropdown.classList.contains(CLASS_NAME_DROPEND)) {\n      return PLACEMENT_RIGHT\n    }\n\n    if (parentDropdown.classList.contains(CLASS_NAME_DROPSTART)) {\n      return PLACEMENT_LEFT\n    }\n\n    if (parentDropdown.classList.contains(CLASS_NAME_DROPUP_CENTER)) {\n      return PLACEMENT_TOPCENTER\n    }\n\n    if (parentDropdown.classList.contains(CLASS_NAME_DROPDOWN_CENTER)) {\n      return PLACEMENT_BOTTOMCENTER\n    }\n\n    // We need to trim the value because custom properties can also include spaces\n    const isEnd = getComputedStyle(this._menu).getPropertyValue('--bs-position').trim() === 'end'\n\n    if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) {\n      return isEnd ? PLACEMENT_TOPEND : PLACEMENT_TOP\n    }\n\n    return isEnd ? PLACEMENT_BOTTOMEND : PLACEMENT_BOTTOM\n  }\n\n  _detectNavbar() {\n    return this._element.closest(SELECTOR_NAVBAR) !== null\n  }\n\n  _getOffset() {\n    const { offset } = this._config\n\n    if (typeof offset === 'string') {\n      return offset.split(',').map(value => Number.parseInt(value, 10))\n    }\n\n    if (typeof offset === 'function') {\n      return popperData => offset(popperData, this._element)\n    }\n\n    return offset\n  }\n\n  _getPopperConfig() {\n    const defaultBsPopperConfig = {\n      placement: this._getPlacement(),\n      modifiers: [{\n        name: 'preventOverflow',\n        options: {\n          boundary: this._config.boundary\n        }\n      },\n      {\n        name: 'offset',\n        options: {\n          offset: this._getOffset()\n        }\n      }]\n    }\n\n    // Disable Popper if we have a static display or Dropdown is in Navbar\n    if (this._inNavbar || this._config.display === 'static') {\n      Manipulator.setDataAttribute(this._menu, 'popper', 'static') // TODO: v6 remove\n      defaultBsPopperConfig.modifiers = [{\n        name: 'applyStyles',\n        enabled: false\n      }]\n    }\n\n    return {\n      ...defaultBsPopperConfig,\n      ...execute(this._config.popperConfig, [undefined, defaultBsPopperConfig])\n    }\n  }\n\n  _selectMenuItem({ key, target }) {\n    const items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, this._menu).filter(element => isVisible(element))\n\n    if (!items.length) {\n      return\n    }\n\n    // if target isn't included in items (e.g. when expanding the dropdown)\n    // allow cycling to get the last item in case key equals ARROW_UP_KEY\n    getNextActiveElement(items, target, key === ARROW_DOWN_KEY, !items.includes(target)).focus()\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Dropdown.getOrCreateInstance(this, config)\n\n      if (typeof config !== 'string') {\n        return\n      }\n\n      if (typeof data[config] === 'undefined') {\n        throw new TypeError(`No method named \"${config}\"`)\n      }\n\n      data[config]()\n    })\n  }\n\n  static clearMenus(event) {\n    if (event.button === RIGHT_MOUSE_BUTTON || (event.type === 'keyup' && event.key !== TAB_KEY)) {\n      return\n    }\n\n    const openToggles = SelectorEngine.find(SELECTOR_DATA_TOGGLE_SHOWN)\n\n    for (const toggle of openToggles) {\n      const context = Dropdown.getInstance(toggle)\n      if (!context || context._config.autoClose === false) {\n        continue\n      }\n\n      const composedPath = event.composedPath()\n      const isMenuTarget = composedPath.includes(context._menu)\n      if (\n        composedPath.includes(context._element) ||\n        (context._config.autoClose === 'inside' && !isMenuTarget) ||\n        (context._config.autoClose === 'outside' && isMenuTarget)\n      ) {\n        continue\n      }\n\n      // Tab navigation through the dropdown menu or events from contained inputs shouldn't close the menu\n      if (context._menu.contains(event.target) && ((event.type === 'keyup' && event.key === TAB_KEY) || /input|select|option|textarea|form/i.test(event.target.tagName))) {\n        continue\n      }\n\n      const relatedTarget = { relatedTarget: context._element }\n\n      if (event.type === 'click') {\n        relatedTarget.clickEvent = event\n      }\n\n      context._completeHide(relatedTarget)\n    }\n  }\n\n  static dataApiKeydownHandler(event) {\n    // If not an UP | DOWN | ESCAPE key => not a dropdown command\n    // If input/textarea && if key is other than ESCAPE => not a dropdown command\n\n    const isInput = /input|textarea/i.test(event.target.tagName)\n    const isEscapeEvent = event.key === ESCAPE_KEY\n    const isUpOrDownEvent = [ARROW_UP_KEY, ARROW_DOWN_KEY].includes(event.key)\n\n    if (!isUpOrDownEvent && !isEscapeEvent) {\n      return\n    }\n\n    if (isInput && !isEscapeEvent) {\n      return\n    }\n\n    event.preventDefault()\n\n    // TODO: v6 revert #37011 & change markup https://getbootstrap.com/docs/5.3/forms/input-group/\n    const getToggleButton = this.matches(SELECTOR_DATA_TOGGLE) ?\n      this :\n      (SelectorEngine.prev(this, SELECTOR_DATA_TOGGLE)[0] ||\n        SelectorEngine.next(this, SELECTOR_DATA_TOGGLE)[0] ||\n        SelectorEngine.findOne(SELECTOR_DATA_TOGGLE, event.delegateTarget.parentNode))\n\n    const instance = Dropdown.getOrCreateInstance(getToggleButton)\n\n    if (isUpOrDownEvent) {\n      event.stopPropagation()\n      instance.show()\n      instance._selectMenuItem(event)\n      return\n    }\n\n    if (instance._isShown()) { // else is escape and we check if it is shown\n      event.stopPropagation()\n      instance.hide()\n      getToggleButton.focus()\n    }\n  }\n}\n\n/**\n * Data API implementation\n */\n\nEventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE, Dropdown.dataApiKeydownHandler)\nEventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler)\nEventHandler.on(document, EVENT_CLICK_DATA_API, Dropdown.clearMenus)\nEventHandler.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus)\nEventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {\n  event.preventDefault()\n  Dropdown.getOrCreateInstance(this).toggle()\n})\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Dropdown)\n\nexport default Dropdown\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap util/backdrop.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport EventHandler from '../dom/event-handler.js'\nimport Config from './config.js'\nimport {\n  execute, executeAfterTransition, getElement, reflow\n} from './index.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'backdrop'\nconst CLASS_NAME_FADE = 'fade'\nconst CLASS_NAME_SHOW = 'show'\nconst EVENT_MOUSEDOWN = `mousedown.bs.${NAME}`\n\nconst Default = {\n  className: 'modal-backdrop',\n  clickCallback: null,\n  isAnimated: false,\n  isVisible: true, // if false, we use the backdrop helper without adding any element to the dom\n  rootElement: 'body' // give the choice to place backdrop under different elements\n}\n\nconst DefaultType = {\n  className: 'string',\n  clickCallback: '(function|null)',\n  isAnimated: 'boolean',\n  isVisible: 'boolean',\n  rootElement: '(element|string)'\n}\n\n/**\n * Class definition\n */\n\nclass Backdrop extends Config {\n  constructor(config) {\n    super()\n    this._config = this._getConfig(config)\n    this._isAppended = false\n    this._element = null\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  show(callback) {\n    if (!this._config.isVisible) {\n      execute(callback)\n      return\n    }\n\n    this._append()\n\n    const element = this._getElement()\n    if (this._config.isAnimated) {\n      reflow(element)\n    }\n\n    element.classList.add(CLASS_NAME_SHOW)\n\n    this._emulateAnimation(() => {\n      execute(callback)\n    })\n  }\n\n  hide(callback) {\n    if (!this._config.isVisible) {\n      execute(callback)\n      return\n    }\n\n    this._getElement().classList.remove(CLASS_NAME_SHOW)\n\n    this._emulateAnimation(() => {\n      this.dispose()\n      execute(callback)\n    })\n  }\n\n  dispose() {\n    if (!this._isAppended) {\n      return\n    }\n\n    EventHandler.off(this._element, EVENT_MOUSEDOWN)\n\n    this._element.remove()\n    this._isAppended = false\n  }\n\n  // Private\n  _getElement() {\n    if (!this._element) {\n      const backdrop = document.createElement('div')\n      backdrop.className = this._config.className\n      if (this._config.isAnimated) {\n        backdrop.classList.add(CLASS_NAME_FADE)\n      }\n\n      this._element = backdrop\n    }\n\n    return this._element\n  }\n\n  _configAfterMerge(config) {\n    // use getElement() with the default \"body\" to get a fresh Element on each instantiation\n    config.rootElement = getElement(config.rootElement)\n    return config\n  }\n\n  _append() {\n    if (this._isAppended) {\n      return\n    }\n\n    const element = this._getElement()\n    this._config.rootElement.append(element)\n\n    EventHandler.on(element, EVENT_MOUSEDOWN, () => {\n      execute(this._config.clickCallback)\n    })\n\n    this._isAppended = true\n  }\n\n  _emulateAnimation(callback) {\n    executeAfterTransition(callback, this._getElement(), this._config.isAnimated)\n  }\n}\n\nexport default Backdrop\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap util/focustrap.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport EventHandler from '../dom/event-handler.js'\nimport SelectorEngine from '../dom/selector-engine.js'\nimport Config from './config.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'focustrap'\nconst DATA_KEY = 'bs.focustrap'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst EVENT_FOCUSIN = `focusin${EVENT_KEY}`\nconst EVENT_KEYDOWN_TAB = `keydown.tab${EVENT_KEY}`\n\nconst TAB_KEY = 'Tab'\nconst TAB_NAV_FORWARD = 'forward'\nconst TAB_NAV_BACKWARD = 'backward'\n\nconst Default = {\n  autofocus: true,\n  trapElement: null // The element to trap focus inside of\n}\n\nconst DefaultType = {\n  autofocus: 'boolean',\n  trapElement: 'element'\n}\n\n/**\n * Class definition\n */\n\nclass FocusTrap extends Config {\n  constructor(config) {\n    super()\n    this._config = this._getConfig(config)\n    this._isActive = false\n    this._lastTabNavDirection = null\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  activate() {\n    if (this._isActive) {\n      return\n    }\n\n    if (this._config.autofocus) {\n      this._config.trapElement.focus()\n    }\n\n    EventHandler.off(document, EVENT_KEY) // guard against infinite focus loop\n    EventHandler.on(document, EVENT_FOCUSIN, event => this._handleFocusin(event))\n    EventHandler.on(document, EVENT_KEYDOWN_TAB, event => this._handleKeydown(event))\n\n    this._isActive = true\n  }\n\n  deactivate() {\n    if (!this._isActive) {\n      return\n    }\n\n    this._isActive = false\n    EventHandler.off(document, EVENT_KEY)\n  }\n\n  // Private\n  _handleFocusin(event) {\n    const { trapElement } = this._config\n\n    if (event.target === document || event.target === trapElement || trapElement.contains(event.target)) {\n      return\n    }\n\n    const elements = SelectorEngine.focusableChildren(trapElement)\n\n    if (elements.length === 0) {\n      trapElement.focus()\n    } else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) {\n      elements[elements.length - 1].focus()\n    } else {\n      elements[0].focus()\n    }\n  }\n\n  _handleKeydown(event) {\n    if (event.key !== TAB_KEY) {\n      return\n    }\n\n    this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD\n  }\n}\n\nexport default FocusTrap\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap util/scrollBar.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport Manipulator from '../dom/manipulator.js'\nimport SelectorEngine from '../dom/selector-engine.js'\nimport { isElement } from './index.js'\n\n/**\n * Constants\n */\n\nconst SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top'\nconst SELECTOR_STICKY_CONTENT = '.sticky-top'\nconst PROPERTY_PADDING = 'padding-right'\nconst PROPERTY_MARGIN = 'margin-right'\n\n/**\n * Class definition\n */\n\nclass ScrollBarHelper {\n  constructor() {\n    this._element = document.body\n  }\n\n  // Public\n  getWidth() {\n    // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes\n    const documentWidth = document.documentElement.clientWidth\n    return Math.abs(window.innerWidth - documentWidth)\n  }\n\n  hide() {\n    const width = this.getWidth()\n    this._disableOverFlow()\n    // give padding to element to balance the hidden scrollbar width\n    this._setElementAttributes(this._element, PROPERTY_PADDING, calculatedValue => calculatedValue + width)\n    // trick: We adjust positive paddingRight and negative marginRight to sticky-top elements to keep showing fullwidth\n    this._setElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING, calculatedValue => calculatedValue + width)\n    this._setElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN, calculatedValue => calculatedValue - width)\n  }\n\n  reset() {\n    this._resetElementAttributes(this._element, 'overflow')\n    this._resetElementAttributes(this._element, PROPERTY_PADDING)\n    this._resetElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING)\n    this._resetElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN)\n  }\n\n  isOverflowing() {\n    return this.getWidth() > 0\n  }\n\n  // Private\n  _disableOverFlow() {\n    this._saveInitialAttribute(this._element, 'overflow')\n    this._element.style.overflow = 'hidden'\n  }\n\n  _setElementAttributes(selector, styleProperty, callback) {\n    const scrollbarWidth = this.getWidth()\n    const manipulationCallBack = element => {\n      if (element !== this._element && window.innerWidth > element.clientWidth + scrollbarWidth) {\n        return\n      }\n\n      this._saveInitialAttribute(element, styleProperty)\n      const calculatedValue = window.getComputedStyle(element).getPropertyValue(styleProperty)\n      element.style.setProperty(styleProperty, `${callback(Number.parseFloat(calculatedValue))}px`)\n    }\n\n    this._applyManipulationCallback(selector, manipulationCallBack)\n  }\n\n  _saveInitialAttribute(element, styleProperty) {\n    const actualValue = element.style.getPropertyValue(styleProperty)\n    if (actualValue) {\n      Manipulator.setDataAttribute(element, styleProperty, actualValue)\n    }\n  }\n\n  _resetElementAttributes(selector, styleProperty) {\n    const manipulationCallBack = element => {\n      const value = Manipulator.getDataAttribute(element, styleProperty)\n      // We only want to remove the property if the value is `null`; the value can also be zero\n      if (value === null) {\n        element.style.removeProperty(styleProperty)\n        return\n      }\n\n      Manipulator.removeDataAttribute(element, styleProperty)\n      element.style.setProperty(styleProperty, value)\n    }\n\n    this._applyManipulationCallback(selector, manipulationCallBack)\n  }\n\n  _applyManipulationCallback(selector, callBack) {\n    if (isElement(selector)) {\n      callBack(selector)\n      return\n    }\n\n    for (const sel of SelectorEngine.find(selector, this._element)) {\n      callBack(sel)\n    }\n  }\n}\n\nexport default ScrollBarHelper\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap modal.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport BaseComponent from './base-component.js'\nimport EventHandler from './dom/event-handler.js'\nimport SelectorEngine from './dom/selector-engine.js'\nimport Backdrop from './util/backdrop.js'\nimport { enableDismissTrigger } from './util/component-functions.js'\nimport FocusTrap from './util/focustrap.js'\nimport {\n  defineJQueryPlugin, isRTL, isVisible, reflow\n} from './util/index.js'\nimport ScrollBarHelper from './util/scrollbar.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'modal'\nconst DATA_KEY = 'bs.modal'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst DATA_API_KEY = '.data-api'\nconst ESCAPE_KEY = 'Escape'\n\nconst EVENT_HIDE = `hide${EVENT_KEY}`\nconst EVENT_HIDE_PREVENTED = `hidePrevented${EVENT_KEY}`\nconst EVENT_HIDDEN = `hidden${EVENT_KEY}`\nconst EVENT_SHOW = `show${EVENT_KEY}`\nconst EVENT_SHOWN = `shown${EVENT_KEY}`\nconst EVENT_RESIZE = `resize${EVENT_KEY}`\nconst EVENT_CLICK_DISMISS = `click.dismiss${EVENT_KEY}`\nconst EVENT_MOUSEDOWN_DISMISS = `mousedown.dismiss${EVENT_KEY}`\nconst EVENT_KEYDOWN_DISMISS = `keydown.dismiss${EVENT_KEY}`\nconst EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`\n\nconst CLASS_NAME_OPEN = 'modal-open'\nconst CLASS_NAME_FADE = 'fade'\nconst CLASS_NAME_SHOW = 'show'\nconst CLASS_NAME_STATIC = 'modal-static'\n\nconst OPEN_SELECTOR = '.modal.show'\nconst SELECTOR_DIALOG = '.modal-dialog'\nconst SELECTOR_MODAL_BODY = '.modal-body'\nconst SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"modal\"]'\n\nconst Default = {\n  backdrop: true,\n  focus: true,\n  keyboard: true\n}\n\nconst DefaultType = {\n  backdrop: '(boolean|string)',\n  focus: 'boolean',\n  keyboard: 'boolean'\n}\n\n/**\n * Class definition\n */\n\nclass Modal extends BaseComponent {\n  constructor(element, config) {\n    super(element, config)\n\n    this._dialog = SelectorEngine.findOne(SELECTOR_DIALOG, this._element)\n    this._backdrop = this._initializeBackDrop()\n    this._focustrap = this._initializeFocusTrap()\n    this._isShown = false\n    this._isTransitioning = false\n    this._scrollBar = new ScrollBarHelper()\n\n    this._addEventListeners()\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  toggle(relatedTarget) {\n    return this._isShown ? this.hide() : this.show(relatedTarget)\n  }\n\n  show(relatedTarget) {\n    if (this._isShown || this._isTransitioning) {\n      return\n    }\n\n    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW, {\n      relatedTarget\n    })\n\n    if (showEvent.defaultPrevented) {\n      return\n    }\n\n    this._isShown = true\n    this._isTransitioning = true\n\n    this._scrollBar.hide()\n\n    document.body.classList.add(CLASS_NAME_OPEN)\n\n    this._adjustDialog()\n\n    this._backdrop.show(() => this._showElement(relatedTarget))\n  }\n\n  hide() {\n    if (!this._isShown || this._isTransitioning) {\n      return\n    }\n\n    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE)\n\n    if (hideEvent.defaultPrevented) {\n      return\n    }\n\n    this._isShown = false\n    this._isTransitioning = true\n    this._focustrap.deactivate()\n\n    this._element.classList.remove(CLASS_NAME_SHOW)\n\n    this._queueCallback(() => this._hideModal(), this._element, this._isAnimated())\n  }\n\n  dispose() {\n    EventHandler.off(window, EVENT_KEY)\n    EventHandler.off(this._dialog, EVENT_KEY)\n\n    this._backdrop.dispose()\n    this._focustrap.deactivate()\n\n    super.dispose()\n  }\n\n  handleUpdate() {\n    this._adjustDialog()\n  }\n\n  // Private\n  _initializeBackDrop() {\n    return new Backdrop({\n      isVisible: Boolean(this._config.backdrop), // 'static' option will be translated to true, and booleans will keep their value,\n      isAnimated: this._isAnimated()\n    })\n  }\n\n  _initializeFocusTrap() {\n    return new FocusTrap({\n      trapElement: this._element\n    })\n  }\n\n  _showElement(relatedTarget) {\n    // try to append dynamic modal\n    if (!document.body.contains(this._element)) {\n      document.body.append(this._element)\n    }\n\n    this._element.style.display = 'block'\n    this._element.removeAttribute('aria-hidden')\n    this._element.setAttribute('aria-modal', true)\n    this._element.setAttribute('role', 'dialog')\n    this._element.scrollTop = 0\n\n    const modalBody = SelectorEngine.findOne(SELECTOR_MODAL_BODY, this._dialog)\n    if (modalBody) {\n      modalBody.scrollTop = 0\n    }\n\n    reflow(this._element)\n\n    this._element.classList.add(CLASS_NAME_SHOW)\n\n    const transitionComplete = () => {\n      if (this._config.focus) {\n        this._focustrap.activate()\n      }\n\n      this._isTransitioning = false\n      EventHandler.trigger(this._element, EVENT_SHOWN, {\n        relatedTarget\n      })\n    }\n\n    this._queueCallback(transitionComplete, this._dialog, this._isAnimated())\n  }\n\n  _addEventListeners() {\n    EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, event => {\n      if (event.key !== ESCAPE_KEY) {\n        return\n      }\n\n      if (this._config.keyboard) {\n        this.hide()\n        return\n      }\n\n      this._triggerBackdropTransition()\n    })\n\n    EventHandler.on(window, EVENT_RESIZE, () => {\n      if (this._isShown && !this._isTransitioning) {\n        this._adjustDialog()\n      }\n    })\n\n    EventHandler.on(this._element, EVENT_MOUSEDOWN_DISMISS, event => {\n      // a bad trick to segregate clicks that may start inside dialog but end outside, and avoid listen to scrollbar clicks\n      EventHandler.one(this._element, EVENT_CLICK_DISMISS, event2 => {\n        if (this._element !== event.target || this._element !== event2.target) {\n          return\n        }\n\n        if (this._config.backdrop === 'static') {\n          this._triggerBackdropTransition()\n          return\n        }\n\n        if (this._config.backdrop) {\n          this.hide()\n        }\n      })\n    })\n  }\n\n  _hideModal() {\n    this._element.style.display = 'none'\n    this._element.setAttribute('aria-hidden', true)\n    this._element.removeAttribute('aria-modal')\n    this._element.removeAttribute('role')\n    this._isTransitioning = false\n\n    this._backdrop.hide(() => {\n      document.body.classList.remove(CLASS_NAME_OPEN)\n      this._resetAdjustments()\n      this._scrollBar.reset()\n      EventHandler.trigger(this._element, EVENT_HIDDEN)\n    })\n  }\n\n  _isAnimated() {\n    return this._element.classList.contains(CLASS_NAME_FADE)\n  }\n\n  _triggerBackdropTransition() {\n    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED)\n    if (hideEvent.defaultPrevented) {\n      return\n    }\n\n    const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight\n    const initialOverflowY = this._element.style.overflowY\n    // return if the following background transition hasn't yet completed\n    if (initialOverflowY === 'hidden' || this._element.classList.contains(CLASS_NAME_STATIC)) {\n      return\n    }\n\n    if (!isModalOverflowing) {\n      this._element.style.overflowY = 'hidden'\n    }\n\n    this._element.classList.add(CLASS_NAME_STATIC)\n    this._queueCallback(() => {\n      this._element.classList.remove(CLASS_NAME_STATIC)\n      this._queueCallback(() => {\n        this._element.style.overflowY = initialOverflowY\n      }, this._dialog)\n    }, this._dialog)\n\n    this._element.focus()\n  }\n\n  /**\n   * The following methods are used to handle overflowing modals\n   */\n\n  _adjustDialog() {\n    const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight\n    const scrollbarWidth = this._scrollBar.getWidth()\n    const isBodyOverflowing = scrollbarWidth > 0\n\n    if (isBodyOverflowing && !isModalOverflowing) {\n      const property = isRTL() ? 'paddingLeft' : 'paddingRight'\n      this._element.style[property] = `${scrollbarWidth}px`\n    }\n\n    if (!isBodyOverflowing && isModalOverflowing) {\n      const property = isRTL() ? 'paddingRight' : 'paddingLeft'\n      this._element.style[property] = `${scrollbarWidth}px`\n    }\n  }\n\n  _resetAdjustments() {\n    this._element.style.paddingLeft = ''\n    this._element.style.paddingRight = ''\n  }\n\n  // Static\n  static jQueryInterface(config, relatedTarget) {\n    return this.each(function () {\n      const data = Modal.getOrCreateInstance(this, config)\n\n      if (typeof config !== 'string') {\n        return\n      }\n\n      if (typeof data[config] === 'undefined') {\n        throw new TypeError(`No method named \"${config}\"`)\n      }\n\n      data[config](relatedTarget)\n    })\n  }\n}\n\n/**\n * Data API implementation\n */\n\nEventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {\n  const target = SelectorEngine.getElementFromSelector(this)\n\n  if (['A', 'AREA'].includes(this.tagName)) {\n    event.preventDefault()\n  }\n\n  EventHandler.one(target, EVENT_SHOW, showEvent => {\n    if (showEvent.defaultPrevented) {\n      // only register focus restorer if modal will actually get shown\n      return\n    }\n\n    EventHandler.one(target, EVENT_HIDDEN, () => {\n      if (isVisible(this)) {\n        this.focus()\n      }\n    })\n  })\n\n  // avoid conflict when clicking modal toggler while another one is open\n  const alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR)\n  if (alreadyOpen) {\n    Modal.getInstance(alreadyOpen).hide()\n  }\n\n  const data = Modal.getOrCreateInstance(target)\n\n  data.toggle(this)\n})\n\nenableDismissTrigger(Modal)\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Modal)\n\nexport default Modal\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap offcanvas.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport BaseComponent from './base-component.js'\nimport EventHandler from './dom/event-handler.js'\nimport SelectorEngine from './dom/selector-engine.js'\nimport Backdrop from './util/backdrop.js'\nimport { enableDismissTrigger } from './util/component-functions.js'\nimport FocusTrap from './util/focustrap.js'\nimport {\n  defineJQueryPlugin,\n  isDisabled,\n  isVisible\n} from './util/index.js'\nimport ScrollBarHelper from './util/scrollbar.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'offcanvas'\nconst DATA_KEY = 'bs.offcanvas'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst DATA_API_KEY = '.data-api'\nconst EVENT_LOAD_DATA_API = `load${EVENT_KEY}${DATA_API_KEY}`\nconst ESCAPE_KEY = 'Escape'\n\nconst CLASS_NAME_SHOW = 'show'\nconst CLASS_NAME_SHOWING = 'showing'\nconst CLASS_NAME_HIDING = 'hiding'\nconst CLASS_NAME_BACKDROP = 'offcanvas-backdrop'\nconst OPEN_SELECTOR = '.offcanvas.show'\n\nconst EVENT_SHOW = `show${EVENT_KEY}`\nconst EVENT_SHOWN = `shown${EVENT_KEY}`\nconst EVENT_HIDE = `hide${EVENT_KEY}`\nconst EVENT_HIDE_PREVENTED = `hidePrevented${EVENT_KEY}`\nconst EVENT_HIDDEN = `hidden${EVENT_KEY}`\nconst EVENT_RESIZE = `resize${EVENT_KEY}`\nconst EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`\nconst EVENT_KEYDOWN_DISMISS = `keydown.dismiss${EVENT_KEY}`\n\nconst SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"offcanvas\"]'\n\nconst Default = {\n  backdrop: true,\n  keyboard: true,\n  scroll: false\n}\n\nconst DefaultType = {\n  backdrop: '(boolean|string)',\n  keyboard: 'boolean',\n  scroll: 'boolean'\n}\n\n/**\n * Class definition\n */\n\nclass Offcanvas extends BaseComponent {\n  constructor(element, config) {\n    super(element, config)\n\n    this._isShown = false\n    this._backdrop = this._initializeBackDrop()\n    this._focustrap = this._initializeFocusTrap()\n    this._addEventListeners()\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  toggle(relatedTarget) {\n    return this._isShown ? this.hide() : this.show(relatedTarget)\n  }\n\n  show(relatedTarget) {\n    if (this._isShown) {\n      return\n    }\n\n    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW, { relatedTarget })\n\n    if (showEvent.defaultPrevented) {\n      return\n    }\n\n    this._isShown = true\n    this._backdrop.show()\n\n    if (!this._config.scroll) {\n      new ScrollBarHelper().hide()\n    }\n\n    this._element.setAttribute('aria-modal', true)\n    this._element.setAttribute('role', 'dialog')\n    this._element.classList.add(CLASS_NAME_SHOWING)\n\n    const completeCallBack = () => {\n      if (!this._config.scroll || this._config.backdrop) {\n        this._focustrap.activate()\n      }\n\n      this._element.classList.add(CLASS_NAME_SHOW)\n      this._element.classList.remove(CLASS_NAME_SHOWING)\n      EventHandler.trigger(this._element, EVENT_SHOWN, { relatedTarget })\n    }\n\n    this._queueCallback(completeCallBack, this._element, true)\n  }\n\n  hide() {\n    if (!this._isShown) {\n      return\n    }\n\n    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE)\n\n    if (hideEvent.defaultPrevented) {\n      return\n    }\n\n    this._focustrap.deactivate()\n    this._element.blur()\n    this._isShown = false\n    this._element.classList.add(CLASS_NAME_HIDING)\n    this._backdrop.hide()\n\n    const completeCallback = () => {\n      this._element.classList.remove(CLASS_NAME_SHOW, CLASS_NAME_HIDING)\n      this._element.removeAttribute('aria-modal')\n      this._element.removeAttribute('role')\n\n      if (!this._config.scroll) {\n        new ScrollBarHelper().reset()\n      }\n\n      EventHandler.trigger(this._element, EVENT_HIDDEN)\n    }\n\n    this._queueCallback(completeCallback, this._element, true)\n  }\n\n  dispose() {\n    this._backdrop.dispose()\n    this._focustrap.deactivate()\n    super.dispose()\n  }\n\n  // Private\n  _initializeBackDrop() {\n    const clickCallback = () => {\n      if (this._config.backdrop === 'static') {\n        EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED)\n        return\n      }\n\n      this.hide()\n    }\n\n    // 'static' option will be translated to true, and booleans will keep their value\n    const isVisible = Boolean(this._config.backdrop)\n\n    return new Backdrop({\n      className: CLASS_NAME_BACKDROP,\n      isVisible,\n      isAnimated: true,\n      rootElement: this._element.parentNode,\n      clickCallback: isVisible ? clickCallback : null\n    })\n  }\n\n  _initializeFocusTrap() {\n    return new FocusTrap({\n      trapElement: this._element\n    })\n  }\n\n  _addEventListeners() {\n    EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, event => {\n      if (event.key !== ESCAPE_KEY) {\n        return\n      }\n\n      if (this._config.keyboard) {\n        this.hide()\n        return\n      }\n\n      EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED)\n    })\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Offcanvas.getOrCreateInstance(this, config)\n\n      if (typeof config !== 'string') {\n        return\n      }\n\n      if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n        throw new TypeError(`No method named \"${config}\"`)\n      }\n\n      data[config](this)\n    })\n  }\n}\n\n/**\n * Data API implementation\n */\n\nEventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {\n  const target = SelectorEngine.getElementFromSelector(this)\n\n  if (['A', 'AREA'].includes(this.tagName)) {\n    event.preventDefault()\n  }\n\n  if (isDisabled(this)) {\n    return\n  }\n\n  EventHandler.one(target, EVENT_HIDDEN, () => {\n    // focus on trigger when it is closed\n    if (isVisible(this)) {\n      this.focus()\n    }\n  })\n\n  // avoid conflict when clicking a toggler of an offcanvas, while another is open\n  const alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR)\n  if (alreadyOpen && alreadyOpen !== target) {\n    Offcanvas.getInstance(alreadyOpen).hide()\n  }\n\n  const data = Offcanvas.getOrCreateInstance(target)\n  data.toggle(this)\n})\n\nEventHandler.on(window, EVENT_LOAD_DATA_API, () => {\n  for (const selector of SelectorEngine.find(OPEN_SELECTOR)) {\n    Offcanvas.getOrCreateInstance(selector).show()\n  }\n})\n\nEventHandler.on(window, EVENT_RESIZE, () => {\n  for (const element of SelectorEngine.find('[aria-modal][class*=show][class*=offcanvas-]')) {\n    if (getComputedStyle(element).position !== 'fixed') {\n      Offcanvas.getOrCreateInstance(element).hide()\n    }\n  }\n})\n\nenableDismissTrigger(Offcanvas)\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Offcanvas)\n\nexport default Offcanvas\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap util/sanitizer.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n// js-docs-start allow-list\nconst ARIA_ATTRIBUTE_PATTERN = /^aria-[\\w-]*$/i\n\nexport const DefaultAllowlist = {\n  // Global attributes allowed on any supplied element below.\n  '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],\n  a: ['target', 'href', 'title', 'rel'],\n  area: [],\n  b: [],\n  br: [],\n  col: [],\n  code: [],\n  dd: [],\n  div: [],\n  dl: [],\n  dt: [],\n  em: [],\n  hr: [],\n  h1: [],\n  h2: [],\n  h3: [],\n  h4: [],\n  h5: [],\n  h6: [],\n  i: [],\n  img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],\n  li: [],\n  ol: [],\n  p: [],\n  pre: [],\n  s: [],\n  small: [],\n  span: [],\n  sub: [],\n  sup: [],\n  strong: [],\n  u: [],\n  ul: []\n}\n// js-docs-end allow-list\n\nconst uriAttributes = new Set([\n  'background',\n  'cite',\n  'href',\n  'itemtype',\n  'longdesc',\n  'poster',\n  'src',\n  'xlink:href'\n])\n\n/**\n * A pattern that recognizes URLs that are safe wrt. XSS in URL navigation\n * contexts.\n *\n * Shout-out to Angular https://github.com/angular/angular/blob/15.2.8/packages/core/src/sanitization/url_sanitizer.ts#L38\n */\nconst SAFE_URL_PATTERN = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:/?#]*(?:[/?#]|$))/i\n\nconst allowedAttribute = (attribute, allowedAttributeList) => {\n  const attributeName = attribute.nodeName.toLowerCase()\n\n  if (allowedAttributeList.includes(attributeName)) {\n    if (uriAttributes.has(attributeName)) {\n      return Boolean(SAFE_URL_PATTERN.test(attribute.nodeValue))\n    }\n\n    return true\n  }\n\n  // Check if a regular expression validates the attribute.\n  return allowedAttributeList.filter(attributeRegex => attributeRegex instanceof RegExp)\n    .some(regex => regex.test(attributeName))\n}\n\nexport function sanitizeHtml(unsafeHtml, allowList, sanitizeFunction) {\n  if (!unsafeHtml.length) {\n    return unsafeHtml\n  }\n\n  if (sanitizeFunction && typeof sanitizeFunction === 'function') {\n    return sanitizeFunction(unsafeHtml)\n  }\n\n  const domParser = new window.DOMParser()\n  const createdDocument = domParser.parseFromString(unsafeHtml, 'text/html')\n  const elements = [].concat(...createdDocument.body.querySelectorAll('*'))\n\n  for (const element of elements) {\n    const elementName = element.nodeName.toLowerCase()\n\n    if (!Object.keys(allowList).includes(elementName)) {\n      element.remove()\n      continue\n    }\n\n    const attributeList = [].concat(...element.attributes)\n    const allowedAttributes = [].concat(allowList['*'] || [], allowList[elementName] || [])\n\n    for (const attribute of attributeList) {\n      if (!allowedAttribute(attribute, allowedAttributes)) {\n        element.removeAttribute(attribute.nodeName)\n      }\n    }\n  }\n\n  return createdDocument.body.innerHTML\n}\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap util/template-factory.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport SelectorEngine from '../dom/selector-engine.js'\nimport Config from './config.js'\nimport { DefaultAllowlist, sanitizeHtml } from './sanitizer.js'\nimport { execute, getElement, isElement } from './index.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'TemplateFactory'\n\nconst Default = {\n  allowList: DefaultAllowlist,\n  content: {}, // { selector : text ,  selector2 : text2 , }\n  extraClass: '',\n  html: false,\n  sanitize: true,\n  sanitizeFn: null,\n  template: '<div></div>'\n}\n\nconst DefaultType = {\n  allowList: 'object',\n  content: 'object',\n  extraClass: '(string|function)',\n  html: 'boolean',\n  sanitize: 'boolean',\n  sanitizeFn: '(null|function)',\n  template: 'string'\n}\n\nconst DefaultContentType = {\n  entry: '(string|element|function|null)',\n  selector: '(string|element)'\n}\n\n/**\n * Class definition\n */\n\nclass TemplateFactory extends Config {\n  constructor(config) {\n    super()\n    this._config = this._getConfig(config)\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  getContent() {\n    return Object.values(this._config.content)\n      .map(config => this._resolvePossibleFunction(config))\n      .filter(Boolean)\n  }\n\n  hasContent() {\n    return this.getContent().length > 0\n  }\n\n  changeContent(content) {\n    this._checkContent(content)\n    this._config.content = { ...this._config.content, ...content }\n    return this\n  }\n\n  toHtml() {\n    const templateWrapper = document.createElement('div')\n    templateWrapper.innerHTML = this._maybeSanitize(this._config.template)\n\n    for (const [selector, text] of Object.entries(this._config.content)) {\n      this._setContent(templateWrapper, text, selector)\n    }\n\n    const template = templateWrapper.children[0]\n    const extraClass = this._resolvePossibleFunction(this._config.extraClass)\n\n    if (extraClass) {\n      template.classList.add(...extraClass.split(' '))\n    }\n\n    return template\n  }\n\n  // Private\n  _typeCheckConfig(config) {\n    super._typeCheckConfig(config)\n    this._checkContent(config.content)\n  }\n\n  _checkContent(arg) {\n    for (const [selector, content] of Object.entries(arg)) {\n      super._typeCheckConfig({ selector, entry: content }, DefaultContentType)\n    }\n  }\n\n  _setContent(template, content, selector) {\n    const templateElement = SelectorEngine.findOne(selector, template)\n\n    if (!templateElement) {\n      return\n    }\n\n    content = this._resolvePossibleFunction(content)\n\n    if (!content) {\n      templateElement.remove()\n      return\n    }\n\n    if (isElement(content)) {\n      this._putElementInTemplate(getElement(content), templateElement)\n      return\n    }\n\n    if (this._config.html) {\n      templateElement.innerHTML = this._maybeSanitize(content)\n      return\n    }\n\n    templateElement.textContent = content\n  }\n\n  _maybeSanitize(arg) {\n    return this._config.sanitize ? sanitizeHtml(arg, this._config.allowList, this._config.sanitizeFn) : arg\n  }\n\n  _resolvePossibleFunction(arg) {\n    return execute(arg, [undefined, this])\n  }\n\n  _putElementInTemplate(element, templateElement) {\n    if (this._config.html) {\n      templateElement.innerHTML = ''\n      templateElement.append(element)\n      return\n    }\n\n    templateElement.textContent = element.textContent\n  }\n}\n\nexport default TemplateFactory\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap tooltip.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport * as Popper from '@popperjs/core'\nimport BaseComponent from './base-component.js'\nimport EventHandler from './dom/event-handler.js'\nimport Manipulator from './dom/manipulator.js'\nimport {\n  defineJQueryPlugin, execute, findShadowRoot, getElement, getUID, isRTL, noop\n} from './util/index.js'\nimport { DefaultAllowlist } from './util/sanitizer.js'\nimport TemplateFactory from './util/template-factory.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'tooltip'\nconst DISALLOWED_ATTRIBUTES = new Set(['sanitize', 'allowList', 'sanitizeFn'])\n\nconst CLASS_NAME_FADE = 'fade'\nconst CLASS_NAME_MODAL = 'modal'\nconst CLASS_NAME_SHOW = 'show'\n\nconst SELECTOR_TOOLTIP_INNER = '.tooltip-inner'\nconst SELECTOR_MODAL = `.${CLASS_NAME_MODAL}`\n\nconst EVENT_MODAL_HIDE = 'hide.bs.modal'\n\nconst TRIGGER_HOVER = 'hover'\nconst TRIGGER_FOCUS = 'focus'\nconst TRIGGER_CLICK = 'click'\nconst TRIGGER_MANUAL = 'manual'\n\nconst EVENT_HIDE = 'hide'\nconst EVENT_HIDDEN = 'hidden'\nconst EVENT_SHOW = 'show'\nconst EVENT_SHOWN = 'shown'\nconst EVENT_INSERTED = 'inserted'\nconst EVENT_CLICK = 'click'\nconst EVENT_FOCUSIN = 'focusin'\nconst EVENT_FOCUSOUT = 'focusout'\nconst EVENT_MOUSEENTER = 'mouseenter'\nconst EVENT_MOUSELEAVE = 'mouseleave'\n\nconst AttachmentMap = {\n  AUTO: 'auto',\n  TOP: 'top',\n  RIGHT: isRTL() ? 'left' : 'right',\n  BOTTOM: 'bottom',\n  LEFT: isRTL() ? 'right' : 'left'\n}\n\nconst Default = {\n  allowList: DefaultAllowlist,\n  animation: true,\n  boundary: 'clippingParents',\n  container: false,\n  customClass: '',\n  delay: 0,\n  fallbackPlacements: ['top', 'right', 'bottom', 'left'],\n  html: false,\n  offset: [0, 6],\n  placement: 'top',\n  popperConfig: null,\n  sanitize: true,\n  sanitizeFn: null,\n  selector: false,\n  template: '<div class=\"tooltip\" role=\"tooltip\">' +\n            '<div class=\"tooltip-arrow\"></div>' +\n            '<div class=\"tooltip-inner\"></div>' +\n            '</div>',\n  title: '',\n  trigger: 'hover focus'\n}\n\nconst DefaultType = {\n  allowList: 'object',\n  animation: 'boolean',\n  boundary: '(string|element)',\n  container: '(string|element|boolean)',\n  customClass: '(string|function)',\n  delay: '(number|object)',\n  fallbackPlacements: 'array',\n  html: 'boolean',\n  offset: '(array|string|function)',\n  placement: '(string|function)',\n  popperConfig: '(null|object|function)',\n  sanitize: 'boolean',\n  sanitizeFn: '(null|function)',\n  selector: '(string|boolean)',\n  template: 'string',\n  title: '(string|element|function)',\n  trigger: 'string'\n}\n\n/**\n * Class definition\n */\n\nclass Tooltip extends BaseComponent {\n  constructor(element, config) {\n    if (typeof Popper === 'undefined') {\n      throw new TypeError('Bootstrap\\'s tooltips require Popper (https://popper.js.org/docs/v2/)')\n    }\n\n    super(element, config)\n\n    // Private\n    this._isEnabled = true\n    this._timeout = 0\n    this._isHovered = null\n    this._activeTrigger = {}\n    this._popper = null\n    this._templateFactory = null\n    this._newContent = null\n\n    // Protected\n    this.tip = null\n\n    this._setListeners()\n\n    if (!this._config.selector) {\n      this._fixTitle()\n    }\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  enable() {\n    this._isEnabled = true\n  }\n\n  disable() {\n    this._isEnabled = false\n  }\n\n  toggleEnabled() {\n    this._isEnabled = !this._isEnabled\n  }\n\n  toggle() {\n    if (!this._isEnabled) {\n      return\n    }\n\n    if (this._isShown()) {\n      this._leave()\n      return\n    }\n\n    this._enter()\n  }\n\n  dispose() {\n    clearTimeout(this._timeout)\n\n    EventHandler.off(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler)\n\n    if (this._element.getAttribute('data-bs-original-title')) {\n      this._element.setAttribute('title', this._element.getAttribute('data-bs-original-title'))\n    }\n\n    this._disposePopper()\n    super.dispose()\n  }\n\n  show() {\n    if (this._element.style.display === 'none') {\n      throw new Error('Please use show on visible elements')\n    }\n\n    if (!(this._isWithContent() && this._isEnabled)) {\n      return\n    }\n\n    const showEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOW))\n    const shadowRoot = findShadowRoot(this._element)\n    const isInTheDom = (shadowRoot || this._element.ownerDocument.documentElement).contains(this._element)\n\n    if (showEvent.defaultPrevented || !isInTheDom) {\n      return\n    }\n\n    // TODO: v6 remove this or make it optional\n    this._disposePopper()\n\n    const tip = this._getTipElement()\n\n    this._element.setAttribute('aria-describedby', tip.getAttribute('id'))\n\n    const { container } = this._config\n\n    if (!this._element.ownerDocument.documentElement.contains(this.tip)) {\n      container.append(tip)\n      EventHandler.trigger(this._element, this.constructor.eventName(EVENT_INSERTED))\n    }\n\n    this._popper = this._createPopper(tip)\n\n    tip.classList.add(CLASS_NAME_SHOW)\n\n    // If this is a touch-enabled device we add extra\n    // empty mouseover listeners to the body's immediate children;\n    // only needed because of broken event delegation on iOS\n    // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n    if ('ontouchstart' in document.documentElement) {\n      for (const element of [].concat(...document.body.children)) {\n        EventHandler.on(element, 'mouseover', noop)\n      }\n    }\n\n    const complete = () => {\n      EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOWN))\n\n      if (this._isHovered === false) {\n        this._leave()\n      }\n\n      this._isHovered = false\n    }\n\n    this._queueCallback(complete, this.tip, this._isAnimated())\n  }\n\n  hide() {\n    if (!this._isShown()) {\n      return\n    }\n\n    const hideEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDE))\n    if (hideEvent.defaultPrevented) {\n      return\n    }\n\n    const tip = this._getTipElement()\n    tip.classList.remove(CLASS_NAME_SHOW)\n\n    // If this is a touch-enabled device we remove the extra\n    // empty mouseover listeners we added for iOS support\n    if ('ontouchstart' in document.documentElement) {\n      for (const element of [].concat(...document.body.children)) {\n        EventHandler.off(element, 'mouseover', noop)\n      }\n    }\n\n    this._activeTrigger[TRIGGER_CLICK] = false\n    this._activeTrigger[TRIGGER_FOCUS] = false\n    this._activeTrigger[TRIGGER_HOVER] = false\n    this._isHovered = null // it is a trick to support manual triggering\n\n    const complete = () => {\n      if (this._isWithActiveTrigger()) {\n        return\n      }\n\n      if (!this._isHovered) {\n        this._disposePopper()\n      }\n\n      this._element.removeAttribute('aria-describedby')\n      EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDDEN))\n    }\n\n    this._queueCallback(complete, this.tip, this._isAnimated())\n  }\n\n  update() {\n    if (this._popper) {\n      this._popper.update()\n    }\n  }\n\n  // Protected\n  _isWithContent() {\n    return Boolean(this._getTitle())\n  }\n\n  _getTipElement() {\n    if (!this.tip) {\n      this.tip = this._createTipElement(this._newContent || this._getContentForTemplate())\n    }\n\n    return this.tip\n  }\n\n  _createTipElement(content) {\n    const tip = this._getTemplateFactory(content).toHtml()\n\n    // TODO: remove this check in v6\n    if (!tip) {\n      return null\n    }\n\n    tip.classList.remove(CLASS_NAME_FADE, CLASS_NAME_SHOW)\n    // TODO: v6 the following can be achieved with CSS only\n    tip.classList.add(`bs-${this.constructor.NAME}-auto`)\n\n    const tipId = getUID(this.constructor.NAME).toString()\n\n    tip.setAttribute('id', tipId)\n\n    if (this._isAnimated()) {\n      tip.classList.add(CLASS_NAME_FADE)\n    }\n\n    return tip\n  }\n\n  setContent(content) {\n    this._newContent = content\n    if (this._isShown()) {\n      this._disposePopper()\n      this.show()\n    }\n  }\n\n  _getTemplateFactory(content) {\n    if (this._templateFactory) {\n      this._templateFactory.changeContent(content)\n    } else {\n      this._templateFactory = new TemplateFactory({\n        ...this._config,\n        // the `content` var has to be after `this._config`\n        // to override config.content in case of popover\n        content,\n        extraClass: this._resolvePossibleFunction(this._config.customClass)\n      })\n    }\n\n    return this._templateFactory\n  }\n\n  _getContentForTemplate() {\n    return {\n      [SELECTOR_TOOLTIP_INNER]: this._getTitle()\n    }\n  }\n\n  _getTitle() {\n    return this._resolvePossibleFunction(this._config.title) || this._element.getAttribute('data-bs-original-title')\n  }\n\n  // Private\n  _initializeOnDelegatedTarget(event) {\n    return this.constructor.getOrCreateInstance(event.delegateTarget, this._getDelegateConfig())\n  }\n\n  _isAnimated() {\n    return this._config.animation || (this.tip && this.tip.classList.contains(CLASS_NAME_FADE))\n  }\n\n  _isShown() {\n    return this.tip && this.tip.classList.contains(CLASS_NAME_SHOW)\n  }\n\n  _createPopper(tip) {\n    const placement = execute(this._config.placement, [this, tip, this._element])\n    const attachment = AttachmentMap[placement.toUpperCase()]\n    return Popper.createPopper(this._element, tip, this._getPopperConfig(attachment))\n  }\n\n  _getOffset() {\n    const { offset } = this._config\n\n    if (typeof offset === 'string') {\n      return offset.split(',').map(value => Number.parseInt(value, 10))\n    }\n\n    if (typeof offset === 'function') {\n      return popperData => offset(popperData, this._element)\n    }\n\n    return offset\n  }\n\n  _resolvePossibleFunction(arg) {\n    return execute(arg, [this._element, this._element])\n  }\n\n  _getPopperConfig(attachment) {\n    const defaultBsPopperConfig = {\n      placement: attachment,\n      modifiers: [\n        {\n          name: 'flip',\n          options: {\n            fallbackPlacements: this._config.fallbackPlacements\n          }\n        },\n        {\n          name: 'offset',\n          options: {\n            offset: this._getOffset()\n          }\n        },\n        {\n          name: 'preventOverflow',\n          options: {\n            boundary: this._config.boundary\n          }\n        },\n        {\n          name: 'arrow',\n          options: {\n            element: `.${this.constructor.NAME}-arrow`\n          }\n        },\n        {\n          name: 'preSetPlacement',\n          enabled: true,\n          phase: 'beforeMain',\n          fn: data => {\n            // Pre-set Popper's placement attribute in order to read the arrow sizes properly.\n            // Otherwise, Popper mixes up the width and height dimensions since the initial arrow style is for top placement\n            this._getTipElement().setAttribute('data-popper-placement', data.state.placement)\n          }\n        }\n      ]\n    }\n\n    return {\n      ...defaultBsPopperConfig,\n      ...execute(this._config.popperConfig, [undefined, defaultBsPopperConfig])\n    }\n  }\n\n  _setListeners() {\n    const triggers = this._config.trigger.split(' ')\n\n    for (const trigger of triggers) {\n      if (trigger === 'click') {\n        EventHandler.on(this._element, this.constructor.eventName(EVENT_CLICK), this._config.selector, event => {\n          const context = this._initializeOnDelegatedTarget(event)\n          context._activeTrigger[TRIGGER_CLICK] = !(context._isShown() && context._activeTrigger[TRIGGER_CLICK])\n          context.toggle()\n        })\n      } else if (trigger !== TRIGGER_MANUAL) {\n        const eventIn = trigger === TRIGGER_HOVER ?\n          this.constructor.eventName(EVENT_MOUSEENTER) :\n          this.constructor.eventName(EVENT_FOCUSIN)\n        const eventOut = trigger === TRIGGER_HOVER ?\n          this.constructor.eventName(EVENT_MOUSELEAVE) :\n          this.constructor.eventName(EVENT_FOCUSOUT)\n\n        EventHandler.on(this._element, eventIn, this._config.selector, event => {\n          const context = this._initializeOnDelegatedTarget(event)\n          context._activeTrigger[event.type === 'focusin' ? TRIGGER_FOCUS : TRIGGER_HOVER] = true\n          context._enter()\n        })\n        EventHandler.on(this._element, eventOut, this._config.selector, event => {\n          const context = this._initializeOnDelegatedTarget(event)\n          context._activeTrigger[event.type === 'focusout' ? TRIGGER_FOCUS : TRIGGER_HOVER] =\n            context._element.contains(event.relatedTarget)\n\n          context._leave()\n        })\n      }\n    }\n\n    this._hideModalHandler = () => {\n      if (this._element) {\n        this.hide()\n      }\n    }\n\n    EventHandler.on(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler)\n  }\n\n  _fixTitle() {\n    const title = this._element.getAttribute('title')\n\n    if (!title) {\n      return\n    }\n\n    if (!this._element.getAttribute('aria-label') && !this._element.textContent.trim()) {\n      this._element.setAttribute('aria-label', title)\n    }\n\n    this._element.setAttribute('data-bs-original-title', title) // DO NOT USE IT. Is only for backwards compatibility\n    this._element.removeAttribute('title')\n  }\n\n  _enter() {\n    if (this._isShown() || this._isHovered) {\n      this._isHovered = true\n      return\n    }\n\n    this._isHovered = true\n\n    this._setTimeout(() => {\n      if (this._isHovered) {\n        this.show()\n      }\n    }, this._config.delay.show)\n  }\n\n  _leave() {\n    if (this._isWithActiveTrigger()) {\n      return\n    }\n\n    this._isHovered = false\n\n    this._setTimeout(() => {\n      if (!this._isHovered) {\n        this.hide()\n      }\n    }, this._config.delay.hide)\n  }\n\n  _setTimeout(handler, timeout) {\n    clearTimeout(this._timeout)\n    this._timeout = setTimeout(handler, timeout)\n  }\n\n  _isWithActiveTrigger() {\n    return Object.values(this._activeTrigger).includes(true)\n  }\n\n  _getConfig(config) {\n    const dataAttributes = Manipulator.getDataAttributes(this._element)\n\n    for (const dataAttribute of Object.keys(dataAttributes)) {\n      if (DISALLOWED_ATTRIBUTES.has(dataAttribute)) {\n        delete dataAttributes[dataAttribute]\n      }\n    }\n\n    config = {\n      ...dataAttributes,\n      ...(typeof config === 'object' && config ? config : {})\n    }\n    config = this._mergeConfigObj(config)\n    config = this._configAfterMerge(config)\n    this._typeCheckConfig(config)\n    return config\n  }\n\n  _configAfterMerge(config) {\n    config.container = config.container === false ? document.body : getElement(config.container)\n\n    if (typeof config.delay === 'number') {\n      config.delay = {\n        show: config.delay,\n        hide: config.delay\n      }\n    }\n\n    if (typeof config.title === 'number') {\n      config.title = config.title.toString()\n    }\n\n    if (typeof config.content === 'number') {\n      config.content = config.content.toString()\n    }\n\n    return config\n  }\n\n  _getDelegateConfig() {\n    const config = {}\n\n    for (const [key, value] of Object.entries(this._config)) {\n      if (this.constructor.Default[key] !== value) {\n        config[key] = value\n      }\n    }\n\n    config.selector = false\n    config.trigger = 'manual'\n\n    // In the future can be replaced with:\n    // const keysWithDifferentValues = Object.entries(this._config).filter(entry => this.constructor.Default[entry[0]] !== this._config[entry[0]])\n    // `Object.fromEntries(keysWithDifferentValues)`\n    return config\n  }\n\n  _disposePopper() {\n    if (this._popper) {\n      this._popper.destroy()\n      this._popper = null\n    }\n\n    if (this.tip) {\n      this.tip.remove()\n      this.tip = null\n    }\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Tooltip.getOrCreateInstance(this, config)\n\n      if (typeof config !== 'string') {\n        return\n      }\n\n      if (typeof data[config] === 'undefined') {\n        throw new TypeError(`No method named \"${config}\"`)\n      }\n\n      data[config]()\n    })\n  }\n}\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Tooltip)\n\nexport default Tooltip\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap popover.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport Tooltip from './tooltip.js'\nimport { defineJQueryPlugin } from './util/index.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'popover'\n\nconst SELECTOR_TITLE = '.popover-header'\nconst SELECTOR_CONTENT = '.popover-body'\n\nconst Default = {\n  ...Tooltip.Default,\n  content: '',\n  offset: [0, 8],\n  placement: 'right',\n  template: '<div class=\"popover\" role=\"tooltip\">' +\n    '<div class=\"popover-arrow\"></div>' +\n    '<h3 class=\"popover-header\"></h3>' +\n    '<div class=\"popover-body\"></div>' +\n    '</div>',\n  trigger: 'click'\n}\n\nconst DefaultType = {\n  ...Tooltip.DefaultType,\n  content: '(null|string|element|function)'\n}\n\n/**\n * Class definition\n */\n\nclass Popover extends Tooltip {\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Overrides\n  _isWithContent() {\n    return this._getTitle() || this._getContent()\n  }\n\n  // Private\n  _getContentForTemplate() {\n    return {\n      [SELECTOR_TITLE]: this._getTitle(),\n      [SELECTOR_CONTENT]: this._getContent()\n    }\n  }\n\n  _getContent() {\n    return this._resolvePossibleFunction(this._config.content)\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Popover.getOrCreateInstance(this, config)\n\n      if (typeof config !== 'string') {\n        return\n      }\n\n      if (typeof data[config] === 'undefined') {\n        throw new TypeError(`No method named \"${config}\"`)\n      }\n\n      data[config]()\n    })\n  }\n}\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Popover)\n\nexport default Popover\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap scrollspy.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport BaseComponent from './base-component.js'\nimport EventHandler from './dom/event-handler.js'\nimport SelectorEngine from './dom/selector-engine.js'\nimport {\n  defineJQueryPlugin, getElement, isDisabled, isVisible\n} from './util/index.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'scrollspy'\nconst DATA_KEY = 'bs.scrollspy'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst DATA_API_KEY = '.data-api'\n\nconst EVENT_ACTIVATE = `activate${EVENT_KEY}`\nconst EVENT_CLICK = `click${EVENT_KEY}`\nconst EVENT_LOAD_DATA_API = `load${EVENT_KEY}${DATA_API_KEY}`\n\nconst CLASS_NAME_DROPDOWN_ITEM = 'dropdown-item'\nconst CLASS_NAME_ACTIVE = 'active'\n\nconst SELECTOR_DATA_SPY = '[data-bs-spy=\"scroll\"]'\nconst SELECTOR_TARGET_LINKS = '[href]'\nconst SELECTOR_NAV_LIST_GROUP = '.nav, .list-group'\nconst SELECTOR_NAV_LINKS = '.nav-link'\nconst SELECTOR_NAV_ITEMS = '.nav-item'\nconst SELECTOR_LIST_ITEMS = '.list-group-item'\nconst SELECTOR_LINK_ITEMS = `${SELECTOR_NAV_LINKS}, ${SELECTOR_NAV_ITEMS} > ${SELECTOR_NAV_LINKS}, ${SELECTOR_LIST_ITEMS}`\nconst SELECTOR_DROPDOWN = '.dropdown'\nconst SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle'\n\nconst Default = {\n  offset: null, // TODO: v6 @deprecated, keep it for backwards compatibility reasons\n  rootMargin: '0px 0px -25%',\n  smoothScroll: false,\n  target: null,\n  threshold: [0.1, 0.5, 1]\n}\n\nconst DefaultType = {\n  offset: '(number|null)', // TODO v6 @deprecated, keep it for backwards compatibility reasons\n  rootMargin: 'string',\n  smoothScroll: 'boolean',\n  target: 'element',\n  threshold: 'array'\n}\n\n/**\n * Class definition\n */\n\nclass ScrollSpy extends BaseComponent {\n  constructor(element, config) {\n    super(element, config)\n\n    // this._element is the observablesContainer and config.target the menu links wrapper\n    this._targetLinks = new Map()\n    this._observableSections = new Map()\n    this._rootElement = getComputedStyle(this._element).overflowY === 'visible' ? null : this._element\n    this._activeTarget = null\n    this._observer = null\n    this._previousScrollData = {\n      visibleEntryTop: 0,\n      parentScrollTop: 0\n    }\n    this.refresh() // initialize\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  refresh() {\n    this._initializeTargetsAndObservables()\n    this._maybeEnableSmoothScroll()\n\n    if (this._observer) {\n      this._observer.disconnect()\n    } else {\n      this._observer = this._getNewObserver()\n    }\n\n    for (const section of this._observableSections.values()) {\n      this._observer.observe(section)\n    }\n  }\n\n  dispose() {\n    this._observer.disconnect()\n    super.dispose()\n  }\n\n  // Private\n  _configAfterMerge(config) {\n    // TODO: on v6 target should be given explicitly & remove the {target: 'ss-target'} case\n    config.target = getElement(config.target) || document.body\n\n    // TODO: v6 Only for backwards compatibility reasons. Use rootMargin only\n    config.rootMargin = config.offset ? `${config.offset}px 0px -30%` : config.rootMargin\n\n    if (typeof config.threshold === 'string') {\n      config.threshold = config.threshold.split(',').map(value => Number.parseFloat(value))\n    }\n\n    return config\n  }\n\n  _maybeEnableSmoothScroll() {\n    if (!this._config.smoothScroll) {\n      return\n    }\n\n    // unregister any previous listeners\n    EventHandler.off(this._config.target, EVENT_CLICK)\n\n    EventHandler.on(this._config.target, EVENT_CLICK, SELECTOR_TARGET_LINKS, event => {\n      const observableSection = this._observableSections.get(event.target.hash)\n      if (observableSection) {\n        event.preventDefault()\n        const root = this._rootElement || window\n        const height = observableSection.offsetTop - this._element.offsetTop\n        if (root.scrollTo) {\n          root.scrollTo({ top: height, behavior: 'smooth' })\n          return\n        }\n\n        // Chrome 60 doesn't support `scrollTo`\n        root.scrollTop = height\n      }\n    })\n  }\n\n  _getNewObserver() {\n    const options = {\n      root: this._rootElement,\n      threshold: this._config.threshold,\n      rootMargin: this._config.rootMargin\n    }\n\n    return new IntersectionObserver(entries => this._observerCallback(entries), options)\n  }\n\n  // The logic of selection\n  _observerCallback(entries) {\n    const targetElement = entry => this._targetLinks.get(`#${entry.target.id}`)\n    const activate = entry => {\n      this._previousScrollData.visibleEntryTop = entry.target.offsetTop\n      this._process(targetElement(entry))\n    }\n\n    const parentScrollTop = (this._rootElement || document.documentElement).scrollTop\n    const userScrollsDown = parentScrollTop >= this._previousScrollData.parentScrollTop\n    this._previousScrollData.parentScrollTop = parentScrollTop\n\n    for (const entry of entries) {\n      if (!entry.isIntersecting) {\n        this._activeTarget = null\n        this._clearActiveClass(targetElement(entry))\n\n        continue\n      }\n\n      const entryIsLowerThanPrevious = entry.target.offsetTop >= this._previousScrollData.visibleEntryTop\n      // if we are scrolling down, pick the bigger offsetTop\n      if (userScrollsDown && entryIsLowerThanPrevious) {\n        activate(entry)\n        // if parent isn't scrolled, let's keep the first visible item, breaking the iteration\n        if (!parentScrollTop) {\n          return\n        }\n\n        continue\n      }\n\n      // if we are scrolling up, pick the smallest offsetTop\n      if (!userScrollsDown && !entryIsLowerThanPrevious) {\n        activate(entry)\n      }\n    }\n  }\n\n  _initializeTargetsAndObservables() {\n    this._targetLinks = new Map()\n    this._observableSections = new Map()\n\n    const targetLinks = SelectorEngine.find(SELECTOR_TARGET_LINKS, this._config.target)\n\n    for (const anchor of targetLinks) {\n      // ensure that the anchor has an id and is not disabled\n      if (!anchor.hash || isDisabled(anchor)) {\n        continue\n      }\n\n      const observableSection = SelectorEngine.findOne(decodeURI(anchor.hash), this._element)\n\n      // ensure that the observableSection exists & is visible\n      if (isVisible(observableSection)) {\n        this._targetLinks.set(decodeURI(anchor.hash), anchor)\n        this._observableSections.set(anchor.hash, observableSection)\n      }\n    }\n  }\n\n  _process(target) {\n    if (this._activeTarget === target) {\n      return\n    }\n\n    this._clearActiveClass(this._config.target)\n    this._activeTarget = target\n    target.classList.add(CLASS_NAME_ACTIVE)\n    this._activateParents(target)\n\n    EventHandler.trigger(this._element, EVENT_ACTIVATE, { relatedTarget: target })\n  }\n\n  _activateParents(target) {\n    // Activate dropdown parents\n    if (target.classList.contains(CLASS_NAME_DROPDOWN_ITEM)) {\n      SelectorEngine.findOne(SELECTOR_DROPDOWN_TOGGLE, target.closest(SELECTOR_DROPDOWN))\n        .classList.add(CLASS_NAME_ACTIVE)\n      return\n    }\n\n    for (const listGroup of SelectorEngine.parents(target, SELECTOR_NAV_LIST_GROUP)) {\n      // Set triggered links parents as active\n      // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor\n      for (const item of SelectorEngine.prev(listGroup, SELECTOR_LINK_ITEMS)) {\n        item.classList.add(CLASS_NAME_ACTIVE)\n      }\n    }\n  }\n\n  _clearActiveClass(parent) {\n    parent.classList.remove(CLASS_NAME_ACTIVE)\n\n    const activeNodes = SelectorEngine.find(`${SELECTOR_TARGET_LINKS}.${CLASS_NAME_ACTIVE}`, parent)\n    for (const node of activeNodes) {\n      node.classList.remove(CLASS_NAME_ACTIVE)\n    }\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = ScrollSpy.getOrCreateInstance(this, config)\n\n      if (typeof config !== 'string') {\n        return\n      }\n\n      if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n        throw new TypeError(`No method named \"${config}\"`)\n      }\n\n      data[config]()\n    })\n  }\n}\n\n/**\n * Data API implementation\n */\n\nEventHandler.on(window, EVENT_LOAD_DATA_API, () => {\n  for (const spy of SelectorEngine.find(SELECTOR_DATA_SPY)) {\n    ScrollSpy.getOrCreateInstance(spy)\n  }\n})\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(ScrollSpy)\n\nexport default ScrollSpy\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap tab.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport BaseComponent from './base-component.js'\nimport EventHandler from './dom/event-handler.js'\nimport SelectorEngine from './dom/selector-engine.js'\nimport { defineJQueryPlugin, getNextActiveElement, isDisabled } from './util/index.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'tab'\nconst DATA_KEY = 'bs.tab'\nconst EVENT_KEY = `.${DATA_KEY}`\n\nconst EVENT_HIDE = `hide${EVENT_KEY}`\nconst EVENT_HIDDEN = `hidden${EVENT_KEY}`\nconst EVENT_SHOW = `show${EVENT_KEY}`\nconst EVENT_SHOWN = `shown${EVENT_KEY}`\nconst EVENT_CLICK_DATA_API = `click${EVENT_KEY}`\nconst EVENT_KEYDOWN = `keydown${EVENT_KEY}`\nconst EVENT_LOAD_DATA_API = `load${EVENT_KEY}`\n\nconst ARROW_LEFT_KEY = 'ArrowLeft'\nconst ARROW_RIGHT_KEY = 'ArrowRight'\nconst ARROW_UP_KEY = 'ArrowUp'\nconst ARROW_DOWN_KEY = 'ArrowDown'\nconst HOME_KEY = 'Home'\nconst END_KEY = 'End'\n\nconst CLASS_NAME_ACTIVE = 'active'\nconst CLASS_NAME_FADE = 'fade'\nconst CLASS_NAME_SHOW = 'show'\nconst CLASS_DROPDOWN = 'dropdown'\n\nconst SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle'\nconst SELECTOR_DROPDOWN_MENU = '.dropdown-menu'\nconst NOT_SELECTOR_DROPDOWN_TOGGLE = `:not(${SELECTOR_DROPDOWN_TOGGLE})`\n\nconst SELECTOR_TAB_PANEL = '.list-group, .nav, [role=\"tablist\"]'\nconst SELECTOR_OUTER = '.nav-item, .list-group-item'\nconst SELECTOR_INNER = `.nav-link${NOT_SELECTOR_DROPDOWN_TOGGLE}, .list-group-item${NOT_SELECTOR_DROPDOWN_TOGGLE}, [role=\"tab\"]${NOT_SELECTOR_DROPDOWN_TOGGLE}`\nconst SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"tab\"], [data-bs-toggle=\"pill\"], [data-bs-toggle=\"list\"]' // TODO: could only be `tab` in v6\nconst SELECTOR_INNER_ELEM = `${SELECTOR_INNER}, ${SELECTOR_DATA_TOGGLE}`\n\nconst SELECTOR_DATA_TOGGLE_ACTIVE = `.${CLASS_NAME_ACTIVE}[data-bs-toggle=\"tab\"], .${CLASS_NAME_ACTIVE}[data-bs-toggle=\"pill\"], .${CLASS_NAME_ACTIVE}[data-bs-toggle=\"list\"]`\n\n/**\n * Class definition\n */\n\nclass Tab extends BaseComponent {\n  constructor(element) {\n    super(element)\n    this._parent = this._element.closest(SELECTOR_TAB_PANEL)\n\n    if (!this._parent) {\n      return\n      // TODO: should throw exception in v6\n      // throw new TypeError(`${element.outerHTML} has not a valid parent ${SELECTOR_INNER_ELEM}`)\n    }\n\n    // Set up initial aria attributes\n    this._setInitialAttributes(this._parent, this._getChildren())\n\n    EventHandler.on(this._element, EVENT_KEYDOWN, event => this._keydown(event))\n  }\n\n  // Getters\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  show() { // Shows this elem and deactivate the active sibling if exists\n    const innerElem = this._element\n    if (this._elemIsActive(innerElem)) {\n      return\n    }\n\n    // Search for active tab on same parent to deactivate it\n    const active = this._getActiveElem()\n\n    const hideEvent = active ?\n      EventHandler.trigger(active, EVENT_HIDE, { relatedTarget: innerElem }) :\n      null\n\n    const showEvent = EventHandler.trigger(innerElem, EVENT_SHOW, { relatedTarget: active })\n\n    if (showEvent.defaultPrevented || (hideEvent && hideEvent.defaultPrevented)) {\n      return\n    }\n\n    this._deactivate(active, innerElem)\n    this._activate(innerElem, active)\n  }\n\n  // Private\n  _activate(element, relatedElem) {\n    if (!element) {\n      return\n    }\n\n    element.classList.add(CLASS_NAME_ACTIVE)\n\n    this._activate(SelectorEngine.getElementFromSelector(element)) // Search and activate/show the proper section\n\n    const complete = () => {\n      if (element.getAttribute('role') !== 'tab') {\n        element.classList.add(CLASS_NAME_SHOW)\n        return\n      }\n\n      element.removeAttribute('tabindex')\n      element.setAttribute('aria-selected', true)\n      this._toggleDropDown(element, true)\n      EventHandler.trigger(element, EVENT_SHOWN, {\n        relatedTarget: relatedElem\n      })\n    }\n\n    this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE))\n  }\n\n  _deactivate(element, relatedElem) {\n    if (!element) {\n      return\n    }\n\n    element.classList.remove(CLASS_NAME_ACTIVE)\n    element.blur()\n\n    this._deactivate(SelectorEngine.getElementFromSelector(element)) // Search and deactivate the shown section too\n\n    const complete = () => {\n      if (element.getAttribute('role') !== 'tab') {\n        element.classList.remove(CLASS_NAME_SHOW)\n        return\n      }\n\n      element.setAttribute('aria-selected', false)\n      element.setAttribute('tabindex', '-1')\n      this._toggleDropDown(element, false)\n      EventHandler.trigger(element, EVENT_HIDDEN, { relatedTarget: relatedElem })\n    }\n\n    this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE))\n  }\n\n  _keydown(event) {\n    if (!([ARROW_LEFT_KEY, ARROW_RIGHT_KEY, ARROW_UP_KEY, ARROW_DOWN_KEY, HOME_KEY, END_KEY].includes(event.key))) {\n      return\n    }\n\n    event.stopPropagation()// stopPropagation/preventDefault both added to support up/down keys without scrolling the page\n    event.preventDefault()\n\n    const children = this._getChildren().filter(element => !isDisabled(element))\n    let nextActiveElement\n\n    if ([HOME_KEY, END_KEY].includes(event.key)) {\n      nextActiveElement = children[event.key === HOME_KEY ? 0 : children.length - 1]\n    } else {\n      const isNext = [ARROW_RIGHT_KEY, ARROW_DOWN_KEY].includes(event.key)\n      nextActiveElement = getNextActiveElement(children, event.target, isNext, true)\n    }\n\n    if (nextActiveElement) {\n      nextActiveElement.focus({ preventScroll: true })\n      Tab.getOrCreateInstance(nextActiveElement).show()\n    }\n  }\n\n  _getChildren() { // collection of inner elements\n    return SelectorEngine.find(SELECTOR_INNER_ELEM, this._parent)\n  }\n\n  _getActiveElem() {\n    return this._getChildren().find(child => this._elemIsActive(child)) || null\n  }\n\n  _setInitialAttributes(parent, children) {\n    this._setAttributeIfNotExists(parent, 'role', 'tablist')\n\n    for (const child of children) {\n      this._setInitialAttributesOnChild(child)\n    }\n  }\n\n  _setInitialAttributesOnChild(child) {\n    child = this._getInnerElement(child)\n    const isActive = this._elemIsActive(child)\n    const outerElem = this._getOuterElement(child)\n    child.setAttribute('aria-selected', isActive)\n\n    if (outerElem !== child) {\n      this._setAttributeIfNotExists(outerElem, 'role', 'presentation')\n    }\n\n    if (!isActive) {\n      child.setAttribute('tabindex', '-1')\n    }\n\n    this._setAttributeIfNotExists(child, 'role', 'tab')\n\n    // set attributes to the related panel too\n    this._setInitialAttributesOnTargetPanel(child)\n  }\n\n  _setInitialAttributesOnTargetPanel(child) {\n    const target = SelectorEngine.getElementFromSelector(child)\n\n    if (!target) {\n      return\n    }\n\n    this._setAttributeIfNotExists(target, 'role', 'tabpanel')\n\n    if (child.id) {\n      this._setAttributeIfNotExists(target, 'aria-labelledby', `${child.id}`)\n    }\n  }\n\n  _toggleDropDown(element, open) {\n    const outerElem = this._getOuterElement(element)\n    if (!outerElem.classList.contains(CLASS_DROPDOWN)) {\n      return\n    }\n\n    const toggle = (selector, className) => {\n      const element = SelectorEngine.findOne(selector, outerElem)\n      if (element) {\n        element.classList.toggle(className, open)\n      }\n    }\n\n    toggle(SELECTOR_DROPDOWN_TOGGLE, CLASS_NAME_ACTIVE)\n    toggle(SELECTOR_DROPDOWN_MENU, CLASS_NAME_SHOW)\n    outerElem.setAttribute('aria-expanded', open)\n  }\n\n  _setAttributeIfNotExists(element, attribute, value) {\n    if (!element.hasAttribute(attribute)) {\n      element.setAttribute(attribute, value)\n    }\n  }\n\n  _elemIsActive(elem) {\n    return elem.classList.contains(CLASS_NAME_ACTIVE)\n  }\n\n  // Try to get the inner element (usually the .nav-link)\n  _getInnerElement(elem) {\n    return elem.matches(SELECTOR_INNER_ELEM) ? elem : SelectorEngine.findOne(SELECTOR_INNER_ELEM, elem)\n  }\n\n  // Try to get the outer element (usually the .nav-item)\n  _getOuterElement(elem) {\n    return elem.closest(SELECTOR_OUTER) || elem\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Tab.getOrCreateInstance(this)\n\n      if (typeof config !== 'string') {\n        return\n      }\n\n      if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n        throw new TypeError(`No method named \"${config}\"`)\n      }\n\n      data[config]()\n    })\n  }\n}\n\n/**\n * Data API implementation\n */\n\nEventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {\n  if (['A', 'AREA'].includes(this.tagName)) {\n    event.preventDefault()\n  }\n\n  if (isDisabled(this)) {\n    return\n  }\n\n  Tab.getOrCreateInstance(this).show()\n})\n\n/**\n * Initialize on focus\n */\nEventHandler.on(window, EVENT_LOAD_DATA_API, () => {\n  for (const element of SelectorEngine.find(SELECTOR_DATA_TOGGLE_ACTIVE)) {\n    Tab.getOrCreateInstance(element)\n  }\n})\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Tab)\n\nexport default Tab\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap toast.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport BaseComponent from './base-component.js'\nimport EventHandler from './dom/event-handler.js'\nimport { enableDismissTrigger } from './util/component-functions.js'\nimport { defineJQueryPlugin, reflow } from './util/index.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'toast'\nconst DATA_KEY = 'bs.toast'\nconst EVENT_KEY = `.${DATA_KEY}`\n\nconst EVENT_MOUSEOVER = `mouseover${EVENT_KEY}`\nconst EVENT_MOUSEOUT = `mouseout${EVENT_KEY}`\nconst EVENT_FOCUSIN = `focusin${EVENT_KEY}`\nconst EVENT_FOCUSOUT = `focusout${EVENT_KEY}`\nconst EVENT_HIDE = `hide${EVENT_KEY}`\nconst EVENT_HIDDEN = `hidden${EVENT_KEY}`\nconst EVENT_SHOW = `show${EVENT_KEY}`\nconst EVENT_SHOWN = `shown${EVENT_KEY}`\n\nconst CLASS_NAME_FADE = 'fade'\nconst CLASS_NAME_HIDE = 'hide' // @deprecated - kept here only for backwards compatibility\nconst CLASS_NAME_SHOW = 'show'\nconst CLASS_NAME_SHOWING = 'showing'\n\nconst DefaultType = {\n  animation: 'boolean',\n  autohide: 'boolean',\n  delay: 'number'\n}\n\nconst Default = {\n  animation: true,\n  autohide: true,\n  delay: 5000\n}\n\n/**\n * Class definition\n */\n\nclass Toast extends BaseComponent {\n  constructor(element, config) {\n    super(element, config)\n\n    this._timeout = null\n    this._hasMouseInteraction = false\n    this._hasKeyboardInteraction = false\n    this._setListeners()\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  show() {\n    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW)\n\n    if (showEvent.defaultPrevented) {\n      return\n    }\n\n    this._clearTimeout()\n\n    if (this._config.animation) {\n      this._element.classList.add(CLASS_NAME_FADE)\n    }\n\n    const complete = () => {\n      this._element.classList.remove(CLASS_NAME_SHOWING)\n      EventHandler.trigger(this._element, EVENT_SHOWN)\n\n      this._maybeScheduleHide()\n    }\n\n    this._element.classList.remove(CLASS_NAME_HIDE) // @deprecated\n    reflow(this._element)\n    this._element.classList.add(CLASS_NAME_SHOW, CLASS_NAME_SHOWING)\n\n    this._queueCallback(complete, this._element, this._config.animation)\n  }\n\n  hide() {\n    if (!this.isShown()) {\n      return\n    }\n\n    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE)\n\n    if (hideEvent.defaultPrevented) {\n      return\n    }\n\n    const complete = () => {\n      this._element.classList.add(CLASS_NAME_HIDE) // @deprecated\n      this._element.classList.remove(CLASS_NAME_SHOWING, CLASS_NAME_SHOW)\n      EventHandler.trigger(this._element, EVENT_HIDDEN)\n    }\n\n    this._element.classList.add(CLASS_NAME_SHOWING)\n    this._queueCallback(complete, this._element, this._config.animation)\n  }\n\n  dispose() {\n    this._clearTimeout()\n\n    if (this.isShown()) {\n      this._element.classList.remove(CLASS_NAME_SHOW)\n    }\n\n    super.dispose()\n  }\n\n  isShown() {\n    return this._element.classList.contains(CLASS_NAME_SHOW)\n  }\n\n  // Private\n  _maybeScheduleHide() {\n    if (!this._config.autohide) {\n      return\n    }\n\n    if (this._hasMouseInteraction || this._hasKeyboardInteraction) {\n      return\n    }\n\n    this._timeout = setTimeout(() => {\n      this.hide()\n    }, this._config.delay)\n  }\n\n  _onInteraction(event, isInteracting) {\n    switch (event.type) {\n      case 'mouseover':\n      case 'mouseout': {\n        this._hasMouseInteraction = isInteracting\n        break\n      }\n\n      case 'focusin':\n      case 'focusout': {\n        this._hasKeyboardInteraction = isInteracting\n        break\n      }\n\n      default: {\n        break\n      }\n    }\n\n    if (isInteracting) {\n      this._clearTimeout()\n      return\n    }\n\n    const nextElement = event.relatedTarget\n    if (this._element === nextElement || this._element.contains(nextElement)) {\n      return\n    }\n\n    this._maybeScheduleHide()\n  }\n\n  _setListeners() {\n    EventHandler.on(this._element, EVENT_MOUSEOVER, event => this._onInteraction(event, true))\n    EventHandler.on(this._element, EVENT_MOUSEOUT, event => this._onInteraction(event, false))\n    EventHandler.on(this._element, EVENT_FOCUSIN, event => this._onInteraction(event, true))\n    EventHandler.on(this._element, EVENT_FOCUSOUT, event => this._onInteraction(event, false))\n  }\n\n  _clearTimeout() {\n    clearTimeout(this._timeout)\n    this._timeout = null\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Toast.getOrCreateInstance(this, config)\n\n      if (typeof config === 'string') {\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(`No method named \"${config}\"`)\n        }\n\n        data[config](this)\n      }\n    })\n  }\n}\n\n/**\n * Data API implementation\n */\n\nenableDismissTrigger(Toast)\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Toast)\n\nexport default Toast\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap index.umd.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport Alert from './src/alert.js'\nimport Button from './src/button.js'\nimport Carousel from './src/carousel.js'\nimport Collapse from './src/collapse.js'\nimport Dropdown from './src/dropdown.js'\nimport Modal from './src/modal.js'\nimport Offcanvas from './src/offcanvas.js'\nimport Popover from './src/popover.js'\nimport ScrollSpy from './src/scrollspy.js'\nimport Tab from './src/tab.js'\nimport Toast from './src/toast.js'\nimport Tooltip from './src/tooltip.js'\n\nexport default {\n  Alert,\n  Button,\n  Carousel,\n  Collapse,\n  Dropdown,\n  Modal,\n  Offcanvas,\n  Popover,\n  ScrollSpy,\n  Tab,\n  Toast,\n  Tooltip\n}\n","/*\n    ChickenPaint\n    \n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\n    by Nicholas Sherlock / Chicken Smoothie.\n    \n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n    ChickenPaint is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ChickenPaint is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { _ } from \"../languages/lang.js\";\n\nimport EventEmitter from \"wolfy87-eventemitter\";\nimport key from \"../../lib/keymaster.js\";\n\nimport CPRect from \"../util/CPRect.js\";\nimport CPTransform from \"../util/CPTransform.js\";\nimport CPBezier from \"../util/CPBezier.js\";\nimport { throttle } from \"../util/throttle-debounce.js\";\nimport CPPolygon from \"../util/CPPolygon.js\";\nimport { setCanvasInterpolation } from \"../util/CPPolyfill.js\";\nimport CPVector from \"../util/CPVector.js\";\n\nimport ChickenPaint from \"../ChickenPaint.js\";\n\nimport CPBrushInfo from \"../engine/CPBrushInfo.js\";\nimport CPLayerGroup from \"../engine/CPLayerGroup.js\";\nimport CPMaskView from \"../engine/CPMaskView.js\";\n\nimport { createCheckerboardPattern } from \"./CPGUIUtils.js\";\nimport CPScrollbar from \"./CPScrollbar.js\";\nimport CPColor from \"../util/CPColor.js\";\nimport { setContrastingDrawStyle } from \"./CPGUIUtils.js\";\n\nfunction CPModeStack() {\n    this.modes = [];\n}\n\n/* We have two distinguished mode indexes which correspond to the CPDefaultMode and the mode that the user has selected\n * in the tool palette (the global drawing mode). On top of that are other transient modes.\n */\nCPModeStack.MODE_INDEX_DEFAULT = 0;\nCPModeStack.MODE_INDEX_USER = 1;\n\nCPModeStack.prototype.setMode = function (index, newMode) {\n    var oldMode = this.modes[index];\n\n    if (oldMode == newMode) {\n        return;\n    }\n\n    if (oldMode) {\n        oldMode.leave();\n    }\n\n    this.modes[index] = newMode;\n    newMode.enter();\n};\n\nCPModeStack.prototype.setDefaultMode = function (newMode) {\n    newMode.transient = false;\n    newMode.capture = false;\n\n    this.setMode(CPModeStack.MODE_INDEX_DEFAULT, newMode);\n};\n\nCPModeStack.prototype.setUserMode = function (newMode) {\n    // Leave any transient modes that were on top of the user mode\n    for (var i = this.modes.length - 1; i > CPModeStack.MODE_INDEX_USER; i--) {\n        this.modes[i].leave();\n        this.modes.splice(i, 1);\n    }\n\n    newMode.transient = false;\n    newMode.capture = false;\n\n    this.setMode(CPModeStack.MODE_INDEX_USER, newMode);\n};\n\n/**\n * Deliver the event with the given name and array of parameters to the mode stack.\n *\n * @param event\n * @param params\n * @returns {boolean} True if any mode captured the event\n */\nCPModeStack.prototype.deliverEvent = function (event, params) {\n    for (var i = this.modes.length - 1; i >= 0; i--) {\n        var mode = this.modes[i];\n\n        if (\n            mode[event].apply(mode, params) ||\n            (mode.capture && event != \"paint\")\n        ) {\n            /* If the event was handled, don't try to deliver it to anything further up the stack */\n            return true;\n        }\n    }\n\n    return false;\n};\n\n// We can call these routines to deliver events that bubble up the mode stack\nfor (let eventName of [\"mouseDown\", \"mouseUp\"]) {\n    CPModeStack.prototype[eventName] = function (e, button, pressure) {\n        this.deliverEvent(eventName, [e, button, pressure]);\n    };\n}\n\nfor (let eventName of [\"mouseDrag\", \"mouseMove\"]) {\n    CPModeStack.prototype[eventName] = function (e, pressure) {\n        this.deliverEvent(eventName, [e, pressure]);\n    };\n}\n\nfor (let eventName of [\"keyDown\", \"keyUp\"]) {\n    CPModeStack.prototype[eventName] = function (e) {\n        if (this.deliverEvent(eventName, [e])) {\n            // Swallow handled keypresses\n            e.preventDefault();\n        }\n    };\n}\n\nCPModeStack.prototype.paint = function (context) {\n    this.deliverEvent(\"paint\", [context]);\n};\n\n/**\n * Add a mode to the top of the mode stack.\n *\n * @param mode {CPMode}\n * @param transient {boolean} Set to true if the mode is expected to remove itself from stack upon completion.\n */\nCPModeStack.prototype.push = function (mode, transient) {\n    var previousTop = this.peek();\n\n    if (previousTop) {\n        previousTop.suspend();\n    }\n\n    mode.transient = transient;\n    mode.capture = false;\n\n    mode.enter();\n\n    this.modes.push(mode);\n};\n\nCPModeStack.prototype.peek = function () {\n    if (this.modes.length > 0) {\n        return this.modes[this.modes.length - 1];\n    } else {\n        return null;\n    }\n};\n\n/**\n * Remove the node at the top of the stack and return the new top of the stack.\n *\n * @returns {*}\n */\nCPModeStack.prototype.pop = function () {\n    var outgoingMode = this.modes.pop(),\n        newTop = this.peek();\n\n    if (outgoingMode) {\n        outgoingMode.leave();\n    }\n\n    if (newTop) {\n        newTop.resume();\n    }\n\n    return newTop;\n};\n\nexport default function CPCanvas(controller) {\n    const BUTTON_PRIMARY = 0,\n        BUTTON_WHEEL = 1,\n        BUTTON_SECONDARY = 2,\n        MIN_ZOOM = 0.1,\n        MAX_ZOOM = 8.0,\n        CURSOR_DEFAULT = \"default\",\n        CURSOR_PANNABLE = \"grab\",\n        CURSOR_PANNING = \"grabbing\",\n        CURSOR_CROSSHAIR = \"crosshair\",\n        CURSOR_MOVE = \"move\",\n        CURSOR_NESW_RESIZE = \"nesw-resize\",\n        CURSOR_NWSE_RESIZE = \"nwse-resize\",\n        CURSOR_NS_RESIZE = \"ns-resize\",\n        CURSOR_EW_RESIZE = \"ew-resize\",\n        CURSOR_ZOOM_IN = \"zoom-in\";\n\n    let that = this,\n        canvasContainer = document.createElement(\"div\"),\n        canvasContainerTop = document.createElement(\"div\"),\n        canvasContainerBottom = document.createElement(\"div\"),\n        // Our canvas that fills the entire screen\n        canvas = document.createElement(\"canvas\"),\n        canvasContext = canvas.getContext(\"2d\"),\n        // Our cache of the artwork's fusion to be drawn onto our main canvas using our current transform\n        artworkCanvas = document.createElement(\"canvas\"),\n        artworkCanvasContext = artworkCanvas.getContext(\"2d\"),\n        checkerboardPattern = createCheckerboardPattern(canvasContext),\n        artwork = controller.getArtwork(),\n        // Canvas transformations\n        zoom = 1,\n        offsetX = 0,\n        offsetY = 0,\n        canvasRotation = 0.0,\n        transform = new CPTransform(),\n        interpolation = false,\n        // Grid options\n        showGrid = false,\n        gridSize = 32,\n        mouseX = 0,\n        mouseY = 0,\n        mouseIn = false,\n        mouseDown = [false, false, false] /* Track each button independently */,\n        sawPen = false,\n        isPinchZoomAllowed = false,\n        isTouchInputAllowed = false,\n        sawTouchWithPressure = false,\n        /* The area of the document that should have its layers fused and repainted to the screen\n         * (i.e. an area modified by drawing tools).\n         *\n         * Initially set to the size of the artwork so we can repaint the whole thing.\n         */\n        artworkUpdateRegion = artwork.getBounds(),\n        /**\n         * The area of the canvas that should be repainted to the screen during the next repaint internal (in canvas\n         * coordinates).\n         */\n        repaintRegion = new CPRect(0, 0, 0, 0),\n        scheduledRepaint = false,\n        /**\n         * If we're viewing a single mask on its own instead of the document fusion, we store that view here.\n         *\n         * @type {CPMaskView}\n         */\n        maskView,\n        //\n        // Modes system: modes control the way the GUI is reacting to the user input\n        // All the tools are implemented through modes\n        //\n\n        defaultMode,\n        colorPickerMode,\n        panMode,\n        rotateCanvasMode,\n        floodFillMode,\n        gradientFillMode,\n        rectSelectionMode,\n        moveToolMode,\n        transformMode,\n        // this must correspond to the stroke modes defined in CPToolInfo\n        drawingModes = [],\n        modeStack = new CPModeStack(),\n        curDrawMode,\n        horzScroll = new CPScrollbar(false),\n        vertScroll = new CPScrollbar(true);\n\n    Math.sign =\n        Math.sign ||\n        function (x) {\n            x = +x; // convert to a number\n            if (x === 0 || isNaN(x)) {\n                return x;\n            }\n            return x > 0 ? 1 : -1;\n        };\n\n    // Parent class with empty event handlers for those drawing modes that don't need every event\n    function CPMode() {}\n\n    /**\n     * True if this mode will be exiting the mode stack as soon as the current interation is complete.\n     *\n     * @type {boolean}\n     */\n    CPMode.prototype.transient = false;\n\n    /**\n     * If true, no input events will be sent to any modes underneath this one (event stream is captured).\n     *\n     * Painting events will continue to bubble.\n     *\n     * @type {boolean}\n     */\n    CPMode.prototype.capture = false;\n\n    CPMode.prototype.enter = function () {\n        setCursor(CURSOR_DEFAULT);\n    };\n\n    CPMode.prototype.leave = function () {\n        this.capture = false;\n    };\n\n    CPMode.prototype.mouseMove =\n        CPMode.prototype.paint =\n        CPMode.prototype.mouseDown =\n        CPMode.prototype.mouseDrag =\n        CPMode.prototype.mouseUp =\n        CPMode.prototype.keyDown =\n        CPMode.prototype.suspend =\n        CPMode.prototype.resume =\n        CPMode.prototype.keyUp =\n            function () {};\n\n    //\n    // Default UI Mode when not doing anything: used to start the other modes\n    //\n\n    function CPDefaultMode() {}\n\n    CPDefaultMode.prototype = Object.create(CPMode.prototype);\n    CPDefaultMode.prototype.constructor = CPDefaultMode;\n\n    CPDefaultMode.prototype.mouseDown = function (e, button, pressure) {\n        var spacePressed = key.isPressed(\"space\");\n\n        if (\n            !spacePressed &&\n            (button == BUTTON_SECONDARY ||\n                (button == BUTTON_PRIMARY && e.altKey))\n        ) {\n            modeStack.push(colorPickerMode, true);\n            // Avoid infinite recursion by only delivering the event to the new mode (don't let it bubble back to us!)\n            modeStack.peek().mouseDown(e, button, pressure);\n        } else if (\n            !spacePressed &&\n            button == BUTTON_PRIMARY &&\n            !e.altKey &&\n            key.isPressed(\"r\")\n        ) {\n            modeStack.push(rotateCanvasMode, true);\n            modeStack.peek().mouseDown(e, button, pressure);\n        } else if (\n            button == BUTTON_WHEEL ||\n            (!e.altKey &&\n                !e.ctrlKey &&\n                !key.isPressed(\"z\") &&\n                spacePressed &&\n                button == BUTTON_PRIMARY)\n        ) {\n            modeStack.push(panMode, true);\n            modeStack.peek().mouseDown(e, button, pressure);\n        }\n    };\n\n    let previousMode = null; // 以前のモードを記憶して、あとで復帰させる\n    CPDefaultMode.prototype.keyDown = function (e) {\n        if (\n            !e.altKey &&\n            ((!e.ctrlKey && key.isPressed(\"z\")) ||\n                (e.ctrlKey && key.isPressed(\"space\")))\n        ) {\n            setCursor(CURSOR_ZOOM_IN);\n            // console.log(\"Zooming in with Ctrl+Space or Ctrl+Z\");\n\n            if (modeStack.peek() === curDrawMode) {\n                previousMode = curDrawMode;\n                modeStack.pop();\n            }\n            e.preventDefault();\n            return true;\n        } else if (\n            //回転\n            e.key.toLowerCase() === \"r\" &&\n            e.key !== \" \"\n        ) {\n            modeStack.push(rotateCanvasMode, true);\n            modeStack.peek().keyDown(e);\n            return true;\n        } else if (\n            e.key === \" \" &&\n            (!e.ctrlKey || e.key.toLowerCase() !== \"z\")\n        ) {\n            //スペースキーのみの時は通常のパン\n            // We can start the pan mode before the mouse button is even pressed, so that the \"grabbable\" cursor appears\n            modeStack.push(panMode, true);\n            modeStack.peek().keyDown(e);\n            e.preventDefault();\n            return true;\n        }\n\n        if (\n            modeStack.peek() === rectSelectionMode ||\n            modeStack.peek() === moveToolMode\n        ) {\n            if (e.key === \"Enter\") {\n                controller.actionPerformed({ action: \"CPTransform\" });\n                e.preventDefault();\n            }\n        } else if (\n            modeStack.peek() === panMode ||\n            modeStack.peek() === rotateCanvasMode\n        ) {\n            if (e.key === \"Enter\") {\n                controller.actionPerformed({\n                    action: \"CPResetZoomAndRotation\",\n                });\n                e.preventDefault();\n            }\n        }\n\n        return false;\n    };\n\n    CPDefaultMode.prototype.keyUp = function (e) {\n        if (\n            e.key === \" \" ||\n            e.key.toLowerCase() === \"control\" ||\n            e.key.toLowerCase() === \"z\"\n        ) {\n            setCursor(CURSOR_DEFAULT); // ズーム解除時にカーソルを戻す\n            if (previousMode) {\n                modeStack.setUserMode(previousMode); // 元モード復帰\n                previousMode = null;\n            }\n            e.preventDefault(); // 既定動作キャンセル\n        }\n    };\n\n    /**\n     * A base for the three drawing modes, so they can all share the same brush-preview-circle drawing behaviour.\n     *\n     * @constructor\n     */\n    function CPDrawingMode() {\n        this.shouldPaintBrushPreview = false;\n\n        /* The last rectangle we dirtied with a brush preview circle, or null if one hasn't been drawn yet */\n        this.oldPreviewRect = null;\n    }\n\n    CPDrawingMode.prototype = Object.create(CPMode.prototype);\n    CPDrawingMode.prototype.constructor = CPDrawingMode;\n\n    /**\n     * Get a rectangle that encloses the preview brush, in screen coordinates.\n     */\n    CPDrawingMode.prototype.getBrushPreviewOval = function () {\n        var brushSize = controller.getBrushSize() * zoom;\n        const halfBrushSize = brushSize / 2;\n\n        return new CPRect(\n            mouseX - halfBrushSize,\n            mouseY - halfBrushSize,\n            mouseX + halfBrushSize,\n            mouseY + halfBrushSize\n        );\n    };\n\n    /**\n     * Queues up the brush preview oval to be drawn.\n     */\n    CPDrawingMode.prototype.queueBrushPreview = function () {\n        /* If we're not the top-most mode, it's unlikely that left clicking will drawing for us, so don't consider\n         * painting the brush preview\n         */\n        if (modeStack.peek() != this) {\n            return;\n        }\n\n        this.shouldPaintBrushPreview = true;\n\n        var rect = this.getBrushPreviewOval();\n\n        rect.grow(2, 2);\n\n        // If a brush preview was drawn previously, stretch the repaint region to remove that old copy\n        if (this.oldPreviewRect != null) {\n            rect.union(this.oldPreviewRect);\n            this.oldPreviewRect = null;\n        }\n\n        repaintRect(rect);\n    };\n\n    /**\n     * Erase the brush preview if one had been drawn\n     */\n    CPDrawingMode.prototype.eraseBrushPreview = function () {\n        this.shouldPaintBrushPreview = false;\n\n        if (this.oldPreviewRect != null) {\n            repaintRect(this.oldPreviewRect);\n            this.oldPreviewRect = null;\n        }\n    };\n\n    CPDrawingMode.prototype.mouseMove = function (e, pressure) {\n        this.queueBrushPreview();\n    };\n\n    CPDrawingMode.prototype.enter = function () {\n        CPMode.prototype.enter.call(this);\n\n        if (mouseIn) {\n            this.queueBrushPreview();\n        }\n    };\n\n    CPDrawingMode.prototype.leave = function () {\n        CPMode.prototype.leave.call(this);\n        this.eraseBrushPreview();\n    };\n\n    CPDrawingMode.prototype.suspend = CPDrawingMode.prototype.leave;\n    CPDrawingMode.prototype.resume = CPDrawingMode.prototype.enter;\n\n    CPDrawingMode.prototype.paint = function () {\n        if (this.shouldPaintBrushPreview) {\n            //円カーソルを表示\n            this.shouldPaintBrushPreview = false;\n\n            var r = this.getBrushPreviewOval();\n\n            canvasContext.beginPath();\n\n            canvasContext.arc(\n                (r.left + r.right) / 2,\n                (r.top + r.bottom) / 2,\n                r.getWidth() / 2,\n                0,\n                Math.PI * 2\n            );\n\n            canvasContext.stroke();\n\n            r.grow(2, 2);\n\n            if (this.oldPreviewRect == null) {\n                this.oldPreviewRect = r;\n            } else {\n                this.oldPreviewRect.union(r);\n            }\n        }\n    };\n\n    function CPFreehandMode() {\n        CPDrawingMode.call(this);\n\n        this.smoothMouse = { x: 0.0, y: 0.0 };\n    }\n\n    CPFreehandMode.prototype = Object.create(CPDrawingMode.prototype);\n    CPFreehandMode.prototype.constructor = CPFreehandMode;\n\n    CPFreehandMode.prototype.mouseDown = function (e, button, pressure) {\n        if (\n            !this.capture &&\n            button == BUTTON_PRIMARY &&\n            !e.altKey &&\n            !key.isPressed(\"space\") &&\n            shouldDrawToThisLayer()\n        ) {\n            var pf = coordToDocument({ x: mouseX, y: mouseY });\n\n            this.eraseBrushPreview();\n\n            if (artwork.beginStroke(pf.x, pf.y, pressure)) {\n                this.capture = true;\n\n                this.smoothMouse = pf;\n\n                return true;\n            }\n        }\n    };\n\n    CPFreehandMode.prototype.mouseDrag = function (e, pressure) {\n        if (\n            typeof navigator.maxTouchPoints !== \"number\" ||\n            navigator.maxTouchPoints < 3\n        ) {\n            //タッチデバイスでは無い時に\n            CPDrawingMode.prototype.mouseMove.call(this, e, pressure); //円カーソルをmouseDrag時に表示\n        }\n        if (this.capture) {\n            var pf = coordToDocument({ x: mouseX, y: mouseY }),\n                smoothing = Math.min(\n                    0.999,\n                    Math.pow(controller.getBrushInfo().smoothing, 0.3)\n                );\n            const smoothingFactor = 1.0 - smoothing;\n            this.smoothMouse.x =\n                smoothingFactor * pf.x + smoothing * this.smoothMouse.x;\n            this.smoothMouse.y =\n                smoothingFactor * pf.y + smoothing * this.smoothMouse.y;\n\n            artwork.continueStroke(\n                this.smoothMouse.x,\n                this.smoothMouse.y,\n                pressure\n            );\n\n            return true;\n        } else {\n            this.mouseMove(e);\n        }\n    };\n\n    CPFreehandMode.prototype.mouseUp = function (e, button, pressure) {\n        if (this.capture) {\n            if (button == BUTTON_PRIMARY) {\n                this.capture = false;\n                artwork.endStroke();\n            }\n            return true;\n        }\n    };\n\n    function CPLineMode() {\n        var dragLineFrom,\n            dragLineTo,\n            LINE_PREVIEW_WIDTH = 1;\n\n        this.mouseDown = function (e, button, pressure) {\n            if (\n                !this.capture &&\n                button == BUTTON_PRIMARY &&\n                !e.altKey &&\n                !key.isPressed(\"space\") &&\n                shouldDrawToThisLayer()\n            ) {\n                this.capture = true;\n                dragLineFrom = dragLineTo = {\n                    x: mouseX + 0.5,\n                    y: mouseY + 0.5,\n                };\n\n                this.eraseBrushPreview();\n\n                return true;\n            }\n        };\n\n        this.mouseDrag = function (e) {\n            if (this.capture) {\n                var // The old line position that we'll invalidate for redraw\n                    invalidateRect = new CPRect(\n                        Math.min(dragLineFrom.x, dragLineTo.x) -\n                            LINE_PREVIEW_WIDTH -\n                            1,\n                        Math.min(dragLineFrom.y, dragLineTo.y) -\n                            LINE_PREVIEW_WIDTH -\n                            1,\n                        Math.max(dragLineFrom.x, dragLineTo.x) +\n                            LINE_PREVIEW_WIDTH +\n                            1 +\n                            1,\n                        Math.max(dragLineFrom.y, dragLineTo.y) +\n                            LINE_PREVIEW_WIDTH +\n                            1 +\n                            1\n                    );\n\n                dragLineTo = { x: mouseX + 0.5, y: mouseY + 0.5 }; // Target centre of pixel\n\n                if (e.shiftKey) {\n                    // Snap to nearest 45 degrees\n                    var snap = Math.PI / 4,\n                        angle = Math.round(\n                            Math.atan2(\n                                dragLineTo.y - dragLineFrom.y,\n                                dragLineTo.x - dragLineFrom.x\n                            ) / snap\n                        );\n\n                    switch (angle) {\n                        case 0:\n                        case 4:\n                            dragLineTo.y = dragLineFrom.y;\n                            break;\n\n                        case 2:\n                        case 6:\n                            dragLineTo.x = dragLineFrom.x;\n                            break;\n\n                        default:\n                            angle *= snap;\n\n                            var length = Math.sqrt(\n                                (dragLineTo.y - dragLineFrom.y) *\n                                    (dragLineTo.y - dragLineFrom.y) +\n                                    (dragLineTo.x - dragLineFrom.x) *\n                                        (dragLineTo.x - dragLineFrom.x)\n                            );\n\n                            dragLineTo.x =\n                                dragLineFrom.x + length * Math.cos(angle);\n                            dragLineTo.y =\n                                dragLineFrom.y + length * Math.sin(angle);\n                    }\n                }\n\n                // The new line position\n                invalidateRect.union(\n                    new CPRect(\n                        Math.min(dragLineFrom.x, dragLineTo.x) -\n                            LINE_PREVIEW_WIDTH -\n                            1,\n                        Math.min(dragLineFrom.y, dragLineTo.y) -\n                            LINE_PREVIEW_WIDTH -\n                            1,\n                        Math.max(dragLineFrom.x, dragLineTo.x) +\n                            LINE_PREVIEW_WIDTH +\n                            1 +\n                            1,\n                        Math.max(dragLineFrom.y, dragLineTo.y) +\n                            LINE_PREVIEW_WIDTH +\n                            1 +\n                            1\n                    )\n                );\n\n                repaintRect(invalidateRect);\n\n                return true;\n            } else {\n                this.mouseMove.call(this, e);\n            }\n        };\n\n        this.mouseUp = function (e, button, pressure) {\n            if (this.capture && button == BUTTON_PRIMARY) {\n                var from = coordToDocument(dragLineFrom),\n                    to = coordToDocument(dragLineTo);\n\n                this.capture = false;\n\n                this.drawLine(from, to);\n\n                var invalidateRect = new CPRect(\n                    Math.min(dragLineFrom.x, dragLineTo.x) -\n                        LINE_PREVIEW_WIDTH -\n                        1,\n                    Math.min(dragLineFrom.y, dragLineTo.y) -\n                        LINE_PREVIEW_WIDTH -\n                        1,\n                    Math.max(dragLineFrom.x, dragLineTo.x) +\n                        LINE_PREVIEW_WIDTH +\n                        1 +\n                        1,\n                    Math.max(dragLineFrom.y, dragLineTo.y) +\n                        LINE_PREVIEW_WIDTH +\n                        1 +\n                        1\n                );\n\n                repaintRect(invalidateRect);\n\n                return true;\n            }\n        };\n\n        this.paint = function () {\n            if (this.capture) {\n                canvasContext.lineWidth = LINE_PREVIEW_WIDTH;\n                canvasContext.beginPath();\n                canvasContext.moveTo(dragLineFrom.x, dragLineFrom.y);\n                canvasContext.lineTo(dragLineTo.x, dragLineTo.y);\n                canvasContext.stroke();\n            } else {\n                // Draw the regular brush preview circle\n                CPDrawingMode.prototype.paint.call(this);\n            }\n        };\n\n        CPDrawingMode.call(this);\n    }\n\n    CPLineMode.prototype = Object.create(CPDrawingMode.prototype);\n    CPLineMode.prototype.constructor = CPLineMode;\n\n    CPLineMode.prototype.drawLine = function (from, to) {\n        artwork.beginStroke(from.x, from.y, 1);\n        artwork.continueStroke(to.x, to.y, 1);\n        artwork.endStroke();\n    };\n\n    function CPBezierMode() {\n        const BEZIER_POINTS = 500,\n            BEZIER_POINTS_PREVIEW = 100,\n            BEZIER_STATE_INITIAL = 0,\n            BEZIER_STATE_POINT_1 = 1,\n            BEZIER_STATE_POINT_2 = 2;\n\n        let dragBezierMode = BEZIER_STATE_INITIAL,\n            dragBezierP0,\n            dragBezierP1,\n            dragBezierP2,\n            dragBezierP3;\n\n        this.mouseDown = function (e, button, pressure) {\n            if (\n                !this.capture &&\n                button == BUTTON_PRIMARY &&\n                !e.altKey &&\n                !key.isPressed(\"space\") &&\n                shouldDrawToThisLayer()\n            ) {\n                let p = coordToDocument({ x: mouseX, y: mouseY });\n\n                dragBezierMode = BEZIER_STATE_INITIAL;\n                dragBezierP0 = dragBezierP1 = dragBezierP2 = dragBezierP3 = p;\n                this.capture = true;\n\n                this.eraseBrushPreview();\n\n                return true;\n            }\n        };\n\n        // Handles the first part of the Bezier where the user drags out a straight line\n        this.mouseDrag = function (e) {\n            if (this.capture && dragBezierMode === BEZIER_STATE_INITIAL) {\n                let p = coordToDocument({ x: mouseX, y: mouseY });\n\n                dragBezierP2 = dragBezierP3 = p;\n\n                that.repaintAll();\n\n                return true;\n            } else {\n                this.mouseMove.call(this, e);\n            }\n        };\n\n        this.mouseUp = function (e, button, pressure) {\n            if (this.capture && button == BUTTON_PRIMARY) {\n                switch (dragBezierMode) {\n                    case BEZIER_STATE_INITIAL:\n                        dragBezierMode = BEZIER_STATE_POINT_1;\n                        break;\n                    case BEZIER_STATE_POINT_1:\n                        dragBezierMode = BEZIER_STATE_POINT_2;\n                        break;\n                    case BEZIER_STATE_POINT_2:\n                        this.capture = false;\n\n                        let p0 = dragBezierP0,\n                            p1 = dragBezierP1,\n                            p2 = dragBezierP2,\n                            p3 = dragBezierP3,\n                            bezier = new CPBezier();\n\n                        bezier.x0 = p0.x;\n                        bezier.y0 = p0.y;\n                        bezier.x1 = p1.x;\n                        bezier.y1 = p1.y;\n                        bezier.x2 = p2.x;\n                        bezier.y2 = p2.y;\n                        bezier.x3 = p3.x;\n                        bezier.y3 = p3.y;\n\n                        let x = new Array(BEZIER_POINTS),\n                            y = new Array(BEZIER_POINTS);\n\n                        bezier.compute(x, y, BEZIER_POINTS);\n\n                        artwork.beginStroke(x[0], y[0], 1);\n                        for (let i = 1; i < BEZIER_POINTS; i++) {\n                            artwork.continueStroke(x[i], y[i], 1);\n                        }\n                        artwork.endStroke();\n                        that.repaintAll();\n                }\n\n                return true;\n            }\n        };\n\n        this.mouseMove = function (e, pressure) {\n            if (this.capture) {\n                let p = coordToDocument({ x: mouseX, y: mouseY });\n\n                if (dragBezierMode == BEZIER_STATE_POINT_1) {\n                    dragBezierP1 = p;\n                } else if (dragBezierMode == BEZIER_STATE_POINT_2) {\n                    dragBezierP2 = p;\n                }\n                that.repaintAll(); // FIXME: repaint only the bezier region\n\n                return true;\n            } else {\n                // Draw the normal brush preview while not in the middle of a bezier operation\n                CPDrawingMode.prototype.mouseMove.call(this, e, pressure);\n            }\n        };\n\n        this.paint = function () {\n            if (this.capture) {\n                let bezier = new CPBezier(),\n                    p0 = coordToDisplay(dragBezierP0),\n                    p1 = coordToDisplay(dragBezierP1),\n                    p2 = coordToDisplay(dragBezierP2),\n                    p3 = coordToDisplay(dragBezierP3);\n\n                bezier.x0 = p0.x;\n                bezier.y0 = p0.y;\n                bezier.x1 = p1.x;\n                bezier.y1 = p1.y;\n                bezier.x2 = p2.x;\n                bezier.y2 = p2.y;\n                bezier.x3 = p3.x;\n                bezier.y3 = p3.y;\n\n                let x = new Array(BEZIER_POINTS_PREVIEW),\n                    y = new Array(BEZIER_POINTS_PREVIEW);\n\n                bezier.compute(x, y, BEZIER_POINTS_PREVIEW);\n\n                canvasContext.beginPath();\n\n                canvasContext.moveTo(x[0], y[0]);\n                for (let i = 1; i < BEZIER_POINTS_PREVIEW; i++) {\n                    canvasContext.lineTo(x[i], y[i]);\n                }\n\n                canvasContext.moveTo(~~p0.x, ~~p0.y);\n                canvasContext.lineTo(~~p1.x, ~~p1.y);\n\n                canvasContext.moveTo(~~p2.x, ~~p2.y);\n                canvasContext.lineTo(~~p3.x, ~~p3.y);\n\n                canvasContext.stroke();\n            } else {\n                // Paint the regular brush preview\n                CPDrawingMode.prototype.paint.call(this);\n            }\n        };\n\n        CPDrawingMode.call(this);\n    }\n\n    CPBezierMode.prototype = Object.create(CPDrawingMode.prototype);\n    CPBezierMode.prototype.constructor = CPBezierMode;\n\n    function CPColorPickerMode() {\n        var mouseButton;\n\n        this.mouseDown = function (e, button, pressure) {\n            if (this.capture) {\n                return true;\n            } else if (\n                !key.isPressed(\"space\") &&\n                ((button == BUTTON_PRIMARY && (!this.transient || e.altKey)) ||\n                    button == BUTTON_SECONDARY)\n            ) {\n                mouseButton = button;\n                this.capture = true;\n\n                setCursor(CURSOR_CROSSHAIR);\n\n                this.mouseDrag(e);\n\n                return true;\n            } else if (this.transient) {\n                // If we're not sampling and we get a button not intended for us, we probably shouldn't be on the stack\n                modeStack.pop();\n            }\n        };\n\n        this.mouseDrag = function (e) {\n            if (this.capture) {\n                var pf = coordToDocument({ x: mouseX, y: mouseY });\n\n                if (artwork.isPointWithin(pf.x, pf.y)) {\n                    controller.setCurColor(\n                        new CPColor(artwork.colorPicker(pf.x, pf.y))\n                    );\n                }\n\n                return true;\n            }\n        };\n\n        this.mouseUp = function (e, button, pressure) {\n            if (this.capture && button == mouseButton) {\n                mouseButton = -1;\n                this.capture = false;\n                setCursor(CURSOR_DEFAULT);\n\n                if (this.transient) {\n                    modeStack.pop();\n                }\n\n                return true;\n            }\n        };\n\n        this.enter = function () {\n            CPMode.prototype.enter.call(this);\n            mouseButton = -1;\n        };\n    }\n\n    CPColorPickerMode.prototype = Object.create(CPMode.prototype);\n    CPColorPickerMode.prototype.constructor = CPColorPickerMode;\n\n    function CPPanCanvasMode() {\n        var panningX, panningY, panningOffset, panningButton;\n\n        this.keyDown = function (e) {\n            if (!e.ctrlKey && e.key === \" \") {\n                // If we're not already panning, then advertise that a left-click would pan\n                if (!this.capture) {\n                    setCursor(CURSOR_PANNABLE);\n                }\n\n                return true;\n            }\n        };\n\n        this.keyUp = function (e) {\n            if (\n                this.transient &&\n                panningButton != BUTTON_WHEEL &&\n                e.key === \" \"\n            ) {\n                setCursor(CURSOR_DEFAULT);\n\n                modeStack.pop(); // yield control to the default mode\n\n                return true;\n            }\n        };\n\n        this.mouseDown = function (e, button, pressure) {\n            if (this.capture) {\n                return true;\n            } else if (\n                button == BUTTON_WHEEL ||\n                (key.isPressed(\"space\") &&\n                    !e.ctrlKey &&\n                    button == BUTTON_PRIMARY) ||\n                (!this.transient && button == BUTTON_PRIMARY)\n            ) {\n                this.capture = true;\n                panningButton = button;\n                panningX = e.pageX;\n                panningY = e.pageY;\n                panningOffset = that.getOffset();\n                setCursor(CURSOR_PANNING);\n\n                return true;\n            } else if (this.transient) {\n                // If we're not panning and we get a button not intended for us, we probably shouldn't be on the stack\n                modeStack.pop();\n            }\n        };\n\n        this.mouseDrag = function (e) {\n            // if (key.isPressed(\"q\")) return; // キーボードのQキーが押されている場合は何もしない\n\n            if (this.capture) {\n                that.setOffset(\n                    panningOffset.x + e.pageX - panningX,\n                    panningOffset.y + e.pageY - panningY\n                );\n\n                return true;\n            }\n        };\n\n        this.mouseUp = function (e, button, pressure) {\n            if (this.capture && button == panningButton) {\n                panningButton = -1;\n                this.capture = false;\n\n                // 他モードに切り替わってたら何もしない\n                if (modeStack.peek() !== this) return true;\n\n                if (this.transient && !key.isPressed(\"space\")) {\n                    setCursor(CURSOR_DEFAULT);\n                    modeStack.pop();\n                } else {\n                    setCursor(CURSOR_PANNABLE);\n                }\n\n                return true;\n            }\n        };\n\n        this.enter = function () {\n            setCursor(CURSOR_PANNABLE);\n        };\n    }\n\n    CPPanCanvasMode.prototype = Object.create(CPMode.prototype);\n    CPPanCanvasMode.prototype.constructor = CPPanCanvasMode;\n\n    function CPFloodFillMode() {}\n\n    CPFloodFillMode.prototype = Object.create(CPMode.prototype);\n    CPFloodFillMode.prototype.constructor = CPFloodFillMode;\n\n    CPFloodFillMode.prototype.mouseDown = function (e, button, pressure) {\n        if (\n            button == BUTTON_PRIMARY &&\n            !e.altKey &&\n            !key.isPressed(\"space\") &&\n            shouldDrawToThisLayer()\n        ) {\n            var pf = coordToDocument({ x: mouseX, y: mouseY });\n\n            if (artwork.isPointWithin(pf.x, pf.y)) {\n                artwork.floodFill(pf.x, pf.y);\n                that.repaintAll();\n            }\n\n            return true;\n        }\n    };\n\n    function CPRectSelectionMode() {\n        var firstClick,\n            curRect = new CPRect(0, 0, 0, 0),\n            selectingButton = -1;\n\n        let maintainAspectCheckd = false;\n        this.mouseDown = function (e, button, pressure) {\n            const maintainAspectCheckbox = document.getElementById(\n                \"chickenpaint-s-maintainAspectCheckbox\"\n            );\n\n            if (\n                maintainAspectCheckbox &&\n                maintainAspectCheckbox instanceof HTMLInputElement\n            ) {\n                maintainAspectCheckd = maintainAspectCheckbox.checked;\n            }\n\n            if (\n                !this.capture &&\n                button == BUTTON_PRIMARY &&\n                !e.altKey &&\n                !key.isPressed(\"space\")\n            ) {\n                var p = coordToDocumentInt({ x: mouseX, y: mouseY });\n\n                selectingButton = button;\n\n                curRect.makeEmpty();\n                firstClick = p;\n\n                that.repaintAll();\n\n                this.capture = true;\n\n                return true;\n            }\n        };\n\n        this.mouseDrag = function (e) {\n            if (!this.capture) return false;\n\n            let p = coordToDocumentInt({ x: mouseX, y: mouseY });\n            let square = e.shiftKey || maintainAspectCheckd;\n            let squareDist = ~~Math.max(\n                Math.abs(p.x - firstClick.x),\n                Math.abs(p.y - firstClick.y)\n            );\n\n            if (p.x >= firstClick.x) {\n                curRect.left = firstClick.x;\n                curRect.right = (square ? firstClick.x + squareDist : p.x) + 1;\n            } else {\n                curRect.left = square ? firstClick.x - squareDist : p.x;\n                curRect.right = firstClick.x + 1;\n            }\n\n            if (p.y >= firstClick.y) {\n                curRect.top = firstClick.y;\n                curRect.bottom = (square ? firstClick.y + squareDist : p.y) + 1;\n            } else {\n                curRect.top = square ? firstClick.y - squareDist : p.y;\n                curRect.bottom = firstClick.y + 1;\n            }\n\n            that.repaintAll();\n\n            return true;\n        };\n\n        this.mouseUp = function (e, button, pressure) {\n            if (this.capture && button == selectingButton) {\n                artwork.rectangleSelection(curRect);\n                curRect.makeEmpty();\n\n                that.repaintAll();\n\n                this.capture = false;\n                selectingButton = -1;\n\n                return true;\n            }\n        };\n\n        this.paint = function () {\n            if (!curRect.isEmpty()) {\n                canvasContext.lineWidth = 1;\n                plotSelectionRect(canvasContext, curRect);\n            }\n        };\n    }\n\n    CPRectSelectionMode.prototype = Object.create(CPMode.prototype);\n    CPRectSelectionMode.prototype.constructor = CPRectSelectionMode;\n\n    function CPMoveToolMode() {\n        var lastPoint,\n            copyMode,\n            firstMove = false;\n\n        this.mouseDown = function (e, button, pressure) {\n            if (\n                !this.capture &&\n                button == BUTTON_PRIMARY &&\n                !key.isPressed(\"space\") &&\n                checkCurrentLayerIsVisible()\n            ) {\n                lastPoint = coordToDocument({ x: mouseX, y: mouseY });\n\n                copyMode = e.altKey;\n                firstMove = true;\n                this.capture = true;\n\n                return true;\n            }\n        };\n\n        this.mouseDrag = throttle(25, function (e) {\n            if (this.capture) {\n                var p = coordToDocument({ x: mouseX, y: mouseY }),\n                    moveFloat = { x: p.x - lastPoint.x, y: p.y - lastPoint.y },\n                    moveInt = { x: ~~moveFloat.x, y: ~~moveFloat.y }; // Round towards zero\n\n                if (moveInt.x != 0 || moveInt.y != 0) {\n                    artwork.move(moveInt.x, moveInt.y, copyMode && firstMove);\n                    firstMove = false;\n                }\n\n                /*\n                 * Nudge the last point by the remainder we weren't able to move this iteration (due to move() only\n                 * accepting integer offsets). This'll carry that fractional part of the move over for next iteration.\n                 */\n                lastPoint.x = p.x - (moveFloat.x - moveInt.x);\n                lastPoint.y = p.y - (moveFloat.y - moveInt.y);\n\n                return true;\n            }\n        });\n\n        this.mouseUp = function (e, button, pressure) {\n            if (this.capture && button == BUTTON_PRIMARY) {\n                this.capture = false;\n                if (this.transient) {\n                    modeStack.pop();\n                }\n                return true;\n            }\n        };\n    }\n\n    CPMoveToolMode.prototype = Object.create(CPMode.prototype);\n    CPMoveToolMode.prototype.constructor = CPMoveToolMode;\n\n    CPMoveToolMode.prototype.mouseMove = function (e) {\n        // 他のモードがトップなら何もしない\n        if (modeStack.peek() !== this) return true;\n        if (!key.isPressed(\"r\") || !key.isPressed(\"space\")) {\n            setCursor(CURSOR_MOVE);\n        }\n        return true;\n    };\n\n    CPMoveToolMode.prototype.enter = function () {\n        if (!key.isPressed(\"r\") || !key.isPressed(\"space\")) {\n            setCursor(CURSOR_MOVE);\n        }\n    };\n    function CPTransformMode() {\n        const HANDLE_RADIUS = 3,\n            DRAG_NONE = -1,\n            DRAG_ROTATE = -2,\n            DRAG_MOVE = -3,\n            DRAG_NW_CORNER = 0,\n            DRAG_N_EDGE = 1,\n            DRAG_NE_CORNER = 2,\n            DRAG_E_EDGE = 3,\n            DRAG_SE_CORNER = 4,\n            DRAG_S_EDGE = 5,\n            DRAG_SW_CORNER = 6,\n            DRAG_W_EDGE = 7;\n\n        var /** @type {CPTransform} The current transformation */\n            affine,\n            /** @type {CPRect} The initial document rectangle to transform */\n            srcRect,\n            /** @type {CPPolygon} The initial transform rect */\n            origCornerPoints,\n            /** @type {CPPolygon} The current corners of the transform rect in document space */\n            cornerPoints,\n            draggingMode = DRAG_NONE,\n            lastDragPointDisplay,\n            lastDragPointDoc,\n            // Keep track of how many degrees we've rotated so far during this transformation\n            rotationAccumulator;\n\n        /**\n         * Get the polygon that represents the current transform result area in display coordinates.\n         *\n         * @returns {CPPolygon}\n         */\n        function cornersToDisplayPolygon() {\n            return cornerPoints.getTransformed(transform);\n        }\n\n        function averagePoints(p1, p2) {\n            return { x: (p1.x + p2.x) / 2, y: (p1.y + p2.y) / 2 };\n        }\n\n        function roundPoint(p) {\n            return { x: Math.round(p.x), y: Math.round(p.y) };\n        }\n\n        /**\n         * Decide which drag action should be taken if our mouse was pressed in the given position.\n         *\n         * @param {CPPolygon} corners - The corners of the current transform area\n         * @param mouse - The mouse point\n         * @returns {number} A DRAG_* constant\n         */\n        function classifyDragAction(corners, mouse) {\n            const HANDLE_CAPTURE_RADIUS = 7,\n                HANDLE_CAPTURE_RADIUS_SQR =\n                    HANDLE_CAPTURE_RADIUS * HANDLE_CAPTURE_RADIUS,\n                EDGE_CAPTURE_RADIUS = HANDLE_CAPTURE_RADIUS,\n                EDGE_CAPTURE_RADIUS_SQR =\n                    EDGE_CAPTURE_RADIUS * EDGE_CAPTURE_RADIUS;\n\n            // Are we dragging a corner?\n            for (let i = 0; i < corners.points.length; i++) {\n                if (\n                    (mouse.x - corners.points[i].x) *\n                        (mouse.x - corners.points[i].x) +\n                        (mouse.y - corners.points[i].y) *\n                            (mouse.y - corners.points[i].y) <=\n                    HANDLE_CAPTURE_RADIUS_SQR\n                ) {\n                    return i * 2;\n                }\n            }\n\n            // Are we dragging an edge?\n            for (let i = 0; i < corners.points.length; i++) {\n                var edgeP1 = corners.points[i],\n                    edgeP2 = corners.points[(i + 1) % corners.points.length],\n                    vEdge = new CPVector(\n                        edgeP2.x - edgeP1.x,\n                        edgeP2.y - edgeP1.y\n                    ),\n                    vMouse = new CPVector(\n                        mouse.x - edgeP1.x,\n                        mouse.y - edgeP1.y\n                    ),\n                    vEdgeLen = vEdge.getLength(),\n                    vEdgeScaled = vEdge.getScaled(1 / vEdgeLen),\n                    vMouseScaled = vMouse.getScaled(1 / vEdgeLen),\n                    mousePropOnLine = vEdgeScaled.getDotProduct(vMouseScaled);\n\n                // If we're within the ends of the line (perpendicularly speaking)\n                if (mousePropOnLine >= 0.0 && mousePropOnLine <= 1.0) {\n                    // This gives us the point on the line closest to the mouse\n                    vEdge.scale(mousePropOnLine);\n\n                    if (\n                        (vEdge.x - vMouse.x) * (vEdge.x - vMouse.x) +\n                            (vEdge.y - vMouse.y) * (vEdge.y - vMouse.y) <=\n                        EDGE_CAPTURE_RADIUS_SQR\n                    ) {\n                        return i * 2 + 1;\n                    }\n                }\n            }\n\n            if (corners.containsPoint(mouse)) {\n                return DRAG_MOVE;\n            }\n\n            return DRAG_ROTATE;\n        }\n\n        function setCursorForHandles() {\n            var corners = cornersToDisplayPolygon(),\n                mouse = { x: mouseX, y: mouseY },\n                dragAction = classifyDragAction(corners, mouse);\n\n            switch (dragAction) {\n                case DRAG_NW_CORNER:\n                case DRAG_NE_CORNER:\n                case DRAG_SE_CORNER:\n                case DRAG_SW_CORNER:\n                    // Choose a cursor for a 45-degree resize from this corner\n                    let cornerIndex = ~~(dragAction / 2),\n                        cornerBefore = corners.points[(cornerIndex + 3) % 4],\n                        corner = corners.points[cornerIndex],\n                        cornerAfter = corners.points[(cornerIndex + 1) % 4],\n                        // Get a vector which points 45 degrees toward the center of the box, this'll do for cursor direction\n                        v45 = CPVector.subtractPoints(cornerBefore, corner)\n                            .normalize()\n                            .add(\n                                CPVector.subtractPoints(\n                                    cornerAfter,\n                                    corner\n                                ).normalize()\n                            );\n\n                    setResizeCursorForVector(v45);\n                    break;\n                case DRAG_N_EDGE:\n                case DRAG_E_EDGE:\n                case DRAG_S_EDGE:\n                case DRAG_W_EDGE:\n                    // Resizing from here will move edge perpendicularly\n                    let corner1 = corners.points[~~(dragAction / 2)],\n                        corner2 = corners.points[(~~(dragAction / 2) + 1) % 4],\n                        vPerp = CPVector.subtractPoints(\n                            corner2,\n                            corner1\n                        ).getPerpendicular();\n\n                    setResizeCursorForVector(vPerp);\n                    break;\n                case DRAG_MOVE:\n                    //一時的なパン･回転時にペンの移動でカーソルがちらつくのを防ぐ\n                    if (!key.isPressed(\"r\") && !key.isPressed(\"space\")) {\n                        setCursor(CURSOR_MOVE);\n                    }\n                    break;\n                case DRAG_ROTATE:\n                    if (!key.isPressed(\"r\") && !key.isPressed(\"space\")) {\n                        setCursor(CURSOR_DEFAULT); // TODO add a custom rotation cursor\n                    }\n                    break;\n                default:\n                    // No drag action, so just use the default cursor\n                    setCursor(CURSOR_DEFAULT);\n            }\n        }\n\n        let maintainAspectCheckd = false;\n        this.mouseDown = function (e, button, pressure) {\n            const maintainAspectCheckbox = document.getElementById(\n                \"chickenpaint-t-maintainAspectCheckbox\"\n            );\n\n            if (\n                maintainAspectCheckbox &&\n                maintainAspectCheckbox instanceof HTMLInputElement\n            ) {\n                maintainAspectCheckd = maintainAspectCheckbox.checked;\n            }\n\n            if (\n                !this.capture &&\n                button == BUTTON_PRIMARY &&\n                !e.altKey &&\n                !key.isPressed(\"space\")\n            ) {\n                var corners = cornersToDisplayPolygon();\n\n                draggingMode = classifyDragAction(corners, {\n                    x: mouseX,\n                    y: mouseY,\n                });\n\n                lastDragPointDisplay = { x: mouseX, y: mouseY };\n                lastDragPointDoc = coordToDocument(lastDragPointDisplay);\n\n                this.capture = true;\n\n                setCursorForHandles();\n\n                return true;\n            }\n        };\n\n        this.mouseDrag = throttle(40, function (e) {\n            const MIN_SCALE = 0.001;\n\n            if (this.capture) {\n                var dragPointDisplay = { x: mouseX, y: mouseY };\n\n                switch (draggingMode) {\n                    case DRAG_MOVE:\n                        let dragPointDoc = roundPoint(\n                                coordToDocument(dragPointDisplay)\n                            ),\n                            translation = CPVector.subtractPoints(\n                                dragPointDoc,\n                                lastDragPointDoc\n                            ),\n                            // Only translate in whole-pixel increments (in document space not canvas space)\n                            translationRounded = translation.getTruncated(),\n                            translationRemainder =\n                                translation.subtract(translationRounded),\n                            translateInstance = new CPTransform();\n\n                        /*\n                         * Apply the translate *after* the current affine is applied.\n                         */\n                        translateInstance.translate(\n                            translationRounded.x,\n                            translationRounded.y\n                        );\n\n                        affine.preMultiply(translateInstance);\n\n                        // Accumulate the fractional move that we didn't apply for next time\n                        lastDragPointDoc = CPVector.subtractPoints(\n                            dragPointDoc,\n                            translationRemainder\n                        );\n                        break;\n                    case DRAG_ROTATE:\n                        const DRAG_ROTATE_SNAP_ANGLE = Math.PI / 4;\n\n                        let centerDoc = cornerPoints.getCenter(),\n                            centerDisplay = coordToDisplay(centerDoc),\n                            oldMouseAngle = Math.atan2(\n                                lastDragPointDisplay.y - centerDisplay.y,\n                                lastDragPointDisplay.x - centerDisplay.x\n                            ),\n                            newMouseAngle = Math.atan2(\n                                dragPointDisplay.y - centerDisplay.y,\n                                dragPointDisplay.x - centerDisplay.x\n                            ),\n                            deltaMouseAngle = newMouseAngle - oldMouseAngle,\n                            rotateAngle,\n                            rotateInstance = new CPTransform();\n\n                        rotationAccumulator += deltaMouseAngle;\n\n                        if (e.shiftKey) {\n                            /*\n                             * The rotation in the decomposition was made about the origin. We want to rotate about the\n                             * center of the selection, so first rotate the selection to square it up with the axes,\n                             * then we'll pivot the selection about its center to the new angle.\n                             */\n                            rotateAngle =\n                                -affine.decompose().rotate +\n                                Math.round(\n                                    rotationAccumulator / DRAG_ROTATE_SNAP_ANGLE\n                                ) *\n                                    DRAG_ROTATE_SNAP_ANGLE;\n                        } else {\n                            rotateAngle = deltaMouseAngle;\n                        }\n\n                        /* Apply the rotation *after* the current affine instead of before it, so that we don't\n                         * end up scaling on top of the rotated selection later (which would cause an unwanted shear)\n                         */\n                        // 反転時は回転方向を逆に\n                        if (isViewFlipped) {\n                            rotateAngle = -rotateAngle;\n                        }\n                        rotateInstance.rotateAroundPoint(\n                            rotateAngle,\n                            centerDoc.x,\n                            centerDoc.y\n                        );\n\n                        affine.preMultiply(rotateInstance);\n\n                        lastDragPointDisplay = dragPointDisplay;\n                        break;\n                    case DRAG_NW_CORNER:\n                    case DRAG_NE_CORNER:\n                    case DRAG_SE_CORNER:\n                    case DRAG_SW_CORNER:\n                        {\n                            let draggingCorner = ~~(draggingMode / 2),\n                                oldCorner =\n                                    origCornerPoints.points[draggingCorner],\n                                // The corner we dragged will move into its new position\n                                newCorner = affine\n                                    .getInverted()\n                                    .getTransformedPoint(\n                                        roundPoint(\n                                            coordToDocument(dragPointDisplay)\n                                        )\n                                    ),\n                                // The opposite corner to the one we dragged must not move\n                                fixCorner =\n                                    origCornerPoints.points[\n                                        (draggingCorner + 2) % 4\n                                    ],\n                                /* Now we can see how much we'd need to scale the original rectangle about the fixed corner\n                                 * for the other corner to reach the new position.\n                                 */\n                                scaleX =\n                                    (newCorner.x - fixCorner.x) /\n                                    (oldCorner.x - fixCorner.x),\n                                scaleY =\n                                    (newCorner.y - fixCorner.y) /\n                                    (oldCorner.y - fixCorner.y);\n\n                            /*\n                             * If the user resized it until it was zero-sized, just ignore that position and assume they'll move\n                             * past it in a msec.\n                             */\n                            if (\n                                Math.abs(scaleX) < MIN_SCALE ||\n                                Math.abs(scaleY) < MIN_SCALE ||\n                                isNaN(scaleX) ||\n                                isNaN(scaleY)\n                            ) {\n                                return true;\n                            }\n\n                            // Does user want proportional resize?\n                            if (maintainAspectCheckd || e.shiftKey) {\n                                var largestScale = Math.max(scaleX, scaleY);\n\n                                scaleX = largestScale;\n                                scaleY = largestScale;\n                            }\n\n                            // The transform we do here will be performed first before any of the other transforms (scale, rotate, etc)\n                            affine.scaleAroundPoint(\n                                scaleX,\n                                scaleY,\n                                fixCorner.x,\n                                fixCorner.y\n                            );\n                        }\n                        break;\n                    case DRAG_N_EDGE:\n                    case DRAG_S_EDGE:\n                    case DRAG_E_EDGE:\n                    case DRAG_W_EDGE:\n                        {\n                            let cornerIndex = ~~(draggingMode / 2),\n                                oldHandle = averagePoints(\n                                    origCornerPoints.points[cornerIndex],\n                                    origCornerPoints.points[\n                                        (cornerIndex + 1) % 4\n                                    ]\n                                ),\n                                // The handle we dragged will move into its new position\n                                newHandle = affine\n                                    .getInverted()\n                                    .getTransformedPoint(\n                                        roundPoint(\n                                            coordToDocument(dragPointDisplay)\n                                        )\n                                    ),\n                                // The opposite handle to the one we dragged must not move\n                                fixHandle = averagePoints(\n                                    origCornerPoints.points[\n                                        (cornerIndex + 2) % 4\n                                    ],\n                                    origCornerPoints.points[\n                                        (cornerIndex + 3) % 4\n                                    ]\n                                ),\n                                scaleX,\n                                scaleY,\n                                oldVector = CPVector.subtractPoints(\n                                    oldHandle,\n                                    fixHandle\n                                ),\n                                newVector = CPVector.subtractPoints(\n                                    newHandle,\n                                    fixHandle\n                                ),\n                                oldLength = oldVector.getLength(),\n                                // We only take the length in the perpendicular direction to the transform edge:\n                                newLength =\n                                    oldVector.getDotProduct(newVector) /\n                                    oldLength,\n                                newScale = newLength / oldLength;\n\n                            /*\n                             * If the user resized it until it was zero-sized, just ignore that position and assume they'll move\n                             * past it in a msec.\n                             */\n                            if (\n                                Math.abs(newScale) < MIN_SCALE ||\n                                isNaN(newScale)\n                            ) {\n                                return true;\n                            }\n\n                            if (\n                                draggingMode == DRAG_N_EDGE ||\n                                draggingMode == DRAG_S_EDGE\n                            ) {\n                                scaleX = 1.0;\n                                scaleY = newScale;\n                            } else {\n                                scaleX = newScale;\n                                scaleY = 1.0;\n                            }\n\n                            affine.scaleAroundPoint(\n                                scaleX,\n                                scaleY,\n                                fixHandle.x,\n                                fixHandle.y\n                            );\n                        }\n                        break;\n                }\n\n                cornerPoints = origCornerPoints.getTransformed(affine);\n\n                artwork.transformAffineAmend(affine);\n\n                // TODO make me more specific\n                that.repaintAll();\n\n                return true;\n            }\n        });\n\n        this.mouseUp = function (e, button, pressure) {\n            if (this.capture && button == BUTTON_PRIMARY) {\n                this.capture = false;\n                draggingMode = DRAG_NONE;\n                return true;\n            }\n        };\n\n        /*\n         * Set an appropriate resize cursor for the specified vector from the center to the handle.\n         */\n        function setResizeCursorForVector(v) {\n            let angle = Math.atan2(-v.y, v.x),\n                /*\n                 * Slice up into 45 degrees slices so that there are +-22.5 degrees centered around each corner,\n                 * and a 45 degree segment for each edge\n                 */\n                slice = Math.floor(angle / (Math.PI / 4) + 0.5),\n                cursor;\n\n            // Wrap angles below the x-axis wrap to positive ones...\n            if (slice < 0) {\n                slice += 4;\n            }\n\n            switch (slice) {\n                case 0:\n                default:\n                    cursor = CURSOR_EW_RESIZE;\n                    break;\n                case 1:\n                    cursor = CURSOR_NESW_RESIZE;\n                    break;\n                case 2:\n                    cursor = CURSOR_NS_RESIZE;\n                    break;\n                case 3:\n                    cursor = CURSOR_NWSE_RESIZE;\n                    break;\n            }\n\n            setCursor(cursor);\n        }\n\n        this.mouseMove = function () {\n            // We want to stick with our choice of cursor throughout the drag operation\n            if (!this.capture) {\n                setCursorForHandles();\n            }\n        };\n\n        this.paint = function () {\n            var corners = cornersToDisplayPolygon().points,\n                handles = new Array(corners.length * 2);\n\n            // Collect the positions of the edge and corner handles...\n            for (let i = 0; i < corners.length; i++) {\n                handles[i] = corners[i];\n            }\n\n            for (let i = 0; i < corners.length; i++) {\n                var edgeP1 = corners[i],\n                    edgeP2 = corners[(i + 1) % corners.length],\n                    midWay = {\n                        x: (edgeP1.x + edgeP2.x) / 2,\n                        y: (edgeP1.y + edgeP2.y) / 2,\n                    };\n\n                handles[i + corners.length] = midWay;\n            }\n\n            setContrastingDrawStyle(canvasContext, \"fill\");\n            for (let i = 0; i < handles.length; i++) {\n                canvasContext.fillRect(\n                    handles[i].x - HANDLE_RADIUS,\n                    handles[i].y - HANDLE_RADIUS,\n                    HANDLE_RADIUS * 2 + 1,\n                    HANDLE_RADIUS * 2 + 1\n                );\n            }\n\n            strokePolygon(canvasContext, corners);\n        };\n\n        this.keyDown = function (e) {\n            if (e.key === \"Enter\") {\n                controller.actionPerformed({ action: \"CPTransformAccept\" });\n\n                return true;\n            } else if (e.key === \"Escape\") {\n                controller.actionPerformed({ action: \"CPTransformReject\" });\n\n                return true;\n            }\n        };\n\n        this.enter = function () {\n            CPMode.prototype.enter.call(this);\n\n            // Start off with the identity transform\n            var initial = artwork.transformAffineBegin(),\n                initialSelection;\n\n            affine = initial.transform;\n            srcRect = initial.rect;\n\n            // Decide on the rectangle we'll show as the boundary of the transform area\n            initialSelection = initial.selection;\n\n            /* If the user didn't have anything selected, we'll use the actual shrink-wrapped transform area instead. */\n            if (initialSelection.isEmpty()) {\n                initialSelection = initial.rect.clone();\n            }\n\n            origCornerPoints = new CPPolygon(initialSelection.toPoints());\n            cornerPoints = origCornerPoints.getTransformed(affine);\n\n            draggingMode = -1;\n            rotationAccumulator = 0;\n\n            that.repaintAll();\n        };\n\n        this.leave = function () {\n            CPMode.prototype.leave.call(this);\n            that.repaintAll();\n        };\n        // キーボード用の移動関数\n        this.moveByKey = function (dx, dy) {\n            if (!affine) return;\n\n            let translateInstance = new CPTransform();\n            translateInstance.translate(dx, dy);\n            affine.preMultiply(translateInstance);\n            // 変形のハンドルを更新\n            cornerPoints = origCornerPoints.getTransformed(affine); // transformの更新を反映させる関数呼び出しなど\n            artwork.transformAffineAmend(affine);\n            this.repaintAll?.(); // repaintAll() があれば呼ぶ\n        };\n    }\n\n    CPTransformMode.prototype = Object.create(CPMode.prototype);\n    CPTransformMode.prototype.constructor = CPTransformMode;\n\n    //キーボードで1pxずつ移動できるようにする\n    function getArrowKeyDelta(key) {\n        if (!key) return null;\n        switch (key.toLowerCase()) {\n            case \"arrowup\":\n                return { dx: 0, dy: -1 };\n            case \"arrowdown\":\n                return { dx: 0, dy: 1 };\n            case \"arrowleft\":\n                return { dx: -1, dy: 0 };\n            case \"arrowright\":\n                return { dx: 1, dy: 0 };\n            default:\n                return null;\n        }\n    }\n\n    // キーボードでの移動を有効にする\n    document.addEventListener(\"keydown\", function (e) {\n        const topMode = modeStack.peek();\n        const delta = getArrowKeyDelta(e.key);\n        if (!delta) return;\n\n        let { dx, dy } = delta;\n\n        // 左右反転時はX方向の符号を逆に\n        if (isViewFlipped) {\n            dx = -dx;\n        }\n\n        //変形操作中のキーボードでの移動を有効にする\n        if (topMode === transformMode) {\n            transformMode.moveByKey(dx, dy);\n            e.preventDefault();\n            //移動ツール選択時にキーボードで1pxずつ移動できるようにする\n        } else if (topMode === moveToolMode) {\n            const copyMode = e.altKey;\n            artwork.move(dx, dy, copyMode);\n            e.preventDefault();\n        }\n    });\n\n    function CPRotateCanvasMode() {\n        var firstClick,\n            initAngle = 0.0,\n            initTransform,\n            dragged = false,\n            rotateButton = -1;\n\n        this.mouseDown = function (e, button, pressure) {\n            if (this.capture) {\n                return true;\n            } else if (\n                (!this.transient &&\n                    button == BUTTON_PRIMARY &&\n                    !e.altKey &&\n                    !key.isPressed(\"space\")) ||\n                (button == BUTTON_PRIMARY &&\n                    !e.altKey &&\n                    !key.isPressed(\"space\") &&\n                    key.isPressed(\"r\"))\n            ) {\n                firstClick = { x: mouseX, y: mouseY };\n\n                initAngle = that.getRotation();\n\n                // もし一時的に反転している状態ならば、\n                // cloneしたtransformに反転変換を適用して\n                // 反転状態を反映させる\n                initTransform = transform.clone();\n                if (isViewFlipped) {\n                    viewFlip(initTransform);\n                }\n                dragged = false;\n\n                this.capture = true;\n                rotateButton = button;\n\n                return true;\n            } else if (this.transient) {\n                modeStack.pop();\n            }\n        };\n\n        this.mouseDrag = function (e) {\n            if (this.capture) {\n                const p = { x: mouseX, y: mouseY };\n\n                const displayCenter = {\n                    x: canvas.clientWidth / 2,\n                    y: canvas.clientHeight / 2,\n                };\n                const canvasCenter = {\n                    x: canvas.width / 2,\n                    y: canvas.height / 2,\n                };\n\n                let deltaAngle =\n                    Math.atan2(p.y - displayCenter.y, p.x - displayCenter.x) -\n                    Math.atan2(\n                        firstClick.y - displayCenter.y,\n                        firstClick.x - displayCenter.x\n                    );\n\n                let rotTrans = new CPTransform();\n\n                rotTrans.rotateAroundPoint(\n                    deltaAngle,\n                    canvasCenter.x,\n                    canvasCenter.y\n                );\n\n                rotTrans.multiply(initTransform);\n\n                that.setRotation(initAngle + deltaAngle);\n                that.setOffset(\n                    ~~rotTrans.getTranslateX(),\n                    ~~rotTrans.getTranslateY()\n                );\n\n                dragged = true;\n\n                return true;\n            }\n        };\n\n        /**\n         * When the mouse is released after rotation, we might want to snap our angle to the nearest 90 degree mark.\n         */\n        function finishRotation() {\n            const ROTATE_SNAP_DEGREES = 5;\n\n            let nearest90 =\n                (Math.round(canvasRotation / (Math.PI / 2)) * Math.PI) / 2;\n\n            if (\n                Math.abs(canvasRotation - nearest90) <\n                (ROTATE_SNAP_DEGREES / 180) * Math.PI\n            ) {\n                let deltaAngle = nearest90 - initAngle,\n                    center = { x: canvas.width / 2, y: canvas.height / 2 },\n                    rotTrans = new CPTransform();\n\n                rotTrans.rotateAroundPoint(deltaAngle, center.x, center.y);\n\n                rotTrans.multiply(initTransform);\n\n                that.setRotation(initAngle + deltaAngle);\n                that.setOffset(\n                    ~~rotTrans.getTranslateX(),\n                    ~~rotTrans.getTranslateY()\n                );\n\n                that.repaintAll();\n            }\n\n            that.emitEvent(\"canvasRotated90\", [that.getRotation90()]);\n        }\n\n        this.mouseUp = function (e, button, pressure) {\n            if (this.capture && button == rotateButton) {\n                if (dragged) {\n                    finishRotation();\n                } else {\n                    that.resetRotation();\n                }\n\n                this.capture = false;\n\n                if (this.transient && !key.isPressed(\"r\")) {\n                    modeStack.pop();\n                }\n\n                return true;\n            }\n        };\n\n        this.keyUp = function (e) {\n            if (\n                this.transient &&\n                rotateButton != BUTTON_WHEEL &&\n                e.key === \" \"\n            ) {\n                setCursor(CURSOR_DEFAULT);\n\n                modeStack.pop(); // yield control to the default mode\n\n                return true;\n            }\n        };\n\n        this.keyDown = function (e) {\n            if (e.key.toLowerCase() === \"r\") {\n                // That's our hotkey, so stay in this mode (don't forward to CPDefaultMode)\n                return true;\n            }\n        };\n    }\n\n    CPRotateCanvasMode.prototype = Object.create(CPMode.prototype);\n    CPRotateCanvasMode.prototype.constructor = CPRotateCanvasMode;\n\n    function CPGradientFillMode() {\n        // Super constructor\n        CPLineMode.call(this);\n    }\n\n    CPGradientFillMode.prototype = Object.create(CPLineMode.prototype);\n    CPGradientFillMode.prototype.constructor = CPGradientFillMode;\n\n    CPGradientFillMode.prototype.drawLine = function (from, to) {\n        artwork.gradientFill(\n            Math.round(from.x),\n            Math.round(from.y),\n            Math.round(to.x),\n            Math.round(to.y),\n            controller.getCurGradient()\n        );\n    };\n\n    CPGradientFillMode.prototype.queueBrushPreview = function () {\n        //Suppress the drawing of the brush preview (inherited from CPDrawingMode)\n    };\n\n    function setCursor(cursor) {\n        if (canvas.getAttribute(\"data-cursor\") != cursor) {\n            canvas.setAttribute(\"data-cursor\", cursor);\n        }\n    }\n\n    function checkCurrentLayerIsVisible() {\n        var activeLayer = artwork.getActiveLayer();\n\n        if (!(activeLayer.visible && activeLayer.ancestorsAreVisible())) {\n            controller.showLayerNotification(\n                activeLayer,\n                _(\"Whoops! This layer is currently hidden\"),\n                \"layer\"\n            );\n\n            return false;\n        } else if (activeLayer.alpha == 0) {\n            controller.showLayerNotification(\n                activeLayer,\n                _(\"Whoops! This layer's opacity is currently 0%\"),\n                \"opacity\"\n            );\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Check that we should be drawing to the current layer, and let the user know if they are being blocked by the\n     * layer settings.\n     *\n     * @returns {boolean} True if we should draw to the current layer\n     */\n    function shouldDrawToThisLayer() {\n        var activeLayer = artwork.getActiveLayer();\n\n        if (activeLayer instanceof CPLayerGroup && !artwork.isEditingMask()) {\n            controller.showLayerNotification(\n                activeLayer,\n                _(\"Whoops! You can't draw on a group\"),\n                \"layer\"\n            );\n\n            return false;\n        }\n\n        return checkCurrentLayerIsVisible();\n    }\n\n    /**\n     * Update the scrollbar's range/position to match the current view settings for the document.\n     *\n     * @param scrollbar {CPScrollbar}\n     * @param visMin The smallest coordinate in this axis in which the drawing appears\n     * @param visWidth The extent of the drawing in this axis\n     * @param viewSize The extent of the screen canvas in this axis\n     * @param offset The present pixel offset of the drawing in this axis\n     */\n    function updateScrollBar(scrollbar, visMin, visWidth, viewSize, offset) {\n        var xMin = visMin - viewSize - offset + visWidth / 4,\n            xMax = visMin + visWidth - offset - visWidth / 4;\n\n        scrollbar.setValues(-offset, viewSize, xMin, xMax);\n\n        scrollbar.setBlockIncrement(Math.max(1, ~~(viewSize * 0.66)));\n        scrollbar.setUnitIncrement(Math.max(1, ~~(viewSize * 0.05)));\n    }\n\n    function updateScrollBars() {\n        if (\n            horzScroll == null ||\n            vertScroll == null ||\n            horzScroll.getValueIsAdjusting() ||\n            vertScroll.getValueIsAdjusting()\n        ) {\n            return;\n        }\n\n        var visibleRect = getRefreshArea(\n            new CPRect(0, 0, artworkCanvas.width, artworkCanvas.height)\n        );\n\n        updateScrollBar(\n            horzScroll,\n            visibleRect.left,\n            visibleRect.getWidth(),\n            canvas.clientWidth,\n            that.getOffset().x\n        );\n        updateScrollBar(\n            vertScroll,\n            visibleRect.top,\n            visibleRect.getHeight(),\n            canvas.clientHeight,\n            that.getOffset().y\n        );\n    }\n\n    function updateTransform({ resetViewFlip = false } = {}) {\n        transform.setToIdentity();\n        transform.translate(offsetX, offsetY);\n        transform.scale(zoom, zoom);\n        transform.rotate(canvasRotation);\n        if (isViewFlipped && !resetViewFlip) {\n            viewFlip(transform);\n        }\n\n        updateScrollBars();\n        that.repaintAll();\n    }\n\n    /**\n     * Convert a canvas-relative coordinate into document coordinates and return the new coordinate.\n     */\n    function coordToDocument(coord) {\n        // TODO cache inverted transform\n        return transform.getInverted().getTransformedPoint(coord);\n    }\n\n    /**\n     * Convert a canvas-relative coordinate into document coordinates.\n     */\n    function coordToDocumentInt(coord) {\n        var result = coordToDocument(coord);\n\n        result.x = Math.floor(result.x);\n        result.y = Math.floor(result.y);\n\n        return result;\n    }\n\n    /**\n     * Convert a {x: pageX, y: pageY} co-ordinate pair from a mouse event to canvas-relative coordinates.\n     */\n    function mouseCoordToCanvas(coord) {\n        var rect = canvas.getBoundingClientRect();\n\n        return {\n            x: coord.x - rect.left - window.pageXOffset,\n            y: coord.y - rect.top - window.pageYOffset,\n        };\n    }\n\n    function coordToDisplay(p) {\n        return transform.getTransformedPoint(p);\n    }\n\n    function coordToDisplayInt(p) {\n        var result = coordToDisplay(p);\n\n        result.x = Math.round(result.x);\n        result.y = Math.round(result.y);\n\n        return result;\n    }\n\n    /**\n     * Convert a rectangle that encloses the given document pixels into a rectangle in display coordinates.\n     *\n     * @param rect {CPRect}\n     * @returns {*[]}\n     */\n    function rectToDisplay(rect) {\n        var center = coordToDisplay({\n                x: (rect.left + rect.right) / 2,\n                y: (rect.top + rect.bottom) / 2,\n            }),\n            coords = rect.toPoints();\n\n        for (var i = 0; i < coords.length; i++) {\n            coords[i] = coordToDisplayInt(coords[i]);\n\n            // Need to inset the co-ordinates by 0.5 display pixels for the line to pass through the middle of the display pixel\n            coords[i].x += Math.sign(center.x - coords[i].x) * 0.5;\n            coords[i].y += Math.sign(center.y - coords[i].y) * 0.5;\n        }\n\n        return coords;\n    }\n\n    function strokePolygon(context, coords) {\n        context.beginPath();\n\n        context.moveTo(coords[0].x, coords[0].y);\n        for (var i = 1; i < coords.length; i++) {\n            context.lineTo(coords[i].x, coords[i].y);\n        }\n        context.lineTo(coords[0].x, coords[0].y);\n\n        context.stroke();\n    }\n\n    /**\n     * Stroke a selection rectangle that encloses the pixels in the given rectangle (in document co-ordinates).\n     */\n    function plotSelectionRect(context, rect) {\n        strokePolygon(context, rectToDisplay(rect));\n    }\n\n    /**\n     * Take a CPRect of document coordinates and return a CPRect of canvas coordinates to repaint for that region.\n     */\n    function getRefreshArea(r) {\n        var p1 = coordToDisplayInt({ x: r.left - 1, y: r.top - 1 }),\n            p2 = coordToDisplayInt({ x: r.left - 1, y: r.bottom }),\n            p3 = coordToDisplayInt({ x: r.right, y: r.top - 1 }),\n            p4 = coordToDisplayInt({ x: r.right, y: r.bottom }),\n            r2 = new CPRect(\n                Math.min(Math.min(p1.x, p2.x), Math.min(p3.x, p4.x)),\n                Math.min(Math.min(p1.y, p2.y), Math.min(p3.y, p4.y)),\n                Math.max(Math.max(p1.x, p2.x), Math.max(p3.x, p4.x)) + 1,\n                Math.max(Math.max(p1.y, p2.y), Math.max(p3.y, p4.y)) + 1\n            );\n\n        r2.grow(2, 2); // to be sure to include everything\n\n        return r2;\n    }\n\n    /**\n     * Adjust the current offset to bring the center of the artwork to the center of the canvas\n     */\n    function centerCanvas() {\n        var width = canvas.width,\n            height = canvas.height,\n            artworkCenter = coordToDisplay({\n                x: artwork.width / 2,\n                y: artwork.height / 2,\n            });\n\n        that.setOffset(\n            Math.round(offsetX + width / 2.0 - artworkCenter.x),\n            Math.round(offsetY + height / 2.0 - artworkCenter.y)\n        );\n    }\n\n    this.setZoom = function (_zoom) {\n        zoom = _zoom;\n        updateTransform();\n    };\n\n    this.getZoom = function () {\n        return zoom;\n    };\n\n    this.setGridSize = function (_gridSize) {\n        gridSize = Math.max(Math.round(_gridSize), 1);\n        this.repaintAll();\n    };\n\n    this.getGridSize = function () {\n        return gridSize;\n    };\n\n    this.setOffset = function (x, y) {\n        if (isNaN(x) || isNaN(y)) {\n            console.log(\"Bad offset\");\n        } else {\n            offsetX = x;\n            offsetY = y;\n            updateTransform();\n        }\n    };\n\n    this.getOffset = function () {\n        return { x: offsetX, y: offsetY };\n    };\n\n    this.setInterpolation = function (enabled) {\n        interpolation = enabled;\n\n        setCanvasInterpolation(canvasContext, enabled);\n\n        this.repaintAll();\n    };\n\n    this.setRotation = function (angle) {\n        canvasRotation = angle % (2 * Math.PI);\n        updateTransform();\n    };\n\n    this.setRotationOnCenter = function (angle) {\n        const width = canvas.width;\n        const height = canvas.height;\n        const centerX = width / 2;\n        const centerY = height / 2;\n\n        // 前の回転との差分を使って offset を補正する\n        const delta = angle - canvasRotation;\n        const cos = Math.cos(delta);\n        const sin = Math.sin(delta);\n\n        // 中心を基準にするようにオフセット調整\n        const dx = offsetX - centerX;\n        const dy = offsetY - centerY;\n        offsetX = centerX + dx * cos - dy * sin;\n        offsetY = centerY + dx * sin + dy * cos;\n\n        canvasRotation = angle % (2 * Math.PI);\n        updateTransform();\n    };\n\n    /**\n     * 現在のキャンバスの回転角度をラジアンで取得します。\n     *\n     * @returns {number} キャンバスの回転角度（ラジアン）\n     */\n    this.getRotation = function () {\n        return canvasRotation;\n    };\n\n    /**\n     * Get canvas rotation in degrees, normalized to [-180, +180].\n     * @returns {number} 現在の角度（度）\n     */\n    this.getRotationDegrees = function () {\n        let deg = (this.getRotation() * 180) / Math.PI;\n        deg = ((deg + 180 + 360) % 360) - 180; // 負の値を補正\n        return deg;\n    };\n\n    /**\n     * Set canvas rotation in degrees, accepts [-180, +180] or any degree.\n     * @param {number} degrees\n     */\n    this.setRotationDegrees = function (degrees) {\n        const radians = (degrees * Math.PI) / 180;\n        this.setRotationOnCenter(radians);\n    };\n\n    /**\n     * Get the rotation as the nearest number of whole 90 degree clockwise rotations ([0..3])\n     */\n    this.getRotation90 = function () {\n        var rotation = Math.round((this.getRotation() / Math.PI) * 2);\n\n        // Just in case:\n        rotation %= 4;\n\n        // We want [0..3] as output\n        if (rotation < 0) {\n            rotation += 4;\n        }\n\n        return rotation;\n    };\n\n    /**\n     *\n     * @param zoom float\n     * @param centerX float X co-ordinate in the canvas space\n     * @param centerY float Y co-ordinate in the canvas space\n     */\n    function zoomOnPoint(zoom, centerX, centerY) {\n        zoom = Math.max(MIN_ZOOM, Math.min(MAX_ZOOM, zoom));\n\n        if (that.getZoom() != zoom) {\n            var offset = that.getOffset();\n\n            that.setOffset(\n                offset.x +\n                    ~~((centerX - offset.x) * (1 - zoom / that.getZoom())),\n                offset.y +\n                    ~~((centerY - offset.y) * (1 - zoom / that.getZoom()))\n            );\n\n            that.setZoom(zoom);\n\n            /*CPController.CPViewInfo viewInfo = new CPController.CPViewInfo();\n            viewInfo.zoom = zoom;\n            viewInfo.offsetX = offsetX;\n            viewInfo.offsetY = offsetY;\n            controller.callViewListeners(viewInfo); TODO */\n\n            that.repaintAll();\n        }\n    }\n\n    // More advanced zoom methods\n    function zoomOnCenter(zoom, snap = true) {\n        const width = canvas.clientWidth;\n        const height = canvas.clientHeight;\n\n        if (snap) {\n            // 拡大を1.41、縮小を0.7092にした関係で、zoomが浮動小数点になるため、1倍2倍に近い時は値をまるめる\n            const roundedZoom = parseFloat(zoom);\n\n            if (Math.abs(roundedZoom - 1) < 0.01) {\n                zoom = 1;\n            } else if (Math.abs(roundedZoom - 2) < 0.2) {\n                zoom = 2;\n            } else if (Math.abs(roundedZoom - 0.5) < 0.08) {\n                zoom = 0.5;\n            }\n            // console.log(\"Math.abs(roundedZoom - 1)\",Math.abs(roundedZoom - 1));\n            // console.log(\"Math.abs(roundedZoom - 2)\",Math.abs(roundedZoom - 2));\n            // console.log(\"Math.abs(roundedZoom - 0.5)\",Math.abs(roundedZoom - 0.5));\n            // console.log(\"zoom\",zoom);\n        }\n\n        zoomOnPoint(zoom, width / 2, height / 2);\n    }\n\n    this.zoomIn = function () {\n        zoomOnCenter(this.getZoom() * 1.41);\n    };\n\n    this.zoomOut = function () {\n        zoomOnCenter(this.getZoom() * 0.7092);\n    };\n\n    this.zoom100 = function () {\n        zoomOnCenter(1);\n        centerCanvas();\n    };\n\n    this.zoomOnCenter = (zoom, snap = false) => {\n        zoomOnCenter(zoom, snap);\n    };\n\n    this.resetRotation = function () {\n        var center = { x: canvas.width / 2, y: canvas.height / 2 },\n            rotTrans = new CPTransform();\n\n        rotTrans.rotateAroundPoint(-this.getRotation(), center.x, center.y);\n        rotTrans.multiply(transform);\n\n        //表示が左右反転している時は\n        if (isViewFlipped) {\n            //さらに反転して戻す\n            viewFlip(rotTrans);\n        }\n\n        this.setOffset(~~rotTrans.getTranslateX(), ~~rotTrans.getTranslateY());\n        this.setRotation(0);\n        that.emitEvent(\"canvasRotated90\", [0]);\n    };\n\n    //ズームと回転をリセット\n    this.resetZoomAndRotation = function () {\n        this.zoom100();\n        this.resetRotation();\n        isViewFlipped = false;\n        updateTransform({ resetViewFlip: true });\n    };\n\n    //パンまたは回転モードかどうかを判定\n    this.isPanOrRotateMode = function () {\n        return isPinchZoomAllowed;\n    };\n\n    /**\n     * Get the current pen pressure, given a pointer event.\n     *\n     * @param {PointerEvent} e\n     *\n     * @return {Number}\n     */\n    function getPointerPressure(e) {\n        // Safari fails to set pressure = 0.5 for mouse button down like it is supposed to\n        if (e.pointerType === \"mouse\" && e.buttons !== 0 && e.pressure === 0) {\n            return 1;\n        }\n\n        if (e.pointerType === \"touch\") {\n            /* Some devices like iOS set pressure = 0 for all touch events, so detect that absence of pressure\n             * and override to use a pressure of 1.0.\n             *\n             * Android provides useful pressure based on the finger's contact area with the screen (Pixel 4A).\n             */\n            if (e.pressure !== 0) {\n                sawTouchWithPressure = true;\n            }\n\n            if (sawTouchWithPressure) {\n                return e.pressure * 2;\n            }\n\n            return 1.0;\n        }\n\n        /* In the Pointer Events API, mice have a default pressure of 0.5, but we want 1.0. Since we can't\n         * reliably distinguish between mice and pens, we don't have any better options:\n         */\n        return e.pressure * 2;\n    }\n\n    let mouseWheelDebounce = false;\n\n    function handleMouseWheel(e) {\n        if (e.deltaY != 0) {\n            if (!mouseWheelDebounce || Math.abs(e.deltaY) > 20) {\n                let factor;\n\n                if (e.deltaY > 0) {\n                    factor = 1 / 1.15;\n                } else {\n                    factor = 1.15;\n                }\n\n                let canvasPoint = mouseCoordToCanvas({\n                        x: e.pageX,\n                        y: e.pageY,\n                    }),\n                    docPoint = coordToDocument(canvasPoint);\n\n                if (artwork.isPointWithin(docPoint.x, docPoint.y)) {\n                    zoomOnPoint(\n                        that.getZoom() * factor,\n                        canvasPoint.x,\n                        canvasPoint.y\n                    );\n                } else {\n                    zoomOnPoint(\n                        that.getZoom() * factor,\n                        offsetX + ~~((artwork.width * zoom) / 2),\n                        offsetY + ~~((artwork.height * zoom) / 2)\n                    );\n                }\n\n                mouseWheelDebounce =\n                    mouseWheelDebounce ||\n                    setTimeout(function () {\n                        mouseWheelDebounce = false;\n                    }, 50);\n            }\n\n            e.preventDefault();\n        }\n    }\n\n    //表示の左右反転を制御\n    let isViewFlipped = false;\n    this.toggleViewFlip = () => {\n        if (!isViewFlipped) {\n            viewFlip(transform);\n            isViewFlipped = true;\n            that.repaintAll();\n        } else {\n            isViewFlipped = false;\n            updateTransform({ resetViewFlip: true });\n        }\n        //呼び出し元で反転状態の判定処理\n        return isViewFlipped;\n    };\n    //表示の左右反転\n    function viewFlip(transform) {\n        const cx = artwork.width / 2;\n        transform.translate(cx, 0);\n        transform.scale(-1, 1);\n        transform.translate(-cx, 0);\n    }\n\n    // ペンでズーム\n    let penZoomActive = false;\n    let penStartX = 0;\n    canvas.addEventListener(\"pointerdown\", (e) => {\n        if (\n            !e.altKey &&\n            ((!e.ctrlKey && key.isPressed(\"z\")) ||\n                (e.ctrlKey && key.isPressed(\"space\"))) &&\n            e.pointerType !== \"touch\"\n        ) {\n            penZoomActive = true;\n            penStartX = e.clientX;\n        }\n    });\n\n    canvas.addEventListener(\"pointermove\", (e) => {\n        if (\n            !e.altKey &&\n            ((!e.ctrlKey && key.isPressed(\"z\")) ||\n                (e.ctrlKey && key.isPressed(\"space\"))) &&\n            penZoomActive &&\n            e.pointerType !== \"touch\" &&\n            e.buttons === 1\n        ) {\n            const deltaX = e.clientX - penStartX;\n\n            if (Math.abs(deltaX) > 10) {\n                const factor = deltaX > 0 ? 1.15 : 1 / 1.15;\n\n                // ペンの現在位置をキャンバス座標に変換\n                const canvasPoint = mouseCoordToCanvas({\n                    x: e.pageX,\n                    y: e.pageY,\n                });\n\n                zoomOnPoint(\n                    that.getZoom() * factor,\n                    canvasPoint.x,\n                    canvasPoint.y\n                );\n\n                penStartX = e.clientX; // 連続ズーム対応\n            }\n\n            e.preventDefault();\n        }\n    });\n\n    canvas.addEventListener(\"pointerup\", (e) => {\n        if (e.pointerType !== \"touch\") {\n            penZoomActive = false;\n        }\n    });\n    //ピンチズーム\n    let pinchStartDistance = 0;\n    let pinchStartZoom = 1;\n    let activeTouches = 0;\n    function getDistance(touches) {\n        const dx = touches[0].pageX - touches[1].pageX;\n        const dy = touches[0].pageY - touches[1].pageY;\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n    function handleTouchStart(e) {\n        activeTouches = e.touches.length;\n\n        if (isPinchZoomAllowed && activeTouches === 2) {\n            pinchStartDistance = getDistance(e.touches);\n            pinchStartZoom = that.getZoom();\n            e.preventDefault();\n        }\n    }\n    function handleTouchEnd(e) {\n        activeTouches = e.touches.length;\n    }\n    function handleTouchMove(e) {\n        activeTouches = e.touches.length;\n\n        if (isPinchZoomAllowed && activeTouches === 2) {\n            const newDistance = getDistance(e.touches);\n            const zoomFactor = newDistance / pinchStartDistance;\n\n            // 2本の指の中点を取得（canvas space に変換）\n            const midX = (e.touches[0].pageX + e.touches[1].pageX) / 2;\n            const midY = (e.touches[0].pageY + e.touches[1].pageY) / 2;\n\n            const canvasPoint = mouseCoordToCanvas({ x: midX, y: midY });\n\n            // すでにある zoomOnPoint を使う\n            zoomOnPoint(\n                pinchStartZoom * zoomFactor,\n                canvasPoint.x,\n                canvasPoint.y\n            );\n\n            e.preventDefault();\n        }\n    }\n\n    let canvasClientRect;\n\n    function handlePointerMove(e) {\n        // Use the cached position of the canvas on the page if possible\n        if (!canvasClientRect) {\n            canvasClientRect = canvas.getBoundingClientRect();\n        }\n\n        if (sawPen && !isTouchInputAllowed && e.pointerType === \"touch\") {\n            //タッチインプットが許可されていないモードの時はペン対応デバイスのタッチイベントを無視する\n            // Palm rejection for devices that support pens\n            return;\n        }\n        if (activeTouches > 1 && e.pointerType === \"touch\") {\n            //二本指以上の時は処理しない\n            return;\n        }\n        if (key.isPressed(\"z\") || (e.ctrlKey && key.isPressed(\"space\"))) {\n            // ズーム中は描画しない\n            return;\n        }\n\n        /* Store these globally for the event handlers to refer to (we'd write to the event itself but some browsers\n         * don't enjoy that)\n         */\n        mouseX = e.clientX - canvasClientRect.left;\n        mouseY = e.clientY - canvasClientRect.top;\n\n        const // Flags used by e.buttons:\n            FLAG_PRIMARY = 1,\n            FLAG_SECONDARY = 2,\n            FLAG_WHEEL = 4,\n            isDragging = e.buttons !== 0,\n            pressure = isDragging ? getPointerPressure(e) : 0;\n\n        // Did any of our buttons change state?\n        if (((e.buttons & FLAG_PRIMARY) !== 0) != mouseDown[BUTTON_PRIMARY]) {\n            mouseDown[BUTTON_PRIMARY] = !mouseDown[BUTTON_PRIMARY];\n\n            if (mouseDown[BUTTON_PRIMARY]) {\n                modeStack.mouseDown(e, BUTTON_PRIMARY, pressure);\n            } else {\n                modeStack.mouseUp(e, BUTTON_PRIMARY, pressure);\n            }\n        }\n\n        if (\n            ((e.buttons & FLAG_SECONDARY) !== 0) !=\n            mouseDown[BUTTON_SECONDARY]\n        ) {\n            mouseDown[BUTTON_SECONDARY] = !mouseDown[BUTTON_SECONDARY];\n\n            if (mouseDown[BUTTON_SECONDARY]) {\n                modeStack.mouseDown(e, BUTTON_SECONDARY, pressure);\n            } else {\n                modeStack.mouseUp(e, BUTTON_SECONDARY, pressure);\n            }\n        }\n\n        if (((e.buttons & FLAG_WHEEL) !== 0) != mouseDown[BUTTON_WHEEL]) {\n            mouseDown[BUTTON_WHEEL] = !mouseDown[BUTTON_WHEEL];\n\n            if (mouseDown[BUTTON_WHEEL]) {\n                modeStack.mouseDown(e, BUTTON_WHEEL, pressure);\n            } else {\n                modeStack.mouseUp(e, BUTTON_WHEEL, pressure);\n            }\n        }\n\n        if (isDragging) {\n            modeStack.mouseDrag(e, pressure);\n        } else {\n            modeStack.mouseMove(e, pressure);\n        }\n\n        if (!sawPen && e.pointerType === \"pen\") {\n            sawPen = true;\n        }\n    }\n\n    // Called when all mouse/pointer buttons are released\n    function handlePointerUp(e) {\n        mouseDown[BUTTON_PRIMARY] = false;\n        mouseDown[BUTTON_SECONDARY] = false;\n        mouseDown[BUTTON_WHEEL] = false;\n\n        modeStack.mouseUp(e, e.button, 0.0);\n        canvas.releasePointerCapture(e.pointerId);\n    }\n\n    // Called when the first button on the pointer is depressed / pen touches the surface\n    function handlePointerDown(e) {\n        if (sawPen && !isTouchInputAllowed && e.pointerType === \"touch\") {\n            //タッチインプットが許可されていないモードの時はペン対応デバイスのタッチイベントを無視する\n            // Palm rejection for devices that support pens\n            return;\n        }\n        if (key.isPressed(\"z\")) {\n            // ズーム中は描画しない\n            return;\n        }\n\n        canvas.setPointerCapture(e.pointerId);\n\n        canvasClientRect = canvas.getBoundingClientRect();\n\n        // Store these globally for the event handlers to refer to\n        mouseX = e.clientX - canvasClientRect.left;\n        mouseY = e.clientY - canvasClientRect.top;\n\n        mouseDown[BUTTON_PRIMARY] = false;\n        mouseDown[BUTTON_SECONDARY] = false;\n        mouseDown[BUTTON_WHEEL] = false;\n\n        mouseDown[e.button] = true;\n\n        modeStack.mouseDown(e, e.button, getPointerPressure(e));\n    }\n\n    function handleKeyDown(e) {\n        modeStack.keyDown(e);\n    }\n\n    function handleKeyUp(e) {\n        //altキーを押下した直後にショートカットキーが動作しなくなる問題を修正\n        if (e.key.toLowerCase() === \"alt\") {\n            //altキーが離された時のDefaultの動作をキャンセル\n            e.preventDefault();\n        }\n        modeStack.keyUp(e);\n    }\n\n    // Get the DOM element for the canvas area\n    this.getElement = function () {\n        return canvasContainer;\n    };\n\n    /**\n     * Schedule a repaint for the current repaint region.\n     */\n    function repaint() {\n        if (!scheduledRepaint) {\n            scheduledRepaint = true;\n            window.requestAnimationFrame(function () {\n                that.paint();\n            });\n        }\n    }\n\n    /**\n     * Schedule a repaint for the entire screen.\n     */\n    this.repaintAll = function () {\n        repaintRegion.left = 0;\n        repaintRegion.top = 0;\n        repaintRegion.right = canvas.width;\n        repaintRegion.bottom = canvas.height;\n\n        repaint();\n    };\n\n    /**\n     * Schedule a repaint for an area of the screen for later.\n     *\n     * @param rect CPRect Region that should be repainted using display coordinates\n     */\n    function repaintRect(rect) {\n        repaintRegion.union(rect);\n\n        repaint();\n    }\n\n    this.paint = function () {\n        var drawingWasClipped = false;\n\n        scheduledRepaint = false;\n\n        /* Clip drawing to the area of the screen we want to repaint */\n        if (!repaintRegion.isEmpty()) {\n            canvasContext.save();\n\n            if (canvasContext.clipTo) {\n                canvasContext.beginPath();\n\n                repaintRegion.left = repaintRegion.left | 0;\n                repaintRegion.top = repaintRegion.top | 0;\n\n                canvasContext.rect(\n                    repaintRegion.left,\n                    repaintRegion.top,\n                    Math.ceil(repaintRegion.getWidth()),\n                    Math.ceil(repaintRegion.getHeight())\n                );\n\n                canvasContext.clip();\n            }\n\n            drawingWasClipped = true;\n        }\n\n        /* Copy pixels that changed in the document into our local fused image cache */\n        if (!artworkUpdateRegion.isEmpty()) {\n            let imageData;\n\n            if (maskView && maskView.isOpen()) {\n                imageData = maskView.getImageData();\n            } else {\n                imageData = artwork.fusionLayers().getImageData();\n            }\n\n            artworkCanvasContext.putImageData(\n                imageData,\n                0,\n                0,\n                artworkUpdateRegion.left,\n                artworkUpdateRegion.top,\n                artworkUpdateRegion.getWidth(),\n                artworkUpdateRegion.getHeight()\n            );\n\n            artworkUpdateRegion.makeEmpty();\n        }\n\n        canvasContext.fillStyle = \"#606060\";\n        canvasContext.fillRect(0, 0, canvas.width, canvas.height);\n\n        // Transform the coordinate system to bring the document into the right position on the screen (translate/zoom/etc)\n        canvasContext.save();\n        {\n            canvasContext.setTransform(\n                transform.m[0],\n                transform.m[1],\n                transform.m[2],\n                transform.m[3],\n                transform.m[4],\n                transform.m[5]\n            );\n\n            canvasContext.fillStyle = checkerboardPattern;\n            canvasContext.fillRect(0, 0, artwork.width, artwork.height);\n\n            canvasContext.drawImage(\n                artworkCanvas,\n                0,\n                0,\n                artworkCanvas.width,\n                artworkCanvas.height\n            );\n        }\n        canvasContext.restore();\n\n        // The rest of the drawing happens using the original screen coordinate system\n        setContrastingDrawStyle(canvasContext, \"stroke\");\n\n        canvasContext.lineWidth = 1.0;\n\n        // Draw the artwork selection so long as we're not in the middle of selecting a new rectangle\n        if (\n            !artwork.getSelection().isEmpty() &&\n            !(\n                modeStack.peek() instanceof CPRectSelectionMode &&\n                modeStack.peek().capture\n            )\n        ) {\n            canvasContext.setLineDash([3, 2]);\n\n            plotSelectionRect(canvasContext, artwork.getSelection());\n\n            canvasContext.setLineDash([]);\n        }\n\n        // Draw grid\n        if (showGrid) {\n            var bounds = artwork.getBounds(),\n                gridVisualPitch = zoom * gridSize;\n\n            /* If the grid is going to be miniscule on the screen (basically just covering/inverting the entire artwork,\n             * do not paint it.\n             */\n            if (gridVisualPitch > 2) {\n                canvasContext.beginPath();\n\n                // Vertical lines\n                for (let i = gridSize - 1; i < bounds.right; i += gridSize) {\n                    let p1 = coordToDisplay({ x: i, y: bounds.top }),\n                        p2 = coordToDisplay({ x: i, y: bounds.bottom });\n\n                    canvasContext.moveTo(p1.x + 0.5, p1.y + 0.5);\n                    canvasContext.lineTo(p2.x + 0.5, p2.y + 0.5);\n                }\n\n                // Horizontal lines\n                for (let i = gridSize - 1; i < bounds.bottom; i += gridSize) {\n                    let p1 = coordToDisplay({ x: 0, y: i }),\n                        p2 = coordToDisplay({ x: bounds.right, y: i });\n\n                    canvasContext.moveTo(p1.x + 0.5, p1.y + 0.5);\n                    canvasContext.lineTo(p2.x + 0.5, p2.y + 0.5);\n                }\n\n                canvasContext.stroke();\n            }\n        }\n\n        // Additional drawing by the current mode\n        modeStack.paint(canvasContext);\n\n        canvasContext.globalCompositeOperation = \"source-over\";\n\n        if (drawingWasClipped) {\n            repaintRegion.makeEmpty();\n\n            canvasContext.restore();\n        }\n    };\n\n    this.showGrid = function (show) {\n        showGrid = show;\n        this.repaintAll();\n    };\n\n    /**\n     * Resize the canvas area to the given height (in pixels)\n     *\n     * @param {number} height New canvas area height in CSS pixels\n     * @param {boolean} skipCenter True if the canvas should not be re-centered\n     */\n    this.resize = function (height, skipCenter) {\n        // Leave room for the bottom scrollbar\n        height -= canvasContainerBottom.offsetHeight;\n\n        //canvas.hightでは少数点以下が切り捨てられるため\n        //canvas.style.heightに小数点が入るとcanvasの大きさが変わる\n        //事前Math.floorで整数化\n        height = Math.floor(height);\n\n        canvas.style.height = height + \"px\";\n\n        canvas.width = canvas.clientWidth;\n        canvas.height = height;\n\n        canvasClientRect = null;\n\n        if (!skipCenter) {\n            centerCanvas();\n        }\n\n        // Interpolation property gets reset when canvas resizes\n        this.setInterpolation(interpolation);\n\n        this.repaintAll();\n    };\n\n    controller.on(\"toolChange\", function (tool, toolInfo) {\n        var newMode = drawingModes[toolInfo.strokeMode];\n\n        // If we currently have any drawing modes active, switch them to the drawing mode of the new tool\n        for (var i = 0; i < modeStack.modes.length; i++) {\n            if (modeStack.modes[i] instanceof CPDrawingMode) {\n                modeStack.modes[i].leave();\n                modeStack.modes[i] = newMode;\n                modeStack.modes[i].enter();\n\n                break;\n            }\n        }\n\n        curDrawMode = newMode;\n    });\n\n    controller.on(\"modeChange\", function (mode) {\n        var newMode;\n\n        switch (mode) {\n            case ChickenPaint.M_DRAW:\n                newMode = curDrawMode;\n                break;\n\n            case ChickenPaint.M_FLOODFILL:\n                newMode = floodFillMode;\n                break;\n\n            case ChickenPaint.M_GRADIENTFILL:\n                newMode = gradientFillMode;\n                break;\n\n            case ChickenPaint.M_RECT_SELECTION:\n                newMode = rectSelectionMode;\n                break;\n\n            case ChickenPaint.M_MOVE_TOOL:\n                newMode = moveToolMode;\n                break;\n\n            case ChickenPaint.M_ROTATE_CANVAS:\n                newMode = rotateCanvasMode;\n                break;\n\n            case ChickenPaint.M_PAN_CANVAS:\n                newMode = panMode;\n                break;\n\n            case ChickenPaint.M_COLOR_PICKER:\n                newMode = colorPickerMode;\n                break;\n\n            case ChickenPaint.M_TRANSFORM:\n                newMode = transformMode;\n                break;\n        }\n        isPinchZoomAllowed =\n            mode === ChickenPaint.M_PAN_CANVAS ||\n            mode === ChickenPaint.M_ROTATE_CANVAS;\n        isTouchInputAllowed =\n            mode === ChickenPaint.M_MOVE_TOOL ||\n            mode === ChickenPaint.M_ROTATE_CANVAS ||\n            mode === ChickenPaint.M_PAN_CANVAS;\n        modeStack.setUserMode(newMode);\n    });\n\n    function onMaskViewChangeLayer() {\n        artworkUpdateRegion = artwork.getBounds();\n        that.repaintAll();\n    }\n\n    controller.on(\"maskViewOpened\", function (newMaskView) {\n        if (maskView) {\n            maskView.off(\"changeLayer\", onMaskViewChangeLayer);\n        }\n\n        maskView = newMaskView;\n\n        maskView.on(\"changeLayer\", onMaskViewChangeLayer);\n\n        onMaskViewChangeLayer();\n    });\n\n    //\n    // Modes system: modes control the way the GUI is reacting to the user input\n    // All the tools are implemented through modes\n    //\n\n    defaultMode = new CPDefaultMode();\n    colorPickerMode = new CPColorPickerMode();\n    panMode = new CPPanCanvasMode();\n    rotateCanvasMode = new CPRotateCanvasMode();\n    floodFillMode = new CPFloodFillMode();\n    gradientFillMode = new CPGradientFillMode();\n    rectSelectionMode = new CPRectSelectionMode();\n    moveToolMode = new CPMoveToolMode();\n    transformMode = new CPTransformMode();\n\n    // this must correspond to the stroke modes defined in CPToolInfo\n    drawingModes = [new CPFreehandMode(), new CPLineMode(), new CPBezierMode()];\n\n    curDrawMode = drawingModes[CPBrushInfo.STROKE_MODE_FREEHAND];\n\n    // The default mode will handle the events that no other modes are interested in\n    modeStack.setDefaultMode(defaultMode);\n    modeStack.setUserMode(curDrawMode);\n\n    artworkCanvas.width = artwork.width;\n    artworkCanvas.height = artwork.height;\n\n    canvas.width = 800;\n    canvas.height = 900;\n    canvas.className = \"chickenpaint-canvas\";\n    canvas.setAttribute(\"touch-action\", \"none\");\n\n    if (!canvasContext.setLineDash) {\n        canvasContext.setLineDash = function () {}; // For IE 10 and older\n    }\n\n    canvas.addEventListener(\"contextmenu\", function (e) {\n        e.preventDefault();\n    });\n\n    canvas.addEventListener(\"mouseenter\", function () {\n        mouseIn = true;\n    });\n\n    canvas.addEventListener(\"mouseleave\", function () {\n        mouseIn = false;\n\n        if (\n            !mouseDown[BUTTON_PRIMARY] &&\n            !mouseDown[BUTTON_SECONDARY] &&\n            !mouseDown[BUTTON_WHEEL]\n        ) {\n            that.repaintAll();\n        }\n    });\n\n    canvas.addEventListener(\"pointerdown\", handlePointerDown);\n    canvas.addEventListener(\"pointermove\", handlePointerMove);\n    canvas.addEventListener(\"touchstart\", handleTouchStart, { passive: false });\n    canvas.addEventListener(\"touchend\", handleTouchEnd, { passive: false });\n    canvas.addEventListener(\"touchmove\", handleTouchMove, { passive: false });\n    canvas.addEventListener(\"pointerup\", handlePointerUp);\n    canvas.addEventListener(\"wheel\", handleMouseWheel, { passive: false });\n\n    document.addEventListener(\"keydown\", handleKeyDown);\n    document.addEventListener(\"keyup\", handleKeyUp);\n\n    /* Workaround for Chrome Mac bug that causes canvas to be disposed and never recreated when tab is switched into the\n     * background https://bugs.chromium.org/p/chromium/issues/detail?id=588434\n     */\n    document.addEventListener(\n        \"visibilitychange\",\n        function () {\n            const oldHeight =\n                canvas.height + canvasContainerBottom.offsetHeight;\n\n            canvas.width = 1;\n            canvas.height = 1;\n\n            that.resize(oldHeight, true);\n        },\n        false\n    );\n\n    window.addEventListener(\"scroll\", function () {\n        canvasClientRect = null;\n    });\n\n    canvas.addEventListener(\"mousedown\", function (e) {\n        if (e.button == BUTTON_WHEEL) {\n            // Prevent middle-mouse scrolling in Firefox\n            e.preventDefault();\n        }\n    });\n\n    artwork.on(\"changeSelection\", function () {\n        // We could keep track of our last-painted selection rect and only invalidate that here\n        that.repaintAll();\n    });\n\n    artwork.on(\"updateRegion\", function (region) {\n        artworkUpdateRegion.union(region);\n\n        repaintRect(getRefreshArea(artworkUpdateRegion));\n    });\n\n    horzScroll.on(\"valueChanged\", function (value) {\n        var p = that.getOffset();\n\n        that.setOffset(-value, p.y);\n    });\n\n    vertScroll.on(\"valueChanged\", function (value) {\n        var p = that.getOffset();\n\n        that.setOffset(p.x, -value);\n    });\n\n    //初期状態で、ズームのアンチエイリアスをOnに\n    this.setInterpolation(true);\n\n    var canvasSpacingWrapper = document.createElement(\"div\");\n\n    canvasSpacingWrapper.className = \"chickenpaint-canvas-container-wrapper\";\n    canvasSpacingWrapper.appendChild(canvas);\n\n    canvasContainerTop.className = \"chickenpaint-canvas-container-top\";\n    canvasContainerTop.appendChild(canvasSpacingWrapper);\n    canvasContainerTop.appendChild(vertScroll.getElement());\n\n    canvasContainerBottom.className = \"chickenpaint-canvas-container-bottom\";\n    canvasContainerBottom.appendChild(horzScroll.getElement());\n\n    canvasContainer.appendChild(canvasContainerTop);\n    canvasContainer.appendChild(canvasContainerBottom);\n\n    controller.setCanvas(this);\n}\n\nCPCanvas.prototype = Object.create(EventEmitter.prototype);\nCPCanvas.prototype.constructor = CPCanvas;\n","//     keymaster.js\r\n//     (c) 2011-2013 Thomas Fuchs\r\n//     keymaster.js may be freely distributed under the MIT license.\r\n\r\n;(function(global){\r\n\tvar k,\r\n\t  _handlers = {},\r\n\t  _mods = { 16: false, 18: false, 17: false, 91: false },\r\n\t  _scope = 'all',\r\n\t  // modifier keys\r\n\t  _MODIFIERS = {\r\n\t\t'⇧': 16, shift: 16,\r\n\t\t'⌥': 18, alt: 18, option: 18,\r\n\t\t'⌃': 17, ctrl: 17, control: 17,\r\n\t\t'⌘': 91, command: 91\r\n\t  },\r\n\t  // special keys\r\n\t  _MAP = {\r\n\t\tbackspace: 8, tab: 9, clear: 12,\r\n\t\tenter: 13, 'return': 13,\r\n\t\tesc: 27, escape: 27, space: 32,\r\n\t\tleft: 37, up: 38,\r\n\t\tright: 39, down: 40,\r\n\t\tdel: 46, 'delete': 46,\r\n\t\thome: 36, end: 35,\r\n\t\tpageup: 33, pagedown: 34,\r\n\t\t',': 188, '.': 190, '/': 191,\r\n\t\t'`': 192,\r\n\t\t'-': 189,\r\n\t\t'=': 187,\r\n\t\t';': 186, '\\'': 222,\r\n\t\t'[': 219, ']': 221, '\\\\': 220\r\n\t  },\r\n\t  code = function(x){\r\n\t\tvar code = _MAP[x] || x.toUpperCase().charCodeAt(0);\r\n\t\treturn (typeof code === \"function\") ? code() : code;\r\n\t  },\r\n\t  _downKeys = [];\r\n  \r\n\tfor(k=1;k<20;k++) _MAP['f'+k] = 111+k;\r\n  \r\n\t// IE doesn't support Array#indexOf, so have a simple replacement\r\n\tfunction index(array, item){\r\n\t  var i = array.length;\r\n\t  while(i--) if(array[i]===item) return i;\r\n\t  return -1;\r\n\t}\r\n  \r\n\t// for comparing mods before unassignment\r\n\tfunction compareArray(a1, a2) {\r\n\t  if (a1.length != a2.length) return false;\r\n\t  for (var i = 0; i < a1.length; i++) {\r\n\t\t  if (a1[i] !== a2[i]) return false;\r\n\t  }\r\n\t  return true;\r\n\t}\r\n  \r\n\tfunction getBrowserName() {\r\n\t  if(navigator.userAgent.toLowerCase().indexOf('firefox') > 0) return \"firefox\";\r\n\t}\r\n  \r\n\tvar modifierMap = {\r\n\t\t16:'shiftKey',\r\n\t\t18:'altKey',\r\n\t\t17:'ctrlKey',\r\n\t\t91:'metaKey'\r\n\t};\r\n\tfunction updateModifierKey(event) {\r\n\t\tfor(k in _mods) _mods[k] = event[modifierMap[k]];\r\n\t};\r\n  \r\n\t// handle keydown event\r\n\tfunction dispatch(event) {\r\n\t  var key, handler, k, i, modifiersMatch, scope;\r\n\t//   key = event.keyCode;\r\n\t  key = getKeyCodeFromKey(event.key);\r\n  \r\n\t  if (index(_downKeys, key) == -1) {\r\n\t\t  _downKeys.push(key);\r\n\t  }\r\n\t\r\n\t  // if a modifier key, set the key.<modifierkeyname> property to true and return\r\n\t  if(key in _mods) {\r\n\t\t_mods[key] = true;\r\n\t\t// 'assignKey' from inside this closure is exported to window.key\r\n\t\tfor(k in _MODIFIERS) if(_MODIFIERS[k] == key) assignKey[k] = true;\r\n\t\treturn;\r\n\t  }\r\n\t  updateModifierKey(event);\r\n  \r\n\t  // see if we need to ignore the keypress (filter() can can be overridden)\r\n\t  // by default ignore key presses if a select, textarea, or input is focused\r\n\t  if(!assignKey.filter.call(this, event)) return;\r\n  \r\n\t  // abort if no potentially matching shortcuts found\r\n\t  if (!(key in _handlers)) return;\r\n  \r\n\t  scope = getScope();\r\n  \r\n\t  // for each potential shortcut\r\n\t  for (i = 0; i < _handlers[key].length; i++) {\r\n\t\thandler = _handlers[key][i];\r\n  \r\n\t\t// see if it's in the current scope\r\n\t\tif(handler.scope == scope || handler.scope == 'all'){\r\n\t\t  // check if modifiers match if any\r\n\t\t  modifiersMatch = handler.mods.length > 0;\r\n\t\t  for(k in _mods)\r\n\t\t\tif((!_mods[k] && index(handler.mods, +k) > -1) ||\r\n\t\t\t  (_mods[k] && index(handler.mods, +k) == -1)) modifiersMatch = false;\r\n\t\t  // call the handler and stop the event if neccessary\r\n\t\t  if((handler.mods.length == 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91]) || modifiersMatch){\r\n\t\t\tif(handler.method(event, handler)===false){\r\n\t\t\t  if(event.preventDefault) event.preventDefault();\r\n\t\t\t\telse event.returnValue = false;\r\n\t\t\t  if(event.stopPropagation) event.stopPropagation();\r\n\t\t\t  if(event.cancelBubble) event.cancelBubble = true;\r\n\t\t\t}\r\n\t\t  }\r\n\t\t}\r\n\t  }\r\n\t};\r\n  \r\n\t// unset modifier keys on keyup\r\n\tfunction clearModifier(event){\r\n\t//   var key = event.keyCode, k,\r\n\t  var key = getKeyCodeFromKey(event.key), k,\r\n\t\t  i = index(_downKeys, key);\r\n  \r\n\t  // remove key from _downKeys\r\n\t  if (i >= 0) {\r\n\t\t  _downKeys.splice(i, 1);\r\n\t  }\r\n  \r\n\t  if(key in _mods) {\r\n\t\t_mods[key] = false;\r\n\t\tfor(k in _MODIFIERS) if(_MODIFIERS[k] == key) assignKey[k] = false;\r\n\t  }\r\n\t};\r\n  \r\n\tfunction resetModifiers() {\r\n\t  for(k in _mods) _mods[k] = false;\r\n\t  for(k in _MODIFIERS) assignKey[k] = false;\r\n\t};\r\n  \r\n\t// parse and assign shortcut\r\n\tfunction assignKey(key, scope, method){\r\n\t  var keys, mods;\r\n\t  keys = getKeys(key);\r\n\t  if (method === undefined) {\r\n\t\tmethod = scope;\r\n\t\tscope = 'all';\r\n\t  }\r\n  \r\n\t  // for each shortcut\r\n\t  for (var i = 0; i < keys.length; i++) {\r\n\t\t// set modifier keys if any\r\n\t\tmods = [];\r\n\t\tkey = keys[i].split('+');\r\n\t\tif (key.length > 1){\r\n\t\t  mods = getMods(key);\r\n\t\t  key = [key[key.length-1]];\r\n\t\t}\r\n\t\t// convert to keycode and...\r\n\t\tkey = key[0]\r\n\t\tkey = code(key);\r\n\t\t// ...store handler\r\n\t\tif (!(key in _handlers)) _handlers[key] = [];\r\n\t\t_handlers[key].push({ shortcut: keys[i], scope: scope, method: method, key: keys[i], mods: mods });\r\n\t  }\r\n\t};\r\n  \r\n\t// unbind all handlers for given key in current scope\r\n\tfunction unbindKey(key, scope) {\r\n\t  var multipleKeys, keys,\r\n\t\tmods = [],\r\n\t\ti, j, obj;\r\n  \r\n\t  multipleKeys = getKeys(key);\r\n  \r\n\t  for (j = 0; j < multipleKeys.length; j++) {\r\n\t\tkeys = multipleKeys[j].split('+');\r\n  \r\n\t\tif (keys.length > 1) {\r\n\t\t  mods = getMods(keys);\r\n\t\t}\r\n  \r\n\t\tkey = keys[keys.length - 1];\r\n\t\tkey = code(key);\r\n  \r\n\t\tif (scope === undefined) {\r\n\t\t  scope = getScope();\r\n\t\t}\r\n\t\tif (!_handlers[key]) {\r\n\t\t  return;\r\n\t\t}\r\n\t\tfor (i = 0; i < _handlers[key].length; i++) {\r\n\t\t  obj = _handlers[key][i];\r\n\t\t  // only clear handlers if correct scope and mods match\r\n\t\t  if (obj.scope === scope && compareArray(obj.mods, mods)) {\r\n\t\t\t_handlers[key][i] = {};\r\n\t\t  }\r\n\t\t}\r\n\t  }\r\n\t};\r\n  \r\n\t// Returns true if the key with code 'keyCode' is currently down\r\n\t// Converts strings into key codes.\r\n\tfunction isPressed(keyCode) {\r\n\t\tif (typeof(keyCode)=='string') {\r\n\t\t  keyCode = code(keyCode);\r\n\t\t}\r\n\t\treturn index(_downKeys, keyCode) != -1;\r\n\t}\r\n  \r\n\tfunction getPressedKeyCodes() {\r\n\t\treturn _downKeys.slice(0);\r\n\t}\r\n  \r\n\tfunction filter(event){\r\n\t  var tagName = (event.target || event.srcElement).tagName;\r\n\t  // ignore keypressed in any elements that support keyboard data input\r\n\t  return !(tagName == 'INPUT' || tagName == 'SELECT' || tagName == 'TEXTAREA');\r\n\t}\r\n  \r\n\t// initialize key.<modifier> to false\r\n\tfor(k in _MODIFIERS) assignKey[k] = false;\r\n  \r\n\t// set current scope (default 'all')\r\n\tfunction setScope(scope){ _scope = scope || 'all' };\r\n\tfunction getScope(){ return _scope || 'all' };\r\n  \r\n\t// delete all handlers for a given scope\r\n\tfunction deleteScope(scope){\r\n\t  var key, handlers, i;\r\n  \r\n\t  for (key in _handlers) {\r\n\t\thandlers = _handlers[key];\r\n\t\tfor (i = 0; i < handlers.length; ) {\r\n\t\t  if (handlers[i].scope === scope) handlers.splice(i, 1);\r\n\t\t  else i++;\r\n\t\t}\r\n\t  }\r\n\t};\r\n  \r\n\t// abstract key logic for assign and unassign\r\n\tfunction getKeys(key) {\r\n\t  var keys;\r\n\t  key = key.replace(/\\s/g, '');\r\n\t  keys = key.split(',');\r\n\t  if ((keys[keys.length - 1]) == '') {\r\n\t\tkeys[keys.length - 2] += ',';\r\n\t  }\r\n\t  return keys;\r\n\t}\r\n  \r\n\t// abstract mods logic for assign and unassign\r\n\tfunction getMods(key) {\r\n\t  var mods = key.slice(0, key.length - 1);\r\n\t  for (var mi = 0; mi < mods.length; mi++)\r\n\t  mods[mi] = _MODIFIERS[mods[mi]];\r\n\t  return mods;\r\n\t}\r\n  \r\n\t// cross-browser events\r\n\tfunction addEvent(object, event, method) {\r\n\t  if (object.addEventListener)\r\n\t\tobject.addEventListener(event, method, false);\r\n\t//   else if(object.attachEvent)\r\n\t// \tobject.attachEvent('on'+event, function(){ method(window.event) });\r\n\t};\r\n  \r\n\t// set the handlers globally on document\r\n\taddEvent(document, 'keydown', function(event) { dispatch(event) }); // Passing _scope to a callback to ensure it remains the same by execution. Fixes #48\r\n\taddEvent(document, 'keyup', clearModifier);\r\n  \r\n\t// reset modifiers to false whenever the window is (re)focused.\r\n\taddEvent(window, 'focus', resetModifiers);\r\n  \r\n\t// store previously defined key\r\n\tvar previousKey = global.key;\r\n  \r\n\t// restore previously defined key and return reference to our key object\r\n\tfunction noConflict() {\r\n\t  var k = global.key;\r\n\t  global.key = previousKey;\r\n\t  return k;\r\n\t}\r\n  \r\n\t// set window.key and window.key.set/get/deleteScope, and the default filter\r\n\tglobal.key = assignKey;\r\n\tglobal.key.setScope = setScope;\r\n\tglobal.key.getScope = getScope;\r\n\tglobal.key.deleteScope = deleteScope;\r\n\tglobal.key.filter = filter;\r\n\tglobal.key.isPressed = isPressed;\r\n\tglobal.key.getPressedKeyCodes = getPressedKeyCodes;\r\n\tglobal.key.noConflict = noConflict;\r\n\tglobal.key.unbind = unbindKey;\r\n  \r\n\tif(typeof module !== 'undefined') module.exports = assignKey;\r\n  \r\n  })(this || {});\r\n  function getKeyCodeFromKey(key) {\r\n\t// 特殊キーのマッピングにアルファベットを追加\r\n\t\t// 特殊キーのマッピング\r\n\t\tvar specialKeys = {\r\n\t\t  'DELETE': 46,\r\n\t\t  'BACKSPACE': 8,\r\n\t\t  'TAB': 9,\r\n\t\t  'ENTER': 13,\r\n\t\t  'ESCAPE': 27,\r\n\t\t  ' ': 32,\r\n\t\t  'ARROWLEFT': 37,\r\n\t\t  'ARROWUP': 38,\r\n\t\t  'ARROWRIGHT': 39,\r\n\t\t  'ARROWDOWN': 40,\r\n\t\t  'SHIFT': 16,\r\n\t\t  '[': 219,\r\n\t\t  ']': 221,\r\n\t\t  '1': 49,\r\n\t\t  '2': 50,\r\n\t\t  '3': 51,\r\n\t\t  '4': 52,\r\n\t\t  '5': 53,\r\n\t\t  '6': 54,\r\n\t\t  '7': 55,\r\n\t\t  '8': 56,\r\n\t\t  '9': 57,\r\n\t\t  '0': 48,\r\n\t\t  '-': 189,\r\n\t\t  '=': 187,\r\n\t\t  '+': 187,\r\n\t\t  ';': 187,\r\n\t\t  'META':91,\r\n\t\t  'LEFTMETA':91,\r\n\t\t  'RIGHTMETA':91, \r\n\t\t  'ALT':18,\r\n\t\t  'ALTGRAPH':18,\r\n\t\t  'OPTION':18, \r\n\t\t  'CONTROL':17,\r\n\t\t};\r\n\t\tfor (var i = 65; i <= 90; i++) {\r\n\t\t\tvar Alphabet_key = String.fromCharCode(i);\r\n\t\t\tspecialKeys[Alphabet_key] = i;\r\n\t\t}\r\n\t\tkey=key.toUpperCase();\r\n\t  \r\n\t\t// 特殊キーの場合はマッピングされた値を返す\r\n\t\tif (key in specialKeys) {\r\n\t\t  return specialKeys[key];\r\n\t\t}\r\n\t}\r\n\t","/*\n    ChickenPaint\n    \n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\n    by Nicholas Sherlock / Chicken Smoothie.\n    \n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n    ChickenPaint is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ChickenPaint is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nexport default function CPBezier() {\n\n    // How to use this class:\n    //\n    // 1 - set the 4 points coordinates (x0-3, y0-3)\n    // two options:\n    // 2a - call init() with desired dt then read the current coordinate (Bx, By) and use nextPoint() to compute the\n    // next point\n    // 2b - use one of the \"compute\" methods to compute the values for the whole curve in one step\n\n    // The 4 points coordinates\n    this.x0 = this.y0 = this.x1 = this.y1 = this.x2 = this.y2 = this.x3 = this.y3 = 0.0;\n\n    // used to compute the Bezier curve with the forward differences method\n    let\n        Bx, dBx, ddBx, dddBx,\n        By, dBy, ddBy, dddBy;\n\n    const init = (dt) => {\n        // Implements a fast degree-3 Bezier curve using the forward differences method\n        //\n        // Reference for this algorithm:\n        // \"Curves and Surfaces for Computer Graphics\" by David Salomon, page 189\n        let\n            q1 = 3.0 * dt,\n            q2 = q1 * dt,\n            q3 = dt * dt * dt,\n            q4 = 2.0 * q2,\n            q5 = 6.0 * q3,\n            q6x = this.x0 - 2.0 * this.x1 + this.x2,\n            q6y = this.y0 - 2.0 * this.y1 + this.y2,\n            q7x = 3.0 * (this.x1 - this.x2) - this.x0 + this.x3,\n            q7y = 3.0 * (this.y1 - this.y2) - this.y0 + this.y3;\n\n        Bx = this.x0;\n        By = this.y0;\n\n        dBx = (this.x1 - this.x0) * q1 + q6x * q2 + q7x * q3;\n        dBy = (this.y1 - this.y0) * q1 + q6y * q2 + q7y * q3;\n\n        ddBx = q6x * q4 + q7x * q5;\n        ddBy = q6y * q4 + q7y * q5;\n\n        dddBx = q7x * q5;\n        dddBy = q7y * q5;\n    };\n\n    /**\n     * Fill the given x,y arrays with a series of points on the curve.\n     * \n     * @param {Number[]} x\n     * @param {Number[]} y\n     *\n     * @param {number} elements Count of elements to fill x and y arrays\n     */\n    this.compute = (x, y, elements) => {\n        init(1.0 / elements);\n\n        x[0] = Bx;\n        y[0] = By;\n        \n        for (let i = 1; i < elements; i++) {\n            Bx += dBx;\n            By += dBy;\n            dBx += ddBx;\n            dBy += ddBy;\n            ddBx += dddBx;\n            ddBy += dddBy;\n\n            x[i] = Bx;\n            y[i] = By;\n        }\n    };\n}","/*!\n * jQuery throttle / debounce - v1.1 - 3/7/2010\n * http://benalman.com/projects/jquery-throttle-debounce-plugin/\n * \n * Copyright (c) 2010 \"Cowboy\" Ben Alman\n * Dual licensed under the MIT and GPL licenses.\n * http://benalman.com/about/license/\n */\n\n// Script: jQuery throttle / debounce: Sometimes, less is more!\n//\n// *Version: 1.1, Last updated: 3/7/2010*\n// \n// Project Home - http://benalman.com/projects/jquery-throttle-debounce-plugin/\n// GitHub       - http://github.com/cowboy/jquery-throttle-debounce/\n// Source       - http://github.com/cowboy/jquery-throttle-debounce/raw/master/jquery.ba-throttle-debounce.js\n// (Minified)   - http://github.com/cowboy/jquery-throttle-debounce/raw/master/jquery.ba-throttle-debounce.min.js (0.7kb)\n// \n// About: License\n// \n// Copyright (c) 2010 \"Cowboy\" Ben Alman,\n// Dual licensed under the MIT and GPL licenses.\n// http://benalman.com/about/license/\n// \n// About: Examples\n// \n// These working examples, complete with fully commented code, illustrate a few\n// ways in which this plugin can be used.\n// \n// Throttle - http://benalman.com/code/projects/jquery-throttle-debounce/examples/throttle/\n// Debounce - http://benalman.com/code/projects/jquery-throttle-debounce/examples/debounce/\n// \n// About: Support and Testing\n// \n// Information about what version or versions of jQuery this plugin has been\n// tested with, what browsers it has been tested in, and where the unit tests\n// reside (so you can test it yourself).\n// \n// jQuery Versions - none, 1.3.2, 1.4.2\n// Browsers Tested - Internet Explorer 6-8, Firefox 2-3.6, Safari 3-4, Chrome 4-5, Opera 9.6-10.1.\n// Unit Tests      - http://benalman.com/code/projects/jquery-throttle-debounce/unit/\n// \n// About: Release History\n// \n// 1.1 - (3/7/2010) Fixed a bug in <jQuery.throttle> where trailing callbacks\n//       executed later than they should. Reworked a fair amount of internal\n//       logic as well.\n// 1.0 - (3/6/2010) Initial release as a stand-alone project. Migrated over\n//       from jquery-misc repo v0.4 to jquery-throttle repo v1.0, added the\n//       no_trailing throttle parameter and debounce functionality.\n\n// Method: throttle\n//\n// Throttle execution of a function. Especially useful for rate limiting\n// execution of handlers on events like resize and scroll. If you want to\n// rate-limit execution of a function to a single time, see the\n// <jQuery.debounce> method.\n//\n// In this visualization, | is a throttled-function call and X is the actual\n// callback execution:\n//\n// > Throttled with `no_trailing` specified as false or unspecified:\n// > ||||||||||||||||||||||||| (pause) |||||||||||||||||||||||||\n// > X    X    X    X    X    X        X    X    X    X    X    X\n// >\n// > Throttled with `no_trailing` specified as true:\n// > ||||||||||||||||||||||||| (pause) |||||||||||||||||||||||||\n// > X    X    X    X    X             X    X    X    X    X\n//\n// Usage:\n//\n// > var throttled = jQuery.throttle( delay, [ no_trailing, ] callback );\n// >\n// > jQuery('selector').bind( 'someevent', throttled );\n// > jQuery('selector').unbind( 'someevent', throttled );\n//\n// This also works in jQuery 1.4+:\n//\n// > jQuery('selector').bind( 'someevent', jQuery.throttle( delay, [ no_trailing, ] callback ) );\n// > jQuery('selector').unbind( 'someevent', callback );\n//\n// Arguments:\n//\n//  delay - (Number) A zero-or-greater delay in milliseconds. For event\n//    callbacks, values around 100 or 250 (or even higher) are most useful.\n//  no_trailing - (Boolean) Optional, defaults to false. If no_trailing is\n//    true, callback will only execute every `delay` milliseconds while the\n//    throttled-function is being called. If no_trailing is false or\n//    unspecified, callback will be executed one final time after the last\n//    throttled-function call. (After the throttled-function has not been\n//    called for `delay` milliseconds, the internal counter is reset)\n//  callback - (Function) A function to be executed after delay milliseconds.\n//    The `this` context and all arguments are passed through, as-is, to\n//    `callback` when the throttled-function is executed.\n//\n// Returns:\n//\n//  (Function) A new, throttled, function.\n\nexport function throttle(delay, no_trailing, callback, debounce_mode) {\n\t// After wrapper has stopped being called, this timeout ensures that\n\t// `callback` is executed at the proper times in `throttle` and `end`\n\t// debounce modes.\n\tvar timeout_id,\n\n\t// Keep track of the last time `callback` was executed.\n\t\tlast_exec = 0;\n\n\t// `no_trailing` defaults to falsy.\n\tif (typeof no_trailing !== 'boolean') {\n\t\tdebounce_mode = callback;\n\t\tcallback = no_trailing;\n\t\tno_trailing = undefined;\n\t}\n\n\t// The `wrapper` function encapsulates all of the throttling / debouncing\n\t// functionality and when executed will limit the rate at which `callback`\n\t// is executed.\n\tfunction wrapper() {\n\t\tvar that = this,\n\t\t\telapsed = +new Date() - last_exec,\n\t\t\targs = arguments;\n\n\t\t// Execute `callback` and update the `last_exec` timestamp.\n\t\tfunction exec() {\n\t\t\tlast_exec = +new Date();\n\t\t\tcallback.apply(that, args);\n\t\t}\n\n\t\t// If `debounce_mode` is true (at_begin) this is used to clear the flag\n\t\t// to allow future `callback` executions.\n\t\tfunction clear() {\n\t\t\ttimeout_id = undefined;\n\t\t}\n\n\t\tif (debounce_mode && !timeout_id) {\n\t\t\t// Since `wrapper` is being called for the first time and\n\t\t\t// `debounce_mode` is true (at_begin), execute `callback`.\n\t\t\texec();\n\t\t}\n\n\t\t// Clear any existing timeout.\n\t\ttimeout_id && clearTimeout(timeout_id);\n\n\t\tif (debounce_mode === undefined && elapsed > delay) {\n\t\t\t// In throttle mode, if `delay` time has been exceeded, execute\n\t\t\t// `callback`.\n\t\t\texec();\n\n\t\t} else if (no_trailing !== true) {\n\t\t\t// In trailing throttle mode, since `delay` time has not been\n\t\t\t// exceeded, schedule `callback` to execute `delay` ms after most\n\t\t\t// recent execution.\n\t\t\t//\n\t\t\t// If `debounce_mode` is true (at_begin), schedule `clear` to execute\n\t\t\t// after `delay` ms.\n\t\t\t//\n\t\t\t// If `debounce_mode` is false (at end), schedule `callback` to\n\t\t\t// execute after `delay` ms.\n\t\t\ttimeout_id = setTimeout(debounce_mode ? clear : exec, debounce_mode === undefined ? delay - elapsed : delay);\n\t\t}\n\t}\n\n\t// Return the wrapper function.\n\treturn wrapper;\n}\n\n// Method: jQuery.debounce\n//\n// Debounce execution of a function. Debouncing, unlike throttling,\n// guarantees that a function is only executed a single time, either at the\n// very beginning of a series of calls, or at the very end. If you want to\n// simply rate-limit execution of a function, see the <jQuery.throttle>\n// method.\n//\n// In this visualization, | is a debounced-function call and X is the actual\n// callback execution:\n//\n// > Debounced with `at_begin` specified as false or unspecified:\n// > ||||||||||||||||||||||||| (pause) |||||||||||||||||||||||||\n// >                          X                                 X\n// >\n// > Debounced with `at_begin` specified as true:\n// > ||||||||||||||||||||||||| (pause) |||||||||||||||||||||||||\n// > X                                 X\n//\n// Usage:\n//\n// > var debounced = jQuery.debounce( delay, [ at_begin, ] callback );\n// >\n// > jQuery('selector').bind( 'someevent', debounced );\n// > jQuery('selector').unbind( 'someevent', debounced );\n//\n// This also works in jQuery 1.4+:\n//\n// > jQuery('selector').bind( 'someevent', jQuery.debounce( delay, [ at_begin, ] callback ) );\n// > jQuery('selector').unbind( 'someevent', callback );\n//\n// Arguments:\n//\n//  delay - (Number) A zero-or-greater delay in milliseconds. For event\n//    callbacks, values around 100 or 250 (or even higher) are most useful.\n//  at_begin - (Boolean) Optional, defaults to false. If at_begin is false or\n//    unspecified, callback will only be executed `delay` milliseconds after\n//    the last debounced-function call. If at_begin is true, callback will be\n//    executed only at the first debounced-function call. (After the\n//    throttled-function has not been called for `delay` milliseconds, the\n//    internal counter is reset)\n//  callback - (Function) A function to be executed after delay milliseconds.\n//    The `this` context and all arguments are passed through, as-is, to\n//    `callback` when the debounced-function is executed.\n//\n// Returns:\n//\n//  (Function) A new, debounced, function.\n\nexport function debounce(delay, at_begin, callback) {\n\treturn callback === undefined\n\t\t? throttle(delay, at_begin, false)\n\t\t: throttle(delay, callback, at_begin !== false);\n}\n","/*\n\tChickenPaint\n\n\tChickenPaint is a translation of ChibiPaint from Java to JavaScript\n\tby Nicholas Sherlock / Chicken Smoothie.\n\n\tChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n\tChickenPaint is free software: you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation, either version 3 of the License, or\n\t(at your option) any later version.\n\n\tChickenPaint is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport CPTransform from './CPTransform.js';\n\nexport default function CPPolygon(points) {\n\tthis.points = points || [];\n}\n\nCPPolygon.prototype.clone = function() {\n\tvar\n\t\tresult = new CPPolygon(new Array(this.points.length));\n\n\tfor (var i = 0; i < this.points.length; i++) {\n\t\t// Deep clone\n\t\tresult.points[i] = {x : this.points[i].x, y : this.points[i].y};\n\t}\n\n\treturn result;\n};\n\n/**\n * Get a new polygon which is the result of transforming the points of this polygon with the given affine transform.\n *\n * @param {CPTransform} affineTransform\n * @returns {CPPolygon}\n */\nCPPolygon.prototype.getTransformed = function(affineTransform) {\n\tvar\n\t\tresult = new CPPolygon(new Array(this.points.length));\n\n\tfor (var i = 0; i < this.points.length; i++) {\n\t\tresult.points[i] = affineTransform.getTransformedPoint(this.points[i]);\n\t}\n\n\treturn result;\n};\n\n/**\n * Get the average of all the points in the polygon (the \"center\").\n *\n * @returns {{x: number, y: number}}\n */\nCPPolygon.prototype.getCenter = function() {\n\tvar\n\t\tcenterX = this.points[0].x,\n\t\tcenterY = this.points[0].y;\n\n\tfor (var i = 1; i < this.points.length; i++) {\n\t\tcenterX += this.points[i].x;\n\t\tcenterY += this.points[i].y;\n\t}\n\n\treturn {x: centerX / this.points.length, y: centerY / this.points.length};\n};\n\n/**\n * From https://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n *\n * @param point\n * @returns {boolean}\n */\nCPPolygon.prototype.containsPoint = function(point) {\n\tvar i, j, contained = false;\n\n\tfor (i = 0, j = this.points.length - 1; i < this.points.length; j = i++) {\n\t\tif (((this.points[i].y > point.y) != (this.points[j].y > point.y)) &&\n\t\t\t\t(point.x < (this.points[j].x - this.points[i].x) * (point.y - this.points[i].y) / (this.points[j].y - this.points[i].y) + this.points[i].x)) {\n\t\t\tcontained = !contained;\n\t\t}\n\t}\n\n\treturn contained;\n};","/*\n\tChickenPaint\n\n\tChickenPaint is a translation of ChibiPaint from Java to JavaScript\n\tby Nicholas Sherlock / Chicken Smoothie.\n\n\tChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n\tChickenPaint is free software: you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation, either version 3 of the License, or\n\t(at your option) any later version.\n\n\tChickenPaint is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n *\n * @param x\n * @param y\n *\n * @constructor\n */\nexport default function CPVector(x, y) {\n\tthis.x = x;\n\tthis.y = y;\n}\n\nCPVector.prototype.getLength = function() {\n\treturn Math.sqrt(this.x * this.x + this.y * this.y);\n};\n\n/**\n *\n * @returns {CPVector} This vector for chaining\n */\nCPVector.prototype.normalize = function() {\n\tvar\n\t\tlength = this.getLength();\n\n\tthis.x /= length;\n\tthis.y /= length;\n\n\treturn this;\n};\n\n/**\n *\n * @param {CPVector} that\n */\nCPVector.prototype.getDotProduct = function(that) {\n\treturn this.x * that.x + this.y * that.y;\n};\n\n/**\n *\n * @param {numeric} scaleFactor\n * @returns {CPVector} This vector for chaining\n */\nCPVector.prototype.scale = function(scaleFactor) {\n\tthis.x *= scaleFactor;\n\tthis.y *= scaleFactor;\n\n\treturn this;\n};\n\nCPVector.prototype.getScaled = function(scaleFactor) {\n\tvar\n\t\tresult = new CPVector(this.x, this.y);\n\n\tresult.scale(scaleFactor);\n\n\treturn result;\n};\n\nCPVector.prototype.getRounded = function() {\n\treturn new CPVector(Math.round(this.x), Math.round(this.y));\n};\n\nCPVector.prototype.getTruncated = function() {\n\treturn new CPVector(~~this.x, ~~this.y);\n};\n\nCPVector.prototype.getPerpendicular = function() {\n\treturn new CPVector(-this.y, this.x);\n};\n\n/**\n * Add that vector to this one\n *\n * @param {CPVector} that\n * @returns {CPVector} This vector for chaining\n */\nCPVector.prototype.add = function(that) {\n\tthis.x += that.x;\n\tthis.y += that.y;\n\n\treturn this;\n};\n\n/**\n * Subtract that vector from this one\n *\n * @param {CPVector} that\n * @returns {CPVector} This vector for chaining\n */\nCPVector.prototype.subtract = function(that) {\n\tthis.x -= that.x;\n\tthis.y -= that.y;\n\n\treturn this;\n};\n\n\n/**\n * Get the sum of this vector and that one.\n *\n * @param {CPVector} that\n * @returns {CPVector}\n */\nCPVector.prototype.getSum = function(that) {\n\treturn new CPVector(this.x + that.x, this.y + that.y);\n};\n\n/**\n * Create a new vector by p1 - p2\n *\n * @param p1\n * @param p2\n *\n * @returns {CPVector}\n */\nCPVector.subtractPoints = function(p1, p2) {\n\treturn new CPVector(p1.x - p2.x, p1.y - p2.y);\n};","/**\n * Create a checkerboard HTML5 CanvasPattern (which can be used for fillStyle) using the given canvas context.\n * \n * @param canvasContext\n * @returns {CanvasPattern}\n */\nexport function createCheckerboardPattern(canvasContext) {\n    var\n        checkerboardCanvas = document.createElement(\"canvas\"),\n        checkerboardContext = checkerboardCanvas.getContext(\"2d\"),\n        \n        imageData = checkerboardContext.createImageData(64, 64),\n        data = imageData.data,\n        \n        pixelOffset = 0;\n\n    for (var j = 0; j < 64; j++) {\n        for (var i = 0; i < 64; i++) {\n            if (((i & 0x8) != 0) !== ((j & 0x8) != 0)) {\n                // White\n                data[pixelOffset++] = 0xff;\n                data[pixelOffset++] = 0xff;\n                data[pixelOffset++] = 0xff;\n                data[pixelOffset++] = 0xff;\n            } else {\n                // Grey\n                data[pixelOffset++] = 0xcc;\n                data[pixelOffset++] = 0xcc;\n                data[pixelOffset++] = 0xcc;\n                data[pixelOffset++] = 0xff;\n            }\n        }\n    }\n\n    checkerboardCanvas.width = 64;\n    checkerboardCanvas.height = 64;\n    checkerboardContext.putImageData(imageData, 0, 0);\n\n    return canvasContext.createPattern(checkerboardCanvas, 'repeat');\n}\n\n/**\n * Set the globalCompositeOperation and fill/stroke color up to maximize contrast for the drawn items\n * against arbitrary backgrounds.\n *\n * @param {CanvasRenderingContext2D} canvasContext\n * @param {string} kind - \"stroke\" or \"fill\" depending on which colour you'd like to set\n */\nexport function setContrastingDrawStyle(canvasContext, kind) {\n    kind = kind + \"Style\";\n    canvasContext.globalCompositeOperation = 'exclusion';\n\n    if (canvasContext.globalCompositeOperation == \"exclusion\") {\n        // White + exclusion inverts the colors underneath, giving us good contrast\n        canvasContext[kind] = 'white';\n    } else {\n        // IE Edge doesn't support Exclusion, so how about Difference with mid-grey instead\n        // This is visible on black and white, but disappears on a grey background\n        canvasContext.globalCompositeOperation = 'difference';\n        canvasContext[kind] = '#888';\n\n        // For super dumb browsers (only support source-over), at least don't make the cursor invisible on a white BG!\n        if (canvasContext.globalCompositeOperation != \"difference\") {\n            canvasContext[kind] = 'black';\n        }\n    }\n}","/*\n    ChickenPaint\n    \n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\n    by Nicholas Sherlock / Chicken Smoothie.\n    \n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n    ChickenPaint is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ChickenPaint is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport EventEmitter from \"wolfy87-eventemitter\";\n\n/**\n * @param vertical boolean\n */\nexport default function CPScrollbar(vertical) {\n    let\n        bar = document.createElement(\"div\"),\n        handle = document.createElement(\"div\"),\n        handleInner = document.createElement(\"div\"),\n        \n        min = 0, max = 1, offset = 0, visibleRange = 1,\n        \n        blockIncrement = 10, unitIncrement = 1,\n        \n        valueIsAdjusting = false,\n        \n        handleSize = 1,\n        \n        dragging = false,\n        dragLastOffset,\n        \n        that = this;\n    \n    function updateBar() {\n        let\n            longDimension = vertical ? bar.clientHeight : bar.clientWidth;\n\n            /* As the size of the document approaches the size of the container, handle size grows to fill the \n             * whole track:\n             */\n        handleSize = visibleRange / (max - min) * longDimension; \n        \n        let\n            handleOffset = (offset - min) / (max - min) * (longDimension - handleSize);\n        \n        handleInner.style[vertical ? \"height\" : \"width\"] = handleSize + \"px\";\n        handle.style[vertical ? \"height\" : \"width\"] = handleSize + \"px\";\n        \n        handle.style[vertical ? \"top\" : \"left\"] = handleOffset + \"px\";\n    }\n    \n    this.setValues = function(_offset, _visibleRange, _min, _max) {\n        offset = _offset;\n        visibleRange = _visibleRange;\n        min = _min;\n        max = _max;\n        \n        updateBar();\n    };\n    \n    this.setBlockIncrement = function(increment) {\n        blockIncrement = increment;\n    };\n    \n    this.setUnitIncrement = function(increment) {\n        unitIncrement = increment;\n    };\n    \n    this.getElement = function() {\n        return bar;\n    };\n    \n    this.getValueIsAdjusting = function() {\n        return valueIsAdjusting;\n    };\n    \n    function onBarClick(e) {\n        if (this == bar) {\n            let clickPos = vertical \n            ? e.pageY - bar.offsetTop - window.scrollY \n            : e.pageX - bar.offsetLeft - window.scrollX;\n            let barPos = parseInt(handle.style[vertical ? \"top\" : \"left\"], 10);\n    \n            if (clickPos < barPos) {\n                offset -= blockIncrement;\n            } else {\n                offset += blockIncrement;\n            }\n            \n            that.emitEvent(\"valueChanged\", [offset]);\n            updateBar();\n        }\n    }\n    \n    function onHandlePress(e) {\n        e.stopPropagation();\n\n        dragLastOffset = vertical \n        ? e.pageY - bar.offsetTop - window.scrollY \n        : e.pageX - bar.offsetLeft - window.scrollX;\n        handle.setPointerCapture(e.pointerId);\n\n        handle.classList.add(\"dragging\");\n                dragging = true;\n    }\n    \n    function onHandleClick(e) {\n        e.stopPropagation();\n    }\n    \n    function onHandleDrag(e) {\n        if (dragging) {\n            valueIsAdjusting = true;\n            \n            const longDimension = vertical ? bar.clientHeight : bar.clientWidth;\n\n            const mouseOffset = vertical \n            ? e.pageY - bar.offsetTop - window.scrollY \n            : e.pageX - bar.offsetLeft - window.scrollX;\n                    \n            offset = offset + (mouseOffset - dragLastOffset) * (max - min) / (longDimension - handleSize);\n\n            offset = Math.min(Math.max(offset, min), max);\n\n            dragLastOffset = mouseOffset;\n\n            that.emitEvent(\"valueChanged\", [offset]);\n            updateBar();\n\n            valueIsAdjusting = false;\n        }\n    }\n    \n    function onHandleRelease(e) {\n        e.stopPropagation();\n\n        if (dragging) {\n            try {\n                handle.releasePointerCapture(e.pointerId);\n            } catch (e) {\n            }\n\n            handle.classList.remove(\"dragging\");\n            dragging = false;\n                    }\n    }\n    \n    bar.className = \"chickenpaint-scrollbar \"  + (vertical ? \"chickenpaint-scrollbar-vertical\" : \"chickenpaint-scrollbar-horizontal\");\n    handle.className = \"chickenpaint-scrollbar-handle\";\n    handle.setAttribute(\"touch-action\", \"none\");\n    handleInner.className = \"chickenpaint-scrollbar-handle-inner\";\n    \n    handle.appendChild(handleInner);\n    bar.appendChild(handle);\n    \n    handle.addEventListener(\"pointerdown\", onHandlePress);\n    handle.addEventListener(\"pointermove\", onHandleDrag);\n    handle.addEventListener(\"pointerup\", onHandleRelease);\n\n    handle.addEventListener(\"click\", onHandleClick);\n    \n    bar.addEventListener(\"click\", onBarClick);\n}\n\nCPScrollbar.prototype = Object.create(EventEmitter.prototype);\nCPScrollbar.prototype.constructor = CPScrollbar;","/*\n    ChickenPaint\n    \n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\n    by Nicholas Sherlock / Chicken Smoothie.\n    \n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n    ChickenPaint is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ChickenPaint is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport EventEmitter from \"wolfy87-eventemitter\";\n\nimport CPToolPalette from \"./CPToolPalette.js\";\nimport CPMiscPalette from \"./CPMiscPalette.js\";\nimport CPStrokePalette from \"./CPStrokePalette.js\";\nimport CPColorPalette from \"./CPColorPalette.js\";\nimport CPBrushPalette from \"./CPBrushPalette.js\";\nimport CPLayersPalette from \"./CPLayersPalette.js\";\nimport CPTexturePalette from \"./CPTexturePalette.js\";\nimport CPSwatchesPalette from \"./CPSwatchesPalette.js\";\n\nexport default function CPPaletteManager(cpController) {\n    const palettes = {\n            tool: new CPToolPalette(cpController),\n            misc: new CPMiscPalette(cpController),\n            stroke: new CPStrokePalette(cpController),\n            color: new CPColorPalette(cpController),\n            brush: new CPBrushPalette(cpController),\n            layers: new CPLayersPalette(cpController),\n            textures: new CPTexturePalette(cpController),\n            swatches: new CPSwatchesPalette(cpController),\n        },\n        defaultCollapse = {\n            tool: false,\n            color: false,\n            misc: false,\n        },\n        collapseDownwards = {\n            color: true,\n            textures: true,\n            layers: true,\n        },\n        parentElem = document.createElement(\"div\"),\n        that = this;\n\n    let paletteFrames = [],\n        hiddenFrames = [];\n\n    this.palettes = palettes;\n\n    function getPaletteDisplayArea() {\n        // Use the canvas as a positioning guide to avoid overlapping scrollbars\n        let canvas = parentElem\n            .closest(\".chickenpaint\")\n            .querySelector(\".chickenpaint-canvas\");\n\n        return { width: canvas.offsetWidth, height: canvas.offsetHeight };\n    }\n\n    function showPalette(palette, show) {\n        let palElement = palette.getElement();\n\n        if (show) {\n            if (!parentElem.contains(palElement)) {\n                parentElem.appendChild(palElement);\n            }\n        } else {\n            if (parentElem.contains(palElement)) {\n                parentElem.removeChild(palElement);\n            }\n        }\n        that.emitEvent(\"paletteVisChange\", [palette.name, show]);\n\n        // FIXME: focus hack\n        // controller.canvas.grabFocus(); TODO\n    }\n\n    this.showPaletteByName = function (paletteName, show) {\n        let palette = palettes[paletteName];\n\n        if (palette) {\n            showPalette(palette, show);\n        }\n    };\n\n    this.togglePalettes = function () {\n        if (hiddenFrames.length === 0) {\n            let palettes = parentElem.querySelectorAll(\n                \".chickenpaint-palette\"\n            );\n            palettes.forEach(function (palette) {\n                that.showPaletteByName(\n                    palette.getAttribute(\"data-paletteName\"),\n                    false\n                );\n                hiddenFrames.push(palette);\n            });\n        } else {\n            for (let i = 0; i < hiddenFrames.length; i++) {\n                let frame = hiddenFrames[i];\n                that.showPaletteByName(\n                    frame.getAttribute(\"data-paletteName\"),\n                    true\n                );\n            }\n            hiddenFrames = [];\n        }\n    };\n\n    /**\n     * Pop palettes that are currently outside the visible area back into view.\n     */\n    this.constrainPalettes = function () {\n        let windowDim = getPaletteDisplayArea();\n\n        for (let i in palettes) {\n            let palette = palettes[i];\n\n            /* Move palettes that are more than half out of the frame back into it */\n            if (palette.getX() + palette.getWidth() / 2 > windowDim.width) {\n                palette.setLocation(\n                    windowDim.width - palette.getWidth(),\n                    palette.getY()\n                );\n            }\n\n            if (palette.getY() + palette.getHeight() / 2 > windowDim.height) {\n                palette.setLocation(\n                    palette.getX(),\n                    windowDim.height - palette.getHeight()\n                );\n            }\n        }\n\n        //Move small palettes to the front so that they aren't completely hidden\n        //palettes.swatches.moveToFront();\n\n        //Special handling for the swatches palette being under the brush palette:\n        let widthToSpare =\n            windowDim.width -\n                palettes.tool.getWidth() -\n                palettes.misc.getWidth() -\n                palettes.stroke.getWidth() -\n                palettes.color.getWidth() -\n                palettes.brush.getWidth() -\n                15 >\n            0;\n\n        if (\n            palettes.swatches.getX() + palettes.swatches.getWidth() ==\n                palettes.brush.getX() + palettes.brush.getWidth() &&\n            Math.abs(palettes.swatches.getY() - palettes.brush.getY()) < 20\n        ) {\n            palettes.swatches.setLocation(\n                palettes.brush.getX() -\n                    palettes.swatches.getWidth() -\n                    (widthToSpare ? 5 : 1),\n                0\n            );\n        }\n\n        //Special handling for layers palette being too damn tall:\n        if (\n            palettes.layers.getY() + palettes.layers.getHeight() >\n            windowDim.height\n        ) {\n            palettes.layers.setHeight(\n                Math.max(windowDim.height - palettes.layers.getY(), 200)\n            );\n        }\n    };\n\n    /**\n     * Rearrange the palettes from scratch into a useful arrangement.\n     */\n    this.arrangePalettes = function () {\n        let windowDim = getPaletteDisplayArea(),\n            haveWidthToSpare;\n\n        if (cpController.getSmallScreenMode()) {\n            palettes.tool.setLocation(0, 0);\n            palettes.misc.setLocation(\n                palettes.tool.getX() + palettes.tool.getWidth() + 1,\n                0\n            );\n\n            const BrushLocationY =\n                windowDim.width -\n                    (palettes.tool.getWidth() +\n                        palettes.misc.getWidth() +\n                        palettes.brush.getWidth()) <=\n                16\n                    ? palettes.misc.getY() + palettes.misc.getHeight() + 1\n                    : 0;\n            palettes.brush.setLocation(\n                windowDim.width - palettes.brush.getWidth() - 15,\n                BrushLocationY\n            );\n\n            // palettes.brush.setLocation(windowDim.width - palettes.brush.getWidth() - 15, palettes.misc.getY() + palettes.misc.getHeight() + 1);\n\n            let layersY = 330;\n\n            palettes.textures.setWidth(\n                windowDim.width - palettes.textures.getX()\n            );\n\n            palettes.layers.setLocation(\n                palettes.brush.getX() +\n                    palettes.brush.getWidth() -\n                    palettes.layers.getWidth(),\n                palettes.textures.getY() - palettes.layers.getHeight()\n            );\n            const layerPaletteHeight = Math.max(\n                palettes.textures.getY() - layersY - 1,\n                370\n            );\n            palettes.layers.setHeight(layerPaletteHeight);\n            // palettes.layers.setHeight(palettes.textures.getY() - layersY - 1);\n            palettes.layers.setWidth(218);\n\n            palettes.stroke.setLocation(\n                palettes.misc.getX(),\n                palettes.misc.getY() + palettes.misc.getHeight() + 1\n            );\n            palettes.swatches.setLocation(\n                palettes.stroke.getX(),\n                palettes.stroke.getY() + palettes.stroke.getHeight() + 1\n            );\n        } else {\n            haveWidthToSpare =\n                windowDim.width -\n                    palettes.tool.getWidth() -\n                    palettes.misc.getWidth() -\n                    palettes.stroke.getWidth() -\n                    palettes.color.getWidth() -\n                    palettes.brush.getWidth() -\n                    15 >\n                0;\n\n            palettes.brush.setLocation(\n                windowDim.width - palettes.brush.getWidth() - 15,\n                0\n            );\n\n            let bottomOfBrush =\n                    palettes.brush.getY() + palettes.brush.getHeight(),\n                layersY =\n                    windowDim.height - bottomOfBrush > 300\n                        ? bottomOfBrush + 2\n                        : bottomOfBrush;\n\n            palettes.layers.setSize(\n                palettes.brush.getWidth() + (haveWidthToSpare ? 30 : 0),\n                windowDim.height - layersY\n            );\n            palettes.layers.setLocation(\n                palettes.brush.getX() +\n                    palettes.brush.getWidth() -\n                    palettes.layers.getWidth(),\n                layersY\n            );\n\n            palettes.tool.setLocation(0, 0);\n\n            palettes.misc.setLocation(\n                palettes.tool.getX() +\n                    palettes.tool.getWidth() +\n                    (haveWidthToSpare ? 5 : 1),\n                0\n            );\n\n            if (haveWidthToSpare) {\n                palettes.stroke.setLocation(\n                    palettes.misc.getX() +\n                        palettes.misc.getWidth() +\n                        (haveWidthToSpare ? 5 : 1),\n                    0\n                );\n            } else {\n                palettes.stroke.setLocation(\n                    palettes.misc.getX(),\n                    palettes.misc.getY() + palettes.misc.getHeight() + 1\n                );\n            }\n\n            palettes.swatches.setLocation(\n                Math.max(\n                    palettes.brush.getX() -\n                        palettes.swatches.getWidth() -\n                        (haveWidthToSpare ? 5 : 1),\n                    palettes.tool.getX() + palettes.tool.getWidth()\n                ),\n                0\n            );\n\n            palettes.textures.setWidth(\n                Math.min(palettes.layers.getX() - palettes.textures.getX(), 490)\n            );\n        }\n\n        palettes.textures.setLocation(\n            palettes.color.getX() + palettes.color.getWidth() + 4,\n            windowDim.height - palettes.textures.getHeight()\n        );\n\n        palettes.color.setLocation(\n            0,\n            Math.max(\n                palettes.tool.getY() + palettes.tool.getHeight(),\n                windowDim.height - palettes.color.getHeight()\n            )\n        );\n    };\n\n    cpController.on(\"smallScreen\", function (smallScreenMode) {\n        if (smallScreenMode) {\n            for (let paletteName in palettes) {\n                let palette = palettes[paletteName];\n\n                palette.toggleCollapse(\n                    smallScreenMode &&\n                        (!(paletteName in defaultCollapse) ||\n                            defaultCollapse[paletteName])\n                );\n            }\n        }\n    });\n\n    this.getElement = function () {\n        return parentElem;\n    };\n\n    parentElem.className = \"chickenpaint-palettes\";\n\n    for (let paletteName in palettes) {\n        let palette = palettes[paletteName],\n            palElement = palette.getElement();\n\n        palette.on(\"paletteVisChange\", function () {\n            showPalette(this, false);\n        });\n\n        if (paletteName in collapseDownwards) {\n            palette.setCollapseDownwards(true);\n        }\n\n        palElement.setAttribute(\"data-paletteName\", paletteName);\n        paletteFrames.push(palElement);\n    }\n\n    for (let paletteName in palettes) {\n        let palElement = palettes[paletteName].getElement();\n\n        parentElem.appendChild(palElement);\n    }\n}\n\nCPPaletteManager.prototype = Object.create(EventEmitter.prototype);\nCPPaletteManager.prototype.constructor = CPPaletteManager;\n","/*\n    ChickenPaint\n    \n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\n    by Nicholas Sherlock / Chicken Smoothie.\n    \n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n    ChickenPaint is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ChickenPaint is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport key from \"../../lib/keymaster.js\";\n\nimport CPPalette from './CPPalette.js';\nimport ChickenPaint from '../ChickenPaint.js';\n\nimport {_} from \"../languages/lang.js\";\n\nexport default function CPToolPalette(cpController) {\n    CPPalette.call(this, cpController, \"tool\", \"Tools\");\n    \n    let\n        that = this,\n\n        buttons = [\n            {\n                className: \"chickenpaint-tool-rect-selection\",\n                command: \"CPRectSelection\",\n                toolTip: \"Marquee\",\n                shortcut: \"m\",\n                mode: ChickenPaint.M_RECT_SELECTION\n            },\n            {\n                className: \"chickenpaint-tool-move\",\n                command: \"CPMoveTool\",\n                toolTip: \"Move tool\",\n                shortcut: \"v\",\n                mode: ChickenPaint.M_MOVE_TOOL\n            },\n            {\n                className: \"chickenpaint-tool-flood-fill\",\n                command: \"CPFloodFill\",\n                toolTip: \"Flood fill\",\n                shortcut: \"f\",\n                mode: ChickenPaint.M_FLOODFILL\n            },\n            {\n                className: \"chickenpaint-tool-gradient-fill\",\n                command: \"CPGradientFill\",\n                toolTip: \"Gradient fill\",\n                shortcut: \"g\",\n                mode: ChickenPaint.M_GRADIENTFILL\n            },\n            {\n                className: \"chickenpaint-tool-color-picker\",\n                command: \"CPColorPicker\",\n                toolTip: \"Color picker\",\n                shortcut: \"i\",\n                mode: ChickenPaint.M_COLOR_PICKER\n            },\n            {\n                className: \"chickenpaint-tool-blur\",\n                command: \"CPBlur\",\n                toolTip: \"Blur\",\n                shortcut: \"u\",\n                mode: ChickenPaint.M_DRAW,\n                tool: ChickenPaint.T_BLUR\n            },\n            {\n                className: \"chickenpaint-tool-pencil\",\n                command: \"CPPencil\",\n                toolTip: \"Pencil\",\n                shortcut: \"n\",\n                mode: ChickenPaint.M_DRAW,\n                tool: ChickenPaint.T_PENCIL\n            },\n            {\n                className: \"chickenpaint-tool-pen\",\n                command: \"CPPen\",\n                toolTip: \"Pen\",\n                selected: true, // TODO a better mechanism for the controller to let us know the initial tool\n                shortcut: \"b\",\n                mode: ChickenPaint.M_DRAW,\n                tool: ChickenPaint.T_PEN\n            },\n            {\n                className: \"chickenpaint-tool-airbrush\",\n                command: \"CPAirbrush\",\n                toolTip: \"Airbrush\",\n                shortcut: \"a\",\n                mode: ChickenPaint.M_DRAW,\n                tool: ChickenPaint.T_AIRBRUSH\n            },\n            {\n                className: \"chickenpaint-tool-water\",\n                command: \"CPWater\",\n                toolTip: \"Waterpaint\",\n                shortcut: \"w\",\n                mode: ChickenPaint.M_DRAW,\n                tool: ChickenPaint.T_WATER\n            },\n            {\n                className: \"chickenpaint-tool-eraser\",\n                command: \"CPEraser\",\n                toolTip: \"Eraser\",\n                shortcut: \"e\",\n                mode: ChickenPaint.M_DRAW,\n                tool: ChickenPaint.T_ERASER\n            },\n            {\n                className: \"chickenpaint-tool-soft-eraser\",\n                command: \"CPSoftEraser\",\n                toolTip: \"Soft eraser\",\n                shortcut: \"s\",\n                mode: ChickenPaint.M_DRAW,\n                tool: ChickenPaint.T_SOFTERASER\n            },\n            {\n                className: \"chickenpaint-tool-smudge\",\n                command: \"CPSmudge\",\n                toolTip: \"Smudge\",\n                shortcut: \"d\",\n                mode: ChickenPaint.M_DRAW,\n                tool: ChickenPaint.T_SMUDGE\n            },\n            {\n                className: \"chickenpaint-tool-blender\",\n                command: \"CPBlender\",\n                toolTip: \"Blender\",\n                shortcut: \"c\",\n                mode: ChickenPaint.M_DRAW,\n                tool: ChickenPaint.T_BLENDER\n            },\n            {\n                className: \"chickenpaint-tool-dodge\",\n                command: \"CPDodge\",\n                toolTip: \"Dodge (tool)\",\n                shortcut: \"o\",\n                mode: ChickenPaint.M_DRAW,\n                tool: ChickenPaint.T_DODGE\n            },\n            {\n                className: \"chickenpaint-tool-burn\",\n                command: \"CPBurn\",\n                toolTip: \"Burn (tool)\",\n                shortcut: \"p\",\n                mode: ChickenPaint.M_DRAW,\n                tool: ChickenPaint.T_BURN\n            },\n            {\n                className: \"chickenpaint-tool-rotate-canvas\",\n                command: \"CPRotateCanvas\",\n                commandDoubleClick: \"CPResetCanvasRotation\",\n                toolTip: \"Rotate canvas\",\n\t\t\t\tmode: ChickenPaint.M_ROTATE_CANVAS\n            },\n            {\n                className: \"chickenpaint-tool-pan-canvas\",\n                command: \"CPPanCanvas\",\n                toolTip: \"Grab canvas\",\n                mode: ChickenPaint.M_PAN_CANVAS\n            },\n        ],\n        listElem = document.createElement(\"ul\");\n    \n    function buttonClicked(e) {\n        if (this.nodeName == \"LI\") {\n            let\n                button = buttons[parseInt(this.getAttribute(\"data-buttonIndex\"), 10)];\n\n            cpController.actionPerformed({action: button.command});\n            // that.userIsDoneWithUs();\n\t\t\t//ボタンクリック時にパレットを折りたたむ機能を削除\n        }\n    }\n\n    function buildButtons() {\n        let\n            body = that.getBodyElement();\n        \n        listElem.className = \"chickenpaint-tools list-unstyled\";\n        \n        for (let i in buttons) {\n            (function(i) {\n                let\n                    button = buttons[i],\n                    buttonElem = document.createElement(\"li\"),\n                    buttonIcon = document.createElement(\"div\");\n                \n                buttonElem.className = \"chickenpaint-toolbar-button \" + button.className;\n                buttonElem.setAttribute(\"data-buttonIndex\", i);\n\n                buttonElem.setAttribute('data-mode', button.mode);\n                if (button.tool !== undefined) {\n                    buttonElem.setAttribute('data-tool', button.tool);\n                }\n                \n                buttonElem.title = _(button.toolTip);\n                \n                if (button.shortcut) {\n                    buttonElem.title += \" (\" + button.shortcut.toUpperCase() + \")\";\n                    \n                    key(button.shortcut, function() {\n                        buttonClicked.call(buttonElem);\n                        \n                        return false;\n                    });\n                }\n                \n                if (button.selected) {\n                    buttonElem.className = buttonElem.className + \" selected\";\n                }\n\n                buttonIcon.className = \"chickenpaint-toolbar-button-icon\";\n                buttonElem.appendChild(buttonIcon);\n\n                listElem.appendChild(buttonElem);\n            })(i);\n        }\n        \n        listElem.addEventListener(\"click\", function(e) {\n            const liElem = e.target.closest(\"li\"); // クリックされた要素が li の場合、それを取得\n        \n            if (liElem) {\n                buttonClicked.call(liElem, e); // クリックされた li 要素を引数に渡す\n            }\n        });\n        listElem.addEventListener(\"dblclick\", function(e) {\n            const liElem = e.target.closest(\"li\");\n        \n            if (liElem) {\n                let buttonIndex = parseInt(liElem.getAttribute(\"data-buttonIndex\"), 10);\n                let button = buttons[buttonIndex];\n                \n                // クリックされた時に処理を実行\n                if (button.commandDoubleClick) {\n                cpController.actionPerformed({ action: button.commandDoubleClick });\n                }\n            }\n        });\n        \n        body.appendChild(listElem);\n    }\n\n    cpController.on(\"modeChange\", function(newMode) {\n        let body = that.getBodyElement();\n        \n        // 'selected' クラスを全ての <li> から削除\n        const liElems = body.querySelectorAll(\"li\");\n        liElems.forEach(function(liElem) {\n            liElem.classList.remove(\"selected\");\n        });\n        \n        // モードに応じて 'selected' クラスを追加\n        if (newMode == ChickenPaint.M_DRAW) {\n            const toolElem = body.querySelector(`li[data-tool=\"${cpController.getCurTool()}\"]`);\n            if (toolElem) {\n                toolElem.classList.add(\"selected\");\n            }\n        } else {\n            const modeElem = body.querySelector(`li[data-mode=\"${newMode}\"]`);\n            if (modeElem) {\n                modeElem.classList.add(\"selected\");\n            }\n        }\n    });\n    \n    cpController.on(\"toolChange\", function(newTool) {\n        let body = that.getBodyElement();\n    \n        if (cpController.getCurMode() == ChickenPaint.M_DRAW) {\n            // 'selected' クラスを全ての <li> から削除\n            const liElems = body.querySelectorAll(\"li\");\n            liElems.forEach(function(liElem) {\n                liElem.classList.remove(\"selected\");\n            });\n    \n            // 新しいツールに対応する <li> に 'selected' クラスを追加\n            const toolElem = body.querySelector(`li[data-tool=\"${newTool}\"]`);\n            if (toolElem) {\n                toolElem.classList.add(\"selected\");\n            }\n        }\n    });\n        \n    buildButtons();\n}\n\nCPToolPalette.prototype = Object.create(CPPalette.prototype);\nCPToolPalette.prototype.constructor = CPToolPalette;\n","/*\n    ChickenPaint\n    \n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\n    by Nicholas Sherlock / Chicken Smoothie.\n    \n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n    ChickenPaint is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ChickenPaint is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport EventEmitter from \"wolfy87-eventemitter\";\nimport { _ } from \"../languages/lang.js\";\n\nconst DRAG_START_THRESHOLD = 5;\n\nfunction distanceGreaterThan(a, b, threshold) {\n    let dist = (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y);\n\n    return dist > threshold * threshold;\n}\n\n/**\n *\n * @param {ChickenPaint} cpController\n * @param {String} className\n * @param {String} title\n * @param {Object} [options]\n * @param {boolean} options.resizeVert\n * @param {boolean} options.resizeHorz\n * @param {boolean} options.collapseDownwards\n *\n * @constructor\n */\nexport default function CPPalette(cpController, className, title, options) {\n    // Use a shorter version of the title if needed and one is available\n    if (\n        cpController.getSmallScreenMode() &&\n        _(title + \" (shorter)\") !== title + \" (shorter)\"\n    ) {\n        this.title = _(title + \" (shorter)\");\n    } else {\n        this.title = _(title);\n    }\n\n    options = options || {};\n\n    this.name = className;\n    this.resizeVert = options.resizeVert || false;\n    this.resizeHorz = options.resizeHorz || false;\n\n    let containerElement = document.createElement(\"div\"),\n        headElement = document.createElement(\"div\"),\n        collapseIcon = document.createElement(\"i\"),\n        closeButton = document.createElement(\"button\"),\n        bodyElement = document.createElement(\"div\"),\n        vertHandle = null,\n        horzHandle = null,\n        dragStartPos,\n        dragAction,\n        dragOffset,\n        that = this;\n\n    this.getElement = function () {\n        return containerElement;\n    };\n\n    this.getBodyElement = function () {\n        return bodyElement;\n    };\n\n    this.getWidth = function () {\n        return containerElement.offsetWidth;\n    };\n\n    this.getHeight = function () {\n        return containerElement.offsetHeight;\n    };\n\n    this.getX = function () {\n        return parseInt(containerElement.style.left, 10) || 0;\n    };\n\n    this.getY = function () {\n        return parseInt(containerElement.style.top, 10) || 0;\n    };\n\n    this.setLocation = function (x, y) {\n        containerElement.style.left = x + \"px\";\n        containerElement.style.top = y + \"px\";\n    };\n\n    this.setWidth = function (width) {\n        containerElement.style.width = width + \"px\";\n    };\n\n    this.setHeight = function (height) {\n        containerElement.style.height = height + \"px\";\n    };\n\n    this.setSize = function (width, height) {\n        this.setWidth(width);\n        this.setHeight(height);\n    };\n\n    this.setCollapseDownwards = function (collapseDownwards) {\n        options.collapseDownwards = collapseDownwards;\n    };\n\n/**\n * @param {boolean} [collapse] True to collapse, false to uncollapse, omit to toggle state\n */\nthis.toggleCollapse = function (collapse) {\n    if (collapse === undefined) {\n        collapse = !containerElement.classList.contains(\"collapsed\");\n    } else {\n        if (containerElement.classList.contains(\"collapsed\") === collapse) {\n            return;\n        }\n    }\n\n    let chickenpaintCanvas = containerElement.closest(\".chickenpaint\")?.querySelector(\".chickenpaint-canvas\"),\n        windowHeight = chickenpaintCanvas ? chickenpaintCanvas.clientHeight : window.innerHeight,\n        oldHeight = this.getHeight(),\n        oldBottom = this.getY() + oldHeight;\n\n    // collapseがtrueなら「collapsed」クラスが追加され、falseなら削除される\n    containerElement.classList.toggle(\"collapsed\", collapse);\n    // angle-downアイコンの表示/非表示を切り替える\n    collapseIcon.classList.toggle(\"icon-angle-down\", !collapse);\n    // angle-upアイコンの表示/非表示を切り替える\n    collapseIcon.classList.toggle(\"icon-angle-up\", collapse);\n\n    if (collapse) {\n        // Move the header down to the old base position\n        if (options.collapseDownwards) {\n            this.setLocation(\n                this.getX(),\n                Math.min(oldBottom, windowHeight) - this.getHeight()\n            );\n        }\n    } else {\n        let thisHeight = this.getHeight();\n\n        if (options.collapseDownwards) {\n            this.setLocation(\n                this.getX(),\n                Math.max(oldBottom - thisHeight, 0)\n            );\n        } else {\n            // Keep palettes inside the window when uncollapsing\n            if (this.getY() + thisHeight > windowHeight) {\n                this.setLocation(\n                    this.getX(),\n                    Math.max(windowHeight - thisHeight, 0)\n                );\n            }\n        }\n    }\n};\n\n    this.userIsDoneWithUs = function () {\n        if (cpController.getSmallScreenMode()) {\n            this.toggleCollapse(true);\n        }\n    };\n\n    function paletteHeaderPointerMove(e) {\n        if (\n            (dragAction === \"dragStart\" || dragAction === \"dragging\") &&\n            e.buttons !== 0\n        ) {\n            let newX = e.pageX - dragOffset.x,\n                newY = e.pageY - dragOffset.y;\n\n            if (dragAction == \"dragStart\") {\n                if (\n                    distanceGreaterThan(\n                        { x: newX, y: newY },\n                        dragStartPos,\n                        DRAG_START_THRESHOLD\n                    )\n                ) {\n                    // Recognise this as a drag rather than a clink\n                    dragAction = \"dragging\";\n                }\n            }\n\n            if (dragAction == \"dragging\") {\n                that.setLocation(newX, newY);\n            }\n        }\n    }\n\n    function paletteHeaderPointerDown(e) {\n        if (e.button == 0) {\n            /* Left */\n            e.stopPropagation();\n            e.preventDefault(); // Avoid generating further legacy mouse events\n\n            if (e.target.nodeName == \"BUTTON\") {\n                // Close button was clicked\n                that.emitEvent(\"paletteVisChange\", [that, false]);\n            } else {\n                dragStartPos = {\n                    x: parseInt(containerElement.style.left, 10) || 0,\n                    y: parseInt(containerElement.style.top, 10) || 0,\n                };\n                dragOffset = {\n                    x: e.pageX - containerElement.offsetLeft,\n                    y: e.pageY - containerElement.offsetTop,\n                };\n                if (cpController.getSmallScreenMode()) {\n                    // Wait for the cursor to move a certain amount before we classify this as a drag\n                    dragAction = \"dragStart\";\n                } else {\n                    dragAction = \"dragging\";\n                }\n\n                e.target.setPointerCapture(e.pointerId);\n            }\n        }\n    }\n\n    function paletteHeaderPointerUp(e) {\n        if (dragAction === \"dragging\" || dragAction === \"dragStart\") {\n            if (dragAction === \"dragStart\") {\n                // We clicked the header. Cancel the drag and toggle the palette instead\n                e.stopPropagation();\n                e.preventDefault();\n\n                /* Don't move the dialog immediately, because otherwise a click event will be\n                 * dispatched on the element which ends up under the cursor afterwards.\n                 */\n                setTimeout(() => {\n                    that.setLocation(dragStartPos.x, dragStartPos.y);\n                    that.toggleCollapse();\n                }, 100);\n            }\n\n            dragAction = false;\n\n            try {\n                e.target.releasePointerCapture(e.pointerId);\n            } catch (e) {\n                // This can fail for a variety of reasons we don't care about and won't affect us\n                console.error(e);\n            }\n        }\n    }\n\n    function vertHandlePointerMove(e) {\n        if (dragAction == \"vertResize\") {\n            that.setHeight(e.pageY - containerElement.offsetTop);\n        }\n    }\n\n    function vertHandlePointerUp(e) {\n        vertHandle.releasePointerCapture(e.pointerId);\n        dragAction = false;\n    }\n\n    function vertHandlePointerDown(e) {\n        dragAction = \"vertResize\";\n        vertHandle.setPointerCapture(e.pointerId);\n    }\n\n    function addVertResizeHandle() {\n        vertHandle = document.createElement(\"div\");\n\n        vertHandle.className = \"chickenpaint-resize-handle-vert\";\n\n        vertHandle.addEventListener(\"pointerdown\", vertHandlePointerDown);\n        vertHandle.addEventListener(\"pointermove\", vertHandlePointerMove);\n        vertHandle.addEventListener(\"pointerup\", vertHandlePointerUp);\n\n        containerElement.appendChild(vertHandle);\n    }\n\n    function horzHandlePointerMove(e) {\n        if (dragAction == \"horzResize\") {\n            that.setWidth(e.pageX - containerElement.offsetLeft);\n        }\n    }\n\n    function horzHandlePointerUp(e) {\n        horzHandle.releasePointerCapture(e.pointerId);\n        dragAction = false;\n    }\n\n    function horzHandlePointerDown(e) {\n        dragAction = \"horzResize\";\n        horzHandle.setPointerCapture(e.pointerId);\n    }\n\n    function addHorzResizeHandle() {\n        horzHandle = document.createElement(\"div\");\n\n        horzHandle.className = \"chickenpaint-resize-handle-horz\";\n\n        horzHandle.addEventListener(\"pointerdown\", horzHandlePointerDown);\n        horzHandle.addEventListener(\"pointermove\", horzHandlePointerMove);\n        horzHandle.addEventListener(\"pointerup\", horzHandlePointerUp);\n\n        containerElement.appendChild(horzHandle);\n    }\n\n    collapseIcon.className = \"collapse-icon fas icon-angle-down\";\n\n    closeButton.type = \"button\";\n    closeButton.className = \"btn btn-close\";\n    closeButton.textContent = \"\";\n    closeButton.tabIndex = -1;\n\n    containerElement.className =\n        \"chickenpaint-palette chickenpaint-palette-\" + className;\n\n    headElement.className = \"chickenpaint-palette-head\";\n    headElement.setAttribute(\"touch-action\", \"none\");\n\n    let titleContainer = document.createElement(\"div\"),\n        titleElem = document.createElement(\"h5\");\n\n    titleContainer.className = \"modal-header\";\n\n    titleElem.className = \"modal-title\";\n    titleElem.appendChild(document.createTextNode(this.title));\n    titleElem.appendChild(collapseIcon);\n\n    titleContainer.appendChild(titleElem);\n    titleContainer.appendChild(closeButton);\n\n    headElement.appendChild(titleContainer);\n\n    bodyElement.className = \"chickenpaint-palette-body\";\n\n    containerElement.appendChild(headElement);\n    containerElement.appendChild(bodyElement);\n\n    if (this.resizeVert) {\n        addVertResizeHandle();\n    }\n\n    if (this.resizeHorz) {\n        addHorzResizeHandle();\n    }\n\n    headElement.addEventListener(\"pointerdown\", paletteHeaderPointerDown);\n    headElement.addEventListener(\"pointermove\", paletteHeaderPointerMove);\n    headElement.addEventListener(\"pointerup\", paletteHeaderPointerUp);\n}\n\nCPPalette.prototype = Object.create(EventEmitter.prototype);\nCPPalette.prototype.constructor = EventEmitter;","/*\n    ChickenPaint\n    \n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\n    by Nicholas Sherlock / Chicken Smoothie.\n    \n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n    ChickenPaint is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ChickenPaint is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport CPPalette from \"./CPPalette.js\";\nimport { _ } from \"../languages/lang.js\";\n\nexport default function CPMiscPalette(cpController) {\n    CPPalette.call(this, cpController, \"misc\", \"Misc\");\n\n    /** @type {HTMLElement|null} */\n    //表示の左右反転時に赤枠を付けるElement\n    this.flipButton = null;\n\n    let that = this,\n        buttons = [\n            {\n                className: \"chickenpaint-tool-zoom-in\",\n                command: \"CPZoomIn\",\n                toolTip: \"Zoom in\",\n            },\n            {\n                className: \"chickenpaint-tool-zoom-out\",\n                command: \"CPZoomOut\",\n                toolTip: \"Zoom out\",\n            },\n            {\n                className: \"chickenpaint-tool-zoom-100\",\n                command: \"CPZoom100\",\n                toolTip: \"Zoom 100%\",\n            },\n            {\n                className: \"chickenpaint-tool-flip-horizontal\",\n                command: \"CPViewHFlip\",\n                toolTip: \"Flip View Horizontal\",\n            },\n            {\n                className: \"chickenpaint-tool-undo\",\n                command: \"CPUndo\",\n                toolTip: \"Undo\",\n            },\n            {\n                className: \"chickenpaint-tool-redo\",\n                command: \"CPRedo\",\n                toolTip: \"Redo\",\n            },\n            {\n                className: \"chickenpaint-tool-send\",\n                command: \"CPSend\",\n                toolTip: \"Save Oekaki\",\n            },\n        ];\n\n    function buildButtons() {\n        let body = that.getBodyElement(),\n            listElem = document.createElement(\"ul\");\n\n        listElem.className = \"chickenpaint-misc-tools list-unstyled\";\n\n        for (let i in buttons) {\n            let button = buttons[i],\n                buttonElem = document.createElement(\"li\"),\n                buttonIcon = document.createElement(\"div\");\n\n            if (\n                button.command == \"CPSend\" &&\n                !cpController.isActionSupported(\"CPContinue\")\n            ) {\n                button.toolTip = \"Post Oekaki\";\n                button.className = \"chickenpaint-tool-send-and-end\";\n            }\n\n            buttonElem.className =\n                \"chickenpaint-toolbar-button \" + button.className;\n            buttonElem.setAttribute(\"data-buttonIndex\", i);\n            buttonElem.setAttribute(\"title\", _(button.toolTip));\n\n            buttonIcon.className = \"chickenpaint-toolbar-button-icon\";\n            buttonElem.appendChild(buttonIcon);\n\n            listElem.appendChild(buttonElem);\n            // 「左右反転ボタン」の要素を保存する\n            if (button.className === \"chickenpaint-tool-flip-horizontal\") {\n                that.flipButton = buttonElem;\n            }\n        }\n\n        listElem.addEventListener(\"click\", function (e) {\n            // クリックされた要素が <li> 内の何らかの要素の場合、親の <li> を取得\n            const liElem = e.target.closest(\"li\");\n\n            // 親が <li> であれば処理を行う\n            if (liElem) {\n                let buttonIndex = parseInt(\n                    liElem.getAttribute(\"data-buttonIndex\"),\n                    10\n                );\n                let button = buttons[buttonIndex];\n\n                // アクションを実行\n                cpController.actionPerformed({ action: button.command });\n            }\n        });\n\n        body.appendChild(listElem);\n    }\n\n    buildButtons();\n}\n\nCPMiscPalette.prototype = Object.create(CPPalette.prototype);\nCPMiscPalette.prototype.constructor = CPMiscPalette;\n","/*\n    ChickenPaint\n    \n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\n    by Nicholas Sherlock / Chicken Smoothie.\n    \n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n    ChickenPaint is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ChickenPaint is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport CPPalette from './CPPalette.js';\nimport CPBrushInfo from '../engine/CPBrushInfo.js';\nimport {_} from \"../languages/lang.js\";\n\nexport default function CPStrokePalette(cpController) {\n    CPPalette.call(this, cpController, \"stroke\", \"Stroke\");\n    \n    let \n        that = this,\n\n        buttons = [\n            {\n                className: \"chickenpaint-tool-freehand\",\n                command: \"CPFreeHand\",\n                toolTip: _(\"Free-hand\"),\n                selected: true\n            },\n            {\n                className: \"chickenpaint-tool-line\",\n                command: \"CPLine\",\n                toolTip: _(\"Straight line\")\n            },\n            {\n                className: \"chickenpaint-tool-bezier\",\n                command: \"CPBezier\",\n                toolTip: _(\"Bezier curve\")\n            }\n        ],\n\n        body = that.getBodyElement();\n\n    function buildButtons() {\n        let\n            listElem = document.createElement(\"ul\");\n        \n        listElem.className = \"chickenpaint-stroke-tools list-unstyled\";\n        \n        for (let i in buttons) {\n            let\n                button = buttons[i],\n                buttonElem = document.createElement(\"li\"),\n                buttonIcon = document.createElement(\"div\");\n            \n            buttonElem.className = \"chickenpaint-toolbar-button \" + button.className;\n            buttonElem.setAttribute(\"data-buttonIndex\", i);\n            buttonElem.setAttribute(\"title\", button.toolTip);\n            \n            if (button.selected) {\n                buttonElem.className = buttonElem.className + \" selected\";\n            }\n\n            buttonIcon.className = \"chickenpaint-toolbar-button-icon\";\n            buttonElem.appendChild(buttonIcon);\n\n            listElem.appendChild(buttonElem);\n        }\n\n            listElem.addEventListener(\"click\", function(e) {\n                // クリックされた要素が <li> 内の何らかの要素の場合、親の <li> を取得\n                const liElem = e.target.closest(\"li\");\n    \n                // 親が <li> であれば処理を行う\n                if (liElem) {\n                    let buttonIndex = parseInt(liElem.getAttribute(\"data-buttonIndex\"), 10);\n                    let button = buttons[buttonIndex];\n                    // アクションを実行\n                    cpController.actionPerformed({ action: button.command });\n                }\n            });\n                \n        body.appendChild(listElem);\n    }\n    \n    buildButtons();\n    \n    cpController.on(\"toolChange\", function(tool, toolInfo) {\n        const freehandElem = document.querySelector(\".chickenpaint-tool-freehand\");\n        const lineElem = document.querySelector(\".chickenpaint-tool-line\");\n        const bezierElem = document.querySelector(\".chickenpaint-tool-bezier\");\n        \n        if (freehandElem) {\n            freehandElem.classList.toggle(\"selected\", toolInfo.strokeMode == CPBrushInfo.STROKE_MODE_FREEHAND);\n        }\n        if (lineElem) {\n            lineElem.classList.toggle(\"selected\", toolInfo.strokeMode == CPBrushInfo.STROKE_MODE_LINE);\n        }\n        if (bezierElem) {\n            bezierElem.classList.toggle(\"selected\", toolInfo.strokeMode == CPBrushInfo.STROKE_MODE_BEZIER);\n        }\n    });\n}\n\nCPStrokePalette.prototype = Object.create(CPPalette.prototype);\nCPStrokePalette.prototype.constructor = CPStrokePalette;\n","/*\n    ChickenPaint\n    \n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\n    by Nicholas Sherlock / Chicken Smoothie.\n    \n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n    ChickenPaint is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ChickenPaint is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport CPPalette from './CPPalette.js';\nimport CPColorSelect from './CPColorSelect.js';\nimport CPColorSlider from './CPColorSlider.js';\nimport CPColor from \"../util/CPColor.js\";\nimport {_} from \"../languages/lang.js\";\n\nexport default function CPColorPalette(cpController) {\n    CPPalette.call(this, cpController, \"color\", \"Color (picker)\");\n    \n    let\n        colorSelect = new CPColorSelect(cpController),\n        colorSlider = new CPColorSlider(cpController, colorSelect),\n        colorShow = new CPColorShow(cpController),\n    \n        body = this.getBodyElement(),\n        topSection = document.createElement(\"div\");\n    \n    topSection.className = 'chickenpaint-colorpicker-top';\n    \n    topSection.appendChild(colorSelect.getElement());\n    topSection.appendChild(colorSlider.getElement());\n    \n    body.appendChild(topSection);\n    body.appendChild(colorShow.getElement());\n}\n\nfunction CPColorShow(controller) {\n    let\n        color = 0,\n        \n        element = document.createElement(\"div\");\n\n    function padLeft(string, padding, len) {\n        while (string.length < len) {\n            string = padding + string;\n        }\n        return string;\n    }\n    \n    function paint() {\n        element.style.backgroundColor = \"#\" + padLeft(Number(color).toString(16), \"0\", 6);\n    }\n    \n    function mouseClick(e) {\n        e.preventDefault();\n        \n        let\n            colHex = \"#\" + padLeft(Number(color).toString(16), \"0\", 6);\n\n        colHex = window.prompt(_(\"Please enter a color in hex format\"), colHex);\n        \n        if (colHex != null) {\n            try {\n                if (colHex.match(/^#/) || colHex.match(/^$/)) {\n                    colHex = colHex.substring(1);\n                }\n\n                let\n                    newColor = parseInt(colHex, 16);\n\n                controller.setCurColor(new CPColor(newColor));\n            } catch (e) {\n            }\n        }\n    }\n    \n    this.getElement = function() {\n        return element;\n    };\n    \n    controller.on(\"colorChange\", function(_color) {\n        color = _color.getRgb();\n        paint();\n    });\n    \n    element.className = 'chickenpaint-colorpicker-show';\n    \n    element.addEventListener(\"click\", mouseClick);\n\n    paint();\n}\n\nCPColorPalette.prototype = Object.create(CPPalette.prototype);\nCPColorPalette.prototype.constructor = CPColorPalette;\n","/*\n    ChickenPaint\n\n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\n    by Nicholas Sherlock / Chicken Smoothie.\n\n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n    ChickenPaint is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ChickenPaint is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport CPColor from \"../util/CPColor.js\";\nimport CPColorBmp from \"../engine/CPColorBmp.js\";\nimport {setContrastingDrawStyle} from \"./CPGUIUtils.js\";\n\nconst\n    CONTROL_WIDTH = 128,\n    CONTROL_HEIGHT = 128,\n\n    PIXEL_SCALE = (window.devicePixelRatio || 1),\n\n    CANVAS_WIDTH = Math.round(CONTROL_WIDTH * PIXEL_SCALE),\n    CANVAS_HEIGHT = Math.round(CONTROL_HEIGHT * PIXEL_SCALE);\n\n/**\n *\n * @param controller\n * @param {CPColor} initialColor\n * @constructor\n */\nexport default class CPColorSelect {\n\n    _controller;\n\n    _canvas;\n    _canvasContext;\n    _imageData;\n\n    _bitmapInvalid = true;\n    _capturedMouse = false;\n    _greyscale = false;\n\n    color = new CPColor(0);\n\n    constructor(controller, initialColor) {\n        this._controller = controller;\n\n        let\n            canvas =  document.createElement(\"canvas\");\n\n        this._canvas = canvas;\n\n        canvas.className = 'chickenpaint-colorpicker-select';\n        canvas.setAttribute(\"touch-action\", \"none\");\n\n        canvas.width = CANVAS_WIDTH;\n        canvas.height = CANVAS_HEIGHT;\n\n        canvas.style.width = CONTROL_WIDTH + \"px\";\n        canvas.style.height = CONTROL_HEIGHT + \"px\";\n\n        this._canvasContext = canvas.getContext(\"2d\");\n        this._imageData = this._canvasContext.createImageData(CANVAS_WIDTH, CANVAS_HEIGHT);\n\n        // Workaround for Chrome bug https://bugs.chromium.org/p/chromium/issues/detail?id=1350157:\n        this._canvasContext.getImageData(0, 0, 1, 1);\n\n        this._handleEndDrag = this._endDrag.bind(this);\n        this._handleMousePickColor = this._mousePickColor.bind(this);\n\n        canvas.addEventListener(\"pointerdown\", e => this._startDrag(e));\n\n        if (initialColor) {\n            this.color.copyFrom(initialColor);\n        }\n\n        controller.on(\"colorChange\", c => {\n            this.color.copyFrom(c);\n\n            this._bitmapInvalid = true;\n            this.paint();\n        });\n\n        controller.on(\"colorModeChange\", newMode => {\n            this._greyscale = (newMode == \"greyscale\");\n\n            this._bitmapInvalid = true;\n            this.paint();\n        });\n\n        this.paint();\n    }\n\n    _makeBitmap() {\n        if (!this._bitmapInvalid) {\n            return;\n        }\n\n        let\n            pixIndex = 0,\n            data = this._imageData.data;\n\n        if (this._greyscale) {\n            for (let y = 0; y < CANVAS_HEIGHT; y++) {\n                let\n                    col = 255 - Math.round(y / (CANVAS_HEIGHT - 1) * 255);\n\n                for (let x = 0; x < CANVAS_WIDTH; x++) {\n                    data[pixIndex + CPColorBmp.RED_BYTE_OFFSET] = col;\n                    data[pixIndex + CPColorBmp.GREEN_BYTE_OFFSET] = col;\n                    data[pixIndex + CPColorBmp.BLUE_BYTE_OFFSET] = col;\n                    data[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] = 0xFF;\n\n                    pixIndex += CPColorBmp.BYTES_PER_PIXEL;\n                }\n            }\n        } else {\n            let\n                col = this.color.clone();\n\n            for (let y = 0; y < CANVAS_HEIGHT; y++) {\n                col.setValue(255 - ~~(y / (CANVAS_HEIGHT - 1) * 255));\n\n                for (let x = 0; x < CANVAS_WIDTH; x++) {\n                    col.setSaturation(Math.round(x / (CANVAS_WIDTH - 1) * 255));\n\n                    data[pixIndex + CPColorBmp.RED_BYTE_OFFSET] = (col.rgb >> 16) & 0xFF;\n                    data[pixIndex + CPColorBmp.GREEN_BYTE_OFFSET] = (col.rgb >> 8) & 0xFF;\n                    data[pixIndex + CPColorBmp.BLUE_BYTE_OFFSET] = col.rgb & 0xFF;\n                    data[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] = 0xFF;\n\n                    pixIndex += CPColorBmp.BYTES_PER_PIXEL;\n                }\n            }\n        }\n\n        this._bitmapInvalid = false;\n    }\n\n    paint() {\n        this._makeBitmap();\n\n        this._canvasContext.putImageData(this._imageData, 0, 0);\n\n        let\n            cursorX = this.color.getSaturation() / 255 * (CANVAS_WIDTH - 1),\n            cursorY = (255 - this.color.getValue()) / 255 * (CANVAS_HEIGHT - 1);\n\n        setContrastingDrawStyle(this._canvasContext, \"stroke\");\n\n        this._canvasContext.lineWidth = 1.5 * PIXEL_SCALE;\n\n        this._canvasContext.beginPath();\n\n        if (this._greyscale) {\n            this._canvasContext.moveTo(0, cursorY);\n            this._canvasContext.lineTo(CANVAS_WIDTH, cursorY);\n        } else {\n            this._canvasContext.arc(cursorX, cursorY, 5 * PIXEL_SCALE, 0, Math.PI * 2);\n        }\n\n        this._canvasContext.stroke();\n\n        this._canvasContext.globalCompositeOperation = 'source-over';\n    }\n\n    _mousePickColor(e) {\n\n        let rect = this._canvas.getBoundingClientRect();\n        let x = e.pageX - window.scrollX - rect.left;\n        let y = e.pageY - window.scrollY - rect.top;\n\n        let value = Math.max(Math.min(255 - ~~(y * 255 / (CONTROL_HEIGHT - 1)), 255), 0);\n\n        if (this._greyscale) {\n            this.color.setGreyscale(value);\n        } else {\n            let\n                sat = Math.max(Math.min(~~(x * 255 / (CONTROL_WIDTH - 1)), 255), 0);\n\n            this.color.setHsv(this.color.getHue(), sat, value);\n        }\n\n        this.paint();\n        this._controller.setCurColor(this.color);\n    }\n\n    _endDrag(e) {\n        this._canvas.releasePointerCapture(e.pointerId);\n        this._capturedMouse = false;\n        this._canvas.removeEventListener(\"pointerup\", this._handleEndDrag);\n        this._canvas.removeEventListener(\"pointermove\", this._handleMousePickColor);\n    }\n\n    _startDrag(e) {\n        if (!this._capturedMouse) {\n            this._capturedMouse = true;\n            this._canvas.setPointerCapture(e.pointerId);\n            this._canvas.addEventListener(\"pointerup\", this._handleEndDrag);\n            this._canvas.addEventListener(\"pointermove\", this._handleMousePickColor);\n        }\n\n        this._handleMousePickColor(e);\n    }\n\n    setHue(hue) {\n        if (this.color.getHue() != hue) {\n            this.color.setHue(hue);\n            this._controller.setCurColor(this.color);\n        }\n    }\n\n    getElement() {\n        return this._canvas;\n    }\n}","/*\n    ChickenPaint\n\n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\n    by Nicholas Sherlock / Chicken Smoothie.\n\n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n    ChickenPaint is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ChickenPaint is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport CPColor from \"../util/CPColor.js\";\nimport CPColorBmp from \"../engine/CPColorBmp.js\";\nimport {setContrastingDrawStyle} from \"./CPGUIUtils.js\";\n\nconst\n    WIDTH = 24,\n    HEIGHT = 128;\n\n/**\n * @param {ImageData} imageData\n */\nfunction makeSliderBitmap(imageData) {\n    let\n        color = new CPColor(0x00FFFF),\n        pixIndex = 0,\n        data = imageData.data;\n\n    for (let y = 0; y < imageData.height; y++) {\n        color.setHue((y * 359) / imageData.height);\n\n        for (let x = 0; x < imageData.width; x++) {\n            data[pixIndex + CPColorBmp.RED_BYTE_OFFSET] = (color.rgb >> 16) & 0xFF;\n            data[pixIndex + CPColorBmp.GREEN_BYTE_OFFSET] = (color.rgb >> 8) & 0xFF;\n            data[pixIndex + CPColorBmp.BLUE_BYTE_OFFSET] = color.rgb & 0xFF;\n            data[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] = 0xFF;\n\n            pixIndex += CPColorBmp.BYTES_PER_PIXEL;\n        }\n    }\n}\n\nexport default class CPColorSlider {\n\n    hue;\n    selecter;\n\n    _canvas;\n    _canvasContext;\n    _imageData;\n\n    _capturedMouse = false;\n\n    constructor(controller, selecter, initialHue) {\n        this.selecter = selecter;\n        this.hue = initialHue || 0;\n\n        let\n            canvas = document.createElement(\"canvas\");\n\n        this._canvas = canvas;\n\n        controller.on(\"colorChange\", color => {\n            this.setHue(color.getHue());\n        });\n\n        controller.on(\"colorModeChange\", mode => {\n            canvas.style.display = (mode == \"greyscale\" ? \"none\" : \"block\");\n        });\n\n        canvas.setAttribute(\"touch-action\", \"none\");\n\n        canvas.addEventListener(\"pointerdown\", e => this._startDrag(e));\n\n        canvas.width = WIDTH;\n        canvas.height = HEIGHT;\n\n        canvas.className = 'chickenpaint-colorpicker-slider';\n\n        this._canvasContext = canvas.getContext(\"2d\");\n        this._imageData = this._canvasContext.createImageData(WIDTH, HEIGHT);\n\n        // Workaround for Chrome bug https://bugs.chromium.org/p/chromium/issues/detail?id=1350157:\n        this._canvasContext.getImageData(0, 0, 1, 1);\n\n        this._handleEndDrag = this._endDrag.bind(this);\n        this._handleMousePickColor = this._mousePickColor.bind(this);\n\n        makeSliderBitmap(this._imageData);\n\n        this.paint();\n    }\n\n    paint() {\n        this._canvasContext.putImageData(this._imageData, 0, 0);\n\n        let\n            y = (this.hue * HEIGHT) / 360;\n\n        setContrastingDrawStyle(this._canvasContext, \"stroke\");\n\n        this._canvasContext.lineWidth = 1.5;\n\n        this._canvasContext.beginPath();\n        this._canvasContext.moveTo(0, y);\n        this._canvasContext.lineTo(WIDTH, y);\n        this._canvasContext.stroke();\n\n        this._canvasContext.globalCompositeOperation = 'source-over';\n    }\n\n    _mousePickColor(e) {\n        let\n            rect = this._canvas.getBoundingClientRect(),\n            y = e.pageY - rect.top,\n\n            _hue = ~~(y * 360 / HEIGHT);\n\n        this.hue = Math.max(0, Math.min(359, _hue));\n        this.paint();\n\n        if (this.selecter) {\n            this.selecter.setHue(this.hue);\n        }\n    }\n\n    _endDrag(e) {\n        this._canvas.releasePointerCapture(e.pointerId);\n        this._capturedMouse = false;\n        this._canvas.removeEventListener(\"pointerup\", this._handleEndDrag);\n        this._canvas.removeEventListener(\"pointermove\", this._handleMousePickColor);\n    }\n\n    _startDrag(e) {\n        if (!this._capturedMouse) {\n            this._capturedMouse = true;\n            this._canvas.setPointerCapture(e.pointerId);\n            this._canvas.addEventListener(\"pointerup\", this._handleEndDrag);\n            this._canvas.addEventListener(\"pointermove\", this._handleMousePickColor);\n        }\n\n        this._handleMousePickColor(e);\n    }\n\n    getElement() {\n        return this._canvas;\n    }\n\n    setHue(h) {\n        this.hue = h;\n\n        this.paint();\n    }\n}\n","/*\n    ChickenPaint\n    \n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\n    by Nicholas Sherlock / Chicken Smoothie.\n    \n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n    ChickenPaint is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ChickenPaint is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport ChickenPaint from \"../ChickenPaint.js\";\n\nimport CPPalette from \"./CPPalette.js\";\nimport CPCheckbox from \"./CPCheckbox.js\";\nimport CPColorSwatch from \"./CPColorSwatch.js\";\nimport CPSlider from \"./CPSlider.js\";\nimport { createCheckerboardPattern } from \"./CPGUIUtils.js\";\n\nimport CPColorBmp from \"../engine/CPColorBmp.js\";\n\nimport CPColor from \"../util/CPColor.js\";\nimport { isCanvasInterpolationSupported } from \"../util/CPPolyfill.js\";\n\nimport key from \"../../lib/keymaster.js\";\n\nimport { _ } from \"../languages/lang.js\";\n\nfunction sliderCheckboxGroup(checkbox, slider) {\n    let group = document.createElement(\"div\");\n\n    group.className = \"chickenpaint-checkbox-slider-group\";\n\n    group.appendChild(checkbox.getElement());\n    group.appendChild(slider.getElement());\n\n    return group;\n}\n\nfunction fillCombobox(combo, optionNames) {\n    for (let key in optionNames) {\n        if (optionNames.hasOwnProperty(key)) {\n            let option = document.createElement(\"option\");\n\n            option.appendChild(document.createTextNode(_(optionNames[key])));\n            option.value = key;\n\n            combo.appendChild(option);\n        }\n    }\n}\n\nfunction CPGradientPreview(controller) {\n    let w = 150,\n        h = 32,\n        canvas = document.createElement(\"canvas\"),\n        canvasContext = canvas.getContext(\"2d\"),\n        checkerboard = createCheckerboardPattern(canvasContext),\n        image = new CPColorBmp(w, h),\n        imageCanvas = document.createElement(\"canvas\"),\n        imageCanvasContext = imageCanvas.getContext(\"2d\"),\n        gradient = controller.getCurGradient();\n\n    function paint() {\n        image.gradient(image.getBounds(), 0, 0, image.width, 0, gradient, true);\n        imageCanvasContext.putImageData(image.imageData, 0, 0, 0, 0, w, h);\n\n        canvasContext.fillRect(0, 0, canvas.width, canvas.height);\n        canvasContext.drawImage(imageCanvas, 0, 0);\n    }\n\n    this.getElement = function () {\n        return canvas;\n    };\n\n    controller.on(\"gradientChange\", function (_gradient) {\n        gradient = _gradient;\n\n        paint();\n    });\n\n    canvas.width = imageCanvas.width = w;\n    canvas.height = imageCanvas.height = h;\n\n    canvas.className = \"chickenpaint-gradient-preview\";\n\n    canvasContext.fillStyle = checkerboard;\n\n    paint();\n}\n\nexport default function CPBrushPalette(controller) {\n    CPPalette.call(this, controller, \"brush\", \"Tool options\");\n\n    let brushPanel = new CPBrushPanel(controller),\n        gradientPanel = new CPGradientPanel(controller),\n        transformPanel = new CPTransformPanel(controller),\n        selectPanel = new CPSelectionPanel(controller),\n        panPanel = new CPPanPanel(controller),\n        body = this.getBodyElement();\n\n    //touchmoveイベントのデフォルトの動作をキャンセル\n    body.addEventListener(\n        \"touchmove\",\n        (e) => {\n            e.preventDefault(); // デフォルトの動作をキャンセル\n        },\n        { passive: false }\n    );\n\n    body.appendChild(brushPanel.getElement());\n    body.appendChild(gradientPanel.getElement());\n    body.appendChild(transformPanel.getElement());\n    body.appendChild(selectPanel.getElement());\n    body.appendChild(panPanel.getElement());\n\n    function hideAllPanels() {\n        brushPanel.getElement().style.display = \"none\";\n        gradientPanel.getElement().style.display = \"none\";\n        transformPanel.getElement().style.display = \"none\";\n        selectPanel.getElement().style.display = \"none\";\n        panPanel.getElement().style.display = \"none\";\n    }\n    let currentMode = null;\n    function updatePanelByMode(mode) {\n        hideAllPanels();\n        const checkbox = selectPanel.getElement().querySelector(\".form-check\"); //\n\n        if (checkbox) {\n            checkbox.style.display = \"none\"; // 非表示にする\n        }\n        switch (mode) {\n            case ChickenPaint.M_GRADIENTFILL:\n                gradientPanel.getElement().style.display = \"block\";\n                break;\n            case ChickenPaint.M_TRANSFORM:\n                transformPanel.getElement().style.display = \"block\";\n                break;\n            case ChickenPaint.M_RECT_SELECTION:\n                selectPanel.getElement().style.display = \"block\";\n                if (checkbox instanceof HTMLElement) {\n                    checkbox.style.display = \"\"; // 表示する\n                }\n                break;\n            case ChickenPaint.M_MOVE_TOOL:\n                selectPanel.getElement().style.display = \"block\";\n                break;\n            case ChickenPaint.M_ROTATE_CANVAS:\n            case ChickenPaint.M_PAN_CANVAS:\n                panPanel.getElement().style.display = \"block\";\n                break;\n            default:\n                brushPanel.getElement().style.display = \"block\";\n                break;\n        }\n    }\n    controller.on(\"modeChange\", function (mode) {\n        currentMode = mode;\n        updatePanelByMode(mode);\n    });\n\n    document.addEventListener(\"keydown\", (e) => {\n        if (\n            e.key.toLocaleLowerCase() === \"r\" ||\n            (!e.ctrlKey && e.key.toLocaleLowerCase() === \"z\") ||\n            e.key === \" \"\n        ) {\n            hideAllPanels();\n            panPanel.getElement().style.display = \"block\";\n        }\n    });\n    document.addEventListener(\"keyup\", (e) => {\n        if (\n            e.key.toLocaleLowerCase() === \"r\" ||\n            e.key.toLocaleLowerCase() === \"z\" ||\n            e.key === \" \"\n        ) {\n            hideAllPanels();\n            updatePanelByMode(currentMode);\n        }\n    });\n}\n\nCPBrushPalette.prototype = Object.create(CPPalette.prototype);\nCPBrushPalette.prototype.constructor = CPBrushPalette;\n\nfunction CPBrushPanel(controller) {\n    const TIP_NAMES = [\n            \"Round Pixelated\",\n            \"Round Hard Edge\",\n            \"Round Soft\",\n            \"Square Pixelated\",\n            \"Square Hard Edge\",\n        ],\n        BRUSH_SIZES = [\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 25, 30, 35, 40, 45, 50, 60,\n            70, 80, 90, 100, 125, 150, 175, 200,\n        ];\n\n    let panel = document.createElement(\"div\"),\n        tipCombo = document.createElement(\"select\"),\n        alphaCB = new CPCheckbox(\n            false,\n            _(\"Control brush opacity with pen pressure\")\n        ),\n        alphaSlider = new CPSlider(1, 255),\n        sizeCB = new CPCheckbox(\n            true,\n            _(\"Control brush size with pen pressure\")\n        ),\n        sizeSlider = new CPSlider(1, 200, false, true),\n        scatteringCB = new CPCheckbox(\n            false,\n            _(\"Control brush scattering with pen pressure\")\n        ),\n        scatteringSlider = new CPSlider(0, 1000, false, true),\n        resatSlider = new CPSlider(0, 100, false, true),\n        bleedSlider = new CPSlider(0, 100, false, true),\n        spacingSlider = new CPSlider(0, 100, false, true),\n        smoothingSlider = new CPSlider(0, 100, false, true),\n        brushPreview = new CPBrushPalette.CPBrushPreview(controller);\n\n    function fillWithInitialValues() {\n        alphaCB.setValue(controller.getBrushInfo().pressureAlpha);\n        alphaSlider.setValue(controller.getAlpha());\n\n        sizeCB.setValue(controller.getBrushInfo().pressureSize);\n        sizeSlider.setValue(controller.getBrushSize());\n\n        scatteringCB.setValue(controller.getBrushInfo().pressureScattering);\n        scatteringSlider.setValue(\n            ~~(controller.getBrushInfo().scattering * 100)\n        );\n\n        tipCombo.value = controller.getBrushInfo().tip;\n\n        resatSlider.setValue(~~(controller.getBrushInfo().resat * 100));\n        bleedSlider.setValue(~~(controller.getBrushInfo().bleed * 100));\n        spacingSlider.setValue(~~(controller.getBrushInfo().spacing * 100));\n        smoothingSlider.setValue(~~(controller.getBrushInfo().smoothing * 100));\n    }\n\n    this.getElement = function () {\n        return panel;\n    };\n\n    alphaSlider.title = function (value) {\n        return _(\"Opacity\") + \": \" + value;\n    };\n\n    alphaSlider.on(\"valueChange\", function (value) {\n        controller.setAlpha(value);\n    });\n\n    sizeSlider.title = function (value) {\n        return _(\"Brush size\") + \": \" + value;\n    };\n\n    sizeSlider.on(\"valueChange\", function (value) {\n        controller.setBrushSize(value);\n    });\n\n    resatSlider.title = function (value) {\n        return _(\"Color\") + \": \" + value + \"%\";\n    };\n\n    resatSlider.on(\"valueChange\", function (value) {\n        controller.getBrushInfo().resat = value / 100.0;\n        controller.callToolListeners();\n    });\n\n    bleedSlider.title = function (value) {\n        return _(\"Blend\") + \": \" + value + \"%\";\n    };\n\n    bleedSlider.on(\"valueChange\", function (value) {\n        controller.getBrushInfo().bleed = value / 100.0;\n        controller.callToolListeners();\n    });\n\n    spacingSlider.title = function (value) {\n        return _(\"Spacing\") + \": \" + value + \"%\";\n    };\n\n    spacingSlider.on(\"valueChange\", function (value) {\n        controller.getBrushInfo().spacing = value / 100.0;\n        controller.callToolListeners();\n    });\n\n    scatteringSlider.title = function (value) {\n        return _(\"Scattering\") + \": \" + value + \"%\";\n    };\n\n    scatteringSlider.on(\"valueChange\", function (value) {\n        controller.getBrushInfo().scattering = value / 100.0;\n        controller.callToolListeners();\n    });\n\n    smoothingSlider.title = function (value) {\n        return _(\"Smoothing\") + \": \" + value + \"%\";\n    };\n\n    smoothingSlider.on(\"valueChange\", function (value) {\n        controller.getBrushInfo().smoothing = value / 100.0;\n        controller.callToolListeners();\n    });\n\n    scatteringCB.on(\"valueChange\", function (state) {\n        controller.getBrushInfo().pressureScattering = state;\n        controller.callToolListeners();\n    });\n\n    alphaCB.on(\"valueChange\", function (state) {\n        controller.getBrushInfo().pressureAlpha = state;\n        controller.callToolListeners();\n    });\n\n    sizeCB.on(\"valueChange\", function (state) {\n        controller.getBrushInfo().pressureSize = state;\n        controller.callToolListeners();\n    });\n\n    tipCombo.addEventListener(\"change\", function (e) {\n        controller.getBrushInfo().tip = parseInt(tipCombo.value, 10);\n        tipCombo.blur();\n    });\n    // tipCombo.onfocus = ()=>{//フォーカスを検出したら\n    // \tdocument.activeElement.blur();//フォーカスを外す\n    // \t// console.log(document.activeElement);\n\n    // };\n\n    tipCombo.className = \"form-control form-control-sm\";\n    tipCombo.tabIndex = -1;\n\n    fillCombobox(tipCombo, TIP_NAMES);\n\n    panel.appendChild(tipCombo);\n\n    panel.appendChild(brushPreview.getElement());\n\n    panel.appendChild(sliderCheckboxGroup(sizeCB, sizeSlider));\n    panel.appendChild(sliderCheckboxGroup(alphaCB, alphaSlider));\n    panel.appendChild(resatSlider.getElement());\n    panel.appendChild(bleedSlider.getElement());\n    panel.appendChild(spacingSlider.getElement());\n    panel.appendChild(sliderCheckboxGroup(scatteringCB, scatteringSlider));\n    panel.appendChild(smoothingSlider.getElement());\n\n    fillWithInitialValues();\n\n    controller.on(\"toolChange\", function (tool, toolInfo) {\n        alphaSlider.setValue(toolInfo.alpha);\n        sizeSlider.setValue(toolInfo.size);\n        sizeCB.setValue(toolInfo.pressureSize);\n        alphaCB.setValue(toolInfo.pressureAlpha);\n        tipCombo.value = toolInfo.tip;\n        scatteringCB.setValue(toolInfo.pressureScattering);\n\n        if (~~(toolInfo.resat * 100.0) != resatSlider.value) {\n            resatSlider.setValue(~~(toolInfo.resat * 100.0));\n        }\n\n        if (~~(toolInfo.bleed * 100.0) != bleedSlider.value) {\n            bleedSlider.setValue(~~(toolInfo.bleed * 100.0));\n        }\n\n        if (~~(toolInfo.spacing * 100.0) != spacingSlider.value) {\n            spacingSlider.setValue(~~(toolInfo.spacing * 100.0));\n        }\n\n        if (~~(toolInfo.scattering * 100.0) != scatteringSlider.value) {\n            scatteringSlider.setValue(~~(toolInfo.scattering * 100.0));\n        }\n\n        if (~~(toolInfo.smoothing * 100.0) != smoothingSlider.value) {\n            smoothingSlider.setValue(~~(toolInfo.smoothing * 100.0));\n        }\n    });\n\n    key(\"1,2,3,4,5,6,7,8,9,0\", function (event, handler) {\n        let shortcut = parseInt(handler.shortcut, 10);\n\n        if (shortcut == 0) {\n            shortcut = 10;\n        }\n\n        controller.setAlpha(Math.round((shortcut / 10) * 255));\n    });\n\n    key(\"{,[\", function () {\n        let size = controller.getBrushSize();\n\n        for (let i = BRUSH_SIZES.length - 1; i >= 0; i--) {\n            if (size > BRUSH_SIZES[i]) {\n                controller.setBrushSize(BRUSH_SIZES[i]);\n                break;\n            }\n        }\n    });\n\n    key(\"},]\", function () {\n        let size = controller.getBrushSize();\n\n        for (let i = 0; i < BRUSH_SIZES.length; i++) {\n            if (size < BRUSH_SIZES[i]) {\n                controller.setBrushSize(BRUSH_SIZES[i]);\n                break;\n            }\n        }\n    });\n}\n\nCPBrushPalette.CPBrushPreview = function (controller) {\n    let size = 16,\n        canvas = document.createElement(\"canvas\"),\n        canvasContext = canvas.getContext(\"2d\"),\n        mouseCaptured = false;\n\n    function paint() {\n        canvasContext.clearRect(0, 0, canvas.width, canvas.height);\n\n        canvasContext.beginPath();\n        canvasContext.arc(\n            canvas.width / 2,\n            canvas.height / 2,\n            (size / 2) * window.devicePixelRatio,\n            0,\n            Math.PI * 2\n        );\n        canvasContext.stroke();\n    }\n\n    function handlePointerDrag(e) {\n        const rect = canvas.getBoundingClientRect();\n        const pt = { x: e.clientX - rect.left, y: e.clientY - rect.top };\n        const x = pt.x - canvas.clientWidth / 2;\n        const y = pt.y - canvas.clientHeight / 2;\n        const newSize = Math.round(Math.sqrt(x * x + y * y) * 2);\n\n        let size = Math.max(1, Math.min(200, newSize));\n\n        paint();\n        controller.setBrushSize(size);\n    }\n\n    function handlePointerUp(e) {\n        if (mouseCaptured) {\n            mouseCaptured = false;\n            document.removeEventListener(\"pointerup\", handlePointerUp, {\n                capture: false,\n            });\n            document.removeEventListener(\"pointermove\", handlePointerDrag, {\n                capture: false,\n            });\n        }\n    }\n\n    canvas.addEventListener(\"pointerdown\", function (e) {\n        if (!mouseCaptured) {\n            mouseCaptured = true;\n\n            document.addEventListener(\"pointerup\", handlePointerUp, {\n                passive: true,\n                capture: false,\n            });\n            document.addEventListener(\"pointermove\", handlePointerDrag, {\n                passive: true,\n                capture: false,\n            });\n\n            handlePointerDrag(e);\n        }\n    });\n\n    this.getElement = function () {\n        return canvas;\n    };\n\n    controller.on(\"toolChange\", function (tool, toolInfo) {\n        if (toolInfo.size != size) {\n            size = toolInfo.size;\n            paint();\n        }\n    });\n\n    canvas.width = 64;\n    canvas.height = 64;\n\n    if (window.devicePixelRatio > 1) {\n        canvas.style.width = canvas.width + \"px\";\n        canvas.style.height = canvas.height + \"px\";\n\n        canvas.width = canvas.width * window.devicePixelRatio;\n        canvas.height = canvas.height * window.devicePixelRatio;\n    }\n\n    canvas.className = \"chickenpaint-brush-preview\";\n\n    canvasContext.strokeStyle = \"black\";\n    canvasContext.lineWidth = 1.0 * window.devicePixelRatio;\n\n    paint();\n};\n\nfunction CPGradientPanel(controller) {\n    const gradientPanel = document.createElement(\"div\"),\n        gradientPreview = new CPGradientPreview(controller),\n        gradientStartSwatch = new CPColorSwatch(\n            new CPColor(controller.getCurGradient()[0] & 0xffffff),\n            controller.getCurGradient()[0] >>> 24,\n            gradientPanel\n        ),\n        gradientEndSwatch = new CPColorSwatch(\n            new CPColor(controller.getCurGradient()[1] & 0xffffff),\n            controller.getCurGradient()[1] >>> 24,\n            gradientPanel\n        );\n\n    function updateGradient() {\n        const gradient = [\n            (gradientStartSwatch.getAlpha() << 24) |\n                gradientStartSwatch.getColorRgb(),\n            (gradientEndSwatch.getAlpha() << 24) |\n                gradientEndSwatch.getColorRgb(),\n        ];\n\n        controller.setCurGradient(gradient);\n    }\n\n    this.getElement = function () {\n        return gradientPanel;\n    };\n\n    gradientPanel.className = \"chickenpaint-gradient-panel\";\n    gradientPanel.style.display = \"none\";\n\n    gradientStartSwatch.on(\"colorChange\", updateGradient);\n    gradientStartSwatch.on(\"alphaChange\", updateGradient);\n    gradientEndSwatch.on(\"colorChange\", updateGradient);\n    gradientEndSwatch.on(\"alphaChange\", updateGradient);\n\n    let title, colorsGroup, colorGroup;\n\n    title = document.createElement(\"p\");\n    title.textContent = _(\"Gradient\");\n\n    gradientPanel.appendChild(title);\n    gradientPanel.appendChild(gradientPreview.getElement());\n\n    colorsGroup = document.createElement(\"div\");\n    colorsGroup.className = \"chickenpaint-gradient-colors\";\n\n    colorGroup = document.createElement(\"div\");\n    colorGroup.className = \"chickenpaint-gradient-start-color\";\n\n    colorGroup.appendChild(gradientStartSwatch.getElement());\n\n    colorsGroup.appendChild(colorGroup);\n\n    colorGroup = document.createElement(\"div\");\n    colorGroup.className = \"chickenpaint-gradient-end-color\";\n\n    colorGroup.appendChild(gradientEndSwatch.getElement());\n\n    colorsGroup.appendChild(colorGroup);\n\n    gradientPanel.appendChild(colorsGroup);\n}\n\nfunction CPTransformPanel(controller) {\n    const TRANSFORM_INTERPOLATION = { smooth: _(\"Smooth\"), sharp: _(\"Sharp\") };\n\n    let panel = document.createElement(\"div\"),\n        acceptButton = document.createElement(\"button\"),\n        rejectButton = document.createElement(\"button\"),\n        interpCombo = document.createElement(\"select\");\n\n    this.getElement = function () {\n        return panel;\n    };\n\n    panel.className = \"chickenpaint-transform-panel\";\n    panel.style.display = \"none\";\n\n    acceptButton.type = \"button\";\n    rejectButton.type = \"button\";\n\n    acceptButton.className = \"btn btn-primary btn-block\";\n    rejectButton.className = \"btn btn-light btn-block\";\n\n    acceptButton.textContent = _(\"Apply transform\");\n    rejectButton.textContent = _(\"Cancel\");\n\n    interpCombo.addEventListener(\"change\", function (e) {\n        controller.setTransformInterpolation(this.value);\n    });\n\n    interpCombo.className = \"form-control chickenpaint-transform-interpolation\";\n    fillCombobox(interpCombo, TRANSFORM_INTERPOLATION);\n\n    if (isCanvasInterpolationSupported()) {\n        let interpGroup = document.createElement(\"div\"),\n            interpLabel = document.createElement(\"label\");\n\n        interpLabel.textContent = _(\"Transform style\");\n\n        interpGroup.className = \"form-group\";\n        interpGroup.appendChild(interpLabel);\n        interpGroup.appendChild(interpCombo);\n\n        panel.appendChild(interpGroup);\n    }\n\n    let buttonGroup = document.createElement(\"div\");\n\n    buttonGroup.appendChild(acceptButton);\n    buttonGroup.appendChild(rejectButton);\n\n    buttonGroup.className = \"form-group\";\n\n    panel.appendChild(buttonGroup);\n\n    let { wrapper: maintainAspectGroup, checkbox: maintainAspectCheckbox } =\n        createBootstrapCheckbox(\n            \"chickenpaint-t-maintainAspectCheckbox\",\n            _(\"Constrain\"),\n            true\n        );\n\n    // パネルに追加\n    panel.appendChild(maintainAspectGroup);\n\n    acceptButton.addEventListener(\"click\", function (e) {\n        controller.actionPerformed({ action: \"CPTransformAccept\" });\n        e.preventDefault();\n    });\n\n    rejectButton.addEventListener(\"click\", function (e) {\n        controller.actionPerformed({ action: \"CPTransformReject\" });\n        e.preventDefault();\n    });\n\n    // ローカル変数から直接リスナーを追加\n    maintainAspectCheckbox.addEventListener(\"change\", () => {\n        maintainAspectCheckbox.blur(); // フォーカス解除\n        // console.log(\"チェック状態:\", maintainAspectCheckbox.checked);\n    });\n}\n// 選択パネル\nfunction CPSelectionPanel(controller) {\n    let panel = document.createElement(\"div\"),\n        formGroup = document.createElement(\"div\"),\n        label = document.createElement(\"label\"),\n        selectAllButton = document.createElement(\"button\"),\n        deselectButton = document.createElement(\"button\"),\n        transformButton = document.createElement(\"button\"); // 追加\n\n    this.getElement = function () {\n        return panel;\n    };\n\n    panel.className = \"chickenpaint-selection-panel\";\n    panel.style.display = \"none\"; // 初期非表示\n    formGroup.className = \"form-group\";\n\n    // ラベルのみ使用\n    label.textContent = _(\"Selection\"); // 「選択範囲」\n    formGroup.appendChild(label);\n\n    // 「すべて選択」ボタン\n    selectAllButton.type = \"button\";\n    selectAllButton.className = \"btn btn-light btn-block\";\n    selectAllButton.textContent = _(\"Select all\");\n    selectAllButton.addEventListener(\"click\", function (e) {\n        controller.actionPerformed({ action: \"CPSelectAll\" });\n        e.preventDefault();\n    });\n    formGroup.appendChild(selectAllButton);\n\n    // 「選択解除」ボタン\n    deselectButton.type = \"button\";\n    deselectButton.className = \"btn btn-light btn-block\";\n    deselectButton.textContent = _(\"Deselect\");\n    deselectButton.addEventListener(\"click\", function (e) {\n        controller.actionPerformed({ action: \"CPDeselectAll\" });\n        e.preventDefault();\n    });\n    formGroup.appendChild(deselectButton);\n\n    // 「変形」ボタン\n\n    transformButton.type = \"button\";\n    transformButton.className = \"btn btn-primary btn-block\";\n    transformButton.textContent = _(\"Transform\");\n    transformButton.addEventListener(\"click\", function (e) {\n        controller.actionPerformed({ action: \"CPTransform\" });\n        e.preventDefault();\n    });\n    formGroup.appendChild(transformButton);\n\n    panel.appendChild(formGroup);\n\n    //チェックボックスの作成\n    let { wrapper: maintainAspectGroup, checkbox: maintainAspectCheckbox } =\n        createBootstrapCheckbox(\n            \"chickenpaint-s-maintainAspectCheckbox\",\n            _(\"Constrain\"),\n            false\n        );\n\n    panel.appendChild(maintainAspectGroup);\n    // パネルに追加\n\n    // ローカル変数から直接リスナーを追加\n    maintainAspectCheckbox.addEventListener(\"change\", () => {\n        maintainAspectCheckbox.blur(); // フォーカス解除\n        // console.log(\"チェック状態:\", maintainAspectCheckbox.checked);\n    });\n}\n//Bootstrapのチェックボックスを作成\nfunction createBootstrapCheckbox(id, title, checked = false) {\n    // チェックボックス作成\n    const checkbox = document.createElement(\"input\");\n    checkbox.type = \"checkbox\";\n    checkbox.id = id;\n    checkbox.className = \"form-check-input\";\n    checkbox.checked = checked;\n\n    // フォーカス時の青枠を消す\n    checkbox.style.outline = \"none\";\n    checkbox.style.boxShadow = \"none\";\n    //タブキーでのフォーカスを無効にする\n    checkbox.tabIndex = -1;\n    // ラベル作成\n    const label = document.createElement(\"label\");\n    label.className = \"form-check-label\";\n    label.setAttribute(\"for\", id);\n    label.textContent = title;\n\n    // ラッパー div\n    const wrapper = document.createElement(\"div\");\n    wrapper.className = \"form-check\";\n    wrapper.appendChild(checkbox);\n    wrapper.appendChild(label);\n\n    // チェック状態取得用に input を返す場合は一緒に返す\n    return { wrapper, checkbox };\n}\n\nfunction CPPanPanel(controller) {\n    let panel = document.createElement(\"div\");\n    let formGroup = document.createElement(\"div\");\n    let label = document.createElement(\"label\");\n    let resetButton = document.createElement(\"button\");\n\n    let zoomSlider = new CPSlider(10, 800, false, true, 180, 3.13);\n    let rotationSlider = new CPSlider(-180, 180, false, false, 180);\n\n    panel.className = \"chickenpaint-pan-panel\";\n    panel.style.display = \"none\"; // 初期非表示\n    panel.appendChild(zoomSlider.getElement());\n\n    formGroup.className = \"form-group\";\n\n    // ラベルのみ使用\n    label.textContent = _(\"Zoom and Rotate\"); //「ズームと回転」\n    formGroup.appendChild(label);\n    formGroup.appendChild(label);\n    panel.appendChild(formGroup);\n    // 「すべて選択」ボタン\n    resetButton.type = \"button\";\n    resetButton.className = \"btn btn-primary btn-block\";\n    resetButton.style.outline = \"none\";\n    resetButton.style.boxShadow = \"none\";\n\n    resetButton.textContent = _(\"Reset View\");\n    resetButton.addEventListener(\"click\", function (e) {\n        controller.actionPerformed({ action: \"CPResetZoomAndRotation\" });\n        e.preventDefault();\n    });\n    formGroup.appendChild(resetButton);\n    panel.appendChild(formGroup);\n    function fillWithInitialValues() {\n        zoomSlider.setValue(controller.getZoom() * 100);\n        rotationSlider.setValue(controller.getRotationDegrees());\n    }\n\n    zoomSlider.title = function (value) {\n        return _(\"Zoom\") + \": \" + value + \"%\";\n    };\n    rotationSlider.title = function (value) {\n        return _(\"Rotation\") + \": \" + value + \"°\";\n    };\n\n    zoomSlider.on(\"valueChange\", function (value) {\n        controller.zoomOnCenter(value / 100);\n    });\n    rotationSlider.on(\"valueChange\", function (value) {\n        controller.setRotationDegrees(value);\n    });\n\n    panel.appendChild(zoomSlider.getElement());\n    panel.appendChild(rotationSlider.getElement());\n\n    this.getElement = function () {\n        return panel;\n    };\n\n    fillWithInitialValues();\n\n    document.addEventListener(\n        \"wheel\",\n        (e) => {\n            e.preventDefault(); // これでスクロール抑制できる\n            updateSliderDebounced();\n        },\n        { passive: false }\n    );\n    // デバウンス関数の定義\n    function debounce(func, wait) {\n        let timeout;\n        return function (...args) {\n            clearTimeout(timeout);\n            timeout = setTimeout(() => func.apply(this, args), wait);\n        };\n    }\n    //スライダーを更新\n    const updateSlider = () => {\n        zoomSlider.setValue(controller.getZoom() * 100);\n        rotationSlider.setValue(controller.getRotationDegrees());\n    };\n\n    // デバウンス関数を使用して、連続したイベントをまとめて処理\n    const updateSliderDebounced = debounce(updateSlider, 12);\n\n    const isZoomRotateEnabled = (e) => {\n        return (\n            controller.isPanOrRotateMode() ||\n            key.isPressed(\"space\") ||\n            key.isPressed(\"r\") ||\n            key.isPressed(\"z\")\n        );\n    };\n\n    let isPointerDown = false;\n\n    document.addEventListener(\"pointerdown\", (e) => {\n        if (!isZoomRotateEnabled(e)) return;\n        isPointerDown = true;\n        updateSliderDebounced();\n    });\n\n    document.addEventListener(\"pointermove\", (e) => {\n        if (!isPointerDown) return;\n        if (!isZoomRotateEnabled(e)) return;\n        updateSliderDebounced();\n    });\n\n    document.addEventListener(\"pointerup\", (e) => {\n        isPointerDown = false;\n        if (!isZoomRotateEnabled(e)) return;\n        updateSliderDebounced();\n    });\n\n    // キーボードでのサイズ変更\n    key(\"=,-,ctrl+0,alt+0,r,z,space,enter\", function () {\n        if (isPointerDown) return; // ポインターダウンの時は更新しない\n        updateSliderDebounced();\n    });\n\n    //パンや回転ツールのアイコンがクリックされたときにスライダーを更新\n    document.addEventListener(\"click\", (e) => {\n        if (\n            e.target instanceof HTMLElement &&\n            e.target.classList.contains(\"chickenpaint-toolbar-button-icon\")\n        ) {\n            updateSliderDebounced();\n        }\n    });\n}\n","/*\n    ChickenPaint\n    \n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\n    by Nicholas Sherlock / Chicken Smoothie.\n    \n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n    ChickenPaint is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ChickenPaint is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport EventEmitter from \"wolfy87-eventemitter\";\n\nexport default function CPCheckbox(state, title) {\n    var\n        canvas = document.createElement('canvas'),\n        canvasContext = canvas.getContext('2d'),\n        \n        that = this;\n    \n    this.state = state || false;\n    \n    function paint() {\n        var \n            width = canvas.width,\n            height = canvas.height;\n\n        canvasContext.clearRect(0, 0, width, height);\n        \n        canvasContext.beginPath();\n        canvasContext.arc(width / 2 + 1, width / 2 + 1, Math.max(width / 2, 1) - 2, 0, Math.PI * 2);\n        \n        if (that.state) {\n            canvasContext.fill();\n        } else {\n            canvasContext.stroke();\n        }\n    }\n\n    this.setValue = function(b) {\n        if (this.state != b) {\n            this.state = b;\n            \n            this.emitEvent('valueChange', [b]);\n            \n            paint();\n        }\n    };\n    \n    this.getElement = function() {\n        return canvas;\n    };\n    \n    canvas.addEventListener(\"mousedown\", function(e) {\n        that.setValue(!that.state);\n    });\n    \n    canvas.title = title || \"\";\n    canvas.className = 'chickenpaint-checkbox';\n    \n    canvas.width = 20;\n    canvas.height = 20;\n    \n    canvas.fillStyle = 'black';\n    canvas.strokeStyle = 'black';\n    \n    paint();\n};\n\nCPCheckbox.prototype = Object.create(EventEmitter.prototype);\nCPCheckbox.prototype.constructor = CPCheckbox;","/*\n    ChickenPaint\n\n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\n    by Nicholas Sherlock / Chicken Smoothie.\n\n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n    ChickenPaint is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ChickenPaint is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport * as bootstrap from 'bootstrap/dist/js/bootstrap.bundle.min.js';\nimport {_} from \"../languages/lang.js\";\nimport CPColor from '../util/CPColor.js';\n\nimport CPSlider from './CPSlider.js';\nimport CPColorSelect from './CPColorSelect.js';\nimport CPColorSlider from './CPColorSlider.js';\n\nimport EventEmitter from \"wolfy87-eventemitter\";\n\nexport default function CPColorSwatch(initialColor, initialAlpha, containerElement) {\n    let\n        that = this,\n        color = new CPColor(0),\n        alpha = 255,\n\n        element = document.createElement(\"div\");\n\n    function padLeft(string, padding, len) {\n        while (string.length < len) {\n            string = padding + string;\n        }\n        return string;\n    }\n\n    function paint() {\n        element.style.backgroundColor = \"#\" + padLeft(Number(color.getRgb()).toString(16), \"0\", 6);\n    }\n\n    this.getElement = function() {\n        return element;\n    };\n\n    this.setColor = function(_color) {\n        if (!color.isEqual(_color)) {\n            color.copyFrom(_color);\n\n            paint();\n\n            this.emitEvent(\"colorChange\", [color]);\n        }\n    };\n\n    this.setAlpha = function(_alpha) {\n        if (_alpha != alpha) {\n            alpha = _alpha;\n\n            paint();\n\n            this.emitEvent(\"alphaChange\", [alpha]);\n        }\n    };\n\n    this.getColorRgb = function() {\n        return color.getRgb();\n    };\n\n    this.getAlpha = function() {\n        return alpha;\n    };\n\n    this.setCurColor = this.setColor;\n\n    function buildColorEditPanel() {\n        const\n            panel = document.createElement(\"div\"),\n            group = document.createElement(\"div\"),\n            select = new CPColorSelect(that, color),\n            slider = new CPColorSlider(that, select, color.getHue()),\n            alphaSlider = new CPSlider(0, 255);\n\n        panel.className = \"chickenpaint-color-pick-panel\";\n\n        group.className = \"chickenpaint-colorpicker-top\";\n\n        group.appendChild(select.getElement());\n        group.appendChild(slider.getElement());\n\n        panel.appendChild(group);\n\n        alphaSlider.value = alpha;\n        alphaSlider.title = function(alpha) {\n            return _(\"Opacity: \") + alpha;\n        };\n        alphaSlider.on(\"valueChange\", function(alpha) {\n            that.setAlpha(alpha);\n        });\n\n        panel.appendChild(alphaSlider.getElement());\n\n        setTimeout(function() {\n            alphaSlider.resize();\n        }, 0);\n\n        return panel;\n    }\n\n    element.className = 'chickenpaint-color-pick-swatch';\n\n\n    if (initialColor) {\n        color.copyFrom(initialColor);\n    }\n\n    if (initialAlpha) {\n        alpha = initialAlpha;\n    }\n\tconst bootstrapPopover = new bootstrap.Popover(element, {\n\t\thtml: true,\n\t\tcontent: function () {\n\t\t\twindow.addEventListener(\"mousedown\", closeClickHandler);\n\t\t\treturn buildColorEditPanel();\n\t\t},\n\t\ttrigger: \"manual\",\n\t\tplacement: \"bottom\",\n\t\tcontainer: containerElement || false\n\t});\n\t\n\t// Clicking outside the popover will dismiss it\n\tconst closeClickHandler = function (e) {\n\t\tconst colorpicker=e.target;\n\t\tconst isColorPicker = \n\t\tcolorpicker.closest('.popover-body')\n\t\t|| colorpicker.classList.contains('chickenpaint-color-pick-panel')\n\t\t|| colorpicker.classList.contains('chickenpaint-colorpicker-select')\n\t\t|| colorpicker.classList.contains('chickenpaint-colorpicker-slider');\n\n\t\te.preventDefault();\n\t\t// console.log(\"closeClickHandler\",e);\n\t\tif(isColorPicker){//カラーピッカーをクリックした時は表示したままにする\n\t\t\treturn;\n\t\t}\n\t\tbootstrapPopover.hide();\n\t}\n\n\telement.addEventListener(\"click\", function (e) {\n\t\te.preventDefault();\n\t\tbootstrapPopover.toggle();\n\t});\n\n\telement.addEventListener(\"hidden.bs.popover\", function () {\n\t\twindow.removeEventListener(\"mousedown\", closeClickHandler);\n\t});\n\n\tpaint();\n}\nCPColorSwatch.prototype = Object.create(EventEmitter.prototype);\nCPColorSwatch.prototype.constructor = CPColorSwatch;","/*\n    ChickenPaint\n    \n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\n    by Nicholas Sherlock / Chicken Smoothie.\n    \n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n    ChickenPaint is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ChickenPaint is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport EventEmitter from \"wolfy87-eventemitter\";\nimport { _ } from \"../languages/lang.js\";\n\n/**\n * A simple slider control.\n */\nexport default function CPSlider(\n    minValue,\n    maxValue,\n    centerMode,\n    expMode,\n    defaultWidth = 150,\n    expModeFactor = 2.5 //低い値の時にスライダーの動作を細やかにする係数\n) {\n    const PRECISE_DRAG_SCALE = 4,\n        DRAG_MODE_IDLE = 0,\n        DRAG_MODE_NORMAL = 1,\n        DRAG_MODE_PRECISE = 2;\n\n    let canvas = document.createElement(\"canvas\"),\n        canvasContext = canvas.getContext(\"2d\"),\n        valueRange = maxValue - minValue,\n        dragMode = DRAG_MODE_IDLE,\n        dragPreciseX,\n        doneInitialPaint = false,\n        that = this;\n\n    this.value = undefined;\n\n    /**\n     * Either a string to draw on the slider, or a function(value) which receives the current value of the slider and\n     * should return the string to be painted to the slider.\n     *\n     * @name CPSlider#title\n     * @default \"\"\n     */\n    this.title = \"\";\n\n    centerMode = centerMode || false;\n\n    function paint() {\n        let width = canvas.width || defaultWidth;\n        let height = canvas.height;\n        let title =\n            typeof that.title === \"string\"\n                ? _(that.title)\n                : that.title(that.value);\n        let textX = 3 * window.devicePixelRatio;\n        let textY = canvas.height * 0.75;\n\n        if (centerMode) {\n            canvasContext.save();\n\n            canvasContext.fillStyle = \"white\";\n\n            canvasContext.fillRect(0, 0, width, height);\n\n            canvasContext.fillStyle = \"black\";\n\n            canvasContext.fillText(title, textX, textY);\n            canvasContext.beginPath();\n\n            // if (that.value >= valueRange / 2) {\n            //     canvasContext.rect(width / 2, 0, (that.value - valueRange / 2) * width / valueRange, height);\n            // } else {\n            //     canvasContext.rect(that.value * width / valueRange, 0, (valueRange / 2 - that.value) * width / valueRange, height);\n            // }\n            if (that.value >= 0) {\n                // 正の値は中央→右へ\n                canvasContext.rect(\n                    width / 2,\n                    0,\n                    (that.value / maxValue) * (width / 2),\n                    height\n                );\n            } else {\n                // 負の値は中央→左へ\n                canvasContext.rect(\n                    width / 2 + (that.value / Math.abs(minValue)) * (width / 2),\n                    0,\n                    -(that.value / Math.abs(minValue)) * (width / 2),\n                    height\n                );\n            }\n            canvasContext.fill();\n            canvasContext.clip();\n\n            canvasContext.fillStyle = \"white\";\n            canvasContext.fillText(title, textX, textY);\n\n            canvasContext.restore();\n        } else {\n            let barProp = (that.value - minValue) / valueRange,\n                barWidth;\n\n            if (expMode) {\n                barProp = Math.pow(barProp, 1 / expModeFactor);\n            }\n\n            barWidth = barProp * width;\n\n            canvasContext.save();\n            canvasContext.save();\n\n            canvasContext.fillStyle = \"black\";\n\n            canvasContext.beginPath();\n            canvasContext.rect(0, 0, barWidth, height);\n            canvasContext.fill();\n\n            canvasContext.clip();\n\n            canvasContext.fillStyle = \"white\";\n            canvasContext.fillText(title, textX, textY);\n\n            // Remove the clip region\n            canvasContext.restore();\n\n            canvasContext.fillStyle = \"white\";\n\n            canvasContext.beginPath();\n            canvasContext.rect(barWidth, 0, width, height);\n            canvasContext.fill();\n\n            canvasContext.clip();\n\n            canvasContext.fillStyle = \"black\";\n            canvasContext.fillText(title, textX, textY);\n\n            canvasContext.restore();\n        }\n    }\n\n    function mouseSelect(e) {\n        let width = canvas.clientWidth;\n        let left = canvas.getBoundingClientRect().left + window.scrollX;\n        let proportion = (e.pageX - left) / width;\n\n        if (expMode) {\n            // Give the user finer control over the low values\n            proportion = Math.pow(Math.max(proportion, 0.0), expModeFactor);\n        }\n\n        that.setValue(proportion * valueRange + minValue);\n    }\n\n    function pointerDragged(e) {\n        switch (dragMode) {\n            case DRAG_MODE_NORMAL:\n                return mouseSelect(e);\n            case DRAG_MODE_PRECISE:\n                let title = that.title();\n                //ブラシサイズと不透明度以外は細やかなスライダーの動作をしない\n                if (\n                    !(\n                        title.includes(_(\"Brush size\")) ||\n                        title.includes(_(\"Opacity\"))\n                    )\n                ) {\n                    return mouseSelect(e);\n                }\n                let diff = (e.pageX - dragPreciseX) / PRECISE_DRAG_SCALE;\n                if (diff !== 0) {\n                    let unrounded = that.value + diff;\n                    let rounded = Math.floor(unrounded);\n\n                    that.setValue(rounded);\n\n                    /* Tweak the \"old mouseX\" position such that the fractional part of the value we were unable to set\n                     * will be accumulated\n                     */\n                    dragPreciseX =\n                        e.pageX - (unrounded - rounded) * PRECISE_DRAG_SCALE;\n                }\n                break;\n        }\n    }\n\n    canvas.addEventListener(\"pointerup\", (e) => {\n        if (dragMode === DRAG_MODE_IDLE) {\n            canvas.releasePointerCapture(e.pointerId);\n            return canvas.removeEventListener(\"pointermove\", pointerDragged);\n        }\n        if (dragMode !== DRAG_MODE_IDLE) {\n            switch (dragMode) {\n                case DRAG_MODE_NORMAL:\n                    if (e.button === 0 && !e.shiftKey) {\n                        dragMode = DRAG_MODE_IDLE;\n                    }\n                    break;\n                case DRAG_MODE_PRECISE:\n                    if (e.button == 2 || (e.button === 0 && e.shiftKey)) {\n                        dragMode = DRAG_MODE_IDLE;\n                    }\n                    break;\n                default:\n                    return;\n            }\n        }\n        canvas.releasePointerCapture(e.pointerId);\n        return canvas.removeEventListener(\"pointermove\", pointerDragged);\n    });\n\n    this.setValue = function (_value) {\n        _value = ~~Math.max(minValue, Math.min(maxValue, _value));\n\n        if (this.value != _value) {\n            this.value = _value;\n\n            // The event listeners might like to update our title property at this point to reflect the new value\n            this.emitEvent(\"valueChange\", [this.value]);\n\n            if (doneInitialPaint) {\n                paint();\n            } else {\n                // We don't bother to do our canvas dimensioning until we're supplied with an initial value\n                doneInitialPaint = true;\n                this.resize();\n            }\n        }\n    };\n\n    /**\n     * Get the DOM element for the slider component.\n     */\n    this.getElement = function () {\n        return canvas;\n    };\n\n    this.resize = function () {\n        canvas.width = canvas.clientWidth || defaultWidth;\n        canvas.height = canvas.clientHeight || 20;\n\n        if (window.devicePixelRatio > 1) {\n            // Assume our width is set to 100% or similar, so we only need to the fix the height\n            canvas.style.height = canvas.height + \"px\";\n\n            canvas.width = canvas.width * window.devicePixelRatio;\n            canvas.height = canvas.height * window.devicePixelRatio;\n        }\n\n        canvasContext.font = canvas.height * 0.47 + \"pt sans-serif\";\n\n        paint();\n    };\n\n    canvas.addEventListener(\"pointerdown\", function (e) {\n        if (dragMode === DRAG_MODE_IDLE) {\n            if (e.button === 2 || (e.button === 0 && e.shiftKey)) {\n                dragMode = DRAG_MODE_PRECISE;\n                dragPreciseX = e.pageX;\n            } else {\n                dragMode = DRAG_MODE_NORMAL;\n                mouseSelect(e);\n            }\n\n            canvas.setPointerCapture(e.pointerId);\n            canvas.addEventListener(\"pointermove\", pointerDragged);\n        }\n    });\n\n    canvas.addEventListener(\"contextmenu\", function (e) {\n        e.preventDefault();\n    });\n\n    canvas.setAttribute(\"touch-action\", \"none\");\n    canvas.className = \"chickenpaint-slider\";\n\n    if (!(\"devicePixelRatio\" in window)) {\n        // Old browsers\n        window.devicePixelRatio = 1.0;\n    }\n}\n\nCPSlider.prototype = Object.create(EventEmitter.prototype);\nCPSlider.prototype.constructor = CPSlider;\n","/*\n    ChickenPaint\n    \n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\n    by Nicholas Sherlock / Chicken Smoothie.\n    \n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n    ChickenPaint is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ChickenPaint is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport * as bootstrap from \"bootstrap/dist/js/bootstrap.bundle.min.js\";\n\nimport CPPalette from \"./CPPalette.js\";\nimport CPBlend from \"../engine/CPBlend.js\";\nimport CPSlider from \"./CPSlider.js\";\nimport CPLayerGroup from \"../engine/CPLayerGroup.js\";\nimport CPLayer from \"../engine/CPLayer.js\";\nimport CPImageLayer from \"../engine/CPImageLayer.js\";\nimport { _ } from \"../languages/lang.js\";\nfunction absorbTouch(e) {\n    e.preventDefault();\n    e.stopPropagation();\n}\n\nfunction createFontAwesomeIcon(iconName) {\n    let icon = document.createElement(\"span\");\n\n    icon.className = \"fa \" + iconName;\n\n    return icon;\n}\n\nfunction createChickenPaintIcon(iconName) {\n    let icon = document.createElement(\"span\");\n\n    icon.className = \"chickenpaint-icon chickenpaint-icon-\" + iconName;\n\n    return icon;\n}\n\n/**\n *\n * @param {HTMLInputElement} checkbox - Must have a unique ID set\n * @param {string} title\n *\n * @returns {HTMLElement}\n */\nfunction wrapBootstrapCheckbox(checkbox, title) {\n    let div = document.createElement(\"div\"),\n        label = document.createElement(\"label\");\n\n    label.tabIndex = -1;\n    checkbox.tabIndex = -1;\n\n    div.className = \"form-check\";\n\n    checkbox.className = \"form-check-input\";\n\n    label.className = \"form-check-label\";\n    label.setAttribute(\"for\", checkbox.id);\n\n    label.appendChild(checkbox);\n    label.appendChild(document.createTextNode(title));\n\n    div.appendChild(checkbox);\n    div.appendChild(label);\n\n    return div;\n}\n\nfunction computeLayerPredicates(layer, isEditingMask) {\n    return {\n        \"image-layer\": layer instanceof CPImageLayer,\n        \"layer-group\": layer instanceof CPLayerGroup,\n\n        \"clipping-mask\": layer instanceof CPImageLayer && layer.clip,\n        \"no-clipping-mask\": layer instanceof CPImageLayer && !layer.clip,\n        \"no-clipping-mask-or-is-group\":\n            !(layer instanceof CPImageLayer) || !layer.clip,\n\n        mask: layer && layer.mask !== null,\n        \"no-mask\": layer && layer.mask === null,\n\n        \"mask-enabled\": layer && layer.mask !== null && layer.maskVisible,\n        \"mask-disabled\": layer && layer.mask !== null && !layer.maskVisible,\n        isNotEditingMask: layer && !isEditingMask,\n        isEditingMask: layer && layer.mask !== null && isEditingMask,\n    };\n}\n\nexport default function CPLayersPalette(controller) {\n    CPPalette.call(this, controller, \"layers\", \"Layers\", {\n        resizeHorz: true,\n        resizeVert: true,\n    });\n\n    const NOTIFICATION_HIDE_DELAY_MS_PER_CHAR = 70,\n        NOTIFICATION_HIDE_DELAY_MIN = 3000,\n        BUTTON_PRIMARY = 0,\n        BUTTON_WHEEL = 1,\n        BUTTON_SECONDARY = 2;\n\n    let palette = this,\n        artwork = controller.getArtwork(),\n        /**\n         * An array of layers in display order, with the layers inside collapsed groups not present.\n         *\n         * @type {CPLayer[]}\n         */\n        linearizedLayers = null,\n        body = this.getBodyElement(),\n        positionRoot = this.getElement(),\n        // This element will be responsible for positioning the BS dropdown\n        dropdownParent = positionRoot,\n        layerWidget = new CPLayerWidget(),\n        alphaSlider = new CPSlider(0, 100, false, false, 208),\n        blendCombo = document.createElement(\"select\"),\n        renameField = new CPRenameField(),\n        cbSampleAllLayers = document.createElement(\"input\"),\n        cbLockAlpha = document.createElement(\"input\"),\n        notificationDismissTimer = false,\n        layerActionButtons;\n\n    /**\n     *\n     * @param {number} displayIndex\n     * @returns {CPLayer}\n     */\n    function getLayerFromDisplayIndex(displayIndex) {\n        return linearizedLayers[displayIndex];\n    }\n\n    /**\n     *\n     * @param {CPLayer} layer\n     * @returns {number}\n     */\n    function getDisplayIndexFromLayer(layer) {\n        return linearizedLayers.indexOf(layer);\n    }\n\n    function CPLayerWidget() {\n        const LAYER_DRAG_START_THRESHOLD = 5, // Pixels we have to move a layer before it shows as \"dragging\"\n            LAYER_IN_GROUP_INDENT = 16,\n            CLASSNAME_LAYER_ACTIVE = \"active\",\n            CLASSNAME_LAYER_VISIBLE = \"chickenpaint-layer-visible\",\n            CLASSNAME_LAYER_HIDDEN = \"chickenpaint-layer-hidden\",\n            CLASSNAME_LAYER_GROUP_EXPANDED =\n                \"chickenpaint-layer-group-expanded\",\n            CLASSNAME_LAYER_GROUP_COLLAPSED =\n                \"chickenpaint-layer-group-collapsed\",\n            CLASSNAME_LAYER_GROUP_TOGGLE = \"chickenpaint-layer-group-toggle\",\n            CLASSNAME_LAYER_IMAGE_THUMBNAIL =\n                \"chickenpaint-layer-image-thumbnail\",\n            CLASSNAME_LAYER_MASK_THUMBNAIL =\n                \"chickenpaint-layer-mask-thumbnail\",\n            CLASSNAME_LAYER_THUMBNAIL = \"chickenpaint-layer-thumbnail\",\n            DRAG_STATE_IDLE = 0,\n            DRAG_STATE_PRE_DRAG = 1, // If we've put our cursor down but we're not sure if we're dragging or clicking yet\n            DRAG_STATE_DRAGGING = 2, // When we're really dragging\n            DRAG_STATE_PRE_PAN = 3, // Pen/touch is down, we could either click, drag or pan\n            DRAG_STATE_PANNING = 4,\n            LONG_PRESS_INTERVAL = 800;\n\n        let drag = {\n                /**\n                 *\n                 * @type {number}\n                 */\n                state: DRAG_STATE_IDLE,\n\n                /**\n                 * The image layer currently being dragged, or null if no drag is in progress.\n                 *\n                 * @type {?CPLayer}\n                 */\n                layer: null,\n\n                /**\n                 * The element of the layer being dragged\n                 *\n                 * @type {HTMLElement}\n                 */\n                layerElem: null,\n\n                /**\n                 * @type {number}\n                 */\n                dragX: 0,\n\n                /**\n                 * @type {number}\n                 */\n                dragY: 0,\n\n                /**\n                 * @type {number}\n                 */\n                initialScrollTop: 0,\n\n                dropTarget: null,\n                dropBetweenMarkerElem: null,\n                frameElem: null,\n            },\n            widgetContainer = document.createElement(\"div\"),\n            layerContainer = document.createElement(\"div\"),\n            scrollContainer = layerContainer,\n            //ドロップダウンメニュー関連項目のコメントアウト\n            // dropdownLayerMenu = createLayerDropdownMenu(),\n            // dropdownMousePos = {x: 0, y: 0},\n\n            /**\n             * @type {number} Rotation of image in 90 degree units\n             */\n            imageRotation = 0,\n            /**\n             * The layer we right-clicked on to open the dropdown\n             *\n             * @type {CPLayer}\n             */\n            dropdownLayer = null,\n            /**\n             * True if we right-clicked on the mask of the layer for the dropdown.\n             * @type {boolean}\n             */\n            dropdownOnMask = false,\n            longPressTimer = null;\n\n        /**\n         * Get the element that represents the layer with the given display index.\n         *\n         * @param {number} displayIndex\n         * @returns {HTMLElement}\n         */\n        function getElemFromDisplayIndex(displayIndex) {\n            let elems = layerContainer.querySelectorAll(\".chickenpaint-layer\");\n\n            return elems[elems.length - 1 - displayIndex];\n        }\n\n        function getDisplayIndexFromElem(elem) {\n            if(!elem){\n                return -1;\n            }\n            let layer = elem.closest(\".chickenpaint-layer\");\n\n            if (layer) {\n                let elems = Array.from(\n                    layerContainer.querySelectorAll(\".chickenpaint-layer\")\n                );\n                return elems.length - 1 - elems.indexOf(layer);\n            } else {\n                return -1;\n            }\n        }\n\n        /**\n         * @typedef {Object} CPDropTarget\n         *\n         * @property {number} displayIndex - The index of the layer to insert near\n         * @property {CPLayer} layer - The layer to insert near\n         * @property {string} direction - \"under\", \"over\" or \"inside\", the direction to insert relative to the target\n         */\n\n        /**\n         * Decides which drop target we should offer for the given mouse position.\n         *\n         * Returns null if no drop should be offered at the given position, otherwise returns an object with details\n         * on the drop.\n         *\n         * @param {number} clientX\n         * @param {number} clientY\n         * @returns {?CPDropTarget}\n         */\n        function getDropTargetFromClientPos(clientX, clientY) {\n            let layerElems = layerContainer.querySelectorAll(\n                    \".chickenpaint-layer\"\n                ),\n                target = {\n                    layer: linearizedLayers[linearizedLayers.length - 1],\n                    displayIndex: linearizedLayers.length - 1,\n                    direction: \"over\",\n                };\n\n            for (\n                let displayIndex = 0;\n                displayIndex < layerElems.length;\n                displayIndex++\n            ) {\n                let targetElem =\n                        layerElems[layerElems.length - 1 - displayIndex],\n                    rect = targetElem.getBoundingClientRect();\n\n                if (displayIndex === 0 && clientY > rect.bottom) {\n                    let lastLayer = artwork.getLayersRoot().layers[0];\n                    target = {\n                        layer: lastLayer,\n                        displayIndex: getDisplayIndexFromLayer(lastLayer),\n                        direction: \"under\",\n                    };\n                    break;\n                } else if (clientY >= rect.top) {\n                    let targetLayer = getLayerFromDisplayIndex(displayIndex),\n                        targetHeight = rect.bottom - rect.top;\n                    target = { layer: targetLayer, displayIndex: displayIndex };\n\n                    if (targetLayer instanceof CPLayerGroup) {\n                        if (clientY >= rect.top + targetHeight * 0.75) {\n                            if (\n                                targetLayer.expanded &&\n                                targetLayer.layers.length > 0\n                            ) {\n                                target.layer =\n                                    targetLayer.layers[\n                                        targetLayer.layers.length - 1\n                                    ];\n                                target.displayIndex--;\n                                target.direction = \"over\";\n                            } else {\n                                target.direction = \"under\";\n                            }\n                        } else if (clientY >= rect.top + targetHeight * 0.25) {\n                            if (\n                                targetLayer.expanded &&\n                                targetLayer.layers.length > 0\n                            ) {\n                                target.layer =\n                                    targetLayer.layers[\n                                        targetLayer.layers.length - 1\n                                    ];\n                                target.displayIndex--;\n                                target.direction = \"over\";\n                            } else {\n                                target.direction = \"inside\";\n                            }\n                        } else {\n                            target.direction = \"over\";\n                        }\n                    } else {\n                        target.direction =\n                            clientY >= rect.top + targetHeight * 0.5\n                                ? \"under\"\n                                : \"over\";\n                    }\n                    break;\n                }\n            }\n\n            /*\n             * If we're dropping into the same container, make sure we don't offer to drop the layer back to the\n             * same position it was already in.\n             */\n            if (\n                target.layer.parent === drag.layer.parent &&\n                (target.direction === \"over\" || target.direction === \"under\")\n            ) {\n                let parentGroup = target.layer.parent,\n                    targetIndex = parentGroup.indexOf(target.layer);\n\n                if (\n                    (target.direction === \"over\" &&\n                        parentGroup.layers[targetIndex + 1] === drag.layer) ||\n                    (target.direction === \"under\" &&\n                        parentGroup.layers[targetIndex - 1] === drag.layer) ||\n                    target.layer === drag.layer\n                ) {\n                    return null;\n                }\n            }\n\n            /*\n             * Make sure we don't try to drop a group as a child of itself, no group-ception!\n             */\n            if (\n                drag.layer instanceof CPLayerGroup &&\n                ((target.layer === drag.layer &&\n                    target.direction === \"inside\") ||\n                    target.layer.hasAncestor(drag.layer))\n            ) {\n                return null;\n            }\n\n            return target;\n        }\n\n        function updateDropMarker() {\n            if (drag.state === DRAG_STATE_DRAGGING) {\n                let positionRootBounds = positionRoot.getBoundingClientRect(),\n                    hideBetweenMarker = true,\n                    hideIntoMarker = true;\n\n                drag.dropTarget = getDropTargetFromClientPos(\n                    drag.dragX,\n                    drag.dragY\n                );\n\n                if (drag.dropTarget) {\n                    let targetElem = getElemFromDisplayIndex(\n                        drag.dropTarget.displayIndex\n                    );\n\n                    switch (drag.dropTarget.direction) {\n                        case \"over\":\n                        case \"under\":\n                            layerContainer.appendChild(\n                                drag.dropBetweenMarkerElem\n                            );\n\n                            let markerDepth =\n                                    drag.dropTarget.layer.getDepth() - 1,\n                                markerLeft,\n                                layerBottom;\n\n                            // Position the marker in the correct position between the layers, and indent it to match the layer\n                            let layerRect = targetElem.getBoundingClientRect();\n\n                            // Are we dropping below the layers in an expanded group? Extend the rect to enclose them\n                            if (\n                                drag.dropTarget.direction === \"under\" &&\n                                drag.dropTarget.layer instanceof CPLayerGroup &&\n                                drag.dropTarget.layer.expanded\n                            ) {\n                                // Find the display index after this group\n                                let childIndex;\n\n                                for (\n                                    childIndex =\n                                        drag.dropTarget.displayIndex - 1;\n                                    childIndex >= 0;\n                                    childIndex--\n                                ) {\n                                    if (\n                                        !linearizedLayers[\n                                            childIndex\n                                        ].hasAncestor(drag.dropTarget.layer)\n                                    ) {\n                                        break;\n                                    }\n                                }\n\n                                layerBottom = getElemFromDisplayIndex(\n                                    childIndex + 1\n                                ).getBoundingClientRect().bottom;\n                            } else {\n                                layerBottom = layerRect.bottom;\n                            }\n\n                            markerLeft =\n                                layerRect.left -\n                                positionRootBounds.left +\n                                (markerDepth > 0\n                                    ? 26 + LAYER_IN_GROUP_INDENT * markerDepth\n                                    : 0);\n\n                            drag.dropBetweenMarkerElem.style.left =\n                                markerLeft + \"px\";\n                            drag.dropBetweenMarkerElem.style.width =\n                                layerRect.right -\n                                positionRootBounds.left -\n                                markerLeft +\n                                \"px\";\n                            drag.dropBetweenMarkerElem.style.top =\n                                (drag.dropTarget.direction === \"over\"\n                                    ? layerRect.top - 1\n                                    : layerBottom + 1) -\n                                positionRootBounds.top +\n                                \"px\";\n\n                            layerContainer\n                                .querySelectorAll(\n                                    \".chickenpaint-layer-drop-target\"\n                                )\n                                .forEach((el) =>\n                                    el.classList.remove(\n                                        \"chickenpaint-layer-drop-target\"\n                                    )\n                                );\n\n                            hideBetweenMarker = false;\n                            break;\n\n                        case \"inside\":\n                            let layerElems = layerContainer.querySelectorAll(\n                                \".chickenpaint-layer\"\n                            );\n\n                            layerElems.forEach((elem, index) => {\n                                elem.classList.toggle(\n                                    \"chickenpaint-layer-drop-target\",\n                                    layerElems.length - 1 - index ===\n                                        drag.dropTarget.displayIndex\n                                );\n                            });\n\n                            hideIntoMarker = false;\n                            break;\n                    }\n                }\n\n                if (hideIntoMarker) {\n                    layerContainer\n                        .querySelectorAll(\".chickenpaint-layer-drop-target\")\n                        .forEach((el) =>\n                            el.classList.remove(\n                                \"chickenpaint-layer-drop-target\"\n                            )\n                        );\n                }\n\n                if (hideBetweenMarker) {\n                    drag.dropBetweenMarkerElem?.remove();\n                }\n\n                drag.frameElem.style.top =\n                    drag.dragY -\n                    positionRootBounds.top -\n                    parseInt(drag.frameElem.style.height, 10) / 2 +\n                    \"px\";\n            } else {\n                drag.dropBetweenMarkerElem?.remove();\n                drag.frameElem?.remove();\n            }\n        }\n\n        function createImageThumb(layer) {\n            let thumbnail = layer.getImageThumbnail(),\n                thumbCanvas = thumbnail.getAsCanvas(imageRotation);\n\n            thumbCanvas.title = _(\"Image\");\n            thumbCanvas.className =\n                CLASSNAME_LAYER_THUMBNAIL +\n                \" \" +\n                CLASSNAME_LAYER_IMAGE_THUMBNAIL;\n\n            // Thumbnails are actually displayed at 25px high, set the display width appropriately for the aspect ratio\n            thumbCanvas.style.maxWidth =\n                (thumbCanvas.width / thumbCanvas.height) * 25 + \"px\";\n\n            if (layer == artwork.getActiveLayer() && !artwork.isEditingMask()) {\n                thumbCanvas.className += \" active\";\n            }\n\n            return thumbCanvas;\n        }\n\n        function drawRedX(canvas) {\n            const X_INSET = 5,\n                Y_INSET = 5,\n                X_LINE_THICKNESS = 3,\n                context = canvas.getContext(\"2d\");\n\n            context.strokeStyle = \"red\";\n            context.lineWidth = X_LINE_THICKNESS;\n\n            context.moveTo(X_INSET, Y_INSET);\n            context.lineTo(canvas.width - X_INSET, canvas.height - Y_INSET);\n\n            context.moveTo(canvas.width - X_INSET, Y_INSET);\n            context.lineTo(X_INSET, canvas.height - Y_INSET);\n\n            context.stroke();\n        }\n\n        function createMaskThumb(layer) {\n            let thumbnail = layer.getMaskThumbnail(),\n                thumbCanvas = thumbnail.getAsCanvas(imageRotation);\n\n            thumbCanvas.title = _(\"Layer mask\");\n            thumbCanvas.className =\n                CLASSNAME_LAYER_THUMBNAIL +\n                \" \" +\n                CLASSNAME_LAYER_MASK_THUMBNAIL;\n\n            // Thumbnails are actually displayed at 25px high, set the display width appropriately for the aspect ratio\n            thumbCanvas.style.maxWidth =\n                (thumbCanvas.width / thumbCanvas.height) * 25 + \"px\";\n\n            if (layer == artwork.getActiveLayer() && artwork.isEditingMask()) {\n                thumbCanvas.className += \" active\";\n            }\n            if (!layer.maskVisible) {\n                thumbCanvas.className += \" disabled\";\n\n                drawRedX(thumbCanvas);\n            }\n\n            return thumbCanvas;\n        }\n\n        /**\n         * Create a DOM element for the given layer\n         *\n         * @param {number} index\n         * @param {CPLayer} layer\n         */\n        function buildLayer(index, layer) {\n            let layerDiv = document.createElement(\"div\"),\n                eyeDiv = document.createElement(\"div\"),\n                mainDiv = document.createElement(\"div\"),\n                iconsDiv = document.createElement(\"div\"),\n                layerNameDiv = document.createElement(\"div\"),\n                statusDiv = document.createElement(\"div\"),\n                blendDiv = document.createElement(\"div\");\n\n            layerDiv.className = \"chickenpaint-layer list-group-item\";\n\n            if (layer == artwork.getActiveLayer()) {\n                layerDiv.className += \" \" + CLASSNAME_LAYER_ACTIVE;\n            }\n\n            eyeDiv.className = \"chickenpaint-layer-eye\";\n            if (!layer.ancestorsAreVisible()) {\n                eyeDiv.className += \" chickenpaint-layer-eye-hidden-ancestors\";\n            }\n\n            eyeDiv.style.marginRight =\n                2 + LAYER_IN_GROUP_INDENT * (layer.getDepth() - 1) + \"px\";\n\n            if (layer.visible) {\n                layerDiv.className += \" \" + CLASSNAME_LAYER_VISIBLE;\n                eyeDiv.appendChild(createFontAwesomeIcon(\"icon-eye\"));\n            } else {\n                layerDiv.className += \" \" + CLASSNAME_LAYER_HIDDEN;\n                eyeDiv.appendChild(createFontAwesomeIcon(\"icon-eye-slash\"));\n            }\n\n            layerDiv.appendChild(eyeDiv);\n\n            mainDiv.className = \"chickenpaint-layer-description\";\n\n            if (layer instanceof CPImageLayer) {\n                if (layer.clip) {\n                    layerDiv.className += \" chickenpaint-layer-clipped\";\n                    iconsDiv.appendChild(\n                        createFontAwesomeIcon(\n                            \"icon-level-down-alt fa-flip-horizontal\"\n                        )\n                    );\n                }\n\n                if (layer.lockAlpha) {\n                    let locked = createChickenPaintIcon(\"lock-alpha\");\n\n                    locked.title = _(\"Transparency locked\");\n                    statusDiv.appendChild(locked);\n                }\n            } else if (layer instanceof CPLayerGroup) {\n                layerDiv.className += \" chickenpaint-layer-group\";\n\n                if (layer.expanded) {\n                    layerDiv.className += \" \" + CLASSNAME_LAYER_GROUP_EXPANDED;\n                    iconsDiv.appendChild(\n                        createFontAwesomeIcon(\n                            \"icon-folder-open chickenpaint-layer-group-toggle\"\n                        )\n                    );\n                } else {\n                    layerDiv.className += \" \" + CLASSNAME_LAYER_GROUP_COLLAPSED;\n                    iconsDiv.appendChild(\n                        createFontAwesomeIcon(\n                            \"icon-folder chickenpaint-layer-group-toggle\"\n                        )\n                    );\n                }\n            }\n\n            if (iconsDiv.childNodes.length) {\n                iconsDiv.className = \"chickenpaint-layer-icons\";\n                layerDiv.appendChild(iconsDiv);\n            }\n\n            try {\n                if (layer instanceof CPImageLayer) {\n                    layerDiv.appendChild(createImageThumb(layer));\n                }\n\n                if (layer.mask) {\n                    layerDiv.appendChild(createMaskThumb(layer));\n                }\n            } catch (e) {\n                // We don't expect this to ever happen but it'd be nice if everything keeps running if it does\n                console.log(\"Failed to create layer thumb\");\n            }\n\n            let layerName =\n                layer.name && layer.name.length > 0\n                    ? layer.name\n                    : \"(unnamed \" +\n                      (layer instanceof CPLayerGroup ? \"group\" : \"layer\") +\n                      \")\";\n\n            layerNameDiv.innerText = layerName;\n            layerNameDiv.setAttribute(\"title\", layerName);\n            layerNameDiv.className = \"chickenpaint-layer-name\";\n\n            blendDiv.innerText =\n                _(CPBlend.BLEND_MODE_DISPLAY_NAMES[layer.blendMode]) +\n                \": \" +\n                layer.alpha +\n                \"%\";\n            blendDiv.className = \"chickenpaint-layer-blend\";\n\n            mainDiv.appendChild(layerNameDiv);\n            mainDiv.appendChild(blendDiv);\n\n            layerDiv.appendChild(mainDiv);\n\n            statusDiv.className = \"chickenpaint-layer-status\";\n            layerDiv.appendChild(statusDiv);\n\n            layerDiv.setAttribute(\"data-display-index\", \"\" + index);\n            // layerDiv.setAttribute(\"data-toggle\", \"dropdown\");\n            // layerDiv.setAttribute(\"data-target\", \"#chickenpaint-layer-pop\");\n\n            return layerDiv;\n        }\n\n        function showRenameBoxForLayer(displayIndex) {\n            if (displayIndex > -1) {\n                let layer = getLayerFromDisplayIndex(displayIndex),\n                    elem = getElemFromDisplayIndex(displayIndex);\n\n                if (layer && elem) {\n                    renameField.show(layer, elem);\n                }\n            }\n        }\n\n        function onDoubleClick(e) {\n            if (\n                e.button === BUTTON_PRIMARY &&\n                e.target.closest(\".chickenpaint-layer-description\") &&\n                !e.target.closest(\"input\")\n            ) {\n                /* Double clicking the layer description should start editing it, but ignore double clicks inside\n                 * the rename textbox itself\n                 */\n                showRenameBoxForLayer(getDisplayIndexFromElem(e.target));\n\n                e.preventDefault();\n            }\n        }\n\n        function showContextMenu(e) {\n            let displayIndex = getDisplayIndexFromElem(e.target);\n            if (displayIndex != -1) {\n                //コンテキストメニューのBootstrap5対応ができなかったが\n                //マウス使用時にレイヤー名を変更できないと困るので\n                //右クリックでレイヤー名の変更になるように動作を変更した。\n                showRenameBoxForLayer(getDisplayIndexFromElem(e.target));\n\n                e.preventDefault();\n            }\n        }\n\n        function onPointerDown(e) {\n            let layerElem = e.target.closest(\".chickenpaint-layer\");\n            let displayIndex = getDisplayIndexFromElem(layerElem);\n\n            if (displayIndex !== -1) {\n                let layer = getLayerFromDisplayIndex(displayIndex);\n\n                if (\n                    e.button === BUTTON_PRIMARY &&\n                    e.target.closest(\".chickenpaint-layer-eye\")\n                ) {\n                    controller.actionPerformed({\n                        action: \"CPSetLayerVisibility\",\n                        layer: layer,\n                        visible: !layer.visible,\n                    });\n                } else if (\n                    e.button === BUTTON_PRIMARY &&\n                    layer instanceof CPLayerGroup &&\n                    e.target.closest(\".\" + CLASSNAME_LAYER_GROUP_TOGGLE)\n                ) {\n                    controller.actionPerformed({\n                        action: \"CPExpandLayerGroup\",\n                        group: layer,\n                        expand: !layer.expanded,\n                    });\n                } else {\n                    let layerChanged = artwork.getActiveLayer() !== layer;\n\n                    dropdownOnMask =\n                        e.target.closest(\n                            \".\" + CLASSNAME_LAYER_MASK_THUMBNAIL\n                        ) !== null ||\n                        (layer instanceof CPLayerGroup &&\n                            layer.mask !== null &&\n                            layerChanged);\n\n                    if (\n                        e.button === BUTTON_PRIMARY &&\n                        e.shiftKey &&\n                        !(e.ctrlKey || e.metaKey) &&\n                        dropdownOnMask\n                    ) {\n                        controller.actionPerformed({\n                            action: \"CPSetMaskVisible\",\n                            layer: layer,\n                            visible: !layer.maskVisible,\n                        });\n                    } else {\n                        let selectMask, maskChanged;\n\n                        if (e.button !== BUTTON_PRIMARY && !layerChanged) {\n                            /*\n                             * Right clicking within the currently selected layer does not result in the mask/image selection\n                             * moving (but it does change the type of dropdown menu we receive)\n                             */\n                            selectMask = artwork.isEditingMask();\n                        } else {\n                            selectMask = dropdownOnMask;\n                        }\n\n                        maskChanged = artwork.isEditingMask() !== selectMask;\n\n                        if (layerChanged || maskChanged) {\n                            controller.actionPerformed({\n                                action: \"CPSetActiveLayer\",\n                                layer: layer,\n                                mask: selectMask,\n                            });\n                        }\n\n                        if (selectMask && e.altKey) {\n                            controller.actionPerformed({\n                                action: \"CPToggleMaskView\",\n                            });\n                        } else if (\n                            selectMask &&\n                            !e.shiftKey &&\n                            (e.ctrlKey || e.metaKey)\n                        ) {\n                            controller.actionPerformed({\n                                action: \"CPApplyLayerMask\",\n                            });\n                        } else if (\n                            selectMask &&\n                            e.shiftKey &&\n                            (e.ctrlKey || e.metaKey)\n                        ) {\n                            controller.actionPerformed({\n                                action: \"CPRemoveLayerMask\",\n                            });\n                        } else if (e.button === BUTTON_PRIMARY) {\n                            if (\n                                e.pointerType === \"pen\" ||\n                                e.pointerType === \"touch\"\n                            ) {\n                                drag.state = DRAG_STATE_PRE_PAN;\n                                drag.initialScrollTop =\n                                    scrollContainer.scrollTop;\n\n                                if (longPressTimer) {\n                                    clearTimeout(longPressTimer);\n                                }\n\n                                longPressTimer = setTimeout(() => {\n                                    if (drag.state === DRAG_STATE_PRE_PAN) {\n                                        startLayerDrag();\n                                        drag.dragY = e.clientY;\n                                        updateDropMarker();\n                                    }\n                                }, LONG_PRESS_INTERVAL);\n                            } else {\n                                drag.state = DRAG_STATE_PRE_DRAG;\n                            }\n\n                            drag.dropTarget = null;\n                            drag.layer = layer;\n                            // We might have replaced the layer with a new element due to the CPSetActiveLayer, so fetch that again\n                            drag.layerElem =\n                                getElemFromDisplayIndex(displayIndex);\n                            drag.dragX = e.clientX;\n                            drag.dragY = e.clientY;\n\n                            layerContainer.setPointerCapture(e.pointerId);\n\n                            layerContainer.addEventListener(\n                                \"pointermove\",\n                                onPointerDragged\n                            );\n                            layerContainer.addEventListener(\n                                \"pointerup\",\n                                onPointerUp\n                            );\n                        } else if (\n                            e.button === BUTTON_SECONDARY &&\n                            !layerChanged\n                        ) {\n                            e.preventDefault();\n                            showContextMenu(e);\n                        }\n                    }\n                }\n            }\n        }\n\n        function onPointerUp(e) {\n            switch (drag.state) {\n                case DRAG_STATE_DRAGGING:\n                    drag.layerElem.classList.remove(\n                        \"chickenpaint-layer-dragging\"\n                    );\n\n                    if (drag.dropTarget) {\n                        if (drag.dropTarget.direction === \"inside\") {\n                            controller.actionPerformed({\n                                action: \"CPRelocateLayer\",\n                                layer: drag.layer,\n                                toGroup: drag.dropTarget.layer,\n                                toIndex: drag.dropTarget.layer.layers.length,\n                            });\n                        } else {\n                            controller.actionPerformed({\n                                action: \"CPRelocateLayer\",\n                                layer: drag.layer,\n                                toGroup: drag.dropTarget.layer.parent,\n                                toIndex:\n                                    drag.dropTarget.layer.parent.indexOf(\n                                        drag.dropTarget.layer\n                                    ) +\n                                    (drag.dropTarget.direction === \"over\"\n                                        ? 1\n                                        : 0),\n                            });\n                        }\n                    }\n\n                    drag.dropTarget = null;\n                    drag.state = DRAG_STATE_IDLE;\n\n                    updateDropMarker();\n                    break;\n\n                default: // We didn't start the drag so there is no indicator to remove\n                    drag.state = DRAG_STATE_IDLE;\n                    break;\n            }\n\n            if (longPressTimer) {\n                clearTimeout(longPressTimer);\n                longPressTimer = null;\n            }\n\n            layerContainer.releasePointerCapture(e.pointerId);\n\n            layerContainer.removeEventListener(\"pointermove\", onPointerDragged);\n            layerContainer.removeEventListener(\"pointerup\", onPointerUp);\n        }\n\n        function startLayerDrag() {\n            drag.state = DRAG_STATE_DRAGGING;\n\n            drag.frameElem = document.createElement(\"div\");\n            drag.frameElem.className = \"chickenpaint-layer-drag-frame\";\n            drag.frameElem.style.width = drag.layerElem.offsetWidth + \"px\";\n            drag.frameElem.style.height = drag.layerElem.offsetHeight + \"px\";\n\n            drag.dropBetweenMarkerElem = document.createElement(\"div\");\n            drag.dropBetweenMarkerElem.className =\n                \"chickenpaint-layer-drop-between-mark\";\n\n            drag.layerElem.classList.add(\"chickenpaint-layer-dragging\");\n\n            layerContainer.appendChild(drag.frameElem);\n        }\n\n        function onPointerDragged(e) {\n            let newDragY = e.clientY;\n\n            switch (drag.state) {\n                case DRAG_STATE_PRE_PAN:\n                    if (\n                        Math.abs(newDragY - drag.dragY) >\n                        LAYER_DRAG_START_THRESHOLD\n                    ) {\n                        drag.state = DRAG_STATE_PANNING;\n\n                        // Fall through\n                    } else {\n                        break;\n                    }\n\n                case DRAG_STATE_PANNING:\n                    scrollContainer.scrollTop =\n                        drag.initialScrollTop + drag.dragY - newDragY;\n                    break;\n\n                case DRAG_STATE_PRE_DRAG:\n                    if (\n                        Math.abs(newDragY - drag.dragY) >\n                        LAYER_DRAG_START_THRESHOLD\n                    ) {\n                        startLayerDrag();\n\n                        // Fall through\n                    } else {\n                        break;\n                    }\n\n                case DRAG_STATE_DRAGGING:\n                    drag.dragY = newDragY;\n                    updateDropMarker();\n                    break;\n            }\n        }\n\n        /**\n         * Rebuild all layer elements from the cached linearizedLayers list\n         */\n        this.buildLayers = function () {\n            // Cache the details of the layer structure\n            linearizedLayers = artwork\n                .getLayersRoot()\n                .getLinearizedLayerList(true);\n\n            let layerElems = linearizedLayers.map((layer, index) =>\n                    buildLayer(index, layer)\n                ),\n                layerFrag = document.createDocumentFragment();\n\n            layerContainer.innerHTML = \"\"; // jQuery の empty() を置き換え\n\n            for (let i = layerElems.length - 1; i >= 0; i--) {\n                layerFrag.appendChild(layerElems[i]);\n            }\n\n            layerContainer.appendChild(layerFrag);\n\n            updateDropMarker();\n        };\n\n        /**\n         * The properties of the given layer have changed, rebuild it.\n         *\n         * @param {CPLayer} layer\n         */\n        this.layerChanged = function (layer) {\n            let index = getDisplayIndexFromLayer(layer),\n                layerElem = getElemFromDisplayIndex(index);\n\n            if (\n                !layerElem ||\n                (layer instanceof CPLayerGroup &&\n                    (layer.expanded !=\n                        layerElem.classList.contains(\n                            CLASSNAME_LAYER_GROUP_EXPANDED\n                        ) ||\n                        layer.visible !=\n                            layerElem.classList.contains(\n                                CLASSNAME_LAYER_VISIBLE\n                            )))\n            ) {\n                // When these properties change, we might have to rebuild the group's children too, so just rebuild everything\n                this.buildLayers();\n            } else {\n                layerElem.replaceWith(buildLayer(index, layer));\n            }\n        };\n\n        function rebuildThumbnailForLayer(layerElem, layer, maskThumb) {\n            try {\n                const thumbClass = maskThumb\n                    ? CLASSNAME_LAYER_MASK_THUMBNAIL\n                    : CLASSNAME_LAYER_IMAGE_THUMBNAIL;\n                const thumbElement = layerElem.querySelector(\".\" + thumbClass);\n\n                if (thumbElement) {\n                    thumbElement.replaceWith(\n                        maskThumb\n                            ? createMaskThumb(layer)\n                            : createImageThumb(layer)\n                    );\n                }\n            } catch (e) {\n                console.log(\"Error rebuilding thumbnail: \", e);\n            }\n        }\n\n        /**\n         *\n         * @param {number} rotation - 90 degree increments\n         */\n        this.setRotation90 = function (rotation) {\n            if (imageRotation !== rotation) {\n                imageRotation = rotation;\n\n                for (let i = 0; i < linearizedLayers.length; i++) {\n                    let layer = linearizedLayers[i];\n                    let layerElem = getElemFromDisplayIndex(i);\n\n                    if (layerElem) {\n                        rebuildThumbnailForLayer(layerElem, layer, false);\n\n                        if (layer.mask) {\n                            rebuildThumbnailForLayer(layerElem, layer, true);\n                        }\n                    }\n                }\n            }\n        };\n\n        /**\n         * The thumbnail of the given layer has been updated.\n         *\n         * @param {CPImageLayer} layer\n         */\n\n        this.layerImageThumbChanged = function (layer) {\n            let index = getDisplayIndexFromLayer(layer);\n            let layerElem = getElemFromDisplayIndex(index);\n\n            if (layerElem) {\n                rebuildThumbnailForLayer(layerElem, layer, false);\n            }\n        };\n\n        this.layerMaskThumbChanged = function (layer) {\n            let index = getDisplayIndexFromLayer(layer);\n            let layerElem = getElemFromDisplayIndex(index);\n\n            if (layerElem) {\n                if (layer.mask) {\n                    rebuildThumbnailForLayer(layerElem, layer, true);\n                } else {\n                    let maskThumb = layerElem.querySelector(\n                        \".\" + CLASSNAME_LAYER_MASK_THUMBNAIL\n                    );\n                    if (maskThumb) {\n                        maskThumb.remove();\n                    }\n                }\n            }\n        };\n\n        /**\n         * Call when the selected layer changes.\n         *\n         * @param {CPLayer} newLayer\n         * @param {boolean} maskSelected\n         */\n        this.activeLayerChanged = function (newLayer, maskSelected) {\n            let activeLayers = layerContainer.querySelectorAll(\n                \".\" + CLASSNAME_LAYER_ACTIVE\n            );\n            activeLayers.forEach((layer) => {\n                layer.classList.remove(CLASSNAME_LAYER_ACTIVE);\n            });\n\n            let layerElem = getElemFromDisplayIndex(\n                getDisplayIndexFromLayer(newLayer)\n            );\n\n            layerElem.classList.add(CLASSNAME_LAYER_ACTIVE);\n\n            let imageThumb = layerElem.querySelector(\n                \".\" + CLASSNAME_LAYER_IMAGE_THUMBNAIL\n            );\n            let maskThumb = layerElem.querySelector(\n                \".\" + CLASSNAME_LAYER_MASK_THUMBNAIL\n            );\n\n            if (imageThumb) {\n                imageThumb.classList.toggle(\"active\", !maskSelected);\n            }\n\n            if (maskThumb) {\n                maskThumb.classList.toggle(\"active\", maskSelected);\n            }\n        };\n\n        this.resize = function () {\n            palette.dismissNotification();\n            this.buildLayers();\n        };\n\n        this.getElement = function () {\n            return widgetContainer;\n        };\n\n        /**\n         * Scroll the layer widget until the layer with the given index is fully visible, and return\n         * the element for that layer.\n         *\n         * @param {number} displayIndex\n         */\n        this.revealLayer = function (displayIndex) {\n            let layerElem = getElemFromDisplayIndex(displayIndex),\n                layerRect = layerElem.getBoundingClientRect(),\n                containerRect = layerContainer.getBoundingClientRect();\n\n            scrollContainer.scrollTop = Math.max(\n                Math.min(\n                    Math.max(\n                        scrollContainer.scrollTop,\n                        // Scroll down to reveal the bottom of the layer\n                        scrollContainer.scrollTop +\n                            layerRect.bottom -\n                            containerRect.bottom\n                    ),\n                    scrollContainer.scrollTop +\n                        layerRect.top -\n                        containerRect.top\n                ),\n                0\n            );\n\n            return layerElem;\n        };\n\n        dropdownParent.id = \"chickenpaint-layer-pop\";\n\n        widgetContainer.className = \"chickenpaint-layers-widget\";\n        widgetContainer.addEventListener(\n            \"contextmenu\",\n            (e) => e.preventDefault(),\n            true /* Capture phase, prevent context menu on all children */\n        );\n\n        //ドロップダウンメニュー関連項目のコメントアウト\n        // dropdownLayerMenu.addEventListener(\"click\", onDropdownActionClick);\n\n        layerContainer.className = \"list-group\";\n        layerContainer.addEventListener(\"dblclick\", onDoubleClick);\n        layerContainer.addEventListener(\"pointerdown\", onPointerDown);\n\n        layerContainer.setAttribute(\"touch-action\", \"none\");\n\n        for (let eventName of [\n            \"ontouchstart\",\n            \"ontouchmove\",\n            \"ontouchend\",\n            \"ontouchcancel\",\n        ]) {\n            layerContainer.addEventListener(eventName, absorbTouch);\n        }\n\n        widgetContainer.appendChild(layerContainer);\n    }\n\n    function updateAvailableBlendModes() {\n        let activeLayer = artwork.getActiveLayer();\n\n        while (blendCombo.lastChild) {\n            blendCombo.removeChild(blendCombo.lastChild);\n        }\n\n        for (\n            let blendMode = CPBlend.LM_FIRST;\n            blendMode <= CPBlend.LM_LAST;\n            blendMode++\n        ) {\n            if (\n                blendMode != CPBlend.LM_MULTIPLY2 &&\n                (blendMode == activeLayer.blendMode ||\n                    (blendMode === CPBlend.LM_PASSTHROUGH &&\n                        activeLayer instanceof CPLayerGroup) ||\n                    blendMode <= CPBlend.LM_LAST_CHIBIPAINT)\n            ) {\n                let option = document.createElement(\"option\");\n\n                option.appendChild(\n                    document.createTextNode(\n                        _(CPBlend.BLEND_MODE_DISPLAY_NAMES[blendMode])\n                    )\n                );\n\n                // Should we use the new LM_MULTIPLY2 blend mode in this spot instead of the legacy one?\n                if (\n                    blendMode === CPBlend.LM_MULTIPLY &&\n                    activeLayer.blendMode !== blendMode &&\n                    !activeLayer.useLegacyMultiply\n                ) {\n                    option.value = CPBlend.LM_MULTIPLY2;\n                } else {\n                    option.value = blendMode;\n                }\n\n                blendCombo.appendChild(option);\n            }\n        }\n    }\n\n    function createLayerActionButtons() {\n        const buttons = [\n                {\n                    title: \"Add layer\",\n                    icon: createFontAwesomeIcon(\"icon-file\"),\n                    action: \"CPAddLayer\",\n                },\n                {\n                    title: \"Add group\",\n                    icon: createFontAwesomeIcon(\"icon-folder\"),\n                    action: \"CPAddGroup\",\n                },\n                {\n                    title: \"Merge down\",\n                    icon: createFontAwesomeIcon(\"icon-download_FILL\"),\n                    action: \"CPLayerMergeDown\",\n                    require: [\"image-layer\"],\n                },\n                {\n                    title: \"Merge group\",\n                    icon: createFontAwesomeIcon(\"icon-collapse_all_FILL\"),\n                    action: \"CPGroupMerge\",\n                    require: [\"layer-group\"],\n                },\n                {\n                    title: \"Clip to the layer below\",\n                    icon: createFontAwesomeIcon(\n                        \"icon-level-down-alt fa-flip-horizontal\"\n                    ),\n                    action: \"CPCreateClippingMask\",\n                    require: \"no-clipping-mask-or-is-group\",\n                },\n                {\n                    title: \"Unclip from the layer below\",\n                    icon: createFontAwesomeIcon(\n                        \"icon-level-down-alt fa-flip-horizontal\"\n                    ),\n                    action: \"CPReleaseClippingMask\",\n                    require: \"clipping-mask\",\n                },\n                {\n                    title: \"Add layer mask\",\n                    icon: createChickenPaintIcon(\"mask\"),\n                    action: \"CPAddLayerMask\",\n                    require: [\"no-mask\"],\n                },\n                {\n                    title: \"Apply mask\",\n                    icon: createChickenPaintIcon(\"mask\"),\n                    action: \"CPApplyLayerMask\",\n                    require: [\"mask\"],\n                },\n                {\n                    title: \"Duplicate\",\n                    icon: createFontAwesomeIcon(\"icon-clone\"),\n                    action: \"CPLayerDuplicate\",\n                },\n                {\n                    title: \"Delete layer mask\",\n                    icon: createFontAwesomeIcon(\"icon-trash\"),\n                    action: \"CPRemoveLayerMask\",\n                    require: \"isEditingMask\",\n                },\n                {\n                    title: \"Delete layer\",\n                    icon: createFontAwesomeIcon(\"icon-trash\"),\n                    action: \"CPRemoveLayer\",\n                    require: \"isNotEditingMask\",\n                },\n            ],\n            layerButtonsList = document.createElement(\"ul\");\n\n        layerButtonsList.className = \"chickenpaint-layer-buttons list-unstyled\";\n\n        for (let button of buttons) {\n            let elem = document.createElement(\"li\");\n\n            elem.setAttribute(\"data-action\", button.action);\n            elem.className =\n                \"chickenpaint-small-toolbar-button \" +\n                (button.require\n                    ? \"chickenpaint-action-require-\" + button.require\n                    : \"\");\n            elem.title = _(button.title);\n            elem.appendChild(button.icon);\n            elem.addEventListener(\"click\", function () {\n                controller.actionPerformed({ action: button.action });\n            });\n\n            layerButtonsList.appendChild(elem);\n        }\n\n        return layerButtonsList;\n    }\n\n    function updateActiveLayerActionButtons() {\n        let activeLayer = artwork.getActiveLayer();\n        let isEditingMask = artwork.isEditingMask();\n        let facts = computeLayerPredicates(activeLayer, isEditingMask);\n        for (let requirement of [\n            \"mask\",\n            \"no-mask\",\n            \"isEditingMask\",\n            \"isNotEditingMask\",\n            \"clipping-mask\",\n            \"no-clipping-mask-or-is-group\",\n            \"image-layer\",\n            \"layer-group\",\n        ]) {\n            let elements = layerActionButtons.getElementsByClassName(\n                \"chickenpaint-action-require-\" + requirement\n            );\n\n            for (let element of elements) {\n                element.style.display = facts[requirement]\n                    ? \"inline-block\"\n                    : \"none\";\n            }\n        }\n\n        let actions = layerActionButtons.querySelectorAll(\"[data-action]\");\n\n        actions.forEach(function (element) {\n            let action = element.getAttribute(\"data-action\");\n            element.classList.toggle(\n                \"disabled\",\n                !controller.isActionAllowed(action)\n            );\n        });\n    }\n\n    function updateActiveLayerControls() {\n        let activeLayer = artwork.getActiveLayer();\n\n        if (activeLayer.getAlpha() != alphaSlider.value) {\n            alphaSlider.setValue(activeLayer.getAlpha());\n        }\n\n        updateAvailableBlendModes();\n\n        if (activeLayer.getBlendMode() != parseInt(blendCombo.value, 10)) {\n            blendCombo.value = activeLayer.getBlendMode();\n        }\n\n        if (activeLayer.getLockAlpha() != cbLockAlpha.checked) {\n            cbLockAlpha.checked = activeLayer.getLockAlpha();\n        }\n\n        updateActiveLayerActionButtons();\n    }\n\n    /**\n     * Called when a layer has been added/removed.\n     */\n    function onChangeStructure() {\n        artwork = this;\n\n        // Fetch and rebuild all layers\n        layerWidget.resize();\n\n        updateActiveLayerControls();\n    }\n\n    /**\n     * Called when the properties of one layer has been updated and we should rebuild/repaint it.\n     *\n     * @param {CPLayer} layer\n     */\n    function onChangeLayer(layer) {\n        artwork = this;\n\n        palette.dismissNotification();\n        layerWidget.layerChanged(layer);\n\n        updateActiveLayerControls();\n    }\n\n    /**\n     * Called when the thumbnail of one layer has been updated.\n     *\n     * @param {CPLayer} layer\n     */\n    function onChangeLayerImageThumb(layer) {\n        artwork = this;\n\n        layerWidget.layerImageThumbChanged(layer);\n    }\n\n    /**\n     * Called when the thumbnail of one layer has been updated.\n     *\n     * @param {CPLayer} layer\n     */\n    function onChangeLayerMaskThumb(layer) {\n        artwork = this;\n\n        layerWidget.layerMaskThumbChanged(layer);\n    }\n\n    /**\n     * Called when the selected layer changes.\n     *\n     * @param {CPLayer} oldLayer\n     * @param {CPLayer} newLayer\n     * @param {boolean} maskSelected\n     */\n    function onChangeActiveLayer(oldLayer, newLayer, maskSelected) {\n        layerWidget.activeLayerChanged(newLayer, maskSelected);\n\n        updateActiveLayerControls();\n    }\n\n    function CPRenameField() {\n        let layer = null,\n            origName = \"\",\n            textBox = document.createElement(\"input\"),\n            that = this;\n\n        // 隠すメソッド\n        this.hide = function () {\n            layer = null;\n\n            let parentNameElem = textBox.parentNode;\n\n            // 親ノードが存在する時は、テキストボックスを削除して、レイヤー名を表示\n            if (parentNameElem) {\n                parentNameElem.removeChild(textBox);\n                parentNameElem.textContent = origName;\n            }\n        };\n\n        // 名前の変更とhide\n        this.renameAndHide = function () {\n            if (layer && layer.name !== textBox.value) {\n                // 名前が変更されている時\n                controller.actionPerformed({\n                    action: \"CPSetLayerName\",\n                    layer: layer,\n                    name: textBox.value,\n                });\n            }\n            this.hide();\n        };\n\n        // レイヤー名変更のテキストボックスを表示\n        this.show = function (_layer, _layerElem) {\n            layer = _layer;\n            origName = layer.name;\n\n            // 元のレイヤー名をテキストボックスにセット\n            textBox.value = origName;\n\n            let layerNameElem = _layerElem.querySelector(\n                \".chickenpaint-layer-name\"\n            );\n            if (layerNameElem) {\n                // 親ノードから削除されている場合にのみ処理を実行\n                if (layerNameElem.parentNode) {\n                    // 現在の子ノードを取得\n                    let currentChild = layerNameElem.firstChild;\n                    // テキストノードが存在する場合にのみ削除\n                    if (\n                        currentChild &&\n                        currentChild.nodeType === Node.TEXT_NODE\n                    ) {\n                        layerNameElem.removeChild(currentChild);\n                        // テキストボックスを親ノードに追加\n                        layerNameElem.appendChild(textBox);\n                    }\n                }\n            }\n            // 入力ボックスを選択状態にする\n            textBox.select();\n        };\n\n        // テキストボックスの設定\n        textBox.type = \"text\";\n        textBox.className = \"chickenpaint-layer-rename form-control input-sm\";\n\n        // キーが押されたときにイベントを停止\n        textBox.addEventListener(\"keydown\", function (e) {\n            // Prevent other keyhandlers (CPCanvas) from getting their grubby hands on the input\n            e.stopPropagation();\n        });\n\n        // エンターキーを押した時に名前変更と隠す処理を実行\n        textBox.addEventListener(\"keydown\", function (e) {\n            if (e.key === \"Enter\") {\n                that.renameAndHide();\n            }\n            e.stopPropagation();\n        });\n\n        // エスケープキーを押した時にhide\n        textBox.addEventListener(\"keyup\", function (e) {\n            if (e.key === \"Escape\") {\n                // Escape\n                that.hide();\n            }\n            e.stopPropagation();\n        });\n\n        // 入力ボックスがフォーカスを失った時に名前変更処理を実行\n        textBox.addEventListener(\"blur\", function (e) {\n            if (layer) {\n                that.renameAndHide();\n            }\n        });\n    }\n\n    let parentSetSize = this.setSize,\n        parentSetWidth = this.setWidth,\n        parentSetHeight = this.setHeight;\n\n    // サイズを変更するメソッド\n    this.setSize = function (w, h) {\n        parentSetSize.call(this, w, h);\n        this.dismissNotification();\n        alphaSlider.resize();\n    };\n\n    // 幅を変更するメソッド\n    this.setWidth = function (width) {\n        parentSetWidth.call(this, width);\n        alphaSlider.resize();\n        layerWidget.resize();\n    };\n\n    // 高さを変更するメソッド\n    this.setHeight = function (height) {\n        parentSetHeight.call(this, height);\n        layerWidget.resize();\n    };\n\n    /**\n     * Set the rotation of the image thumbnails with respect to the underlying image data.\n     *\n     * @param {number} newRotation - 90 degree increments\n     */\n    this.setRotation90 = function (newRotation) {\n        layerWidget.setRotation90(newRotation);\n    };\n\n    /**\n     * Dismiss any active notifications or popovers.\n     */\n    this.dismissNotification = function () {\n        const elements = document.querySelectorAll(\n            \".chickenpaint-layer[aria-describedby], .chickenpaint-slider[aria-describedby]\"\n        );\n        elements.forEach((elem) => {\n            const popoverInstance = bootstrap.Popover.getInstance(elem);\n            if (popoverInstance) {\n                popoverInstance.dispose();\n            }\n        });\n\n        if (notificationDismissTimer) {\n            clearTimeout(notificationDismissTimer);\n            notificationDismissTimer = false;\n        }\n    };\n\n    /**\n     * Show a notification for a specific layer with a message.\n     *\n     * @param {CPLayer} layer - The layer for which the notification is shown\n     * @param {string} message - The message to display in the notification\n     * @param {string} where - The location for the notification (e.g., \"opacity\")\n     */\n    this.showNotification = (layer, message, where) => {\n        let notificationLayerIndex = getDisplayIndexFromLayer(layer),\n            target;\n\n        if (artwork.getActiveLayer() == layer && where == \"opacity\") {\n            target = alphaSlider.getElement();\n        } else {\n            target = layerWidget.revealLayer(notificationLayerIndex);\n        }\n\n        this.dismissNotification();\n\n        const popoverInstance = new bootstrap.Popover(target, {\n            html: false,\n            content: message,\n            placement: \"left\",\n            trigger: \"manual\",\n            fallbackPlacement: [],\n            boundary: \"window\",\n            container: palette.getElement(),\n        });\n\n        popoverInstance.show();\n\n        notificationDismissTimer = setTimeout(() => {\n            notificationDismissTimer = false;\n            this.dismissNotification();\n        }, Math.max(Math.round(message.length * NOTIFICATION_HIDE_DELAY_MS_PER_CHAR), NOTIFICATION_HIDE_DELAY_MIN));\n    };\n\n    // 合成方法のセレクトメニュー\n    blendCombo.className = \"form-control form-control-sm\";\n    blendCombo.tabIndex = -1;\n\n    blendCombo.title = _(\"Layer blending mode\");\n    blendCombo.addEventListener(\"change\", function (e) {\n        controller.actionPerformed({\n            action: \"CPSetLayerBlendMode\",\n            blendMode: parseInt(blendCombo.value, 10),\n        });\n        blendCombo.blur();\n    });\n\n    body.appendChild(blendCombo);\n\n    // 不透明度のスライダー\n    alphaSlider.title = function (value) {\n        return _(\"Opacity\") + \": \" + value + \"%\";\n    };\n\n    alphaSlider.on(\"valueChange\", function (value) {\n        controller.actionPerformed({ action: \"CPSetLayerAlpha\", alpha: value });\n    });\n\n    body.appendChild(alphaSlider.getElement());\n\n    // SampleAllLayersのチェックボックスの設定を取得\n    cbSampleAllLayers.id = \"chickenpaint-chk-sample-all-layers\";\n    cbSampleAllLayers.type = \"checkbox\";\n    cbSampleAllLayers.addEventListener(\"click\", function (e) {\n        artwork.setSampleAllLayers(cbSampleAllLayers.checked);\n        document.activeElement.blur();\n    });\n\n    body.appendChild(\n        wrapBootstrapCheckbox(cbSampleAllLayers, _(\"Sample all layers\"))\n    );\n\n    // 透明度をロックのチェックボックスの設定を取得\n    cbLockAlpha.id = \"chickenpaint-chk-lock-alpha\";\n    cbLockAlpha.type = \"checkbox\";\n    cbLockAlpha.addEventListener(\"click\", function (e) {\n        controller.actionPerformed({\n            action: \"CPSetLayerLockAlpha\",\n            lock: cbLockAlpha.checked,\n        });\n        document.activeElement.blur();\n    });\n\n    body.appendChild(\n        wrapBootstrapCheckbox(cbLockAlpha, _(\"Lock transparency\"))\n    );\n\n    body.appendChild(layerWidget.getElement());\n\n    // レイヤーアクションボタンを追加\n    layerActionButtons = createLayerActionButtons();\n    body.appendChild(layerActionButtons);\n\n    // イベントリスナー登録\n    artwork.on(\"changeActiveLayer\", onChangeActiveLayer);\n    artwork.on(\"changeLayer\", onChangeLayer);\n    artwork.on(\"changeStructure\", onChangeStructure);\n    artwork.on(\"changeLayerMaskThumb\", onChangeLayerMaskThumb);\n    artwork.on(\"changeLayerImageThumb\", onChangeLayerImageThumb);\n\n    controller.on(\"layerNotification\", this.showNotification.bind(this));\n\n    // Set initial values\n    onChangeStructure.call(artwork);\n}\n\n// CPLayersPaletteのプロトタイプをCPPaletteのプロトタイプから継承\nCPLayersPalette.prototype = Object.create(CPPalette.prototype);\n// コンストラクタをCPLayersPaletteに設定\nCPLayersPalette.prototype.constructor = CPLayersPalette;\n","/*\n    ChickenPaint\n    \n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\n    by Nicholas Sherlock / Chicken Smoothie.\n    \n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n    ChickenPaint is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ChickenPaint is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport * as bootstrap from 'bootstrap/dist/js/bootstrap.bundle.min.js';\nimport EventEmitter from \"wolfy87-eventemitter\";\n\nimport CPGreyBmp from '../engine/CPGreyBmp.js';\nimport CPLookUpTable from '../engine/CPLookUpTable.js';\n\nimport CPPalette from './CPPalette.js';\nimport CPSlider from './CPSlider.js';\n\nimport {_} from \"../languages/lang.js\";\n\n/**\n *\n * @param {HTMLInputElement} checkbox - Must have a unique ID set\n * @param {string} title\n *\n * @returns {HTMLElement}\n */\nfunction wrapBootstrapCheckbox(checkbox, title) {\n    let\n        div = document.createElement(\"div\"),\n        label = document.createElement(\"label\");\n\n    div.className = \"form-check\";\n\n    checkbox.className = \"form-check-input\";\n\n    label.className = \"form-check-label\";\n    label.setAttribute(\"for\", checkbox.id);\n\n    label.appendChild(checkbox);\n    label.appendChild(document.createTextNode(title));\n\n    div.appendChild(checkbox);\n    div.appendChild(label);\n\n    return div;\n}\n\nfunction loadTextures(textureFilename, width, height, textureCount, then) {\n    let\n        img = new Image(),\n        textures = [];\n    \n    img.onload = function() {\n        let\n            canvas = document.createElement(\"canvas\"),\n            canvasContext = canvas.getContext(\"2d\",{\n\t\t\t\twillReadFrequently: true,\n\t\t\t});\n        \n        canvas.width = img.width;\n        canvas.height = img.height;\n        \n        for (let i = 0; i < textureCount; i++) {\n            canvasContext.drawImage(img, 0, i * height, width, height, 0, 0, width, height);\n            \n            try {\n                let\n                    imageData = canvasContext.getImageData(0, 0, width, height),\n                    texture = new CPGreyBmp(width, height, 8);\n                \n                // Take just the red channel from the image to form the new grayscale texture\n                for (let j = 0; j < width * height; j++) {\n                    texture.data[j] = imageData.data[j * 4];\n                }\n                \n                textures.push(texture);\n            } catch (e) {\n                // Quietly ignore errors that occur while loading the image (e.g. cross-origin security failures)\n                console.log(e);\n            }\n        }\n        \n        then(textures);\n    };\n    \n    img.src = textureFilename;\n}\n\nexport default function CPTexturePalette(controller) {\n    CPPalette.call(this, controller, \"textures\", \"Textures\");\n    \n    let\n        TEXTURE_PREVIEW_SIZE = 64,\n        TEXTURE_SWATCH_BUTTON_SIZE = 32,\n\n        /**\n         * @type {CPGreyBmp}\n         */\n        selectedTexture,\n\n        /**\n         * @type {CPGreyBmp}\n         */\n        processedTexture,\n\n        mirror = false, inverse = false,\n        \n        brightness = 0.0, contrast = 0.0,\n        optionsPanel,\n        texturesPanel = document.createElement(\"div\"),\n        \n        body = this.getBodyElement();\n\n    /**\n     * Add an array of textures to the global texture list, and add swatches for them to the UI.\n     */\n    function addTextures(newTextures) {\n        for (let i = 0; i < newTextures.length; i++) {\n            let\n                texture = newTextures[i],\n                button = new CPTextureSwatch(texture, TEXTURE_SWATCH_BUTTON_SIZE, TEXTURE_SWATCH_BUTTON_SIZE);\n            \n            button.on(\"click\", function() {\n                selectedTexture = this.texture;\n                updateSelectedTexture();\n            });\n            \n            texturesPanel.appendChild(button.getElement());\n        }\n    }\n    \n    /**\n     * Generate and return an array of procedurally-generated textures\n     * \n     * @returns CPGreyBmp[]\n     */\n    function makeProceduralTextures() {\n        let\n            result = [null];\n        \n        let\n            texture = new CPGreyBmp(2, 2, 8);\n        texture.data[0] = 0xFF;\n        texture.data[3] = 0xFF;\n        result.push(texture);\n\n        result.push(makeDotTexture(2));\n        result.push(makeDotTexture(3));\n        result.push(makeDotTexture(4));\n        result.push(makeDotTexture(6));\n        result.push(makeDotTexture(8));\n\n        result.push(makeVertLinesTexture(1, 2));\n        result.push(makeVertLinesTexture(2, 4));\n\n        result.push(makeHorizLinesTexture(1, 2));\n        result.push(makeHorizLinesTexture(2, 4));\n\n        result.push(makeCheckerBoardTexture(2));\n        result.push(makeCheckerBoardTexture(4));\n        result.push(makeCheckerBoardTexture(8));\n        result.push(makeCheckerBoardTexture(16));\n        result.push(makeNoiseTexture(256));\n\n        return result;\n    }\n\n    /**\n     * @param size int\n     * \n     * @returns CPGreyBmp\n     */\n    function makeDotTexture(size) {\n        let\n            texture = new CPGreyBmp(size, size, 8);\n        \n        for (let i = 1; i < size * size; i++) {\n            texture.data[i] = 0xFF;\n        }\n        return texture;\n    }\n\n    /**\n     * Make a checkerboard texture of the given dimensions.\n     * \n     * @param size int\n     * \n     * @returns CPGreyBmp\n     */\n    function makeCheckerBoardTexture(size) {\n        let\n            textureSize = 2 * size,\n            texture = new CPGreyBmp(textureSize, textureSize, 8);\n        \n        for (let i = 0; i < textureSize; i++) {\n            for (let j = 0; j < textureSize; j++) {\n                texture.data[i + j * textureSize] = ((~~(i / size) + ~~(j / size)) % 2 == 0) ? 0 : 0xFF;\n            }\n        }\n        \n        return texture;\n    }\n\n     /**\n      * Make a texture consisting of a series of evenly-spaced vertical lines\n      * \n      * @param lineSize int\n      * @param size int\n      * \n      * @returns CPGreyBmp\n      */\n     function makeVertLinesTexture(lineSize, size) {\n        let\n            texture = new CPGreyBmp(size, size, 8);\n        \n        for (let i = 0; i < size * size; i++) {\n            if (~~(i % size) >= lineSize) {\n                texture.data[i] = 0xFF;\n            }\n        }\n        \n        return texture;\n    }\n\n     /**\n      * Make a texture consisting of a series of evenly-spaced horizontal lines\n      *\n      * @param lineSize int\n      * @param size int\n      * \n      * @returns CPGreyBmp\n      */\n    function makeHorizLinesTexture(lineSize, size) {\n        let\n            texture = new CPGreyBmp(size, size, 8);\n        \n        for (let i = 0; i < size * size; i++) {\n            if (i / size >= lineSize) {\n                texture.data[i] = 0xFF;\n            }\n        }\n        \n        return texture;\n    }\n\n    /**\n     * Make a texture consisting of random noise with adjusted brightness and contrast\n     * \n     * @param {number} size - The width and height of the square texture (e.g., 32 for a 32x32 texture)\n     * @param {number} brightnessFactor - A multiplier for brightness (0.0 to 1.0)\n     * @param {number} contrastFactor - A multiplier for contrast (0.0 to 1.0)\n     * \n     * @returns {CPGreyBmp} - A grayscale bitmap filled with random noise and adjusted brightness/contrast\n     */\n    function makeNoiseTexture(size) {\n\n        const brightnessFactor = 0.65;\n        const contrastFactor = 0.65;\n\n        let texture = new CPGreyBmp(size, size, 8);\n\n        for (let i = 0; i < size * size; i++) {\n            // ランダムなノイズ（0から255まで）\n            let noiseValue = Math.floor(Math.random() * 256);\n\n            // 輝度を調整\n            let adjustedBrightness = noiseValue * brightnessFactor;\n\n            // コントラストを調整\n            let adjustedContrast = ((adjustedBrightness - 128) * contrastFactor) + 128;\n\n            // テクスチャデータに反映\n            texture.data[i] = Math.max(0, Math.min(255, Math.floor(adjustedContrast)));\n        }\n\n        return texture;\n    }\n\n    function updateSelectedTexture() {\n        if (selectedTexture != null) {\n            processedTexture = selectedTexture.clone();\n\n            if (mirror) {\n                processedTexture.mirrorHorizontally();\n            }\n\n            let\n                lut = new CPLookUpTable();\n            \n            lut.loadBrightnessContrast(brightness, contrast);\n            \n            if (inverse) {\n                lut.invert();\n            }\n\n            processedTexture.applyLUT(lut);\n        } else {\n            processedTexture = null;\n        }\n\n        controller.getArtwork().setBrushTexture(processedTexture);\n        \n        if (optionsPanel != null) {\n            optionsPanel.updateTexture();\n        }\n    }\n    \n    function CPTextureOptionsPanel() {\n        let\n            panel = document.createElement(\"div\"),\n        \n            cbInverse = document.createElement(\"input\"),\n            cbMirror = document.createElement(\"input\"),\n            \n            slBrightness = new CPSlider(0, 200, true),\n            slContrast = new CPSlider(0, 200, true),\n            \n            sampleSwatch = new CPTextureSwatch(null, TEXTURE_PREVIEW_SIZE, TEXTURE_PREVIEW_SIZE),\n            btnCustomize = document.createElement(\"button\"),\n            \n            textureControlsPanel;\n\t\t// Bootstrap Popover インスタンス\n\t\tconst bootstrapPopover = new bootstrap.Popover(btnCustomize, {\n\t\t\thtml: true,\n\t\t\tcontent: () => textureControlsPanel,\n\t\t\ttrigger: \"manual\",\n\t\t\tplacement: \"right\",  // ツールチップの位置を右に指定\n\t\t\tcontainer: body\n\t\t});       \n        function updatePopoverControls() {\n            cbInverse.checked = inverse;\n            cbMirror.checked = mirror;\n            \n            slBrightness.setValue(brightness * 100 + 100);\n            slContrast.setValue(contrast * 100 + 100);\n        }\n        \n        function buildTextureControlsPanel() {\n            let\n                panel = document.createElement(\"div\");\n\n            panel.className = \"chickenpaint-texture-controls\";\n\n            cbInverse.id = \"chickenpaint-chk-texture-invert\";\n            cbInverse.type = \"checkbox\";\n            cbInverse.addEventListener(\"click\", function(e) {\n                inverse = this.checked;\n                updateSelectedTexture();\n            });\n            \n            panel.appendChild(wrapBootstrapCheckbox(cbInverse, _(\"Inverse\")));\n\n            cbMirror.id = \"chickenpaint-chk-texture-mirror\";\n            cbMirror.type = \"checkbox\";\n            cbMirror.addEventListener(\"click\", function(e) {\n                mirror = this.checked;\n                updateSelectedTexture();\n            });\n            \n            panel.appendChild(wrapBootstrapCheckbox(cbMirror, _(\"Mirror\")));\n\n            slBrightness.title = function(value) {\n                return _(\"Brightness\") + \": \" + (value - 100) + \"%\";\n            };\n            \n            slBrightness.on(\"valueChange\", function(value) {\n                brightness = (value - 100) / 100.0;\n                \n                updateSelectedTexture();\n            });\n\n            panel.appendChild(slBrightness.getElement());\n\n            slContrast.title = function(value) {\n                return _(\"Contrast\") + \": \" + (value - 100) + \"%\";\n            };\n            \n            slContrast.on(\"valueChange\", function(value) {\n                contrast = (value - 100) / 100;\n                \n                updateSelectedTexture();\n            });\n\n            panel.appendChild(slContrast.getElement());\n\n            let\n                okayButton = document.createElement(\"button\"),\n                resetButton = document.createElement(\"button\");\n            \n            okayButton.textContent = \"Ok\";\n            okayButton.className = \"btn btn-primary btn-sm\";\n            okayButton.type = \"button\";\n            \n\t\t\tokayButton.addEventListener(\"click\", function (e) {\n\t\t\t\tbootstrapPopover.hide();\n\t\t\t});\n\t\t\t\t\t\t\n            panel.appendChild(okayButton);\n            panel.appendChild(document.createTextNode(\" \"));\n            \n            resetButton.textContent = \"Reset\";\n            resetButton.className = \"btn btn-secondary btn-sm\";\n            resetButton.type = \"button\";\n\n            resetButton.addEventListener(\"click\", function(e) {\n                brightness = 0;\n                contrast = 0;\n                mirror = false;\n                inverse = false;\n                \n                updatePopoverControls();\n                updateSelectedTexture();\n            });\n\n            panel.appendChild(resetButton);\n            \n            updatePopoverControls();\n            \n            return panel;\n        }\n        \n        // TODO use events instead\n        this.updateTexture = function() {\n            btnCustomize.disabled = (processedTexture == null);\n            sampleSwatch.setTexture(processedTexture);\n        };\n        \n        this.getElement = function() {\n            return panel;\n        };\n\n        panel.className = \"chickenpaint-texture-options\";\n        panel.appendChild(sampleSwatch.getElement());\n\n        btnCustomize.type = \"button\";\n        btnCustomize.className = \"btn btn-light btn-sm\";\n\t\tbtnCustomize.setAttribute(\"data-bs-toggle\", \"popover\");\n\t\tbtnCustomize.setAttribute(\"data-bs-placement\", \"right\");\n        btnCustomize.textContent = _(\"Customize\");\n\n        textureControlsPanel = buildTextureControlsPanel();\n        \n\t\t\n\t\tbtnCustomize.addEventListener(\"click\", function() {\n\t\t\tbootstrapPopover.toggle();\n\t\t});\n\t\t\t\t\n        panel.appendChild(btnCustomize);\n        \n        this.updateTexture();\n    }\n\n\t/**\n     *\n     * @param {CPGreyBmp} texture\n     * @param {number} width\n     * @param {number} height\n     * @constructor\n     */\n    function CPTextureSwatch(texture, width, height) {\n        let\n            canvas = document.createElement(\"canvas\"),\n            canvasContext = canvas.getContext(\"2d\"),\n            \n            that = this;\n\n\t    /**\n         * @param {CPGreyBmp} texture\n         */\n        this.setTexture = function(texture) {\n            this.texture = texture;\n\n            this.paint();\n        };\n        \n        this.getElement = function() {\n            return canvas;\n        };\n        \n        this.paint = function()  {\n            if (this.texture != null) {\n                canvasContext.fillStyle = canvasContext.createPattern(this.texture.getAsCanvas(), \"repeat\");\n            } else {\n                canvasContext.fillStyle = 'white';\n            }\n            canvasContext.fillRect(0, 0, canvas.width, canvas.height);\n        };\n        \n        canvas.addEventListener(\"click\", function() {\n            that.emit(\"click\");\n        });\n        \n        canvas.width = width;\n        canvas.height = height;\n        \n        this.setTexture(texture);\n    }\n    \n    CPTextureSwatch.prototype = Object.create(EventEmitter.prototype);\n    CPTextureSwatch.prototype.constructor = CPTextureSwatch;\n    \n    optionsPanel = new CPTextureOptionsPanel();\n    \n    body.appendChild(optionsPanel.getElement());\n\n    texturesPanel.className = 'chickenpaint-texture-swatches';\n\n    body.appendChild(texturesPanel);\n    \n    addTextures(makeProceduralTextures());\n    \n    loadTextures(controller.getResourcesRoot() + \"gfx/textures32.png?20241024.1\", 32, 32, 2, function(loadedTextures) {\n        addTextures(loadedTextures);\n    });\n}\n\nCPTexturePalette.prototype = Object.create(CPPalette.prototype);\nCPTexturePalette.prototype.constructor = CPTexturePalette;\n","/*\r\n    ChickenPaint\r\n    \r\n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\r\n    by Nicholas Sherlock / Chicken Smoothie.\r\n    \r\n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\r\n\r\n    ChickenPaint is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    ChickenPaint is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nexport default function CPLookUpTable() {\r\n    this.table = new Uint8Array(256);\r\n\r\n    this.loadIdentity = function() {\r\n        for (var i = 0; i < 256; i++) {\r\n            this.table[i] = i;\r\n        }\r\n    };\r\n\r\n    this.loadBrightnessContrast = function(brightness, contrast) {\r\n        var \r\n            slope = contrast > 0.0 ? (1.0 / (1.0001 - contrast)): 1.0 + contrast,\r\n            offset = 0.5 - slope * 0.5 + brightness;\r\n            \r\n        for (var i = 0; i < 256; i++) {\r\n            var \r\n                x = i / 255.0,\r\n                y = x * slope + offset;\r\n\r\n            this.table[i] = Math.min(255, Math.max(~~(y * 255.0), 0));\r\n        }\r\n    };\r\n\r\n    this.invert = function() {\r\n        for (var i = 0; i < 256; i++) {\r\n            this.table[i] = 255 - this.table[i];\r\n        }\r\n    };\r\n}\r\n","/*\n    ChickenPaint\n    \n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\n    by Nicholas Sherlock / Chicken Smoothie.\n    \n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n    ChickenPaint is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ChickenPaint is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport * as bootstrap from \"bootstrap/dist/js/bootstrap.bundle.min.js\";\n\nimport FileSaver from \"file-saver\";\n\nimport CPPalette from \"./CPPalette.js\";\n\nimport CPColor from \"../util/CPColor.js\";\nimport AdobeColorTable from \"../util/AdobeColorTable.js\";\nimport { _ } from \"../languages/lang.js\";\n\nfunction padLeft(string, padding, len) {\n    while (string.length < len) {\n        string = padding + string;\n    }\n    return string;\n}\n\nfunction fileAPIsSupported() {\n    return window.File && window.FileReader && window.FileList && window.Blob;\n}\n\nexport default function CPSwatchesPalette(controller) {\n    CPPalette.call(this, controller, \"swatches\", \"Color swatches\");\n\n    let INIT_COLORS = [\n            0xffffff, 0x000000, 0xff0000, 0x00ff00, 0x0000ff, 0xffff00,\n        ],\n        modified = false,\n        swatchPanel = document.createElement(\"ul\"),\n        buttonPanel = document.createElement(\"div\"),\n        fileInput,\n        that = this;\n\n    function CPColorSwatch(color) {\n        let wrapper = document.createElement(\"div\"),\n            swatchElem = document.createElement(\"a\"),\n            swatchMenu = document.createElement(\"ul\"),\n            mnuRemove = document.createElement(\"a\"),\n            mnuSetToCurrent = document.createElement(\"a\"),\n            that = this;\n\n        this.getElement = function () {\n            return wrapper;\n        };\n\n        this.setColor = function (color) {\n            swatchElem.setAttribute(\"data-color\", color);\n            swatchElem.style.backgroundColor =\n                \"#\" + padLeft(\"\" + Number(color).toString(16), \"0\", 6);\n        };\n\n        this.setColor(color);\n\n        swatchElem.href = \"#\";\n        swatchElem.className = \"chickenpaint-color-swatch dropdown-toggle\";\n        //\"data-bs-toggle\"に設定しない\n        // swatchElem.setAttribute(\"data-bs-toggle\", \"dropdown\");\n\n        mnuRemove.className = \"dropdown-item\";\n        mnuRemove.href = \"#\";\n        mnuRemove.textContent = _(\"Remove\");\n\n        mnuRemove.addEventListener(\"click\", function (e) {\n            e.preventDefault();\n            wrapper.remove();\n\n            modified = true;\n        });\n\n        mnuSetToCurrent.className = \"dropdown-item\";\n        mnuSetToCurrent.href = \"#\";\n        mnuSetToCurrent.textContent = _(\"Replace with current color\");\n\n        mnuSetToCurrent.addEventListener(\"click\", function (e) {\n            e.preventDefault();\n\n            that.setColor(controller.getCurColor().getRgb());\n\n            modified = true;\n        });\n\n        swatchMenu.className = \"dropdown-menu\";\n\n        let liRemove = document.createElement(\"li\");\n        let liSetToCurrent = document.createElement(\"li\");\n        liRemove.appendChild(mnuRemove); //liで囲う\n        liSetToCurrent.appendChild(mnuSetToCurrent); //liで囲う\n        swatchMenu.appendChild(liRemove);\n        swatchMenu.appendChild(liSetToCurrent);\n\n        wrapper.className = \"chickenpaint-color-swatch-wrapper\";\n        wrapper.appendChild(swatchElem);\n        wrapper.appendChild(swatchMenu);\n    }\n\n    function clearSwatches() {\n        while (swatchPanel.lastChild) {\n            swatchPanel.removeChild(swatchPanel.lastChild);\n        }\n    }\n\n    function addSwatch(color) {\n        let swatch = new CPColorSwatch(color);\n\n        swatchPanel.appendChild(swatch.getElement());\n    }\n\n    /**\n     * Returns an array of colors in RGB 32-bit integer format\n     */\n    this.getSwatches = function () {\n        let swatches = swatchPanel.querySelectorAll(\n            \".chickenpaint-color-swatch\"\n        );\n        let colors = new Array(swatches.length);\n\n        for (let i = 0; i < swatches.length; i++) {\n            colors[i] = parseInt(swatches[i].getAttribute(\"data-color\"), 10);\n        }\n\n        return colors;\n    };\n\n    this.setSwatches = function (swatches) {\n        clearSwatches();\n\n        for (let i = 0; i < swatches.length; i++) {\n            addSwatch(swatches[i]);\n        }\n\n        modified = true;\n    };\n\n    this.isModified = function () {\n        return modified;\n    };\n\n    function loadSwatches() {\n        fileInput.onchange = function () {\n            let fileList = this.files;\n\n            if (fileList.length < 1) return;\n\n            let file = fileList[0],\n                reader = new FileReader();\n\n            reader.onload = function () {\n                let swatches = new AdobeColorTable().read(this.result);\n\n                if (swatches != null && swatches.length > 0) {\n                    that.setSwatches(swatches);\n                } else {\n                    alert(\n                        _(\n                            \"The swatches could not be read, did you select an .aco file?\"\n                        )\n                    );\n                }\n            };\n\n            reader.readAsArrayBuffer(file);\n        };\n\n        fileInput.click();\n    }\n\n    function saveSwatches() {\n        let aco = new AdobeColorTable().write(that.getSwatches()),\n            blob = new Blob([aco], { type: \"application/octet-stream\" });\n\n        FileSaver.saveAs(blob, \"oekakiswatches.aco\");\n    }\n\n    function initSwatchPanel() {\n        swatchPanel.className = \"chickenpaint-color-swatches list-unstyled\";\n\n        for (let i = 0; i < INIT_COLORS.length; i++) {\n            swatchPanel.appendChild(\n                new CPColorSwatch(INIT_COLORS[i]).getElement()\n            );\n        }\n\n        swatchPanel.addEventListener(\"click\", function (e) {\n            let swatch = e.target;\n\n            if (\n                !/^<a data-color=/i.test(swatch.outerHTML) ||\n                !/chickenpaint-color-swatch/.test(swatch.className)\n            ) {\n                return; //<a data-color=で始まらない場合もreturn\n            }\n\n            if (\n                e.button == 0 /* Left */ &&\n                swatch.getAttribute(\"data-color\") !== undefined\n            ) {\n                controller.setCurColor(\n                    new CPColor(parseInt(swatch.getAttribute(\"data-color\"), 10))\n                );\n                e.stopPropagation();\n                e.preventDefault();\n                // that.userIsDoneWithUs();\n                //ボタンクリック時にパレットを折りたたむ機能を削除\n            }\n        });\n\n        swatchPanel.addEventListener(\"contextmenu\", function (e) {\n            let swatch = e.target;\n\n            if (\n                !/^<a data-color=/i.test(swatch.outerHTML) ||\n                !/chickenpaint-color-swatch/.test(swatch.className)\n            ) {\n                return; //<a data-color=で始まらない場合もreturn\n            }\n            e.preventDefault();\n            var dropdown = new bootstrap.Dropdown(swatch); // Bootstrap 5: ドロップダウンを初期化\n            dropdown.toggle();\n\n            // ドロップダウンメニュー内のクリックを検出して、メニューを閉じる\n            document.addEventListener(\"click\", function onDocumentClick(event) {\n                dropdown.hide();\n                document.removeEventListener(\"click\", onDocumentClick);\n            });\n        });\n    }\n    function createIcon(iconName) {\n        let icon = document.createElement(\"span\");\n\n        icon.className = \"fa icon-\" + iconName;\n\n        return icon;\n    }\n\n    function initButtonsPanel() {\n        let btnSettings = document.createElement(\"button\"),\n            btnAdd = document.createElement(\"button\"),\n            settingsMenu = document.createElement(\"ul\"),\n            mnuSave = document.createElement(\"a\"),\n            mnuLoad = document.createElement(\"a\");\n\n        btnAdd.type = \"button\";\n        btnAdd.title = _(\"Add the current brush color as a new swatch\");\n        btnAdd.className =\n            \"btn chickenpaint-small-toolbar-button chickenpaint-color-swatch-add\";\n        btnAdd.appendChild(createIcon(\"plus\"));\n\n        btnSettings.type = \"button\";\n        btnSettings.className =\n            \"btn dropdown-toggle chickenpaint-small-toolbar-button chickenpaint-color-swatch-settings\";\n        //\"data-bs-toggle\"に設定 bs5\n        btnSettings.setAttribute(\"data-bs-toggle\", \"dropdown\");\n        btnSettings.appendChild(createIcon(\"cog\"));\n\n        mnuSave.className = \"dropdown-item\";\n        mnuSave.href = \"#\";\n        mnuSave.textContent = _(\"Save swatches to your computer...\");\n        mnuSave.addEventListener(\"click\", function (e) {\n            e.preventDefault();\n\n            saveSwatches();\n        });\n\n        mnuLoad.className = \"dropdown-item\";\n        mnuLoad.href = \"#\";\n        mnuLoad.textContent = _(\"Load swatches from your computer...\");\n        mnuLoad.addEventListener(\"click\", function (e) {\n            e.preventDefault();\n\n            loadSwatches();\n        });\n\n        settingsMenu.className = \"dropdown-menu\";\n\n        let limnuSave = document.createElement(\"li\");\n        let limnuLoad = document.createElement(\"li\");\n        limnuSave.appendChild(mnuSave); //liで囲う\n        limnuLoad.appendChild(mnuLoad); //liで囲う\n        settingsMenu.appendChild(limnuSave);\n        settingsMenu.appendChild(limnuLoad);\n\n        let btnSettingsContainer = document.createElement(\"div\");\n\n        btnSettingsContainer.className = \"btn-group\";\n        btnSettingsContainer.appendChild(btnSettings);\n        btnSettingsContainer.appendChild(settingsMenu);\n\n        btnAdd.addEventListener(\"click\", function (e) {\n            addSwatch(controller.getCurColor().getRgb());\n            modified = true;\n        });\n\n        buttonPanel.className = \"chickenpaint-color-swatches-buttons\";\n\n        // Don't offer to load/save swatches if we don't have the file API needed for reading them\n        if (fileAPIsSupported()) {\n            fileInput = document.createElement(\"input\");\n\n            fileInput.type = \"file\";\n            fileInput.multiple = false;\n            fileInput.style.display = \"none\";\n\n            buttonPanel.appendChild(btnSettingsContainer);\n            buttonPanel.appendChild(fileInput);\n        }\n\n        buttonPanel.appendChild(btnAdd);\n    }\n\n    initSwatchPanel();\n    this.getBodyElement().appendChild(swatchPanel);\n\n    initButtonsPanel();\n    this.getBodyElement().appendChild(buttonPanel);\n}\n\nCPSwatchesPalette.prototype = Object.create(CPPalette.prototype);\nCPSwatchesPalette.prototype.constructor = CPSwatchesPalette;\n","/*\n    ChickenPaint\n    \n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\n    by Nicholas Sherlock / Chicken Smoothie.\n    \n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n    ChickenPaint is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ChickenPaint is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport key from \"../../lib/keymaster.js\";\nimport { _ } from \"../languages/lang.js\";\n\nconst MENU_ENTRIES = [\n    {\n        name: \"File\",\n        mnemonic: \"F\",\n        children: [\n            {\n                name: \"Save to my computer\",\n                action: \"CPSave\",\n                mnemonic: \"S\",\n                shortcut: \"ctrl+s\",\n            },\n            {\n                name: \"Save Oekaki\",\n                action: \"CPSend\",\n                mnemonic: \"S\",\n                shortcut: \"ctrl+s\",\n            },\n        ],\n    },\n    {\n        name: \"Edit\",\n        mnemonic: \"E\",\n        children: [\n            {\n                name: \"Undo\",\n                action: \"CPUndo\",\n                mnemonic: \"U\",\n                shortcut: \"ctrl+z\",\n            },\n            {\n                name: \"Redo\",\n                action: \"CPRedo\",\n                mnemonic: \"R\",\n                shortcut: \"ctrl+y\",\n            },\n            {\n                name: \"Clear history\",\n                action: \"CPClearHistory\",\n                mnemonic: \"H\",\n                title: _(\"Removes all undo/redo information to regain memory\"),\n            },\n            {\n                name: \"-\",\n            },\n            {\n                name: \"Cut\",\n                action: \"CPCut\",\n                mnemonic: \"T\",\n                shortcut: \"ctrl+x\",\n            },\n            {\n                name: \"Copy\",\n                action: \"CPCopy\",\n                mnemonic: \"C\",\n                shortcut: \"ctrl+c\",\n            },\n            {\n                name: \"Copy merged\",\n                action: \"CPCopyMerged\",\n                mnemonic: \"Y\",\n                shortcut: \"shift+ctrl+c\",\n            },\n            {\n                name: \"Paste\",\n                action: \"CPPaste\",\n                mnemonic: \"P\",\n                shortcut: \"ctrl+v\",\n            },\n            {\n                name: \"-\",\n            },\n            {\n                name: \"Select all\",\n                action: \"CPSelectAll\",\n                mnemonic: \"A\",\n                shortcut: \"ctrl+a\",\n            },\n            {\n                name: \"Deselect\",\n                action: \"CPDeselectAll\",\n                mnemonic: \"D\",\n                shortcut: \"ctrl+d\",\n            },\n            {\n                name: \"-\",\n            },\n            {\n                name: \"Transform\",\n                action: \"CPTransform\",\n                mnemonic: \"T\",\n                shortcut: \"ctrl+h\",\n            },\n        ],\n    },\n    {\n        name: \"Layers\",\n        mnemonic: \"L\",\n        children: [\n            {\n                name: \"Duplicate\",\n                action: \"CPLayerDuplicate\",\n                mnemonic: \"D\",\n                shortcut: \"shift+ctrl+d\",\n            },\n            {\n                name: \"-\",\n            },\n            {\n                name: \"Merge down\",\n                action: \"CPLayerMergeDown\",\n                mnemonic: \"E\",\n                shortcut: \"ctrl+e\",\n            },\n            {\n                name: \"Merge group\",\n                action: \"CPGroupMerge\",\n                mnemonic: \"G\",\n                shortcut: \"shift+ctrl+g\",\n            },\n            {\n                name: \"Merge all layers\",\n                action: \"CPLayerMergeAll\",\n                shortcut: \"shift+ctrl+e\",\n                mnemonic: \"A\",\n            },\n            {\n                name: \"Add Merged Layer\",\n                action: \"CPAddMergedLayer\",\n                shortcut: \"shift+alt+e\",\n            },\n            {\n                name: \"-\",\n            },\n            {\n                hideIfNotAvailable: true,\n                name: \"Add layer mask\",\n                action: \"CPAddLayerMask\",\n            },\n            {\n                hideIfNotAvailable: true,\n                name: \"Delete layer mask\",\n                action: \"CPRemoveLayerMask\",\n                shortcut: \"shift+m\",\n            },\n            {\n                hideIfNotAvailable: true,\n                name: \"Apply layer mask\",\n                action: \"CPApplyLayerMask\",\n                shortcut: \"ctrl+m\",\n            },\n            {\n                name: \"-\",\n            },\n            {\n                hideIfNotAvailable: true,\n                name: \"Clip to the layer below\",\n                action: \"CPCreateClippingMask\",\n            },\n            {\n                hideIfNotAvailable: true,\n                name: \"Unclip from the layer below\",\n                action: \"CPReleaseClippingMask\",\n            },\n        ],\n    },\n    {\n        name: \"Effects\",\n        mnemonic: \"E\",\n        children: [\n            {\n                name: \"Clear\",\n                action: \"CPClear\",\n                mnemonic: \"D\",\n                shortcut: \"del,backspace\",\n            },\n            {\n                name: \"Fill\",\n                action: \"CPFill\",\n                mnemonic: \"F\",\n                shortcut: \"ctrl+f\",\n            },\n            {\n                name: \"Flip horizontal\",\n                action: \"CPHFlip\",\n                mnemonic: \"Q\",\n                shortcut: \"q\",\n            },\n            {\n                name: \"Flip vertical\",\n                action: \"CPVFlip\",\n                mnemonic: \"V\",\n            },\n            {\n                name: \"Invert\",\n                action: \"CPFXInvert\",\n                mnemonic: \"I\",\n                shortcut: \"ctrl+i\",\n                title: _(\"Invert the image colors\"),\n            },\n            {\n                name: \"-\",\n            },\n            {\n                name: \"Convert brightness to opacity\",\n                action: \"CPBrightnessToOpacity\",\n                mnemonic: \"B\",\n                title: _(\"Convert brightness to opacity\"),\n            },\n            {\n                name: \"-\",\n            },\n            {\n                name: \"Box blur...\",\n                action: \"CPFXBoxBlur\",\n                mnemonic: \"B\",\n            },\n            {\n                name: \"-\",\n            },\n            {\n                name: \"Monochromatic noise\",\n                action: \"CPMNoise\",\n                mnemonic: \"M\",\n                title: _(\"Fills the selection with noise\"),\n            },\n            {\n                name: \"Color noise\",\n                action: \"CPCNoise\",\n                mnemonic: \"C\",\n                title: _(\"Fills the selection with colored noise\"),\n            },\n        ],\n    },\n    {\n        name: \"View\",\n        mnemonic: \"V\",\n        children: [\n            {\n                name: \"Full-screen mode\",\n                action: \"CPFullScreen\",\n                mnemonic: \"F\",\n                checkbox: true,\n                checked: false,\n            },\n            {\n                name: \"-\",\n            },\n            {\n                name: \"Zoom in\",\n                action: \"CPZoomIn\",\n                mnemonic: \"I\",\n                shortcut: \"=\",\n            },\n            {\n                name: \"Zoom out\",\n                action: \"CPZoomOut\",\n                mnemonic: \"O\",\n                shortcut: \"-\",\n            },\n            {\n                name: \"Zoom 100%\",\n                action: \"CPZoom100\",\n                mnemonic: \"1\",\n                shortcut: \"ctrl+0\",\n            },\n            {\n                name: \"-\",\n            },\n            {\n                name: \"Reset Rotation\",\n                action: \"CPResetCanvasRotation\",\n                mnemonic: \"R\",\n                shortcut: \"alt+0\",\n            },\n            {\n                name: \"-\",\n            },\n            {\n                name: \"Flip View Horizontal\",\n                action: \"CPViewHFlip\",\n                mnemonic: \"H\",\n                shortcut: \"h\",\n            },\n            {\n                name: \"-\",\n            },\n            {\n                name: \"Smooth-out zoomed canvas\",\n                action: \"CPLinearInterpolation\",\n                mnemonic: \"L\",\n                title: _(\n                    \"Linear interpolation is used to give a smoothed looked to the picture when zoomed in\"\n                ),\n                checkbox: true,\n                checked: true, //初期状態でズームのアンチエイリアスをOnに\n            },\n            {\n                name: \"-\",\n            },\n            {\n                name: \"Show grid\",\n                action: \"CPToggleGrid\",\n                mnemonic: \"G\",\n                shortcut: \"ctrl+g\",\n                checkbox: true,\n                checked: false,\n            },\n            {\n                name: \"Grid options...\",\n                action: \"CPGridOptions\",\n                mnemonic: \"D\",\n            },\n        ],\n    },\n    {\n        name: \"Palettes\",\n        mnemonic: \"P\",\n        children: [\n            {\n                name: \"Rearrange\",\n                action: \"CPArrangePalettes\",\n                title: _(\"Rearrange the palette windows\"),\n            },\n            {\n                name: \"Toggle palettes\",\n                action: \"CPTogglePalettes\",\n                mnemonic: \"P\",\n                shortcut: \"tab\",\n                title: _(\"Hides or shows all palettes\"),\n            },\n            {\n                name: \"-\",\n            },\n            {\n                name: \"Show tools\",\n                action: \"CPPalTool\",\n                mnemonic: \"T\",\n                checkbox: true,\n                checked: true,\n            },\n            {\n                name: \"Show color\",\n                action: \"CPPalColor\",\n                mnemonic: \"C\",\n                checkbox: true,\n                checked: true,\n            },\n            {\n                name: \"Show stroke\",\n                action: \"CPPalStroke\",\n                mnemonic: \"S\",\n                checkbox: true,\n                checked: true,\n            },\n            {\n                name: \"Show misc\",\n                action: \"CPPalMisc\",\n                mnemonic: \"M\",\n                checkbox: true,\n                checked: true,\n            },\n            {\n                name: \"Show swatches\",\n                action: \"CPPalSwatches\",\n                mnemonic: \"W\",\n                checkbox: true,\n                checked: true,\n            },\n            {\n                name: \"Show textures\",\n                action: \"CPPalTextures\",\n                mnemonic: \"X\",\n                checkbox: true,\n                checked: true,\n            },\n            {\n                name: \"Show tool options\",\n                action: \"CPPalBrush\",\n                mnemonic: \"B\",\n                checkbox: true,\n                checked: true,\n            },\n            {\n                name: \"Show layers\",\n                action: \"CPPalLayers\",\n                mnemonic: \"L\",\n                checkbox: true,\n                checked: true,\n            },\n        ],\n    },\n    {\n        name: \"Help\",\n        mnemonic: \"H\",\n        children: [\n            {\n                name: \"Tablet support\",\n                mnemonic: \"T\",\n                action: \"CPTabletSupport\",\n            },\n            {\n                name: \"Shortcuts\",\n                mnemonic: \"S\",\n                action: \"CPShortcuts\",\n            },\n            {\n                name: \"-\",\n            },\n            {\n                name: \"About\",\n                mnemonic: \"A\",\n                action: \"CPAbout\",\n            },\n        ],\n    },\n];\n\nexport default function CPMainMenu(controller, mainGUI) {\n    const bar = document.createElement(\"nav\");\n    bar.className = \"navbar navbar-expand-md bg-light\";\n    bar.innerHTML = `\n    <div class=\"navbar-upper\">\n      <a class=\"navbar-brand\" href=\"#\">ChickenPaint Be</a>\n      <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#chickenpaint-main-menu-content\" aria-controls=\"chickenpaint-main-menu-content\" aria-expanded=\"false\" aria-label=\"Toggle main menu\">\n        <span class=\"navbar-toggler-icon\"></span>\n      </button>\n    </div>\n    <div class=\"collapse navbar-collapse\" id=\"chickenpaint-main-menu-content\">\n      <div class=\"navbar-nav\"></div>\n    </div>\n    <div class=\"widget-nav\" id=\"chickenpaint-palette-toggler-content\"></div>\n  `;\n\n    const macPlatform = navigator.userAgent.toLowerCase().includes(\"mac os\");\n\n    bar.addEventListener(\"touchmove\", (e) => e.preventDefault(), {\n        passive: false,\n    });\n\n    function menuItemClicked(target) {\n        const action = target.dataset.action;\n        const checkbox = target.dataset.checkbox === \"true\";\n        let selected;\n\n        if (controller.isActionAllowed(action)) {\n            if (checkbox) {\n                target.classList.toggle(\"selected\");\n                selected = target.classList.contains(\"selected\");\n            } else {\n                selected = false;\n            }\n\n            controller.actionPerformed({ action, checkbox, selected });\n        }\n    }\n\n    function presentShortcutText(shortcut) {\n        shortcut = shortcut\n            .toUpperCase()\n            .replace(/(,.+)$/, \"\")\n            .replace(\"=\", \"+\");\n        return macPlatform\n            ? shortcut.replace(/([^+])\\+/g, \"$1\")\n            : shortcut.replace(/([^+])\\+/g, \"$1 \");\n    }\n\n    function updateMenuStates(menuElem) {\n        menuElem.querySelectorAll(\"[data-action]\").forEach((elem) => {\n            const action = elem.dataset.action;\n            const allowed = controller.isActionAllowed(action);\n            elem.classList.toggle(\"disabled\", !allowed);\n            if (elem.dataset.hideIfNotAvailable === \"true\") {\n                elem.classList.toggle(\"hidden\", !allowed);\n            }\n        });\n\n        menuElem\n            .querySelectorAll(\".dropdown-divider\")\n            .forEach((div) => div.classList.remove(\"hidden\"));\n\n        const visible = Array.from(\n            menuElem.querySelectorAll(\n                \".dropdown-item:not(.hidden), .dropdown-divider:not(.hidden)\"\n            )\n        );\n        let lastDivider = null;\n\n        visible.forEach((el, i) => {\n            if (el.classList.contains(\"dropdown-divider\")) {\n                if (i === 0 || lastDivider) el.classList.add(\"hidden\");\n                else lastDivider = el;\n            } else {\n                lastDivider = null;\n            }\n        });\n        if (lastDivider) lastDivider.classList.add(\"hidden\");\n    }\n\n    function fillMenu(menuElem, entries) {\n        entries.forEach((topEntry) => {\n            const div = document.createElement(\"div\");\n            div.className = \"nav-item dropdown\";\n            div.innerHTML = `\n        <a href=\"#\" class=\"nav-link dropdown-toggle\" role=\"button\" data-bs-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">${_(\n            topEntry.name\n        )}</a>\n        <ul class=\"dropdown-menu\"></ul>\n      `;\n\n            const dropdownMenu = div.querySelector(\".dropdown-menu\");\n\n            // ドロップダウンメニューのフォーカスを外す\n            // 変形操作で↓キーを押下時にメニューが開くのを防止\n            function blurIfDropdownFocused() {\n                setTimeout(() => {\n                    const activeEl = document.activeElement;\n                    if (\n                        activeEl instanceof HTMLElement &&\n                        (activeEl.matches('[data-bs-toggle=\"dropdown\"]') ||\n                            activeEl.matches(\".dropdown-item\") ||\n                            activeEl.closest(\".dropdown-menu\"))\n                    ) {\n                        activeEl.blur();\n                    }\n                }, 10);\n            }\n            div.querySelector(\".dropdown-toggle\")?.addEventListener(\n                \"show.bs.dropdown\",\n                () => {\n                    // ドロップダウンメニューのフォーカスを外す\n                    // 変形操作で↓キーを押下時にメニューが開くのを防止\n                    blurIfDropdownFocused();\n                    updateMenuStates(div);\n                }\n            );\n\n            div.querySelector(\".dropdown-toggle\")?.addEventListener(\n                \"hide.bs.dropdown\",\n                () => {\n                    // ドロップダウンメニューのフォーカスを外す\n                    // 変形操作で↓キーを押下時にメニューが開くのを防止\n                    blurIfDropdownFocused();\n                }\n            );\n\n            topEntry.children.forEach((entry) => {\n                if (entry.name === \"-\") {\n                    // 区切り線の場合は直接処理\n                    const entryElem = document.createElement(\"hr\");\n                    entryElem.className = \"dropdown-divider\";\n                    dropdownMenu?.appendChild(entryElem);\n                    return; // この後の処理は不要なので、次のエントリに進む\n                }\n\n                if (\n                    !entry.action ||\n                    !controller.isActionSupported(entry.action)\n                )\n                    return;\n\n                if (\n                    entry.action === \"CPSend\" &&\n                    !controller.isActionSupported(\"CPContinue\")\n                ) {\n                    entry.name = _(\"Post Oekaki\");\n                    entry.shortcut = \"ctrl+p\";\n                }\n\n                let entryElem;\n                entryElem = document.createElement(\"a\");\n                entryElem.className = \"dropdown-item\";\n                entryElem.href = \"#\";\n                entryElem.dataset.action = entry.action;\n                entryElem.innerHTML = `<span>${_(entry.name)}</span>`;\n\n                if (entry.checkbox) {\n                    entryElem.dataset.checkbox = \"true\";\n                    if (entry.checked) entryElem.classList.add(\"selected\");\n                }\n                if (entry.hideIfNotAvailable) {\n                    entryElem.dataset.hideIfNotAvailable = \"true\";\n                }\n                if (entry.title) {\n                    entryElem.title = _(entry.title);\n                }\n                if (entry.shortcut) {\n                    if (macPlatform) {\n                        entry.shortcut = entry.shortcut\n                            .replace(/SHIFT/im, \"⇧\")\n                            .replace(/ALT/im, \"⌥\")\n                            .replace(/CTRL/im, \"⌘\");\n                    }\n                    const small = document.createElement(\"small\");\n                    small.className = \"chickenpaint-shortcut\";\n                    small.textContent = presentShortcutText(entry.shortcut);\n                    entryElem.appendChild(small);\n                    key(entry.shortcut, (e) => {\n                        menuItemClicked(entryElem);\n                        e.preventDefault();\n                        e.stopPropagation();\n                        return false;\n                    });\n                }\n\n                const li = document.createElement(\"li\");\n                li.appendChild(entryElem);\n                dropdownMenu.appendChild(li);\n            });\n            menuElem.appendChild(div);\n        });\n    }\n\n    function fillWidgetTray(menuElem, entries) {\n        entries\n            .filter((e) => e.mnemonic && controller.isActionSupported(e.action))\n            .forEach((entry) => {\n                const btn = document.createElement(\"button\");\n                btn.className = \"widget-toggler selected\";\n                btn.type = \"button\";\n                btn.dataset.action = entry.action;\n                btn.dataset.checkbox = \"true\";\n                btn.dataset.selected = (!entry.checked).toString();\n                btn.innerHTML = `<span>${entry.mnemonic}</span>`;\n\n                btn.addEventListener(\"click\", (e) => {\n                    menuItemClicked(btn);\n                    e.preventDefault();\n                });\n\n                menuElem.appendChild(btn);\n            });\n    }\n\n    bar.addEventListener(\"click\", (e) => {\n        const target = e.target.closest(\"a:not(.dropdown-toggle)\");\n        if (target) {\n            menuItemClicked(target);\n            e.preventDefault();\n        }\n    });\n\n    /**\n     * 指定されたパレットの表示状態に応じて、対応するトグルボタンやメニュー項目の\n     * \"selected\" クラスの付け外しを行う。\n     *\n     * @param {string} paletteName - パレット名（例: \"Tool\", \"Color\"など）\n     * @param {boolean} show - パレットが表示されている場合は true、非表示の場合は false\n     *\n     * ボタンは #chickenpaint-palette-toggler-content 内の[data-action=CPPalXxx]要素を対象とし、\n     * メニュー項目は bar 要素内の[data-action=CPPalXxx]要素を対象とする。\n     * これらをまとめて処理し、\"selected\" クラスを適切に切り替える。\n     */\n    function onPaletteVisChange(paletteName, show) {\n        const key =\n            \"CPPal\" +\n            paletteName.charAt(0).toUpperCase() +\n            paletteName.slice(1);\n\n        const palette_toggler_content = document.getElementById(\n            \"chickenpaint-palette-toggler-content\"\n        ); //'button'\n\n        const buttons =\n            palette_toggler_content?.querySelectorAll(\n                `[data-action=\"${key}\"]`\n            ) || [];\n        const menus = bar?.querySelectorAll(`[data-action=\"${key}\"]`) || [];\n        // 両方を一つにまとめて処理\n        [...buttons, ...menus].forEach((element) => {\n            element.classList.toggle(\"selected\", show);\n        });\n    }\n\n    fillMenu(bar.querySelector(\".navbar-nav\"), MENU_ENTRIES);\n    fillWidgetTray(bar.querySelector(\".widget-nav\"), MENU_ENTRIES[5].children);\n\n    mainGUI.getPaletteManager().on(\"paletteVisChange\", onPaletteVisChange);\n\n    const fullScreenToggle = bar.querySelector(\n        \".dropdown-item[data-action=CPFullScreen]\"\n    );\n    controller.on(\"fullScreen\", (isFS) =>\n        fullScreenToggle?.classList.toggle(\"selected\", isFS)\n    );\n    fullScreenToggle?.classList.toggle(\"selected\", controller.isFullScreen());\n\n    this.getElement = () => bar;\n}\n","/*\n    ChickenPaint\n    \n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\n    by Nicholas Sherlock / Chicken Smoothie.\n    \n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n    ChickenPaint is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ChickenPaint is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\nimport * as bootstrap from 'bootstrap/dist/js/bootstrap.bundle.min.js';\n\nexport default function CPAboutDialog(parent) {\n    // ダイアログのHTML構造\n    var dialog = document.createElement('div');\n    dialog.classList.add('modal', 'fade', 'chickenpaint-about-dialog');\n    dialog.setAttribute('tabindex', '-1');\n    dialog.setAttribute('role', 'dialog');\n\n    dialog.innerHTML = `\n        <div class=\"modal-dialog\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h5 class=\"modal-title\">About ChickenPaint Be</h5>\n                    <button type=\"button\" class=\"btn btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                </div>\n                <div class=\"modal-body\">\n                    <a class=\"chickenpaint-on-github\" target=\"_blank\" href=\"https://github.com/satopian/ChickenPaint_Be\" rel=\"noopener\">\n                        <span class=\"icon-github\"></span> ChickenPaint Be on GitHub\n                    </a>\n                    <p>\n                        ChickenPaint Be is a customized version of <a href=\"https://github.com/thenickdude/chickenpaint\" target=\"_blank\" rel=\"noopener\">ChickenPaint</a> by satopian.\n                    </p>\n                    <p>\n                        Built on: ${process.env.BUILD_TIME}<br>\n                        <a href=\"https://www.gnu.org/licenses/\" target=\"_blank\" rel=\"noopener\">GNU General Public License</a><br>\n                    </p>\n                    <a class=\"chickenpaint-on-github\" target=\"_blank\" href=\"https://github.com/thenickdude/chickenpaint\" rel=\"noopener\">\n                        <span class=\"icon-github\"></span> ChickenPaint on GitHub\n                    </a>\n\n                    <p>\n                        ChickenPaint is a translation of <a href=\"https://github.com/thenickdude/chibipaint\" target=\"_blank\" rel=\"noopener\">ChibiPaint</a>\n                        from Java to JavaScript by Nicholas Sherlock / Chicken Smoothie\n                    </p>\n                    <p>\n                        ChibiPaint is Copyright (c) 2006-2008 Marc Schefer. All Rights Reserved\n                    </p>\n                    <p>\n                        ChickenPaint is free software: you can redistribute it and/or modify\n                        it under the terms of the GNU General Public License as published by\n                        the Free Software Foundation, either version 3 of the License, or\n                        (at your option) any later version.\n                    </p>\n                    <p>\n                        ChickenPaint is distributed in the hope that it will be useful,\n                        but WITHOUT ANY WARRANTY; without even the implied warranty of\n                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n                        <a target=\"_blank\" href=\"https://www.gnu.org/licenses/\" rel=\"noopener\">GNU General Public License</a> for more details.\n                    </p>\n<pre class=\"pre-scrollable chickenpaint-third-party-licenses\">Toolbar icons designed by <a target=\"_blank\" href=\"https://github.com/Anteira\" rel=\"noopener\">Miglena Lapavicheva (Anteira)</a>\n    These icons are dual-licensed under <a target=\"_blank\" href=\"https://spdx.org/licenses/GPL-3.0-or-later.html\" rel=\"noopener\">GPL-3.0-or-later</a> and <a target=\"_blank\" href=\"https://creativecommons.org/licenses/by/3.0/\" rel=\"noopener\">CC-BY-3.0</a>\n\nIncludes these MIT-licensed libraries:\n\n    Includes the <a target=\"_blank\" href=\"https://github.com/eligrey/FileSaver.js\" rel=\"noopener\">FileSaver.js library</a>\n    Copyright (c) 2016 <a target=\"_blank\" href=\"https://eligrey.com/\" rel=\"noopener\">Eli Grey</a>\n\n    Includes the <a target=\"_blank\" href=\"https://github.com/nodeca/pako\" rel=\"noopener\">Pako zlib compression library</a>\n    Copyright (c) 2014-2017 by Vitaly Puzrin and Andrei Tuputcyn\n    \n    Includes the <a target=\"_blank\" href=\"https://github.com/madrobby/keymaster\" rel=\"noopener\">keymaster.js</a> keyboard library\n    Copyright (c) 2011-2013 Thomas Fuchs\n\n    Includes the <a target=\"_blank\" href=\"https://benalman.com/projects/jquery-throttle-debounce-plugin/\" rel=\"noopener\">jQuery throttle-debounce</a> library\n    Copyright (c) 2010 \"Cowboy\" Ben Alman\n    \n    Includes the <a href=\"https://getbootstrap.com/\" target=\"_blank\" rel=\"noopener\">Bootstrap</a> \n    Copyright (c) 2011-2025 <a href=\"https://github.com/twbs/bootstrap/blob/main/LICENSE\" target=\"_blank\" rel=\"noopener\">The Bootstrap Authors</a>\n\n    MIT License\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation\n    files (the \"Software\"), to deal in the Software without\n    restriction, including without limitation the rights to use,\n    copy, modify, merge, publish, distribute, sublicense, and/or\n    sell copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following\n    conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT \n    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n    OTHER DEALINGS IN THE SOFTWARE.\n\nIncludes Font Awesome by Fonticons, Inc. - <a href=\"https://fontawesome.com/\" target=\"_blank\" rel=\"noopener\">https://fontawesome.com/</a>\nIncludes Material Design icons by Google - <a href=\"https://fonts.google.com/\" target=\"_blank\" rel=\"noopener\">https://fonts.google.com/</a>\n                    </pre>\n                </div>\n            </div>\n        </div>\n    `;\n\n    parent.appendChild(dialog);\n\n    // Bootstrap 5 の Modal インスタンスを作成\n    var modalInstance = new bootstrap.Modal(dialog);\n\n    // モーダルのクローズ時にダイアログを削除\n    dialog.addEventListener('hidden.bs.modal', () => {\n        dialog.remove();\n    });\n\n    // モーダル表示用のメソッドを返す\n    return {\n        show: function () {\n            modalInstance.show();\n        }\n    };\n}\n","/*\n\tChickenPaint\n\n\tChickenPaint is a translation of ChibiPaint from Java to JavaScript\n\tby Nicholas Sherlock / Chicken Smoothie.\n\n\tChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n\tChickenPaint is free software: you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation, either version 3 of the License, or\n\t(at your option) any later version.\n\n\tChickenPaint is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport EventEmitter from \"wolfy87-eventemitter\";\nimport * as bootstrap from \"bootstrap/dist/js/bootstrap.bundle.min.js\";\nimport { _ } from \"../languages/lang.js\";\n\nexport default function CPConfirmTransformDialog(parent, controller) {\n    // ダイアログ要素を作成\n    const dialog = document.createElement(\"div\");\n    dialog.classList.add(\"modal\", \"fade\");\n    dialog.setAttribute(\"tabindex\", \"-1\");\n    dialog.setAttribute(\"role\", \"dialog\");\n    dialog.innerHTML = `\n        <div class=\"modal-dialog\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h5 class=\"modal-title\">${_(\"Complete transform\")}</h5>\n                    <button type=\"button\" class=\"btn btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                </div>\n                <div class=\"modal-body\">\n                    <p>\n                        ${_(\n                            \"You need to finish transforming this layer before you can do that. What would you like to do with the transform?\"\n                        )}\n                    </p>\n                </div>\n                <div class=\"modal-footer\">\n                    <button type=\"button\" class=\"btn btn-light chickenpaint-cancel-transform\" data-bs-dismiss=\"modal\">${_(\n                        \"Cancel\"\n                    )}</button>\n                    <button type=\"button\" class=\"btn btn-light chickenpaint-reject-transform\" data-bs-dismiss=\"modal\">${_(\n                        \"Undo transform\"\n                    )}</button>\n                    <button type=\"button\" class=\"btn btn-primary chickenpaint-accept-transform\" data-bs-dismiss=\"modal\">${_(\n                        \"Apply transform\"\n                    )}</button>\n                </div>\n            </div>\n        </div>\n    `;\n\n    // ボタン要素を取得\n    const that = this;\n    const applyButton = dialog.querySelector(\".chickenpaint-accept-transform\");\n    const rejectButton = dialog.querySelector(\".chickenpaint-reject-transform\");\n    const cancelButton = dialog.querySelector(\".chickenpaint-cancel-transform\");\n\n    // イベントリスナーを追加\n    applyButton?.addEventListener(\"click\", function (e) {\n        controller.actionPerformed({ action: \"CPTransformAccept\" });\n        that.emitEvent(\"accept\");\n        modal.hide();\n    });\n\n    rejectButton?.addEventListener(\"click\", function (e) {\n        controller.actionPerformed({ action: \"CPTransformReject\" });\n        that.emitEvent(\"reject\");\n        modal.hide();\n    });\n\n    cancelButton?.addEventListener(\"click\", function (e) {\n        modal.hide();\n    });\n\n    // Bootstrap 5: Modalコンストラクタを使用してmodalを初期化\n    const modal = new bootstrap.Modal(dialog);\n\n    // モーダル表示用のメソッド\n    this.show = function () {\n        modal.show();\n    };\n    //モーダルを閉じるメソッド\n    this.hide = function () {\n        modal.hide();\n    };\n\n    // モーダルが閉じられた後の処理\n    dialog.addEventListener(\"hidden.bs.modal\", (e) => {\n        dialog.remove();\n    });\n\n    // Enterキーが押されたときの処理\n    function keydown_EnterKey(e) {\n        if (e.key === \"Enter\") {\n            // Enterキーが押されたら非表示にする\n            modal.hide();\n            controller.actionPerformed({ action: \"CPTransformAccept\" }); // 変形確定\n            that.emitEvent(\"accept\");\n            parent.removeEventListener(\"keydown\", keydown_EnterKey);\n        }\n    }\n\n    parent.addEventListener(\"keydown\", keydown_EnterKey);\n\n    // 親要素にダイアログを追加\n    parent.appendChild(dialog);\n}\n\n// CPConfirmTransformDialogはEventEmitterを継承\nCPConfirmTransformDialog.prototype = Object.create(EventEmitter.prototype);\nCPConfirmTransformDialog.prototype.constructor = CPConfirmTransformDialog;\n","/*\n    ChickenPaint\n    \n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\n    by Nicholas Sherlock / Chicken Smoothie.\n    \n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n    ChickenPaint is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ChickenPaint is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport * as bootstrap from 'bootstrap/dist/js/bootstrap.bundle.min.js';\nimport {_} from \"../languages/lang.js\";\n\nconst macPlatform = navigator.userAgent.toLowerCase().includes('mac os');\nconst Ctrl = macPlatform ? \"⌘\" : \"Ctrl\";\nconst Alt = macPlatform ? \"⌥\" : \"Alt\";\nconst ctrlForZoom = macPlatform ? '⌃' : \"Ctrl\";\n\nexport default function CPShortcutsDialog(parent) {\n    const dialog = document.createElement('div');\n    dialog.classList.add('modal', 'fade', 'chickenpaint-shortcuts-dialog');\n    dialog.tabIndex = -1;\n    dialog.role = 'dialog';\n    \n    dialog.innerHTML = `\n        <div class=\"modal-dialog modal-lg\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h5 class=\"modal-title\">${_(\"Shortcuts\")}</h5>\n                    <button type=\"button\" class=\"btn btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                </div>\n                <div class=\"modal-body\">\n                    <p>${_(\"Many of the menu options and painting tools have keyboard shortcuts which are written next to them or appear when you hover.\")}</p>\n                    <p>${_(\"Here are some other shortcuts which are not as obvious!\")}</p>\n                    <div class=\"chickenpaint-shortcuts-sections\">\n                        <div class=\"chickenpaint-shortcuts-section\">\n                            <h5>${_(\"Color swatches palette\")}</h5>\n                            <ul class=\"chickenpaint-shortcuts-list list-unstyled\">\n                                <li>\n                                    <dl>\n                                        <dt><span class=\"chickenpaint-shortcut\"><span class=\"fa icon-mouse-pointer\"></span> ${_(\"Left\")}</span></dt>\n                                        <dd>${_(\"Use as the drawing color\")}</dd>\n                                        <dt><span class=\"chickenpaint-shortcut\"><span class=\"fa icon-mouse-pointer\"></span> ${_(\"Right\")}</span></dt>\n                                        <dd>${_(\"Remove or replace a color swatch\")}</dd>\n                                    </dl>\n                                </li>\n                            </ul>\n                        </div>\n                        <div class=\"chickenpaint-shortcuts-section\">\n                            <h5>${_(\"Line drawing mode\")}</h5>\n                            <ul class=\"chickenpaint-shortcuts-list list-unstyled\">\n                                <li>\n                                    <dl>\n                                        <dt><span class=\"chickenpaint-shortcut\"><span class=\"chickenpaint-shortcut-key\">Shift</span> + <span class=\"fa icon-mouse-pointer\"></span> ${_(\"Left\")}</span></dt>\n                                        <dd>${_(\"Snap line to nearest 45 degrees\")}</dd>\n                                    </dl>\n                                </li>\n                            </ul>\n                        </div>\n                        <div class=\"chickenpaint-shortcuts-section\">\n                            <h5>${_(\"Painting tools\")}</h5>\n                            <ul class=\"chickenpaint-shortcuts-list list-unstyled\">\n                                <li>\n                                    <dl>\n                                        <dt><span class=\"chickenpaint-shortcut\"><span class=\"chickenpaint-shortcut-key\">1</span> - <span class=\"chickenpaint-shortcut-key\">9</span>, <span class=\"chickenpaint-shortcut-key\">0</span></span></dt>\n                                        <dd>${_(\"Change brush opacity\")}</dd>\n                                        <dt><span class=\"chickenpaint-shortcut\"><span class=\"chickenpaint-shortcut-key\">[</span>, <span class=\"chickenpaint-shortcut-key\">]</span></span></dt>\n                                        <dd>${_(\"Change brush size\")}</dd>\n                                    </dl>\n                                </li>\n                            </ul>\n                        </div>\n                        <div class=\"chickenpaint-shortcuts-section\">\n                            <h5>${_(\"Brush palette\")}</h5>\n                            <ul class=\"chickenpaint-shortcuts-list list-unstyled\">\n                                <li>\n                                    <dl>\n                                        <dt><span class=\"chickenpaint-shortcut\"><span class=\"fa icon-mouse-pointer\"></span> ${_(\"Right\")}</span><span class=\"chickenpaint-shortcut-alternate\">${_(\"or\")}</span><span class=\"chickenpaint-shortcut\"><span class=\"chickenpaint-shortcut-key\">Shift</span> + <span class=\"fa icon-mouse-pointer\"></span> ${_(\"Left\")}</span></dt>\n                                        <dd>${_(\"Adjust brush sliders more precisely\")}</dd>\n                                    </dl>\n                                </li>\n                            </ul>\n                        </div>\n                        <div class=\"chickenpaint-shortcuts-section\">\n                            <h5>${_(\"Zoom\")}</h5>\n                            <ul class=\"chickenpaint-shortcuts-list list-unstyled\">\n                                <li>\n                                    <dl>\n                                        <dt><span class=\"chickenpaint-shortcut\"><span class=\"chickenpaint-shortcut-key\">${ctrlForZoom}</span>  + <span class=\"chickenpaint-shortcut-key\">Space</span> + <span class=\"fa icon-mouse-pointer\"></span> ${_(\"Left\")}</span><dt>\n                                        <dt><span class=\"chickenpaint-shortcut-alternate\">${_(\"or\")}</span>\n                                        <span class=\"chickenpaint-shortcut-key\">Z</span> + <span class=\"fa icon-mouse-pointer\"></span> ${_(\"Left\")}</span></dt>\n                                        <dd>${_(\"Zoom the canvas\")}</dd>\n                                    </dl>\n                                </li>\n                            </ul>\n                        </div>\n                        <div class=\"chickenpaint-shortcuts-section\">\n                            <h5>${_(\"Drawing canvas\")}</h5>\n                            <ul class=\"chickenpaint-shortcuts-list list-unstyled\">\n                                <li>\n                                    <dl>\n                                        <dt><span class=\"chickenpaint-shortcut\"><span class=\"fa icon-mouse-pointer\"></span> ${_(\"Middle\")}</span> <span class=\"chickenpaint-shortcut-alternate\">${_(\"or\")}</span> <span class=\"chickenpaint-shortcut\"><span class=\"chickenpaint-shortcut-key\">Space</span> + <span class=\"fa icon-mouse-pointer\"></span> ${_(\"Left\")}</span></dt>\n                                        <dd>${_(\"Move the canvas around\")}</dd>\n                                        <dt><span class=\"chickenpaint-shortcut\"><span class=\"chickenpaint-shortcut-key\">R</span> + <span class=\"fa icon-mouse-pointer\"></span> ${_(\"Left\")}</span></dt>\n                                        <dd>${_(\"Rotate the canvas\")}</dd>\n                                        <dt><span class=\"chickenpaint-shortcut\"><span class=\"fa icon-mouse-pointer\"></span> ${_(\"Right\")}</span><span class=\"chickenpaint-shortcut-alternate\">${_(\"or\")}</span><span class=\"chickenpaint-shortcut\"><span class=\"chickenpaint-shortcut-key\">${Alt}</span> + <span class=\"fa icon-mouse-pointer\"></span> ${_(\"Left\")}</span></dt>\n                                        <dd>${_(\"Sample the color under the cursor\")}</dd>\n                                        <dt><span class=\"chickenpaint-shortcut\"><span class=\"chickenpaint-shortcut-key\">H</span></dt>\n                                        <dd>${_(\"Flip View Horizontal\")}</dd>\n                                    </dl>\n                                </li>\n                            </ul>\n                        </div>\n                        <div class=\"chickenpaint-shortcuts-section\">\n                            <h5>${_(\"Layers palette\")}</h5>\n                            <ul class=\"chickenpaint-shortcuts-list list-unstyled\">\n                                <li>\n                                    <dl>\n                                        <dt><span class=\"chickenpaint-shortcut\"><span class=\"fa icon-mouse-pointer\"></span> ${_(\"Double click\")}</span><span class=\"chickenpaint-shortcut-alternate\">${_(\"or\")}</span><span class=\"chickenpaint-shortcut\"><span class=\"fa icon-mouse-pointer\"></span> ${_(\"Right\")}</span></dt>\n                                        <dd>${_(\"Rename layer\")}</dd>\n                                        <dt><span class=\"chickenpaint-shortcut\"><span class=\"chickenpaint-shortcut-key\">Shift</span> + <span class=\"fa icon-mouse-pointer\"></span> ${_(\"Left\")}</span></dt>\n                                        <dd>${_(\"Toggle mask enable/disable\")}</dd>\n                                        <dt><span class=\"chickenpaint-shortcut\"><span class=\"chickenpaint-shortcut-key\">${Alt}</span> + <span class=\"fa icon-mouse-pointer\"></span> ${_(\"Left\")}</span></dt>\n                                        <dd>${_(\"Toggle mask View\")}</dd>\n                                        <dt><span class=\"chickenpaint-shortcut\"><span class=\"chickenpaint-shortcut-key\">${Ctrl}</span> + <span class=\"fa icon-mouse-pointer\"></span> ${_(\"Left\")}</span></dt>\n                                        <dd>${_(\"Apply layer mask\")}</dd>\n                                        <dt><span class=\"chickenpaint-shortcut\"><span class=\"chickenpaint-shortcut-key\">Shift</span> + <span class=\"chickenpaint-shortcut-key\">${Ctrl}</span> + <span class=\"fa icon-mouse-pointer\"></span> ${_(\"Left\")}</span></dt>\n                                        <dd>${_(\"Delete layer mask\")}</dd>\n                                    </dl>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    `;\n\n    // Destroy the modal upon close\n    dialog.querySelector('.btn-close').addEventListener('click', () => {\n        dialog.remove();\n    });\n\n    // Initialize the modal using Bootstrap 5 methods\n    const modalInstance = new bootstrap.Modal(dialog);\n\n    parent.appendChild(dialog);\n\n    this.show = function () {\n        modalInstance.show();\n    };\n}\n","/*\n    ChickenPaint\n    \n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\n    by Nicholas Sherlock / Chicken Smoothie.\n    \n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n    ChickenPaint is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ChickenPaint is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport * as bootstrap from \"bootstrap/dist/js/bootstrap.bundle.min.js\";\nimport { _ } from \"../languages/lang.js\";\n\nexport default function CPBoxBlurDialog(parent, controller) {\n    // ダイアログ要素を作成\n    const dialog = document.createElement(\"div\");\n    dialog.classList.add(\"modal\", \"fade\");\n    dialog.setAttribute(\"tabindex\", \"-1\");\n    dialog.setAttribute(\"role\", \"dialog\");\n    dialog.innerHTML = `\n        <div class=\"modal-dialog\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h5 class=\"modal-title\">${_(\"Box blur\")}</h5>\n                    <button type=\"button\" class=\"btn btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                </div>\n                <div class=\"modal-body\">\n                    <form>\n                        <div class=\"form-group\">\n                            <label>${_(\"Blur amount (pixels)\")}</label>\n                            <input type=\"number\" class=\"form-control chickenpaint-blur-amount\" value=\"3\" min=\"1\">\n                        </div>\n                        <div class=\"form-group\">\n                            <label>${_(\"Iterations (1-8, larger gives smoother blur)\")}</label>\n                            <input type=\"number\" class=\"form-control chickenpaint-blur-iterations\" value=\"1\" min=\"1\" max=\"8\">\n                        </div>\n                    </form>\n                </div>\n                <div class=\"modal-footer\">\n                    <button type=\"button\" class=\"btn btn-light\" data-bs-dismiss=\"modal\">${_(\"Cancel\")}</button>\n                    <button type=\"button\" class=\"btn btn-primary chickenpaint-apply-box-blur\" data-bs-dismiss=\"modal\">${_(\"Ok\")}</button>\n                </div>\n            </div>\n        </div>\n    `;\n\n    const blurAmountElem = dialog.querySelector(\".chickenpaint-blur-amount\");\n    const blurIterationsElem = dialog.querySelector(\".chickenpaint-blur-iterations\");\n    const applyButton = dialog.querySelector(\".chickenpaint-apply-box-blur\");\n\n    // Bootstrap 5: Modalコンストラクタを使用してmodalを初期化\n    const modal = new bootstrap.Modal(dialog);\n\n    // モーダル表示用のメソッド\n    this.show = function () {\n        // ハンバガーメニューとモーダルの二重表示防止\n        const collapseElement = document.getElementById(\"chickenpaint-main-menu-content\");\n        if (collapseElement && collapseElement.classList.contains(\"show\")) {\n            const bsCollapse = new bootstrap.Collapse(collapseElement, {\n                toggle: false, // すでに閉じている場合のエラーを防ぐ\n            });\n            bsCollapse.hide();\n        }\n        // モーダルを表示\n        modal.show();\n    };\n\n    // モーダル内でOKボタンがクリックされた時の処理\n    applyButton.addEventListener(\"click\", (e) => {\n        let blur = Math.max(parseInt(blurAmountElem.value, 10), 1),\n            iterations = Math.min(Math.max(parseInt(blurIterationsElem.value, 10), 1), 8);\n\n        controller.getArtwork().boxBlur(blur, blur, iterations);\n        modal.hide(); // モーダルを閉じる\n    });\n\n    // モーダルが閉じられた後の処理\n    dialog.addEventListener(\"hidden.bs.modal\", () => {\n        document.activeElement.blur(); // フォーカスを外す\n        dialog.remove(); // ダイアログを削除\n    });\n\n    // モーダルが表示された時の処理\n    dialog.addEventListener(\"shown.bs.modal\", () => {\n        blurAmountElem.focus(); // フォーカスを入力欄に当てる\n    });\n\n    // エンターキーが押されたときの処理\n    dialog.addEventListener(\"keydown\", (e) => {\n        if (e.key === \"Enter\" && dialog.classList.contains(\"show\")) {\n            applyButton.click(); // OKボタンをクリック\n            e.preventDefault(); // デフォルトのフォーム送信を阻止\n        }\n    });\n\n    // 親要素にダイアログを追加\n    parent.appendChild(dialog);\n}\n","/*\n    ChickenPaint\n    \n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\n    by Nicholas Sherlock / Chicken Smoothie.\n    \n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n    ChickenPaint is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ChickenPaint is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport * as bootstrap from \"bootstrap/dist/js/bootstrap.bundle.min.js\";\n\nexport default function CPTabletDialog(parent) {\n    let dialog = document.createElement(\"div\");\n    dialog.classList.add(\"modal\", \"fade\");\n    dialog.setAttribute(\"tabindex\", \"-1\");\n    dialog.setAttribute(\"role\", \"dialog\");\n    dialog.innerHTML = `\n        <div class=\"modal-dialog\" role=\"document\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h5 class=\"modal-title\">Drawing tablet support</h5>\n                    <button type=\"button\" class=\"btn btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                </div>\n                <div class=\"modal-body\">\n                    <div class=\"chickenpaint-tablet-support chickenpaint-pointerevents-support\">\n                        <h5>\n                            Built-in support for most tablets.\n                            <small>macOS, Windows 10 or newer</small>\n                        </h5>\n                        <div class=\"chickenpaint-supported-browsers\">\n                            <div class=\"chickenpaint-supported-browser\">\n                                <span class=\"icon-chrome\"></span>\n                                Chrome\n                            </div>\n                            <div class=\"chickenpaint-supported-browser\">\n                                <span class=\"icon-edge\"></span>\n                                Edge (Windows 10)\n                            </div>\n                            <div class=\"chickenpaint-supported-browser\">\n                                <span class=\"icon-firefox\"></span>\n                                Firefox\n                            </div>\n                        </div>\n                        <p class=\"chickenpaint-not-supported\">\n                            Your browser doesn't have built-in support for drawing tablets, please try\n                            one of the other browsers listed above.\n                        </p>\n                        <p class=\"chickenpaint-supported alert alert-success\">\n                            Your browser has built-in support for drawing tablets!\n                        </p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    `;\n\n    const peSupportElem = dialog.querySelector(\n        \".chickenpaint-pointerevents-support\"\n    );\n    const peSupported = !!window.PointerEvent;\n\n    peSupportElem?.classList.toggle(\"supported\", peSupported);\n    peSupportElem?.classList.toggle(\"not-supported\", !peSupported);\n\n    // Destroy the modal upon close\n    dialog.addEventListener(\"hidden.bs.modal\", (e) => {\n        dialog.remove();\n    });\n\n    // Initialize the modal using Bootstrap 5 methods\n    const modalInstance = new bootstrap.Modal(dialog);\n\n    parent.appendChild(dialog);\n\n    // Show method\n    this.show = function () {\n        modalInstance.show();\n    };\n}\n","/*\n    ChickenPaint\n    \n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\n    by Nicholas Sherlock / Chicken Smoothie.\n    \n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n    ChickenPaint is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ChickenPaint is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport * as bootstrap from \"bootstrap/dist/js/bootstrap.bundle.min.js\";\nimport { _ } from \"../languages/lang.js\";\n\nexport default function CPGridDialog(parent, canvas) {\n    // ダイアログ要素を作成\n    const dialog = document.createElement(\"div\");\n    dialog.classList.add(\"modal\", \"fade\");\n    dialog.setAttribute(\"tabindex\", \"-1\");\n    dialog.setAttribute(\"role\", \"dialog\");\n    dialog.innerHTML = `\n        <div class=\"modal-dialog\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h5 class=\"modal-title\">${_(\"Grid options\")}</h5>\n                    <button type=\"button\" class=\"btn btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                </div>\n                <div class=\"modal-body\">\n                    <form>\n                        <div class=\"form-group\">\n                            <label>${_(\"Grid size\")}</label>\n                            <input type=\"number\" class=\"form-control chickenpaint-grid-size\" value=\"\" min=\"3\">\n                        </div>\n                    </form>\n                </div>\n                <div class=\"modal-footer\">\n                    <button type=\"button\" class=\"btn btn-light\" data-bs-dismiss=\"modal\">${_(\"Cancel\")}</button>\n                    <button type=\"button\" class=\"btn btn-primary chickenpaint-apply-grid-settings\" data-bs-dismiss=\"modal\">${_(\"Ok\")}</button>\n                </div>\n            </div>\n        </div>\n    `;\n\n    const gridSizeElem = dialog.querySelector(\".chickenpaint-grid-size\");\n    const applyButton = dialog.querySelector(\".chickenpaint-apply-grid-settings\");\n\n    // Bootstrap 5: Modalコンストラクタを使用してモーダルを初期化\n    const modal = new bootstrap.Modal(dialog);\n\n    this.show = function () {\n        // ハンバガーメニューとモーダルの二重表示防止\n        const collapseElement = document.getElementById(\"chickenpaint-main-menu-content\");\n        if (collapseElement && collapseElement.classList.contains(\"show\")) {\n            const bsCollapse = new bootstrap.Collapse(collapseElement, { toggle: false });\n            bsCollapse.hide();\n        }\n        // モーダルを表示\n        modal.show();\n    };\n\n    // グリッドサイズの初期値を設定\n    gridSizeElem.value = canvas.getGridSize();\n\n    // モーダルが閉じられた後にダイアログを削除\n    dialog.addEventListener(\"hidden.bs.modal\", () => {\n        dialog.remove();\n    });\n\n    // 「OK」ボタンのクリックイベント\n    applyButton.addEventListener(\"click\", () => {\n        const gridSize = parseInt(gridSizeElem.value, 10);\n        canvas.setGridSize(gridSize);\n        modal.hide(); // モーダルを手動で閉じる\n    });\n\n    // モーダルが表示されたときに、グリッドサイズの入力フィールドにフォーカス\n    dialog.addEventListener(\"shown.bs.modal\", () => {\n        gridSizeElem.focus();\n    });\n\n    // Enterキーが押されたときの処理\n    dialog.addEventListener(\"keydown\", (e) => {\n        if (e.key === \"Enter\") {\n            e.preventDefault(); // フォーム送信を防ぐ\n            applyButton.click(); // OKボタンをクリックしたことにする\n        }\n    });\n\n    // 親要素にダイアログを追加\n    parent.appendChild(dialog);\n}\n","/*\n    ChickenPaint\n    \n    ChickenPaint is a translation of ChibiPaint from Java to JavaScript\n    by Nicholas Sherlock / Chicken Smoothie.\n    \n    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer\n\n    ChickenPaint is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ChickenPaint is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport * as bootstrap from 'bootstrap/dist/js/bootstrap.bundle.min.js';\nimport EventEmitter from \"wolfy87-eventemitter\";\nimport {_} from \"../languages/lang.js\";\n\nexport default function CPSendDialog(controller, parent, resourceSaver) {\n    let dialog = document.createElement(\"div\");\n    dialog.className = \"modal fade chickenpaint-send-dialog\";\n    dialog.tabIndex = -1;\n    dialog.setAttribute(\"role\", \"dialog\");\n    dialog.innerHTML = `\n        <div class=\"modal-dialog\">\n            <div class=\"modal-content\" data-stage=\"saving\">\n                <div class=\"modal-header\">\n                    <h5 class=\"modal-title\">${_(\"Saving drawing...\")}</h5>\n                    <button type=\"button\" class=\"btn btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                </div>\n                <div class=\"modal-body\">\n                    <p class=\"chickenpaint-saving-progress-message\">${_(\"Preparing your drawing to be saved, please wait...\")}</p>\n                    <pre class=\"chickenpaint-saving-error-message pre-scrollable\" style=\"display: none;\"></pre>\n                    <div class=\"progress\">\n                        <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 0%;\"></div>\n                    </div>\n                </div>\n                <div class=\"modal-footer\">\n                    <button type=\"button\" class=\"btn btn-light chickenpaint-send-cancel\" data-bs-dismiss=\"modal\">${_(\"Cancel\")}</button>\n                </div>\n            </div>\n            <div class=\"modal-content\" data-stage=\"success-not-previously-posted\" style=\"display:none\">\n                <div class=\"modal-header\">\n                    <h5 class=\"modal-title\">${_(\"Drawing saved!\")}</h5>\n                    <button type=\"button\" class=\"btn btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\">\n                    </button>\n                </div>\n                <div class=\"modal-body\">\n                    <p>${_(\"Your drawing has been saved, would you like to post it to the forum now?\")}</p>\n                </div>\n                <div class=\"modal-footer\">\n                    <button type=\"button\" class=\"btn btn-primary chickenpaint-post-drawing\" data-bs-dismiss=\"modal\">${_(\"Yes, post it now\")}</button>\n                    <button type=\"button\" class=\"btn btn-light chickenpaint-continue-drawing\" data-bs-dismiss=\"modal\">${_(\"No, keep drawing\")}</button>\n                    <button type=\"button\" class=\"btn btn-light chickenpaint-exit\" data-bs-dismiss=\"modal\">${_(\"No, quit and I'll finish it later\")}</button>\n                </div>\n            </div>\n            <div class=\"modal-content\" data-stage=\"success-already-posted\" style=\"display:none\">\n                <div class=\"modal-header\">\n                    <h5 class=\"modal-title\">${_(\"Drawing saved!\")}</h5>\n                    <button type=\"button\" class=\"btn btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\">\n                    </button>\n                </div>\n                <div class=\"modal-body\">\n                    <p>${_(\"Your drawing has been saved, would you like to view it on the forum now?\")}</p>\n                </div>\n                <div class=\"modal-footer\">\n                    <button type=\"button\" class=\"btn btn-primary chickenpaint-post-drawing\" data-bs-dismiss=\"modal\">${_(\"Yes, view the post\")}</button>\n                    <button type=\"button\" class=\"btn btn-light chickenpaint-continue-drawing\" data-bs-dismiss=\"modal\">${_(\"No, keep drawing\")}</button>\n                </div>\n            </div>\n            <div class=\"modal-content\" data-stage=\"success-redirect\" style=\"display:none\">\n                <div class=\"modal-header\">\n                    <h5 class=\"modal-title\">${_(\"Drawing saved!\")}</h5>\n                    <button type=\"button\" class=\"btn btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                </div>\n                <div class=\"modal-body\">\n                    <p>${_(\"Your drawing has been saved, redirecting you to view your new post now...\")}</p>\n                </div>\n            </div>\n        </div>\n    `;\n    \n    let progressMessageElem = dialog.querySelector(\".chickenpaint-saving-progress-message\");\n    let progressError = dialog.querySelector(\".chickenpaint-saving-error-message\");\n    let progressElem = dialog.querySelector(\".progress-bar\");\n    let modal = new bootstrap.Modal(dialog);\n    let that = this;\n\n    resourceSaver.on(\"savingProgress\", function(progress, message) {\n        progressMessageElem.textContent = message;\n        progressElem.setAttribute(\"aria-valuenow\", progress * 100);\n        progressElem.style.width = (progress * 100) + \"%\";\n    });\n\n    resourceSaver.on(\"savingComplete\", function () {\n        // \"saving\" ステージを非表示にする\n        dialog.querySelector(\".modal-content[data-stage='saving']\").style.display = \"none\";\n    \n        // CPContinue と CPExit のサポートを確認して、適切なステージを表示する\n        if (controller.isActionSupported(\"CPContinue\")) {\n            if (controller.isActionSupported(\"CPExit\")) {\n                // \"success-not-previously-posted\" ステージを表示\n                dialog.querySelector(\".modal-content[data-stage='success-not-previously-posted']\").style.display = \"block\";\n            } else {\n                // \"success-already-posted\" ステージを表示\n                dialog.querySelector(\".modal-content[data-stage='success-already-posted']\").style.display = \"block\";\n            }\n        } else {\n            // \"success-redirect\" ステージを表示\n            dialog.querySelector(\".modal-content[data-stage='success-redirect']\").style.display = \"block\";\n        }\n    });\n    \n    resourceSaver.on(\"savingFailure\", function(serverMessage) {\n        progressElem.classList.add(\"progress-bar-danger\");\n        let errorMessage = _(\"Sorry, your drawing could not be saved, please try again later.\");\n\n        if (serverMessage) {\n            serverMessage = serverMessage.replace(/^CHIBIERROR\\s*/, \"\");\n            if (serverMessage.length > 0) {\n                errorMessage += `<br><br>${_(\"The error returned from the server was\")}:`;\n                progressError.textContent = serverMessage;\n                progressError.style.display = \"block\";\n            }\n        }\n        progressMessageElem.innerHTML = errorMessage;\n    });\n\n    dialog.querySelector(\".chickenpaint-send-cancel\").addEventListener(\"click\", function () {\n        resourceSaver.cancel();\n    });\n\n    let postButton = dialog.querySelector(\".chickenpaint-post-drawing\");\n    if (postButton) {\n        postButton.addEventListener(\"click\", function() {\n            controller.actionPerformed({ action: \"CPPost\" });\n        });\n    }\n\n    let exitButton = dialog.querySelector(\".chickenpaint-exit\");\n    if (exitButton) {\n        exitButton.style.display = controller.isActionSupported(\"CPExit\") ? \"\" : \"none\";\n        exitButton.addEventListener(\"click\", function() {\n            alert(\"When you want to come back and finish your drawing, just click the 'new drawing' button again and \"\n                + \"you can choose to continue this drawing.\");\n            controller.actionPerformed({ action: \"CPExit\" });\n        });\n    }\n\n    dialog.addEventListener('hidden.bs.modal', () => {\n        dialog.remove();\n    });\n\n    parent.appendChild(dialog);\n\n    this.show = function() {\n        modal.show();\n        that.emitEvent(\"shown\");\n    };\n}\n\nCPSendDialog.prototype = Object.create(EventEmitter.prototype);\nCPSendDialog.prototype.constructor = CPSendDialog;\n\n","import EventEmitter from \"wolfy87-eventemitter\";\n\nconst \n    DEFAULTS = {\n        toolbarStyle: \"new\"\n    },\n\n    LOCAL_STORAGE_KEY_NAME = \"chickenpaint-prefs\";\n\nexport default class CPUserPreferences extends EventEmitter {\n    /**\n     * Either \"new\" or \"old\"\n     */\n    toolbarStyle;\n    \n    constructor() {\n        super();\n\n        this.setDefaults();\n    }\n    \n    setDefaults() {\n        for (let propertyName in DEFAULTS) {\n            if (DEFAULTS.hasOwnProperty(propertyName)) {\n                this.set(propertyName, DEFAULTS[propertyName]);\n            }\n        }\n    }\n    \n    load() {\n        let\n            parsed = {};\n        \n        try {\n            parsed = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY_NAME))\n        } catch (e) {\n            console.error(e);\n        }\n        \n        if (!parsed || typeof parsed !== \"object\") {\n            parsed = {};\n        }\n\n        for (let propertyName in DEFAULTS) {\n            if (DEFAULTS.hasOwnProperty(propertyName)) {\n                // Emit an event for every property even if we only load the default for this prop:\n                try {\n                    this.set(propertyName, parsed.hasOwnProperty(propertyName) ? parsed[propertyName] : DEFAULTS[propertyName]);\n                } catch (e) {\n                    console.error(e);\n                }\n            }\n        }\n    }\n    \n    save() {\n        try {\n            let \n                differsFromDefaults = false;\n\n            for (let propertyName in DEFAULTS) {\n                if (DEFAULTS.hasOwnProperty(propertyName)) {\n                    if (this[propertyName] != DEFAULTS[propertyName]) {\n                        differsFromDefaults = true;\n                        break;\n                    }\n                }\n            }\n            \n            if (differsFromDefaults) {\n                localStorage.setItem(LOCAL_STORAGE_KEY_NAME, JSON.stringify({\n                    toolbarStyle: this.toolbarStyle\n                }));\n            } else {\n                localStorage.removeItem(LOCAL_STORAGE_KEY_NAME);\n            }\n        } catch (e) {\n            // Can't do anything about it if user has LocalStorage disabled\n            console.error(e);\n        }\n    }\n    \n    set(name, value) {\n        this[name] = value;\n        this.emitEvent(name, [value]);\n    }\n    \n    get(name) {\n        return this[name];\n    }\n}\n"],"names":["elementMap","Map","Data","set","element","key","instance","has","instanceMap","get","size","console","error","Array","from","keys","remove","delete","TRANSITION_END","parseSelector","selector","window","CSS","escape","replace","match","id","triggerTransitionEnd","dispatchEvent","Event","isElement","object","jquery","nodeType","getElement","length","document","querySelector","isVisible","getClientRects","elementIsVisible","getComputedStyle","getPropertyValue","closedDetails","closest","summary","parentNode","isDisabled","Node","ELEMENT_NODE","classList","contains","disabled","hasAttribute","getAttribute","findShadowRoot","documentElement","attachShadow","getRootNode","root","ShadowRoot","noop","reflow","offsetHeight","getjQuery","jQuery","body","DOMContentLoadedCallbacks","isRTL","dir","defineJQueryPlugin","plugin","callback","$","name","NAME","JQUERY_NO_CONFLICT","fn","jQueryInterface","Constructor","noConflict","readyState","addEventListener","push","execute","possibleCallback","args","defaultValue","call","executeAfterTransition","transitionElement","waitForTransition","emulatedDuration","transitionDuration","transitionDelay","floatTransitionDuration","Number","parseFloat","floatTransitionDelay","split","getTransitionDurationFromElement","called","handler","target","removeEventListener","setTimeout","getNextActiveElement","list","activeElement","shouldGetNext","isCycleAllowed","listLength","index","indexOf","Math","max","min","namespaceRegex","stripNameRegex","stripUidRegex","eventRegistry","uidEvent","customEvents","mouseenter","mouseleave","nativeEvents","Set","makeEventUid","uid","getElementEvents","findHandler","events","callable","delegationSelector","Object","values","find","event","normalizeParameters","originalTypeEvent","delegationFunction","isDelegated","typeEvent","getTypeEvent","addHandler","oneOff","wrapFunction","relatedTarget","delegateTarget","this","handlers","previousFunction","domElements","querySelectorAll","domElement","hydrateObj","EventHandler","off","type","apply","bootstrapDelegationHandler","bootstrapHandler","removeHandler","Boolean","removeNamespacedHandlers","namespace","storeElementEvent","handlerKey","entries","includes","on","one","inNamespace","isNamespace","startsWith","elementEvent","slice","keyHandlers","trigger","jQueryEvent","bubbles","nativeDispatch","defaultPrevented","isPropagationStopped","isImmediatePropagationStopped","isDefaultPrevented","evt","cancelable","preventDefault","obj","meta","value","_unused","defineProperty","configurable","normalizeData","toString","JSON","parse","decodeURIComponent","normalizeDataKey","chr","toLowerCase","Manipulator","setDataAttribute","setAttribute","removeDataAttribute","removeAttribute","getDataAttributes","attributes","bsKeys","dataset","filter","pureKey","charAt","getDataAttribute","Config","Default","DefaultType","Error","_getConfig","config","_mergeConfigObj","_configAfterMerge","_typeCheckConfig","jsonConfig","constructor","configTypes","property","expectedTypes","valueType","prototype","RegExp","test","TypeError","toUpperCase","BaseComponent","super","_element","_config","DATA_KEY","dispose","EVENT_KEY","propertyName","getOwnPropertyNames","_queueCallback","isAnimated","getInstance","getOrCreateInstance","VERSION","eventName","getSelector","hrefAttribute","trim","map","sel","join","SelectorEngine","concat","Element","findOne","children","child","matches","parents","ancestor","prev","previous","previousElementSibling","next","nextElementSibling","focusableChildren","focusables","el","getSelectorFromElement","getElementFromSelector","getMultipleElementsFromSelector","enableDismissTrigger","component","method","clickEvent","tagName","EVENT_CLOSE","EVENT_CLOSED","Alert","close","_destroyElement","each","data","undefined","SELECTOR_DATA_TOGGLE","Button","toggle","button","EVENT_TOUCHSTART","EVENT_TOUCHMOVE","EVENT_TOUCHEND","EVENT_POINTERDOWN","EVENT_POINTERUP","endCallback","leftCallback","rightCallback","Swipe","isSupported","_deltaX","_supportPointerEvents","PointerEvent","_initEvents","_start","_eventIsPointerPenTouch","clientX","touches","_end","_handleSwipe","_move","absDeltaX","abs","direction","add","pointerType","navigator","maxTouchPoints","DATA_API_KEY","ARROW_LEFT_KEY","ARROW_RIGHT_KEY","ORDER_NEXT","ORDER_PREV","DIRECTION_LEFT","DIRECTION_RIGHT","EVENT_SLIDE","EVENT_SLID","EVENT_KEYDOWN","EVENT_MOUSEENTER","EVENT_MOUSELEAVE","EVENT_DRAG_START","EVENT_LOAD_DATA_API","EVENT_CLICK_DATA_API","CLASS_NAME_CAROUSEL","CLASS_NAME_ACTIVE","SELECTOR_ACTIVE","SELECTOR_ITEM","SELECTOR_ACTIVE_ITEM","KEY_TO_DIRECTION","ARROW_LEFT_KEY$1","ARROW_RIGHT_KEY$1","interval","keyboard","pause","ride","touch","wrap","Carousel","_interval","_activeElement","_isSliding","touchTimeout","_swipeHelper","_indicatorsElement","_addEventListeners","cycle","_slide","nextWhenVisible","hidden","_clearInterval","_updateInterval","setInterval","_maybeEnableCycle","to","items","_getItems","activeIndex","_getItemIndex","_getActive","order","defaultInterval","_keydown","_addTouchEventListeners","img","swipeConfig","_directionToOrder","endCallBack","clearTimeout","_setActiveIndicatorElement","activeIndicator","newActiveIndicator","elementInterval","parseInt","isNext","nextElement","nextElementIndex","triggerEvent","_orderToDirection","isCycling","directionalClassName","orderClassName","completeCallBack","_isAnimated","clearInterval","carousel","slideIndex","carousels","EVENT_SHOW","EVENT_SHOWN","EVENT_HIDE","EVENT_HIDDEN","CLASS_NAME_SHOW","CLASS_NAME_COLLAPSE","CLASS_NAME_COLLAPSING","CLASS_NAME_DEEPER_CHILDREN","parent","Collapse","_isTransitioning","_triggerArray","toggleList","elem","filterElement","foundElement","_initializeChildren","_addAriaAndCollapsedClass","_isShown","hide","show","activeChildren","_getFirstLevelChildren","activeInstance","dimension","_getDimension","style","scrollSize","complete","getBoundingClientRect","selected","triggerArray","isOpen","top","bottom","right","left","auto","basePlacements","start","end","clippingParents","viewport","popper","reference","variationPlacements","reduce","acc","placement","placements","beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite","modifierPhases","getNodeName","nodeName","getWindow","node","ownerDocument","defaultView","isHTMLElement","HTMLElement","isShadowRoot","applyStyles$1","enabled","phase","_ref","state","elements","forEach","styles","assign","effect","_ref2","initialStyles","position","options","strategy","margin","arrow","hasOwnProperty","attribute","requires","getBasePlacement","round","getUAString","uaData","userAgentData","brands","isArray","item","brand","version","userAgent","isLayoutViewport","includeScale","isFixedStrategy","clientRect","scaleX","scaleY","offsetWidth","width","height","visualViewport","addVisualOffsets","x","offsetLeft","y","offsetTop","getLayoutRect","rootNode","isSameNode","host","isTableElement","getDocumentElement","getParentNode","assignedSlot","getTrueOffsetParent","offsetParent","getOffsetParent","isFirefox","currentNode","css","transform","perspective","contain","willChange","getContainingBlock","getMainAxisFromPlacement","within","mathMax","mathMin","mergePaddingObject","paddingObject","expandToHashMap","hashMap","arrow$1","_state$modifiersData$","arrowElement","popperOffsets","modifiersData","basePlacement","axis","len","padding","rects","toPaddingObject","arrowRect","minProp","maxProp","endDiff","startDiff","arrowOffsetParent","clientSize","clientHeight","clientWidth","centerToReference","center","offset","axisProp","centerOffset","_options$element","requiresIfExists","getVariation","unsetSides","mapToStyles","_Object$assign2","popperRect","variation","offsets","gpuAcceleration","adaptive","roundOffsets","isFixed","_offsets$x","_offsets$y","_ref3","hasX","hasY","sideX","sideY","win","heightProp","widthProp","_Object$assign","commonStyles","_ref4","dpr","devicePixelRatio","roundOffsetsByDPR","computeStyles$1","_ref5","_options$gpuAccelerat","_options$adaptive","_options$roundOffsets","passive","eventListeners","_options$scroll","scroll","_options$resize","resize","scrollParents","scrollParent","update","hash","getOppositePlacement","matched","getOppositeVariationPlacement","getWindowScroll","scrollLeft","pageXOffset","scrollTop","pageYOffset","getWindowScrollBarX","isScrollParent","_getComputedStyle","overflow","overflowX","overflowY","getScrollParent","listScrollParents","_element$ownerDocumen","isBody","updatedList","rectToClientRect","rect","getClientRectFromMixedType","clippingParent","html","layoutViewport","getViewportRect","clientTop","clientLeft","getInnerBoundingClientRect","winScroll","scrollWidth","scrollHeight","getDocumentRect","computeOffsets","commonX","commonY","mainAxis","detectOverflow","_options","_options$placement","_options$strategy","_options$boundary","boundary","_options$rootBoundary","rootBoundary","_options$elementConte","elementContext","_options$altBoundary","altBoundary","_options$padding","altContext","clippingClientRect","mainClippingParents","clipperElement","getClippingParents","firstClippingParent","clippingRect","accRect","getClippingRect","contextElement","referenceClientRect","popperClientRect","elementClientRect","overflowOffsets","offsetData","multiply","computeAutoPlacement","flipVariations","_options$allowedAutoP","allowedAutoPlacements","allPlacements","allowedPlacements","overflows","sort","a","b","flip$1","_skip","_options$mainAxis","checkMainAxis","_options$altAxis","altAxis","checkAltAxis","specifiedFallbackPlacements","fallbackPlacements","_options$flipVariatio","preferredPlacement","oppositePlacement","getExpandedFallbackPlacements","referenceRect","checksMap","makeFallbackChecks","firstFittingPlacement","i","_basePlacement","isStartVariation","isVertical","mainVariationSide","altVariationSide","checks","every","check","_loop","_i","fittingPlacement","reset","getSideOffsets","preventedOffsets","isAnySideFullyClipped","some","side","hide$1","preventOverflow","referenceOverflow","popperAltOverflow","referenceClippingOffsets","popperEscapeOffsets","isReferenceHidden","hasPopperEscaped","offset$1","_options$offset","invertDistance","skidding","distance","distanceAndSkiddingToXY","_data$state$placement","popperOffsets$1","preventOverflow$1","_options$tether","tether","_options$tetherOffset","tetherOffset","isBasePlacement","tetherOffsetValue","normalizedTetherOffsetValue","offsetModifierState","_offsetModifierState$","mainSide","altSide","additive","minLen","maxLen","arrowPaddingObject","arrowPaddingMin","arrowPaddingMax","arrowLen","minOffset","maxOffset","clientOffset","offsetModifierValue","tetherMax","preventedOffset","_offsetModifierState$2","_mainSide","_altSide","_offset","_len","_min","_max","isOriginSide","_offsetModifierValue","_tetherMin","_tetherMax","_preventedOffset","v","withinMaxClamp","getCompositeRect","elementOrVirtualElement","isOffsetParentAnElement","offsetParentIsScaled","isElementScaled","modifiers","visited","result","modifier","dep","depModifier","DEFAULT_OPTIONS","areValidElements","arguments","_key","popperGenerator","generatorOptions","_generatorOptions","_generatorOptions$def","defaultModifiers","_generatorOptions$def2","defaultOptions","pending","orderedModifiers","effectCleanupFns","isDestroyed","setOptions","setOptionsAction","cleanupModifierEffects","merged","orderModifiers","current","existing","m","_ref$options","cleanupFn","forceUpdate","_state$elements","_state$orderedModifie","_state$orderedModifie2","Promise","resolve","then","destroy","onFirstUpdate","createPopper","computeStyles","applyStyles","flip","ARROW_UP_KEY","ARROW_DOWN_KEY","EVENT_KEYDOWN_DATA_API","EVENT_KEYUP_DATA_API","SELECTOR_DATA_TOGGLE_SHOWN","SELECTOR_MENU","PLACEMENT_TOP","PLACEMENT_TOPEND","PLACEMENT_BOTTOM","PLACEMENT_BOTTOMEND","PLACEMENT_RIGHT","PLACEMENT_LEFT","autoClose","display","popperConfig","Dropdown","_popper","_parent","_menu","_inNavbar","_detectNavbar","_createPopper","focus","_completeHide","Popper","referenceElement","_getPopperConfig","_getPlacement","parentDropdown","isEnd","_getOffset","popperData","defaultBsPopperConfig","_selectMenuItem","clearMenus","openToggles","context","composedPath","isMenuTarget","dataApiKeydownHandler","isInput","isEscapeEvent","isUpOrDownEvent","getToggleButton","stopPropagation","EVENT_MOUSEDOWN","className","clickCallback","rootElement","Backdrop","_isAppended","_append","_getElement","_emulateAnimation","backdrop","createElement","append","EVENT_FOCUSIN","EVENT_KEYDOWN_TAB","TAB_NAV_BACKWARD","autofocus","trapElement","FocusTrap","_isActive","_lastTabNavDirection","activate","_handleFocusin","_handleKeydown","deactivate","shiftKey","SELECTOR_FIXED_CONTENT","SELECTOR_STICKY_CONTENT","PROPERTY_PADDING","PROPERTY_MARGIN","ScrollBarHelper","getWidth","documentWidth","innerWidth","_disableOverFlow","_setElementAttributes","calculatedValue","_resetElementAttributes","isOverflowing","_saveInitialAttribute","styleProperty","scrollbarWidth","_applyManipulationCallback","setProperty","actualValue","removeProperty","callBack","EVENT_HIDE_PREVENTED","EVENT_RESIZE","EVENT_CLICK_DISMISS","EVENT_MOUSEDOWN_DISMISS","EVENT_KEYDOWN_DISMISS","CLASS_NAME_OPEN","CLASS_NAME_STATIC","Modal","_dialog","_backdrop","_initializeBackDrop","_focustrap","_initializeFocusTrap","_scrollBar","_adjustDialog","_showElement","_hideModal","handleUpdate","modalBody","transitionComplete","_triggerBackdropTransition","event2","_resetAdjustments","isModalOverflowing","initialOverflowY","isBodyOverflowing","paddingLeft","paddingRight","showEvent","alreadyOpen","CLASS_NAME_SHOWING","CLASS_NAME_HIDING","OPEN_SELECTOR","Offcanvas","blur","completeCallback","DefaultAllowlist","area","br","col","code","dd","div","dl","dt","em","hr","h1","h2","h3","h4","h5","h6","li","ol","p","pre","s","small","span","sub","sup","strong","u","ul","uriAttributes","SAFE_URL_PATTERN","allowedAttribute","allowedAttributeList","attributeName","nodeValue","attributeRegex","regex","allowList","content","extraClass","sanitize","sanitizeFn","template","DefaultContentType","entry","TemplateFactory","getContent","_resolvePossibleFunction","hasContent","changeContent","_checkContent","toHtml","templateWrapper","innerHTML","_maybeSanitize","text","_setContent","arg","templateElement","_putElementInTemplate","textContent","unsafeHtml","sanitizeFunction","createdDocument","DOMParser","parseFromString","elementName","attributeList","allowedAttributes","sanitizeHtml","DISALLOWED_ATTRIBUTES","CLASS_NAME_FADE","SELECTOR_TOOLTIP_INNER","SELECTOR_MODAL","EVENT_MODAL_HIDE","TRIGGER_HOVER","TRIGGER_FOCUS","TRIGGER_CLICK","AttachmentMap","AUTO","TOP","RIGHT","BOTTOM","LEFT","animation","container","customClass","delay","title","Tooltip","_isEnabled","_timeout","_isHovered","_activeTrigger","_templateFactory","_newContent","tip","_setListeners","_fixTitle","enable","disable","toggleEnabled","_leave","_enter","_hideModalHandler","_disposePopper","_isWithContent","isInTheDom","_getTipElement","_isWithActiveTrigger","_getTitle","_createTipElement","_getContentForTemplate","_getTemplateFactory","tipId","prefix","floor","random","getElementById","getUID","setContent","_initializeOnDelegatedTarget","_getDelegateConfig","attachment","triggers","eventIn","eventOut","_setTimeout","timeout","dataAttributes","dataAttribute","SELECTOR_TITLE","SELECTOR_CONTENT","Popover","_getContent","EVENT_ACTIVATE","EVENT_CLICK","SELECTOR_TARGET_LINKS","SELECTOR_NAV_LINKS","SELECTOR_LINK_ITEMS","rootMargin","smoothScroll","threshold","ScrollSpy","_targetLinks","_observableSections","_rootElement","_activeTarget","_observer","_previousScrollData","visibleEntryTop","parentScrollTop","refresh","_initializeTargetsAndObservables","_maybeEnableSmoothScroll","disconnect","_getNewObserver","section","observe","observableSection","scrollTo","behavior","IntersectionObserver","_observerCallback","targetElement","_process","userScrollsDown","isIntersecting","_clearActiveClass","entryIsLowerThanPrevious","targetLinks","anchor","decodeURI","_activateParents","listGroup","activeNodes","spy","HOME_KEY","END_KEY","SELECTOR_DROPDOWN_TOGGLE","NOT_SELECTOR_DROPDOWN_TOGGLE","SELECTOR_INNER_ELEM","SELECTOR_DATA_TOGGLE_ACTIVE","Tab","_setInitialAttributes","_getChildren","innerElem","_elemIsActive","active","_getActiveElem","hideEvent","_deactivate","_activate","relatedElem","_toggleDropDown","nextActiveElement","preventScroll","_setAttributeIfNotExists","_setInitialAttributesOnChild","_getInnerElement","isActive","outerElem","_getOuterElement","_setInitialAttributesOnTargetPanel","open","EVENT_MOUSEOVER","EVENT_MOUSEOUT","EVENT_FOCUSOUT","CLASS_NAME_HIDE","autohide","Toast","_hasMouseInteraction","_hasKeyboardInteraction","_clearTimeout","_maybeScheduleHide","isShown","_onInteraction","isInteracting"],"version":3,"file":"c.dd9a59b3.js.map","sourceRoot":"/__parcel_source_root/"}